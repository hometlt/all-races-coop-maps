//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC 2017: The Old City v1.0
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Untitled Custom Script 001
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Hybrid Wave AI
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }

    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF917F4D7_customData[p] = "";

    ta = 0;
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave01_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave2_enabled;
wave[17] aiF917F4D7_wave2_lastWave;
trigger aiF917F4D7_wave2_trigger = null;
int aiF917F4D7_wave2_runPlayer;
playergroup aiF917F4D7_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave2_enabled[init_i] = true;
        aiF917F4D7_wave2_lastWave[init_i] = null;
    }

    aiF917F4D7_wave2_trigger = TriggerCreate("aiF917F4D7_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave2_runPlayer;
    playergroup target = aiF917F4D7_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF917F4D7_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave02_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave2_runPlayer = p;
    aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave3_enabled;
wave[17] aiF917F4D7_wave3_lastWave;
trigger aiF917F4D7_wave3_trigger = null;
int aiF917F4D7_wave3_runPlayer;
playergroup aiF917F4D7_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave3_enabled[init_i] = true;
        aiF917F4D7_wave3_lastWave[init_i] = null;
    }

    aiF917F4D7_wave3_trigger = TriggerCreate("aiF917F4D7_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave3_runPlayer;
    playergroup target = aiF917F4D7_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF917F4D7_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave03_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave3_runPlayer = p;
    aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave4_enabled;
wave[17] aiF917F4D7_wave4_lastWave;
trigger aiF917F4D7_wave4_trigger = null;
int aiF917F4D7_wave4_runPlayer;
playergroup aiF917F4D7_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave4_enabled[init_i] = true;
        aiF917F4D7_wave4_lastWave[init_i] = null;
    }

    aiF917F4D7_wave4_trigger = TriggerCreate("aiF917F4D7_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave4_runPlayer;
    playergroup target = aiF917F4D7_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF917F4D7_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave04_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave4_runPlayer = p;
    aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave5_enabled;
wave[17] aiF917F4D7_wave5_lastWave;
trigger aiF917F4D7_wave5_trigger = null;
int aiF917F4D7_wave5_runPlayer;
playergroup aiF917F4D7_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave5_enabled[init_i] = true;
        aiF917F4D7_wave5_lastWave[init_i] = null;
    }

    aiF917F4D7_wave5_trigger = TriggerCreate("aiF917F4D7_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave5_runPlayer;
    playergroup target = aiF917F4D7_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF917F4D7_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave05_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave5_runPlayer = p;
    aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave6_enabled;
wave[17] aiF917F4D7_wave6_lastWave;
trigger aiF917F4D7_wave6_trigger = null;
int aiF917F4D7_wave6_runPlayer;
playergroup aiF917F4D7_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave6_enabled[init_i] = true;
        aiF917F4D7_wave6_lastWave[init_i] = null;
    }

    aiF917F4D7_wave6_trigger = TriggerCreate("aiF917F4D7_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave6_runPlayer;
    playergroup target = aiF917F4D7_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF917F4D7_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave06_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave6_runPlayer = p;
    aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave7_enabled;
wave[17] aiF917F4D7_wave7_lastWave;
trigger aiF917F4D7_wave7_trigger = null;
int aiF917F4D7_wave7_runPlayer;
playergroup aiF917F4D7_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave7_enabled[init_i] = true;
        aiF917F4D7_wave7_lastWave[init_i] = null;
    }

    aiF917F4D7_wave7_trigger = TriggerCreate("aiF917F4D7_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave7_runPlayer;
    playergroup target = aiF917F4D7_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF917F4D7_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave07_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);

    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave7_runPlayer = p;
    aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
    if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
    if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
    if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
    if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
    if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
    if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
    if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
    if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
    if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
    if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
    if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
    if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
    if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
    if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
    if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
    if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
    if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
    if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
    if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
    if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
    if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
    if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiF917F4D7_wave1_run(p, target, true);
    aiF917F4D7_wave2_run(p, target, true);
    aiF917F4D7_wave3_run(p, target, true);
    aiF917F4D7_wave4_run(p, target, true);
    aiF917F4D7_wave5_run(p, target, true);
    aiF917F4D7_wave6_run(p, target, true);
    aiF917F4D7_wave7_run(p, target, true);

    while (true) {
        aiF917F4D7_wave7_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiF917F4D7_wave1_enable(p, val);
    aiF917F4D7_wave2_enable(p, val);
    aiF917F4D7_wave3_enable(p, val);
    aiF917F4D7_wave4_enable(p, val);
    aiF917F4D7_wave5_enable(p, val);
    aiF917F4D7_wave6_enable(p, val);
    aiF917F4D7_wave7_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);

    TriggerStop(aiF917F4D7_wave1_trigger);
    TriggerStop(aiF917F4D7_wave2_trigger);
    TriggerStop(aiF917F4D7_wave3_trigger);
    TriggerStop(aiF917F4D7_wave4_trigger);
    TriggerStop(aiF917F4D7_wave5_trigger);
    TriggerStop(aiF917F4D7_wave6_trigger);
    TriggerStop(aiF917F4D7_wave7_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_wave2_init();
        aiF917F4D7_wave3_init();
        aiF917F4D7_wave4_init();
        aiF917F4D7_wave5_init();
        aiF917F4D7_wave6_init();
        aiF917F4D7_wave7_init();
        aiF917F4D7_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(0);
        }

        aiF917F4D7_initialized = true;
    }

    AICampaignStart(p);
}


//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC 2017: The Old City v1.0
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_00_NEUTRAL = 0;
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 3;
const int gv_pLAYER_04_ENEMY = 4;
const fixed gv_cOUNTDOWN_SECONDS = 90.0;
const int gv_mAX_ALLOWED_RAIDS = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
int gv_remnantAreasCount;
int gv_remnantAreasRaided;
unit gv_sensorTower;
int gv_sensorTowerPing;
int gv_remnantCurrentBeacon;
int gv_remnantPing;
string gv_remnantActiveRegion;
timer gv_beaconTimer;
timer gv_beaconTimerEnemy;
int gv___countPlayers;
int gv___countEnemies;
bool gv___searchInitiated;
bool gv___sendingWaveToObjective;
point gv_victoryCompletePan;
point gv_attackWaveA_Wave05Path;
region[3][11] gv_attackSpawn;
int gv_objectiveRemnantAreas;
int gv_objectiveNoMoreThanRaided;
int gv_bonusDestroySensorTower;

void InitGlobals () {
    gv_enemyGroup = PlayerGroupEmpty();
    gv_sensorTowerPing = c_invalidPingId;
    gv_remnantPing = c_invalidPingId;
    gv_remnantActiveRegion = "";
    gv_beaconTimer = TimerCreate();
    gv_beaconTimerEnemy = TimerCreate();
    gv_objectiveRemnantAreas = c_invalidObjectiveId;
    gv_objectiveNoMoreThanRaided = c_invalidObjectiveId;
    gv_bonusDestroySensorTower = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_PlayGhostTransmission (soundlink lp_soundLink, text lp_text, fixed lp_time);
point gf_AttackWaveSpawn ();
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartGameQ;
trigger gt_AutoUpdateRemnantAreaCount;
trigger gt_AutoUpdateRaidedAreas;
trigger gt_HideActiveArea;
trigger gt_bonusobjectivehandler;
trigger gt_PingNextBeacon;
trigger gt_Attachregions;
trigger gt_Beacontimer;
trigger gt_Beacontimerenemy;
trigger gt_Beaconregionunitenters;
trigger gt_Beaconregionunitleaves;
trigger gt_Beaconregionunitdies;
trigger gt_Beaconregioncheck;
trigger gt_Beaconregionsendwaves;
trigger gt_Beaconregionunitenters2;
trigger gt_Beaconregionunitleaves2;
trigger gt_Beaconregionunitdies2;
trigger gt_Beaconregioncheck2;
trigger gt_Beaconregionsendwaves2;
trigger gt_Beaconregionunitenters3;
trigger gt_Beaconregionunitleaves3;
trigger gt_Beaconregionunitdies3;
trigger gt_Beaconregioncheck3;
trigger gt_Beaconregionsendwaves3;
trigger gt_Beaconregionunitenters4;
trigger gt_Beaconregionunitleaves4;
trigger gt_Beaconregionunitdies4;
trigger gt_Beaconregioncheck4;
trigger gt_Beaconregionsendwaves4;
trigger gt_Beaconregionunitenters5;
trigger gt_Beaconregionunitleaves5;
trigger gt_Beaconregionunitdies5;
trigger gt_Beaconregioncheck5;
trigger gt_Beaconregionsendwaves5;
trigger gt_Beaconregionunitenters6;
trigger gt_Beaconregionunitleaves6;
trigger gt_Beaconregionunitdies6;
trigger gt_Beaconregioncheck6;
trigger gt_Beaconregionsendwaves6;
trigger gt_Beaconregionunitenters7;
trigger gt_Beaconregionunitleaves7;
trigger gt_Beaconregionunitdies7;
trigger gt_Beaconregioncheck7;
trigger gt_Beaconregionsendwaves7;
trigger gt_EnemyAttackingSetupevent;
trigger gt_EnemtyAttackingSendtransmission;
trigger gt_ShowGhostPortrait;
trigger gt_DefeatBaseDead;
trigger gt_DefeatNoMoreThanXareasRaidedFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_StartAI;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_ObjectiveRemnantAreasCreate;
trigger gt_ObjectiveRemnantAreasUpdate;
trigger gt_ObjectiveRemnantAreasComplete;
trigger gt_ObjectiveRemnantAreasFailed;
trigger gt_ObjectiveNoMoreThanRaidedCreate;
trigger gt_ObjectiveNoMoreThanRaidedUpdate;
trigger gt_ObjectiveNoMoreThanRaidedComplete;
trigger gt_ObjectiveNoMoreThanRaidedFailed;
trigger gt_BonusDestroySensorTowerCreate;
trigger gt_BonusDestroySensorTowerComplete;
trigger gt_BonusDestroySensorTowerUpdate;
trigger gt_BonusDestroySensorTowerFailed;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;

void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;

    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}

bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;

    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }

    return true;
}

void gf_PlayGhostTransmission (soundlink lp_soundLink, text lp_text, fixed lp_time) {
    // Implementation
    TransmissionClearAll();
    TriggerExecute(gt_ShowGhostPortrait, false, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "", lp_soundLink, StringExternal("Param/Value/174D72EC"), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(lp_time, c_timeReal);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), PlayerGroupAll(), false, false);
    TransmissionClearAll();
    TriggerStop(gt_ShowGhostPortrait);
}

point gf_AttackWaveSpawn () {
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;

    // Variable Initialization

    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    return RegionGetCenter(RegionFromId(9));
}

trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
		}
		
    TriggerExecute(gt_Init02Players, true, false);
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    playergroup autoE0EF2853_g;
    int autoE0EF2853_p;
    playergroup autoB969537F_g;
    int autoB969537F_p;

    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetPlayerGroupAlliance(libCOMI_gf_HumanPlayers(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    autoE0EF2853_g = gv_enemyGroup; 
    autoE0EF2853_p = 1;
    for ( ; autoE0EF2853_p <= PlayerGroupCount(autoE0EF2853_g) ; autoE0EF2853_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p)) ) {
        lv_playerIterEnemy = PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p);
        PlayerSetState(lv_playerIterEnemy, c_playerStateMineralCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(lv_playerIterEnemy, libCOMI_gf_EnemyPlayerColor(), true);
        autoB969537F_g = libCOMI_gf_HumanPlayers();
        autoB969537F_p = 1;
        for ( ; autoB969537F_p <= PlayerGroupCount(autoB969537F_g) ; autoB969537F_p += BoolToInt(lv_playerIterAlly == PlayerGroupPlayer(autoB969537F_g, autoB969537F_p)) ) {
            lv_playerIterAlly = PlayerGroupPlayer(autoB969537F_g, autoB969537F_p);
            libNtve_gf_SetAlliance(lv_playerIterAlly, lv_playerIterEnemy, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    PlayerSetAlliance(gv_pLAYER_03_ENEMY, c_allianceIdPower, gv_pLAYER_04_ENEMY, true);
    PlayerSetAlliance(gv_pLAYER_04_ENEMY, c_allianceIdPower, gv_pLAYER_03_ENEMY, true);
    libCOMI_gf_SetAlliedCommandersstartingResources();
    PlayerSetDifficulty(gv_pLAYER_01_USER, 2);
    PlayerSetDifficulty(gv_pLAYER_02_USER, 2);
    PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 2);
    PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init04Technology, true, false);
    libCOMI_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    libCOMI_gf_PlayMapIntroZoom(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("00");
    GameSetToDLighting("KorhalNight");
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
        UnitRemove(UnitFromId(211));
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
        UnitRemove(UnitFromId(134));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/068743D5"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/187E0E6E"), null, PlayerStartLocation(gv_pLAYER_02_USER));
    Wait(4.0, c_timeReal);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_PlayGhostTransmission(SoundLink("001GhostDebriefing1", -1), StringExternal("Param/Value/17E5C496"), 4.8);
    gf_PlayGhostTransmission(SoundLink("001GhostDebriefing2", -1), StringExternal("Param/Value/26540263"), 2.9);
    gf_PlayGhostTransmission(SoundLink("001GhostHighlightFirstObjective", -1), StringExternal("Param/Value/B19FF824"), 3.4);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveRemnantAreasCreate, true, true);
    TriggerExecute(gt_PingNextBeacon, true, false);
    TriggerExecute(gt_ObjectiveNoMoreThanRaidedCreate, true, true);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Update Remnant Area Count
//--------------------------------------------------------------------------------------------------
bool gt_AutoUpdateRemnantAreaCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_totalRemantAreas;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_totalRemantAreas += TechTreeUnitCount(gv_pLAYER_00_NEUTRAL, "Beacon_Nova", c_techCountQueuedOrBetter);
    gv_remnantAreasCount = lv_totalRemantAreas;
    if ((lv_totalRemantAreas == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    }

    TriggerExecute(gt_ObjectiveRemnantAreasUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoUpdateRemnantAreaCount_Init () {
    gt_AutoUpdateRemnantAreaCount = TriggerCreate("gt_AutoUpdateRemnantAreaCount_Func");
    TriggerAddEventTimePeriodic(gt_AutoUpdateRemnantAreaCount, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Update Raided Areas
//--------------------------------------------------------------------------------------------------
bool gt_AutoUpdateRaidedAreas_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_remnantAreasRaided <= gv_mAX_ALLOWED_RAIDS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_remnantAreasRaided = (gv_remnantAreasRaided + 1);
    TriggerExecute(gt_ObjectiveRemnantAreasUpdate, true, false);
    TriggerExecute(gt_HideActiveArea, true, false);
    if ((gv_remnantAreasRaided < gv_mAX_ALLOWED_RAIDS)) {
        gf_PlayGhostTransmission(SoundLink("001GhostHighlightNextObjective3", -1), StringExternal("Param/Value/73639E09"), 3.6);
    }
    else {
        TriggerExecute(gt_ObjectiveNoMoreThanRaidedUpdate, true, false);
        TriggerExecute(gt_DefeatNoMoreThanXareasRaidedFailed, true, false);
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_PingNextBeacon, true, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoUpdateRaidedAreas_Init () {
    gt_AutoUpdateRaidedAreas = TriggerCreate("gt_AutoUpdateRaidedAreas_Func");
    TriggerAddEventTimer(gt_AutoUpdateRaidedAreas, gv_beaconTimerEnemy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Active Area
//--------------------------------------------------------------------------------------------------
bool gt_HideActiveArea_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_ShowHidePingCoop(gv_remnantPing, false);
    libNtve_gf_ShowHideUnit(RegionGetAttachUnit(RegionFromName(gv_remnantActiveRegion)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideActiveArea_Init () {
    gt_HideActiveArea = TriggerCreate("gt_HideActiveArea_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: bonus objective handler
//--------------------------------------------------------------------------------------------------
bool gt_bonusobjectivehandler_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Bonus Objective")), gv_pLAYER_03_ENEMY) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_sensorTower) != true)) {
        libCOMI_gf_DestroyPingCoop(gv_sensorTowerPing);
        TriggerExecute(gt_BonusDestroySensorTowerComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bonusobjectivehandler_Init () {
    gt_bonusobjectivehandler = TriggerCreate("gt_bonusobjectivehandler_Func");
    TriggerAddEventUnitDied(gt_bonusobjectivehandler, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Next Beacon
//--------------------------------------------------------------------------------------------------
bool gt_PingNextBeacon_Func (bool testConds, bool runActions) {
    int auto55B1C539_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    TimerRestart(gv_beaconTimer);
    TimerRestart(gv_beaconTimerEnemy);
    TimerPause(gv_beaconTimer, true);
    TimerPause(gv_beaconTimerEnemy, true);
    auto55B1C539_val = (gv_remnantCurrentBeacon + 1);
    if (auto55B1C539_val == 2) {
        libNtve_gf_ShowHideUnit(UnitFromId(1372509776), false);
        UnitRemove(UnitFromId(1372509776));
        libNtve_gf_ShowHideUnit(UnitFromId(1429961494), true);
        PingSetUnit(gv_remnantPing, UnitFromId(1429961494));
        gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        TriggerExecute(gt_Beaconregioncheck, true, false);
    }
    else if (auto55B1C539_val == 3) {
        libNtve_gf_ShowHideUnit(UnitFromId(1429961494), false);
        UnitRemove(UnitFromId(1429961494));
        libNtve_gf_ShowHideUnit(UnitFromId(176127085), true);
        PingSetUnit(gv_remnantPing, UnitFromId(176127085));
        gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if (auto55B1C539_val == 4) {
        libNtve_gf_ShowHideUnit(UnitFromId(176127085), false);
        UnitRemove(UnitFromId(176127085));
        libNtve_gf_ShowHideUnit(UnitFromId(1769265926), true);
        PingSetUnit(gv_remnantPing, UnitFromId(1769265926));
        gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if (auto55B1C539_val == 5) {
        libNtve_gf_ShowHideUnit(UnitFromId(1769265926), false);
        UnitRemove(UnitFromId(1769265926));
        libNtve_gf_ShowHideUnit(UnitFromId(2088550086), true);
        PingSetUnit(gv_remnantPing, UnitFromId(2088550086));
        gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if (auto55B1C539_val == 6) {
        libNtve_gf_ShowHideUnit(UnitFromId(2088550086), false);
        UnitRemove(UnitFromId(2088550086));
        libNtve_gf_ShowHideUnit(UnitFromId(382118130), true);
        PingSetUnit(gv_remnantPing, UnitFromId(382118130));
        gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if (auto55B1C539_val == 7) {
        libNtve_gf_ShowHideUnit(UnitFromId(382118130), false);
        UnitRemove(UnitFromId(382118130));
        libNtve_gf_ShowHideUnit(UnitFromId(82102772), true);
        PingSetUnit(gv_remnantPing, UnitFromId(82102772));
        gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if (auto55B1C539_val == 8) {
        libNtve_gf_ShowHideUnit(UnitFromId(82102772), false);
        UnitRemove(UnitFromId(82102772));
        libCOMI_gf_DestroyPingCoop(gv_remnantPing);
        gv___countPlayers = 0;
        gv___countEnemies = 0;
    }
    else {
        libNtve_gf_ShowHideUnit(UnitFromId(1372509776), true);
        PingCreate(libCOMI_gf_HumanPlayers(), "PingObjective", UnitGetPosition(UnitFromId(1372509776)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CD29BBF0"));
        gv_remnantPing = PingLastCreated();
        gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        TriggerExecute(gt_Beaconregioncheck, true, false);
    }
    gv_remnantCurrentBeacon = (gv_remnantCurrentBeacon + 1);
    gv_remnantActiveRegion = ("Beacon Region 00" + IntToString(gv_remnantCurrentBeacon));
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    libCOMI_gf_ShowHidePingCoop(gv_remnantPing, true);
    if ((gv_remnantCurrentBeacon > 1) && (gv_remnantCurrentBeacon <= 7) && (gv_remnantAreasRaided < gv_mAX_ALLOWED_RAIDS)) {
        gf_PlayGhostTransmission(SoundLink("001GhostHighlightNextObjective", -1), StringExternal("Param/Value/64FDA3EA"), 3.0);
    }

    if ((gv_remnantCurrentBeacon == 5)) {
        Wait(5.0, c_timeGame);
        gf_PlayGhostTransmission(SoundLink("001GhostHighlightBonus", -1), StringExternal("Param/Value/82B1B9A2"), 4.5);
        TriggerExecute(gt_BonusDestroySensorTowerCreate, true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingNextBeacon_Init () {
    gt_PingNextBeacon = TriggerCreate("gt_PingNextBeacon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach regions
//--------------------------------------------------------------------------------------------------
bool gt_Attachregions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    RegionAttachToUnit(RegionFromId(10), UnitFromId(1372509776), Point(0.0, 0.0));
    RegionAttachToUnit(RegionFromId(11), UnitFromId(1429961494), Point(0.0, 0.0));
    RegionAttachToUnit(RegionFromId(12), UnitFromId(176127085), Point(0.0, 0.0));
    RegionAttachToUnit(RegionFromId(15), UnitFromId(1769265926), Point(0.0, 0.0));
    RegionAttachToUnit(RegionFromId(16), UnitFromId(2088550086), Point(0.0, 0.0));
    RegionAttachToUnit(RegionFromId(17), UnitFromId(382118130), Point(0.0, 0.0));
    RegionAttachToUnit(RegionFromId(18), UnitFromId(82102772), Point(0.0, 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Attachregions_Init () {
    gt_Attachregions = TriggerCreate("gt_Attachregions_Func");
    TriggerAddEventTimeElapsed(gt_Attachregions, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon timer
//--------------------------------------------------------------------------------------------------
bool gt_Beacontimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_beaconTimer, gv_cOUNTDOWN_SECONDS, false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(gv_beaconTimer, StringExternal("Param/Value/D2B868DE"), true, false);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_ObjectiveNoMoreThanRaidedUpdate, true, false);
        if ((TimerIsPaused(gv_beaconTimer) == false) && (TimerGetRemaining(gv_beaconTimer) <= 0.0)) {
            TriggerExecute(gt_PingNextBeacon, true, false);
        }

        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beacontimer_Init () {
    gt_Beacontimer = TriggerCreate("gt_Beacontimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon timer enemy
//--------------------------------------------------------------------------------------------------
bool gt_Beacontimerenemy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(gv_beaconTimerEnemy, gv_cOUNTDOWN_SECONDS, false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(gv_beaconTimerEnemy, StringExternal("Param/Value/A28C9847"), true, false);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_ObjectiveNoMoreThanRaidedUpdate, true, false);
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beacontimerenemy_Init () {
    gt_Beacontimerenemy = TriggerCreate("gt_Beacontimerenemy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit enters
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitenters_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 001")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    if ((TimerIsPaused(gv_beaconTimer) == true)) {
        TimerPause(gv_beaconTimer, false);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == true)) {
        TimerPause(gv_beaconTimerEnemy, false);
    }

    TriggerExecute(gt_Beaconregioncheck, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitenters_Init () {
    gt_Beaconregionunitenters = TriggerCreate("gt_Beaconregionunitenters_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitenters, null, RegionFromName("Beacon Region 001"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit leaves
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitleaves_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 001")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((TimerIsPaused(gv_beaconTimer) == false)) {
        TimerPause(gv_beaconTimer, true);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == false)) {
        TimerPause(gv_beaconTimerEnemy, true);
    }

    TriggerExecute(gt_Beaconregioncheck, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitleaves_Init () {
    gt_Beaconregionunitleaves = TriggerCreate("gt_Beaconregionunitleaves_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitleaves, null, RegionFromName("Beacon Region 001"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit dies
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitdies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 001")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 001"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_Beaconregioncheck, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitdies_Init () {
    gt_Beaconregionunitdies = TriggerCreate("gt_Beaconregionunitdies_Func");
    TriggerAddEventUnitDied(gt_Beaconregionunitdies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - check
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregioncheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 001")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv___countPlayers > 0)) {
            TimerPause(gv_beaconTimer, false);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies > 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, false);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies == 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregioncheck_Init () {
    gt_Beaconregioncheck = TriggerCreate("gt_Beaconregioncheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - send waves
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionsendwaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 001")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }

        if (!(((GameGetMissionTime() > 240.0) || (gv___searchInitiated == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv___sendingWaveToObjective = true;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetRegion(gv_pLAYER_03_ENEMY, RegionFromId(10), 0);
    AIAttackWaveSetTargetRegion(gv_pLAYER_04_ENEMY, RegionFromId(10), 0);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, PointFromName("Spawn Point Beacon 1 - 2"), "Reaper");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    Wait(20.0, c_timeGame);
    gv___sendingWaveToObjective = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionsendwaves_Init () {
    gt_Beaconregionsendwaves = TriggerCreate("gt_Beaconregionsendwaves_Func");
    TriggerAddEventTimePeriodic(gt_Beaconregionsendwaves, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit enters 2
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitenters2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 002")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    if ((TimerIsPaused(gv_beaconTimer) == true)) {
        TimerPause(gv_beaconTimer, false);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == true)) {
        TimerPause(gv_beaconTimerEnemy, false);
    }

    TriggerExecute(gt_Beaconregioncheck2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitenters2_Init () {
    gt_Beaconregionunitenters2 = TriggerCreate("gt_Beaconregionunitenters2_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitenters2, null, RegionFromName("Beacon Region 002"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit leaves 2
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitleaves2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 002")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((TimerIsPaused(gv_beaconTimer) == false)) {
        TimerPause(gv_beaconTimer, true);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == false)) {
        TimerPause(gv_beaconTimerEnemy, true);
    }

    TriggerExecute(gt_Beaconregioncheck2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitleaves2_Init () {
    gt_Beaconregionunitleaves2 = TriggerCreate("gt_Beaconregionunitleaves2_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitleaves2, null, RegionFromName("Beacon Region 002"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit dies 2
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitdies2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 002")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 002"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_Beaconregioncheck2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitdies2_Init () {
    gt_Beaconregionunitdies2 = TriggerCreate("gt_Beaconregionunitdies2_Func");
    TriggerAddEventUnitDied(gt_Beaconregionunitdies2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - check 2
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregioncheck2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 002")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv___countPlayers > 0)) {
            TimerPause(gv_beaconTimer, false);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies > 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, false);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies == 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregioncheck2_Init () {
    gt_Beaconregioncheck2 = TriggerCreate("gt_Beaconregioncheck2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - send waves 2
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionsendwaves2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 002")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }

        if (!(((GameGetMissionTime() > 240.0) || (gv___searchInitiated == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv___sendingWaveToObjective = true;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetRegion(gv_pLAYER_03_ENEMY, RegionFromId(11), 0);
    AIAttackWaveSetTargetRegion(gv_pLAYER_04_ENEMY, RegionFromId(11), 0);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromName("Spawn Point Beacon 1 - 2"), "Marine");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    Wait(20.0, c_timeGame);
    gv___sendingWaveToObjective = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionsendwaves2_Init () {
    gt_Beaconregionsendwaves2 = TriggerCreate("gt_Beaconregionsendwaves2_Func");
    TriggerAddEventTimePeriodic(gt_Beaconregionsendwaves2, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit enters 3
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitenters3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 003")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    if ((TimerIsPaused(gv_beaconTimer) == true)) {
        TimerPause(gv_beaconTimer, false);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == true)) {
        TimerPause(gv_beaconTimerEnemy, false);
    }

    TriggerExecute(gt_Beaconregioncheck3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitenters3_Init () {
    gt_Beaconregionunitenters3 = TriggerCreate("gt_Beaconregionunitenters3_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitenters3, null, RegionFromName("Beacon Region 003"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit leaves 3
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitleaves3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 003")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((TimerIsPaused(gv_beaconTimer) == false)) {
        TimerPause(gv_beaconTimer, true);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == false)) {
        TimerPause(gv_beaconTimerEnemy, true);
    }

    TriggerExecute(gt_Beaconregioncheck3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitleaves3_Init () {
    gt_Beaconregionunitleaves3 = TriggerCreate("gt_Beaconregionunitleaves3_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitleaves3, null, RegionFromName("Beacon Region 003"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit dies 3
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitdies3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 003")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 003"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_Beaconregioncheck3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitdies3_Init () {
    gt_Beaconregionunitdies3 = TriggerCreate("gt_Beaconregionunitdies3_Func");
    TriggerAddEventUnitDied(gt_Beaconregionunitdies3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - check 3
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregioncheck3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 003")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv___countPlayers > 0)) {
            TimerPause(gv_beaconTimer, false);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies > 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, false);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies == 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregioncheck3_Init () {
    gt_Beaconregioncheck3 = TriggerCreate("gt_Beaconregioncheck3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - send waves 3
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionsendwaves3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 003")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }

        if (!(((GameGetMissionTime() > 240.0) || (gv___searchInitiated == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv___sendingWaveToObjective = true;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetRegion(gv_pLAYER_03_ENEMY, RegionFromId(12), 0);
    AIAttackWaveSetTargetRegion(gv_pLAYER_04_ENEMY, RegionFromId(12), 0);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromName("Spawn Point Beacon 3"), "Marine");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    Wait(20.0, c_timeGame);
    gv___sendingWaveToObjective = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionsendwaves3_Init () {
    gt_Beaconregionsendwaves3 = TriggerCreate("gt_Beaconregionsendwaves3_Func");
    TriggerAddEventTimePeriodic(gt_Beaconregionsendwaves3, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit enters 4
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitenters4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 004")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    if ((TimerIsPaused(gv_beaconTimer) == true)) {
        TimerPause(gv_beaconTimer, false);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == true)) {
        TimerPause(gv_beaconTimerEnemy, false);
    }

    TriggerExecute(gt_Beaconregioncheck4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitenters4_Init () {
    gt_Beaconregionunitenters4 = TriggerCreate("gt_Beaconregionunitenters4_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitenters4, null, RegionFromName("Beacon Region 004"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit leaves 4
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitleaves4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 004")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((TimerIsPaused(gv_beaconTimer) == false)) {
        TimerPause(gv_beaconTimer, true);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == false)) {
        TimerPause(gv_beaconTimerEnemy, true);
    }

    TriggerExecute(gt_Beaconregioncheck4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitleaves4_Init () {
    gt_Beaconregionunitleaves4 = TriggerCreate("gt_Beaconregionunitleaves4_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitleaves4, null, RegionFromName("Beacon Region 004"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit dies 4
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitdies4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 004")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 004"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_Beaconregioncheck4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitdies4_Init () {
    gt_Beaconregionunitdies4 = TriggerCreate("gt_Beaconregionunitdies4_Func");
    TriggerAddEventUnitDied(gt_Beaconregionunitdies4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - check 4
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregioncheck4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 004")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv___countPlayers > 0)) {
            TimerPause(gv_beaconTimer, false);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies > 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, false);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies == 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregioncheck4_Init () {
    gt_Beaconregioncheck4 = TriggerCreate("gt_Beaconregioncheck4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - send waves 4
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionsendwaves4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 004")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }

        if (!(((GameGetMissionTime() > 240.0) || (gv___searchInitiated == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv___sendingWaveToObjective = true;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetRegion(gv_pLAYER_03_ENEMY, RegionFromId(15), 0);
    AIAttackWaveSetTargetRegion(gv_pLAYER_04_ENEMY, RegionFromId(15), 0);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromName("Spawn Point Beacon 4"), "Marine");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    Wait(20.0, c_timeGame);
    gv___sendingWaveToObjective = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionsendwaves4_Init () {
    gt_Beaconregionsendwaves4 = TriggerCreate("gt_Beaconregionsendwaves4_Func");
    TriggerAddEventTimePeriodic(gt_Beaconregionsendwaves4, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit enters 5
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitenters5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 005")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    if ((TimerIsPaused(gv_beaconTimer) == true)) {
        TimerPause(gv_beaconTimer, false);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == true)) {
        TimerPause(gv_beaconTimerEnemy, false);
    }

    TriggerExecute(gt_Beaconregioncheck5, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitenters5_Init () {
    gt_Beaconregionunitenters5 = TriggerCreate("gt_Beaconregionunitenters5_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitenters5, null, RegionFromName("Beacon Region 005"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit leaves 5
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitleaves5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 005")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((TimerIsPaused(gv_beaconTimer) == false)) {
        TimerPause(gv_beaconTimer, true);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == false)) {
        TimerPause(gv_beaconTimerEnemy, true);
    }

    TriggerExecute(gt_Beaconregioncheck5, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitleaves5_Init () {
    gt_Beaconregionunitleaves5 = TriggerCreate("gt_Beaconregionunitleaves5_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitleaves5, null, RegionFromName("Beacon Region 005"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit dies 5
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitdies5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 005")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 005"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_Beaconregioncheck5, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitdies5_Init () {
    gt_Beaconregionunitdies5 = TriggerCreate("gt_Beaconregionunitdies5_Func");
    TriggerAddEventUnitDied(gt_Beaconregionunitdies5, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - check 5
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregioncheck5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 005")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv___countPlayers > 0)) {
            TimerPause(gv_beaconTimer, false);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies > 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, false);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies == 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregioncheck5_Init () {
    gt_Beaconregioncheck5 = TriggerCreate("gt_Beaconregioncheck5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - send waves 5
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionsendwaves5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 005")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }

        if (!(((GameGetMissionTime() > 240.0) || (gv___searchInitiated == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv___sendingWaveToObjective = true;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetRegion(gv_pLAYER_03_ENEMY, RegionFromId(16), 0);
    AIAttackWaveSetTargetRegion(gv_pLAYER_04_ENEMY, RegionFromId(16), 0);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromName("Spawn Point Beacon 5"), "Marine");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    Wait(20.0, c_timeGame);
    gv___sendingWaveToObjective = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionsendwaves5_Init () {
    gt_Beaconregionsendwaves5 = TriggerCreate("gt_Beaconregionsendwaves5_Func");
    TriggerAddEventTimePeriodic(gt_Beaconregionsendwaves5, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit enters 6
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitenters6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 006")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    if ((TimerIsPaused(gv_beaconTimer) == true)) {
        TimerPause(gv_beaconTimer, false);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == true)) {
        TimerPause(gv_beaconTimerEnemy, false);
    }

    TriggerExecute(gt_Beaconregioncheck6, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitenters6_Init () {
    gt_Beaconregionunitenters6 = TriggerCreate("gt_Beaconregionunitenters6_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitenters6, null, RegionFromName("Beacon Region 006"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit leaves 6
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitleaves6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 006")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((TimerIsPaused(gv_beaconTimer) == false)) {
        TimerPause(gv_beaconTimer, true);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == false)) {
        TimerPause(gv_beaconTimerEnemy, true);
    }

    TriggerExecute(gt_Beaconregioncheck6, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitleaves6_Init () {
    gt_Beaconregionunitleaves6 = TriggerCreate("gt_Beaconregionunitleaves6_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitleaves6, null, RegionFromName("Beacon Region 006"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit dies 6
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitdies6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 006")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 006"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_Beaconregioncheck6, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitdies6_Init () {
    gt_Beaconregionunitdies6 = TriggerCreate("gt_Beaconregionunitdies6_Func");
    TriggerAddEventUnitDied(gt_Beaconregionunitdies6, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - check 6
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregioncheck6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 006")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv___countPlayers > 0)) {
            TimerPause(gv_beaconTimer, false);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies > 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, false);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies == 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregioncheck6_Init () {
    gt_Beaconregioncheck6 = TriggerCreate("gt_Beaconregioncheck6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - send waves 6
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionsendwaves6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 006")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }

        if (!(((GameGetMissionTime() > 240.0) || (gv___searchInitiated == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv___sendingWaveToObjective = true;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetRegion(gv_pLAYER_03_ENEMY, RegionFromId(17), 0);
    AIAttackWaveSetTargetRegion(gv_pLAYER_04_ENEMY, RegionFromId(17), 0);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromName("Spawn Point Beacon 6"), "Marine");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    Wait(20.0, c_timeGame);
    gv___sendingWaveToObjective = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionsendwaves6_Init () {
    gt_Beaconregionsendwaves6 = TriggerCreate("gt_Beaconregionsendwaves6_Func");
    TriggerAddEventTimePeriodic(gt_Beaconregionsendwaves6, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit enters 7
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitenters7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 007")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Beacontimer, true, false);
    TriggerExecute(gt_Beacontimerenemy, true, false);
    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((gv___countPlayers > 0)) {
        gv___searchInitiated = true;
    }
    else {
        gv___searchInitiated = false;
    }
    if ((TimerIsPaused(gv_beaconTimer) == true)) {
        TimerPause(gv_beaconTimer, false);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == true)) {
        TimerPause(gv_beaconTimerEnemy, false);
    }

    TriggerExecute(gt_Beaconregioncheck7, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitenters7_Init () {
    gt_Beaconregionunitenters7 = TriggerCreate("gt_Beaconregionunitenters7_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitenters7, null, RegionFromName("Beacon Region 007"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit leaves 7
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitleaves7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 007")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((TimerIsPaused(gv_beaconTimer) == false)) {
        TimerPause(gv_beaconTimer, true);
    }

    if ((TimerIsPaused(gv_beaconTimerEnemy) == false)) {
        TimerPause(gv_beaconTimerEnemy, true);
    }

    TriggerExecute(gt_Beaconregioncheck7, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitleaves7_Init () {
    gt_Beaconregionunitleaves7 = TriggerCreate("gt_Beaconregionunitleaves7_Func");
    TriggerAddEventUnitRegion(gt_Beaconregionunitleaves7, null, RegionFromName("Beacon Region 007"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - unit dies 7
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionunitdies7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 007")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv___countPlayers = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv___countEnemies = UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromName("Beacon Region 007"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TriggerExecute(gt_Beaconregioncheck7, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionunitdies7_Init () {
    gt_Beaconregionunitdies7 = TriggerCreate("gt_Beaconregionunitdies7_Func");
    TriggerAddEventUnitDied(gt_Beaconregionunitdies7, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - check 7
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregioncheck7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 007")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv___countPlayers > 0)) {
            TimerPause(gv_beaconTimer, false);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies > 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, false);
        }
        else if ((gv___countPlayers == 0) && (gv___countEnemies == 0)) {
            TimerPause(gv_beaconTimer, true);
            TimerPause(gv_beaconTimerEnemy, true);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregioncheck7_Init () {
    gt_Beaconregioncheck7 = TriggerCreate("gt_Beaconregioncheck7_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon region - send waves 7
//--------------------------------------------------------------------------------------------------
bool gt_Beaconregionsendwaves7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(RegionGetAttachUnit(RegionFromName("Beacon Region 007")), gv_pLAYER_00_NEUTRAL) == true))) {
            return false;
        }

        if (!(((GameGetMissionTime() > 240.0) || (gv___searchInitiated == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv___sendingWaveToObjective = true;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetRegion(gv_pLAYER_03_ENEMY, RegionFromId(18), 0);
    AIAttackWaveSetTargetRegion(gv_pLAYER_04_ENEMY, RegionFromId(18), 0);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromName("Spawn Point Beacon 7"), "HybridDestroyer");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    Wait(20.0, c_timeGame);
    gv___sendingWaveToObjective = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beaconregionsendwaves7_Init () {
    gt_Beaconregionsendwaves7 = TriggerCreate("gt_Beaconregionsendwaves7_Func");
    TriggerAddEventTimePeriodic(gt_Beaconregionsendwaves7, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking - Setup event
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingSetupevent_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TriggerExecute(gt_EnemtyAttackingSendtransmission, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingSetupevent_Init () {
    gt_EnemyAttackingSetupevent = TriggerCreate("gt_EnemyAttackingSetupevent_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingSetupevent, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingSetupevent, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemty Attacking - Send transmission
//--------------------------------------------------------------------------------------------------
bool gt_EnemtyAttackingSendtransmission_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv___sendingWaveToObjective == true)) {
        gf_PlayGhostTransmission(SoundLink("001GhostHighlightNextObjective2", -1), StringExternal("Param/Value/A7E88092"), 2.3);
    }
    else {
        libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemtyAttackingSendtransmission_Init () {
    gt_EnemtyAttackingSendtransmission = TriggerCreate("gt_EnemtyAttackingSendtransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Ghost Portrait
//--------------------------------------------------------------------------------------------------
bool gt_ShowGhostPortrait_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libNtve_gf_SendTransmissionSimple(TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("acAttackWave_Raynor_0212", -1), 0.0, c_transmissionDurationAdd, false);
        Wait(4.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowGhostPortrait_Init () {
    gt_ShowGhostPortrait = TriggerCreate("gt_ShowGhostPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveRemnantAreasFailed, true, false);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6166427B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7A60698B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
    }
    else {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FAF74290"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D7FCB0EB"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
    }
    Wait(2.0, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_02_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_02_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    Wait(4.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat No More Than X areas Raided Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNoMoreThanXareasRaidedFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_remnantAreasRaided >= gv_mAX_ALLOWED_RAIDS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    gf_PlayGhostTransmission(SoundLink("001GhostHighlightNextObjective32", -1), StringExternal("Param/Value/E19A3808"), 2.1);
    Wait(3.0, c_timeGame);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveRemnantAreasFailed, true, true);
    TriggerExecute(gt_ObjectiveNoMoreThanRaidedFailed, true, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromName(gv_remnantActiveRegion)), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionFromName(gv_remnantActiveRegion)), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNoMoreThanXareasRaidedFailed_Init () {
    gt_DefeatNoMoreThanXareasRaidedFailed = TriggerCreate("gt_DefeatNoMoreThanXareasRaidedFailed_Func");
    TriggerAddEventTimer(gt_DefeatNoMoreThanXareasRaidedFailed, gv_beaconTimerEnemy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveRemnantAreasComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    gf_PlayGhostTransmission(SoundLink("001GhostHighlightNextObjective322", -1), StringExternal("Param/Value/B0BB344C"), 3.0);
    Wait(4.0, c_timeGame);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromName(gv_remnantActiveRegion)), 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionFromName(gv_remnantActiveRegion)), 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E5C8709E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(8);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(57);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(14);
    lv_spawnLocationIter = 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(6);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(13);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(14);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    PlayerGroupLoopEnd();
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(367))) {
        gv_attackWaveA_Wave05Path = PointFromId(358);
    }
    else {
        gv_attackWaveA_Wave05Path = PointFromId(367);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RemnantAreas - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRemnantAreasCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("RemnantAreas");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("RemnantAreas", gv_remnantAreasCount);
    gv_objectiveRemnantAreas = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveRemnantAreasUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRemnantAreasCreate_Init () {
    gt_ObjectiveRemnantAreasCreate = TriggerCreate("gt_ObjectiveRemnantAreasCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RemnantAreas - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRemnantAreasUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRemnantAreasCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("RemnantAreas", gv_remnantAreasCount);
    TextExpressionSetToken("Param/Expression/7794940D", "StructureCount", IntToText(gv_remnantAreasCount));
    ObjectiveSetName(gv_objectiveRemnantAreas, TextExpressionAssemble("Param/Expression/7794940D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRemnantAreasUpdate_Init () {
    gt_ObjectiveRemnantAreasUpdate = TriggerCreate("gt_ObjectiveRemnantAreasUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RemnantAreas - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRemnantAreasComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRemnantAreasCreate, true, false);
    ObjectiveSetState(gv_objectiveRemnantAreas, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRemnantAreasComplete_Init () {
    gt_ObjectiveRemnantAreasComplete = TriggerCreate("gt_ObjectiveRemnantAreasComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - RemnantAreas - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRemnantAreasFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRemnantAreasCreate, true, false);
    ObjectiveSetState(gv_objectiveRemnantAreas, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRemnantAreasFailed_Init () {
    gt_ObjectiveRemnantAreasFailed = TriggerCreate("gt_ObjectiveRemnantAreasFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - NoMoreThanRaided - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoMoreThanRaidedCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("RemnantAreas2");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("RemnantAreas2", 1);
    gv_objectiveNoMoreThanRaided = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(gt_ObjectiveNoMoreThanRaidedUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoMoreThanRaidedCreate_Init () {
    gt_ObjectiveNoMoreThanRaidedCreate = TriggerCreate("gt_ObjectiveNoMoreThanRaidedCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - NoMoreThanRaided - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoMoreThanRaidedUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRemnantAreasCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("RemnantAreas2", gv_remnantAreasRaided);
    TextExpressionSetToken("Param/Expression/2C14649C", "MaxRaidAllowed", IntToText(gv_mAX_ALLOWED_RAIDS));
    TextExpressionSetToken("Param/Expression/2C14649C", "AreasRaidedCount", IntToText(gv_remnantAreasRaided));
    ObjectiveSetName(gv_objectiveNoMoreThanRaided, TextExpressionAssemble("Param/Expression/2C14649C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoMoreThanRaidedUpdate_Init () {
    gt_ObjectiveNoMoreThanRaidedUpdate = TriggerCreate("gt_ObjectiveNoMoreThanRaidedUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - NoMoreThanRaided - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoMoreThanRaidedComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNoMoreThanRaidedCreate, true, false);
    ObjectiveSetState(gv_objectiveNoMoreThanRaided, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoMoreThanRaidedComplete_Init () {
    gt_ObjectiveNoMoreThanRaidedComplete = TriggerCreate("gt_ObjectiveNoMoreThanRaidedComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - NoMoreThanRaided - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoMoreThanRaidedFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNoMoreThanRaidedCreate, true, false);
    ObjectiveSetState(gv_objectiveNoMoreThanRaided, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoMoreThanRaidedFailed_Init () {
    gt_ObjectiveNoMoreThanRaidedFailed = TriggerCreate("gt_ObjectiveNoMoreThanRaidedFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus - Destroy Sensor Tower - Create
//--------------------------------------------------------------------------------------------------
bool gt_BonusDestroySensorTowerCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary2");
    gv_bonusDestroySensorTower = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 6);
    libNtve_gf_UnitCreateFacingPoint(1, "SensorTower2", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(19)), RegionGetCenter(RegionFromId(19)));
    gv_sensorTower = UnitLastCreated();
    RegionAttachToUnit(RegionFromId(19), gv_sensorTower, RegionGetCenter(RegionFromId(19)));
    libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingTriangle", RegionGetCenter(RegionFromId(19)), Color(100.00, 100.00, 0.00), 0.0);
    gv_sensorTowerPing = PingLastCreated();
    PingSetScale(gv_sensorTowerPing, 0.5);
    PingSetTooltip(gv_sensorTowerPing, StringExternal("Param/Value/34EA3F01"));
    libNtve_gf_UnitCreateFacingPoint(4, "Marine", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(20)), RegionGetCenter(RegionFromId(19)));
    libNtve_gf_UnitCreateFacingPoint(1, "Medic", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(20)), RegionGetCenter(RegionFromId(19)));
    libNtve_gf_UnitCreateFacingPoint(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(20)), RegionGetCenter(RegionFromId(19)));
    libNtve_gf_UnitCreateFacingPoint(4, "Marine", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(20)), RegionGetCenter(RegionFromId(19)));
    libNtve_gf_UnitCreateFacingPoint(1, "Medic", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(20)), RegionGetCenter(RegionFromId(19)));
    libNtve_gf_UnitCreateFacingPoint(1, "Raven", 0, gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(20)), RegionGetCenter(RegionFromId(19)));
    TriggerExecute(gt_BonusDestroySensorTowerUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusDestroySensorTowerCreate_Init () {
    gt_BonusDestroySensorTowerCreate = TriggerCreate("gt_BonusDestroySensorTowerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus - Destroy Sensor Tower - Complete
//--------------------------------------------------------------------------------------------------
bool gt_BonusDestroySensorTowerComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusDestroySensorTowerCreate, true, false);
    ObjectiveSetState(gv_bonusDestroySensorTower, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusDestroySensorTowerComplete_Init () {
    gt_BonusDestroySensorTowerComplete = TriggerCreate("gt_BonusDestroySensorTowerComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus - Destroy Sensor Tower - Update
//--------------------------------------------------------------------------------------------------
bool gt_BonusDestroySensorTowerUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BonusDestroySensorTowerCreate, true, false);
    ObjectiveSetName(gv_bonusDestroySensorTower, StringExternal("Param/Value/66C3D570"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusDestroySensorTowerUpdate_Init () {
    gt_BonusDestroySensorTowerUpdate = TriggerCreate("gt_BonusDestroySensorTowerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus - Destroy Sensor Tower - Failed
//--------------------------------------------------------------------------------------------------
bool gt_BonusDestroySensorTowerFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusDestroySensorTowerCreate, true, false);
    ObjectiveSetState(gv_bonusDestroySensorTower, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusDestroySensorTowerFailed_Init () {
    gt_BonusDestroySensorTowerFailed = TriggerCreate("gt_BonusDestroySensorTowerFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartGameQ_Init();
    gt_AutoUpdateRemnantAreaCount_Init();
    gt_AutoUpdateRaidedAreas_Init();
    gt_HideActiveArea_Init();
    gt_bonusobjectivehandler_Init();
    gt_PingNextBeacon_Init();
    gt_Attachregions_Init();
    gt_Beacontimer_Init();
    gt_Beacontimerenemy_Init();
    gt_Beaconregionunitenters_Init();
    gt_Beaconregionunitleaves_Init();
    gt_Beaconregionunitdies_Init();
    gt_Beaconregioncheck_Init();
    gt_Beaconregionsendwaves_Init();
    gt_Beaconregionunitenters2_Init();
    gt_Beaconregionunitleaves2_Init();
    gt_Beaconregionunitdies2_Init();
    gt_Beaconregioncheck2_Init();
    gt_Beaconregionsendwaves2_Init();
    gt_Beaconregionunitenters3_Init();
    gt_Beaconregionunitleaves3_Init();
    gt_Beaconregionunitdies3_Init();
    gt_Beaconregioncheck3_Init();
    gt_Beaconregionsendwaves3_Init();
    gt_Beaconregionunitenters4_Init();
    gt_Beaconregionunitleaves4_Init();
    gt_Beaconregionunitdies4_Init();
    gt_Beaconregioncheck4_Init();
    gt_Beaconregionsendwaves4_Init();
    gt_Beaconregionunitenters5_Init();
    gt_Beaconregionunitleaves5_Init();
    gt_Beaconregionunitdies5_Init();
    gt_Beaconregioncheck5_Init();
    gt_Beaconregionsendwaves5_Init();
    gt_Beaconregionunitenters6_Init();
    gt_Beaconregionunitleaves6_Init();
    gt_Beaconregionunitdies6_Init();
    gt_Beaconregioncheck6_Init();
    gt_Beaconregionsendwaves6_Init();
    gt_Beaconregionunitenters7_Init();
    gt_Beaconregionunitleaves7_Init();
    gt_Beaconregionunitdies7_Init();
    gt_Beaconregioncheck7_Init();
    gt_Beaconregionsendwaves7_Init();
    gt_EnemyAttackingSetupevent_Init();
    gt_EnemtyAttackingSendtransmission_Init();
    gt_ShowGhostPortrait_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatNoMoreThanXareasRaidedFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_StartAI_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_ObjectiveRemnantAreasCreate_Init();
    gt_ObjectiveRemnantAreasUpdate_Init();
    gt_ObjectiveRemnantAreasComplete_Init();
    gt_ObjectiveRemnantAreasFailed_Init();
    gt_ObjectiveNoMoreThanRaidedCreate_Init();
    gt_ObjectiveNoMoreThanRaidedUpdate_Init();
    gt_ObjectiveNoMoreThanRaidedComplete_Init();
    gt_ObjectiveNoMoreThanRaidedFailed_Init();
    gt_BonusDestroySensorTowerCreate_Init();
    gt_BonusDestroySensorTowerComplete_Init();
    gt_BonusDestroySensorTowerUpdate_Init();
    gt_BonusDestroySensorTowerFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
