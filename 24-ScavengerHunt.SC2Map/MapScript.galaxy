//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Scavenger Hunt
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
//
// Generated AI Script
//
// AI Name: Hybrid Wave AI
//
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
// Globals

//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;
//--------------------------------------------------------------------------------------------------
// Attack Wave:
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }
    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave:
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave2_enabled;
wave[17] aiF917F4D7_wave2_lastWave;
trigger aiF917F4D7_wave2_trigger = null;
int aiF917F4D7_wave2_runPlayer;
playergroup aiF917F4D7_wave2_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave2_enabled[init_i] = true;
        aiF917F4D7_wave2_lastWave[init_i] = null;
    }
    aiF917F4D7_wave2_trigger = TriggerCreate("aiF917F4D7_wave2_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave2_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave2_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave2_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave2_runPlayer;
    playergroup target = aiF917F4D7_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave2_runPlayer = p;
    aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave:
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave3_enabled;
wave[17] aiF917F4D7_wave3_lastWave;
trigger aiF917F4D7_wave3_trigger = null;
int aiF917F4D7_wave3_runPlayer;
playergroup aiF917F4D7_wave3_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave3_enabled[init_i] = true;
        aiF917F4D7_wave3_lastWave[init_i] = null;
    }
    aiF917F4D7_wave3_trigger = TriggerCreate("aiF917F4D7_wave3_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave3_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave3_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave3_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave3_runPlayer;
    playergroup target = aiF917F4D7_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave3_runPlayer = p;
    aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave:
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave4_enabled;
wave[17] aiF917F4D7_wave4_lastWave;
trigger aiF917F4D7_wave4_trigger = null;
int aiF917F4D7_wave4_runPlayer;
playergroup aiF917F4D7_wave4_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave4_enabled[init_i] = true;
        aiF917F4D7_wave4_lastWave[init_i] = null;
    }
    aiF917F4D7_wave4_trigger = TriggerCreate("aiF917F4D7_wave4_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave4_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave4_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave4_runPlayer;
    playergroup target = aiF917F4D7_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave4_runPlayer = p;
    aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave:
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave5_enabled;
wave[17] aiF917F4D7_wave5_lastWave;
trigger aiF917F4D7_wave5_trigger = null;
int aiF917F4D7_wave5_runPlayer;
playergroup aiF917F4D7_wave5_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave5_enabled[init_i] = true;
        aiF917F4D7_wave5_lastWave[init_i] = null;
    }
    aiF917F4D7_wave5_trigger = TriggerCreate("aiF917F4D7_wave5_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave5_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave5_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave5_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave5_runPlayer;
    playergroup target = aiF917F4D7_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave5_runPlayer = p;
    aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave:
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave6_enabled;
wave[17] aiF917F4D7_wave6_lastWave;
trigger aiF917F4D7_wave6_trigger = null;
int aiF917F4D7_wave6_runPlayer;
playergroup aiF917F4D7_wave6_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave6_enabled[init_i] = true;
        aiF917F4D7_wave6_lastWave[init_i] = null;
    }
    aiF917F4D7_wave6_trigger = TriggerCreate("aiF917F4D7_wave6_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave6_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave6_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave6_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave6_runPlayer;
    playergroup target = aiF917F4D7_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave6_runPlayer = p;
    aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave:
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave7_enabled;
wave[17] aiF917F4D7_wave7_lastWave;
trigger aiF917F4D7_wave7_trigger = null;
int aiF917F4D7_wave7_runPlayer;
playergroup aiF917F4D7_wave7_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave7_enabled[init_i] = true;
        aiF917F4D7_wave7_lastWave[init_i] = null;
    }
    aiF917F4D7_wave7_trigger = TriggerCreate("aiF917F4D7_wave7_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave7_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave7_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave7_runPlayer;
    playergroup target = aiF917F4D7_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave7_runPlayer = p;
    aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
    if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
    if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
    if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
    if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
    if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
    if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
    if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
    if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
    if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
    if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
    if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    return null;
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
    if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
    if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
    if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
    if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
    if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
    if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
    if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
    if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
    if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
    if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
    if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;
    if (p < 0 || p >= 16) {
        return false;
    }
    aiF917F4D7_wave1_run(p, target, true);
    aiF917F4D7_wave2_run(p, target, true);
    aiF917F4D7_wave3_run(p, target, true);
    aiF917F4D7_wave4_run(p, target, true);
    aiF917F4D7_wave5_run(p, target, true);
    aiF917F4D7_wave6_run(p, target, true);
    aiF917F4D7_wave7_run(p, target, true);
    while (true) {
        aiF917F4D7_wave7_run(p, target, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enable(p, val);
    aiF917F4D7_wave2_enable(p, val);
    aiF917F4D7_wave3_enable(p, val);
    aiF917F4D7_wave4_enable(p, val);
    aiF917F4D7_wave5_enable(p, val);
    aiF917F4D7_wave6_enable(p, val);
    aiF917F4D7_wave7_enable(p, val);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);
    TriggerStop(aiF917F4D7_wave1_trigger);
    TriggerStop(aiF917F4D7_wave2_trigger);
    TriggerStop(aiF917F4D7_wave3_trigger);
    TriggerStop(aiF917F4D7_wave4_trigger);
    TriggerStop(aiF917F4D7_wave5_trigger);
    TriggerStop(aiF917F4D7_wave6_trigger);
    TriggerStop(aiF917F4D7_wave7_trigger);
}
//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}
//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;
    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_wave2_init();
        aiF917F4D7_wave3_init();
        aiF917F4D7_wave4_init();
        aiF917F4D7_wave5_init();
        aiF917F4D7_wave6_init();
        aiF917F4D7_wave7_init();
        aiF917F4D7_waves_init();
        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(0);
        }
        aiF917F4D7_initialized = true;
    }
    AICampaignStart(p);
}
//==================================================================================================
//
// Generated Map Script
//
// Name:   Scavenger Hunt
//
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER = 1;
int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 7;
const int gv_pLAYER_04_ENEMY = 8;
const int gv_pLAYER_05 = 9;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_chosenDifficulty;
playergroup gv_enemyGroup;
int gv_randomChristopherVictoryTransmission;
point gv_victoryCompletePan;
bool gv_christopherisintheAir;
region gv_aISpawnWaveLocation;
int gv_objectiveGearMax;
int gv_objectiveGearCurrent;
int gv_objectiveRetrieveGear;
int gv_objectiveChristopherMustSurvive;
int gv_objectiveShipMustSurvive;
int gv_pingArchie;
int gv_pingKenji;
unit gv_petArchie;
unit gv_petKenji;
int gv_objectiveProtectthePed1;
int gv_objectiveProtectthePed2;
unitgroup gv_unitGroupPetHaters1;
unitgroup gv_unitGroupPetHaters2;
unit gv_heroShip;
unit gv_heroChristopher;
int gv_routeID;
bool gv_transmissionChristopherMovesForTheFirstTime;
int gv_bossPing;
int gv_shipPing;
point gv_pointBossArenaCenter;
point gv_pointLostGearSpawn;
fixed gv_christophersHealth;
bool gv_christopherCanMove;
region gv_currenBossArenaRegion;
timer gv_timerShip1;
timer gv_timerShip2;
timer gv_timerShip3;
timer gv_timerShip4;
int gv_timerWindowShip1;
int gv_timerWindowShip2;
int gv_timerWindowShip3;
int gv_timerWindowShip4;
bool gv_earlyLiftOff1;
bool gv_earlyLiftOff2;
bool gv_earlyLiftOff3;
bool gv_earlyLiftOff4;
bool gv_dontCheckRightNow;
timer gv_timerPets;
timer gv_timerPets2;
int gv_timerWindowPets;
int gv_timerWindowPets2;
unit gv_newGear;
unit gv_defeatedConstruct;
int gv_gearID;
void InitGlobals () {
    gv_enemyGroup = PlayerGroupEmpty();
    gv_objectiveRetrieveGear = c_invalidObjectiveId;
    gv_objectiveChristopherMustSurvive = c_invalidObjectiveId;
    gv_objectiveShipMustSurvive = c_invalidObjectiveId;
    gv_pingArchie = c_invalidPingId;
    gv_pingKenji = c_invalidPingId;
    gv_objectiveProtectthePed1 = c_invalidObjectiveId;
    gv_objectiveProtectthePed2 = c_invalidObjectiveId;
    gv_unitGroupPetHaters1 = UnitGroupEmpty();
    gv_unitGroupPetHaters2 = UnitGroupEmpty();
    gv_bossPing = c_invalidPingId;
    gv_shipPing = c_invalidPingId;
    gv_timerShip1 = TimerCreate();
    gv_timerShip2 = TimerCreate();
    gv_timerShip3 = TimerCreate();
    gv_timerShip4 = TimerCreate();
    gv_timerWindowShip1 = c_timerWindowNone;
    gv_timerWindowShip2 = c_timerWindowNone;
    gv_timerWindowShip3 = c_timerWindowNone;
    gv_timerWindowShip4 = c_timerWindowNone;
    gv_timerPets = TimerCreate();
    gv_timerPets2 = TimerCreate();
    gv_timerWindowPets = c_timerWindowNone;
    gv_timerWindowPets2 = c_timerWindowNone;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SpawnAIWave (bool lp_useHybrid, int lp_enemyLevel);
void gf_SpawnAIWaveShip (int lp_enemyLevel);
void gf_SpawnAIWavePet1 (int lp_enemyLevel);
void gf_SpawnAIWavePet2 (int lp_enemyLevel);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
void gf_SpawnGear ();
void gf_NewGearMessage ();
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08DifficultyAdjustments;
trigger gt_Init09ConstructSpawn;
trigger gt_Init10HybridSpawn;
trigger gt_StartGameQ;
trigger gt_ChristopherDialogueBossStart;
trigger gt_ChristopherDialogueMovingOut;
trigger gt_ChristopherDialogueEnemyAttackWave;
trigger gt_ChristopherDialogueEnemyAttackWaveShip;
trigger gt_ChristopherDialogueEnemyAttackWaveHybrid;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_DefeatEventChristopherDies;
trigger gt_DefeatEventShipDies;
trigger gt_Defeat;
trigger gt_DetermineEnemySpawnWaveLocation;
trigger gt_StartAI;
trigger gt_Round1;
trigger gt_Round2;
trigger gt_Round3;
trigger gt_Round4;
trigger gt_AttackWave1;
trigger gt_AttackWave2;
trigger gt_AttackWave3;
trigger gt_AttackWave4;
trigger gt_AttackWave5;
trigger gt_AttackWave6;
trigger gt_AttackWave7;
trigger gt_AttackWave8;
trigger gt_AttackWave9;
trigger gt_AttackWave10;
trigger gt_KerriganLeapingStrikeFix;
trigger gt_CreateInitialObjectives;
trigger gt_MainObjectiveUpdate;
trigger gt_ObjectivePet1Create;
trigger gt_ObjectivePet1Failed;
trigger gt_ObjectivePet1Complete;
trigger gt_ObjectivePet2Create;
trigger gt_ObjectivePet2Failed;
trigger gt_ObjectivePet2Complete;
trigger gt_SendPetHatersGroup1;
trigger gt_SendPetHatersGroup2;
trigger gt_KeepPetInsideTargetArea1;
trigger gt_KeepPetInsideTargetArea2;
trigger gt_StartBossFightArena1;
trigger gt_StartBossFightArena2;
trigger gt_StartBossFightArena3;
trigger gt_StartBossFightArena4;
trigger gt_GoBacktoArenaCenter1;
trigger gt_GoBacktoArenaCenter2;
trigger gt_GoBacktoArenaCenter3;
trigger gt_GoBacktoArenaCenter4;
trigger gt_ChangeTarget;
trigger gt_BossDefeatedFieryConstruct;
trigger gt_BossDefeatedArcticConstruct;
trigger gt_BossDefeatedHideousConstruct;
trigger gt_BossDefeatedVileConstruct;
trigger gt_BossDefeatedExplosiveConstruct;
trigger gt_BossDefeatedCorrosiveConstruct;
trigger gt_IncreaseConstructHealth;
trigger gt_KeepMovingDuringBossFight;
trigger gt_ChristopherMovesOut1;
trigger gt_ChristopherMovesOut2;
trigger gt_ChristopherMovesOut3;
trigger gt_ChristopherMovesOut4;
trigger gt_CheckifPathisClear1;
trigger gt_CheckifPathisClear2;
trigger gt_CheckifPathisClear3;
trigger gt_CheckifPathisClear4;
trigger gt_ChristophersRouteArena1;
trigger gt_ChristophersRouteArena2;
trigger gt_ChristophersRouteArena3;
trigger gt_ChristophersRouteArena4;
trigger gt_ChristophersRouteArena1Return;
trigger gt_ChristophersRouteArena2Return;
trigger gt_ChristophersRouteArena3Return;
trigger gt_ChristophersRouteArena4Return;
trigger gt_PingArrows1;
trigger gt_PingArrows2;
trigger gt_PingArrows3;
trigger gt_PingArrows4;
trigger gt_CreateTimerChristophersShipFirstTime;
trigger gt_CreateTimerChristophersShipSecondTime;
trigger gt_CreateTimerChristophersShipThirdTime;
trigger gt_CreateTimerChristophersShipFourthTime;
trigger gt_SetupPings;
trigger gt_CreateTimerPets;
trigger gt_CreateTimerPets2;
trigger gt_ShipAmbush1;
trigger gt_ShipAmbush2;
trigger gt_ShipAmbush3;
trigger gt_ShipAmbush4;
trigger gt_ShipAmbush5;
trigger gt_ShipAmbush6;
trigger gt_ShipAmbush7;
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SpawnAIWave (bool lp_useHybrid, int lp_enemyLevel) {
    int auto2065854E_ae;
    int auto2065854E_ai;
    int auto654B490A_ae;
    int auto654B490A_ai;
    string autoB4287D1E_val;
    // Variable Declarations
    int lv_randomEnemyPlayer;
    int lv_randomPath;
    int lv_randomInteger;
    region lv_aISpawnWaveLocation;
    int lv_resourceBucket;
    int lv_techBucket;
    string lv_hybridType1;
    string lv_hybridType2;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    int lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();
    // Implementation
    if ((lp_enemyLevel == 1)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else {
        if ((lp_enemyLevel == 2)) {
            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        }
        else {
            if ((lp_enemyLevel == 3)) {
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
            }
            else {
                if ((lp_enemyLevel == 4)) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else {
                    if ((lp_enemyLevel == 5)) {
                        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    else {
                        if ((lp_enemyLevel == 6)) {
                            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                        }
                        else {
                            if ((lp_enemyLevel == 7)) {
                                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                            }
                        }
                    }
                }
            }
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(943602724));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(943602724));
    lv_aISpawnWaveLocation = gv_aISpawnWaveLocation;
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_04_ENEMY);
    libCOMI_gf_SetupAttackForce(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_aISpawnWaveLocation));
    auto2065854E_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    auto2065854E_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (auto2065854E_ai >= 0 && lv_unitTypeIter <= auto2065854E_ae) || (auto2065854E_ai <= 0 && lv_unitTypeIter >= auto2065854E_ae) ) ; lv_unitTypeIter += auto2065854E_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            auto654B490A_ae = PlayerGroupCount(lv_attackingPlayers);
            auto654B490A_ai = 1;
            lv_playerIter = 1;
            for ( ; ( (auto654B490A_ai >= 0 && lv_playerIter <= auto654B490A_ae) || (auto654B490A_ai <= 0 && lv_playerIter >= auto654B490A_ae) ) ; lv_playerIter += auto654B490A_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, RegionGetCenter(lv_aISpawnWaveLocation), libNtve_gf_RandomAngle());
                        autoB4287D1E_val = lv_unitTypeToCreate;
                        if (autoB4287D1E_val == "Scourge") {
                            if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                            }
                            else {
                                libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                            }
                        }
                        else {
                        }
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(lv_attackForce, UnitLastCreated());
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }
                }
            }
        }
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
    libCOMI_gf_DropPodWarpInUnitGroup(lv_attackForce, RegionGetCenter(lv_aISpawnWaveLocation));
    lv_randomInteger = RandomInt(1, 2);
    if ((lv_randomInteger == 1)) {
        lv_hybridType2 = "HybridNemesis";
    }
    else {
        lv_hybridType2 = "HybridReaver";
    }
    if ((lv_randomInteger == 1)) {
        lv_hybridType2 = "HybridBehemoth";
    }
    else {
        lv_hybridType2 = "HybridDominatorVoid";
    }
    if ((lp_useHybrid == true)) {
        if ((lp_enemyLevel == 1)) {
            UnitCreate(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_aISpawnWaveLocation), 270.0);
        }
        else {
            if ((lp_enemyLevel == 2)) {
                UnitCreate(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_aISpawnWaveLocation), 270.0);
            }
            else {
                if ((lp_enemyLevel == 3)) {
                    UnitCreate(1, lv_hybridType1, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_aISpawnWaveLocation), 270.0);
                }
                else {
                    if ((lp_enemyLevel == 4)) {
                        UnitCreate(1, lv_hybridType1, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_aISpawnWaveLocation), 270.0);
                    }
                    else {
                        if ((lp_enemyLevel == 5)) {
                            UnitCreate(1, lv_hybridType1, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_aISpawnWaveLocation), 270.0);
                        }
                        else {
                            if ((lp_enemyLevel == 6)) {
                                UnitCreate(1, lv_hybridType2, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_aISpawnWaveLocation), 270.0);
                            }
                            else {
                                if ((lp_enemyLevel == 7)) {
                                    UnitCreate(1, lv_hybridType2, 0, gv_pLAYER_03_ENEMY, RegionGetCenter(lv_aISpawnWaveLocation), 270.0);
                                }
                            }
                        }
                    }
                }
            }
        }
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(lv_attackForce, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackForce, 0, true);
    if ((lp_useHybrid == true)) {
        TriggerExecute(gt_ChristopherDialogueEnemyAttackWaveHybrid, false, false);
    }
    else {
        TriggerExecute(gt_ChristopherDialogueEnemyAttackWave, false, false);
    }
}
void gf_SpawnAIWaveShip (int lp_enemyLevel) {
    int autoAF474159_ae;
    int autoAF474159_ai;
    int autoED3136A3_ae;
    int autoED3136A3_ai;
    string auto2E788A71_val;
    // Variable Declarations
    int lv_randomEnemyPlayer;
    int lv_randomPath;
    int lv_randomInteger;
    region lv_aISpawnWaveLocation;
    int lv_resourceBucket;
    int lv_techBucket;
    string lv_hybridType1;
    string lv_hybridType2;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    int lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();
    // Implementation
    if ((lp_enemyLevel == 1)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else {
        if ((lp_enemyLevel == 2)) {
            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        }
        else {
            if ((lp_enemyLevel == 3)) {
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
            }
            else {
                if ((lp_enemyLevel == 4)) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else {
                    if ((lp_enemyLevel == 5)) {
                        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    else {
                        if ((lp_enemyLevel == 6)) {
                            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                        }
                        else {
                            if ((lp_enemyLevel == 7)) {
                                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                            }
                        }
                    }
                }
            }
        }
    }
    AIAttackWaveSetTargetUnit(gv_pLAYER_03_ENEMY, gv_heroShip);
    AIAttackWaveSetTargetUnit(gv_pLAYER_04_ENEMY, gv_heroShip);
    lv_aISpawnWaveLocation = gv_aISpawnWaveLocation;
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_04_ENEMY);
    libCOMI_gf_SetupAttackForce(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_aISpawnWaveLocation));
    autoAF474159_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    autoAF474159_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (autoAF474159_ai >= 0 && lv_unitTypeIter <= autoAF474159_ae) || (autoAF474159_ai <= 0 && lv_unitTypeIter >= autoAF474159_ae) ) ; lv_unitTypeIter += autoAF474159_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            autoED3136A3_ae = PlayerGroupCount(lv_attackingPlayers);
            autoED3136A3_ai = 1;
            lv_playerIter = 1;
            for ( ; ( (autoED3136A3_ai >= 0 && lv_playerIter <= autoED3136A3_ae) || (autoED3136A3_ai <= 0 && lv_playerIter >= autoED3136A3_ae) ) ; lv_playerIter += autoED3136A3_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, RegionGetCenter(lv_aISpawnWaveLocation), libNtve_gf_RandomAngle());
                        auto2E788A71_val = lv_unitTypeToCreate;
                        if (auto2E788A71_val == "Scourge") {
                            if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                            }
                            else {
                                libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                            }
                        }
                        else {
                        }
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(lv_attackForce, UnitLastCreated());
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }
                }
            }
        }
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
    libCOMI_gf_DropPodWarpInUnitGroup(lv_attackForce, RegionGetCenter(lv_aISpawnWaveLocation));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackForce, 0, true);
    TriggerExecute(gt_ChristopherDialogueEnemyAttackWaveShip, false, false);
}
void gf_SpawnAIWavePet1 (int lp_enemyLevel) {
    int auto450E14B7_ae;
    int auto450E14B7_ai;
    int auto00CF79E4_ae;
    int auto00CF79E4_ai;
    string autoD3C84A1F_val;
    // Variable Declarations
    int lv_randomEnemyPlayer;
    int lv_randomPath;
    int lv_randomInteger;
    region lv_aISpawnWaveLocation;
    int lv_resourceBucket;
    int lv_techBucket;
    string lv_hybridType1;
    string lv_hybridType2;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    int lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackingPlayers = PlayerGroupEmpty();
    // Implementation
    if ((lp_enemyLevel == 1)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else {
        if ((lp_enemyLevel == 2)) {
            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        }
        else {
            if ((lp_enemyLevel == 3)) {
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
            }
            else {
                if ((lp_enemyLevel == 4)) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else {
                    if ((lp_enemyLevel == 5)) {
                        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    else {
                        if ((lp_enemyLevel == 6)) {
                            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                        }
                        else {
                            if ((lp_enemyLevel == 7)) {
                                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                            }
                        }
                    }
                }
            }
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(9)));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(9)));
    lv_aISpawnWaveLocation = RegionFromId(4);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_04_ENEMY);
    libCOMI_gf_SetupAttackForce(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_aISpawnWaveLocation));
    auto450E14B7_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    auto450E14B7_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (auto450E14B7_ai >= 0 && lv_unitTypeIter <= auto450E14B7_ae) || (auto450E14B7_ai <= 0 && lv_unitTypeIter >= auto450E14B7_ae) ) ; lv_unitTypeIter += auto450E14B7_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            auto00CF79E4_ae = PlayerGroupCount(lv_attackingPlayers);
            auto00CF79E4_ai = 1;
            lv_playerIter = 1;
            for ( ; ( (auto00CF79E4_ai >= 0 && lv_playerIter <= auto00CF79E4_ae) || (auto00CF79E4_ai <= 0 && lv_playerIter >= auto00CF79E4_ae) ) ; lv_playerIter += auto00CF79E4_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, RegionGetCenter(lv_aISpawnWaveLocation), libNtve_gf_RandomAngle());
                        autoD3C84A1F_val = lv_unitTypeToCreate;
                        if (autoD3C84A1F_val == "Scourge") {
                            if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                            }
                            else {
                                libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                            }
                        }
                        else {
                        }
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(gv_unitGroupPetHaters1, UnitLastCreated());
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }
                }
            }
        }
    }
    UnitGroupLoopBegin(UnitGroupFilter("ScienceVessel", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Raven", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Medic", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("WidowMine", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Overseer", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Overlord", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Viper", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Observer", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Disruptor", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Oracle", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), gv_unitGroupPetHaters1);
    libCOMI_gf_DropPodWarpInUnitGroup(gv_unitGroupPetHaters1, RegionGetCenter(lv_aISpawnWaveLocation));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(gv_unitGroupPetHaters1, 0, true);
}
void gf_SpawnAIWavePet2 (int lp_enemyLevel) {
    int auto5B87A586_ae;
    int auto5B87A586_ai;
    int autoD4BDBC4A_ae;
    int autoD4BDBC4A_ai;
    string autoAEC77A69_val;
    // Variable Declarations
    int lv_randomEnemyPlayer;
    int lv_randomPath;
    int lv_randomInteger;
    region lv_aISpawnWaveLocation;
    int lv_resourceBucket;
    int lv_techBucket;
    string lv_hybridType1;
    string lv_hybridType2;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    int lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackingPlayers = PlayerGroupEmpty();
    // Implementation
    if ((lp_enemyLevel == 1)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else {
        if ((lp_enemyLevel == 2)) {
            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        }
        else {
            if ((lp_enemyLevel == 3)) {
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
            }
            else {
                if ((lp_enemyLevel == 4)) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else {
                    if ((lp_enemyLevel == 5)) {
                        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                    }
                    else {
                        if ((lp_enemyLevel == 6)) {
                            lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                            lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                        }
                        else {
                            if ((lp_enemyLevel == 7)) {
                                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                            }
                        }
                    }
                }
            }
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(10)));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(10)));
    lv_aISpawnWaveLocation = RegionFromId(6);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_04_ENEMY);
    libCOMI_gf_SetupAttackForce(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_aISpawnWaveLocation));
    auto5B87A586_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    auto5B87A586_ai = 1;
    lv_unitTypeIter = 1;
    for ( ; ( (auto5B87A586_ai >= 0 && lv_unitTypeIter <= auto5B87A586_ae) || (auto5B87A586_ai <= 0 && lv_unitTypeIter >= auto5B87A586_ae) ) ; lv_unitTypeIter += auto5B87A586_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            autoD4BDBC4A_ae = PlayerGroupCount(lv_attackingPlayers);
            autoD4BDBC4A_ai = 1;
            lv_playerIter = 1;
            for ( ; ( (autoD4BDBC4A_ai >= 0 && lv_playerIter <= autoD4BDBC4A_ae) || (autoD4BDBC4A_ai <= 0 && lv_playerIter >= autoD4BDBC4A_ae) ) ; lv_playerIter += autoD4BDBC4A_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, RegionGetCenter(lv_aISpawnWaveLocation), libNtve_gf_RandomAngle());
                        autoAEC77A69_val = lv_unitTypeToCreate;
                        if (autoAEC77A69_val == "Scourge") {
                            if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                            }
                            else {
                                libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                            }
                        }
                        else {
                        }
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(gv_unitGroupPetHaters2, UnitLastCreated());
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }
                }
            }
        }
    }
    UnitGroupLoopBegin(UnitGroupFilter("ScienceVessel", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Raven", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Medic", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("WidowMine", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Overlord", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Overseer", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Viper", c_playerAny, gv_unitGroupPetHaters1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Observer", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Disruptor", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter("Oracle", c_playerAny, gv_unitGroupPetHaters2, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), gv_unitGroupPetHaters2);
    libCOMI_gf_DropPodWarpInUnitGroup(gv_unitGroupPetHaters2, RegionGetCenter(lv_aISpawnWaveLocation));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(gv_unitGroupPetHaters2, 0, true);
}
trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}
bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }
    return true;
}
void gf_SpawnGear () {
    // Implementation
    if ((gv_gearID == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChristophersGearLostGearFiery", c_unitCreateIgnorePlacement, 6, PointFromId(1349227423));
        gv_newGear = UnitLastCreated();
    }
    else {
        if ((gv_gearID == 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChristophersGearLostGearArctic", c_unitCreateIgnorePlacement, 6, PointFromId(1349227423));
            gv_newGear = UnitLastCreated();
        }
        else {
            if ((gv_gearID == 3)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChristophersGearLostGearHideous", c_unitCreateIgnorePlacement, 6, PointFromId(1349227423));
                gv_newGear = UnitLastCreated();
                UnitSetHeight(gv_newGear, 3.75, 0.0);
            }
            else {
                if ((gv_gearID == 4)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChristophersGearLostGearVile", c_unitCreateIgnorePlacement, 6, PointFromId(1349227423));
                    gv_newGear = UnitLastCreated();
                    UnitSetHeight(gv_newGear, 3.75, 0.0);
                }
                else {
                    if ((gv_gearID == 5)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChristophersGearLostGearExplosive", c_unitCreateIgnorePlacement, 6, PointFromId(1349227423));
                        gv_newGear = UnitLastCreated();
                    }
                    else {
                        if ((gv_gearID == 6)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChristophersGearLostGearCorrosive", c_unitCreateIgnorePlacement, 6, PointFromId(1349227423));
                            gv_newGear = UnitLastCreated();
                        }
                    }
                }
            }
        }
    }
    libNtve_gf_SendActorMessageToUnit(gv_newGear, "SetOpacity");
    UnitSetPosition(gv_newGear, PointFromId(1002152419), false);
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_newGear, "SetOpacity 1.000000 1.500000");
    Wait(3.0, c_timeGame);
    UnitKill(gv_newGear);
    Wait(0.5, c_timeGame);
    UnitRemove(gv_defeatedConstruct);
}
void gf_NewGearMessage () {
    // Implementation
    UnitBehaviorAddPlayer(gv_heroChristopher, "RestoreHealthChristopher", 6, 1);
    UnitBehaviorAddPlayer(gv_heroShip, "RestoreHealthShip", 6, 1);
    if ((gv_gearID == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(6, "ChristopherUpgradeFiery", 1);
        UnitBehaviorAddPlayer(gv_heroShip, "EnableMissileBarrage", 6, 1);
        SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("DOCSTR_0082") + StringExternal("DOCSTR_0084")));
        Wait(3.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_0085"));
    }
    else {
        if ((gv_gearID == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(6, "ChristopherUpgradeArctic", 1);
            UnitBehaviorAddPlayer(gv_heroShip, "EnableMissileBarrage", 6, 1);
            SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("DOCSTR_0082") + StringExternal("DOCSTR_0087")));
            Wait(3.0, c_timeReal);
            SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_0088"));
        }
        else {
            if ((gv_gearID == 3)) {
                libNtve_gf_SetUpgradeLevelForPlayer(6, "ChristopherUpgradeHideous", 1);
                SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("DOCSTR_0082") + StringExternal("DOCSTR_0090")));
                Wait(3.0, c_timeReal);
                SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_0091"));
            }
            else {
                if ((gv_gearID == 4)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(6, "ChristopherUpgradeVile", 1);
                    UnitBehaviorAddPlayer(gv_heroShip, "EnableMissileBarrage", 6, 1);
                    SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("DOCSTR_0082") + StringExternal("DOCSTR_0093")));
                    Wait(3.0, c_timeReal);
                    SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_0094"));
                }
                else {
                    if ((gv_gearID == 5)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(6, "ChristopherUpgradeExplosive", 1);
                        SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("DOCSTR_0082") + StringExternal("DOCSTR_0096")));
                        Wait(3.0, c_timeReal);
                        SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_0097"));
                    }
                    else {
                        if ((gv_gearID == 6)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(6, "ChristopherUpgradeCorrosive", 1);
                            SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("DOCSTR_0082") + StringExternal("DOCSTR_0099")));
                            Wait(3.0, c_timeReal);
                            SoundPlayForPlayer(SoundLink("TUISecret", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_0100"));
                        }
                    }
                }
            }
        }
    }
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }
    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08DifficultyAdjustments, true, false);
    TriggerExecute(gt_Init09ConstructSpawn, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_heroChristopher = UnitFromId(738368123);
    UnitSetState(gv_heroChristopher, c_unitStateTargetable, false);
    UnitSetState(gv_heroChristopher, c_unitStateStoppable, false);
    UnitSetTeamColorIndex(gv_heroChristopher, 5);
    gv_heroShip = UnitFromId(1231572422);
    UnitSetState(gv_heroShip, c_unitStateTargetable, false);
    UnitSetState(gv_heroShip, c_unitStateStoppable, false);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_heroShip, null, StringExternal("Param/Value/F26BE31D"), null);
    UnitSetTeamColorIndex(gv_heroShip, 5);
    gv_petArchie = UnitFromId(163136271);
    UnitSetTeamColorIndex(gv_petArchie, 5);
    UnitSetState(gv_petArchie, c_unitStateTargetable, false);
    UnitSetState(gv_petArchie, c_unitStateInvulnerable, true);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_petArchie, null, StringExternal("Param/Value/06B53CE2"), null);
    gv_petKenji = UnitFromId(552451885);
    UnitSetTeamColorIndex(gv_petKenji, 5);
    UnitSetState(gv_petKenji, c_unitStateTargetable, false);
    UnitSetState(gv_petKenji, c_unitStateInvulnerable, true);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_petKenji, null, StringExternal("Param/Value/23BD5E86"), null);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(830175013), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(364091896), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    GameTimeOfDaySet("08:00:00");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulty Adjustments
//--------------------------------------------------------------------------------------------------
bool gt_Init08DifficultyAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05, "ConstructAbilityCooldownsUpgrade", 1);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05, "ConstructAbilityCooldownsUpgrade", 2);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05, "ConstructAbilityCooldownsUpgradeHard", 1);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05, "ConstructAbilityCooldownsUpgrade", 3);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05, "ConstructAbilityCooldownsUpgradeBrutal", 1);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init08DifficultyAdjustments_Init () {
    gt_Init08DifficultyAdjustments = TriggerCreate("gt_Init08DifficultyAdjustments_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 09 Construct Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Init09ConstructSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInteger;
    string lv_constructType1;
    string lv_constructType2;
    string lv_constructType3;
    string lv_constructType4;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomInteger = RandomInt(1, 6);
    if ((lv_randomInteger == 1)) {
        lv_constructType1 = "XelNagaTurretFire";
    }
    else {
        if ((lv_randomInteger == 2)) {
            lv_constructType1 = "XelNagaTurretIce";
        }
        else {
            if ((lv_randomInteger == 3)) {
                lv_constructType1 = "XelNagaEyeHideousConstruct";
            }
            else {
                if ((lv_randomInteger == 4)) {
                    lv_constructType1 = "XelNagaEyeVileConstruct";
                }
                else {
                    if ((lv_randomInteger == 5)) {
                        lv_constructType1 = "XelNagaGiantExplosiveConstruct";
                    }
                    else {
                        if ((lv_randomInteger == 6)) {
                            lv_constructType1 = "XelNagaGiantCorrosiveConstruct";
                        }
                    }
                }
            }
        }
    }
    while (true) {
        lv_randomInteger = RandomInt(1, 6);
        if ((lv_randomInteger == 1)) {
            lv_constructType2 = "XelNagaTurretFire";
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_constructType2 = "XelNagaTurretIce";
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_constructType2 = "XelNagaEyeHideousConstruct";
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_constructType2 = "XelNagaEyeVileConstruct";
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_constructType2 = "XelNagaGiantExplosiveConstruct";
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_constructType2 = "XelNagaGiantCorrosiveConstruct";
                            }
                        }
                    }
                }
            }
        }
        if ((lv_constructType2 == lv_constructType1)) {
        }
        else {
            break;
        }
    }
    while (true) {
        lv_randomInteger = RandomInt(1, 6);
        if ((lv_randomInteger == 1)) {
            lv_constructType3 = "XelNagaTurretFire";
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_constructType3 = "XelNagaTurretIce";
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_constructType3 = "XelNagaEyeHideousConstruct";
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_constructType3 = "XelNagaEyeVileConstruct";
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_constructType3 = "XelNagaGiantExplosiveConstruct";
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_constructType3 = "XelNagaGiantCorrosiveConstruct";
                            }
                        }
                    }
                }
            }
        }
        if ((lv_constructType3 == lv_constructType1)) {
        }
        else {
            if ((lv_constructType3 == lv_constructType2)) {
            }
            else {
                break;
            }
        }
    }
    while (true) {
        lv_randomInteger = RandomInt(1, 6);
        if ((lv_randomInteger == 1)) {
            lv_constructType4 = "XelNagaTurretFire";
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_constructType4 = "XelNagaTurretIce";
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_constructType4 = "XelNagaEyeHideousConstruct";
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_constructType4 = "XelNagaEyeVileConstruct";
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_constructType4 = "XelNagaGiantExplosiveConstruct";
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_constructType4 = "XelNagaGiantCorrosiveConstruct";
                            }
                        }
                    }
                }
            }
        }
        if ((lv_constructType4 == lv_constructType1)) {
        }
        else {
            if ((lv_constructType4 == lv_constructType2)) {
            }
            else {
                if ((lv_constructType4 == lv_constructType3)) {
                }
                else {
                    break;
                }
            }
        }
    }
    UnitCreate(1, lv_constructType1, 0, gv_pLAYER_05, PointFromId(674248550), 225.0);
    UnitCreate(1, lv_constructType2, 0, gv_pLAYER_05, PointFromId(1836751042), 45.0);
    UnitCreate(1, lv_constructType3, 0, gv_pLAYER_05, PointFromId(1222831155), 135.0);
    UnitCreate(1, lv_constructType4, 0, gv_pLAYER_05, PointFromId(687528844), 315.0);
    if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ConstructDamageReductionNormal", gv_pLAYER_05, 1);
        }
        UnitGroupLoopEnd();
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
            UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ConstructDamageReductionHard", gv_pLAYER_05, 1);
            }
            UnitGroupLoopEnd();
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ConstructDamageReductionBrutal", gv_pLAYER_05, 1);
                }
                UnitGroupLoopEnd();
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init09ConstructSpawn_Init () {
    gt_Init09ConstructSpawn = TriggerCreate("gt_Init09ConstructSpawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 10 Hybrid Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Init10HybridSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInteger;
    int lv_randomInteger2;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
        lv_randomInteger = RandomInt(1, 3);
        if ((lv_randomInteger == 1)) {
            UnitCreate(1, "HybridBehemoth", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(1533805012), 0.0);
        }
        else {
            if ((lv_randomInteger == 2)) {
                UnitCreate(1, "HybridDominatorVoid", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(1533805012), 0.0);
            }
            else {
                if ((lv_randomInteger == 3)) {
                    UnitCreate(1, "HybridNemesis", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(1533805012), 0.0);
                }
            }
        }
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
        lv_randomInteger2 = RandomInt(1, 2);
        if ((lv_randomInteger2 == 1)) {
            UnitCreate(1, "HybridReaver", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(125113392), 0.0);
        }
        else {
            if ((lv_randomInteger2 == 2)) {
                UnitCreate(1, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(125113392), 0.0);
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
            lv_randomInteger2 = RandomInt(1, 2);
            if ((lv_randomInteger2 == 1)) {
                UnitCreate(1, "HybridReaver", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(125113392), 0.0);
                UnitCreate(1, "HybridReaver", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(1280788516), 0.0);
                UnitCreate(1, "HybridReaver", c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, PointFromId(2146900651), 225.0);
            }
            else {
                if ((lv_randomInteger2 == 2)) {
                    UnitCreate(1, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(125113392), 0.0);
                    UnitCreate(1, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, PointFromId(1280788516), 0.0);
                    UnitCreate(1, "HybridDestroyer", c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, PointFromId(2146900651), 225.0);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init10HybridSpawn_Init () {
    gt_Init10HybridSpawn = TriggerCreate("gt_Init10HybridSpawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    int auto0152823F_val;
    // Variable Declarations
    region lv_enemyBase;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Round1, false, false);
    gv_transmissionChristopherMovesForTheFirstTime = true;
    PlayerSetColorIndex(gv_pLAYER_04_ENEMY, PlayerGetColorIndex(gv_pLAYER_03_ENEMY, false), true);
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCargoCreate(UnitGroupLoopCurrent(), "Marine", 4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
    Wait(7.0, c_timeReal);
    TriggerEnable(gt_BossDefeatedFieryConstruct, true);
    TriggerEnable(gt_BossDefeatedArcticConstruct, true);
    TriggerEnable(gt_BossDefeatedHideousConstruct, true);
    TriggerEnable(gt_BossDefeatedVileConstruct, true);
    TriggerEnable(gt_BossDefeatedExplosiveConstruct, true);
    TriggerEnable(gt_BossDefeatedCorrosiveConstruct, true);
    TriggerQueueEnter();
    TriggerExecute(gt_CreateInitialObjectives, true, true);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_heroShip), 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto0152823F_val = RandomInt(0, 2);
    if (auto0152823F_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine01", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0003"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine02", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0004"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto0152823F_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine03", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0005"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine04", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0006"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine05", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0007"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine06", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0008"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine07", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0009"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(5.0, c_timeGame);
    TimerWindowShow(gv_timerWindowShip1, PlayerGroupAll(), true);
    TriggerExecute(gt_PingArrows1, false, false);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_ChristopherDialogueMovingOut, false, true);
    gv_randomChristopherVictoryTransmission = RandomInt(1, 3);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Dialogue - Boss Start
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherDialogueBossStart_Func (bool testConds, bool runActions) {
    int autoAFEC56E2_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoAFEC56E2_val = RandomInt(0, 4);
    if (autoAFEC56E2_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine27", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0035"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoAFEC56E2_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine28", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0036"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoAFEC56E2_val == 2) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine29", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0037"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoAFEC56E2_val == 3) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine30", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0038"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine31", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0039"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherDialogueBossStart_Init () {
    gt_ChristopherDialogueBossStart = TriggerCreate("gt_ChristopherDialogueBossStart_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Dialogue - Moving Out
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherDialogueMovingOut_Func (bool testConds, bool runActions) {
    int auto7691D6C0_val;
    int autoDC70683F_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_transmissionChristopherMovesForTheFirstTime == true)) {
        autoDC70683F_val = RandomInt(0, 2);
        if (autoDC70683F_val == 0) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine18", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0024"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine19", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0025"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else if (autoDC70683F_val == 1) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine20", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0026"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine21", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0027"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine22", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0028"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine23", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0029"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
    }
    else {
        auto7691D6C0_val = RandomInt(0, 2);
        if (auto7691D6C0_val == 0) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine24", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0031"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else if (auto7691D6C0_val == 1) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine25", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0032"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine26", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0033"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherDialogueMovingOut_Init () {
    gt_ChristopherDialogueMovingOut = TriggerCreate("gt_ChristopherDialogueMovingOut_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Dialogue - Enemy Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherDialogueEnemyAttackWave_Func (bool testConds, bool runActions) {
    int auto40FFFD45_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto40FFFD45_val = RandomInt(0, 2);
    if (auto40FFFD45_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine08", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0011"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto40FFFD45_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine09", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0012"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine10", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0013"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherDialogueEnemyAttackWave_Init () {
    gt_ChristopherDialogueEnemyAttackWave = TriggerCreate("gt_ChristopherDialogueEnemyAttackWave_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Dialogue - Enemy Attack Wave (Ship)
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherDialogueEnemyAttackWaveShip_Func (bool testConds, bool runActions) {
    int auto23AE2542_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto23AE2542_val = RandomInt(0, 2);
    if (auto23AE2542_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Christopher", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine14", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0019"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        UnitFlashSelection(gv_heroShip, 1.5);
    }
    else if (auto23AE2542_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Christopher", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine15", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0020"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        UnitFlashSelection(gv_heroShip, 1.5);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Christopher", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine17", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0022"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        UnitFlashSelection(gv_heroShip, 1.5);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherDialogueEnemyAttackWaveShip_Init () {
    gt_ChristopherDialogueEnemyAttackWaveShip = TriggerCreate("gt_ChristopherDialogueEnemyAttackWaveShip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Dialogue - Enemy Attack Wave (Hybrid)
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherDialogueEnemyAttackWaveHybrid_Func (bool testConds, bool runActions) {
    int auto58A8809A_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto58A8809A_val = RandomInt(0, 2);
    if (auto58A8809A_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine11", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0015"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto58A8809A_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine12", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0016"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine13", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0017"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherDialogueEnemyAttackWaveHybrid_Init () {
    gt_ChristopherDialogueEnemyAttackWaveHybrid = TriggerCreate("gt_ChristopherDialogueEnemyAttackWaveHybrid_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    ObjectiveSetState(gv_objectiveRetrieveGear, c_objectiveStateCompleted);
    libCOMI_gf_SetMissionObjectiveProgress("ScavengerHuntChristopherMustSurvive", 1);
    ObjectiveSetState(gv_objectiveChristopherMustSurvive, c_objectiveStateCompleted);
    libCOMI_gf_SetMissionObjectiveProgress("ScavengerHuntChristophersShipMustNotBeDestroyed", 1);
    ObjectiveSetState(gv_objectiveShipMustSurvive, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_heroChristopher), 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, UnitGetPosition(gv_heroChristopher), 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E5C8709E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_heroChristopher), c_animNameDefault, "Stand Victory", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_randomChristopherVictoryTransmission == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine51", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0064"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine52", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0065"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        if ((gv_randomChristopherVictoryTransmission == 2)) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine53", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0066"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine54", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0067"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine55", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0068"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
    }
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Event - Christopher Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatEventChristopherDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInteger;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PointSet(PointFromId(1349077165), UnitGetPosition(EventUnit()));
    lv_randomInteger = RandomInt(1, 3);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_objectiveChristopherMustSurvive, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(1349077165), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, PointFromId(1349077165), 1.5, -1, 10.0, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/C8D7D7A4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    if ((lv_randomInteger == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Christopher", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine56", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0070"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        if ((lv_randomInteger == 2)) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Christopher", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine57", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0071"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Christopher", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine58", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0072"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
    }
    libCOMI_gf_WaitForMissionTransmission();
    Wait(2.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatEventChristopherDies_Init () {
    gt_DefeatEventChristopherDies = TriggerCreate("gt_DefeatEventChristopherDies_Func");
    TriggerAddEventUnitDied(gt_DefeatEventChristopherDies, UnitRefFromVariable("gv_heroChristopher"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Event - Ship Dies
//--------------------------------------------------------------------------------------------------
bool gt_DefeatEventShipDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInteger;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PointSet(PointFromId(1349077165), UnitGetPosition(EventUnit()));
    lv_randomInteger = RandomInt(1, 3);
    if ((gv_christopherisintheAir == true)) {
        UnitCreate(1, "Christopher", c_unitCreateIgnorePlacement, 6, PointFromId(1349077165), 270.0);
        gv_heroChristopher = UnitLastCreated();
        libNtve_gf_ChangeUnitDamage(gv_heroChristopher, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetPropertyFixed(gv_heroChristopher, c_unitPropLife, gv_christophersHealth);
    }
    PingDestroy(gv_shipPing);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    ObjectiveSetState(gv_objectiveShipMustSurvive, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(1349077165), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, PointFromId(1349077165), 1.5, -1, 10.0, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7547BAC2"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libNtve_gf_MakeUnitFacePoint(gv_heroChristopher, PointFromId(1981069552), 1.5);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    if ((lv_randomInteger == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine59", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0074"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        if ((lv_randomInteger == 2)) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine60", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0075"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine61", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0076"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
    }
    libCOMI_gf_WaitForMissionTransmission();
    Wait(2.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatEventShipDies_Init () {
    gt_DefeatEventShipDies = TriggerCreate("gt_DefeatEventShipDies_Func");
    TriggerAddEventUnitDied(gt_DefeatEventShipDies, UnitRefFromVariable("gv_heroShip"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Determine Enemy Spawn Wave Location
//--------------------------------------------------------------------------------------------------
bool gt_DetermineEnemySpawnWaveLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomInteger = RandomInt(1, 2);
    if ((lv_randomInteger == 1)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
            gv_aISpawnWaveLocation = RegionFromId(12);
        }
        else {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
                gv_aISpawnWaveLocation = RegionFromId(2);
            }
            else {
                gv_aISpawnWaveLocation = RegionFromId(3);
            }
        }
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
            gv_aISpawnWaveLocation = RegionFromId(1);
        }
        else {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
                gv_aISpawnWaveLocation = RegionFromId(5);
            }
            else {
                gv_aISpawnWaveLocation = RegionFromId(3);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetermineEnemySpawnWaveLocation_Init () {
    gt_DetermineEnemySpawnWaveLocation = TriggerCreate("gt_DetermineEnemySpawnWaveLocation_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
 //   AICampaignStart(gv_pLAYER_05);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Round 1
//--------------------------------------------------------------------------------------------------
bool gt_Round1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_CreateTimerChristophersShipFirstTime, false, false);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        Wait(230.0, c_timeGame);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            Wait(220.0, c_timeGame);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                Wait(210.0, c_timeGame);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    Wait(200.0, c_timeGame);
                }
            }
        }
    }
    TriggerExecute(gt_AttackWave1, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Round1_Init () {
    gt_Round1 = TriggerCreate("gt_Round1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Round 2
//--------------------------------------------------------------------------------------------------
bool gt_Round2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_CreateTimerChristophersShipSecondTime, false, false);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        Wait(60.0, c_timeGame);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            Wait(55.0, c_timeGame);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                Wait(50.0, c_timeGame);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    Wait(45.0, c_timeGame);
                }
            }
        }
    }
    TriggerExecute(gt_AttackWave2, false, false);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        Wait(60.0, c_timeGame);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            Wait(55.0, c_timeGame);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                Wait(50.0, c_timeGame);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    Wait(45.0, c_timeGame);
                }
            }
        }
    }
    TriggerExecute(gt_AttackWave3, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Round2_Init () {
    gt_Round2 = TriggerCreate("gt_Round2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Round 3
//--------------------------------------------------------------------------------------------------
bool gt_Round3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_CreateTimerChristophersShipThirdTime, false, false);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        Wait(60.0, c_timeGame);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            Wait(55.0, c_timeGame);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                Wait(50.0, c_timeGame);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    Wait(45.0, c_timeGame);
                }
            }
        }
    }
    TriggerExecute(gt_AttackWave6, false, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_ObjectivePet1Create, false, false);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        Wait(60.0, c_timeGame);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            Wait(55.0, c_timeGame);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                Wait(50.0, c_timeGame);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    Wait(45.0, c_timeGame);
                }
            }
        }
    }
    TriggerExecute(gt_AttackWave7, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Round3_Init () {
    gt_Round3 = TriggerCreate("gt_Round3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Round 4
//--------------------------------------------------------------------------------------------------
bool gt_Round4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_CreateTimerChristophersShipFourthTime, false, false);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        Wait(60.0, c_timeGame);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            Wait(55.0, c_timeGame);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                Wait(50.0, c_timeGame);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    Wait(45.0, c_timeGame);
                }
            }
        }
    }
    TriggerExecute(gt_AttackWave9, false, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_ObjectivePet2Create, false, false);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        Wait(60.0, c_timeGame);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            Wait(55.0, c_timeGame);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                Wait(50.0, c_timeGame);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    Wait(45.0, c_timeGame);
                }
            }
        }
    }
    TriggerExecute(gt_AttackWave10, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Round4_Init () {
    gt_Round4 = TriggerCreate("gt_Round4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 1
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        gf_SpawnAIWave(false, 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave1_Init () {
    gt_AttackWave1 = TriggerCreate("gt_AttackWave1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 2
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(false, 1);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(false, 1);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(false, 2);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(false, 2);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave2_Init () {
    gt_AttackWave2 = TriggerCreate("gt_AttackWave2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 3
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(false, 1);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(false, 2);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(false, 3);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(false, 3);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave3_Init () {
    gt_AttackWave3 = TriggerCreate("gt_AttackWave3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 4
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hybridChoice;
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    lv_randomInteger = RandomInt(1, 10);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        if ((lv_randomInteger == 1)) {
            lv_hybridChoice = false;
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_hybridChoice = false;
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_hybridChoice = false;
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 7)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 8)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 9)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 10)) {
                                                lv_hybridChoice = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            if ((lv_randomInteger == 1)) {
                lv_hybridChoice = false;
            }
            else {
                if ((lv_randomInteger == 2)) {
                    lv_hybridChoice = false;
                }
                else {
                    if ((lv_randomInteger == 3)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 4)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 5)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 6)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 7)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 8)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 9)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 10)) {
                                                    lv_hybridChoice = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                if ((lv_randomInteger == 1)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 2)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 3)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 4)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 5)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 6)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 7)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 8)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 9)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 10)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    if ((lv_randomInteger == 1)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 2)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 3)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 4)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 5)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 6)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 7)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 8)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 9)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                    else {
                                                        if ((lv_randomInteger == 10)) {
                                                            lv_hybridChoice = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(lv_hybridChoice, 2);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(lv_hybridChoice, 3);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(lv_hybridChoice, 4);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(lv_hybridChoice, 4);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave4_Init () {
    gt_AttackWave4 = TriggerCreate("gt_AttackWave4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 5
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hybridChoice;
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    lv_randomInteger = RandomInt(1, 10);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        if ((lv_randomInteger == 1)) {
            lv_hybridChoice = true;
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_hybridChoice = false;
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_hybridChoice = false;
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 7)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 8)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 9)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 10)) {
                                                lv_hybridChoice = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            if ((lv_randomInteger == 1)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 2)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 3)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 4)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 5)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 6)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 7)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 8)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 9)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 10)) {
                                                    lv_hybridChoice = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                if ((lv_randomInteger == 1)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 2)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 3)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 4)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 5)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 6)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 7)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 8)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 9)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 10)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    if ((lv_randomInteger == 1)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 2)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 3)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 4)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 5)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 6)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 7)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 8)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 9)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                    else {
                                                        if ((lv_randomInteger == 10)) {
                                                            lv_hybridChoice = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(lv_hybridChoice, 3);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(lv_hybridChoice, 4);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(lv_hybridChoice, 5);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(lv_hybridChoice, 5);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave5_Init () {
    gt_AttackWave5 = TriggerCreate("gt_AttackWave5_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 6
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hybridChoice;
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    lv_randomInteger = RandomInt(1, 10);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        if ((lv_randomInteger == 1)) {
            lv_hybridChoice = true;
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_hybridChoice = false;
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 7)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 8)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 9)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 10)) {
                                                lv_hybridChoice = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            if ((lv_randomInteger == 1)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 2)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 3)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 4)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 5)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 6)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 7)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 8)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 9)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 10)) {
                                                    lv_hybridChoice = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                if ((lv_randomInteger == 1)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 2)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 3)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 4)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 5)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 6)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 7)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 8)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 9)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 10)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    if ((lv_randomInteger == 1)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 2)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 3)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 4)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 5)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 6)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 7)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 8)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 9)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                    else {
                                                        if ((lv_randomInteger == 10)) {
                                                            lv_hybridChoice = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(lv_hybridChoice, 4);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(lv_hybridChoice, 5);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(lv_hybridChoice, 6);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(lv_hybridChoice, 6);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave6_Init () {
    gt_AttackWave6 = TriggerCreate("gt_AttackWave6_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 7
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hybridChoice;
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    lv_randomInteger = RandomInt(1, 10);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        if ((lv_randomInteger == 1)) {
            lv_hybridChoice = true;
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_hybridChoice = false;
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 7)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 8)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 9)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 10)) {
                                                lv_hybridChoice = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            if ((lv_randomInteger == 1)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 2)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 3)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 4)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 5)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 6)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 7)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 8)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 9)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 10)) {
                                                    lv_hybridChoice = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                if ((lv_randomInteger == 1)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 2)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 3)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 4)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 5)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 6)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 7)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 8)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 9)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 10)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    if ((lv_randomInteger == 1)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 2)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 3)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 4)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 5)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 6)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 7)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 8)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 9)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                    else {
                                                        if ((lv_randomInteger == 10)) {
                                                            lv_hybridChoice = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(lv_hybridChoice, 5);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(lv_hybridChoice, 6);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(lv_hybridChoice, 7);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(lv_hybridChoice, 7);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave7_Init () {
    gt_AttackWave7 = TriggerCreate("gt_AttackWave7_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 8
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hybridChoice;
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    lv_randomInteger = RandomInt(1, 10);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        if ((lv_randomInteger == 1)) {
            lv_hybridChoice = true;
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_hybridChoice = false;
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 7)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 8)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 9)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 10)) {
                                                lv_hybridChoice = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            if ((lv_randomInteger == 1)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 2)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 3)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 4)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 5)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 6)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 7)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 8)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 9)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 10)) {
                                                    lv_hybridChoice = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                if ((lv_randomInteger == 1)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 2)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 3)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 4)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 5)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 6)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 7)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 8)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 9)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 10)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    if ((lv_randomInteger == 1)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 2)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 3)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 4)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 5)) {
                                        lv_hybridChoice = true;
                                    }
                                    else {
                                        if ((lv_randomInteger == 6)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 7)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 8)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 9)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                    else {
                                                        if ((lv_randomInteger == 10)) {
                                                            lv_hybridChoice = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(lv_hybridChoice, 6);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(lv_hybridChoice, 7);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(lv_hybridChoice, 7);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(lv_hybridChoice, 7);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave8_Init () {
    gt_AttackWave8 = TriggerCreate("gt_AttackWave8_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 9
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hybridChoice;
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    lv_randomInteger = RandomInt(1, 10);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        if ((lv_randomInteger == 1)) {
            lv_hybridChoice = true;
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_hybridChoice = false;
                            }
                            else {
                                if ((lv_randomInteger == 7)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 8)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 9)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 10)) {
                                                lv_hybridChoice = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            if ((lv_randomInteger == 1)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 2)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 3)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 4)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 5)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 6)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 7)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 8)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 9)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 10)) {
                                                    lv_hybridChoice = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                if ((lv_randomInteger == 1)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 2)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 3)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 4)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 5)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 6)) {
                                        lv_hybridChoice = true;
                                    }
                                    else {
                                        if ((lv_randomInteger == 7)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 8)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 9)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 10)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    if ((lv_randomInteger == 1)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 2)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 3)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 4)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 5)) {
                                        lv_hybridChoice = true;
                                    }
                                    else {
                                        if ((lv_randomInteger == 6)) {
                                            lv_hybridChoice = true;
                                        }
                                        else {
                                            if ((lv_randomInteger == 7)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 8)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 9)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                    else {
                                                        if ((lv_randomInteger == 10)) {
                                                            lv_hybridChoice = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(lv_hybridChoice, 7);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(lv_hybridChoice, 7);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(lv_hybridChoice, 7);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(lv_hybridChoice, 7);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave9_Init () {
    gt_AttackWave9 = TriggerCreate("gt_AttackWave9_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 10
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hybridChoice;
    int lv_randomInteger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_DetermineEnemySpawnWaveLocation, false, true);
    Wait(1.0, c_timeGame);
    lv_randomInteger = RandomInt(1, 10);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        if ((lv_randomInteger == 1)) {
            lv_hybridChoice = true;
        }
        else {
            if ((lv_randomInteger == 2)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 3)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 4)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 5)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 6)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 7)) {
                                    lv_hybridChoice = false;
                                }
                                else {
                                    if ((lv_randomInteger == 8)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 9)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 10)) {
                                                lv_hybridChoice = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            if ((lv_randomInteger == 1)) {
                lv_hybridChoice = true;
            }
            else {
                if ((lv_randomInteger == 2)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 3)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 4)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 5)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 6)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 7)) {
                                        lv_hybridChoice = false;
                                    }
                                    else {
                                        if ((lv_randomInteger == 8)) {
                                            lv_hybridChoice = false;
                                        }
                                        else {
                                            if ((lv_randomInteger == 9)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 10)) {
                                                    lv_hybridChoice = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                if ((lv_randomInteger == 1)) {
                    lv_hybridChoice = true;
                }
                else {
                    if ((lv_randomInteger == 2)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 3)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 4)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 5)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 6)) {
                                        lv_hybridChoice = true;
                                    }
                                    else {
                                        if ((lv_randomInteger == 7)) {
                                            lv_hybridChoice = true;
                                        }
                                        else {
                                            if ((lv_randomInteger == 8)) {
                                                lv_hybridChoice = false;
                                            }
                                            else {
                                                if ((lv_randomInteger == 9)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 10)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    if ((lv_randomInteger == 1)) {
                        lv_hybridChoice = true;
                    }
                    else {
                        if ((lv_randomInteger == 2)) {
                            lv_hybridChoice = true;
                        }
                        else {
                            if ((lv_randomInteger == 3)) {
                                lv_hybridChoice = true;
                            }
                            else {
                                if ((lv_randomInteger == 4)) {
                                    lv_hybridChoice = true;
                                }
                                else {
                                    if ((lv_randomInteger == 5)) {
                                        lv_hybridChoice = true;
                                    }
                                    else {
                                        if ((lv_randomInteger == 6)) {
                                            lv_hybridChoice = true;
                                        }
                                        else {
                                            if ((lv_randomInteger == 7)) {
                                                lv_hybridChoice = true;
                                            }
                                            else {
                                                if ((lv_randomInteger == 8)) {
                                                    lv_hybridChoice = false;
                                                }
                                                else {
                                                    if ((lv_randomInteger == 9)) {
                                                        lv_hybridChoice = false;
                                                    }
                                                    else {
                                                        if ((lv_randomInteger == 10)) {
                                                            lv_hybridChoice = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
            gf_SpawnAIWave(lv_hybridChoice, 1);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWave(lv_hybridChoice, 1);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWave(lv_hybridChoice, 1);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWave(lv_hybridChoice, 1);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave10_Init () {
    gt_AttackWave10 = TriggerCreate("gt_AttackWave10_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Leaping Strike Fix
//--------------------------------------------------------------------------------------------------
bool gt_KerriganLeapingStrikeFix_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(1.0, c_timeGame);
    UnitSetHeight(EventUnit(), 0.0, 0.2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KerriganLeapingStrikeFix_Init () {
    gt_KerriganLeapingStrikeFix = TriggerCreate("gt_KerriganLeapingStrikeFix_Func");
    TriggerAddEventUnitAbility(gt_KerriganLeapingStrikeFix, null, AbilityCommand("PrimalSlash", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Initial Objectives
//--------------------------------------------------------------------------------------------------
bool gt_CreateInitialObjectives_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
    }
    UnitGroupLoopEnd();
    TriggerEnable(TriggerGetCurrent(), false);
    gv_objectiveGearMax = 4;
    libCOMI_gf_CreateObjectiveCampaign("ScavengerHuntHelpChristophertoRetrieveHisGear");
    gv_objectiveRetrieveGear = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    libCOMI_gf_CreateObjectiveCampaign("ScavengerHuntChristopherMustSurvive");
    gv_objectiveChristopherMustSurvive = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    libCOMI_gf_CreateObjectiveCampaign("ScavengerHuntChristophersShipMustNotBeDestroyed");
    gv_objectiveShipMustSurvive = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateInitialObjectives_Init () {
    gt_CreateInitialObjectives = TriggerCreate("gt_CreateInitialObjectives_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective - Update
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveUpdate_Func (bool testConds, bool runActions) {
    int auto1F221720_val;
    // Actions
    if (!runActions) {
        return true;
    }
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_objectiveGearCurrent += 1;
    if ((gv_objectiveGearCurrent == gv_objectiveGearMax)) {
        libNtve_gf_ChangeUnitDamage(gv_heroChristopher, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    libCOMI_gf_SetMissionObjectiveProgress("ScavengerHuntHelpChristophertoRetrieveHisGear", gv_objectiveGearCurrent);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_IncreaseConstructHealth, false, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto1F221720_val = RandomInt(0, 2);
    if (auto1F221720_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine32", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0041"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto1F221720_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine33", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0042"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto1F221720_val == 2) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine34", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0043"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    gf_NewGearMessage();
    if ((gv_objectiveGearCurrent == 1)) {
        TriggerExecute(gt_Round2, false, false);
    }
    else {
        if ((gv_objectiveGearCurrent == 2)) {
            TriggerExecute(gt_Round3, false, false);
        }
        else {
            if ((gv_objectiveGearCurrent == 3)) {
                TriggerExecute(gt_Round4, false, false);
            }
        }
    }
    if ((gv_objectiveGearCurrent == gv_objectiveGearMax)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveUpdate_Init () {
    gt_MainObjectiveUpdate = TriggerCreate("gt_MainObjectiveUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Pet 1 - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePet1Create_Func (bool testConds, bool runActions) {
    int autoD9C9CF89_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ScavengerHuntProtectChristophersPet1");
    gv_objectiveProtectthePed1 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    UnitSetOwner(gv_petArchie, 6, false);
    UnitSetOwner(UnitFromId(830175013), 6, false);
    UnitSetState(gv_petArchie, c_unitStateInvulnerable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(830175013), false);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCampaignTarget", UnitGetPosition(gv_petArchie), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0);
    PingSetScale(gv_shipPing, 0.3);
    Wait(0.2, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_petArchie), StringExternal("Param/Value/B4D3ABCF"));
    gv_pingArchie = PingLastCreated();
    TriggerExecute(gt_SendPetHatersGroup1, false, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoD9C9CF89_val = RandomInt(0, 2);
    if (autoD9C9CF89_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine36", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0046"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine37", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0047"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoD9C9CF89_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine38", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0048"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine39", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0049"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine40", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0050"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine41", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0051"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePet1Create_Init () {
    gt_ObjectivePet1Create = TriggerCreate("gt_ObjectivePet1Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Pet 1 - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePet1Failed_Func (bool testConds, bool runActions) {
    int autoE8221D72_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectivePet1Complete, false);
    TriggerEnable(gt_KeepPetInsideTargetArea1, false);
    PingDestroy(gv_pingArchie);
    ObjectiveSetState(gv_objectiveProtectthePed1, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    UnitGroupIssueOrder(gv_unitGroupPetHaters1, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(943602724)), c_orderQueueReplace);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoE8221D72_val = RandomInt(0, 2);
    if (autoE8221D72_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine42", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0059"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoE8221D72_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine44", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0061"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine45", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0062"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePet1Failed_Init () {
    gt_ObjectivePet1Failed = TriggerCreate("gt_ObjectivePet1Failed_Func");
    TriggerAddEventUnitDied(gt_ObjectivePet1Failed, UnitRefFromVariable("gv_petArchie"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Pet 1 - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePet1Complete_Func (bool testConds, bool runActions) {
    int auto5D305C51_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(gv_unitGroupPetHaters1, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PingDestroy(gv_pingArchie);
        libCOMI_gf_SetMissionObjectiveProgress("ScavengerHuntProtectChristophersPet1", 1);
        ObjectiveSetState(gv_objectiveProtectthePed1, c_objectiveStateCompleted);
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(830175013), true);
        libNtve_gf_MakeUnitInvulnerable(gv_petArchie, true);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        auto5D305C51_val = RandomInt(0, 1);
        if (auto5D305C51_val == 0) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine46", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0053"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine47", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0054"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else if (auto5D305C51_val == 1) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine48", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0055"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine49", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0056"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePet1Complete_Init () {
    gt_ObjectivePet1Complete = TriggerCreate("gt_ObjectivePet1Complete_Func");
    TriggerEnable(gt_ObjectivePet1Complete, false);
    TriggerAddEventTimePeriodic(gt_ObjectivePet1Complete, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Pet 2 - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePet2Create_Func (bool testConds, bool runActions) {
    int auto7E5936D9_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ScavengerHuntProtectChristophersPet2");
    gv_objectiveProtectthePed2 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    UnitSetOwner(gv_petKenji, 6, false);
    UnitSetOwner(UnitFromId(364091896), 6, false);
    UnitSetState(gv_petKenji, c_unitStateInvulnerable, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(364091896), false);
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCampaignTarget", UnitGetPosition(gv_petKenji), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0);
    PingSetScale(gv_shipPing, 0.3);
    Wait(0.2, c_timeReal);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_petKenji), StringExternal("Param/Value/F3786B4C"));
    gv_pingKenji = PingLastCreated();
    TriggerExecute(gt_SendPetHatersGroup2, false, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto7E5936D9_val = RandomInt(0, 1);
    if (auto7E5936D9_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine38", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0048"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine39", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0049"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine40", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0050"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine41", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0051"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePet2Create_Init () {
    gt_ObjectivePet2Create = TriggerCreate("gt_ObjectivePet2Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Pet 2 - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePet2Failed_Func (bool testConds, bool runActions) {
    int auto1D2C4914_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectivePet2Complete, false);
    TriggerEnable(gt_KeepPetInsideTargetArea2, false);
    PingDestroy(gv_pingKenji);
    ObjectiveSetState(gv_objectiveProtectthePed2, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    UnitGroupIssueOrder(gv_unitGroupPetHaters2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(943602724)), c_orderQueueReplace);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto1D2C4914_val = RandomInt(0, 2);
    if (auto1D2C4914_val == 0) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine43", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0060"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (auto1D2C4914_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine44", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0061"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine45", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0062"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePet2Failed_Init () {
    gt_ObjectivePet2Failed = TriggerCreate("gt_ObjectivePet2Failed_Func");
    TriggerAddEventUnitDied(gt_ObjectivePet2Failed, UnitRefFromVariable("gv_petKenji"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Pet 2 - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePet2Complete_Func (bool testConds, bool runActions) {
    int autoCF169E6A_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(gv_unitGroupPetHaters2, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PingDestroy(gv_pingKenji);
        libCOMI_gf_SetMissionObjectiveProgress("ScavengerHuntProtectChristophersPet2", 1);
        ObjectiveSetState(gv_objectiveProtectthePed2, c_objectiveStateCompleted);
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(364091896), true);
        libNtve_gf_MakeUnitInvulnerable(gv_petKenji, true);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        autoCF169E6A_val = RandomInt(0, 1);
        if (autoCF169E6A_val == 0) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine46", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0053"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine47", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0054"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else if (autoCF169E6A_val == 1) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroChristopher, true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("ChristopherLine50", -1), StringExternal("DOCSTR_0158"), StringExternal("DOCSTR_0057"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePet2Complete_Init () {
    gt_ObjectivePet2Complete = TriggerCreate("gt_ObjectivePet2Complete_Func");
    TriggerEnable(gt_ObjectivePet2Complete, false);
    TriggerAddEventTimePeriodic(gt_ObjectivePet2Complete, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Send Pet Haters Group 1
//--------------------------------------------------------------------------------------------------
bool gt_SendPetHatersGroup1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CreateTimerPets, false, false);
    Wait(30.0, c_timeGame);
    libNtve_gf_StopTimer(gv_timerPets);
    TimerWindowDestroy(gv_timerWindowPets);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        gf_SpawnAIWavePet1(4);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            gf_SpawnAIWavePet1(5);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                gf_SpawnAIWavePet1(5);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    gf_SpawnAIWavePet1(6);
                }
            }
        }
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_ObjectivePet1Complete, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SendPetHatersGroup1_Init () {
    gt_SendPetHatersGroup1 = TriggerCreate("gt_SendPetHatersGroup1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Send Pet Haters Group 2
//--------------------------------------------------------------------------------------------------
bool gt_SendPetHatersGroup2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_CreateTimerPets2, false, false);
    Wait(30.0, c_timeGame);
    libNtve_gf_StopTimer(gv_timerPets2);
    TimerWindowDestroy(gv_timerWindowPets2);
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        gf_SpawnAIWavePet2(5);
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            gf_SpawnAIWavePet2(6);
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                gf_SpawnAIWavePet2(6);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    gf_SpawnAIWavePet2(7);
                }
            }
        }
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_ObjectivePet2Complete, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SendPetHatersGroup2_Init () {
    gt_SendPetHatersGroup2 = TriggerCreate("gt_SendPetHatersGroup2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Keep Pet Inside Target Area 1
//--------------------------------------------------------------------------------------------------
bool gt_KeepPetInsideTargetArea1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PetArtosilope"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(9))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KeepPetInsideTargetArea1_Init () {
    gt_KeepPetInsideTargetArea1 = TriggerCreate("gt_KeepPetInsideTargetArea1_Func");
    TriggerAddEventUnitRegion(gt_KeepPetInsideTargetArea1, null, RegionFromId(9), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Keep Pet Inside Target Area 2
//--------------------------------------------------------------------------------------------------
bool gt_KeepPetInsideTargetArea2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PetMoopy"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(10))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KeepPetInsideTargetArea2_Init () {
    gt_KeepPetInsideTargetArea2 = TriggerCreate("gt_KeepPetInsideTargetArea2_Func");
    TriggerAddEventUnitRegion(gt_KeepPetInsideTargetArea2, null, RegionFromId(10), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Boss Fight - Arena 1
//--------------------------------------------------------------------------------------------------
bool gt_StartBossFightArena1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_pointBossArenaCenter = PointFromId(674248550);
    gv_pointLostGearSpawn = PointFromId(1700973576);
    gv_currenBossArenaRegion = RegionFromId(14);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_defeatedConstruct = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_ShipAmbush2, true);
    TriggerEnable(gt_ShipAmbush3, true);
    Wait(10.0, c_timeGame);
    PingDestroy(gv_shipPing);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(674248550), 0.0, -5.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(674248550), 0.0, -4.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(6.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 180.0, 270.0);
        gv_bossPing = PingLastCreated();
        PingSetUnit(gv_bossPing, UnitGroupLoopCurrent());
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8879E61E"), null, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeHideousConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(gv_pLAYER_05, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeVileConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(gv_pLAYER_05, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Hibernation", 1);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Hibernation2", gv_pLAYER_05, 1);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ChristopherDialogueBossStart, false, false);
    Wait(4.6, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), gv_pointBossArenaCenter), c_orderQueueReplace);
    TriggerEnable(gt_GoBacktoArenaCenter1, true);
    gv_christopherCanMove = true;
    TriggerEnable(gt_KeepMovingDuringBossFight, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartBossFightArena1_Init () {
    gt_StartBossFightArena1 = TriggerCreate("gt_StartBossFightArena1_Func");
    TriggerAddEventUnitRangePoint(gt_StartBossFightArena1, null, PointFromId(674248550), 10.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Boss Fight - Arena 2
//--------------------------------------------------------------------------------------------------
bool gt_StartBossFightArena2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_pointBossArenaCenter = PointFromId(1836751042);
    gv_pointLostGearSpawn = PointFromId(1151295193);
    gv_currenBossArenaRegion = RegionFromId(15);
    UnitGroupLoopBegin(UnitGroup(null,gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_defeatedConstruct = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_ShipAmbush4, true);
    TriggerEnable(gt_ShipAmbush5, true);
    Wait(10.0, c_timeGame);
    PingDestroy(gv_shipPing);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(1836751042), 0.0, -4.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 4), gv_pointBossArenaCenter), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(6.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 180.0, 270.0);
        gv_bossPing = PingLastCreated();
        PingSetUnit(gv_bossPing, UnitGroupLoopCurrent());
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CE5956E2"), null, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeHideousConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(5, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeVileConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(5, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Hibernation", 1);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Hibernation2", gv_pLAYER_05, 1);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ChristopherDialogueBossStart, false, false);
    Wait(4.6, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), gv_pointBossArenaCenter), c_orderQueueReplace);
    TriggerEnable(gt_GoBacktoArenaCenter2, true);
    gv_christopherCanMove = true;
    TriggerEnable(gt_KeepMovingDuringBossFight, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartBossFightArena2_Init () {
    gt_StartBossFightArena2 = TriggerCreate("gt_StartBossFightArena2_Func");
    TriggerAddEventUnitRangePoint(gt_StartBossFightArena2, null, PointFromId(1836751042), 10.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Boss Fight - Arena 3
//--------------------------------------------------------------------------------------------------
bool gt_StartBossFightArena3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_pointBossArenaCenter = PointFromId(1222831155);
    gv_pointLostGearSpawn = PointFromId(1128701987);
    gv_currenBossArenaRegion = RegionFromId(16);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_defeatedConstruct = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_ShipAmbush6, true);
    TriggerEnable(gt_ShipAmbush7, true);
    Wait(10.0, c_timeGame);
    PingDestroy(gv_shipPing);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(1222831155), 0.0, -4.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 4), gv_pointBossArenaCenter), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(6.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 180.0, 270.0);
        gv_bossPing = PingLastCreated();
        PingSetUnit(gv_bossPing, UnitGroupLoopCurrent());
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/71094141"), null, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeHideousConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(5, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeVileConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(5, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Hibernation", 1);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Hibernation2", gv_pLAYER_05, 1);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ChristopherDialogueBossStart, false, false);
    Wait(4.6, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), gv_pointBossArenaCenter), c_orderQueueReplace);
    TriggerEnable(gt_GoBacktoArenaCenter3, true);
    gv_christopherCanMove = true;
    TriggerEnable(gt_KeepMovingDuringBossFight, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartBossFightArena3_Init () {
    gt_StartBossFightArena3 = TriggerCreate("gt_StartBossFightArena3_Func");
    TriggerAddEventUnitRangePoint(gt_StartBossFightArena3, null, PointFromId(1222831155), 10.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Boss Fight - Arena 4
//--------------------------------------------------------------------------------------------------
bool gt_StartBossFightArena4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_pointBossArenaCenter = PointFromId(687528844);
    gv_pointLostGearSpawn = PointFromId(1605981638);
    gv_currenBossArenaRegion = RegionFromId(17);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_defeatedConstruct = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    Wait(10.0, c_timeGame);
    PingDestroy(gv_shipPing);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(687528844), 0.0, -4.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 4), gv_pointBossArenaCenter), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(6.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 180.0, 270.0);
        gv_bossPing = PingLastCreated();
        PingSetUnit(gv_bossPing, UnitGroupLoopCurrent());
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/09E3E968"), null, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeHideousConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(5, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("XelNagaEyeVileConstruct", gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(5, "XelNagaEyeChangeHeight", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(gv_pointBossArenaCenter, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Hibernation", 1);
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Hibernation2", gv_pLAYER_05, 1);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ChristopherDialogueBossStart, false, false);
    Wait(4.6, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), gv_pointBossArenaCenter), c_orderQueueReplace);
    TriggerEnable(gt_GoBacktoArenaCenter4, true);
    gv_christopherCanMove = true;
    TriggerEnable(gt_KeepMovingDuringBossFight, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartBossFightArena4_Init () {
    gt_StartBossFightArena4 = TriggerCreate("gt_StartBossFightArena4_Func");
    TriggerAddEventUnitRangePoint(gt_StartBossFightArena4, null, PointFromId(687528844), 10.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Go Back to Arena Center 1
//--------------------------------------------------------------------------------------------------
bool gt_GoBacktoArenaCenter1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(674248550), 8.0))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GoBacktoArenaCenter1_Init () {
    gt_GoBacktoArenaCenter1 = TriggerCreate("gt_GoBacktoArenaCenter1_Func");
    TriggerEnable(gt_GoBacktoArenaCenter1, false);
    TriggerAddEventUnitRangePoint(gt_GoBacktoArenaCenter1, null, PointFromId(674248550), 8.0, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Go Back to Arena Center 2
//--------------------------------------------------------------------------------------------------
bool gt_GoBacktoArenaCenter2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(1836751042), 8.0))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GoBacktoArenaCenter2_Init () {
    gt_GoBacktoArenaCenter2 = TriggerCreate("gt_GoBacktoArenaCenter2_Func");
    TriggerEnable(gt_GoBacktoArenaCenter2, false);
    TriggerAddEventUnitRangePoint(gt_GoBacktoArenaCenter2, null, PointFromId(1836751042), 8.0, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Go Back to Arena Center 3
//--------------------------------------------------------------------------------------------------
bool gt_GoBacktoArenaCenter3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(1222831155), 8.0))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GoBacktoArenaCenter3_Init () {
    gt_GoBacktoArenaCenter3 = TriggerCreate("gt_GoBacktoArenaCenter3_Func");
    TriggerEnable(gt_GoBacktoArenaCenter3, false);
    TriggerAddEventUnitRangePoint(gt_GoBacktoArenaCenter3, null, PointFromId(1222831155), 8.0, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Go Back to Arena Center 4
//--------------------------------------------------------------------------------------------------
bool gt_GoBacktoArenaCenter4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(687528844), 8.0))), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GoBacktoArenaCenter4_Init () {
    gt_GoBacktoArenaCenter4 = TriggerCreate("gt_GoBacktoArenaCenter4_Func");
    TriggerEnable(gt_GoBacktoArenaCenter4, false);
    TriggerAddEventUnitRangePoint(gt_GoBacktoArenaCenter4, null, PointFromId(687528844), 8.0, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Change Target
//--------------------------------------------------------------------------------------------------
bool gt_ChangeTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_construct;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_construct = EventUnit();
    UnitIssueOrder(lv_construct, OrderTargetingUnit(AbilityCommand("attack", 0), gv_heroChristopher), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_construct, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(5, c_unitAllianceEnemy, RegionCircle(gv_pointBossArenaCenter, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_construct, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChangeTarget_Init () {
    gt_ChangeTarget = TriggerCreate("gt_ChangeTarget_Func");
    TriggerAddEventUnitAbility(gt_ChangeTarget, null, AbilityCommand("XelNagaConstructsChangeTarget", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Defeated - Fiery Construct
//--------------------------------------------------------------------------------------------------
bool gt_BossDefeatedFieryConstruct_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaTurretFire"))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_KeepMovingDuringBossFight, false);
    gv_christopherCanMove = false;
    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAddPlayer(EventUnit(), "Hibernation", gv_pLAYER_05, 1);
    UnitBehaviorAddPlayer(EventUnit(), "Hibernation3", gv_pLAYER_05, 1);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    PointSet(PointFromId(1002152419), UnitGetPosition(gv_defeatedConstruct));
    gv_transmissionChristopherMovesForTheFirstTime = false;
    gv_routeID += 1;
    gv_gearID = 1;
    PingDestroy(gv_bossPing);
    TriggerEnable(gt_GoBacktoArenaCenter1, false);
    TriggerEnable(gt_GoBacktoArenaCenter2, false);
    TriggerEnable(gt_GoBacktoArenaCenter3, false);
    TriggerEnable(gt_GoBacktoArenaCenter4, false);
    Wait(0.2, c_timeGame);
    gf_SpawnGear();
    if ((gv_routeID == 1)) {
        TriggerExecute(gt_ChristophersRouteArena1Return, false, false);
    }
    else {
        if ((gv_routeID == 2)) {
            TriggerExecute(gt_ChristophersRouteArena2Return, false, false);
        }
        else {
            if ((gv_routeID == 3)) {
                TriggerExecute(gt_ChristophersRouteArena3Return, false, false);
            }
            else {
                if ((gv_routeID == 4)) {
                    TriggerExecute(gt_ChristophersRouteArena4Return, false, false);
                }
            }
        }
    }
    TriggerExecute(gt_MainObjectiveUpdate, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDefeatedFieryConstruct_Init () {
    gt_BossDefeatedFieryConstruct = TriggerCreate("gt_BossDefeatedFieryConstruct_Func");
    TriggerEnable(gt_BossDefeatedFieryConstruct, false);
    TriggerAddEventUnitBehaviorChange(gt_BossDefeatedFieryConstruct, null, "Hibernation", c_unitBehaviorChangeCreate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Defeated - Arctic Construct
//--------------------------------------------------------------------------------------------------
bool gt_BossDefeatedArcticConstruct_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaTurretIce"))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_KeepMovingDuringBossFight, false);
    gv_christopherCanMove = false;
    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAddPlayer(EventUnit(), "Hibernation", gv_pLAYER_05, 1);
    UnitBehaviorAddPlayer(EventUnit(), "Hibernation3", gv_pLAYER_05, 1);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    PointSet(PointFromId(1002152419), UnitGetPosition(gv_defeatedConstruct));
    gv_transmissionChristopherMovesForTheFirstTime = false;
    gv_routeID += 1;
    gv_gearID = 2;
    PingDestroy(gv_bossPing);
    TriggerEnable(gt_GoBacktoArenaCenter1, false);
    TriggerEnable(gt_GoBacktoArenaCenter2, false);
    TriggerEnable(gt_GoBacktoArenaCenter3, false);
    TriggerEnable(gt_GoBacktoArenaCenter4, false);
    Wait(0.2, c_timeGame);
    gf_SpawnGear();
    if ((gv_routeID == 1)) {
        TriggerExecute(gt_ChristophersRouteArena1Return, false, false);
    }
    else {
        if ((gv_routeID == 2)) {
            TriggerExecute(gt_ChristophersRouteArena2Return, false, false);
        }
        else {
            if ((gv_routeID == 3)) {
                TriggerExecute(gt_ChristophersRouteArena3Return, false, false);
            }
            else {
                if ((gv_routeID == 4)) {
                    TriggerExecute(gt_ChristophersRouteArena4Return, false, false);
                }
            }
        }
    }
    TriggerExecute(gt_MainObjectiveUpdate, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDefeatedArcticConstruct_Init () {
    gt_BossDefeatedArcticConstruct = TriggerCreate("gt_BossDefeatedArcticConstruct_Func");
    TriggerEnable(gt_BossDefeatedArcticConstruct, false);
    TriggerAddEventUnitBehaviorChange(gt_BossDefeatedArcticConstruct, null, "Hibernation", c_unitBehaviorChangeCreate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Defeated - Hideous Construct
//--------------------------------------------------------------------------------------------------
bool gt_BossDefeatedHideousConstruct_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaEyeHideousConstruct"))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_KeepMovingDuringBossFight, false);
    gv_christopherCanMove = false;
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    PointSet(PointFromId(1002152419), UnitGetPosition(EventUnit()));
    gv_transmissionChristopherMovesForTheFirstTime = false;
    gv_routeID += 1;
    gv_gearID = 3;
    PingDestroy(gv_bossPing);
    TriggerEnable(gt_GoBacktoArenaCenter1, false);
    TriggerEnable(gt_GoBacktoArenaCenter2, false);
    TriggerEnable(gt_GoBacktoArenaCenter3, false);
    TriggerEnable(gt_GoBacktoArenaCenter4, false);
    Wait(0.2, c_timeGame);
    gf_SpawnGear();
    if ((gv_routeID == 1)) {
        TriggerExecute(gt_ChristophersRouteArena1Return, false, false);
    }
    else {
        if ((gv_routeID == 2)) {
            TriggerExecute(gt_ChristophersRouteArena2Return, false, false);
        }
        else {
            if ((gv_routeID == 3)) {
                TriggerExecute(gt_ChristophersRouteArena3Return, false, false);
            }
            else {
                if ((gv_routeID == 4)) {
                    TriggerExecute(gt_ChristophersRouteArena4Return, false, false);
                }
            }
        }
    }
    TriggerExecute(gt_MainObjectiveUpdate, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDefeatedHideousConstruct_Init () {
    gt_BossDefeatedHideousConstruct = TriggerCreate("gt_BossDefeatedHideousConstruct_Func");
    TriggerEnable(gt_BossDefeatedHideousConstruct, false);
    TriggerAddEventUnitDied(gt_BossDefeatedHideousConstruct, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Defeated - Vile Construct
//--------------------------------------------------------------------------------------------------
bool gt_BossDefeatedVileConstruct_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaEyeVileConstruct"))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_KeepMovingDuringBossFight, false);
    gv_christopherCanMove = false;
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    PointSet(PointFromId(1002152419), UnitGetPosition(EventUnit()));
    gv_transmissionChristopherMovesForTheFirstTime = false;
    gv_routeID += 1;
    gv_gearID = 4;
    PingDestroy(gv_bossPing);
    TriggerEnable(gt_GoBacktoArenaCenter1, false);
    TriggerEnable(gt_GoBacktoArenaCenter2, false);
    TriggerEnable(gt_GoBacktoArenaCenter3, false);
    TriggerEnable(gt_GoBacktoArenaCenter4, false);
    Wait(0.2, c_timeGame);
    gf_SpawnGear();
    if ((gv_routeID == 1)) {
        TriggerExecute(gt_ChristophersRouteArena1Return, false, false);
    }
    else {
        if ((gv_routeID == 2)) {
            TriggerExecute(gt_ChristophersRouteArena2Return, false, false);
        }
        else {
            if ((gv_routeID == 3)) {
                TriggerExecute(gt_ChristophersRouteArena3Return, false, false);
            }
            else {
                if ((gv_routeID == 4)) {
                    TriggerExecute(gt_ChristophersRouteArena4Return, false, false);
                }
            }
        }
    }
    TriggerExecute(gt_MainObjectiveUpdate, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDefeatedVileConstruct_Init () {
    gt_BossDefeatedVileConstruct = TriggerCreate("gt_BossDefeatedVileConstruct_Func");
    TriggerEnable(gt_BossDefeatedVileConstruct, false);
    TriggerAddEventUnitDied(gt_BossDefeatedVileConstruct, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Defeated - Explosive Construct
//--------------------------------------------------------------------------------------------------
bool gt_BossDefeatedExplosiveConstruct_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaGiantExplosiveConstruct"))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_KeepMovingDuringBossFight, false);
    gv_christopherCanMove = false;
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    PointSet(PointFromId(1002152419), UnitGetPosition(EventUnit()));
    gv_transmissionChristopherMovesForTheFirstTime = false;
    gv_routeID += 1;
    gv_gearID = 5;
    PingDestroy(gv_bossPing);
    TriggerEnable(gt_GoBacktoArenaCenter1, false);
    TriggerEnable(gt_GoBacktoArenaCenter2, false);
    TriggerEnable(gt_GoBacktoArenaCenter3, false);
    TriggerEnable(gt_GoBacktoArenaCenter4, false);
    Wait(0.2, c_timeGame);
    gf_SpawnGear();
    if ((gv_routeID == 1)) {
        TriggerExecute(gt_ChristophersRouteArena1Return, false, false);
    }
    else {
        if ((gv_routeID == 2)) {
            TriggerExecute(gt_ChristophersRouteArena2Return, false, false);
        }
        else {
            if ((gv_routeID == 3)) {
                TriggerExecute(gt_ChristophersRouteArena3Return, false, false);
            }
            else {
                if ((gv_routeID == 4)) {
                    TriggerExecute(gt_ChristophersRouteArena4Return, false, false);
                }
            }
        }
    }
    TriggerExecute(gt_MainObjectiveUpdate, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDefeatedExplosiveConstruct_Init () {
    gt_BossDefeatedExplosiveConstruct = TriggerCreate("gt_BossDefeatedExplosiveConstruct_Func");
    TriggerEnable(gt_BossDefeatedExplosiveConstruct, false);
    TriggerAddEventUnitDied(gt_BossDefeatedExplosiveConstruct, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Defeated - Corrosive Construct
//--------------------------------------------------------------------------------------------------
bool gt_BossDefeatedCorrosiveConstruct_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaGiantCorrosiveConstruct"))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_KeepMovingDuringBossFight, false);
    gv_christopherCanMove = false;
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    PointSet(PointFromId(1002152419), UnitGetPosition(EventUnit()));
    gv_transmissionChristopherMovesForTheFirstTime = false;
    gv_routeID += 1;
    gv_gearID = 6;
    PingDestroy(gv_bossPing);
    TriggerEnable(gt_GoBacktoArenaCenter1, false);
    TriggerEnable(gt_GoBacktoArenaCenter2, false);
    TriggerEnable(gt_GoBacktoArenaCenter3, false);
    TriggerEnable(gt_GoBacktoArenaCenter4, false);
    Wait(0.2, c_timeGame);
    gf_SpawnGear();
    if ((gv_routeID == 1)) {
        TriggerExecute(gt_ChristophersRouteArena1Return, false, false);
    }
    else {
        if ((gv_routeID == 2)) {
            TriggerExecute(gt_ChristophersRouteArena2Return, false, false);
        }
        else {
            if ((gv_routeID == 3)) {
                TriggerExecute(gt_ChristophersRouteArena3Return, false, false);
            }
            else {
                if ((gv_routeID == 4)) {
                    TriggerExecute(gt_ChristophersRouteArena4Return, false, false);
                }
            }
        }
    }
    TriggerExecute(gt_MainObjectiveUpdate, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDefeatedCorrosiveConstruct_Init () {
    gt_BossDefeatedCorrosiveConstruct = TriggerCreate("gt_BossDefeatedCorrosiveConstruct_Func");
    TriggerEnable(gt_BossDefeatedCorrosiveConstruct, false);
    TriggerAddEventUnitDied(gt_BossDefeatedCorrosiveConstruct, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Increase Construct Health
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseConstructHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newMaximumHealth;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_objectiveGearCurrent == 1)) {
        lv_newMaximumHealth = 7000;
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(PointFromId(1836751042), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, lv_newMaximumHealth);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, lv_newMaximumHealth);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(PointFromId(1222831155), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, lv_newMaximumHealth);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, lv_newMaximumHealth);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(PointFromId(687528844), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, lv_newMaximumHealth);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, lv_newMaximumHealth);
        }
        UnitGroupLoopEnd();
    }
    else {
        if ((gv_objectiveGearCurrent == 2)) {
            lv_newMaximumHealth = 10000;
            UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(PointFromId(1222831155), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, lv_newMaximumHealth);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, lv_newMaximumHealth);
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(PointFromId(687528844), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, lv_newMaximumHealth);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, lv_newMaximumHealth);
            }
            UnitGroupLoopEnd();
        }
        else {
            if ((gv_objectiveGearCurrent == 3)) {
                lv_newMaximumHealth = 14000;
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05, RegionCircle(PointFromId(687528844), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, lv_newMaximumHealth);
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, lv_newMaximumHealth);
                }
                UnitGroupLoopEnd();
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IncreaseConstructHealth_Init () {
    gt_IncreaseConstructHealth = TriggerCreate("gt_IncreaseConstructHealth_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Keep Moving During Boss Fight
//--------------------------------------------------------------------------------------------------
bool gt_KeepMovingDuringBossFight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_christopherCanMove == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_currenBossArenaRegion)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), gv_pointBossArenaCenter), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KeepMovingDuringBossFight_Init () {
    gt_KeepMovingDuringBossFight = TriggerCreate("gt_KeepMovingDuringBossFight_Func");
    TriggerEnable(gt_KeepMovingDuringBossFight, false);
    TriggerAddEventTimePeriodic(gt_KeepMovingDuringBossFight, 15.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Moves Out 1
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherMovesOut1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_timerShip1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CheckifPathisClear1, false);
    libNtve_gf_StopTimer(gv_timerShip1);
    TimerWindowDestroy(gv_timerWindowShip1);
    gv_dontCheckRightNow = true;
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCampaignTarget", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0);
    PingSetScale(gv_shipPing, 0.3);
    Wait(0.2, c_timeReal);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_shipPing = PingLastCreated();
    PingSetScale(gv_shipPing, 0.3);
    PingSetTooltip(gv_shipPing, StringExternal("Param/Value/D863E30B"));
    PingSetUnit(gv_shipPing, gv_heroShip);
    if ((gv_objectiveGearCurrent == 0)) {
        TriggerExecute(gt_ChristophersRouteArena1, false, false);
    }
    else {
        if ((gv_objectiveGearCurrent == 1)) {
            TriggerExecute(gt_ChristophersRouteArena2, false, false);
        }
        else {
            if ((gv_objectiveGearCurrent == 2)) {
                TriggerExecute(gt_ChristophersRouteArena3, false, false);
            }
            else {
                if ((gv_objectiveGearCurrent == 3)) {
                    TriggerExecute(gt_ChristophersRouteArena4, false, false);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherMovesOut1_Init () {
    gt_ChristopherMovesOut1 = TriggerCreate("gt_ChristopherMovesOut1_Func");
    TriggerAddEventTimer(gt_ChristopherMovesOut1, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Moves Out 2
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherMovesOut2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_timerShip2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CheckifPathisClear2, false);
    libNtve_gf_StopTimer(gv_timerShip2);
    TimerWindowDestroy(gv_timerWindowShip2);
    gv_dontCheckRightNow = true;
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCampaignTarget", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0);
    PingSetScale(gv_shipPing, 0.3);
    Wait(0.2, c_timeReal);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_shipPing = PingLastCreated();
    PingSetScale(gv_shipPing, 0.3);
    PingSetTooltip(gv_shipPing, StringExternal("Param/Value/90CA2316"));
    PingSetUnit(gv_shipPing, gv_heroShip);
    if ((gv_objectiveGearCurrent == 0)) {
        TriggerExecute(gt_ChristophersRouteArena1, false, false);
    }
    else {
        if ((gv_objectiveGearCurrent == 1)) {
            TriggerExecute(gt_ChristophersRouteArena2, false, false);
        }
        else {
            if ((gv_objectiveGearCurrent == 2)) {
                TriggerExecute(gt_ChristophersRouteArena3, false, false);
            }
            else {
                if ((gv_objectiveGearCurrent == 3)) {
                    TriggerExecute(gt_ChristophersRouteArena4, false, false);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherMovesOut2_Init () {
    gt_ChristopherMovesOut2 = TriggerCreate("gt_ChristopherMovesOut2_Func");
    TriggerAddEventTimer(gt_ChristopherMovesOut2, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Moves Out 3
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherMovesOut3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_timerShip3))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CheckifPathisClear3, false);
    libNtve_gf_StopTimer(gv_timerShip3);
    TimerWindowDestroy(gv_timerWindowShip3);
    gv_dontCheckRightNow = true;
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCampaignTarget", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0);
    PingSetScale(gv_shipPing, 0.3);
    Wait(0.2, c_timeReal);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_shipPing = PingLastCreated();
    PingSetScale(gv_shipPing, 0.3);
    PingSetTooltip(gv_shipPing, StringExternal("Param/Value/F447F4F6"));
    PingSetUnit(gv_shipPing, gv_heroShip);
    if ((gv_objectiveGearCurrent == 0)) {
        TriggerExecute(gt_ChristophersRouteArena1, false, false);
    }
    else {
        if ((gv_objectiveGearCurrent == 1)) {
            TriggerExecute(gt_ChristophersRouteArena2, false, false);
        }
        else {
            if ((gv_objectiveGearCurrent == 2)) {
                TriggerExecute(gt_ChristophersRouteArena3, false, false);
            }
            else {
                if ((gv_objectiveGearCurrent == 3)) {
                    TriggerExecute(gt_ChristophersRouteArena4, false, false);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherMovesOut3_Init () {
    gt_ChristopherMovesOut3 = TriggerCreate("gt_ChristopherMovesOut3_Func");
    TriggerAddEventTimer(gt_ChristopherMovesOut3, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher Moves Out 4
//--------------------------------------------------------------------------------------------------
bool gt_ChristopherMovesOut4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_timerShip4))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CheckifPathisClear4, false);
    libNtve_gf_StopTimer(gv_timerShip4);
    TimerWindowDestroy(gv_timerWindowShip4);
    gv_dontCheckRightNow = true;
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCampaignTarget", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0);
    PingSetScale(gv_shipPing, 0.3);
    Wait(0.2, c_timeReal);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", UnitGetPosition(gv_heroShip), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_shipPing = PingLastCreated();
    PingSetScale(gv_shipPing, 0.3);
    PingSetTooltip(gv_shipPing, StringExternal("Param/Value/36D4E705"));
    PingSetUnit(gv_shipPing, gv_heroShip);
    if ((gv_objectiveGearCurrent == 0)) {
        TriggerExecute(gt_ChristophersRouteArena1, false, false);
    }
    else {
        if ((gv_objectiveGearCurrent == 1)) {
            TriggerExecute(gt_ChristophersRouteArena2, false, false);
        }
        else {
            if ((gv_objectiveGearCurrent == 2)) {
                TriggerExecute(gt_ChristophersRouteArena3, false, false);
            }
            else {
                if ((gv_objectiveGearCurrent == 3)) {
                    TriggerExecute(gt_ChristophersRouteArena4, false, false);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristopherMovesOut4_Init () {
    gt_ChristopherMovesOut4 = TriggerCreate("gt_ChristopherMovesOut4_Func");
    TriggerAddEventTimer(gt_ChristopherMovesOut4, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check if Path is Clear 1
//--------------------------------------------------------------------------------------------------
bool gt_CheckifPathisClear1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_objectiveGearCurrent == 0) && (gv_earlyLiftOff1 == false) && (gv_dontCheckRightNow == false) && (UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        gv_earlyLiftOff1 = true;
        TriggerExecute(gt_ChristopherMovesOut1, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckifPathisClear1_Init () {
    gt_CheckifPathisClear1 = TriggerCreate("gt_CheckifPathisClear1_Func");
    TriggerEnable(gt_CheckifPathisClear1, false);
    TriggerAddEventTimePeriodic(gt_CheckifPathisClear1, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check if Path is Clear 2
//--------------------------------------------------------------------------------------------------
bool gt_CheckifPathisClear2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_objectiveGearCurrent == 1) && (gv_earlyLiftOff2 == false) && (gv_dontCheckRightNow == false) && (UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        gv_earlyLiftOff2 = true;
        TriggerExecute(gt_ChristopherMovesOut2, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckifPathisClear2_Init () {
    gt_CheckifPathisClear2 = TriggerCreate("gt_CheckifPathisClear2_Func");
    TriggerEnable(gt_CheckifPathisClear2, false);
    TriggerAddEventTimePeriodic(gt_CheckifPathisClear2, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check if Path is Clear 3
//--------------------------------------------------------------------------------------------------
bool gt_CheckifPathisClear3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_objectiveGearCurrent == 2) && (gv_earlyLiftOff3 == false) && (gv_dontCheckRightNow == false) && (UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        gv_earlyLiftOff3 = true;
        TriggerExecute(gt_ChristopherMovesOut3, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckifPathisClear3_Init () {
    gt_CheckifPathisClear3 = TriggerCreate("gt_CheckifPathisClear3_Func");
    TriggerEnable(gt_CheckifPathisClear3, false);
    TriggerAddEventTimePeriodic(gt_CheckifPathisClear3, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check if Path is Clear 4
//--------------------------------------------------------------------------------------------------
bool gt_CheckifPathisClear4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_objectiveGearCurrent == 3) && (gv_earlyLiftOff4 == false) && (gv_dontCheckRightNow == false) && (UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        gv_earlyLiftOff4 = true;
        TriggerExecute(gt_ChristopherMovesOut4, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckifPathisClear4_Init () {
    gt_CheckifPathisClear4 = TriggerCreate("gt_CheckifPathisClear4_Func");
    TriggerEnable(gt_CheckifPathisClear4, false);
    TriggerAddEventTimePeriodic(gt_CheckifPathisClear4, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 1)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(712753431)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitWaitUntilIdle(gv_heroChristopher, true);
    gv_christophersHealth = UnitGetPropertyFixed(gv_heroChristopher, c_unitPropLife, c_unitPropCurrent);
    UnitRemove(gv_heroChristopher);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Load", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(712753431), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = true;
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(843565976), -5.0, 2.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(843565976)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitWaitUntilIdle(gv_heroShip, true);
    UnitCreate(1, "Christopher", c_unitCreateIgnorePlacement, 6, PointFromId(843565976), 70.0);
    gv_heroChristopher = UnitLastCreated();
    UnitSetPropertyFixed(gv_heroChristopher, c_unitPropLife, gv_christophersHealth);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(843565976), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = false;
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1344444307)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ChristophersShipLand", 0)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena1_Init () {
    gt_ChristophersRouteArena1 = TriggerCreate("gt_ChristophersRouteArena1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 2)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1693867258)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitWaitUntilIdle(gv_heroChristopher, true);
    gv_christophersHealth = UnitGetPropertyFixed(gv_heroChristopher, c_unitPropLife, c_unitPropCurrent);
    UnitRemove(gv_heroChristopher);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Load", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1693867258), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = true;
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(1443405), -6.0, 0.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(219737674)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(816284672)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(754668342)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1833795322)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1174913777)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(582619476)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1206653475)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1833899985)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1715672307)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1761545501)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1669154336)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1669154336)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2015568749)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitWaitUntilIdle(gv_heroShip, true);
    UnitCreate(1, "Christopher", c_unitCreateIgnorePlacement, 6, PointFromId(2015568749), 210.0);
    gv_heroChristopher = UnitLastCreated();
    UnitSetPropertyFixed(gv_heroChristopher, c_unitPropLife, gv_christophersHealth);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(2015568749), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = false;
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1050587853)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ChristophersShipLand", 0)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena2_Init () {
    gt_ChristophersRouteArena2 = TriggerCreate("gt_ChristophersRouteArena2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 3)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(705963248)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitWaitUntilIdle(gv_heroChristopher, true);
    gv_christophersHealth = UnitGetPropertyFixed(gv_heroChristopher, c_unitPropLife, c_unitPropCurrent);
    UnitRemove(gv_heroChristopher);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Load", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(705963248), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = true;
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1761545501)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1715672307)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1836515742)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1312830432)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(86360754)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(811976105)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(811976105)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1567471063)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitWaitUntilIdle(gv_heroShip, true);
    UnitCreate(1, "Christopher", c_unitCreateIgnorePlacement, 6, PointFromId(1567471063), 330.0);
    gv_heroChristopher = UnitLastCreated();
    UnitSetPropertyFixed(gv_heroChristopher, c_unitPropLife, gv_christophersHealth);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1567471063), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = false;
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(446480153)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ChristophersShipLand", 0)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena3_Init () {
    gt_ChristophersRouteArena3 = TriggerCreate("gt_ChristophersRouteArena3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 4)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(368421585)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitWaitUntilIdle(gv_heroChristopher, true);
    gv_christophersHealth = UnitGetPropertyFixed(gv_heroChristopher, c_unitPropLife, c_unitPropCurrent);
    UnitRemove(gv_heroChristopher);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Load", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(368421585), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = true;
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(811976105)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(PointFromId(377311984), -3.0, 0.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(454414167)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1853013419)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1337243828)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1991550693)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(532582003)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(712322172)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2109794262)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(571352719)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitWaitUntilIdle(gv_heroShip, true);
    UnitCreate(1, "Christopher", c_unitCreateIgnorePlacement, 6, PointFromId(571352719), 135.0);
    gv_heroChristopher = UnitLastCreated();
    UnitSetPropertyFixed(gv_heroChristopher, c_unitPropLife, gv_christophersHealth);
    SoundPlayAtPointForPlayer(SoundLink("Medivac_Unload", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(571352719), 0.0, 100.0, 0.0);
    gv_christopherisintheAir = false;
    UnitIssueOrder(gv_heroShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1515004540)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroShip, Order(AbilityCommand("ChristophersShipLand", 0)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena4_Init () {
    gt_ChristophersRouteArena4 = TriggerCreate("gt_ChristophersRouteArena4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 1)(Return)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena1Return_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(5.0, c_timeGame);
    UnitBehaviorRemovePlayer(gv_heroChristopher, "FlashFreezeLevel3", 6, 1);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(PointFromId(1344444307), -5.0, -2.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(PointFromId(1443405), -2.0, -2.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena1Return_Init () {
    gt_ChristophersRouteArena1Return = TriggerCreate("gt_ChristophersRouteArena1Return_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 2)(Return)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena2Return_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(5.0, c_timeGame);
    UnitBehaviorRemovePlayer(gv_heroChristopher, "FlashFreezeLevel3", 6, 1);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(PointFromId(1050587853), -5.0, -2.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(PointFromId(1344444307), -5.0, -3.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena2Return_Init () {
    gt_ChristophersRouteArena2Return = TriggerCreate("gt_ChristophersRouteArena2Return_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 3)(Return)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena3Return_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(5.0, c_timeGame);
    UnitBehaviorRemovePlayer(gv_heroChristopher, "FlashFreezeLevel3", 6, 1);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(PointFromId(446480153), -5.0, -2.0)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffset(PointFromId(1344444307), -5.0, -3.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena3Return_Init () {
    gt_ChristophersRouteArena3Return = TriggerCreate("gt_ChristophersRouteArena3Return_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Christopher's Route (Arena 4)(Return)
//--------------------------------------------------------------------------------------------------
bool gt_ChristophersRouteArena4Return_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(5.0, c_timeGame);
    UnitBehaviorRemovePlayer(gv_heroChristopher, "FlashFreezeLevel3", 6, 1);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2109794262)), c_orderQueueReplace);
    UnitIssueOrder(gv_heroChristopher, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2109794262)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_heroChristopher, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChristophersRouteArena4Return_Init () {
    gt_ChristophersRouteArena4Return = TriggerCreate("gt_ChristophersRouteArena4Return_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ping Arrows 1
//--------------------------------------------------------------------------------------------------
bool gt_PingArrows1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_CheckifPathisClear1, true);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(674248550), 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(1, RegionCircle(PointFromId(674248550), 10.0), 1.0, false);
    Wait(1.0, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(219737674), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(15810538), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1443405), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(843565976), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PingArrows1_Init () {
    gt_PingArrows1 = TriggerCreate("gt_PingArrows1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ping Arrows 2
//--------------------------------------------------------------------------------------------------
bool gt_PingArrows2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_CheckifPathisClear2, true);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1836751042), 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(1, RegionCircle(PointFromId(1836751042), 10.0), 0.1, false);
    Wait(1.0, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1443405), 225.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(15810538), 225.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1419318915), 315.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(816284672), 315.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1833795322), 0.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1174913777), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(582619476), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1532144040), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1833899985), 0.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1715672307), 0.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1761545501), 315.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(2015568749), 225.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PingArrows2_Init () {
    gt_PingArrows2 = TriggerCreate("gt_PingArrows2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ping Arrows 3
//--------------------------------------------------------------------------------------------------
bool gt_PingArrows3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_CheckifPathisClear3, true);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1222831155), 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(1, RegionCircle(PointFromId(1222831155), 10.0), 0.1, false);
    Wait(1.0, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1761545501), 135.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1764654036), 135.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1836515742), 135.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1312830432), 90.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(377311984), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1567471063), 315.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PingArrows3_Init () {
    gt_PingArrows3 = TriggerCreate("gt_PingArrows3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ping Arrows 4
//--------------------------------------------------------------------------------------------------
bool gt_PingArrows4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_CheckifPathisClear4, true);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(687528844), 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    VisRevealArea(1, RegionCircle(PointFromId(687528844), 10.0), 0.1, false);
    Wait(1.0, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(377311984), 225.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(86360754), 225.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1853013419), 135.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1337243828), 180.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(1991550693), 180.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(532582003), 135.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(712322172), 180.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointFromId(2109794262), 135.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    PingSetScale(PingLastCreated(), 1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PingArrows4_Init () {
    gt_PingArrows4 = TriggerCreate("gt_PingArrows4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer (Christopher's Ship) (First Time)
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerChristophersShipFirstTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        lv_time = 460.0;
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            lv_time = 440.0;
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                lv_time = 420.0;
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    lv_time = 400.0;
                }
            }
        }
    }
    TimerStart(gv_timerShip1, lv_time, false, c_timeGame);
    TimerWindowCreate(gv_timerShip1, StringExternal("DOCSTR_0106"), false, false);
    gv_timerWindowShip1 = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_timerWindowShip1, c_anchorTopRight, 0, 0);
    TimerWindowSetFormat(gv_timerWindowShip1, StringToText("<min2/>:<sec2/>"));
    gv_dontCheckRightNow = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimerChristophersShipFirstTime_Init () {
    gt_CreateTimerChristophersShipFirstTime = TriggerCreate("gt_CreateTimerChristophersShipFirstTime_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer (Christopher's Ship) (Second Time)
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerChristophersShipSecondTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        lv_time = 150.0;
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            lv_time = 140.0;
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                lv_time = 130.0;
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    lv_time = 120.0;
                }
            }
        }
    }
    TimerStart(gv_timerShip2, lv_time, false, c_timeGame);
    TimerWindowCreate(gv_timerShip2, StringExternal("DOCSTR_0106"), false, false);
    gv_timerWindowShip2 = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_timerWindowShip2, c_anchorTopRight, 0, 0);
    TimerWindowSetFormat(gv_timerWindowShip2, StringToText("<min2/>:<sec2/>"));
    Wait(10.0, c_timeGame);
    TimerWindowShow(gv_timerWindowShip2, PlayerGroupAll(), true);
    TriggerExecute(gt_SetupPings, false, false);
    gv_dontCheckRightNow = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimerChristophersShipSecondTime_Init () {
    gt_CreateTimerChristophersShipSecondTime = TriggerCreate("gt_CreateTimerChristophersShipSecondTime_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer (Christopher's Ship) (Third Time)
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerChristophersShipThirdTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        lv_time = 170.0;
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            lv_time = 160.0;
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                lv_time = 150.0;
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    lv_time = 140.0;
                }
            }
        }
    }
    TimerStart(gv_timerShip3, lv_time, false, c_timeGame);
    TimerWindowCreate(gv_timerShip3, StringExternal("DOCSTR_0106"), false, false);
    gv_timerWindowShip3 = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_timerWindowShip3, c_anchorTopRight, 0, 0);
    TimerWindowSetFormat(gv_timerWindowShip3, StringToText("<min2/>:<sec2/>"));
    Wait(10.0, c_timeGame);
    TimerWindowShow(gv_timerWindowShip3, PlayerGroupAll(), true);
    TriggerExecute(gt_SetupPings, false, false);
    gv_dontCheckRightNow = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimerChristophersShipThirdTime_Init () {
    gt_CreateTimerChristophersShipThirdTime = TriggerCreate("gt_CreateTimerChristophersShipThirdTime_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer (Christopher's Ship) (Fourth Time)
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerChristophersShipFourthTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        lv_time = 170.0;
    }
    else {
        if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
            lv_time = 160.0;
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                lv_time = 150.0;
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                    lv_time = 140.0;
                }
            }
        }
    }
    TimerStart(gv_timerShip4, lv_time, false, c_timeGame);
    TimerWindowCreate(gv_timerShip4, StringExternal("DOCSTR_0106"), false, false);
    gv_timerWindowShip4 = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_timerWindowShip4, c_anchorTopRight, 0, 0);
    TimerWindowSetFormat(gv_timerWindowShip4, StringToText("<min2/>:<sec2/>"));
    Wait(10.0, c_timeGame);
    TimerWindowShow(gv_timerWindowShip4, PlayerGroupAll(), true);
    TriggerExecute(gt_SetupPings, false, false);
    gv_dontCheckRightNow = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimerChristophersShipFourthTime_Init () {
    gt_CreateTimerChristophersShipFourthTime = TriggerCreate("gt_CreateTimerChristophersShipFourthTime_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Pings
//--------------------------------------------------------------------------------------------------
bool gt_SetupPings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_objectiveGearCurrent == 1)) {
        TriggerExecute(gt_PingArrows2, false, false);
        Wait(3.0, c_timeGame);
        TriggerExecute(gt_ChristopherDialogueMovingOut, false, true);
    }
    else {
        if ((gv_objectiveGearCurrent == 2)) {
            TriggerExecute(gt_PingArrows3, false, false);
            Wait(3.0, c_timeGame);
            TriggerExecute(gt_ChristopherDialogueMovingOut, false, true);
        }
        else {
            if ((gv_objectiveGearCurrent == 3)) {
                TriggerExecute(gt_PingArrows4, false, false);
                Wait(3.0, c_timeGame);
                TriggerExecute(gt_ChristopherDialogueMovingOut, false, true);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupPings_Init () {
    gt_SetupPings = TriggerCreate("gt_SetupPings_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer (Pets)
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerPets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_time = 30.0;
    TimerStart(gv_timerPets, lv_time, false, c_timeGame);
    TimerWindowCreate(gv_timerPets, StringExternal("DOCSTR_0108"), true, false);
    gv_timerWindowPets = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_timerWindowPets, c_anchorTopRight, 0, 50);
    TimerWindowSetFormat(gv_timerWindowPets, StringToText("<min2/>:<sec2/>"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimerPets_Init () {
    gt_CreateTimerPets = TriggerCreate("gt_CreateTimerPets_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Timer (Pets 2)
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimerPets2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_time = 30.0;
    TimerStart(gv_timerPets2, lv_time, false, c_timeGame);
    TimerWindowCreate(gv_timerPets2, StringExternal("DOCSTR_0108"), true, false);
    gv_timerWindowPets2 = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_timerWindowPets2, c_anchorTopRight, 0, 50);
    TimerWindowSetFormat(gv_timerWindowPets2, StringToText("<min2/>:<sec2/>"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimerPets2_Init () {
    gt_CreateTimerPets2 = TriggerCreate("gt_CreateTimerPets2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ship Ambush 1
//--------------------------------------------------------------------------------------------------
bool gt_ShipAmbush1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aISpawnWaveLocation = RegionFromId(12);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWaveShip(4);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWaveShip(5);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWaveShip(5);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipAmbush1_Init () {
    gt_ShipAmbush1 = TriggerCreate("gt_ShipAmbush1_Func");
    TriggerAddEventUnitRangePoint(gt_ShipAmbush1, null, PointFromId(598504022), 3.0, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ship Ambush 2
//--------------------------------------------------------------------------------------------------
bool gt_ShipAmbush2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aISpawnWaveLocation = RegionFromId(12);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWaveShip(4);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWaveShip(5);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWaveShip(5);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipAmbush2_Init () {
    gt_ShipAmbush2 = TriggerCreate("gt_ShipAmbush2_Func");
    TriggerEnable(gt_ShipAmbush2, false);
    TriggerAddEventUnitRangePoint(gt_ShipAmbush2, null, PointFromId(219737674), 5.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ship Ambush 3
//--------------------------------------------------------------------------------------------------
bool gt_ShipAmbush3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aISpawnWaveLocation = RegionFromId(4);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWaveShip(4);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWaveShip(5);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWaveShip(5);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipAmbush3_Init () {
    gt_ShipAmbush3 = TriggerCreate("gt_ShipAmbush3_Func");
    TriggerEnable(gt_ShipAmbush3, false);
    TriggerAddEventUnitRangePoint(gt_ShipAmbush3, null, PointFromId(1761545501), 5.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ship Ambush 4
//--------------------------------------------------------------------------------------------------
bool gt_ShipAmbush4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aISpawnWaveLocation = RegionFromId(4);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWaveShip(5);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWaveShip(6);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWaveShip(6);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipAmbush4_Init () {
    gt_ShipAmbush4 = TriggerCreate("gt_ShipAmbush4_Func");
    TriggerEnable(gt_ShipAmbush4, false);
    TriggerAddEventUnitRangePoint(gt_ShipAmbush4, null, PointFromId(1836515742), 5.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ship Ambush 5
//--------------------------------------------------------------------------------------------------
bool gt_ShipAmbush5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aISpawnWaveLocation = RegionFromId(6);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWaveShip(5);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWaveShip(6);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWaveShip(6);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipAmbush5_Init () {
    gt_ShipAmbush5 = TriggerCreate("gt_ShipAmbush5_Func");
    TriggerEnable(gt_ShipAmbush5, false);
    TriggerAddEventUnitRangePoint(gt_ShipAmbush5, null, PointFromId(2146900651), 5.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ship Ambush 6
//--------------------------------------------------------------------------------------------------
bool gt_ShipAmbush6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aISpawnWaveLocation = RegionFromId(6);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWaveShip(6);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWaveShip(7);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWaveShip(7);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipAmbush6_Init () {
    gt_ShipAmbush6 = TriggerCreate("gt_ShipAmbush6_Func");
    TriggerEnable(gt_ShipAmbush6, false);
    TriggerAddEventUnitRangePoint(gt_ShipAmbush6, null, PointFromId(1853013419), 5.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ship Ambush 7
//--------------------------------------------------------------------------------------------------
bool gt_ShipAmbush7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 6))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ColonistShipFlying2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_aISpawnWaveLocation = RegionFromId(1);
    Wait(1.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        }
        else {
            if ((libCOMI_gf_GetMissionDifficulty() == 2)) {
                gf_SpawnAIWaveShip(6);
            }
            else {
                if ((libCOMI_gf_GetMissionDifficulty() == 3)) {
                    gf_SpawnAIWaveShip(7);
                }
                else {
                    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
                        gf_SpawnAIWaveShip(7);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShipAmbush7_Init () {
    gt_ShipAmbush7 = TriggerCreate("gt_ShipAmbush7_Func");
    TriggerEnable(gt_ShipAmbush7, false);
    TriggerAddEventUnitRangePoint(gt_ShipAmbush7, null, PointFromId(532582003), 5.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08DifficultyAdjustments_Init();
    gt_Init09ConstructSpawn_Init();
    gt_Init10HybridSpawn_Init();
    gt_StartGameQ_Init();
    gt_ChristopherDialogueBossStart_Init();
    gt_ChristopherDialogueMovingOut_Init();
    gt_ChristopherDialogueEnemyAttackWave_Init();
    gt_ChristopherDialogueEnemyAttackWaveShip_Init();
    gt_ChristopherDialogueEnemyAttackWaveHybrid_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_DefeatEventChristopherDies_Init();
    gt_DefeatEventShipDies_Init();
    gt_Defeat_Init();
    gt_DetermineEnemySpawnWaveLocation_Init();
    gt_StartAI_Init();
    gt_Round1_Init();
    gt_Round2_Init();
    gt_Round3_Init();
    gt_Round4_Init();
    gt_AttackWave1_Init();
    gt_AttackWave2_Init();
    gt_AttackWave3_Init();
    gt_AttackWave4_Init();
    gt_AttackWave5_Init();
    gt_AttackWave6_Init();
    gt_AttackWave7_Init();
    gt_AttackWave8_Init();
    gt_AttackWave9_Init();
    gt_AttackWave10_Init();
    gt_KerriganLeapingStrikeFix_Init();
    gt_CreateInitialObjectives_Init();
    gt_MainObjectiveUpdate_Init();
    gt_ObjectivePet1Create_Init();
    gt_ObjectivePet1Failed_Init();
    gt_ObjectivePet1Complete_Init();
    gt_ObjectivePet2Create_Init();
    gt_ObjectivePet2Failed_Init();
    gt_ObjectivePet2Complete_Init();
    gt_SendPetHatersGroup1_Init();
    gt_SendPetHatersGroup2_Init();
    gt_KeepPetInsideTargetArea1_Init();
    gt_KeepPetInsideTargetArea2_Init();
    gt_StartBossFightArena1_Init();
    gt_StartBossFightArena2_Init();
    gt_StartBossFightArena3_Init();
    gt_StartBossFightArena4_Init();
    gt_GoBacktoArenaCenter1_Init();
    gt_GoBacktoArenaCenter2_Init();
    gt_GoBacktoArenaCenter3_Init();
    gt_GoBacktoArenaCenter4_Init();
    gt_ChangeTarget_Init();
    gt_BossDefeatedFieryConstruct_Init();
    gt_BossDefeatedArcticConstruct_Init();
    gt_BossDefeatedHideousConstruct_Init();
    gt_BossDefeatedVileConstruct_Init();
    gt_BossDefeatedExplosiveConstruct_Init();
    gt_BossDefeatedCorrosiveConstruct_Init();
    gt_IncreaseConstructHealth_Init();
    gt_KeepMovingDuringBossFight_Init();
    gt_ChristopherMovesOut1_Init();
    gt_ChristopherMovesOut2_Init();
    gt_ChristopherMovesOut3_Init();
    gt_ChristopherMovesOut4_Init();
    gt_CheckifPathisClear1_Init();
    gt_CheckifPathisClear2_Init();
    gt_CheckifPathisClear3_Init();
    gt_CheckifPathisClear4_Init();
    gt_ChristophersRouteArena1_Init();
    gt_ChristophersRouteArena2_Init();
    gt_ChristophersRouteArena3_Init();
    gt_ChristophersRouteArena4_Init();
    gt_ChristophersRouteArena1Return_Init();
    gt_ChristophersRouteArena2Return_Init();
    gt_ChristophersRouteArena3Return_Init();
    gt_ChristophersRouteArena4Return_Init();
    gt_PingArrows1_Init();
    gt_PingArrows2_Init();
    gt_PingArrows3_Init();
    gt_PingArrows4_Init();
    gt_CreateTimerChristophersShipFirstTime_Init();
    gt_CreateTimerChristophersShipSecondTime_Init();
    gt_CreateTimerChristophersShipThirdTime_Init();
    gt_CreateTimerChristophersShipFourthTime_Init();
    gt_SetupPings_Init();
    gt_CreateTimerPets_Init();
    gt_CreateTimerPets2_Init();
    gt_ShipAmbush1_Init();
    gt_ShipAmbush2_Init();
    gt_ShipAmbush3_Init();
    gt_ShipAmbush4_Init();
    gt_ShipAmbush5_Init();
    gt_ShipAmbush6_Init();
    gt_ShipAmbush7_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
