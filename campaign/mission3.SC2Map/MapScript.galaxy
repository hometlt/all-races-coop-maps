//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Scion Campaign Mission 3: The Refuge
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai9F1008BF"
include "ai04DE6177"
include "aiF4750E9A"
include "ai4E2D6440"
include "ai707E21AF"
include "ai551D9BF9"
include "aiFE5B5D47"
include "ai5160C641"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_untitledVariable001;
timer gv_surpriseEnds;
int gv_surpriseEndsWindow;
bool gv_dawn;
int gv_objective;

void InitGlobals () {
    gv_surpriseEnds = TimerCreate();
    gv_surpriseEndsWindow = c_timerWindowNone;
    gv_objective = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AttackSpam (unit lp_attacker);
void gf_RandomUnitSpam (unit lp_manufactor);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Civillians;
trigger gt_ohno;
trigger gt_SpitfireandBugfix;
trigger gt_Start;
trigger gt_GameStarts;
trigger gt_KillUnusedstuf;
trigger gt_GameStarts2;
trigger gt_Upgrades;
trigger gt_Win;
trigger gt_Lose;
trigger gt_Objective;
trigger gt_MONEY2;
trigger gt_MONEY;
trigger gt_MONEY3;
trigger gt_Debug;
trigger gt_Debug2;
trigger gt_Debug3;
trigger gt_OpeningCinamaticdontchange;
trigger gt_OpeningCinamaticdontchange3;
trigger gt_OpeningCinamaticdontchange2;
trigger gt_Lore;
trigger gt_NightMareDifficulty;
trigger gt_MedicPicker;
trigger gt_RefugeeAi;
trigger gt_MinerAi;
trigger gt_Skin;
trigger gt_BlindAi;
trigger gt_SneakAttackEnds;
trigger gt_Timer;
trigger gt_Nighttime;
trigger gt_Nighttime2;
trigger gt_Sunrisetimer;
trigger gt_KMoney;
trigger gt_KerionAi;
trigger gt_DisableBullies;
trigger gt_GyreEnergy;
trigger gt_FuseAi;
trigger gt_CasterAi;
trigger gt_FuseAiTimer;
trigger gt_BallofDeathAi;
trigger gt_DashAi;
trigger gt_MeridanStormAi;
trigger gt_AntiAirAi;
trigger gt_AntiAirAiTimer;
trigger gt_Discord;
trigger gt_GyreDiscord;
trigger gt_HybridAi;
trigger gt_HybridAi2;
trigger gt_HybridAi3;
trigger gt_HybridAi4;
trigger gt_HybridAi6;
trigger gt_BURN;
trigger gt_BURN2;
trigger gt_HybridAi5;
trigger gt_AttackWithRandomUnits;
trigger gt_UEDXT;
trigger gt_UEDXK;
trigger gt_UEDKT;
trigger gt_UEDKT2;
trigger gt_UEDAttackPaths;
trigger gt_StrikeDies;
trigger gt_StrikeDies2;
trigger gt_StrikeDies3;
trigger gt_ShredderAi;
trigger gt_PoliticalAi;
trigger gt_PoliticalAi2;
trigger gt_SupportAi;
trigger gt_SupportTimer;
trigger gt_AntiAirAi2;
trigger gt_AntiAirAiTimer2;
trigger gt_HealAi;
trigger gt_HealAi2;
trigger gt_QueenAi;
trigger gt_QueenAi2;
trigger gt_KrakenAi;
trigger gt_KrakenAi2;
trigger gt_KrakenAi3;
trigger gt_ProwlerAi;
trigger gt_AcidAi;
trigger gt_AcidAi2;
trigger gt_XaylidAi;
trigger gt_CassyAi;
trigger gt_Bullies;
trigger gt_XaylidLosesbase;
trigger gt_KerrionLosesBOTHThings;
trigger gt_RefugeesLosetheirbase;
trigger gt_AipullsunitsTerran;
trigger gt_AipullsunitsXaylid;
trigger gt_TerranMaximum;
trigger gt_XaylidMax;
trigger gt_KerrionMax;
trigger gt_Talking2;
trigger gt_Talking3;
trigger gt_Talking4;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai9F1008BF") { ai9F1008BF_start(p); }
    if (cai_playerAI[p] == "ai04DE6177") { ai04DE6177_start(p); }
    if (cai_playerAI[p] == "aiF4750E9A") { aiF4750E9A_start(p); }
    if (cai_playerAI[p] == "ai4E2D6440") { ai4E2D6440_start(p); }
    if (cai_playerAI[p] == "ai707E21AF") { ai707E21AF_start(p); }
    if (cai_playerAI[p] == "ai551D9BF9") { ai551D9BF9_start(p); }
    if (cai_playerAI[p] == "aiFE5B5D47") { aiFE5B5D47_start(p); }
    if (cai_playerAI[p] == "ai5160C641") { ai5160C641_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { ai9F1008BF_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai04DE6177") { ai04DE6177_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiF4750E9A") { aiF4750E9A_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai4E2D6440") { ai4E2D6440_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai707E21AF") { ai707E21AF_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai551D9BF9") { ai551D9BF9_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiFE5B5D47") { aiFE5B5D47_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai5160C641") { ai5160C641_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { return ai9F1008BF_getCustomData(p); }
    if (cai_playerAI[p] == "ai04DE6177") { return ai04DE6177_getCustomData(p); }
    if (cai_playerAI[p] == "aiF4750E9A") { return aiF4750E9A_getCustomData(p); }
    if (cai_playerAI[p] == "ai4E2D6440") { return ai4E2D6440_getCustomData(p); }
    if (cai_playerAI[p] == "ai707E21AF") { return ai707E21AF_getCustomData(p); }
    if (cai_playerAI[p] == "ai551D9BF9") { return ai551D9BF9_getCustomData(p); }
    if (cai_playerAI[p] == "aiFE5B5D47") { return aiFE5B5D47_getCustomData(p); }
    if (cai_playerAI[p] == "ai5160C641") { return ai5160C641_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { return ai9F1008BF_getLastWave(p); }
    if (cai_playerAI[p] == "ai04DE6177") { return ai04DE6177_getLastWave(p); }
    if (cai_playerAI[p] == "aiF4750E9A") { return aiF4750E9A_getLastWave(p); }
    if (cai_playerAI[p] == "ai4E2D6440") { return ai4E2D6440_getLastWave(p); }
    if (cai_playerAI[p] == "ai707E21AF") { return ai707E21AF_getLastWave(p); }
    if (cai_playerAI[p] == "ai551D9BF9") { return ai551D9BF9_getLastWave(p); }
    if (cai_playerAI[p] == "aiFE5B5D47") { return aiFE5B5D47_getLastWave(p); }
    if (cai_playerAI[p] == "ai5160C641") { return ai5160C641_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { ai9F1008BF_waves_run(p, target); }
    if (cai_playerAI[p] == "ai04DE6177") { ai04DE6177_waves_run(p, target); }
    if (cai_playerAI[p] == "aiF4750E9A") { aiF4750E9A_waves_run(p, target); }
    if (cai_playerAI[p] == "ai4E2D6440") { ai4E2D6440_waves_run(p, target); }
    if (cai_playerAI[p] == "ai707E21AF") { ai707E21AF_waves_run(p, target); }
    if (cai_playerAI[p] == "ai551D9BF9") { ai551D9BF9_waves_run(p, target); }
    if (cai_playerAI[p] == "aiFE5B5D47") { aiFE5B5D47_waves_run(p, target); }
    if (cai_playerAI[p] == "ai5160C641") { ai5160C641_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { ai9F1008BF_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai04DE6177") { ai04DE6177_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiF4750E9A") { aiF4750E9A_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai4E2D6440") { ai4E2D6440_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai707E21AF") { ai707E21AF_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai551D9BF9") { ai551D9BF9_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiFE5B5D47") { aiFE5B5D47_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai5160C641") { ai5160C641_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai9F1008BF") { ai9F1008BF_waves_stop(); }
    if (ai == "ai04DE6177") { ai04DE6177_waves_stop(); }
    if (ai == "aiF4750E9A") { aiF4750E9A_waves_stop(); }
    if (ai == "ai4E2D6440") { ai4E2D6440_waves_stop(); }
    if (ai == "ai707E21AF") { ai707E21AF_waves_stop(); }
    if (ai == "ai551D9BF9") { ai551D9BF9_waves_stop(); }
    if (ai == "aiFE5B5D47") { aiFE5B5D47_waves_stop(); }
    if (ai == "ai5160C641") { ai5160C641_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { ai9F1008BF_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai04DE6177") { ai04DE6177_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiF4750E9A") { aiF4750E9A_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai4E2D6440") { ai4E2D6440_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai707E21AF") { ai707E21AF_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai551D9BF9") { ai551D9BF9_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiFE5B5D47") { aiFE5B5D47_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai5160C641") { ai5160C641_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { ai9F1008BF_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai04DE6177") { ai04DE6177_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiF4750E9A") { aiF4750E9A_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai4E2D6440") { ai4E2D6440_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai707E21AF") { ai707E21AF_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai551D9BF9") { ai551D9BF9_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiFE5B5D47") { aiFE5B5D47_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai5160C641") { ai5160C641_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { return ai9F1008BF_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai04DE6177") { return ai04DE6177_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiF4750E9A") { return aiF4750E9A_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai4E2D6440") { return ai4E2D6440_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai707E21AF") { return ai707E21AF_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai551D9BF9") { return ai551D9BF9_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiFE5B5D47") { return aiFE5B5D47_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai5160C641") { return ai5160C641_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { return ai9F1008BF_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai04DE6177") { return ai04DE6177_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiF4750E9A") { return aiF4750E9A_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai4E2D6440") { return ai4E2D6440_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai707E21AF") { return ai707E21AF_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai551D9BF9") { return ai551D9BF9_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiFE5B5D47") { return aiFE5B5D47_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai5160C641") { return ai5160C641_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai9F1008BF") { return ai9F1008BF_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai04DE6177") { return ai04DE6177_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiF4750E9A") { return aiF4750E9A_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai4E2D6440") { return ai4E2D6440_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai707E21AF") { return ai707E21AF_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai551D9BF9") { return ai551D9BF9_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiFE5B5D47") { return aiFE5B5D47_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai5160C641") { return ai5160C641_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai9F1008BF", 4);
    cai_start("ai04DE6177", 2);
    cai_start("aiF4750E9A", 5);
    cai_start("ai4E2D6440", 3);
    cai_start("ai707E21AF", 4);
    cai_start("ai551D9BF9", 5);
    cai_start("aiFE5B5D47", 2);
    cai_start("ai5160C641", 3);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(2, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(3, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_AttackSpam_Trigger = null;
unit auto_gf_AttackSpam_lp_attacker;

void gf_AttackSpam (unit lp_attacker) {
    auto_gf_AttackSpam_lp_attacker = lp_attacker;

    if (auto_gf_AttackSpam_Trigger == null) {
        auto_gf_AttackSpam_Trigger = TriggerCreate("auto_gf_AttackSpam_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackSpam_Trigger, false, false);
}

bool auto_gf_AttackSpam_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attacker = auto_gf_AttackSpam_lp_attacker;

    // Automatic Variable Declarations
    // Implementation
    AISetUnitScriptControlled(lp_attacker, true);
    while (true) {
        if ((UnitIsAlive(lp_attacker) == false)) {
            break;
        }
        else {
            Wait(2.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(52))), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(52))), c_orderQueueReplace);
            Wait(22.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueReplace);
            Wait(12.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueReplace);
            Wait(32.0, c_timeGame);
            UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(50))), c_orderQueueReplace);
            Wait(32.0, c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_RandomUnitSpam_Trigger = null;
unit auto_gf_RandomUnitSpam_lp_manufactor;

void gf_RandomUnitSpam (unit lp_manufactor) {
    auto_gf_RandomUnitSpam_lp_manufactor = lp_manufactor;

    if (auto_gf_RandomUnitSpam_Trigger == null) {
        auto_gf_RandomUnitSpam_Trigger = TriggerCreate("auto_gf_RandomUnitSpam_TriggerFunc");
    }

    TriggerExecute(auto_gf_RandomUnitSpam_Trigger, false, false);
}

bool auto_gf_RandomUnitSpam_TriggerFunc (bool testConds, bool runActions) {
    unit lp_manufactor = auto_gf_RandomUnitSpam_lp_manufactor;

    // Automatic Variable Declarations
    // Implementation
    AISetUnitScriptControlled(lp_manufactor, true);
    while (true) {
        if ((UnitIsAlive(lp_manufactor) == false)) {
            break;
        }
        else {
            Wait(2.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueReplace);
            Wait(5.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            Wait(15.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueAddToEnd);
            Wait(2.0, c_timeGame);
            Wait(15.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            Wait(15.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueAddToEnd);
            Wait(2.0, c_timeGame);
            Wait(15.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueAddToEnd);
            Wait(45.0, c_timeGame);
            UnitIssueOrder(lp_manufactor, Order(AbilityCommand("TeleportationNodeTrain", 1)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civillians
//--------------------------------------------------------------------------------------------------
bool gt_Civillians_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1478864020), Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1478864020), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2077113422)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1478864020), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(266827195)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1478864020), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1909381551)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1478864020), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(729947804)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitFromId(1478864020), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(134364784)), c_orderQueueReplace);
    Wait(88.0, c_timeGame);
    UnitKill(UnitFromId(1478864020));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Civillians_Init () {
    gt_Civillians = TriggerCreate("gt_Civillians_Func");
    TriggerAddEventUnitRegion(gt_Civillians, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: oh no
//--------------------------------------------------------------------------------------------------
bool gt_ohno_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Mission_Nova09_DefendersTrooper42_090", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(232705611), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/F3C9C257"), StringExternal("Param/Value/E1661172"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ohno_Init () {
    gt_ohno = TriggerCreate("gt_ohno_Func");
    TriggerAddEventUnitRegion(gt_ohno, null, RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spitfire and Bug fix
//--------------------------------------------------------------------------------------------------
bool gt_SpitfireandBugfix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "CalibratedEngines", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "SpitfireMadcapRounds", 1);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpitfireandBugfix_Init () {
    gt_SpitfireandBugfix = TriggerCreate("gt_SpitfireandBugfix_Func");
    TriggerAddEventMapInit(gt_SpitfireandBugfix);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech
//--------------------------------------------------------------------------------------------------
bool gt_Start_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAlliance(c_playerGroupEnemy, 1), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    TechTreeRequirementsEnable(2, false);
    TechTreeRequirementsEnable(3, false);
    TechTreeRequirementsEnable(4, false);
    TechTreeRequirementsEnable(5, false);
    PlayerModifyPropertyInt(2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    Wait(400.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranBuildingArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "ModifiedGait", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "LatentCharge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "ExaltedShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "PulsarDampener", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "AmplifiedSphere", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "DissonanceProjector", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "WraithChamber", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "ShieldCompulsion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "AnisopteraWings", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "CruxConvergence", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironShieldsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechWeaponsLevel1", 1);
    Wait(900.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironShieldsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechWeaponsLevel2", 1);
    Wait(900.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioArmorLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechArmorLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironShieldsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Start_Init () {
    gt_Start = TriggerCreate("gt_Start_Func");
    TriggerAddEventMapInit(gt_Start);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Starts
//--------------------------------------------------------------------------------------------------
bool gt_GameStarts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    MeleeInitResources();
    MeleeInitUnits();
    TechTreeUpgradeAllow(1, "AAMDefenseTurret", false);
    TechTreeUpgradeAllow(1, "ShapedHull", false);
    TechTreeUnitAllow(1, "Badger", false);
    TechTreeUnitAllow(1, "Boar", false);
    TechTreeUnitAllow(1, "Courier", false);
    TechTreeUnitAllow(1, "Jupiter", false);
    TechTreeUnitAllow(1, "Olympus", false);
    TechTreeUnitAllow(1, "OrdnanceCache", false);
    TechTreeRequirementsEnable(2, false);
    TechTreeRequirementsEnable(3, false);
    TechTreeRequirementsEnable(4, false);
    TechTreeRequirementsEnable(5, false);
    TechTreeUpgradeAddLevel(3, "IcarusCatalyst", 1);
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAlliance(c_playerGroupEnemy, 1), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    cai_start("ai04DE6177", 2);
    cai_start("ai4E2D6440", 3);
    cai_start("ai9F1008BF", 4);
    cai_start("aiF4750E9A", 5);
    AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(35.0, 35.0, 35.0, 35.0), libNtve_gf_DifficultyValueFixed(35.0, 35.0, 35.0, 35.0), 2);
    AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(25.0, 25.0, 25.0, 25.0), libNtve_gf_DifficultyValueFixed(30.0, 30.0, 30.0, 30.0), 3);
    AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(25.0, 25.0, 25.0, 25.0), libNtve_gf_DifficultyValueFixed(30.0, 30.0, 30.0, 30.0), 4);
    AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(25.0, 25.0, 25.0, 25.0), libNtve_gf_DifficultyValueFixed(30.0, 30.0, 30.0, 30.0), 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameStarts_Init () {
    gt_GameStarts = TriggerCreate("gt_GameStarts_Func");
    TriggerAddEventMapInit(gt_GameStarts);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KillUnusedstuf
//--------------------------------------------------------------------------------------------------
bool gt_KillUnusedstuf_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7E6A4FC8_g;
    int auto7E6A4FC8_u;
    unit auto7E6A4FC8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E6A4FC8_g = UnitGroup("Meridian", 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7E6A4FC8_u = UnitGroupCount(auto7E6A4FC8_g, c_unitCountAll);
    for (;; auto7E6A4FC8_u -= 1) {
        auto7E6A4FC8_var = UnitGroupUnitFromEnd(auto7E6A4FC8_g, auto7E6A4FC8_u);
        if (auto7E6A4FC8_var == null) { break; }
        UnitKill(auto7E6A4FC8_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillUnusedstuf_Init () {
    gt_KillUnusedstuf = TriggerCreate("gt_KillUnusedstuf_Func");
    TriggerAddEventMapInit(gt_KillUnusedstuf);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Starts 2
//--------------------------------------------------------------------------------------------------
bool gt_GameStarts2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/935D3196"), StringToText(""), c_objectiveStateActive, false);
    libSwaC_gf_CreateObjectivePing(false, PointFromId(1102818284), null);
    libSwaC_gf_CreateObjectivePing(false, PointFromId(1008202685), null);
    libSwaC_gf_CreateObjectivePing(false, PointFromId(1114362332), null);
    libSwaC_gf_CreateObjectivePing(false, PointFromId(901709136), null);
    Wait(360.0, c_timeGame);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateCompleted);
    PingDestroyAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameStarts2_Init () {
    gt_GameStarts2 = TriggerCreate("gt_GameStarts2_Func");
    TriggerAddEventMapInit(gt_GameStarts2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_Upgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(4, "OpticalFlare", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "HybridArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "HybridShieldsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "UpgradeHybridArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "UpgradeHybridShieldsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "HybridWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "DarkTemplarBlinkUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "CruxConvergence", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "PersonalCloaking", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "CloakingDrone", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "ProjectedGravityShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "VolatileDischarge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "RefinedExcretion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "RegenerativeBioSteelSiegeTank", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "AdvancedMedicTraining", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "NanobotInjectors", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "StabilizerMedPacks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "DevastatorMissiles", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "HailstormMissilePods", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "ReinforcedSuperstructure", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranShipWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleAndShipArmorsLevel1", 1);
    Wait(645.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranShipWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "FirewallShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BlazeFirewallRevert", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "RefittedNozzles", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "AtmosphericOperationsLoadout", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "ExtendedMissilePayloads", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "EnrichedUraniumOrdinance", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "SalvoFiringPattern", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "TandemReactiveArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "DroneRepairModule", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "EnginSurchargeProtocols", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "FieldReloadingProtocols", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "CloakingDrone", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "ProjectedGravityShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "SpareRifleBatteries", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "OpticalFlare", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "StrikeGrenade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "CommandoTraining", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDAdvisorUpgradeBecauseEditorIsFunctionalHelp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "PersistentSpores", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "IncendiaryInfusion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "VolatileDischarge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "Hunker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ResidualAcid", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "CleavingSpores", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "BattleFrenzy", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "BileDucts", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "CalcifiedHusk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ScorpaliskMetabolics", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ProlongedSpores", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "DexterousJoints", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "OcularAcuity", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "PiercingThrust", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "RefinedExcretion", 1);
    Wait(800.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "SiegeTankShapedBlast", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranShipWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerCarapaceLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundCarapaceLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerAttacksLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundAttacksLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleAndShipArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranShipWeaponsLevel1", 1);
    Wait(700.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranShipWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleAndShipArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerCarapaceLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundCarapaceLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerAttacksLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundAttacksLevel2", 1);
    Wait(600.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranShipWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerCarapaceLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundCarapaceLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerAttacksLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundAttacksLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "FireSuppressionSystems", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrades_Init () {
    gt_Upgrades = TriggerCreate("gt_Upgrades_Func");
    TriggerAddEventTimeElapsed(gt_Upgrades, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Win
//--------------------------------------------------------------------------------------------------
bool gt_Win_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, 3, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetAlliance(1, 3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    CameraApplyInfo(1, CameraInfoFromId(259329303), 0.0, -1, 10, true);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(232705611), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/585E955C"), StringExternal("Param/Value/3143213B"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(158498661), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(2080310605), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(63436177), UnitGetPosition(UnitFromId(2107371017)));
    libNtve_gf_UnitCreateFacingPoint(1, "Scion_Avenger", c_unitCreateIgnorePlacement, 1, PointFromId(922971710), UnitGetPosition(UnitFromId(2107371017)));
    Wait(7.1, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/FDBCF3EC"), StringExternal("Param/Value/FD71F69C"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(7.1, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/BF5475D9"), StringExternal("Param/Value/6F8A24C0"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(7.1, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/8CCECD8A"), StringExternal("Param/Value/8E589A7B"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(5.1, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    libNtve_gf_SetAlliance(1, 3, libNtve_ge_AllianceSetting_Enemy);
    Wait(4.0, c_timeGame);
    GameOver(1, c_gameOverVictory, true, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    CameraApplyInfo(1, CameraInfoFromId(1381353160), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Win_Init () {
    gt_Win = TriggerCreate("gt_Win_Func");
    TriggerAddEventUnitDied(gt_Win, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lose
//--------------------------------------------------------------------------------------------------
bool gt_Lose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(1, c_gameOverDefeat, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lose_Init () {
    gt_Lose = TriggerCreate("gt_Lose_Func");
    TriggerAddEventUnitDied(gt_Lose, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective
//--------------------------------------------------------------------------------------------------
bool gt_Objective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/74AD63F8"), StringToText(""), c_objectiveStateActive, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective_Init () {
    gt_Objective = TriggerCreate("gt_Objective_Func");
    TriggerAddEventMapInit(gt_Objective);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MONEY 2
//--------------------------------------------------------------------------------------------------
bool gt_MONEY2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 500);
    PlayerModifyPropertyInt(2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(2, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(2, c_playerPropSuppliesMade, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropSuppliesMade, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropSuppliesMade, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(5, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(5, c_playerPropSuppliesMade, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MONEY2_Init () {
    gt_MONEY2 = TriggerCreate("gt_MONEY2_Func");
    TriggerAddEventMapInit(gt_MONEY2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MONEY
//--------------------------------------------------------------------------------------------------
bool gt_MONEY_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(5, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(3, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(4, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(5, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MONEY_Init () {
    gt_MONEY = TriggerCreate("gt_MONEY_Func");
    TriggerAddEventTimePeriodic(gt_MONEY, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MONEY 3
//--------------------------------------------------------------------------------------------------
bool gt_MONEY3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, 50);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MONEY3_Init () {
    gt_MONEY3 = TriggerCreate("gt_MONEY3_Func");
    TriggerAddEventTimePeriodic(gt_MONEY3, 100.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug
//--------------------------------------------------------------------------------------------------
bool gt_Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(2046507236));
    UnitKill(UnitFromId(913236621));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug_Init () {
    gt_Debug = TriggerCreate("gt_Debug_Func");
    TriggerAddEventChatMessage(gt_Debug, c_playerAny, "-Kerion", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug 2
//--------------------------------------------------------------------------------------------------
bool gt_Debug2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(869395160));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug2_Init () {
    gt_Debug2 = TriggerCreate("gt_Debug2_Func");
    TriggerAddEventChatMessage(gt_Debug2, c_playerAny, "-Xaylid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug 3
//--------------------------------------------------------------------------------------------------
bool gt_Debug3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(1536016950));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Debug3_Init () {
    gt_Debug3 = TriggerCreate("gt_Debug3_Func");
    TriggerAddEventChatMessage(gt_Debug3, c_playerAny, "-Terran", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Cinamatic dont change
//--------------------------------------------------------------------------------------------------
bool gt_OpeningCinamaticdontchange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, gt_OpeningCinamaticdontchange2, true, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    VisRevealArea(1, RegionFromId(4), 400.0, false);
    VisRevealArea(1, RegionFromId(3), 410.0, false);
    VisRevealArea(1, RegionFromId(2), 420.0, false);
    VisRevealArea(1, RegionFromId(19), 420.0, false);
    VisRevealArea(1, RegionFromId(20), 420.0, false);
    VisRevealArea(1, RegionFromId(53), 420.0, false);
    VisRevealArea(1, RegionFromId(54), 420.0, false);
    VisRevealArea(1, RegionFromId(55), 420.0, false);
    Wait(0.1, c_timeGame);
    CameraApplyInfo(1, CameraInfoFromId(340008555), 0.0, -1, 10, true);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/B889F9E4"), StringExternal("Param/Value/E5773C73"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    CameraPan(1, RegionGetCenter(RegionFromId(5)), 10.0, -1, 10.0, false);
    UnitIssueOrder(UnitFromId(1769508664), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1849847703), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1117482476), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(363489694), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(928290662), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1763472224), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    Wait(9.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(1381353160), 0.0, -1, 10, true);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/C75DAAF8"), StringExternal("Param/Value/7F2684B8"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    UnitIssueOrder(UnitFromId(762199218), OrderTargetingUnit(AbilityCommand("MULEGather", 0), UnitFromId(979524935)), c_orderQueueReplace);
    Wait(8.0, c_timeReal);
    UnitIssueOrder(UnitFromId(1763472224), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1763472224), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1763472224), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    CameraApplyInfo(1, CameraInfoFromId(1213682851), 0.0, -1, 10, true);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/32681C87"), StringExternal("Param/Value/3ED86558"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(0.1, c_timeReal);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/C5B6E1F7"), StringExternal("Param/Value/B9FE23A7"), 14.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    CameraPan(1, RegionGetCenter(RegionFromId(7)), 20.0, -1, 5.0, false);
    Wait(14.0, c_timeReal);
    CameraApplyInfo(1, CameraInfoFromId(1053631736), 0.0, -1, 10, true);
    UnitKill(UnitFromId(1269810800));
    UnitKill(UnitFromId(233385729));
    UnitKill(UnitFromId(542958575));
    UnitKill(UnitFromId(234621812));
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/68858B2C"), StringExternal("Param/Value/DA528EC9"), 14.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    CameraPan(1, RegionGetCenter(RegionFromId(6)), 20.0, -1, 5.0, false);
    Wait(15.0, c_timeReal);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    CameraApplyInfo(1, CameraInfoFromId(175009320), 0.0, -1, 10, true);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/7AA4A181"), StringExternal("Param/Value/535FF217"), 15.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    CameraPan(1, RegionGetCenter(RegionFromId(8)), 20.0, -1, 5.0, false);
    Wait(14.0, c_timeReal);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/E3B37D13"), StringExternal("Param/Value/CE43A8A0"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    CameraApplyInfo(1, CameraInfoFromId(1381353160), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/7FAB28E1"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A86236C4"), StringExternal("Param/Value/86837D6B"), "Assets\\Textures\\btn-icon-dominion.dds");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/BA800F77"));
    TriggerEnable(gt_OpeningCinamaticdontchange2, false);
    Wait(10.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/FB93497A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningCinamaticdontchange_Init () {
    gt_OpeningCinamaticdontchange = TriggerCreate("gt_OpeningCinamaticdontchange_Func");
    TriggerAddEventMapInit(gt_OpeningCinamaticdontchange);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Cinamatic dont change 3
//--------------------------------------------------------------------------------------------------
bool gt_OpeningCinamaticdontchange3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    Wait(9.0, c_timeReal);
    Wait(8.0, c_timeReal);
    Wait(0.1, c_timeReal);
    Wait(14.0, c_timeReal);
    Wait(15.0, c_timeReal);
    Wait(14.0, c_timeReal);
    TriggerEnable(gt_OpeningCinamaticdontchange2, false);
    Wait(10.0, c_timeReal);
    Wait(10.0, c_timeReal);
    Wait(10.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningCinamaticdontchange3_Init () {
    gt_OpeningCinamaticdontchange3 = TriggerCreate("gt_OpeningCinamaticdontchange3_Func");
    TriggerAddEventMapInit(gt_OpeningCinamaticdontchange3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opening Cinamatic dont change 2
//--------------------------------------------------------------------------------------------------
bool gt_OpeningCinamaticdontchange2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_OpeningCinamaticdontchange, false);
    TriggerDestroy(gt_OpeningCinamaticdontchange);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/5AE8592A"));
    VisRevealArea(1, RegionFromId(4), 400.0, false);
    VisRevealArea(1, RegionFromId(3), 410.0, false);
    VisRevealArea(1, RegionFromId(2), 420.0, false);
    VisRevealArea(1, RegionFromId(19), 420.0, false);
    VisRevealArea(1, RegionFromId(20), 420.0, false);
    Wait(0.1, c_timeGame);
    UnitIssueOrder(UnitFromId(762199218), OrderTargetingUnit(AbilityCommand("MULEGather", 0), UnitFromId(979524935)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1769508664), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1849847703), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1117482476), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(363489694), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(928290662), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1763472224), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1719434388)), c_orderQueueReplace);
    UnitKill(UnitFromId(1269810800));
    UnitKill(UnitFromId(233385729));
    UnitKill(UnitFromId(542958575));
    UnitKill(UnitFromId(234621812));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    CameraApplyInfo(1, CameraInfoFromId(1381353160), 0.0, -1, 10, true);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/77CBD93F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/7D860372"), StringExternal("Param/Value/2AF748D0"), "Assets\\Textures\\btn-icon-dominion.dds");
    Wait(10.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/38316E21"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeningCinamaticdontchange2_Init () {
    gt_OpeningCinamaticdontchange2 = TriggerCreate("gt_OpeningCinamaticdontchange2_Func");
    TriggerAddEventChatMessage(gt_OpeningCinamaticdontchange2, c_playerAny, "-skip", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lore
//--------------------------------------------------------------------------------------------------
bool gt_Lore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/F6D3D307"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/6582DD2F"), StringExternal("Param/Value/F93C8A62"), "Assets\\Textures\\btn-icon-dominion.dds");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3FE04E80"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lore_Init () {
    gt_Lore = TriggerCreate("gt_Lore_Func");
    TriggerAddEventTimeElapsed(gt_Lore, 324.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NightMare Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_NightMareDifficulty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF5E82CBE_g;
    int autoF5E82CBE_u;
    unit autoF5E82CBE_var;
    unitgroup autoD94CC68A_g;
    int autoD94CC68A_u;
    unit autoD94CC68A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5E82CBE_g = UnitGroup(null, c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 20);
    autoF5E82CBE_u = UnitGroupCount(autoF5E82CBE_g, c_unitCountAll);
    for (;; autoF5E82CBE_u -= 1) {
        autoF5E82CBE_var = UnitGroupUnitFromEnd(autoF5E82CBE_g, autoF5E82CBE_u);
        if (autoF5E82CBE_var == null) { break; }
        UnitKill(autoF5E82CBE_var);
    }
    AISetDefenseRadii(2, 30.0, 30.0, 30.0);
    AISetDefenseRadii(3, 30.0, 30.0, 30.0);
    AISetDefenseRadii(4, 30.0, 30.0, 30.0);
    AISetDefenseRadii(5, 20.0, 15.0, 16.0);
    AITimePause(false);
    GameSetMissionTimePaused(false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_OpeningCinamaticdontchange3, false);
    TriggerEnable(gt_OpeningCinamaticdontchange, false);
    TriggerEnable(gt_OpeningCinamaticdontchange2, false);
    TriggerDestroy(gt_OpeningCinamaticdontchange);
    TriggerDestroy(gt_OpeningCinamaticdontchange2);
    TriggerDestroy(gt_OpeningCinamaticdontchange3);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/D9EB3BE5"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/DD2D5F56"), StringExternal("Param/Value/AE6D202C"), "Assets\\Textures\\btn-icon-dominion.dds");
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, 3000);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, 3000);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/6980D4BD"));
    AIToggleBulliesInRegion(2, RegionFromId(3), true);
    cai_waves_run(2, PlayerGroupSingle(1));
    PlayerSetDifficulty(2, 2);
    AIToggleBulliesInRegion(4, RegionFromId(4), true);
    cai_waves_run(4, PlayerGroupSingle(1));
    PlayerSetDifficulty(4, 2);
    AIToggleBulliesInRegion(5, RegionFromId(2), true);
    cai_waves_run(5, PlayerGroupSingle(1));
    PlayerSetDifficulty(5, 2);
    Wait(10.0, c_timeReal);
    TriggerEnable(gt_RefugeesLosetheirbase, false);
    TriggerEnable(gt_XaylidLosesbase, false);
    TriggerEnable(gt_KerrionLosesBOTHThings, false);
    TriggerEnable(gt_Start, false);
    TriggerEnable(gt_Upgrades, false);
    TriggerEnable(gt_UEDKT, false);
    TriggerEnable(gt_UEDKT2, false);
    TriggerEnable(gt_UEDXK, false);
    TriggerEnable(gt_UEDXT, false);
    TriggerEnable(gt_Sunrisetimer, false);
    TriggerEnable(gt_Timer, false);
    TriggerEnable(gt_Nighttime, false);
    TriggerEnable(gt_Nighttime2, false);
    Wait(90.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DD59A1F3"));
    cai_waves_stop("ai9F1008BF");
    cai_start("ai707E21AF", 4);
    cai_waves_run(4, PlayerGroupSingle(1));
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6E5D3E5B"));
    cai_waves_stop("aiF4750E9A");
    cai_start("ai551D9BF9", 5);
    cai_waves_run(5, PlayerGroupSingle(1));
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/36DB67C6"));
    cai_waves_stop("ai04DE6177");
    cai_start("aiFE5B5D47", 2);
    cai_waves_run(2, PlayerGroupSingle(1));
    cai_waves_stop("ai4E2D6440");
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel2", 1);
    Wait(10.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel3", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/93A5E4AF"));
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/0C93A041"), StringExternal("Param/Value/7CF95104"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(863433033), null);
    VisRevealArea(1, RegionFromId(13), 45.0, false);
    VisRevealArea(1, RegionFromId(14), 55.0, false);
    VisRevealArea(1, RegionFromId(15), 65.0, false);
    VisRevealArea(1, RegionFromId(16), 75.0, false);
    VisRevealArea(1, RegionFromId(17), 85.0, false);
    VisRevealArea(1, RegionFromId(18), 95.0, false);
    MinimapPing(PlayerGroupAll(), PointFromId(863433033), 7.0, Color(100.00, 0.00, 0.00));
    Wait(300.0, c_timeGame);
    Wait(5.0, c_timeGame);
    Wait(5.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranBuildingArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "ModifiedGait", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "LatentCharge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "ExaltedShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "PulsarDampener", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "AmplifiedSphere", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "DissonanceProjector", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "WraithChamber", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "ShieldCompulsion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "AnisopteraWings", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "MeridianConvergence", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironShieldsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechWeaponsLevel1", 1);
    Wait(200.0, c_timeGame);
    PlayerSetDifficulty(3, 2);
    cai_waves_run(3, PlayerGroupSingle(1));
    cai_start("ai5160C641", 3);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/157F5423"));
    autoD94CC68A_g = UnitGroup("Strikefighter", c_playerAny, RegionFromId(42), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD94CC68A_u = UnitGroupCount(autoD94CC68A_g, c_unitCountAll);
    for (;; autoD94CC68A_u -= 1) {
        autoD94CC68A_var = UnitGroupUnitFromEnd(autoD94CC68A_g, autoD94CC68A_u);
        if (autoD94CC68A_var == null) { break; }
        UnitKill(autoD94CC68A_var);
    }
    GameSetToDLighting("AgriaNight");
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironShieldsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechWeaponsLevel2", 1);
    Wait(200.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioArmorLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechArmorLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironShieldsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironBioWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "KeironMechWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "OpticalFlare", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "CloakingDrone", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "ProjectedGravityShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "VolatileDischarge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "RefinedExcretion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "RegenerativeBioSteelSiegeTank", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "AdvancedMedicTraining", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "NanobotInjectors", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "StabilizerMedPacks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "DevastatorMissiles", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "HailstormMissilePods", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "ReinforcedSuperstructure", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleAndShipArmorsLevel1", 1);
    Wait(145.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "SiegeTankShapedBlast", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "FirewallShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BlazeFirewallRevert", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "RefittedNozzles", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "AtmosphericOperationsLoadout", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "ExtendedMissilePayloads", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "SalvoFiringPattern", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "TandemReactiveArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "DroneRepairModule", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "EnginSurchargeProtocols", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "FieldReloadingProtocols", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "CloakingDrone", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "ProjectedGravityShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "SpareRifleBatteries", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "OpticalFlare", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "StrikeGrenade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "CommandoTraining", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "PersistentSpores", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "IncendiaryInfusion", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "VolatileDischarge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "Hunker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ResidualAcid", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "CleavingSpores", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "BattleFrenzy", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "BileDucts", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "CalcifiedHusk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ScorpaliskMetabolics", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ProlongedSpores", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "DexterousJoints", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "OcularAcuity", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "PiercingThrust", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "RefinedExcretion", 1);
    Wait(100.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerCarapaceLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundCarapaceLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerAttacksLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundAttacksLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleAndShipArmorsLevel2", 1);
    Wait(300.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranVehicleAndShipArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerCarapaceLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundCarapaceLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerAttacksLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundAttacksLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "MaelstromRounds", 1);
    Wait(400.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerCarapaceLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundCarapaceLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidFlyerAttacksLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "XayidGroundAttacksLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(4, "FireSuppressionSystems", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightMareDifficulty_Init () {
    gt_NightMareDifficulty = TriggerCreate("gt_NightMareDifficulty_Func");
    TriggerAddEventChatMessage(gt_NightMareDifficulty, c_playerAny, "-Nightmare", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MedicPicker
//--------------------------------------------------------------------------------------------------
bool gt_MedicPicker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto62E71417_g;
    int auto62E71417_u;
    unit auto62E71417_var;
    unitgroup auto28850BE7_g;
    int auto28850BE7_u;
    unit auto28850BE7_var;
    unitgroup auto459DC86D_g;
    int auto459DC86D_u;
    unit auto459DC86D_var;
    unitgroup autoF8A70296_g;
    int autoF8A70296_u;
    unit autoF8A70296_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1178252805), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), RegionRandomPoint(RegionFromName("ScanHere"))), c_orderQueueReplace);
    auto62E71417_g = UnitGroup("Medic", 4, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto62E71417_u = UnitGroupCount(auto62E71417_g, c_unitCountAll);
    for (;; auto62E71417_u -= 1) {
        auto62E71417_var = UnitGroupUnitFromEnd(auto62E71417_g, auto62E71417_u);
        if (auto62E71417_var == null) { break; }
        VisRevealArea(4, RegionFromId(21), 22.0, false);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(auto62E71417_var, OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionFromName("ZAP"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(210829089))), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        UnitIssueOrder(auto62E71417_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(210829089)), c_orderQueueAddToEnd);
    }
    UnitIssueOrder(UnitFromId(1767138400), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), RegionRandomPoint(RegionFromName("ScanHere"))), c_orderQueueReplace);
    auto28850BE7_g = UnitGroup("Medic", 4, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto28850BE7_u = UnitGroupCount(auto28850BE7_g, c_unitCountAll);
    for (;; auto28850BE7_u -= 1) {
        auto28850BE7_var = UnitGroupUnitFromEnd(auto28850BE7_g, auto28850BE7_u);
        if (auto28850BE7_var == null) { break; }
        VisRevealArea(4, RegionFromId(21), 22.0, false);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(auto28850BE7_var, OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        UnitIssueOrder(auto28850BE7_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(210829089)), c_orderQueueAddToEnd);
    }
    auto459DC86D_g = UnitGroup("Medic", 4, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto459DC86D_u = UnitGroupCount(auto459DC86D_g, c_unitCountAll);
    for (;; auto459DC86D_u -= 1) {
        auto459DC86D_var = UnitGroupUnitFromEnd(auto459DC86D_g, auto459DC86D_u);
        if (auto459DC86D_var == null) { break; }
        UnitIssueOrder(auto459DC86D_var, OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        UnitIssueOrder(auto459DC86D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(210829089)), c_orderQueueAddToEnd);
    }
    autoF8A70296_g = UnitGroup("Medic", 4, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoF8A70296_u = UnitGroupCount(autoF8A70296_g, c_unitCountAll);
    for (;; autoF8A70296_u -= 1) {
        autoF8A70296_var = UnitGroupUnitFromEnd(autoF8A70296_g, autoF8A70296_u);
        if (autoF8A70296_var == null) { break; }
        UnitIssueOrder(autoF8A70296_var, OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        UnitIssueOrder(autoF8A70296_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(210829089)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedicPicker_Init () {
    gt_MedicPicker = TriggerCreate("gt_MedicPicker_Func");
    TriggerAddEventTimePeriodic(gt_MedicPicker, 185.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Ai
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIInitCampaignTowns(4);
    cai_waves_run(4, PlayerGroupSingle(1));
    PlayerSetDifficulty(4, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeAi_Init () {
    gt_RefugeeAi = TriggerCreate("gt_RefugeeAi_Func");
    TriggerAddEventTimeElapsed(gt_RefugeeAi, 309.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner Ai
//--------------------------------------------------------------------------------------------------
bool gt_MinerAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(1057400948), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(1665331876)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(404840652), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(1665331876)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(483107492), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(1665331876)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(429337618), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitFromId(1665331876)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerAi_Init () {
    gt_MinerAi = TriggerCreate("gt_MinerAi_Func");
    TriggerAddEventTimeElapsed(gt_MinerAi, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skin
//--------------------------------------------------------------------------------------------------
bool gt_Skin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerApplySkin(4, "SiegeTankMerc", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(4, "SiegeTankMerc", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Skin_Init () {
    gt_Skin = TriggerCreate("gt_Skin_Func");
    TriggerAddEventMapInit(gt_Skin);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BlindAi
//--------------------------------------------------------------------------------------------------
bool gt_BlindAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Medic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), EventUnitTarget()), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlindAi_Init () {
    gt_BlindAi = TriggerCreate("gt_BlindAi_Func");
    TriggerAddEventUnitAttacked(gt_BlindAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sneak Attack Ends
//--------------------------------------------------------------------------------------------------
bool gt_SneakAttackEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(UnitFromId(285339462), OrderTargetingPoint(AbilityCommand("Hyperjump", 0), PointFromId(1380789965)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(565830647), OrderTargetingPoint(AbilityCommand("Hyperjump", 0), PointFromId(17940359)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2031286980), OrderTargetingPoint(AbilityCommand("Hyperjump", 0), PointFromId(1285359627)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(635614560), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1145611532)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(654086568), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2051158758)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1111328813), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(782696959)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(189964050), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1808506807)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(443208031), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(933367321)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(675082543), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2011853367)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1820119678), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1710694383)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(542348797), OrderTargetingUnit(AbilityCommand("AegisRelocate", 0), UnitFromId(2046507236)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1478989179), OrderTargetingUnit(AbilityCommand("AegisRelocate", 0), UnitFromId(913236621)), c_orderQueueReplace);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/068E0452"));
    MinimapPing(PlayerGroupAll(), PointFromId(110740849), 6.0, Color(0.00, 100.00, 0.00));
    MinimapPing(PlayerGroupAll(), PointFromId(1274813916), 6.0, Color(0.00, 0.00, 100.00));
    MinimapPing(PlayerGroupAll(), PointFromId(821322015), 6.0, Color(100.00, 50.20, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SneakAttackEnds_Init () {
    gt_SneakAttackEnds = TriggerCreate("gt_SneakAttackEnds_Func");
    TriggerAddEventTimeElapsed(gt_SneakAttackEnds, 306.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer
//--------------------------------------------------------------------------------------------------
bool gt_Timer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_surpriseEnds, 310.0, false, c_timeGame);
    TimerWindowCreate(gv_surpriseEnds, StringExternal("Param/Value/4B1F1A74"), true, false);
    gv_surpriseEndsWindow = TimerWindowLastCreated();
    TimerWindowSetPosition(gv_surpriseEndsWindow, 800, 50);
    Wait(365.0, c_timeGame);
    TimerWindowDestroy(gv_surpriseEndsWindow);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Timer_Init () {
    gt_Timer = TriggerCreate("gt_Timer_Func");
    TriggerAddEventMapInit(gt_Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Night time
//--------------------------------------------------------------------------------------------------
bool gt_Nighttime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MarSaraCampaignDay", 810.0);
    gv_dawn = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nighttime_Init () {
    gt_Nighttime = TriggerCreate("gt_Nighttime_Func");
    TriggerEnable(gt_Nighttime, false);
    TriggerAddEventMapInit(gt_Nighttime);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Night time 2
//--------------------------------------------------------------------------------------------------
bool gt_Nighttime2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("SMTVUNNStart");
    gv_dawn = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nighttime2_Init () {
    gt_Nighttime2 = TriggerCreate("gt_Nighttime2_Func");
    TriggerAddEventMapInit(gt_Nighttime2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sunrise - timer
//--------------------------------------------------------------------------------------------------
bool gt_Sunrisetimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Nighttime, true, false);
    UnitSetProgressComplete(UnitFromId(2046507236), 1, 100);
    UnitSetProgressComplete(UnitFromId(2046507236), 2, 100);
    UnitSetProgressComplete(UnitFromId(2046507236), 3, 100);
    UnitSetProgressComplete(UnitFromId(2046507236), 4, 100);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sunrisetimer_Init () {
    gt_Sunrisetimer = TriggerCreate("gt_Sunrisetimer_Func");
    TriggerAddEventTimeElapsed(gt_Sunrisetimer, 35.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: K - Money
//--------------------------------------------------------------------------------------------------
bool gt_KMoney_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    PlayerModifyPropertyInt(2, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(2, c_playerPropSuppliesMade, c_playerPropOperSetTo, 50);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KMoney_Init () {
    gt_KMoney = TriggerCreate("gt_KMoney_Func");
    TriggerAddEventUnitDied(gt_KMoney, UnitRefFromUnit(UnitFromId(2046507236)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerion Ai
//--------------------------------------------------------------------------------------------------
bool gt_KerionAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(913236621)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(2046507236)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    cai_waves_run(2, PlayerGroupSingle(1));
    PlayerSetDifficulty(2, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerionAi_Init () {
    gt_KerionAi = TriggerCreate("gt_KerionAi_Func");
    TriggerAddEventTimeElapsed(gt_KerionAi, 306.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Bullies
//--------------------------------------------------------------------------------------------------
bool gt_DisableBullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(2, RegionFromId(38), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableBullies_Init () {
    gt_DisableBullies = TriggerCreate("gt_DisableBullies_Func");
    TriggerAddEventUnitDied(gt_DisableBullies, UnitRefFromUnit(UnitFromId(2046507236)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gyre Energy
//--------------------------------------------------------------------------------------------------
bool gt_GyreEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Gyre"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergy, 120.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GyreEnergy_Init () {
    gt_GyreEnergy = TriggerCreate("gt_GyreEnergy_Func");
    TriggerAddEventUnitTrainProgress(gt_GyreEnergy, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Ai
//--------------------------------------------------------------------------------------------------
bool gt_FuseAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 2))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Fuse", 2, RegionCircle(UnitGetPosition(EventUnit()), 100.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), true);
    UnitIssueOrder(UnitGroupClosestToPoint(UnitGroup("Fuse", 2, RegionCircle(UnitGetPosition(EventUnit()), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), OrderTargetingUnit(AbilityCommand("FuseFusion", 0), EventUnit()), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseAi_Init () {
    gt_FuseAi = TriggerCreate("gt_FuseAi_Func");
    TriggerAddEventUnitAttacked(gt_FuseAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caster Ai
//--------------------------------------------------------------------------------------------------
bool gt_CasterAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4AEFD665_g;
    int auto4AEFD665_u;
    unit auto4AEFD665_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4AEFD665_g = UnitGroup("Crux", 2, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8);
    auto4AEFD665_u = UnitGroupCount(auto4AEFD665_g, c_unitCountAll);
    for (;; auto4AEFD665_u -= 1) {
        auto4AEFD665_var = UnitGroupUnitFromEnd(auto4AEFD665_g, auto4AEFD665_u);
        if (auto4AEFD665_var == null) { break; }
        VisRevealArea(2, RegionFromId(21), 22.0, false);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(auto4AEFD665_var, OrderTargetingUnit(AbilityCommand("CruxLightningBolt", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionFromName("ZAP"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(1987743633))), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        UnitIssueOrder(auto4AEFD665_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1987743633)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CasterAi_Init () {
    gt_CasterAi = TriggerCreate("gt_CasterAi_Func");
    TriggerAddEventTimePeriodic(gt_CasterAi, 105.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Ai Timer
//--------------------------------------------------------------------------------------------------
bool gt_FuseAiTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_FuseAi, true, false);
    TriggerEnable(gt_FuseAi, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseAiTimer_Init () {
    gt_FuseAiTimer = TriggerCreate("gt_FuseAiTimer_Func");
    TriggerAddEventTimePeriodic(gt_FuseAiTimer, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ball of Death Ai
//--------------------------------------------------------------------------------------------------
bool gt_BallofDeathAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Paragon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("EmissaryOrb", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BallofDeathAi_Init () {
    gt_BallofDeathAi = TriggerCreate("gt_BallofDeathAi_Func");
    TriggerAddEventUnitAttacked(gt_BallofDeathAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dash Ai
//--------------------------------------------------------------------------------------------------
bool gt_DashAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Pariah"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Projection", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DashAi_Init () {
    gt_DashAi = TriggerCreate("gt_DashAi_Func");
    TriggerAddEventUnitAttacked(gt_DashAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meridan Storm Ai
//--------------------------------------------------------------------------------------------------
bool gt_MeridanStormAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Crux"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("CruxConvergence", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeridanStormAi_Init () {
    gt_MeridanStormAi = TriggerCreate("gt_MeridanStormAi_Func");
    TriggerAddEventUnitAttacked(gt_MeridanStormAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Air Ai
//--------------------------------------------------------------------------------------------------
bool gt_AntiAirAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Gyre"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitTarget()) == "AvengerGenetron")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("GyreShackle", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    }
    else {
        if (((UnitGetType(EventUnitTarget()) == "Blitzer") || (UnitGetType(EventUnitTarget()) == "Torrent") || (UnitGetType(EventUnitTarget()) == "Aquila"))) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueAddToFront);
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("GyreAnnex", 0)), c_orderQueueReplace);
            TriggerEnable(TriggerGetCurrent(), false);
        }
        else {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiAirAi_Init () {
    gt_AntiAirAi = TriggerCreate("gt_AntiAirAi_Func");
    TriggerAddEventUnitAttacked(gt_AntiAirAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Air Ai Timer
//--------------------------------------------------------------------------------------------------
bool gt_AntiAirAiTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AntiAirAi, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiAirAiTimer_Init () {
    gt_AntiAirAiTimer = TriggerCreate("gt_AntiAirAiTimer_Func");
    TriggerAddEventTimePeriodic(gt_AntiAirAiTimer, 6.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Discord
//--------------------------------------------------------------------------------------------------
bool gt_Discord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(2046507236)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomInt(60, 600), c_timeGame);
    UnitIssueOrder(UnitFromId(77970668), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1265464829)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(77970668), Order(AbilityCommand("EchoDiscordMode", 0)), c_orderQueueAddToEnd);
    Wait(RandomInt(60, 300), c_timeGame);
    UnitIssueOrder(UnitFromId(47089084), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1265464829)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(47089084), Order(AbilityCommand("EchoDiscordMode", 0)), c_orderQueueAddToEnd);
    Wait(RandomInt(60, 300), c_timeGame);
    UnitIssueOrder(UnitFromId(1873911614), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1265464829)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1873911614), Order(AbilityCommand("EchoDiscordMode", 0)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Discord_Init () {
    gt_Discord = TriggerCreate("gt_Discord_Func");
    TriggerAddEventTimeElapsed(gt_Discord, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GyreDiscord
//--------------------------------------------------------------------------------------------------
bool gt_GyreDiscord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(2046507236)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomInt(60, 300), c_timeGame);
    UnitIssueOrder(UnitFromId(391930168), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1265464829)), c_orderQueueReplace);
    Wait(RandomInt(5, 20), c_timeGame);
    UnitIssueOrder(UnitFromId(77970668), Order(AbilityCommand("GyreAnnex", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(391930168), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1265464829)), c_orderQueueAddToEnd);
    Wait(RandomInt(60, 100), c_timeGame);
    UnitIssueOrder(UnitFromId(1214924405), OrderTargetingPoint(AbilityCommand("Emanator", 0), PointFromId(1797600945)), c_orderQueueReplace);
    Wait(RandomInt(2, 5), c_timeGame);
    UnitIssueOrder(UnitFromId(1214924405), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1265464829)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GyreDiscord_Init () {
    gt_GyreDiscord = TriggerCreate("gt_GyreDiscord_Func");
    TriggerAddEventTimeElapsed(gt_GyreDiscord, 500.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HybridAi
//--------------------------------------------------------------------------------------------------
bool gt_HybridAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hybrid"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("PsychicDrain", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("ConsumeEssence", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAi_Init () {
    gt_HybridAi = TriggerCreate("gt_HybridAi_Func");
    TriggerAddEventUnitAttacked(gt_HybridAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HybridAi2
//--------------------------------------------------------------------------------------------------
bool gt_HybridAi2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridDestroyer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAi2_Init () {
    gt_HybridAi2 = TriggerCreate("gt_HybridAi2_Func");
    TriggerAddEventUnitAttacked(gt_HybridAi2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HybridAi3
//--------------------------------------------------------------------------------------------------
bool gt_HybridAi3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridDemolisher"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAi3_Init () {
    gt_HybridAi3 = TriggerCreate("gt_HybridAi3_Func");
    TriggerAddEventUnitAttacked(gt_HybridAi3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HybridAi4
//--------------------------------------------------------------------------------------------------
bool gt_HybridAi4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridScion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("YagdraFirebreath", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("VoidBurst", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("YagdraFireball", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAi4_Init () {
    gt_HybridAi4 = TriggerCreate("gt_HybridAi4_Func");
    TriggerAddEventUnitAttacked(gt_HybridAi4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HybridAi6
//--------------------------------------------------------------------------------------------------
bool gt_HybridAi6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_HybridAi4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAi6_Init () {
    gt_HybridAi6 = TriggerCreate("gt_HybridAi6_Func");
    TriggerAddEventTimePeriodic(gt_HybridAi6, 7.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BURN
//--------------------------------------------------------------------------------------------------
bool gt_BURN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridScion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(458091905), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/8C63C61A"), StringExternal("Param/Value/F60BD161"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("zMission_Zerus03_Zerus3Boss1_008", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BURN_Init () {
    gt_BURN = TriggerCreate("gt_BURN_Func");
    TriggerAddEventUnitAttacked(gt_BURN, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BURN 2
//--------------------------------------------------------------------------------------------------
bool gt_BURN2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridEffuser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1669592476), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/848C426C"), StringExternal("Param/Value/FAE4A7CF"), 4.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("zPitch_Zerus03_AncientOneNamed_004", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BURN2_Init () {
    gt_BURN2 = TriggerCreate("gt_BURN2_Func");
    TriggerAddEventUnitAttacked(gt_BURN2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HybridAi5
//--------------------------------------------------------------------------------------------------
bool gt_HybridAi5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridEffuser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("DarkTemplarBlink", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZHybridPsionicShockwave", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAi5_Init () {
    gt_HybridAi5 = TriggerCreate("gt_HybridAi5_Func");
    TriggerAddEventUnitAttacked(gt_HybridAi5, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AttackWithRandomUnits
//--------------------------------------------------------------------------------------------------
bool gt_AttackWithRandomUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCDF0FCAB_g;
    int autoCDF0FCAB_u;
    unit autoCDF0FCAB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCDF0FCAB_g = UnitGroup("Strikefighter", 3, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCDF0FCAB_u = UnitGroupCount(autoCDF0FCAB_g, c_unitCountAll);
    for (;; autoCDF0FCAB_u -= 1) {
        autoCDF0FCAB_var = UnitGroupUnitFromEnd(autoCDF0FCAB_g, autoCDF0FCAB_u);
        if (autoCDF0FCAB_var == null) { break; }
        gf_AttackSpam(autoCDF0FCAB_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWithRandomUnits_Init () {
    gt_AttackWithRandomUnits = TriggerCreate("gt_AttackWithRandomUnits_Func");
    TriggerAddEventTimePeriodic(gt_AttackWithRandomUnits, 190.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED XT
//--------------------------------------------------------------------------------------------------
bool gt_UEDXT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA4387643_g;
    int autoA4387643_u;
    unit autoA4387643_var;

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(869395160)) == false) && (UnitIsAlive(UnitFromId(1536016950)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHots_gf_PlaySoundLinkasMusic(SoundLink("ZKorhal03MusicAlt1", -1), false, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UEDXK, false);
    TriggerEnable(gt_UEDKT, false);
    Wait(11.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/752A4920"), StringExternal("Param/Value/E213A81E"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(863433033), null);
    VisRevealArea(1, RegionFromId(13), 45.0, false);
    VisRevealArea(1, RegionFromId(14), 55.0, false);
    VisRevealArea(1, RegionFromId(15), 65.0, false);
    VisRevealArea(1, RegionFromId(16), 75.0, false);
    VisRevealArea(1, RegionFromId(17), 85.0, false);
    VisRevealArea(1, RegionFromId(18), 95.0, false);
    VisRevealArea(1, RegionFromId(44), 15.0, false);
    MinimapPing(PlayerGroupAll(), PointFromId(863433033), 7.0, Color(100.00, 0.00, 0.00));
    cai_waves_run(3, PlayerGroupSingle(1));
    PlayerSetDifficulty(3, 2);
    autoA4387643_g = UnitGroup("TeleportationNode", 3, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4387643_u = UnitGroupCount(autoA4387643_g, c_unitCountAll);
    for (;; autoA4387643_u -= 1) {
        autoA4387643_var = UnitGroupUnitFromEnd(autoA4387643_g, autoA4387643_u);
        if (autoA4387643_var == null) { break; }
        gf_RandomUnitSpam(autoA4387643_var);
    }
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5AD0D850"));
    Wait(100.0, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/A0824044"), StringExternal("Param/Value/329E6523"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(10.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1343254845), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/737A3C09"), StringExternal("Param/Value/93E42BBE"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Strikefighter_Yes", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UEDXT_Init () {
    gt_UEDXT = TriggerCreate("gt_UEDXT_Func");
    TriggerAddEventUnitDied(gt_UEDXT, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED XK
//--------------------------------------------------------------------------------------------------
bool gt_UEDXK_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC56D5B20_g;
    int autoC56D5B20_u;
    unit autoC56D5B20_var;

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(869395160)) == false) && (UnitIsAlive(UnitFromId(913236621)) == false) && (UnitIsAlive(UnitFromId(2046507236)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHots_gf_PlaySoundLinkasMusic(SoundLink("ZKorhal03MusicAlt1", -1), false, true);
    TriggerEnable(gt_UEDXT, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UEDKT, false);
    Wait(11.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/B20D2762"), StringExternal("Param/Value/40187756"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(863433033), null);
    VisRevealArea(1, RegionFromId(13), 45.0, false);
    VisRevealArea(1, RegionFromId(14), 55.0, false);
    VisRevealArea(1, RegionFromId(15), 65.0, false);
    VisRevealArea(1, RegionFromId(16), 75.0, false);
    VisRevealArea(1, RegionFromId(17), 85.0, false);
    VisRevealArea(1, RegionFromId(18), 95.0, false);
    VisRevealArea(1, RegionFromId(44), 15.0, false);
    MinimapPing(PlayerGroupAll(), PointFromId(863433033), 7.0, Color(100.00, 0.00, 0.00));
    cai_waves_run(3, PlayerGroupSingle(1));
    PlayerSetDifficulty(3, 2);
    autoC56D5B20_g = UnitGroup("TeleportationNode", 3, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC56D5B20_u = UnitGroupCount(autoC56D5B20_g, c_unitCountAll);
    for (;; autoC56D5B20_u -= 1) {
        autoC56D5B20_var = UnitGroupUnitFromEnd(autoC56D5B20_g, autoC56D5B20_u);
        if (autoC56D5B20_var == null) { break; }
        gf_RandomUnitSpam(autoC56D5B20_var);
    }
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/733FE3E4"));
    Wait(100.0, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/27397817"), StringExternal("Param/Value/EA39C608"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(10.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1343254845), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/9FE1B90C"), StringExternal("Param/Value/EBFD4C69"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Strikefighter_Yes", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UEDXK_Init () {
    gt_UEDXK = TriggerCreate("gt_UEDXK_Func");
    TriggerAddEventUnitDied(gt_UEDXK, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED KT
//--------------------------------------------------------------------------------------------------
bool gt_UEDKT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto09B742E8_g;
    int auto09B742E8_u;
    unit auto09B742E8_var;

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(913236621)) == false) && (UnitIsAlive(UnitFromId(2046507236)) == false) && (UnitIsAlive(UnitFromId(1536016950)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHots_gf_PlaySoundLinkasMusic(SoundLink("ZKorhal03MusicAlt1", -1), false, true);
    TriggerEnable(gt_UEDXT, false);
    TriggerEnable(gt_UEDXK, false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(11.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/CEFBD9F5"), StringExternal("Param/Value/45DF008C"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libSwaC_gf_CreateObjectivePing(true, PointFromId(863433033), null);
    VisRevealArea(1, RegionFromId(13), 45.0, false);
    VisRevealArea(1, RegionFromId(14), 55.0, false);
    VisRevealArea(1, RegionFromId(15), 65.0, false);
    VisRevealArea(1, RegionFromId(16), 75.0, false);
    VisRevealArea(1, RegionFromId(17), 85.0, false);
    VisRevealArea(1, RegionFromId(18), 95.0, false);
    VisRevealArea(1, RegionFromId(44), 15.0, false);
    MinimapPing(PlayerGroupAll(), PointFromId(863433033), 7.0, Color(100.00, 0.00, 0.00));
    cai_waves_run(3, PlayerGroupSingle(1));
    PlayerSetDifficulty(3, 2);
    auto09B742E8_g = UnitGroup("TeleportationNode", 3, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09B742E8_u = UnitGroupCount(auto09B742E8_g, c_unitCountAll);
    for (;; auto09B742E8_u -= 1) {
        auto09B742E8_var = UnitGroupUnitFromEnd(auto09B742E8_g, auto09B742E8_u);
        if (auto09B742E8_var == null) { break; }
        gf_RandomUnitSpam(auto09B742E8_var);
    }
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EFF305EB"));
    Wait(100.0, c_timeGame);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/CE90370C"), StringExternal("Param/Value/7016F01C"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(10.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1343254845), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/23B24964"), StringExternal("Param/Value/544F382C"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Strikefighter_Yes", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UEDKT_Init () {
    gt_UEDKT = TriggerCreate("gt_UEDKT_Func");
    TriggerAddEventUnitDied(gt_UEDKT, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED KT 2
//--------------------------------------------------------------------------------------------------
bool gt_UEDKT2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(913236621)) == false) && (UnitIsAlive(UnitFromId(2046507236)) == false) && (UnitIsAlive(UnitFromId(1536016950)) == false) && (UnitIsAlive(UnitFromId(869395160)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(456913488));
    TriggerEnable(gt_XaylidMax, false);
    TriggerEnable(gt_KerrionMax, false);
    TriggerEnable(gt_TerranMaximum, false);
    TriggerEnable(TriggerGetCurrent(), false);
    cai_waves_stop("ai4E2D6440");
    cai_start("ai5160C641", 3);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel2", 1);
    Wait(4.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDArmorLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDVehicalsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UEDWeaponsLevel3", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8DA45DFB"));
    Wait(16.0, c_timeGame);
    cai_waves_run(3, PlayerGroupSingle(1));
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(2107371017), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/46434B3E"), StringExternal("Param/Value/9D2D4F35"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UEDKT2_Init () {
    gt_UEDKT2 = TriggerCreate("gt_UEDKT2_Func");
    TriggerAddEventUnitDied(gt_UEDKT2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UEDAttackPaths
//--------------------------------------------------------------------------------------------------
bool gt_UEDAttackPaths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(913236621)) == false) && (UnitIsAlive(UnitFromId(2046507236)) == false) && (UnitIsAlive(UnitFromId(1536016950)) == false) && (UnitIsAlive(UnitFromId(869395160)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(362.0, c_timeGame);
        PointSet(PointFromId(211193505), RegionRandomPoint(RegionFromId(41)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UEDAttackPaths_Init () {
    gt_UEDAttackPaths = TriggerCreate("gt_UEDAttackPaths_Func");
    TriggerAddEventUnitDied(gt_UEDAttackPaths, UnitRefFromUnit(UnitFromId(456913488)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: StrikeDies
//--------------------------------------------------------------------------------------------------
bool gt_StrikeDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Strikefighter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1343254845), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/2E55F797"), StringExternal("Param/Value/BAFA9649"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Strikefighter_Help", -1), c_maxPlayers, PlayerGroupAll(), 400.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrikeDies_Init () {
    gt_StrikeDies = TriggerCreate("gt_StrikeDies_Func");
    TriggerAddEventUnitAttacked2(gt_StrikeDies, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StrikeDies 2
//--------------------------------------------------------------------------------------------------
bool gt_StrikeDies2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(245662893), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/63401AB0"), StringExternal("Param/Value/2124A813"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("pMission_Korhal02_Hybrid01_038", -1), c_maxPlayers, PlayerGroupAll(), 400.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrikeDies2_Init () {
    gt_StrikeDies2 = TriggerCreate("gt_StrikeDies2_Func");
    TriggerAddEventUnitAttacked2(gt_StrikeDies2, UnitRefFromUnit(UnitFromId(245662893)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StrikeDies 3
//--------------------------------------------------------------------------------------------------
bool gt_StrikeDies3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(280248377), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/71E625EB"), StringExternal("Param/Value/C0B5C0EB"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("Brutalisk_Yes", -1), c_maxPlayers, PlayerGroupAll(), 400.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrikeDies3_Init () {
    gt_StrikeDies3 = TriggerCreate("gt_StrikeDies3_Func");
    TriggerAddEventUnitAttacked2(gt_StrikeDies3, UnitRefFromUnit(UnitFromId(280248377)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shredder Ai
//--------------------------------------------------------------------------------------------------
bool gt_ShredderAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PoliticalAdvisor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("BonesTossGrenade", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShredderAi_Init () {
    gt_ShredderAi = TriggerCreate("gt_ShredderAi_Func");
    TriggerAddEventUnitAttacked(gt_ShredderAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Political Ai
//--------------------------------------------------------------------------------------------------
bool gt_PoliticalAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PoliticalAdvisor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("OnwardComrades", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoliticalAi_Init () {
    gt_PoliticalAi = TriggerCreate("gt_PoliticalAi_Func");
    TriggerAddEventUnitAttacked(gt_PoliticalAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Political Ai 2
//--------------------------------------------------------------------------------------------------
bool gt_PoliticalAi2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Spectre"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("UltrasonicPulse", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoliticalAi2_Init () {
    gt_PoliticalAi2 = TriggerCreate("gt_PoliticalAi2_Func");
    TriggerAddEventUnitAttacked(gt_PoliticalAi2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SupportAi
//--------------------------------------------------------------------------------------------------
bool gt_SupportAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 3))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("SupportShuttle", 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTarget()) == "Aquila") || (UnitGetType(EventUnitTarget()) == "Blitzer")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("PsionicSuppressionField", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupportAi_Init () {
    gt_SupportAi = TriggerCreate("gt_SupportAi_Func");
    TriggerAddEventUnitAttacked(gt_SupportAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SupportTimer
//--------------------------------------------------------------------------------------------------
bool gt_SupportTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SupportAi, true, false);
    TriggerEnable(gt_SupportAi, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupportTimer_Init () {
    gt_SupportTimer = TriggerCreate("gt_SupportTimer_Func");
    TriggerAddEventTimePeriodic(gt_SupportTimer, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Air Ai 2
//--------------------------------------------------------------------------------------------------
bool gt_AntiAirAi2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SupportShuttle"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitTarget()) == "Aquila") && (UnitGetType(EventUnitTarget()) == "Blitzer")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("PsionicSuppressionField", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    }
    else {
        if (((UnitGetType(EventUnitTarget()) == "Interdictor") || (UnitGetType(EventUnitTarget()) == "AvengerGenetron") || (UnitGetType(EventUnitTarget()) == "Torrent"))) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("PsionicSuppressionField", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
            Wait(0.6, c_timeGame);
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("CloakingDrone", 0), EventUnit()), c_orderQueueReplace);
            Wait(1.5, c_timeGame);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("moveUED", 0), PointFromId(23193745)), c_orderQueueReplace);
            TriggerEnable(TriggerGetCurrent(), false);
        }
        else {
            Wait(5.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiAirAi2_Init () {
    gt_AntiAirAi2 = TriggerCreate("gt_AntiAirAi2_Func");
    TriggerAddEventUnitAttacked(gt_AntiAirAi2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Air Ai Timer 2
//--------------------------------------------------------------------------------------------------
bool gt_AntiAirAiTimer2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_AntiAirAi2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiAirAiTimer2_Init () {
    gt_AntiAirAiTimer2 = TriggerCreate("gt_AntiAirAiTimer2_Func");
    TriggerAddEventTimePeriodic(gt_AntiAirAiTimer2, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Ai
//--------------------------------------------------------------------------------------------------
bool gt_HealAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Mendling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("MendlingSacrificialMutation", 0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealAi_Init () {
    gt_HealAi = TriggerCreate("gt_HealAi_Func");
    TriggerAddEventUnitAttacked(gt_HealAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Ai 2
//--------------------------------------------------------------------------------------------------
bool gt_HealAi2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_HealAi, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealAi2_Init () {
    gt_HealAi2 = TriggerCreate("gt_HealAi2_Func");
    TriggerAddEventTimePeriodic(gt_HealAi2, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: "Queen" Ai
//--------------------------------------------------------------------------------------------------
bool gt_QueenAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto389EFA78_g;
    int auto389EFA78_u;
    unit auto389EFA78_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto389EFA78_g = UnitGroup("Xayithoan", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 20);
    auto389EFA78_u = UnitGroupCount(auto389EFA78_g, c_unitCountAll);
    for (;; auto389EFA78_u -= 1) {
        auto389EFA78_var = UnitGroupUnitFromEnd(auto389EFA78_g, auto389EFA78_u);
        if (auto389EFA78_var == null) { break; }
        UnitIssueOrder(auto389EFA78_var, OrderTargetingUnit(AbilityCommand("AdaptiveInjection", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 18), c_unitCountAlive)), c_orderQueueReplace);
        UnitIssueOrder(auto389EFA78_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(509404491)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenAi_Init () {
    gt_QueenAi = TriggerCreate("gt_QueenAi_Func");
    TriggerAddEventTimePeriodic(gt_QueenAi, 115.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: "Queen" Ai 2
//--------------------------------------------------------------------------------------------------
bool gt_QueenAi2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4E6E6A5D_g;
    int auto4E6E6A5D_u;
    unit auto4E6E6A5D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E6E6A5D_g = UnitGroup("Xayithoan", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
    auto4E6E6A5D_u = UnitGroupCount(auto4E6E6A5D_g, c_unitCountAll);
    for (;; auto4E6E6A5D_u -= 1) {
        auto4E6E6A5D_var = UnitGroupUnitFromEnd(auto4E6E6A5D_g, auto4E6E6A5D_u);
        if (auto4E6E6A5D_var == null) { break; }
        UnitIssueOrder(auto4E6E6A5D_var, OrderTargetingUnit(AbilityCommand("AdaptiveInjection", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(15.0, c_timeGame);
        UnitIssueOrder(auto4E6E6A5D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(509404491)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenAi2_Init () {
    gt_QueenAi2 = TriggerCreate("gt_QueenAi2_Func");
    TriggerAddEventTimePeriodic(gt_QueenAi2, 115.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraken Ai
//--------------------------------------------------------------------------------------------------
bool gt_KrakenAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1617C3DC_g;
    int auto1617C3DC_u;
    unit auto1617C3DC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1617C3DC_g = UnitGroup("Kraken", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto1617C3DC_u = UnitGroupCount(auto1617C3DC_g, c_unitCountAll);
    for (;; auto1617C3DC_u -= 1) {
        auto1617C3DC_var = UnitGroupUnitFromEnd(auto1617C3DC_g, auto1617C3DC_u);
        if (auto1617C3DC_var == null) { break; }
        UnitIssueOrder(auto1617C3DC_var, OrderTargetingPoint(AbilityCommand("VolatileDischarge", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto1617C3DC_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(509404491)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KrakenAi_Init () {
    gt_KrakenAi = TriggerCreate("gt_KrakenAi_Func");
    TriggerAddEventTimePeriodic(gt_KrakenAi, 750.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraken Ai 2
//--------------------------------------------------------------------------------------------------
bool gt_KrakenAi2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto67684F46_g;
    int auto67684F46_u;
    unit auto67684F46_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto67684F46_g = UnitGroup("Kraken", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto67684F46_u = UnitGroupCount(auto67684F46_g, c_unitCountAll);
    for (;; auto67684F46_u -= 1) {
        auto67684F46_var = UnitGroupUnitFromEnd(auto67684F46_g, auto67684F46_u);
        if (auto67684F46_var == null) { break; }
        UnitIssueOrder(auto67684F46_var, OrderTargetingPoint(AbilityCommand("VolatileDischarge", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto67684F46_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(509404491)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KrakenAi2_Init () {
    gt_KrakenAi2 = TriggerCreate("gt_KrakenAi2_Func");
    TriggerAddEventTimePeriodic(gt_KrakenAi2, 700.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kraken Ai 3
//--------------------------------------------------------------------------------------------------
bool gt_KrakenAi3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE0E45E0D_g;
    int autoE0E45E0D_u;
    unit autoE0E45E0D_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(1536016950)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE0E45E0D_g = UnitGroup("Kraken", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoE0E45E0D_u = UnitGroupCount(autoE0E45E0D_g, c_unitCountAll);
    for (;; autoE0E45E0D_u -= 1) {
        autoE0E45E0D_var = UnitGroupUnitFromEnd(autoE0E45E0D_g, autoE0E45E0D_u);
        if (autoE0E45E0D_var == null) { break; }
        UnitIssueOrder(autoE0E45E0D_var, OrderTargetingPoint(AbilityCommand("VolatileDischarge", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoE0E45E0D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(509404491)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KrakenAi3_Init () {
    gt_KrakenAi3 = TriggerCreate("gt_KrakenAi3_Func");
    TriggerAddEventTimePeriodic(gt_KrakenAi3, 450.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProwlerAi
//--------------------------------------------------------------------------------------------------
bool gt_ProwlerAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFE88AA1F_g;
    int autoFE88AA1F_u;
    unit autoFE88AA1F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFE88AA1F_g = UnitGroup("Prowler", 5, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoFE88AA1F_u = UnitGroupCount(autoFE88AA1F_g, c_unitCountAll);
    for (;; autoFE88AA1F_u -= 1) {
        autoFE88AA1F_var = UnitGroupUnitFromEnd(autoFE88AA1F_g, autoFE88AA1F_u);
        if (autoFE88AA1F_var == null) { break; }
        UnitIssueOrder(autoFE88AA1F_var, OrderTargetingPoint(AbilityCommand("PlaceAcidNest", 0), RegionRandomPoint(RegionFromId(45))), c_orderQueueReplace);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(autoFE88AA1F_var, OrderTargetingPoint(AbilityCommand("PlaceAcidNest", 0), RegionRandomPoint(RegionFromId(45))), c_orderQueueAddToEnd);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(autoFE88AA1F_var, OrderTargetingPoint(AbilityCommand("PlaceAcidNest", 0), RegionRandomPoint(RegionFromId(45))), c_orderQueueAddToEnd);
        Wait(6.0, c_timeGame);
        UnitIssueOrder(autoFE88AA1F_var, OrderTargetingPoint(AbilityCommand("PlaceAcidNest", 0), RegionRandomPoint(RegionFromId(45))), c_orderQueueAddToEnd);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoFE88AA1F_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(2))), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProwlerAi_Init () {
    gt_ProwlerAi = TriggerCreate("gt_ProwlerAi_Func");
    TriggerAddEventTimePeriodic(gt_ProwlerAi, 225.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AcidAi
//--------------------------------------------------------------------------------------------------
bool gt_AcidAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD4F3ABF4_g;
    int autoD4F3ABF4_u;
    unit autoD4F3ABF4_var;
    unitgroup auto5A74E39D_g;
    int auto5A74E39D_u;
    unit auto5A74E39D_var;
    unitgroup auto61A32F20_g;
    int auto61A32F20_u;
    unit auto61A32F20_var;
    unitgroup autoF05642DE_g;
    int autoF05642DE_u;
    unit autoF05642DE_var;
    unitgroup autoD12EED45_g;
    int autoD12EED45_u;
    unit autoD12EED45_var;
    unitgroup auto12BEBFEF_g;
    int auto12BEBFEF_u;
    unit auto12BEBFEF_var;
    unitgroup autoF704F8FF_g;
    int autoF704F8FF_u;
    unit autoF704F8FF_var;
    unitgroup autoA51AED10_g;
    int autoA51AED10_u;
    unit autoA51AED10_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD4F3ABF4_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoD4F3ABF4_u = UnitGroupCount(autoD4F3ABF4_g, c_unitCountAll);
    for (;; autoD4F3ABF4_u -= 1) {
        autoD4F3ABF4_var = UnitGroupUnitFromEnd(autoD4F3ABF4_g, autoD4F3ABF4_u);
        if (autoD4F3ABF4_var == null) { break; }
        UnitIssueOrder(autoD4F3ABF4_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoD4F3ABF4_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    auto5A74E39D_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto5A74E39D_u = UnitGroupCount(auto5A74E39D_g, c_unitCountAll);
    for (;; auto5A74E39D_u -= 1) {
        auto5A74E39D_var = UnitGroupUnitFromEnd(auto5A74E39D_g, auto5A74E39D_u);
        if (auto5A74E39D_var == null) { break; }
        UnitIssueOrder(auto5A74E39D_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto5A74E39D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    auto61A32F20_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto61A32F20_u = UnitGroupCount(auto61A32F20_g, c_unitCountAll);
    for (;; auto61A32F20_u -= 1) {
        auto61A32F20_var = UnitGroupUnitFromEnd(auto61A32F20_g, auto61A32F20_u);
        if (auto61A32F20_var == null) { break; }
        UnitIssueOrder(auto61A32F20_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto61A32F20_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    autoF05642DE_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoF05642DE_u = UnitGroupCount(autoF05642DE_g, c_unitCountAll);
    for (;; autoF05642DE_u -= 1) {
        autoF05642DE_var = UnitGroupUnitFromEnd(autoF05642DE_g, autoF05642DE_u);
        if (autoF05642DE_var == null) { break; }
        UnitIssueOrder(autoF05642DE_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoF05642DE_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    Wait(25.0, c_timeGame);
    autoD12EED45_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoD12EED45_u = UnitGroupCount(autoD12EED45_g, c_unitCountAll);
    for (;; autoD12EED45_u -= 1) {
        autoD12EED45_var = UnitGroupUnitFromEnd(autoD12EED45_g, autoD12EED45_u);
        if (autoD12EED45_var == null) { break; }
        UnitIssueOrder(autoD12EED45_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoD12EED45_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    auto12BEBFEF_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto12BEBFEF_u = UnitGroupCount(auto12BEBFEF_g, c_unitCountAll);
    for (;; auto12BEBFEF_u -= 1) {
        auto12BEBFEF_var = UnitGroupUnitFromEnd(auto12BEBFEF_g, auto12BEBFEF_u);
        if (auto12BEBFEF_var == null) { break; }
        UnitIssueOrder(auto12BEBFEF_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto12BEBFEF_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    autoF704F8FF_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoF704F8FF_u = UnitGroupCount(autoF704F8FF_g, c_unitCountAll);
    for (;; autoF704F8FF_u -= 1) {
        autoF704F8FF_var = UnitGroupUnitFromEnd(autoF704F8FF_g, autoF704F8FF_u);
        if (autoF704F8FF_var == null) { break; }
        UnitIssueOrder(autoF704F8FF_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoF704F8FF_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    autoA51AED10_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoA51AED10_u = UnitGroupCount(autoA51AED10_g, c_unitCountAll);
    for (;; autoA51AED10_u -= 1) {
        autoA51AED10_var = UnitGroupUnitFromEnd(autoA51AED10_g, autoA51AED10_u);
        if (autoA51AED10_var == null) { break; }
        UnitIssueOrder(autoA51AED10_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoA51AED10_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcidAi_Init () {
    gt_AcidAi = TriggerCreate("gt_AcidAi_Func");
    TriggerAddEventTimePeriodic(gt_AcidAi, 215.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AcidAi 2
//--------------------------------------------------------------------------------------------------
bool gt_AcidAi2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA3B2CF1F_g;
    int autoA3B2CF1F_u;
    unit autoA3B2CF1F_var;
    unitgroup auto01634BB2_g;
    int auto01634BB2_u;
    unit auto01634BB2_var;
    unitgroup autoA7AB3F70_g;
    int autoA7AB3F70_u;
    unit autoA7AB3F70_var;
    unitgroup autoCB340F87_g;
    int autoCB340F87_u;
    unit autoCB340F87_var;
    unitgroup auto8EE205DE_g;
    int auto8EE205DE_u;
    unit auto8EE205DE_var;
    unitgroup auto232D6409_g;
    int auto232D6409_u;
    unit auto232D6409_var;
    unitgroup auto79D64CE3_g;
    int auto79D64CE3_u;
    unit auto79D64CE3_var;
    unitgroup auto601EAE14_g;
    int auto601EAE14_u;
    unit auto601EAE14_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA3B2CF1F_g = UnitGroup("Exterminator", 5, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoA3B2CF1F_u = UnitGroupCount(autoA3B2CF1F_g, c_unitCountAll);
    for (;; autoA3B2CF1F_u -= 1) {
        autoA3B2CF1F_var = UnitGroupUnitFromEnd(autoA3B2CF1F_g, autoA3B2CF1F_u);
        if (autoA3B2CF1F_var == null) { break; }
        UnitIssueOrder(autoA3B2CF1F_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoA3B2CF1F_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    auto01634BB2_g = UnitGroup("Exterminator", 5, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto01634BB2_u = UnitGroupCount(auto01634BB2_g, c_unitCountAll);
    for (;; auto01634BB2_u -= 1) {
        auto01634BB2_var = UnitGroupUnitFromEnd(auto01634BB2_g, auto01634BB2_u);
        if (auto01634BB2_var == null) { break; }
        UnitIssueOrder(auto01634BB2_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto01634BB2_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    autoA7AB3F70_g = UnitGroup("Exterminator", 5, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoA7AB3F70_u = UnitGroupCount(autoA7AB3F70_g, c_unitCountAll);
    for (;; autoA7AB3F70_u -= 1) {
        autoA7AB3F70_var = UnitGroupUnitFromEnd(autoA7AB3F70_g, autoA7AB3F70_u);
        if (autoA7AB3F70_var == null) { break; }
        UnitIssueOrder(autoA7AB3F70_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoA7AB3F70_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    autoCB340F87_g = UnitGroup("Exterminator", 5, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoCB340F87_u = UnitGroupCount(autoCB340F87_g, c_unitCountAll);
    for (;; autoCB340F87_u -= 1) {
        autoCB340F87_var = UnitGroupUnitFromEnd(autoCB340F87_g, autoCB340F87_u);
        if (autoCB340F87_var == null) { break; }
        UnitIssueOrder(autoCB340F87_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(autoCB340F87_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    Wait(25.0, c_timeGame);
    auto8EE205DE_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto8EE205DE_u = UnitGroupCount(auto8EE205DE_g, c_unitCountAll);
    for (;; auto8EE205DE_u -= 1) {
        auto8EE205DE_var = UnitGroupUnitFromEnd(auto8EE205DE_g, auto8EE205DE_u);
        if (auto8EE205DE_var == null) { break; }
        UnitIssueOrder(auto8EE205DE_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto8EE205DE_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    auto232D6409_g = UnitGroup("Exterminator", 5, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto232D6409_u = UnitGroupCount(auto232D6409_g, c_unitCountAll);
    for (;; auto232D6409_u -= 1) {
        auto232D6409_var = UnitGroupUnitFromEnd(auto232D6409_g, auto232D6409_u);
        if (auto232D6409_var == null) { break; }
        UnitIssueOrder(auto232D6409_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupRandomUnit(UnitGroup(null, 1, RegionFromId(28), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 4), c_unitCountAlive)), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto232D6409_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    auto79D64CE3_g = UnitGroup("Exterminator", 5, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto79D64CE3_u = UnitGroupCount(auto79D64CE3_g, c_unitCountAll);
    for (;; auto79D64CE3_u -= 1) {
        auto79D64CE3_var = UnitGroupUnitFromEnd(auto79D64CE3_g, auto79D64CE3_u);
        if (auto79D64CE3_var == null) { break; }
        UnitIssueOrder(auto79D64CE3_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto79D64CE3_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    auto601EAE14_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto601EAE14_u = UnitGroupCount(auto601EAE14_g, c_unitCountAll);
    for (;; auto601EAE14_u -= 1) {
        auto601EAE14_var = UnitGroupUnitFromEnd(auto601EAE14_g, auto601EAE14_u);
        if (auto601EAE14_var == null) { break; }
        UnitIssueOrder(auto601EAE14_var, OrderTargetingUnit(AbilityCommand("IncendiaryInfusion", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(346881148))), c_orderQueueReplace);
        Wait(25.0, c_timeGame);
        UnitIssueOrder(auto601EAE14_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcidAi2_Init () {
    gt_AcidAi2 = TriggerCreate("gt_AcidAi2_Func");
    TriggerAddEventTimePeriodic(gt_AcidAi2, 186.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xaylid Ai
//--------------------------------------------------------------------------------------------------
bool gt_XaylidAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(869395160)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    cai_waves_run(5, PlayerGroupSingle(1));
    PlayerSetDifficulty(5, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XaylidAi_Init () {
    gt_XaylidAi = TriggerCreate("gt_XaylidAi_Func");
    TriggerAddEventTimeElapsed(gt_XaylidAi, 205.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CassyAi
//--------------------------------------------------------------------------------------------------
bool gt_CassyAi_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Casnolisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.3, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ExplosiveGlob", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CassyAi_Init () {
    gt_CassyAi = TriggerCreate("gt_CassyAi_Func");
    TriggerAddEventUnitAttacked(gt_CassyAi, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bullies
//--------------------------------------------------------------------------------------------------
bool gt_Bullies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeGame);
    AIToggleBulliesInRegion(4, RegionFromId(4), true);
    AIToggleBulliesInRegion(5, RegionFromId(2), true);
    AIToggleBulliesInRegion(2, RegionFromId(3), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bullies_Init () {
    gt_Bullies = TriggerCreate("gt_Bullies_Func");
    TriggerAddEventTimeElapsed(gt_Bullies, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xaylid Loses base
//--------------------------------------------------------------------------------------------------
bool gt_XaylidLosesbase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4D9AD0D6_g;
    int auto4D9AD0D6_u;
    unit auto4D9AD0D6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4D9AD0D6_g = UnitGroup("Kraken", c_playerAny, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 6);
    auto4D9AD0D6_u = UnitGroupCount(auto4D9AD0D6_g, c_unitCountAll);
    for (;; auto4D9AD0D6_u -= 1) {
        auto4D9AD0D6_var = UnitGroupUnitFromEnd(auto4D9AD0D6_g, auto4D9AD0D6_u);
        if (auto4D9AD0D6_var == null) { break; }
        UnitKill(auto4D9AD0D6_var);
    }
    AIToggleBulliesInRegion(5, RegionFromId(2), false);
    cai_waves_stop("aiF4750E9A");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/269266DD"));
    SoundPlayForPlayer(SoundLink("DefilerMP_Pissed", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    Wait(300.0, c_timeGame);
    AIToggleBulliesInRegion(5, RegionFromId(2), false);
    TriggerEnable(gt_KrakenAi, false);
    TriggerEnable(gt_KrakenAi2, false);
    TriggerEnable(gt_AcidAi, false);
    TriggerEnable(gt_XaylidAi, false);
    TriggerEnable(gt_XaylidLosesbase, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XaylidLosesbase_Init () {
    gt_XaylidLosesbase = TriggerCreate("gt_XaylidLosesbase_Func");
    TriggerAddEventUnitDied(gt_XaylidLosesbase, UnitRefFromUnit(UnitFromId(869395160)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrion Loses BOTH Things
//--------------------------------------------------------------------------------------------------
bool gt_KerrionLosesBOTHThings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD45264F3_g;
    int autoD45264F3_u;
    unit autoD45264F3_var;

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(2046507236)) == false) && (UnitIsAlive(UnitFromId(913236621)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD45264F3_g = UnitGroup("Paragon", c_playerAny, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 6);
    autoD45264F3_u = UnitGroupCount(autoD45264F3_g, c_unitCountAll);
    for (;; autoD45264F3_u -= 1) {
        autoD45264F3_var = UnitGroupUnitFromEnd(autoD45264F3_g, autoD45264F3_u);
        if (autoD45264F3_var == null) { break; }
        UnitKill(autoD45264F3_var);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(2, RegionFromId(3), false);
    cai_waves_stop("ai04DE6177");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/60606BDC"));
    Wait(15.0, c_timeGame);
    Wait(300.0, c_timeGame);
    TriggerEnable(gt_CasterAi, false);
    TriggerEnable(gt_FuseAi, false);
    TriggerEnable(gt_SupportAi, false);
    TriggerEnable(gt_FuseAiTimer, false);
    TriggerEnable(gt_SupportTimer, false);
    TriggerEnable(gt_AntiAirAi, false);
    TriggerEnable(gt_AntiAirAi2, false);
    TriggerEnable(gt_AntiAirAiTimer, false);
    TriggerEnable(gt_AntiAirAiTimer2, false);
    AIToggleBulliesInRegion(2, RegionFromId(3), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerrionLosesBOTHThings_Init () {
    gt_KerrionLosesBOTHThings = TriggerCreate("gt_KerrionLosesBOTHThings_Func");
    TriggerAddEventUnitDied(gt_KerrionLosesBOTHThings, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugees Lose their base
//--------------------------------------------------------------------------------------------------
bool gt_RefugeesLosetheirbase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto87ABAFFE_g;
    int auto87ABAFFE_u;
    unit auto87ABAFFE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto87ABAFFE_g = UnitGroup("Battlecruiser", c_playerAny, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 6);
    auto87ABAFFE_u = UnitGroupCount(auto87ABAFFE_g, c_unitCountAll);
    for (;; auto87ABAFFE_u -= 1) {
        auto87ABAFFE_var = UnitGroupUnitFromEnd(auto87ABAFFE_g, auto87ABAFFE_u);
        if (auto87ABAFFE_var == null) { break; }
        UnitKill(auto87ABAFFE_var);
    }
    AIToggleBulliesInRegion(4, RegionFromId(4), false);
    SoundPlayForPlayer(SoundLink("Explosion_TrainEngineExplode", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    cai_waves_stop("ai9F1008BF");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6697EE9E"));
    Wait(300.0, c_timeGame);
    AIToggleBulliesInRegion(4, RegionFromId(4), false);
    AIToggleBulliesInRegion(2, RegionFromId(22), true);
    TriggerEnable(gt_RefugeeAi, false);
    TriggerEnable(gt_BlindAi, false);
    TriggerEnable(gt_AipullsunitsTerran, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeesLosetheirbase_Init () {
    gt_RefugeesLosetheirbase = TriggerCreate("gt_RefugeesLosetheirbase_Func");
    TriggerAddEventUnitDied(gt_RefugeesLosetheirbase, UnitRefFromUnit(UnitFromId(1536016950)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ai pulls units Terran
//--------------------------------------------------------------------------------------------------
bool gt_AipullsunitsTerran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.3, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(594695219), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/E561210E"), StringExternal("Param/Value/88F8EF8F"), 4.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    UnitGroupIssueOrder(UnitGroup(null, 4, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("pMission_Aiur04_Hybrid02_147", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.2, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AipullsunitsTerran_Init () {
    gt_AipullsunitsTerran = TriggerCreate("gt_AipullsunitsTerran_Func");
    TriggerAddEventUnitRegion(gt_AipullsunitsTerran, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ai pulls units Xaylid
//--------------------------------------------------------------------------------------------------
bool gt_AipullsunitsXaylid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3177646A_g;
    int auto3177646A_u;
    unit auto3177646A_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.3, c_timeGame);
    auto3177646A_g = UnitGroup("Exterminator", 5, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 5);
    auto3177646A_u = UnitGroupCount(auto3177646A_g, c_unitCountAll);
    for (;; auto3177646A_u -= 1) {
        auto3177646A_var = UnitGroupUnitFromEnd(auto3177646A_g, auto3177646A_u);
        if (auto3177646A_var == null) { break; }
        UnitIssueOrder(auto3177646A_var, OrderTargetingUnit(AbilityCommand("attack", 0), EventUnit()), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        UnitIssueOrder(auto3177646A_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(346881148)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AipullsunitsXaylid_Init () {
    gt_AipullsunitsXaylid = TriggerCreate("gt_AipullsunitsXaylid_Func");
    TriggerAddEventUnitRegion(gt_AipullsunitsXaylid, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TerranMaximum
//--------------------------------------------------------------------------------------------------
bool gt_TerranMaximum_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(2046507236)) == false) && (UnitIsAlive(UnitFromId(913236621)) == false) && (UnitIsAlive(UnitFromId(869395160)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_XaylidMax, false);
    TriggerEnable(gt_KerrionMax, false);
    TriggerEnable(gt_TerranMaximum, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9420B5AB"));
    cai_waves_stop("ai9F1008BF");
    cai_start("ai707E21AF", 4);
    cai_waves_run(4, PlayerGroupSingle(1));
    libNtve_gf_SetUpgradeLevelForPlayer(3, "VanadiumPlating", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "UltraCapacitors", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "OrbitalStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "CellularReactors", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerranMaximum_Init () {
    gt_TerranMaximum = TriggerCreate("gt_TerranMaximum_Func");
    TriggerAddEventUnitDied(gt_TerranMaximum, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XaylidMax
//--------------------------------------------------------------------------------------------------
bool gt_XaylidMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(2046507236)) == false) && (UnitIsAlive(UnitFromId(913236621)) == false) && (UnitIsAlive(UnitFromId(1536016950)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_XaylidMax, false);
    TriggerEnable(gt_KerrionMax, false);
    TriggerEnable(gt_TerranMaximum, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C10B8E65"));
    cai_waves_stop("aiF4750E9A");
    cai_start("ai551D9BF9", 5);
    cai_waves_run(5, PlayerGroupSingle(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XaylidMax_Init () {
    gt_XaylidMax = TriggerCreate("gt_XaylidMax_Func");
    TriggerAddEventUnitDied(gt_XaylidMax, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KerrionMax
//--------------------------------------------------------------------------------------------------
bool gt_KerrionMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(UnitFromId(869395160)) == false) && (UnitIsAlive(UnitFromId(1536016950)) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_XaylidMax, false);
    TriggerEnable(gt_KerrionMax, false);
    TriggerEnable(gt_TerranMaximum, false);
    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/389477FD"));
    cai_waves_stop("ai04DE6177");
    cai_start("aiFE5B5D47", 2);
    cai_waves_run(2, PlayerGroupSingle(1));
    libNtve_gf_SetUpgradeLevelForPlayer(2, "RegenerativeBioSteel", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KerrionMax_Init () {
    gt_KerrionMax = TriggerCreate("gt_KerrionMax_Func");
    TriggerAddEventUnitDied(gt_KerrionMax, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talking 2
//--------------------------------------------------------------------------------------------------
bool gt_Talking2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1687560670), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Attack AngryEyes", null, StringExternal("Param/Value/D35D7CD5"), StringExternal("Param/Value/65BBD034"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    SoundPlayForPlayer(SoundLink("SMX3_Cutscene_MP02_005_DefendersMarine_006", 0), c_maxPlayers, PlayerGroupAll(), 800.0, 0.0);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talking2_Init () {
    gt_Talking2 = TriggerCreate("gt_Talking2_Func");
    TriggerAddEventUnitDied(gt_Talking2, UnitRefFromUnit(UnitFromId(913236621)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talking 3
//--------------------------------------------------------------------------------------------------
bool gt_Talking3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Music_Stinger_Discovery03", 0), c_maxPlayers, PlayerGroupAll(), 800.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1972139101), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/7CC60C00"), StringExternal("Param/Value/1CCA79E3"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talking3_Init () {
    gt_Talking3 = TriggerCreate("gt_Talking3_Func");
    TriggerAddEventUnitRegion(gt_Talking3, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talking 4
//--------------------------------------------------------------------------------------------------
bool gt_Talking4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("Music_Stinger_Discovery03", 0), c_maxPlayers, PlayerGroupAll(), 800.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(762199218), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/8174D2A4"), StringExternal("Param/Value/CD1EFD24"), 5.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talking4_Init () {
    gt_Talking4 = TriggerCreate("gt_Talking4_Func");
    TriggerAddEventUnitRegion(gt_Talking4, null, RegionFromId(48), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Civillians_Init();
    gt_ohno_Init();
    gt_SpitfireandBugfix_Init();
    gt_Start_Init();
    gt_GameStarts_Init();
    gt_KillUnusedstuf_Init();
    gt_GameStarts2_Init();
    gt_Upgrades_Init();
    gt_Win_Init();
    gt_Lose_Init();
    gt_Objective_Init();
    gt_MONEY2_Init();
    gt_MONEY_Init();
    gt_MONEY3_Init();
    gt_Debug_Init();
    gt_Debug2_Init();
    gt_Debug3_Init();
    gt_OpeningCinamaticdontchange_Init();
    gt_OpeningCinamaticdontchange3_Init();
    gt_OpeningCinamaticdontchange2_Init();
    gt_Lore_Init();
    gt_NightMareDifficulty_Init();
    gt_MedicPicker_Init();
    gt_RefugeeAi_Init();
    gt_MinerAi_Init();
    gt_Skin_Init();
    gt_BlindAi_Init();
    gt_SneakAttackEnds_Init();
    gt_Timer_Init();
    gt_Nighttime_Init();
    gt_Nighttime2_Init();
    gt_Sunrisetimer_Init();
    gt_KMoney_Init();
    gt_KerionAi_Init();
    gt_DisableBullies_Init();
    gt_GyreEnergy_Init();
    gt_FuseAi_Init();
    gt_CasterAi_Init();
    gt_FuseAiTimer_Init();
    gt_BallofDeathAi_Init();
    gt_DashAi_Init();
    gt_MeridanStormAi_Init();
    gt_AntiAirAi_Init();
    gt_AntiAirAiTimer_Init();
    gt_Discord_Init();
    gt_GyreDiscord_Init();
    gt_HybridAi_Init();
    gt_HybridAi2_Init();
    gt_HybridAi3_Init();
    gt_HybridAi4_Init();
    gt_HybridAi6_Init();
    gt_BURN_Init();
    gt_BURN2_Init();
    gt_HybridAi5_Init();
    gt_AttackWithRandomUnits_Init();
    gt_UEDXT_Init();
    gt_UEDXK_Init();
    gt_UEDKT_Init();
    gt_UEDKT2_Init();
    gt_UEDAttackPaths_Init();
    gt_StrikeDies_Init();
    gt_StrikeDies2_Init();
    gt_StrikeDies3_Init();
    gt_ShredderAi_Init();
    gt_PoliticalAi_Init();
    gt_PoliticalAi2_Init();
    gt_SupportAi_Init();
    gt_SupportTimer_Init();
    gt_AntiAirAi2_Init();
    gt_AntiAirAiTimer2_Init();
    gt_HealAi_Init();
    gt_HealAi2_Init();
    gt_QueenAi_Init();
    gt_QueenAi2_Init();
    gt_KrakenAi_Init();
    gt_KrakenAi2_Init();
    gt_KrakenAi3_Init();
    gt_ProwlerAi_Init();
    gt_AcidAi_Init();
    gt_AcidAi2_Init();
    gt_XaylidAi_Init();
    gt_CassyAi_Init();
    gt_Bullies_Init();
    gt_XaylidLosesbase_Init();
    gt_KerrionLosesBOTHThings_Init();
    gt_RefugeesLosetheirbase_Init();
    gt_AipullsunitsTerran_Init();
    gt_AipullsunitsXaylid_Init();
    gt_TerranMaximum_Init();
    gt_XaylidMax_Init();
    gt_KerrionMax_Init();
    gt_Talking2_Init();
    gt_Talking3_Init();
    gt_Talking4_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
