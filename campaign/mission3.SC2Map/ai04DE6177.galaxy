//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Kerion
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] ai04DE6177_defGather;
string[17] ai04DE6177_customData;
wave[17] ai04DE6177_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave1_enabled;
wave[17] ai04DE6177_wave1_lastWave;
trigger ai04DE6177_wave1_trigger = null;
int ai04DE6177_wave1_runPlayer;
playergroup ai04DE6177_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave1_enabled[init_i] = true;
        ai04DE6177_wave1_lastWave[init_i] = null;
    }

    ai04DE6177_wave1_trigger = TriggerCreate("ai04DE6177_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave1_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave1_runPlayer;
    playergroup target = ai04DE6177_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 400; }
    if (d == 2) { ta = 400; }
    if (d == 3) { ta = 400; }
    if (d == 4) { ta = 400; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 14, "Volt");
    AIAttackWaveAddUnits(3, 14, "Volt");
    AIAttackWaveAddUnits(4, 14, "Volt");
    AIAttackWaveAddUnits(5, 14, "Volt");

    AIAttackWaveAddUnits(2, 15, "Pariah");
    AIAttackWaveAddUnits(3, 15, "Pariah");
    AIAttackWaveAddUnits(4, 15, "Pariah");
    AIAttackWaveAddUnits(5, 15, "Pariah");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave1_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave1_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave1_runPlayer = p;
    ai04DE6177_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave2_enabled;
bool[17] ai04DE6177_wave2_hasRun;
wave[17] ai04DE6177_wave2_lastWave;
trigger ai04DE6177_wave2_trigger = null;
int ai04DE6177_wave2_runPlayer;
playergroup ai04DE6177_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave2_enabled[init_i] = true;
        ai04DE6177_wave2_hasRun[init_i] = false;
        ai04DE6177_wave2_lastWave[init_i] = null;
    }

    ai04DE6177_wave2_trigger = TriggerCreate("ai04DE6177_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave2_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave2_runPlayer;
    playergroup target = ai04DE6177_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    if (ai04DE6177_wave2_hasRun[p]) {
        Wait(0, c_timeAI);
        return true;
    }
    ai04DE6177_wave2_hasRun[p] = true;

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 400; }
    if (d == 2) { ta = 400; }
    if (d == 3) { ta = 400; }
    if (d == 4) { ta = 400; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 18, "Volt");
    AIAttackWaveAddUnits(3, 18, "Volt");
    AIAttackWaveAddUnits(4, 18, "Volt");
    AIAttackWaveAddUnits(5, 18, "Volt");

    AIAttackWaveAddUnits(2, 17, "Pariah");
    AIAttackWaveAddUnits(3, 17, "Pariah");
    AIAttackWaveAddUnits(4, 17, "Pariah");
    AIAttackWaveAddUnits(5, 17, "Pariah");

    AIAttackWaveAddUnits(2, 4, "Crux");
    AIAttackWaveAddUnits(3, 4, "Crux");
    AIAttackWaveAddUnits(4, 4, "Crux");
    AIAttackWaveAddUnits(5, 4, "Crux");

    AIAttackWaveAddUnits(2, 6, "Umbra");
    AIAttackWaveAddUnits(3, 6, "Umbra");
    AIAttackWaveAddUnits(4, 6, "Umbra");
    AIAttackWaveAddUnits(5, 6, "Umbra");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave2_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave2_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave2_runPlayer = p;
    ai04DE6177_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave3_enabled;
wave[17] ai04DE6177_wave3_lastWave;
trigger ai04DE6177_wave3_trigger = null;
int ai04DE6177_wave3_runPlayer;
playergroup ai04DE6177_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave3_enabled[init_i] = true;
        ai04DE6177_wave3_lastWave[init_i] = null;
    }

    ai04DE6177_wave3_trigger = TriggerCreate("ai04DE6177_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave3_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave3_runPlayer;
    playergroup target = ai04DE6177_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 500; }
    if (d == 2) { ta = 500; }
    if (d == 3) { ta = 500; }
    if (d == 4) { ta = 500; }
    tg = 0;
    if (d == 1) { tg = 350; }
    if (d == 2) { tg = 350; }
    if (d == 3) { tg = 350; }
    if (d == 4) { tg = 350; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 20, "Volt");
    AIAttackWaveAddUnits(3, 20, "Volt");
    AIAttackWaveAddUnits(4, 20, "Volt");
    AIAttackWaveAddUnits(5, 20, "Volt");

    AIAttackWaveAddUnits(2, 19, "Pariah");
    AIAttackWaveAddUnits(3, 19, "Pariah");
    AIAttackWaveAddUnits(4, 19, "Pariah");
    AIAttackWaveAddUnits(5, 19, "Pariah");

    AIAttackWaveAddUnits(2, 2, "Crux");
    AIAttackWaveAddUnits(3, 2, "Crux");
    AIAttackWaveAddUnits(4, 2, "Crux");
    AIAttackWaveAddUnits(5, 2, "Crux");

    AIAttackWaveAddUnits(2, 7, "Inducer");
    AIAttackWaveAddUnits(3, 7, "Inducer");
    AIAttackWaveAddUnits(4, 7, "Inducer");
    AIAttackWaveAddUnits(5, 7, "Inducer");

    AIAttackWaveAddUnits(2, 3, "Fuse");
    AIAttackWaveAddUnits(3, 3, "Fuse");
    AIAttackWaveAddUnits(4, 3, "Fuse");
    AIAttackWaveAddUnits(5, 3, "Fuse");

    AIAttackWaveAddUnits(2, 3, "Pulsar");
    AIAttackWaveAddUnits(3, 3, "Pulsar");
    AIAttackWaveAddUnits(4, 3, "Pulsar");
    AIAttackWaveAddUnits(5, 3, "Pulsar");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave3_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave3_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave3_runPlayer = p;
    ai04DE6177_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave4_enabled;
wave[17] ai04DE6177_wave4_lastWave;
trigger ai04DE6177_wave4_trigger = null;
int ai04DE6177_wave4_runPlayer;
playergroup ai04DE6177_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave4_enabled[init_i] = true;
        ai04DE6177_wave4_lastWave[init_i] = null;
    }

    ai04DE6177_wave4_trigger = TriggerCreate("ai04DE6177_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave4_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave4_runPlayer;
    playergroup target = ai04DE6177_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 450; }
    if (d == 2) { ta = 450; }
    if (d == 3) { ta = 450; }
    if (d == 4) { ta = 450; }
    tg = 0;
    if (d == 1) { tg = 350; }
    if (d == 2) { tg = 350; }
    if (d == 3) { tg = 350; }
    if (d == 4) { tg = 350; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 10, "Pariah");
    AIAttackWaveAddUnits(3, 10, "Pariah");
    AIAttackWaveAddUnits(4, 10, "Pariah");
    AIAttackWaveAddUnits(5, 10, "Pariah");

    AIAttackWaveAddUnits(2, 10, "Umbra");
    AIAttackWaveAddUnits(3, 10, "Umbra");
    AIAttackWaveAddUnits(4, 10, "Umbra");
    AIAttackWaveAddUnits(5, 10, "Umbra");

    AIAttackWaveAddUnits(2, 4, "Myriad");
    AIAttackWaveAddUnits(3, 4, "Myriad");
    AIAttackWaveAddUnits(4, 4, "Myriad");
    AIAttackWaveAddUnits(5, 4, "Myriad");

    AIAttackWaveAddUnits(2, 12, "Volt");
    AIAttackWaveAddUnits(3, 12, "Volt");
    AIAttackWaveAddUnits(4, 12, "Volt");
    AIAttackWaveAddUnits(5, 12, "Volt");

    AIAttackWaveAddUnits(2, 1, "Paragon");
    AIAttackWaveAddUnits(3, 1, "Paragon");
    AIAttackWaveAddUnits(4, 1, "Paragon");
    AIAttackWaveAddUnits(5, 1, "Paragon");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave4_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave4_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave4_runPlayer = p;
    ai04DE6177_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave5_enabled;
wave[17] ai04DE6177_wave5_lastWave;
trigger ai04DE6177_wave5_trigger = null;
int ai04DE6177_wave5_runPlayer;
playergroup ai04DE6177_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave5_enabled[init_i] = true;
        ai04DE6177_wave5_lastWave[init_i] = null;
    }

    ai04DE6177_wave5_trigger = TriggerCreate("ai04DE6177_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave5_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave5_runPlayer;
    playergroup target = ai04DE6177_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 450; }
    if (d == 2) { ta = 450; }
    if (d == 3) { ta = 450; }
    if (d == 4) { ta = 450; }
    tg = 0;
    if (d == 1) { tg = 355; }
    if (d == 2) { tg = 355; }
    if (d == 3) { tg = 355; }
    if (d == 4) { tg = 355; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 6, "Myriad");
    AIAttackWaveAddUnits(3, 6, "Myriad");
    AIAttackWaveAddUnits(4, 6, "Myriad");
    AIAttackWaveAddUnits(5, 6, "Myriad");

    AIAttackWaveAddUnits(2, 10, "Umbra");
    AIAttackWaveAddUnits(3, 10, "Umbra");
    AIAttackWaveAddUnits(4, 10, "Umbra");
    AIAttackWaveAddUnits(5, 10, "Umbra");

    AIAttackWaveAddUnits(2, 6, "Inducer");
    AIAttackWaveAddUnits(3, 6, "Inducer");
    AIAttackWaveAddUnits(4, 6, "Inducer");
    AIAttackWaveAddUnits(5, 6, "Inducer");

    AIAttackWaveAddUnits(2, 4, "Fuse");
    AIAttackWaveAddUnits(3, 4, "Fuse");
    AIAttackWaveAddUnits(4, 4, "Fuse");
    AIAttackWaveAddUnits(5, 4, "Fuse");

    AIAttackWaveAddUnits(2, 5, "Pariah");
    AIAttackWaveAddUnits(3, 5, "Pariah");
    AIAttackWaveAddUnits(4, 5, "Pariah");
    AIAttackWaveAddUnits(5, 5, "Pariah");

    AIAttackWaveAddUnits(2, 2, "Paragon");
    AIAttackWaveAddUnits(3, 2, "Paragon");
    AIAttackWaveAddUnits(4, 2, "Paragon");
    AIAttackWaveAddUnits(5, 2, "Paragon");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave5_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave5_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave5_runPlayer = p;
    ai04DE6177_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave6_enabled;
wave[17] ai04DE6177_wave6_lastWave;
trigger ai04DE6177_wave6_trigger = null;
int ai04DE6177_wave6_runPlayer;
playergroup ai04DE6177_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave6_enabled[init_i] = true;
        ai04DE6177_wave6_lastWave[init_i] = null;
    }

    ai04DE6177_wave6_trigger = TriggerCreate("ai04DE6177_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave6_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave6_runPlayer;
    playergroup target = ai04DE6177_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 455; }
    if (d == 2) { ta = 455; }
    if (d == 3) { ta = 455; }
    if (d == 4) { ta = 455; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 9, "Inducer");
    AIAttackWaveAddUnits(3, 9, "Inducer");
    AIAttackWaveAddUnits(4, 9, "Inducer");
    AIAttackWaveAddUnits(5, 9, "Inducer");

    AIAttackWaveAddUnits(2, 11, "Umbra");
    AIAttackWaveAddUnits(3, 11, "Umbra");
    AIAttackWaveAddUnits(4, 11, "Umbra");
    AIAttackWaveAddUnits(5, 11, "Umbra");

    AIAttackWaveAddUnits(2, 6, "Myriad");
    AIAttackWaveAddUnits(3, 6, "Myriad");
    AIAttackWaveAddUnits(4, 6, "Myriad");
    AIAttackWaveAddUnits(5, 6, "Myriad");

    AIAttackWaveAddUnits(2, 5, "Paragon");
    AIAttackWaveAddUnits(3, 5, "Paragon");
    AIAttackWaveAddUnits(4, 5, "Paragon");
    AIAttackWaveAddUnits(5, 5, "Paragon");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave6_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave6_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave6_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave6_runPlayer = p;
    ai04DE6177_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave7_enabled;
wave[17] ai04DE6177_wave7_lastWave;
trigger ai04DE6177_wave7_trigger = null;
int ai04DE6177_wave7_runPlayer;
playergroup ai04DE6177_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave7_enabled[init_i] = true;
        ai04DE6177_wave7_lastWave[init_i] = null;
    }

    ai04DE6177_wave7_trigger = TriggerCreate("ai04DE6177_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave7_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave7_runPlayer;
    playergroup target = ai04DE6177_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 475; }
    if (d == 2) { ta = 475; }
    if (d == 3) { ta = 475; }
    if (d == 4) { ta = 475; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 8, "Inducer");
    AIAttackWaveAddUnits(3, 8, "Inducer");
    AIAttackWaveAddUnits(4, 8, "Inducer");
    AIAttackWaveAddUnits(5, 8, "Inducer");

    AIAttackWaveAddUnits(2, 8, "Myriad");
    AIAttackWaveAddUnits(3, 8, "Myriad");
    AIAttackWaveAddUnits(4, 8, "Myriad");
    AIAttackWaveAddUnits(5, 8, "Myriad");

    AIAttackWaveAddUnits(2, 5, "Paragon");
    AIAttackWaveAddUnits(3, 5, "Paragon");
    AIAttackWaveAddUnits(4, 5, "Paragon");
    AIAttackWaveAddUnits(5, 5, "Paragon");

    AIAttackWaveAddUnits(2, 4, "Gyre");
    AIAttackWaveAddUnits(3, 4, "Gyre");
    AIAttackWaveAddUnits(4, 4, "Gyre");
    AIAttackWaveAddUnits(5, 4, "Gyre");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave7_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave7_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave7_runPlayer = p;
    ai04DE6177_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] ai04DE6177_wave8_enabled;
wave[17] ai04DE6177_wave8_lastWave;
trigger ai04DE6177_wave8_trigger = null;
int ai04DE6177_wave8_runPlayer;
playergroup ai04DE6177_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        ai04DE6177_wave8_enabled[init_i] = true;
        ai04DE6177_wave8_lastWave[init_i] = null;
    }

    ai04DE6177_wave8_trigger = TriggerCreate("ai04DE6177_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return ai04DE6177_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave8_runFunc (bool c, bool a) {
    int p = ai04DE6177_wave8_runPlayer;
    playergroup target = ai04DE6177_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!ai04DE6177_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    ai04DE6177_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 400; }
    if (d == 2) { ta = 400; }
    if (d == 3) { ta = 400; }
    if (d == 4) { ta = 400; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = ai04DE6177_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(1951514048), false);
    AIAttackWaveAddWaypoint(p, PointFromId(588300327), false);

    AIAttackWaveAddUnits(2, 8, "Paragon");
    AIAttackWaveAddUnits(3, 8, "Paragon");
    AIAttackWaveAddUnits(4, 8, "Paragon");
    AIAttackWaveAddUnits(5, 8, "Paragon");

    AIAttackWaveAddUnits(2, 16, "Inducer");
    AIAttackWaveAddUnits(3, 16, "Inducer");
    AIAttackWaveAddUnits(4, 16, "Inducer");
    AIAttackWaveAddUnits(5, 16, "Inducer");

    AIAttackWaveAddUnits(2, 16, "Myriad");
    AIAttackWaveAddUnits(3, 16, "Myriad");
    AIAttackWaveAddUnits(4, 16, "Myriad");
    AIAttackWaveAddUnits(5, 16, "Myriad");

    AIAttackWaveAddUnits(2, 17, "Volt");
    AIAttackWaveAddUnits(3, 17, "Volt");
    AIAttackWaveAddUnits(4, 17, "Volt");
    AIAttackWaveAddUnits(5, 17, "Volt");

    AIAttackWaveSend(p, ts, false);
    ai04DE6177_wave8_lastWave[p] = WaveLastCreated();
    ai04DE6177_lastWave[p] = ai04DE6177_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave8_run (int p, playergroup target, bool wait) {
    ai04DE6177_wave8_runPlayer = p;
    ai04DE6177_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave_enable (int w, int p, bool val) {
    if (w == 1) { ai04DE6177_wave1_enable(p, val); }
    if (w == 2) { ai04DE6177_wave2_enable(p, val); }
    if (w == 3) { ai04DE6177_wave3_enable(p, val); }
    if (w == 4) { ai04DE6177_wave4_enable(p, val); }
    if (w == 5) { ai04DE6177_wave5_enable(p, val); }
    if (w == 6) { ai04DE6177_wave6_enable(p, val); }
    if (w == 7) { ai04DE6177_wave7_enable(p, val); }
    if (w == 8) { ai04DE6177_wave8_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_wave_isEnabled (int w, int p) {
    if (w == 1) { return ai04DE6177_wave1_isEnabled(p); }
    if (w == 2) { return ai04DE6177_wave2_isEnabled(p); }
    if (w == 3) { return ai04DE6177_wave3_isEnabled(p); }
    if (w == 4) { return ai04DE6177_wave4_isEnabled(p); }
    if (w == 5) { return ai04DE6177_wave5_isEnabled(p); }
    if (w == 6) { return ai04DE6177_wave6_isEnabled(p); }
    if (w == 7) { return ai04DE6177_wave7_isEnabled(p); }
    if (w == 8) { return ai04DE6177_wave8_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup ai04DE6177_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_wave_createdWave (int w, int p) {
    if (w == 1) { return ai04DE6177_wave1_createdWave(p); }
    if (w == 2) { return ai04DE6177_wave2_createdWave(p); }
    if (w == 3) { return ai04DE6177_wave3_createdWave(p); }
    if (w == 4) { return ai04DE6177_wave4_createdWave(p); }
    if (w == 5) { return ai04DE6177_wave5_createdWave(p); }
    if (w == 6) { return ai04DE6177_wave6_createdWave(p); }
    if (w == 7) { return ai04DE6177_wave7_createdWave(p); }
    if (w == 8) { return ai04DE6177_wave8_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { ai04DE6177_wave1_run(p, target, wait); }
    if (w == 2) { ai04DE6177_wave2_run(p, target, wait); }
    if (w == 3) { ai04DE6177_wave3_run(p, target, wait); }
    if (w == 4) { ai04DE6177_wave4_run(p, target, wait); }
    if (w == 5) { ai04DE6177_wave5_run(p, target, wait); }
    if (w == 6) { ai04DE6177_wave6_run(p, target, wait); }
    if (w == 7) { ai04DE6177_wave7_run(p, target, wait); }
    if (w == 8) { ai04DE6177_wave8_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger ai04DE6177_waves_trigger = null;
int ai04DE6177_waves_runPlayer;
playergroup ai04DE6177_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_waves_init () {
    ai04DE6177_waves_trigger = TriggerCreate("ai04DE6177_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool ai04DE6177_waves_runFunc (bool c, bool a) {
    int p = ai04DE6177_waves_runPlayer;
    playergroup target = ai04DE6177_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    ai04DE6177_wave1_run(p, target, true);
    ai04DE6177_wave2_run(p, target, true);
    ai04DE6177_wave3_run(p, target, true);
    ai04DE6177_wave4_run(p, target, true);
    ai04DE6177_wave5_run(p, target, true);
    ai04DE6177_wave6_run(p, target, true);
    ai04DE6177_wave7_run(p, target, true);
    ai04DE6177_wave8_run(p, target, true);

    while (true) {
        ai04DE6177_wave8_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_waves_run (int p, playergroup target) {
    ai04DE6177_waves_runPlayer = p;
    ai04DE6177_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(ai04DE6177_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    ai04DE6177_wave1_enable(p, val);
    ai04DE6177_wave2_enable(p, val);
    ai04DE6177_wave3_enable(p, val);
    ai04DE6177_wave4_enable(p, val);
    ai04DE6177_wave5_enable(p, val);
    ai04DE6177_wave6_enable(p, val);
    ai04DE6177_wave7_enable(p, val);
    ai04DE6177_wave8_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void ai04DE6177_waves_stop () {
    TriggerStop(ai04DE6177_waves_trigger);

    TriggerStop(ai04DE6177_wave1_trigger);
    TriggerStop(ai04DE6177_wave2_trigger);
    TriggerStop(ai04DE6177_wave3_trigger);
    TriggerStop(ai04DE6177_wave4_trigger);
    TriggerStop(ai04DE6177_wave5_trigger);
    TriggerStop(ai04DE6177_wave6_trigger);
    TriggerStop(ai04DE6177_wave7_trigger);
    TriggerStop(ai04DE6177_wave8_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void ai04DE6177_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    ai04DE6177_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string ai04DE6177_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave ai04DE6177_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return ai04DE6177_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool ai04DE6177_initialized = false;

//--------------------------------------------------------------------------------------------------
void ai04DE6177_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!ai04DE6177_initialized) {
        ai04DE6177_wave1_init();
        ai04DE6177_wave2_init();
        ai04DE6177_wave3_init();
        ai04DE6177_wave4_init();
        ai04DE6177_wave5_init();
        ai04DE6177_wave6_init();
        ai04DE6177_wave7_init();
        ai04DE6177_wave8_init();
        ai04DE6177_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            ai04DE6177_defGather[init_i] = PointFromId(863945520);
        }

        ai04DE6177_initialized = true;
    }

    AICampaignStart(p);
}
