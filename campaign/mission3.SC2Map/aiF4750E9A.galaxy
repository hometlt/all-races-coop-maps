//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Xaylid
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF4750E9A_defGather;
string[17] aiF4750E9A_customData;
wave[17] aiF4750E9A_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave1_enabled;
wave[17] aiF4750E9A_wave1_lastWave;
trigger aiF4750E9A_wave1_trigger = null;
int aiF4750E9A_wave1_runPlayer;
playergroup aiF4750E9A_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave1_enabled[init_i] = true;
        aiF4750E9A_wave1_lastWave[init_i] = null;
    }

    aiF4750E9A_wave1_trigger = TriggerCreate("aiF4750E9A_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave1_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave1_runPlayer;
    playergroup target = aiF4750E9A_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 415; }
    if (d == 2) { ta = 415; }
    if (d == 3) { ta = 415; }
    if (d == 4) { ta = 415; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 12, "Scorpalisk");
    AIAttackWaveAddUnits(3, 12, "Scorpalisk");
    AIAttackWaveAddUnits(4, 12, "Scorpalisk");
    AIAttackWaveAddUnits(5, 12, "Scorpalisk");

    AIAttackWaveAddUnits(2, 1, "Spitter");
    AIAttackWaveAddUnits(3, 1, "Spitter");
    AIAttackWaveAddUnits(4, 1, "Spitter");
    AIAttackWaveAddUnits(5, 1, "Spitter");

    AIAttackWaveAddUnits(2, 1, "Casnolisk");
    AIAttackWaveAddUnits(3, 1, "Casnolisk");
    AIAttackWaveAddUnits(4, 1, "Casnolisk");
    AIAttackWaveAddUnits(5, 1, "Casnolisk");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave1_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave1_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave1_runPlayer = p;
    aiF4750E9A_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave2_enabled;
wave[17] aiF4750E9A_wave2_lastWave;
trigger aiF4750E9A_wave2_trigger = null;
int aiF4750E9A_wave2_runPlayer;
playergroup aiF4750E9A_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave2_enabled[init_i] = true;
        aiF4750E9A_wave2_lastWave[init_i] = null;
    }

    aiF4750E9A_wave2_trigger = TriggerCreate("aiF4750E9A_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave2_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave2_runPlayer;
    playergroup target = aiF4750E9A_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 215; }
    if (d == 2) { ta = 215; }
    if (d == 3) { ta = 215; }
    if (d == 4) { ta = 215; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 12, "Scorpalisk");
    AIAttackWaveAddUnits(3, 12, "Scorpalisk");
    AIAttackWaveAddUnits(4, 12, "Scorpalisk");
    AIAttackWaveAddUnits(5, 12, "Scorpalisk");

    AIAttackWaveAddUnits(2, 5, "Mendling");
    AIAttackWaveAddUnits(3, 5, "Mendling");
    AIAttackWaveAddUnits(4, 5, "Mendling");
    AIAttackWaveAddUnits(5, 5, "Mendling");

    AIAttackWaveAddUnits(2, 6, "Casnolisk");
    AIAttackWaveAddUnits(3, 6, "Casnolisk");
    AIAttackWaveAddUnits(4, 6, "Casnolisk");
    AIAttackWaveAddUnits(5, 6, "Casnolisk");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave2_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave2_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave2_runPlayer = p;
    aiF4750E9A_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave3_enabled;
wave[17] aiF4750E9A_wave3_lastWave;
trigger aiF4750E9A_wave3_trigger = null;
int aiF4750E9A_wave3_runPlayer;
playergroup aiF4750E9A_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave3_enabled[init_i] = true;
        aiF4750E9A_wave3_lastWave[init_i] = null;
    }

    aiF4750E9A_wave3_trigger = TriggerCreate("aiF4750E9A_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave3_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave3_runPlayer;
    playergroup target = aiF4750E9A_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 415; }
    if (d == 2) { ta = 415; }
    if (d == 3) { ta = 415; }
    if (d == 4) { ta = 415; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 18, "Scorpalisk");
    AIAttackWaveAddUnits(3, 18, "Scorpalisk");
    AIAttackWaveAddUnits(4, 18, "Scorpalisk");
    AIAttackWaveAddUnits(5, 18, "Scorpalisk");

    AIAttackWaveAddUnits(2, 6, "Mendling");
    AIAttackWaveAddUnits(3, 6, "Mendling");
    AIAttackWaveAddUnits(4, 6, "Mendling");
    AIAttackWaveAddUnits(5, 6, "Mendling");

    AIAttackWaveAddUnits(2, 4, "Spitter");
    AIAttackWaveAddUnits(3, 4, "Spitter");
    AIAttackWaveAddUnits(4, 4, "Spitter");
    AIAttackWaveAddUnits(5, 4, "Spitter");

    AIAttackWaveAddUnits(2, 3, "Casnolisk");
    AIAttackWaveAddUnits(3, 3, "Casnolisk");
    AIAttackWaveAddUnits(4, 3, "Casnolisk");
    AIAttackWaveAddUnits(5, 3, "Casnolisk");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave3_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave3_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave3_runPlayer = p;
    aiF4750E9A_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave4_enabled;
wave[17] aiF4750E9A_wave4_lastWave;
trigger aiF4750E9A_wave4_trigger = null;
int aiF4750E9A_wave4_runPlayer;
playergroup aiF4750E9A_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave4_enabled[init_i] = true;
        aiF4750E9A_wave4_lastWave[init_i] = null;
    }

    aiF4750E9A_wave4_trigger = TriggerCreate("aiF4750E9A_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave4_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave4_runPlayer;
    playergroup target = aiF4750E9A_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 215; }
    if (d == 2) { ta = 215; }
    if (d == 3) { ta = 215; }
    if (d == 4) { ta = 215; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 22, "Scorpalisk");
    AIAttackWaveAddUnits(3, 22, "Scorpalisk");
    AIAttackWaveAddUnits(4, 22, "Scorpalisk");
    AIAttackWaveAddUnits(5, 22, "Scorpalisk");

    AIAttackWaveAddUnits(2, 7, "Mendling");
    AIAttackWaveAddUnits(3, 7, "Mendling");
    AIAttackWaveAddUnits(4, 7, "Mendling");
    AIAttackWaveAddUnits(5, 7, "Mendling");

    AIAttackWaveAddUnits(2, 4, "Spitter");
    AIAttackWaveAddUnits(3, 4, "Spitter");
    AIAttackWaveAddUnits(4, 4, "Spitter");
    AIAttackWaveAddUnits(5, 4, "Spitter");

    AIAttackWaveAddUnits(2, 2, "Casnolisk");
    AIAttackWaveAddUnits(3, 2, "Casnolisk");
    AIAttackWaveAddUnits(4, 2, "Casnolisk");
    AIAttackWaveAddUnits(5, 2, "Casnolisk");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave4_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave4_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave4_runPlayer = p;
    aiF4750E9A_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave5_enabled;
wave[17] aiF4750E9A_wave5_lastWave;
trigger aiF4750E9A_wave5_trigger = null;
int aiF4750E9A_wave5_runPlayer;
playergroup aiF4750E9A_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave5_enabled[init_i] = true;
        aiF4750E9A_wave5_lastWave[init_i] = null;
    }

    aiF4750E9A_wave5_trigger = TriggerCreate("aiF4750E9A_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave5_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave5_runPlayer;
    playergroup target = aiF4750E9A_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 385; }
    if (d == 2) { ta = 385; }
    if (d == 3) { ta = 385; }
    if (d == 4) { ta = 385; }
    tg = 0;
    if (d == 1) { tg = 300; }
    if (d == 2) { tg = 300; }
    if (d == 3) { tg = 300; }
    if (d == 4) { tg = 300; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 23, "Scorpalisk");
    AIAttackWaveAddUnits(3, 23, "Scorpalisk");
    AIAttackWaveAddUnits(4, 23, "Scorpalisk");
    AIAttackWaveAddUnits(5, 23, "Scorpalisk");

    AIAttackWaveAddUnits(2, 7, "Mendling");
    AIAttackWaveAddUnits(3, 7, "Mendling");
    AIAttackWaveAddUnits(4, 7, "Mendling");
    AIAttackWaveAddUnits(5, 7, "Mendling");

    AIAttackWaveAddUnits(2, 8, "Spitter");
    AIAttackWaveAddUnits(3, 8, "Spitter");
    AIAttackWaveAddUnits(4, 8, "Spitter");
    AIAttackWaveAddUnits(5, 8, "Spitter");

    AIAttackWaveAddUnits(2, 2, "Casnolisk");
    AIAttackWaveAddUnits(3, 2, "Casnolisk");
    AIAttackWaveAddUnits(4, 2, "Casnolisk");
    AIAttackWaveAddUnits(5, 2, "Casnolisk");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave5_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave5_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave5_runPlayer = p;
    aiF4750E9A_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave6_enabled;
wave[17] aiF4750E9A_wave6_lastWave;
trigger aiF4750E9A_wave6_trigger = null;
int aiF4750E9A_wave6_runPlayer;
playergroup aiF4750E9A_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave6_enabled[init_i] = true;
        aiF4750E9A_wave6_lastWave[init_i] = null;
    }

    aiF4750E9A_wave6_trigger = TriggerCreate("aiF4750E9A_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave6_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave6_runPlayer;
    playergroup target = aiF4750E9A_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 385; }
    if (d == 2) { ta = 385; }
    if (d == 3) { ta = 385; }
    if (d == 4) { ta = 385; }
    tg = 0;
    if (d == 1) { tg = 300; }
    if (d == 2) { tg = 300; }
    if (d == 3) { tg = 300; }
    if (d == 4) { tg = 300; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 21, "Scorpalisk");
    AIAttackWaveAddUnits(3, 21, "Scorpalisk");
    AIAttackWaveAddUnits(4, 21, "Scorpalisk");
    AIAttackWaveAddUnits(5, 21, "Scorpalisk");

    AIAttackWaveAddUnits(2, 10, "Mendling");
    AIAttackWaveAddUnits(3, 10, "Mendling");
    AIAttackWaveAddUnits(4, 10, "Mendling");
    AIAttackWaveAddUnits(5, 10, "Mendling");

    AIAttackWaveAddUnits(2, 8, "Spitter");
    AIAttackWaveAddUnits(3, 8, "Spitter");
    AIAttackWaveAddUnits(4, 8, "Spitter");
    AIAttackWaveAddUnits(5, 8, "Spitter");

    AIAttackWaveAddUnits(2, 1, "Kraken");
    AIAttackWaveAddUnits(3, 1, "Kraken");
    AIAttackWaveAddUnits(4, 1, "Kraken");
    AIAttackWaveAddUnits(5, 1, "Kraken");

    AIAttackWaveAddUnits(2, 2, "Casnolisk");
    AIAttackWaveAddUnits(3, 2, "Casnolisk");
    AIAttackWaveAddUnits(4, 2, "Casnolisk");
    AIAttackWaveAddUnits(5, 2, "Casnolisk");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave6_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave6_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave6_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave6_runPlayer = p;
    aiF4750E9A_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave7_enabled;
wave[17] aiF4750E9A_wave7_lastWave;
trigger aiF4750E9A_wave7_trigger = null;
int aiF4750E9A_wave7_runPlayer;
playergroup aiF4750E9A_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave7_enabled[init_i] = true;
        aiF4750E9A_wave7_lastWave[init_i] = null;
    }

    aiF4750E9A_wave7_trigger = TriggerCreate("aiF4750E9A_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave7_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave7_runPlayer;
    playergroup target = aiF4750E9A_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 385; }
    if (d == 2) { ta = 385; }
    if (d == 3) { ta = 385; }
    if (d == 4) { ta = 385; }
    tg = 0;
    if (d == 1) { tg = 300; }
    if (d == 2) { tg = 300; }
    if (d == 3) { tg = 300; }
    if (d == 4) { tg = 300; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 28, "Scorpalisk");
    AIAttackWaveAddUnits(3, 28, "Scorpalisk");
    AIAttackWaveAddUnits(4, 28, "Scorpalisk");
    AIAttackWaveAddUnits(5, 28, "Scorpalisk");

    AIAttackWaveAddUnits(2, 7, "Mendling");
    AIAttackWaveAddUnits(3, 7, "Mendling");
    AIAttackWaveAddUnits(4, 7, "Mendling");
    AIAttackWaveAddUnits(5, 7, "Mendling");

    AIAttackWaveAddUnits(2, 13, "Spitter");
    AIAttackWaveAddUnits(3, 13, "Spitter");
    AIAttackWaveAddUnits(4, 13, "Spitter");
    AIAttackWaveAddUnits(5, 13, "Spitter");

    AIAttackWaveAddUnits(2, 1, "Kraken");
    AIAttackWaveAddUnits(3, 1, "Kraken");
    AIAttackWaveAddUnits(4, 1, "Kraken");
    AIAttackWaveAddUnits(5, 1, "Kraken");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave7_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave7_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave7_runPlayer = p;
    aiF4750E9A_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF4750E9A_wave8_enabled;
wave[17] aiF4750E9A_wave8_lastWave;
trigger aiF4750E9A_wave8_trigger = null;
int aiF4750E9A_wave8_runPlayer;
playergroup aiF4750E9A_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF4750E9A_wave8_enabled[init_i] = true;
        aiF4750E9A_wave8_lastWave[init_i] = null;
    }

    aiF4750E9A_wave8_trigger = TriggerCreate("aiF4750E9A_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF4750E9A_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave8_runFunc (bool c, bool a) {
    int p = aiF4750E9A_wave8_runPlayer;
    playergroup target = aiF4750E9A_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF4750E9A_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiF4750E9A_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 414; }
    if (d == 2) { ta = 414; }
    if (d == 3) { ta = 414; }
    if (d == 4) { ta = 414; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(1069647582));

    gatherPoint = aiF4750E9A_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);

    AIAttackWaveAddUnits(2, 23, "Scorpalisk");
    AIAttackWaveAddUnits(3, 23, "Scorpalisk");
    AIAttackWaveAddUnits(4, 23, "Scorpalisk");
    AIAttackWaveAddUnits(5, 23, "Scorpalisk");

    AIAttackWaveAddUnits(2, 12, "Mendling");
    AIAttackWaveAddUnits(3, 12, "Mendling");
    AIAttackWaveAddUnits(4, 12, "Mendling");
    AIAttackWaveAddUnits(5, 12, "Mendling");

    AIAttackWaveAddUnits(2, 13, "Spitter");
    AIAttackWaveAddUnits(3, 13, "Spitter");
    AIAttackWaveAddUnits(4, 13, "Spitter");
    AIAttackWaveAddUnits(5, 13, "Spitter");

    AIAttackWaveAddUnits(2, 12, "Xayidling");
    AIAttackWaveAddUnits(3, 12, "Xayidling");
    AIAttackWaveAddUnits(4, 12, "Xayidling");
    AIAttackWaveAddUnits(5, 12, "Xayidling");

    AIAttackWaveSend(p, ts, false);
    aiF4750E9A_wave8_lastWave[p] = WaveLastCreated();
    aiF4750E9A_lastWave[p] = aiF4750E9A_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave8_run (int p, playergroup target, bool wait) {
    aiF4750E9A_wave8_runPlayer = p;
    aiF4750E9A_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF4750E9A_wave1_enable(p, val); }
    if (w == 2) { aiF4750E9A_wave2_enable(p, val); }
    if (w == 3) { aiF4750E9A_wave3_enable(p, val); }
    if (w == 4) { aiF4750E9A_wave4_enable(p, val); }
    if (w == 5) { aiF4750E9A_wave5_enable(p, val); }
    if (w == 6) { aiF4750E9A_wave6_enable(p, val); }
    if (w == 7) { aiF4750E9A_wave7_enable(p, val); }
    if (w == 8) { aiF4750E9A_wave8_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF4750E9A_wave1_isEnabled(p); }
    if (w == 2) { return aiF4750E9A_wave2_isEnabled(p); }
    if (w == 3) { return aiF4750E9A_wave3_isEnabled(p); }
    if (w == 4) { return aiF4750E9A_wave4_isEnabled(p); }
    if (w == 5) { return aiF4750E9A_wave5_isEnabled(p); }
    if (w == 6) { return aiF4750E9A_wave6_isEnabled(p); }
    if (w == 7) { return aiF4750E9A_wave7_isEnabled(p); }
    if (w == 8) { return aiF4750E9A_wave8_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiF4750E9A_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF4750E9A_wave1_createdWave(p); }
    if (w == 2) { return aiF4750E9A_wave2_createdWave(p); }
    if (w == 3) { return aiF4750E9A_wave3_createdWave(p); }
    if (w == 4) { return aiF4750E9A_wave4_createdWave(p); }
    if (w == 5) { return aiF4750E9A_wave5_createdWave(p); }
    if (w == 6) { return aiF4750E9A_wave6_createdWave(p); }
    if (w == 7) { return aiF4750E9A_wave7_createdWave(p); }
    if (w == 8) { return aiF4750E9A_wave8_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF4750E9A_wave1_run(p, target, wait); }
    if (w == 2) { aiF4750E9A_wave2_run(p, target, wait); }
    if (w == 3) { aiF4750E9A_wave3_run(p, target, wait); }
    if (w == 4) { aiF4750E9A_wave4_run(p, target, wait); }
    if (w == 5) { aiF4750E9A_wave5_run(p, target, wait); }
    if (w == 6) { aiF4750E9A_wave6_run(p, target, wait); }
    if (w == 7) { aiF4750E9A_wave7_run(p, target, wait); }
    if (w == 8) { aiF4750E9A_wave8_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF4750E9A_waves_trigger = null;
int aiF4750E9A_waves_runPlayer;
playergroup aiF4750E9A_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_waves_init () {
    aiF4750E9A_waves_trigger = TriggerCreate("aiF4750E9A_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_waves_runFunc (bool c, bool a) {
    int p = aiF4750E9A_waves_runPlayer;
    playergroup target = aiF4750E9A_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiF4750E9A_wave1_run(p, target, true);
    aiF4750E9A_wave2_run(p, target, true);
    aiF4750E9A_wave3_run(p, target, true);
    aiF4750E9A_wave4_run(p, target, true);
    aiF4750E9A_wave5_run(p, target, true);
    aiF4750E9A_wave6_run(p, target, true);
    aiF4750E9A_wave7_run(p, target, true);
    aiF4750E9A_wave8_run(p, target, true);

    while (true) {
        aiF4750E9A_wave8_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_waves_run (int p, playergroup target) {
    aiF4750E9A_waves_runPlayer = p;
    aiF4750E9A_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiF4750E9A_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiF4750E9A_wave1_enable(p, val);
    aiF4750E9A_wave2_enable(p, val);
    aiF4750E9A_wave3_enable(p, val);
    aiF4750E9A_wave4_enable(p, val);
    aiF4750E9A_wave5_enable(p, val);
    aiF4750E9A_wave6_enable(p, val);
    aiF4750E9A_wave7_enable(p, val);
    aiF4750E9A_wave8_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_waves_stop () {
    TriggerStop(aiF4750E9A_waves_trigger);

    TriggerStop(aiF4750E9A_wave1_trigger);
    TriggerStop(aiF4750E9A_wave2_trigger);
    TriggerStop(aiF4750E9A_wave3_trigger);
    TriggerStop(aiF4750E9A_wave4_trigger);
    TriggerStop(aiF4750E9A_wave5_trigger);
    TriggerStop(aiF4750E9A_wave6_trigger);
    TriggerStop(aiF4750E9A_wave7_trigger);
    TriggerStop(aiF4750E9A_wave8_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF4750E9A_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF4750E9A_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiF4750E9A_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiF4750E9A_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF4750E9A_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF4750E9A_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiF4750E9A_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF4750E9A_initialized) {
        aiF4750E9A_wave1_init();
        aiF4750E9A_wave2_init();
        aiF4750E9A_wave3_init();
        aiF4750E9A_wave4_init();
        aiF4750E9A_wave5_init();
        aiF4750E9A_wave6_init();
        aiF4750E9A_wave7_init();
        aiF4750E9A_wave8_init();
        aiF4750E9A_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF4750E9A_defGather[init_i] = PointFromId(1208008854);
        }

        aiF4750E9A_initialized = true;
    }

    AICampaignStart(p);
}
