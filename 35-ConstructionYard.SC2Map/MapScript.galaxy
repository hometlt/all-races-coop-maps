//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Construction Yard
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Untitled Custom Script 001
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Hybrid Wave AI
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }
    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave01_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave2_enabled;
wave[17] aiF917F4D7_wave2_lastWave;
trigger aiF917F4D7_wave2_trigger = null;
int aiF917F4D7_wave2_runPlayer;
playergroup aiF917F4D7_wave2_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave2_enabled[init_i] = true;
        aiF917F4D7_wave2_lastWave[init_i] = null;
    }
    aiF917F4D7_wave2_trigger = TriggerCreate("aiF917F4D7_wave2_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave2_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave2_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave2_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave2_runPlayer;
    playergroup target = aiF917F4D7_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave02_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave2_runPlayer = p;
    aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave3_enabled;
wave[17] aiF917F4D7_wave3_lastWave;
trigger aiF917F4D7_wave3_trigger = null;
int aiF917F4D7_wave3_runPlayer;
playergroup aiF917F4D7_wave3_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave3_enabled[init_i] = true;
        aiF917F4D7_wave3_lastWave[init_i] = null;
    }
    aiF917F4D7_wave3_trigger = TriggerCreate("aiF917F4D7_wave3_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave3_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave3_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave3_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave3_runPlayer;
    playergroup target = aiF917F4D7_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave03_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave3_runPlayer = p;
    aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave4_enabled;
unitgroup[17] aiF917F4D7_wave4_lastUnits;
wave[17] aiF917F4D7_wave4_lastWave;
trigger aiF917F4D7_wave4_trigger = null;
int aiF917F4D7_wave4_runPlayer;
playergroup aiF917F4D7_wave4_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave4_enabled[init_i] = true;
        aiF917F4D7_wave4_lastUnits[init_i] = null;
        aiF917F4D7_wave4_lastWave[init_i] = null;
    }
    aiF917F4D7_wave4_trigger = TriggerCreate("aiF917F4D7_wave4_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave4_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave4_enabled[p];
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave4_createdUnits (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastUnits[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave4_runPlayer;
    playergroup target = aiF917F4D7_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int createCount = 0;
    point createPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave04_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    createPoint = gatherPoint;
    aiF917F4D7_wave4_lastUnits[p] = UnitGroupEmpty();
    createCount = 0;
    if (d == 1) { createCount = 1; }
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 2; }
    if (d == 4) { createCount = 2; }
    if (d == 5) { createCount = 2; }
    if (d == 6) { createCount = 2; }
    if (createCount > 0) {
        UnitCreate(createCount, "HybridReaver", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiF917F4D7_wave4_lastUnits[p], UnitLastCreatedGroup());
    }
    createCount = 0;
    if (d == 2) { createCount = 1; }
    if (d == 3) { createCount = 1; }
    if (d == 4) { createCount = 1; }
    if (d == 5) { createCount = 1; }
    if (d == 6) { createCount = 1; }
    if (createCount > 0) {
        UnitCreate(createCount, "HybridDominator", 0, p, createPoint, PointGetFacing(createPoint));
        AIAttackWaveUseGroup(p, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(aiF917F4D7_wave4_lastUnits[p], UnitLastCreatedGroup());
    }
    AIAttackWaveSend(p, ts, false);
    aiF917F4D7_wave4_lastWave[p] = WaveLastCreated();
    aiF917F4D7_lastWave[p] = aiF917F4D7_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave4_runPlayer = p;
    aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave5_enabled;
wave[17] aiF917F4D7_wave5_lastWave;
trigger aiF917F4D7_wave5_trigger = null;
int aiF917F4D7_wave5_runPlayer;
playergroup aiF917F4D7_wave5_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave5_enabled[init_i] = true;
        aiF917F4D7_wave5_lastWave[init_i] = null;
    }
    aiF917F4D7_wave5_trigger = TriggerCreate("aiF917F4D7_wave5_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave5_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave5_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave5_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave5_runPlayer;
    playergroup target = aiF917F4D7_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave05_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddUnits(2, 1, "HybridDominatorVoid");
    AIAttackWaveAddUnits(3, 1, "HybridDominatorVoid");
    AIAttackWaveAddUnits(4, 2, "HybridDominatorVoid");
    AIAttackWaveAddUnits(5, 2, "HybridDominatorVoid");
    AIAttackWaveAddUnits(6, 2, "HybridDominatorVoid");
    AIAttackWaveAddUnits(7, 2, "HybridDominatorVoid");
    AIAttackWaveSend(p, ts, false);
    aiF917F4D7_wave5_lastWave[p] = WaveLastCreated();
    aiF917F4D7_lastWave[p] = aiF917F4D7_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave5_runPlayer = p;
    aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave6_enabled;
wave[17] aiF917F4D7_wave6_lastWave;
trigger aiF917F4D7_wave6_trigger = null;
int aiF917F4D7_wave6_runPlayer;
playergroup aiF917F4D7_wave6_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave6_enabled[init_i] = true;
        aiF917F4D7_wave6_lastWave[init_i] = null;
    }
    aiF917F4D7_wave6_trigger = TriggerCreate("aiF917F4D7_wave6_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave6_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave6_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave6_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave6_runPlayer;
    playergroup target = aiF917F4D7_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave06_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave6_runPlayer = p;
    aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave7_enabled;
wave[17] aiF917F4D7_wave7_lastWave;
trigger aiF917F4D7_wave7_trigger = null;
int aiF917F4D7_wave7_runPlayer;
playergroup aiF917F4D7_wave7_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave7_enabled[init_i] = true;
        aiF917F4D7_wave7_lastWave[init_i] = null;
    }
    aiF917F4D7_wave7_trigger = TriggerCreate("aiF917F4D7_wave7_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave7_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave7_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave7_runPlayer;
    playergroup target = aiF917F4D7_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    TriggerExecute(TriggerFind("gt_AttackWave07_Func"), true, false);
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddUnits(2, 1, "HybridBehemoth");
    AIAttackWaveAddUnits(3, 1, "HybridBehemoth");
    AIAttackWaveAddUnits(4, 1, "HybridBehemoth");
    AIAttackWaveAddUnits(5, 1, "HybridBehemoth");
    AIAttackWaveAddUnits(6, 1, "HybridBehemoth");
    AIAttackWaveAddUnits(7, 1, "HybridBehemoth");
    AIAttackWaveAddUnits(2, 1, "HybridDominatorVoid");
    AIAttackWaveAddUnits(3, 1, "HybridDominatorVoid");
    AIAttackWaveAddUnits(4, 1, "HybridDominatorVoid");
    AIAttackWaveAddUnits(5, 1, "HybridDominatorVoid");
    AIAttackWaveAddUnits(6, 1, "HybridDominatorVoid");
    AIAttackWaveAddUnits(7, 1, "HybridDominatorVoid");
    AIAttackWaveSend(p, ts, false);
    aiF917F4D7_wave7_lastWave[p] = WaveLastCreated();
    aiF917F4D7_lastWave[p] = aiF917F4D7_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave7_runPlayer = p;
    aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
    if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
    if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
    if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
    if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
    if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
    if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
    if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
    if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
    if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
    if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
    if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    if (w == 4) { return aiF917F4D7_wave4_createdUnits(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
    if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
    if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
    if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
    if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
    if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
    if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
    if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
    if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
    if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
    if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
    if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;
    if (p < 0 || p >= 16) {
        return false;
    }
    aiF917F4D7_wave1_run(p, target, true);
    aiF917F4D7_wave2_run(p, target, true);
    aiF917F4D7_wave3_run(p, target, true);
    aiF917F4D7_wave4_run(p, target, true);
    aiF917F4D7_wave5_run(p, target, true);
    aiF917F4D7_wave6_run(p, target, true);
    aiF917F4D7_wave7_run(p, target, true);
    while (true) {
        aiF917F4D7_wave7_run(p, target, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enable(p, val);
    aiF917F4D7_wave2_enable(p, val);
    aiF917F4D7_wave3_enable(p, val);
    aiF917F4D7_wave4_enable(p, val);
    aiF917F4D7_wave5_enable(p, val);
    aiF917F4D7_wave6_enable(p, val);
    aiF917F4D7_wave7_enable(p, val);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);
    TriggerStop(aiF917F4D7_wave1_trigger);
    TriggerStop(aiF917F4D7_wave2_trigger);
    TriggerStop(aiF917F4D7_wave3_trigger);
    TriggerStop(aiF917F4D7_wave4_trigger);
    TriggerStop(aiF917F4D7_wave5_trigger);
    TriggerStop(aiF917F4D7_wave6_trigger);
    TriggerStop(aiF917F4D7_wave7_trigger);
}
//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}
//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;
    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_wave2_init();
        aiF917F4D7_wave3_init();
        aiF917F4D7_wave4_init();
        aiF917F4D7_wave5_init();
        aiF917F4D7_wave6_init();
        aiF917F4D7_wave7_init();
        aiF917F4D7_waves_init();
        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(0);
        }
        aiF917F4D7_initialized = true;
    }
    AICampaignStart(p);
}
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Construction Yard
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 3;
const int gv_pLAYER_04_ENEMY = 4;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
unitgroup gv_allEnemyStructures;
int gv_deadCampsCount;
int[5] gv_deadCampsArray;
int gv_capturedCamps;
unit gv_aPCUnit;
int gv_aPCUnitIsInCamp;
int gv_aPCisOnRoute;
unitgroup gv_colonistsOnRoute;
int gv_campConstructionStarted;
int gv_indexOfArray;
int gv_campPing;
int gv_bonusCampPing;
int gv_aPCPing;
unit gv_redBeacon;
unit gv_tealBeacon;
unit gv_invisibleBuilderRedTealOutposts;
point[58] gv_colonistsRoute6Array;
point[35] gv_colonistsRoute5Array;
point[41] gv_colonistsRoute4Array;
point[27] gv_colonistsRoute3Array;
point[19] gv_colonistsRoute2Array;
point[8] gv_colonistsRoute1Array;
point gv_currentPointGlobal;
order gv_lastAPCOrder;
int gv_aPCNumberofRoute;
int gv_maxIndexOfArray;
point gv_unloadPoint;
int gv_redScienceFacilityActivated;
int gv_tealWarFacilityActivated;
int gv_redTag;
int gv_tealTag;
timer gv_secondaryObjectiveTimerScience;
timer gv_secondaryObjectiveTimerWar;
int gv_redTimerWindow;
int gv_tealTimerWindow;
int gv_secondaryObjectiveFlag;
int gv_redBeaconPing;
int gv_redOutpostPing;
int gv_tealOutpostPing;
int gv_tealBeaconPing;
unit gv_sensorSCV;
timer gv_sensorTimer;
int gv_sensorTimerWindow;
int[6] gv_campsPassed;
int gv_campConstructionCompleted;
unitgroup gv_camp1Structures;
unitgroup gv_camp2Structures;
unitgroup gv_camp3Structures;
unitgroup gv_camp4Structures;
unitgroup gv_camp5Structures;
unitgroup gv_camp6Structures;
bool gv_underAttackAttention;
point gv_victoryCompletePan;
point gv_attackWaveA_Wave05Path;
region[3][11] gv_attackSpawn;
int gv_objectiveBuildUp6Camps;
int gv_objectiveDoNotLoose2ormore;
int gv_objectiveSecondaryObjectiveScience;
int gv_objectiveSecondaryObjectiveWar;
void InitGlobals () {
    gv_enemyGroup = PlayerGroupEmpty();
    gv_allEnemyStructures = UnitGroupEmpty();
    gv_colonistsOnRoute = UnitGroupEmpty();
    gv_campPing = c_invalidPingId;
    gv_bonusCampPing = c_invalidPingId;
    gv_aPCPing = c_invalidPingId;
    gv_invisibleBuilderRedTealOutposts = UnitFromId(964669050);
    gv_redTag = c_textTagNone;
    gv_tealTag = c_textTagNone;
    gv_secondaryObjectiveTimerScience = TimerCreate();
    gv_secondaryObjectiveTimerWar = TimerCreate();
    gv_redTimerWindow = c_timerWindowNone;
    gv_tealTimerWindow = c_timerWindowNone;
    gv_redBeaconPing = c_invalidPingId;
    gv_redOutpostPing = c_invalidPingId;
    gv_tealOutpostPing = c_invalidPingId;
    gv_tealBeaconPing = c_invalidPingId;
    gv_sensorTimer = TimerCreate();
    gv_sensorTimerWindow = c_timerWindowNone;
    gv_camp1Structures = UnitGroupEmpty();
    gv_camp2Structures = UnitGroupEmpty();
    gv_camp3Structures = UnitGroupEmpty();
    gv_camp4Structures = UnitGroupEmpty();
    gv_camp5Structures = UnitGroupEmpty();
    gv_camp6Structures = UnitGroupEmpty();
    gv_objectiveBuildUp6Camps = c_invalidObjectiveId;
    gv_objectiveDoNotLoose2ormore = c_invalidObjectiveId;
    gv_objectiveSecondaryObjectiveScience = c_invalidObjectiveId;
    gv_objectiveSecondaryObjectiveWar = c_invalidObjectiveId;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_CreateAPC ();
void gf_SecondaryObjectiveConstruction (region lp_region, point lp_turretPoint, point lp_cCCreatePoint, point lp_bunker1Point, point lp_bunker2Point, point lp_siegeTankPoint);
void gf_APCisinCampConstrucion (region lp_campRegion, int lp_aIPlayerID, int lp_campsPassedIndex, point lp_parkPoint, point lp_campPointDropPod, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, bool lp_turretYesNo, point lp_turretPoint, bool lp_customStructureYesNo, string lp_customStructureType, point lp_customStructurePoint, trigger lp_deadCampTrigger, unitgroup lp_structuresUnitGroup, trigger lp_periodicTrigger, trigger lp_attackWaveTrigger, string lp_genericEvent);
void gf_CreatePingsforCamp (point lp_camppoint);
void gf_BonusCampPing (point lp_pingPoint);
void gf_BonusCampBuild (bool lp_bigCampYesNo, bool lp_buildTurretYesNo, bool lp_supplyDepotsYesNo, bool lp_siegeTankYesNo, region lp_campRegion, region lp_bonusRegion, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, point lp_bunkerPoint2, point lp_turret, point lp_turret2, point lp_planetary, point lp_bonusMarines, point lp_siegeTankPoint, int lp_aIPlayerID);
void gf_APCisinCampConstrucionBackup2 (region lp_campRegion, int lp_aIPlayerID, int lp_campsPassedIndex, point lp_parkPoint, point lp_campPointDropPod, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, bool lp_turretYesNo, point lp_turretPoint, bool lp_customStructureYesNo, string lp_customStructureType, point lp_customStructurePoint, trigger lp_deadCampTrigger, unitgroup lp_structuresUnitGroup);
void gf_APCisinCampConstrucionBackup (region lp_campRegion, int lp_aIPlayerID, int lp_campsPassedIndex, point lp_parkPoint, point lp_campPointDropPod, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, bool lp_turretYesNo, point lp_turretPoint, bool lp_customStructureYesNo, string lp_customStructureType, point lp_customStructurePoint, trigger lp_deadCampTrigger, unitgroup lp_structuresUnitGroup);
void gf_BonusCampBuildBackup (bool lp_buildSupplyYesNo, bool lp_buildTurretYesNo, region lp_campRegion, region lp_bonusRegion, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, point lp_turret, point lp_bonusMarines, int lp_aIPlayerID, bool lp_bigCamp);
void gf_AddHybridstoAttackWave (fixed lp_gameTime);
point gf_AttackWaveSpawn ();
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartGameQ;
trigger gt_APCisUnderAttack;
trigger gt_APCDies;
trigger gt_APCRouteArrowPings1;
trigger gt_APCRouteArrowPings2;
trigger gt_APCRouteArrowPings3;
trigger gt_APCRouteArrowPings4;
trigger gt_APCRouteArrowPings5;
trigger gt_APCRouteArrowPings6;
trigger gt_Camp1SetRoute;
trigger gt_Camp2SetRoute;
trigger gt_Camp3SetRoute;
trigger gt_Camp4SetRoute;
trigger gt_Camp5SetRoute;
trigger gt_Camp6SetRoute;
trigger gt_APCIsIdle;
trigger gt_SetUpAttackWavestoAPC;
trigger gt_Player5AddAllHutstoUnitGroups;
trigger gt_Player5SetCommanderandother;
trigger gt_Player5StructureArmorUpgrade;
trigger gt_Player5StructureFireSupressionUpgradeandTurret;
trigger gt_Player5FortifiedBunkerUpgrade;
trigger gt_ConstructRedOutpost;
trigger gt_ConstructTealOutpost;
trigger gt_RedTimeris0;
trigger gt_TealTimeris0;
trigger gt_CreateSecondaryObjPings;
trigger gt_RedUnitActivatesScienceFacility;
trigger gt_TealUnitActivatesWarFacility;
trigger gt_RedScienceFacilityCaptured;
trigger gt_TealWarFacilityCaptured;
trigger gt_WarFacilityCapturedMakeUpgrades;
trigger gt_ScienceFacilityCapturedMakeUpgrades;
trigger gt_ConstructSensorTower1;
trigger gt_ConstructSensorTower2;
trigger gt_AnyCampIsUnderAttack;
trigger gt_APCReadyCamp1;
trigger gt_Camp1LaunchAPC;
trigger gt_Camp1APCisinCamp;
trigger gt_Camp1PeriodicRoute;
trigger gt_Camp1Bonus;
trigger gt_Camp1IsDead;
trigger gt_APCReadyCamp2;
trigger gt_Camp2DropPodtoAPC;
trigger gt_Camp2LaunchAPC;
trigger gt_Camp2APCisinCamp;
trigger gt_Camp2PeriodicRoute;
trigger gt_Camp2Bonus;
trigger gt_Camp2IsDead;
trigger gt_APCReadyCamp3;
trigger gt_Camp3DropPodtoAPC;
trigger gt_Camp3LaunchAPC;
trigger gt_Camp3APCisinCamp;
trigger gt_Camp3PeriodicRoute;
trigger gt_Camp3Bonus;
trigger gt_Camp3IsDead;
trigger gt_APCReadyCamp4;
trigger gt_Camp4DropPodtoAPC;
trigger gt_Camp4LaunchAPC;
trigger gt_Camp4APCisinCamp;
trigger gt_Camp4PeriodicRoute;
trigger gt_Camp4Bonus;
trigger gt_Camp4IsDead;
trigger gt_APCReadyCamp5;
trigger gt_Camp5DropPodtoAPC;
trigger gt_Camp5LaunchAPC;
trigger gt_Camp5APCisinCamp;
trigger gt_Camp5PeriodicRoute;
trigger gt_Camp5Bonus;
trigger gt_Camp5IsDead;
trigger gt_APCReadyCamp6;
trigger gt_Camp6FinalAttack;
trigger gt_Camp6DropPodtoAPC;
trigger gt_Camp6LaunchAPC;
trigger gt_Camp6APCisinCamp;
trigger gt_Camp6PeriodicRoute;
trigger gt_Camp6IsDead;
trigger gt_EnemyAttackingQ;
trigger gt_HansonFirstTransmission;
trigger gt_HansonSecondaryObjective;
trigger gt_HansonSecondaryObjectiveComplete;
trigger gt_HansonAPCIsReady;
trigger gt_HansonCampCaptured;
trigger gt_HansonCampIsUnderAttack;
trigger gt_HansonCampIsDead;
trigger gt_Hanson2CampsareDeadDefeat;
trigger gt_Hanson2APCsareDeadDefeat;
trigger gt_HansonAPCIsDead;
trigger gt_HansonAPCIsUnderAttack;
trigger gt_HansonSensorTower;
trigger gt_HansonFinalAttack;
trigger gt_HansonBonusCamps;
trigger gt_SecondaryMarineCleanUpTheFacilityArea;
trigger gt_SecondaryHansonHoldonfailed;
trigger gt_SecondaryHansonHoldonComplete;
trigger gt_AllAmonsStructureshavebeendestroyed;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_DefeatShipFlyesAway;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_StartAI;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_AttackWaveCamp1Final;
trigger gt_AttackWaveCamp2Final;
trigger gt_AttackWaveCamp3Final;
trigger gt_AttackWaveCamp4Final;
trigger gt_AttackWaveCamp5Final;
trigger gt_AttackWaveCamp6Final;
trigger gt_AttackWaveCamp1;
trigger gt_AttackWaveCamp2;
trigger gt_AttackWaveCamp3;
trigger gt_AttackWaveCamp4;
trigger gt_AttackWaveCamp5;
trigger gt_AttackWaveCamp6;
trigger gt_RedFacilityDropPod;
trigger gt_TealFacilityDropPod;
trigger gt_AttackWaveSecondaryRed;
trigger gt_AttackWaveSecondaryTeal;
trigger gt_AttackWaveAPC;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_AttackWaveSensorTower1;
trigger gt_AttackWaveSensorTower2;
trigger gt_ObjectiveSixCamps;
trigger gt_ObjectiveDoNotLoose2Camps;
trigger gt_ObjectivePrimaryObjectivesFailed;
trigger gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate;
trigger gt_ObjectivePrimaryObjectivesCampCapturedUpdate;
trigger gt_ObjectiveCreateSecondary;
trigger gt_ObjectiveScienceCaptured;
trigger gt_ObjectiveScienceFailed;
trigger gt_ObjectiveWarCaptured;
trigger gt_ObjectiveWarFailed;
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}
bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }
    return true;
}
void gf_CreateAPC () {
    int autoB4667391_n;
    int autoB4667391_i;
    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", 0, 5, PointFromId(1583439995), PointFromId(1156133171));
    gv_aPCUnit = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_aPCUnit, true);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", UnitGetPosition(gv_aPCUnit), ColorWithAlpha(100.00, 100.00, 50.20, 0.00), 180.0);
    gv_aPCPing = PingLastCreated();
    PingSetScale(gv_aPCPing, 0.7);
    PingSetUnit(gv_aPCPing, gv_aPCUnit);
    PingSetTooltip(gv_aPCPing, StringExternal("Param/Value/FF215781"));
    Wait(20.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_aPCUnit, false);
    UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1141493090)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    autoB4667391_n = 6;
    for (autoB4667391_i = 1; autoB4667391_i <= autoB4667391_n; autoB4667391_i += 1) {
        if ((RandomFixed(0.0, 100.0) >= 55.0)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Colonist", 0, 5, PointFromId(1583439995), UnitGetPosition(gv_aPCUnit));
            UnitGroupAdd(gv_colonistsOnRoute, UnitLastCreated());
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "ColonistFemale", 0, 5, PointFromId(1583439995), UnitGetPosition(gv_aPCUnit));
            UnitGroupAdd(gv_colonistsOnRoute, UnitLastCreated());
        }
    }
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroupSearch("Colonist", 5, PointFromId(1583439995), 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, gv_aPCUnit), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupSearch("ColonistFemale", 5, PointFromId(1583439995), 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, gv_aPCUnit), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
}
void gf_SecondaryObjectiveConstruction (region lp_region, point lp_turretPoint, point lp_cCCreatePoint, point lp_bunker1Point, point lp_bunker2Point, point lp_siegeTankPoint) {
    // Variable Declarations
    unit lv_sCVUnit;
    unit lv_bunker1Unit;
    unit lv_bunker2Unit;
    unit lv_turretUnit;
    unit lv_cCUnit;
    // Variable Initialization
    // Implementation
    lv_sCVUnit = UnitFromId(1399152966);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunker1Point);
    Wait(2.0, c_timeGame);
    UnitKill(UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunker1Point);
    lv_bunker1Unit = UnitLastCreated();
    UnitSetState(lv_bunker1Unit, c_unitStateTargetable, false);
    UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_bunker1Unit), c_orderQueueReplace);
    while (!((UnitIsAlive(lv_sCVUnit) == true) && (UnitFilterMatch(lv_bunker1Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_cCCreatePoint);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_cCCreatePoint);
    UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunker1Unit), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunker2Point);
    Wait(2.0, c_timeGame);
    UnitKill(UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunker2Point);
    lv_bunker2Unit = UnitLastCreated();
    UnitSetState(lv_bunker2Unit, c_unitStateTargetable, false);
    UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_bunker2Unit), c_orderQueueReplace);
    while (!((UnitIsAlive(lv_sCVUnit) == true) && (UnitFilterMatch(lv_bunker2Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_cCCreatePoint);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_cCCreatePoint);
    UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunker2Unit), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turretPoint);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turretPoint);
    lv_turretUnit = UnitLastCreated();
    UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueAddToEnd);
    while (!((UnitIsAlive(lv_sCVUnit) == true) && (UnitFilterMatch(lv_turretUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_siegeTankPoint);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTankSieged", c_unitCreateIgnorePlacement, 5, lp_siegeTankPoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_cCCreatePoint);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_cCCreatePoint);
    lv_cCUnit = UnitLastCreated();
    UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_cCUnit), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AgriaSCV", c_unitCreateIgnorePlacement, 5, RegionGetCenter(lp_region));
    while (!((UnitIsAlive(lv_sCVUnit) == true) && (UnitFilterMatch(lv_cCUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(lv_cCUnit, Order(AbilityCommand("UpgradeToPlanetaryFortress", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_sCVUnit, false);
}
void gf_APCisinCampConstrucion (region lp_campRegion, int lp_aIPlayerID, int lp_campsPassedIndex, point lp_parkPoint, point lp_campPointDropPod, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, bool lp_turretYesNo, point lp_turretPoint, bool lp_customStructureYesNo, string lp_customStructureType, point lp_customStructurePoint, trigger lp_deadCampTrigger, unitgroup lp_structuresUnitGroup, trigger lp_periodicTrigger, trigger lp_attackWaveTrigger, string lp_genericEvent) {
    string auto1060CBFC_val;
    int auto67757219_n;
    int auto67757219_i;
    string auto2C1E0D39_val;
    string auto14A999F9_val;
    // Variable Declarations
    unitgroup lv_localUnitGroup;
    unit lv_randomHut;
    unit lv_sCVUnit;
    unit lv_bunkerUnit;
    unit lv_supply1Unit;
    unit lv_supply2Unit;
    unit lv_factoryUnit;
    unit lv_turretUnit;
    actor lv_bunkerModel;
    actor lv_supply1Model;
    actor lv_supply2Model;
    actor lv_turretModel;
    actor lv_customStructureModel;
    // Variable Initialization
    lv_localUnitGroup = UnitGroupEmpty();
    // Implementation
    libNtve_gf_CreateModelAtPoint("BunkerPlacement", lp_bunkerPoint);
    lv_bunkerModel = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint1);
    lv_supply1Model = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint2);
    lv_supply2Model = libNtve_gf_ActorLastCreated();
    if ((lp_turretYesNo == true)) {
        libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", lp_turretPoint);
        lv_turretModel = libNtve_gf_ActorLastCreated();
    }
    if ((lp_customStructureYesNo == true)) {
        auto1060CBFC_val = lp_customStructureType;
        if (auto1060CBFC_val == "Barracks") {
            libNtve_gf_CreateModelAtPoint("BarracksPlacement", lp_customStructurePoint);
            lv_customStructureModel = libNtve_gf_ActorLastCreated();
        }
        else if (auto1060CBFC_val == "Factory") {
            libNtve_gf_CreateModelAtPoint("FactoryPlacement", lp_customStructurePoint);
            lv_customStructureModel = libNtve_gf_ActorLastCreated();
        }
        else {
        }
    }
    lv_localUnitGroup = lp_structuresUnitGroup;
    gv_aPCUnitIsInCamp = 1;
    if ((UnitIsAlive(gv_aPCUnit) == true)) {
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        while (!((UnitGroupCount(UnitGroup(null, lp_aIPlayerID, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        gv_campConstructionCompleted = 0;
        if ((UnitIsAlive(gv_aPCUnit) == true)) {
            UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("ColonistTransportTransport", 1)), c_orderQueueAddToEnd);
            if ((UnitIsAlive(gv_aPCUnit) == true)) {
                while (!((UnitGroupCount(UnitCargoGroup(gv_aPCUnit), c_unitCountAlive) == 0))) {
                    Wait(1.0, c_timeGame);
                }
                Wait(1.0, c_timeGame);
                auto67757219_n = UnitGroupCount(gv_colonistsOnRoute, c_unitCountAlive);
                for (auto67757219_i = 1; auto67757219_i <= auto67757219_n; auto67757219_i += 1) {
                    UnitGroupLoopBegin(gv_colonistsOnRoute);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        lv_randomHut = UnitGroupRandomUnit(UnitGroup("NovaColonistHut", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_randomHut), c_orderQueueAddToEnd);
                    }
                    UnitGroupLoopEnd();
                }
                UnitGroupLoopBegin(UnitGroup(null, 5, lp_campRegion, UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
                }
                UnitGroupLoopEnd();
                Wait(1.0, c_timeGame);
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_parkPoint), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                TriggerEnable(lp_periodicTrigger, false);
                gv_lastAPCOrder = null;
                gv_aPCUnit = null;
                gv_aPCisOnRoute = 0;
                gv_colonistsOnRoute = UnitGroupEmpty();
                lv_sCVUnit = UnitFromId(1063682192);
                TriggerExecute(lp_attackWaveTrigger, true, false);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
                lv_supply1Unit = UnitLastCreated();
                libNtve_gf_KillModel(lv_supply1Model);
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_supply1Unit), c_orderQueueReplace);
                while (!(((UnitIsAlive(lv_supply1Unit) == false) || ((UnitIsAlive(lv_supply1Unit) == true) && (UnitFilterMatch(lv_supply1Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
                lv_supply2Unit = UnitLastCreated();
                libNtve_gf_KillModel(lv_supply2Model);
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_supply2Unit), c_orderQueueReplace);
                while (!(((UnitIsAlive(lv_supply2Unit) == false) || ((UnitIsAlive(lv_supply2Unit) == true) && (UnitFilterMatch(lv_supply2Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
                lv_bunkerUnit = UnitLastCreated();
                libNtve_gf_KillModel(lv_bunkerModel);
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                while (!(((UnitIsAlive(lv_bunkerUnit) == false) || ((UnitIsAlive(lv_bunkerUnit) == true) && (UnitFilterMatch(lv_bunkerUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                    Wait(1.0, c_timeGame);
                }
                UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueAddToEnd);
                }
                UnitGroupLoopEnd();
                if ((lp_turretYesNo == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turretPoint);
                    Wait(2.0, c_timeGame);
                    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turretPoint);
                    lv_turretUnit = UnitLastCreated();
                    libNtve_gf_KillModel(lv_turretModel);
                    UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                    UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueAddToEnd);
                }
                if ((lp_customStructureYesNo == true)) {
                    if ((lp_turretYesNo == true)) {
                        while (!(((UnitIsAlive(lv_turretUnit) == false) || ((UnitIsAlive(lv_turretUnit) == true) && (UnitFilterMatch(lv_turretUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                            Wait(1.0, c_timeGame);
                        }
                        auto14A999F9_val = lp_customStructureType;
                        if (auto14A999F9_val == "Barracks") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            Wait(3.0, c_timeGame);
                            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else if (auto14A999F9_val == "Factory") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            Wait(3.0, c_timeGame);
                            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else {
                        }
                    }
                    else {
                        while (!((UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
                            Wait(1.0, c_timeGame);
                        }
                        auto2C1E0D39_val = lp_customStructureType;
                        if (auto2C1E0D39_val == "Barracks") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else if (auto2C1E0D39_val == "Factory") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else {
                        }
                    }
                }
                lv_sCVUnit = null;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                Wait(2.0, c_timeGame);
                UnitKill(UnitLastCreated());
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AgriaSCV", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                gv_campConstructionCompleted = 1;
                TriggerExecute(gt_HansonCampCaptured, true, false);
                TriggerSendEvent(lp_genericEvent);
            }
        }
        gv_capturedCamps += 1;
        gv_campsPassed[lp_campsPassedIndex] = 1;
        while (!((gv_campConstructionCompleted == 1))) {
            Wait(1.0, c_timeGame);
        }
        TriggerExecute(gt_ObjectivePrimaryObjectivesCampCapturedUpdate, true, true);
    }
    gv_campConstructionCompleted = 0;
    libCOMI_gf_DestroyPingCoop(gv_campPing);
    gv_campPing = c_invalidPingId;
    PingDestroy(gv_aPCPing);
    gv_aPCPing = c_invalidPingId;
}
void gf_CreatePingsforCamp (point lp_camppoint) {
    // Implementation
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, lp_camppoint, StringExternal("Param/Value/EBBC8F1A"));
    gv_campPing = PingLastCreated();
}
void gf_BonusCampPing (point lp_pingPoint) {
    // Implementation
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", lp_pingPoint, ColorWithAlpha(0.00, 100.00, 50.20, 0.00), (3.0*60));
    gv_bonusCampPing = PingLastCreated();
    PingSetTooltip(gv_bonusCampPing, StringExternal("Param/Value/E974F184"));
}
void gf_BonusCampBuild (bool lp_bigCampYesNo, bool lp_buildTurretYesNo, bool lp_supplyDepotsYesNo, bool lp_siegeTankYesNo, region lp_campRegion, region lp_bonusRegion, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, point lp_bunkerPoint2, point lp_turret, point lp_turret2, point lp_planetary, point lp_bonusMarines, point lp_siegeTankPoint, int lp_aIPlayerID) {
    // Variable Declarations
    unit lv_cCUnit;
    int lv_bonusPing;
    unit lv_bunkerUnit;
    unit lv_supply1Unit;
    unit lv_supply2Unit;
    unit lv_turretUnit;
    unit lv_bonusSCVUnit;
    actor lv_bunkerModel;
    actor lv_bunkerModel2;
    actor lv_supply1Model;
    actor lv_supply2Model;
    actor lv_turretModel;
    actor lv_turretModel2;
    actor lv_d0A1D0A1Model;
    // Variable Initialization
    lv_bonusPing = c_invalidPingId;
    // Implementation
    lv_bonusSCVUnit = UnitFromId(1607957529);
    if ((lp_bigCampYesNo == true)) {
        libNtve_gf_CreateModelAtPoint("BunkerPlacement", lp_bunkerPoint);
        lv_bunkerModel = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BunkerPlacement", lp_bunkerPoint2);
        lv_bunkerModel2 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", lp_turret);
        lv_turretModel = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", lp_turret2);
        lv_turretModel2 = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("CommandCenterPlacement", lp_planetary);
        lv_d0A1D0A1Model = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
        lv_bunkerUnit = UnitLastCreated();
        libNtve_gf_KillModel(lv_bunkerModel);
        UnitSetState(lv_bunkerUnit, c_unitStateTargetable, false);
        UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        while (!(((UnitIsAlive(lv_bunkerUnit) == false) || ((UnitIsAlive(lv_bunkerUnit) == true) && (UnitFilterMatch(lv_bunkerUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))))) {
            Wait(1.0, c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunkerPoint2);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunkerPoint2);
        lv_bunkerUnit = UnitLastCreated();
        libNtve_gf_KillModel(lv_bunkerModel2);
        UnitSetState(lv_bunkerUnit, c_unitStateTargetable, false);
        UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        while (!(((UnitIsAlive(lv_bunkerUnit) == false) || ((UnitIsAlive(lv_bunkerUnit) == true) && (UnitFilterMatch(lv_bunkerUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))))) {
            Wait(1.0, c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        Wait(1.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turret);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turret);
        lv_turretUnit = UnitLastCreated();
        libNtve_gf_KillModel(lv_turretModel);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueReplace);
        while (!(((UnitIsAlive(lv_turretUnit) == false) || ((UnitIsAlive(lv_turretUnit) == true) && (UnitFilterMatch(lv_turretUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))))) {
            Wait(1.0, c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turret2);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turret2);
        lv_turretUnit = UnitLastCreated();
        libNtve_gf_KillModel(lv_turretModel2);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_planetary);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCenter", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_planetary);
        lv_cCUnit = UnitLastCreated();
        libNtve_gf_KillModel(lv_d0A1D0A1Model);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_cCUnit), c_orderQueueReplace);
        while (!(((UnitIsAlive(lv_cCUnit) == false) || ((UnitIsAlive(lv_cCUnit) == true) && (UnitFilterMatch(lv_cCUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lv_cCUnit) == true)) {
            UnitIssueOrder(lv_cCUnit, Order(AbilityCommand("UpgradeToPlanetaryFortress", 0)), c_orderQueueReplace);
        }
    }
    else {
        libNtve_gf_CreateModelAtPoint("BunkerPlacement", lp_bunkerPoint);
        lv_bunkerModel = libNtve_gf_ActorLastCreated();
        if ((lp_supplyDepotsYesNo == true)) {
            libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint1);
            lv_supply1Model = libNtve_gf_ActorLastCreated();
            libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint2);
            lv_supply2Model = libNtve_gf_ActorLastCreated();
        }
        if ((lp_buildTurretYesNo == true)) {
            libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", lp_turret);
            lv_turretModel = libNtve_gf_ActorLastCreated();
            libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", lp_turret2);
            lv_turretModel2 = libNtve_gf_ActorLastCreated();
        }
        while (!((UnitGroupCount(UnitGroup(null, lp_aIPlayerID, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        if ((lp_supplyDepotsYesNo == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
            lv_supply1Unit = UnitLastCreated();
            libNtve_gf_KillModel(lv_supply1Model);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_supply1Unit), c_orderQueueReplace);
            while (!(((UnitIsAlive(lv_supply1Unit) == false) || ((UnitIsAlive(lv_supply1Unit) == true) && (UnitFilterMatch(lv_supply1Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))))) {
                Wait(1.0, c_timeGame);
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
            lv_supply2Unit = UnitLastCreated();
            libNtve_gf_KillModel(lv_supply2Model);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_supply2Unit), c_orderQueueReplace);
            while (!(((UnitIsAlive(lv_supply2Unit) == false) || ((UnitIsAlive(lv_supply2Unit) == true) && (UnitFilterMatch(lv_supply2Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))))) {
                Wait(1.0, c_timeGame);
            }
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
        lv_bunkerUnit = UnitLastCreated();
        libNtve_gf_KillModel(lv_bunkerModel);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        while (!(((UnitIsAlive(lv_bunkerUnit) == false) || ((UnitIsAlive(lv_bunkerUnit) == true) && (UnitFilterMatch(lv_bunkerUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))))) {
            Wait(1.0, c_timeGame);
        }
        UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        if ((lp_buildTurretYesNo == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turret);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turret);
            lv_turretUnit = UnitLastCreated();
            libNtve_gf_KillModel(lv_turretModel);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueReplace);
            while (!(((UnitIsAlive(lv_turretUnit) == false) || ((UnitIsAlive(lv_turretUnit) == true) && (UnitFilterMatch(lv_turretUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))))) {
                Wait(1.0, c_timeGame);
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turret2);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turret2);
            lv_turretUnit = UnitLastCreated();
            libNtve_gf_KillModel(lv_turretModel2);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueReplace);
        }
        if ((lp_siegeTankYesNo == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turret);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeTankSieged", c_unitCreateIgnorePlacement, 5, lp_siegeTankPoint);
        }
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AgriaSCV", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
}
void gf_APCisinCampConstrucionBackup2 (region lp_campRegion, int lp_aIPlayerID, int lp_campsPassedIndex, point lp_parkPoint, point lp_campPointDropPod, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, bool lp_turretYesNo, point lp_turretPoint, bool lp_customStructureYesNo, string lp_customStructureType, point lp_customStructurePoint, trigger lp_deadCampTrigger, unitgroup lp_structuresUnitGroup) {
    string auto5863E3B5_val;
    int autoE5E359B6_n;
    int autoE5E359B6_i;
    string autoFFDEA4AD_val;
    string auto297A4BBB_val;
    // Variable Declarations
    unitgroup lv_localUnitGroup;
    unit lv_randomHut;
    unit lv_sCVUnit;
    unit lv_bunkerUnit;
    unit lv_supply1Unit;
    unit lv_supply2Unit;
    unit lv_factoryUnit;
    unit lv_turretUnit;
    actor lv_bunkerModel;
    actor lv_supply1Model;
    actor lv_supply2Model;
    actor lv_turretModel;
    actor lv_customStructureModel;
    // Variable Initialization
    lv_localUnitGroup = UnitGroupEmpty();
    // Implementation
    libNtve_gf_CreateModelAtPoint("BunkerPlacement", lp_bunkerPoint);
    lv_bunkerModel = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint1);
    lv_supply1Model = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint2);
    lv_supply2Model = libNtve_gf_ActorLastCreated();
    if ((lp_turretYesNo == true)) {
        libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", lp_turretPoint);
        lv_turretModel = libNtve_gf_ActorLastCreated();
    }
    if ((lp_customStructureYesNo == true)) {
        auto5863E3B5_val = lp_customStructureType;
        if (auto5863E3B5_val == "Barracks") {
            libNtve_gf_CreateModelAtPoint("BarracksPlacement", lp_bunkerPoint);
            lv_customStructureModel = libNtve_gf_ActorLastCreated();
        }
        else if (auto5863E3B5_val == "Factory") {
            libNtve_gf_CreateModelAtPoint("FactoryPlacement", lp_bunkerPoint);
            lv_customStructureModel = libNtve_gf_ActorLastCreated();
        }
        else {
        }
    }
    lv_localUnitGroup = lp_structuresUnitGroup;
    gv_aPCUnitIsInCamp = 1;
    if ((UnitIsAlive(gv_aPCUnit) == true)) {
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        while (!((UnitGroupCount(UnitGroup(null, lp_aIPlayerID, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        gv_campConstructionCompleted = 0;
        if ((UnitIsAlive(gv_aPCUnit) == true)) {
            UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("ColonistTransportTransport", 1)), c_orderQueueAddToEnd);
            if ((UnitIsAlive(gv_aPCUnit) == true)) {
                while (!((UnitGroupCount(UnitCargoGroup(gv_aPCUnit), c_unitCountAlive) == 0))) {
                    Wait(1.0, c_timeGame);
                }
                Wait(1.0, c_timeGame);
                autoE5E359B6_n = UnitGroupCount(gv_colonistsOnRoute, c_unitCountAlive);
                for (autoE5E359B6_i = 1; autoE5E359B6_i <= autoE5E359B6_n; autoE5E359B6_i += 1) {
                    UnitGroupLoopBegin(gv_colonistsOnRoute);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        lv_randomHut = UnitGroupRandomUnit(UnitGroup("NovaColonistHut", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_randomHut), c_orderQueueAddToEnd);
                    }
                    UnitGroupLoopEnd();
                }
                UnitGroupLoopBegin(UnitGroup(null, 5, lp_campRegion, UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
                }
                UnitGroupLoopEnd();
                Wait(1.0, c_timeGame);
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_parkPoint), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                gv_lastAPCOrder = null;
                gv_aPCUnit = null;
                gv_aPCisOnRoute = 0;
                gv_colonistsOnRoute = UnitGroupEmpty();
                lv_sCVUnit = UnitFromId(1063682192);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
                lv_supply1Unit = UnitLastCreated();
                libNtve_gf_KillModel(lv_supply1Model);
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_supply1Unit), c_orderQueueReplace);
                while (!(((UnitIsAlive(lv_supply1Unit) == false) || ((UnitIsAlive(lv_supply1Unit) == true) && (UnitFilterMatch(lv_supply1Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
                lv_supply2Unit = UnitLastCreated();
                libNtve_gf_KillModel(lv_supply2Model);
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_supply2Unit), c_orderQueueReplace);
                while (!(((UnitIsAlive(lv_supply2Unit) == false) || ((UnitIsAlive(lv_supply2Unit) == true) && (UnitFilterMatch(lv_supply2Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
                lv_bunkerUnit = UnitLastCreated();
                libNtve_gf_KillModel(lv_bunkerModel);
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                Wait(2.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                while (!(((UnitIsAlive(lv_bunkerUnit) == false) || ((UnitIsAlive(lv_bunkerUnit) == true) && (UnitFilterMatch(lv_bunkerUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                    Wait(1.0, c_timeGame);
                }
                UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueAddToEnd);
                }
                UnitGroupLoopEnd();
                if ((lp_turretYesNo == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turretPoint);
                    Wait(2.0, c_timeGame);
                    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turretPoint);
                    lv_turretUnit = UnitLastCreated();
                    libNtve_gf_KillModel(lv_turretModel);
                    UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                    UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueAddToEnd);
                }
                if ((lp_customStructureYesNo == true)) {
                    if ((lp_turretYesNo == true)) {
                        while (!(((UnitIsAlive(lv_turretUnit) == false) || ((UnitIsAlive(lv_turretUnit) == true) && (UnitFilterMatch(lv_turretUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))))) {
                            Wait(1.0, c_timeGame);
                        }
                        auto297A4BBB_val = lp_customStructureType;
                        if (auto297A4BBB_val == "Barracks") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            Wait(3.0, c_timeGame);
                            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else if (auto297A4BBB_val == "Factory") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            Wait(3.0, c_timeGame);
                            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else {
                        }
                    }
                    else {
                        while (!((UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
                            Wait(1.0, c_timeGame);
                        }
                        autoFFDEA4AD_val = lp_customStructureType;
                        if (autoFFDEA4AD_val == "Barracks") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else if (autoFFDEA4AD_val == "Factory") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            libNtve_gf_KillModel(lv_customStructureModel);
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else {
                        }
                    }
                }
                lv_sCVUnit = null;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                Wait(2.0, c_timeGame);
                UnitKill(UnitLastCreated());
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AgriaSCV", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                gv_campConstructionCompleted = 1;
            }
        }
        gv_capturedCamps += 1;
        gv_campsPassed[lp_campsPassedIndex] = 1;
        while (!((gv_campConstructionCompleted == 1))) {
            Wait(1.0, c_timeGame);
        }
        TriggerExecute(gt_ObjectivePrimaryObjectivesCampCapturedUpdate, true, true);
    }
}
void gf_APCisinCampConstrucionBackup (region lp_campRegion, int lp_aIPlayerID, int lp_campsPassedIndex, point lp_parkPoint, point lp_campPointDropPod, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, bool lp_turretYesNo, point lp_turretPoint, bool lp_customStructureYesNo, string lp_customStructureType, point lp_customStructurePoint, trigger lp_deadCampTrigger, unitgroup lp_structuresUnitGroup) {
    int autoE7E00BBD_n;
    int autoE7E00BBD_i;
    string auto777CAD56_val;
    string autoB1566A8D_val;
    // Variable Declarations
    unitgroup lv_localUnitGroup;
    unit lv_randomHut;
    unit lv_sCVUnit;
    unit lv_bunkerUnit;
    unit lv_supply1Unit;
    unit lv_supply2Unit;
    unit lv_factoryUnit;
    unit lv_turretUnit;
    // Variable Initialization
    lv_localUnitGroup = UnitGroupEmpty();
    // Implementation
    lv_localUnitGroup = lp_structuresUnitGroup;
    gv_aPCUnitIsInCamp = 1;
    if ((UnitIsAlive(gv_aPCUnit) == true)) {
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        while (!((UnitGroupCount(UnitGroup(null, lp_aIPlayerID, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        gv_campConstructionCompleted = 0;
        if ((UnitIsAlive(gv_aPCUnit) == true)) {
            UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("ColonistTransportTransport", 1)), c_orderQueueAddToEnd);
            if ((UnitIsAlive(gv_aPCUnit) == true)) {
                while (!((UnitGroupCount(UnitCargoGroup(gv_aPCUnit), c_unitCountAlive) == 0))) {
                    Wait(1.0, c_timeGame);
                }
                Wait(1.0, c_timeGame);
                autoE7E00BBD_n = UnitGroupCount(gv_colonistsOnRoute, c_unitCountAlive);
                for (autoE7E00BBD_i = 1; autoE7E00BBD_i <= autoE7E00BBD_n; autoE7E00BBD_i += 1) {
                    UnitGroupLoopBegin(gv_colonistsOnRoute);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        lv_randomHut = UnitGroupRandomUnit(UnitGroup("NovaColonistHut", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_randomHut), c_orderQueueAddToEnd);
                    }
                    UnitGroupLoopEnd();
                }
                UnitGroupLoopBegin(UnitGroup(null, 5, lp_campRegion, UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
                    UnitGroupAdd(lv_localUnitGroup, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                Wait(2.0, c_timeGame);
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_parkPoint), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_aPCUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                gv_lastAPCOrder = null;
                gv_aPCUnit = null;
                gv_aPCisOnRoute = 0;
                gv_colonistsOnRoute = UnitGroupEmpty();
                lv_sCVUnit = UnitFromId(1063682192);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
                Wait(3.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
                lv_supply1Unit = UnitLastCreated();
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_supply1Unit), c_orderQueueReplace);
                while (!((UnitIsAlive(lv_supply1Unit) == true) && (UnitFilterMatch(lv_supply1Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
                Wait(3.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
                lv_supply2Unit = UnitLastCreated();
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_supply2Unit), c_orderQueueReplace);
                while (!((UnitIsAlive(lv_supply2Unit) == true) && (UnitFilterMatch(lv_supply2Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
                Wait(3.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
                lv_bunkerUnit = UnitLastCreated();
                UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                Wait(3.0, c_timeGame);
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                while (!((UnitIsAlive(lv_bunkerUnit) == true) && (UnitFilterMatch(lv_bunkerUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
                    Wait(1.0, c_timeGame);
                }
                UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueAddToEnd);
                }
                UnitGroupLoopEnd();
                if ((lp_turretYesNo == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turretPoint);
                    Wait(3.0, c_timeGame);
                    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turretPoint);
                    lv_turretUnit = UnitLastCreated();
                    UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
                    UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueAddToEnd);
                }
                if ((lp_customStructureYesNo == true)) {
                    if ((lp_turretYesNo == true)) {
                        while (!((UnitIsAlive(lv_turretUnit) == true) && (UnitFilterMatch(lv_turretUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
                            Wait(1.0, c_timeGame);
                        }
                        autoB1566A8D_val = lp_customStructureType;
                        if (autoB1566A8D_val == "Barracks") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            Wait(3.0, c_timeGame);
                            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else if (autoB1566A8D_val == "Factory") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            Wait(3.0, c_timeGame);
                            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitRemove(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else {
                        }
                    }
                    else {
                        while (!((UnitGroupHasUnit(UnitGroupIdle(5, false), lv_sCVUnit) == true))) {
                            Wait(1.0, c_timeGame);
                        }
                        auto777CAD56_val = lp_customStructureType;
                        if (auto777CAD56_val == "Barracks") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Barracks", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else if (auto777CAD56_val == "Factory") {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Factory", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_customStructurePoint);
                            lv_factoryUnit = UnitLastCreated();
                            UnitGroupAdd(lv_localUnitGroup, UnitLastCreated());
                            UnitSetState(lv_factoryUnit, c_unitStateTargetable, false);
                            UnitIssueOrder(lv_sCVUnit, OrderTargetingUnit(null, lv_factoryUnit), c_orderQueueAddToEnd);
                        }
                        else {
                        }
                    }
                }
                lv_sCVUnit = null;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                Wait(2.0, c_timeGame);
                UnitKill(UnitLastCreated());
                UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AgriaSCV", c_unitCreateIgnorePlacement, 5, lp_campPointDropPod);
                gv_campConstructionCompleted = 1;
            }
        }
        gv_capturedCamps += 1;
        gv_campsPassed[lp_campsPassedIndex] = 1;
        while (!((gv_campConstructionCompleted == 1))) {
            Wait(1.0, c_timeGame);
        }
        TriggerExecute(gt_ObjectivePrimaryObjectivesCampCapturedUpdate, true, true);
    }
    else {
        TriggerExecute(lp_deadCampTrigger, true, false);
    }
}
void gf_BonusCampBuildBackup (bool lp_buildSupplyYesNo, bool lp_buildTurretYesNo, region lp_campRegion, region lp_bonusRegion, point lp_supplyPoint1, point lp_supplyPoint2, point lp_bunkerPoint, point lp_turret, point lp_bonusMarines, int lp_aIPlayerID, bool lp_bigCamp) {
    // Variable Declarations
    int lv_bonusPing;
    unit lv_bunkerUnit;
    unit lv_supply1Unit;
    unit lv_supply2Unit;
    unit lv_turretUnit;
    unit lv_bonusSCVUnit;
    actor lv_bunkerModel;
    actor lv_supply1Model;
    actor lv_supply2Model;
    actor lv_turretModel;
    // Variable Initialization
    lv_bonusPing = c_invalidPingId;
    // Implementation
    lv_bonusSCVUnit = UnitFromId(1607957529);
    if ((UnitIsAlive(lv_bonusSCVUnit) == true)) {
        libNtve_gf_CreateModelAtPoint("BunkerPlacement", lp_bunkerPoint);
        lv_bunkerModel = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint1);
        lv_supply1Model = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("SupplyDepotPlacement", lp_supplyPoint2);
        lv_supply2Model = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", lp_turret);
        lv_turretModel = libNtve_gf_ActorLastCreated();
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(lp_bonusRegion), 3.0, Color(100.00, 0.00, 0.00));
        while (!((UnitGroupCount(UnitGroup(null, lp_aIPlayerID, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        if ((lp_buildSupplyYesNo == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint1);
            lv_supply1Unit = UnitLastCreated();
            libNtve_gf_KillModel(lv_supply1Model);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_supply1Unit), c_orderQueueReplace);
            while (!((UnitIsAlive(lv_supply1Unit) == true) && (UnitFilterMatch(lv_supply1Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))) {
                Wait(1.0, c_timeGame);
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_campRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_supplyPoint2);
            lv_supply2Unit = UnitLastCreated();
            libNtve_gf_KillModel(lv_supply2Model);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_supply2Unit), c_orderQueueReplace);
            while (!((UnitIsAlive(lv_supply2Unit) == true) && (UnitFilterMatch(lv_supply2Unit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))) {
                Wait(1.0, c_timeGame);
            }
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
        Wait(3.0, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_bunkerPoint);
        lv_bunkerUnit = UnitLastCreated();
        libNtve_gf_KillModel(lv_bunkerModel);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        while (!((UnitIsAlive(lv_bunkerUnit) == true) && (UnitFilterMatch(lv_bunkerUnit, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), lv_bonusSCVUnit) == true))) {
            Wait(1.0, c_timeGame);
        }
        UnitGroupLoopBegin(UnitGroup("Marine", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunkerUnit), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        if ((lp_buildTurretYesNo == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, lp_turret);
            Wait(2.0, c_timeGame);
            UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, lp_bonusRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, lp_turret);
            lv_turretUnit = UnitLastCreated();
            libNtve_gf_KillModel(lv_turretModel);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitIssueOrder(lv_bonusSCVUnit, OrderTargetingUnit(null, lv_turretUnit), c_orderQueueReplace);
        }
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AgriaSCV", c_unitCreateIgnorePlacement, 5, lp_bonusMarines);
}
void gf_AddHybridstoAttackWave (fixed lp_gameTime) {
    int autoB6C02E7A_val;
    int auto7132443D_val;
    int auto7BA58470_val;
    int auto53AD99B0_val;
    int auto7A31A22B_val;
    int auto362DE705_val;
    int auto46C85209_val;
    int auto26DEC54A_val;
    int autoD10C2C6D_val;
    int auto9026493C_val;
    int auto2E0F33E8_val;
    int auto59DC76F8_val;
    int autoE1ED1D04_val;
    int auto359BFC6F_val;
    int auto18EEC50A_val;
    int autoF5E149F4_val;
    int auto1B937541_val;
    int auto221A8B61_val;
    int auto262A7548_val;
    int autoFBA43B28_val;
    // Implementation
    if (((lp_gameTime >= (7*60)) && (lp_gameTime <= (9*60)))) {
        autoB6C02E7A_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (autoB6C02E7A_val == 1) {
        }
        else {
        }
        auto7132443D_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto7132443D_val == 2) {
        }
        else {
        }
        auto7BA58470_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto7BA58470_val == 3) {
        }
        else {
        }
        auto53AD99B0_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto53AD99B0_val == 4) {
            TriggerQueueEnter();
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
        }
        else {
        }
    }
    if (((lp_gameTime >= (9*60)) && (lp_gameTime <= (15*60)))) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        auto7A31A22B_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto7A31A22B_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
        }
        else {
        }
        auto362DE705_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto362DE705_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
        }
        else {
        }
        auto46C85209_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto46C85209_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
        }
        else {
        }
        auto26DEC54A_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto26DEC54A_val == 4) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(2, "HybridDestroyer");
        }
        else {
        }
    }
    if (((lp_gameTime >= (15*60)) && (lp_gameTime <= (19*60)))) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        autoD10C2C6D_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (autoD10C2C6D_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
        }
        else {
        }
        auto9026493C_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto9026493C_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(2, "HybridDestroyer");
        }
        else {
        }
        auto2E0F33E8_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto2E0F33E8_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(2, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(2, "HybridDestroyer");
        }
        else {
        }
        auto59DC76F8_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto59DC76F8_val == 4) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(2, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
        }
        else {
        }
    }
    if (((lp_gameTime >= (19*60)) && (lp_gameTime <= (23*60)))) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        autoE1ED1D04_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (autoE1ED1D04_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
        }
        else {
        }
        auto359BFC6F_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto359BFC6F_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(2, "HybridDestroyer");
        }
        else {
        }
        auto18EEC50A_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto18EEC50A_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(2, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
        }
        else {
        }
        autoF5E149F4_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (autoF5E149F4_val == 4) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridBehemoth");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
        }
        else {
        }
    }
    if (((lp_gameTime >= (23*60)) && (lp_gameTime <= (40*60)))) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        auto1B937541_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto1B937541_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
        }
        else {
        }
        auto221A8B61_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto221A8B61_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridReaver");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
        }
        else {
        }
        auto262A7548_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (auto262A7548_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridBehemoth");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
        }
        else {
        }
        autoFBA43B28_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
        if (autoFBA43B28_val == 4) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, gf_AttackWaveSpawn());
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridBehemoth");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDestroyer");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
        }
        else {
        }
    }
}
point gf_AttackWaveSpawn () {
    int auto9A2E02E3_ae;
    int auto9A2E02E3_ai;
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;
    // Variable Initialization
    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    auto9A2E02E3_ae = 10;
    auto9A2E02E3_ai = 1;
    lv_spawnLocationIter = 1;
    for ( ; ( (auto9A2E02E3_ai >= 0 && lv_spawnLocationIter <= auto9A2E02E3_ae) || (auto9A2E02E3_ai <= 0 && lv_spawnLocationIter >= auto9A2E02E3_ae) ) ; lv_spawnLocationIter += auto9A2E02E3_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
        }
    }
    return RegionGetCenter(RegionFromId(9));
}
trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}
bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    playergroup auto0B258D10_g;
    int auto0B258D10_p;
    string auto834F8A5E_val;
    // Variable Declarations
    int lv_indexPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto0B258D10_g = libCOMI_gf_HumanPlayers();
    auto0B258D10_p = 1;
    for ( ; auto0B258D10_p <= PlayerGroupCount(auto0B258D10_g) ; auto0B258D10_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto0B258D10_g, auto0B258D10_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto0B258D10_g, auto0B258D10_p);
        auto834F8A5E_val = GameAttributePlayerValue("[bnet:local/0.0/353878]1", lv_indexPlayer);
        if (auto834F8A5E_val == "0003") {
            PlayerSetCommander(lv_indexPlayer, "Artanis");
        }
        else if (auto834F8A5E_val == "0002") {
            PlayerSetCommander(lv_indexPlayer, "Kerrigan");
        }
        else if (auto834F8A5E_val == "0001") {
            PlayerSetCommander(lv_indexPlayer, "Raynor");
        }
        else {
            if ((lv_indexPlayer == 1)) {
                PlayerSetCommander(lv_indexPlayer, "Raynor");
            }
            else {
                PlayerSetCommander(lv_indexPlayer, "Artanis");
            }
        }
    }
    PlayerSetCommander(5, null);
    libCOMI_gf_EnableArcadeContestMode();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Player5SetCommanderandother, false, false);
    TriggerExecute(gt_Player5AddAllHutstoUnitGroups, false, false);
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    playergroup autoE0EF2853_g;
    int autoE0EF2853_p;
    playergroup autoB969537F_g;
    int autoB969537F_p;
    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libCOMI_gf_SetAllianceCoop(PlayerGroupLoopCurrent(), 5, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetPlayerGroupAlliance(libCOMI_gf_HumanPlayers(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupLoopBegin(gv_enemyGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libCOMI_gf_SetAllianceCoop(PlayerGroupLoopCurrent(), 5, libNtve_ge_AllianceSetting_Enemy);
    }
    PlayerGroupLoopEnd();
    autoE0EF2853_g = gv_enemyGroup; 
    autoE0EF2853_p = 1;
    for ( ; autoE0EF2853_p <= PlayerGroupCount(autoE0EF2853_g) ; autoE0EF2853_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p)) ) {
        lv_playerIterEnemy = PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p);
        PlayerSetState(lv_playerIterEnemy, c_playerStateMineralCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(lv_playerIterEnemy, libCOMI_gf_EnemyPlayerColor(), true);
        autoB969537F_g = libCOMI_gf_HumanPlayers();
        autoB969537F_p = 1;
        for ( ; autoB969537F_p <= PlayerGroupCount(autoB969537F_g) ; autoB969537F_p += BoolToInt(lv_playerIterAlly == PlayerGroupPlayer(autoB969537F_g, autoB969537F_p)) ) {
            lv_playerIterAlly = PlayerGroupPlayer(autoB969537F_g, autoB969537F_p);
            libNtve_gf_SetAlliance(lv_playerIterAlly, lv_playerIterEnemy, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    PlayerSetAlliance(gv_pLAYER_03_ENEMY, c_allianceIdPower, gv_pLAYER_04_ENEMY, true);
    PlayerSetAlliance(gv_pLAYER_04_ENEMY, c_allianceIdPower, gv_pLAYER_03_ENEMY, true);
    PlayerSetState(5, c_playerStateMineralCostIgnored, true);
    PlayerSetState(5, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(5, c_playerStateFoodIgnored, true);
    PlayerSetColorIndex(5, 0, true);
    libCOMI_gf_SetAlliedCommandersstartingResources();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Init04Technology, true, false);
    libCOMI_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    libCOMI_gf_PlayMapIntroZoom(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(5, "AgriaColonistRaiseStructuresFast", 1);
    libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_redBeacon = UnitFromId(967723367);
    UnitSetInfoText(gv_redBeacon, StringExternal("Param/Value/A27E8321"), StringExternal("Param/Value/DC13C329"), StringToText(""));
    gv_tealBeacon = UnitFromId(865012866);
    UnitSetInfoText(gv_tealBeacon, StringExternal("Param/Value/DBC179E0"), StringExternal("Param/Value/847FFDDB"), StringToText(""));
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_Camp1SetRoute, true, true);
    TriggerExecute(gt_Camp2SetRoute, true, true);
    TriggerExecute(gt_Camp3SetRoute, true, true);
    TriggerExecute(gt_Camp4SetRoute, true, true);
    TriggerExecute(gt_Camp5SetRoute, true, true);
    TriggerExecute(gt_Camp6SetRoute, true, true);
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 3, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_allEnemyStructures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 4, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_allEnemyStructures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    GameTimeOfDaySet("08:00:00");
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(22), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(22), true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
        UnitRemove(UnitFromId(211));
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
        UnitRemove(UnitFromId(134));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/068743D5"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/187E0E6E"), null, PlayerStartLocation(gv_pLAYER_02_USER));
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_HansonFirstTransmission, true, true);
    TriggerExecute(gt_ObjectiveSixCamps, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveDoNotLoose2Camps, true, true);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC is Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_APCisUnderAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_aPCisOnRoute == 1) && (EventUnit() == gv_aPCUnit)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_underAttackAttention == false)) {
        TransmissionClearAll();
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TriggerExecute(gt_HansonAPCIsUnderAttack, true, false);
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
        gv_underAttackAttention = true;
        Wait(20.0, c_timeGame);
        gv_underAttackAttention = false;
    }
    else {
        TriggerStop(TriggerGetCurrent());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCisUnderAttack_Init () {
    gt_APCisUnderAttack = TriggerCreate("gt_APCisUnderAttack_Func");
    TriggerAddEventUnitDamaged(gt_APCisUnderAttack, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Dies
//--------------------------------------------------------------------------------------------------
bool gt_APCDies_Func (bool testConds, bool runActions) {
    int autoE3BCB890_val;
    // Conditions
    if (testConds) {
        if (!((gv_aPCUnit != null))) {
            return false;
        }
        if (!((EventUnit() == gv_aPCUnit))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(gv_colonistsOnRoute);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PingDestroy(gv_aPCPing);
    gv_aPCPing = c_invalidPingId;
    gv_deadCampsCount += 1;
    libCOMI_gf_DestroyPingCoop(gv_campPing);
    gv_campPing = c_invalidPingId;
    TransmissionClearAll();
    TriggerExecute(gt_HansonAPCIsDead, true, false);
    TriggerExecute(gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate, true, true);
    if ((gv_deadCampsCount >= 2)) {
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, true);
    }
    else {
        autoE3BCB890_val = gv_aPCNumberofRoute;
        if (autoE3BCB890_val == 1) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(1023496499), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EBEC9A60"));
            gv_deadCampsArray[0] = 1;
            gv_campConstructionCompleted = 1;
            TriggerEnable(gt_Camp1Bonus, false);
            TriggerEnable(gt_Camp1PeriodicRoute, false);
            Wait((1.5*60), c_timeGame);
            TriggerExecute(gt_APCReadyCamp2, true, false);
        }
        else if (autoE3BCB890_val == 2) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(1974010391), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8B7C19DE"));
            gv_deadCampsArray[1] = 1;
            gv_campConstructionCompleted = 1;
            TriggerEnable(gt_Camp2Bonus, false);
            TriggerEnable(gt_Camp2PeriodicRoute, false);
            TriggerExecute(gt_ObjectiveCreateSecondary, true, false);
            TriggerSendEvent("SensorTower1");
            Wait((1.5*60), c_timeGame);
            TriggerExecute(gt_APCReadyCamp3, true, false);
        }
        else if (autoE3BCB890_val == 3) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(825629526), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A05F71B0"));
            gv_deadCampsArray[2] = 1;
            gv_campConstructionCompleted = 1;
            TriggerEnable(gt_Camp3Bonus, false);
            TriggerEnable(gt_Camp3PeriodicRoute, false);
            TriggerSendEvent("SensorTower2");
            Wait((1.5*60), c_timeGame);
            TriggerExecute(gt_APCReadyCamp4, true, false);
        }
        else if (autoE3BCB890_val == 4) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(1937460410), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/68372093"));
            gv_deadCampsArray[3] = 1;
            gv_campConstructionCompleted = 1;
            TriggerEnable(gt_Camp4Bonus, false);
            TriggerEnable(gt_Camp4PeriodicRoute, false);
            Wait((1.5*60), c_timeGame);
            TriggerExecute(gt_APCReadyCamp5, true, false);
        }
        else if (autoE3BCB890_val == 5) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(1605379981), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6763DA9F"));
            gv_deadCampsArray[4] = 1;
            gv_campConstructionCompleted = 1;
            TriggerEnable(gt_Camp5Bonus, false);
            TriggerEnable(gt_Camp5PeriodicRoute, false);
            Wait((1.5*60), c_timeGame);
            TriggerExecute(gt_APCReadyCamp6, true, false);
        }
        else if (autoE3BCB890_val == 6) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(81606294), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/56F0217E"));
            gv_campConstructionCompleted = 1;
            TriggerEnable(gt_Camp6PeriodicRoute, false);
            TriggerExecute(gt_VictorySequence, true, false);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCDies_Init () {
    gt_APCDies = TriggerCreate("gt_APCDies_Func");
    TriggerAddEventUnitDied(gt_APCDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Route Arrow Pings 1
//--------------------------------------------------------------------------------------------------
bool gt_APCRouteArrowPings1_Func (bool testConds, bool runActions) {
    int autoB787842E_ae;
    int autoB787842E_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    autoB787842E_ae = gv_maxIndexOfArray;
    autoB787842E_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB787842E_ai >= 0 && lv_i <= autoB787842E_ae) || (autoB787842E_ai <= 0 && lv_i >= autoB787842E_ae) ) ; lv_i += autoB787842E_ai ) {
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute1Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_01_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute1Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_02_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCRouteArrowPings1_Init () {
    gt_APCRouteArrowPings1 = TriggerCreate("gt_APCRouteArrowPings1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Route Arrow Pings 2
//--------------------------------------------------------------------------------------------------
bool gt_APCRouteArrowPings2_Func (bool testConds, bool runActions) {
    int auto2602237C_ae;
    int auto2602237C_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto2602237C_ae = gv_maxIndexOfArray;
    auto2602237C_ai = 1;
    lv_i = 1;
    for ( ; ( (auto2602237C_ai >= 0 && lv_i <= auto2602237C_ae) || (auto2602237C_ai <= 0 && lv_i >= auto2602237C_ae) ) ; lv_i += auto2602237C_ai ) {
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute2Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_01_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute2Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_02_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCRouteArrowPings2_Init () {
    gt_APCRouteArrowPings2 = TriggerCreate("gt_APCRouteArrowPings2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Route Arrow Pings 3
//--------------------------------------------------------------------------------------------------
bool gt_APCRouteArrowPings3_Func (bool testConds, bool runActions) {
    int auto18D92C65_ae;
    int auto18D92C65_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto18D92C65_ae = gv_maxIndexOfArray;
    auto18D92C65_ai = 1;
    lv_i = 1;
    for ( ; ( (auto18D92C65_ai >= 0 && lv_i <= auto18D92C65_ae) || (auto18D92C65_ai <= 0 && lv_i >= auto18D92C65_ae) ) ; lv_i += auto18D92C65_ai ) {
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute3Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_01_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute3Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_02_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCRouteArrowPings3_Init () {
    gt_APCRouteArrowPings3 = TriggerCreate("gt_APCRouteArrowPings3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Route Arrow Pings 4
//--------------------------------------------------------------------------------------------------
bool gt_APCRouteArrowPings4_Func (bool testConds, bool runActions) {
    int autoC5042049_ae;
    int autoC5042049_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    autoC5042049_ae = gv_maxIndexOfArray;
    autoC5042049_ai = 1;
    lv_i = 1;
    for ( ; ( (autoC5042049_ai >= 0 && lv_i <= autoC5042049_ae) || (autoC5042049_ai <= 0 && lv_i >= autoC5042049_ae) ) ; lv_i += autoC5042049_ai ) {
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute4Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_01_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute4Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_02_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCRouteArrowPings4_Init () {
    gt_APCRouteArrowPings4 = TriggerCreate("gt_APCRouteArrowPings4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Route Arrow Pings 5
//--------------------------------------------------------------------------------------------------
bool gt_APCRouteArrowPings5_Func (bool testConds, bool runActions) {
    int autoCF859845_ae;
    int autoCF859845_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    autoCF859845_ae = gv_maxIndexOfArray;
    autoCF859845_ai = 1;
    lv_i = 1;
    for ( ; ( (autoCF859845_ai >= 0 && lv_i <= autoCF859845_ae) || (autoCF859845_ai <= 0 && lv_i >= autoCF859845_ae) ) ; lv_i += autoCF859845_ai ) {
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute5Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_01_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute5Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 6.0, gv_pLAYER_02_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCRouteArrowPings5_Init () {
    gt_APCRouteArrowPings5 = TriggerCreate("gt_APCRouteArrowPings5_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Route Arrow Pings 6
//--------------------------------------------------------------------------------------------------
bool gt_APCRouteArrowPings6_Func (bool testConds, bool runActions) {
    int auto491171F5_ae;
    int auto491171F5_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto491171F5_ae = gv_maxIndexOfArray;
    auto491171F5_ai = 1;
    lv_i = 1;
    for ( ; ( (auto491171F5_ai >= 0 && lv_i <= auto491171F5_ae) || (auto491171F5_ai <= 0 && lv_i >= auto491171F5_ae) ) ; lv_i += auto491171F5_ai ) {
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute6Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 7.0, gv_pLAYER_01_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", gv_colonistsRoute6Array[lv_i], ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 7.0, gv_pLAYER_02_USER);
        PingSetScale(PingLastCreated(), 0.5);
        Wait(0.1, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCRouteArrowPings6_Init () {
    gt_APCRouteArrowPings6 = TriggerCreate("gt_APCRouteArrowPings6_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 1 - Set Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp1SetRoute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_colonistsRoute1Array[0] = PointFromId(1300911115);
    gv_colonistsRoute1Array[1] = PointFromId(99051580);
    gv_colonistsRoute1Array[2] = PointFromId(453506010);
    gv_colonistsRoute1Array[3] = PointFromId(978650944);
    gv_colonistsRoute1Array[4] = PointFromId(649419686);
    gv_colonistsRoute1Array[5] = PointFromId(834153135);
    gv_colonistsRoute1Array[6] = PointFromId(67719674);
    gv_colonistsRoute1Array[7] = PointFromId(2144643889);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp1SetRoute_Init () {
    gt_Camp1SetRoute = TriggerCreate("gt_Camp1SetRoute_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 2 - Set Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp2SetRoute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_colonistsRoute2Array[0] = PointFromId(655770243);
    gv_colonistsRoute2Array[1] = PointFromId(559605488);
    gv_colonistsRoute2Array[2] = PointFromId(1823569281);
    gv_colonistsRoute2Array[3] = PointFromId(1687112247);
    gv_colonistsRoute2Array[4] = PointFromId(601693758);
    gv_colonistsRoute2Array[5] = PointFromId(54462492);
    gv_colonistsRoute2Array[6] = PointFromId(117875691);
    gv_colonistsRoute2Array[7] = PointFromId(78637138);
    gv_colonistsRoute2Array[8] = PointFromId(718958655);
    gv_colonistsRoute2Array[9] = PointFromId(283222198);
    gv_colonistsRoute2Array[10] = PointFromId(1823859628);
    gv_colonistsRoute2Array[11] = PointFromId(13229266);
    gv_colonistsRoute2Array[12] = PointFromId(748233872);
    gv_colonistsRoute2Array[13] = PointFromId(18556105);
    gv_colonistsRoute2Array[14] = PointFromId(1638019837);
    gv_colonistsRoute2Array[15] = PointFromId(1321417325);
    gv_colonistsRoute2Array[16] = PointFromId(460474743);
    gv_colonistsRoute2Array[17] = PointFromId(1426506653);
    gv_colonistsRoute2Array[18] = PointFromId(944498727);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp2SetRoute_Init () {
    gt_Camp2SetRoute = TriggerCreate("gt_Camp2SetRoute_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 3 - Set Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp3SetRoute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_colonistsRoute3Array[0] = PointFromId(1207639004);
    gv_colonistsRoute3Array[1] = PointFromId(2142031013);
    gv_colonistsRoute3Array[2] = PointFromId(1052120914);
    gv_colonistsRoute3Array[3] = PointFromId(569064504);
    gv_colonistsRoute3Array[4] = PointFromId(90904990);
    gv_colonistsRoute3Array[5] = PointFromId(1797589141);
    gv_colonistsRoute3Array[6] = PointFromId(800977863);
    gv_colonistsRoute3Array[7] = PointFromId(1092398499);
    gv_colonistsRoute3Array[8] = PointFromId(1176749403);
    gv_colonistsRoute3Array[9] = PointFromId(1384981265);
    gv_colonistsRoute3Array[10] = PointFromId(1819569860);
    gv_colonistsRoute3Array[11] = PointFromId(1508551846);
    gv_colonistsRoute3Array[12] = PointFromId(826187880);
    gv_colonistsRoute3Array[13] = PointFromId(1252960282);
    gv_colonistsRoute3Array[14] = PointFromId(1980449770);
    gv_colonistsRoute3Array[15] = PointFromId(1003541194);
    gv_colonistsRoute3Array[16] = PointFromId(1345241355);
    gv_colonistsRoute3Array[17] = PointFromId(351168195);
    gv_colonistsRoute3Array[18] = PointFromId(150735208);
    gv_colonistsRoute3Array[19] = PointFromId(1267128193);
    gv_colonistsRoute3Array[20] = PointFromId(1394771944);
    gv_colonistsRoute3Array[21] = PointFromId(1250446195);
    gv_colonistsRoute3Array[22] = PointFromId(264730842);
    gv_colonistsRoute3Array[23] = PointFromId(1036880490);
    gv_colonistsRoute3Array[24] = PointFromId(1045735223);
    gv_colonistsRoute3Array[25] = PointFromId(902138327);
    gv_colonistsRoute3Array[26] = PointFromId(495431434);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp3SetRoute_Init () {
    gt_Camp3SetRoute = TriggerCreate("gt_Camp3SetRoute_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 4 - Set Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp4SetRoute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_colonistsRoute4Array[0] = PointFromId(321816089);
    gv_colonistsRoute4Array[1] = PointFromId(416638455);
    gv_colonistsRoute4Array[2] = PointFromId(1382397079);
    gv_colonistsRoute4Array[3] = PointFromId(1415290977);
    gv_colonistsRoute4Array[4] = PointFromId(1153321175);
    gv_colonistsRoute4Array[5] = PointFromId(1028033729);
    gv_colonistsRoute4Array[6] = PointFromId(65246508);
    gv_colonistsRoute4Array[7] = PointFromId(1531722553);
    gv_colonistsRoute4Array[8] = PointFromId(916705782);
    gv_colonistsRoute4Array[9] = PointFromId(1514949406);
    gv_colonistsRoute4Array[10] = PointFromId(931174310);
    gv_colonistsRoute4Array[11] = PointFromId(660714526);
    gv_colonistsRoute4Array[12] = PointFromId(2093569682);
    gv_colonistsRoute4Array[13] = PointFromId(1463919553);
    gv_colonistsRoute4Array[14] = PointFromId(1810371026);
    gv_colonistsRoute4Array[15] = PointFromId(601059856);
    gv_colonistsRoute4Array[16] = PointFromId(1573157816);
    gv_colonistsRoute4Array[17] = PointFromId(1545334943);
    gv_colonistsRoute4Array[18] = PointFromId(750230558);
    gv_colonistsRoute4Array[19] = PointFromId(1441910675);
    gv_colonistsRoute4Array[20] = PointFromId(1968385585);
    gv_colonistsRoute4Array[21] = PointFromId(412849435);
    gv_colonistsRoute4Array[22] = PointFromId(1232528163);
    gv_colonistsRoute4Array[23] = PointFromId(891381671);
    gv_colonistsRoute4Array[24] = PointFromId(627930804);
    gv_colonistsRoute4Array[25] = PointFromId(543996827);
    gv_colonistsRoute4Array[26] = PointFromId(235656662);
    gv_colonistsRoute4Array[27] = PointFromId(1152910798);
    gv_colonistsRoute4Array[28] = PointFromId(1461629193);
    gv_colonistsRoute4Array[29] = PointFromId(1542432173);
    gv_colonistsRoute4Array[30] = PointFromId(648312519);
    gv_colonistsRoute4Array[31] = PointFromId(1027267203);
    gv_colonistsRoute4Array[32] = PointFromId(234509300);
    gv_colonistsRoute4Array[33] = PointFromId(1209364101);
    gv_colonistsRoute4Array[34] = PointFromId(716429969);
    gv_colonistsRoute4Array[35] = PointFromId(622197259);
    gv_colonistsRoute4Array[36] = PointFromId(939317351);
    gv_colonistsRoute4Array[37] = PointFromId(1055337468);
    gv_colonistsRoute4Array[38] = PointFromId(1589460952);
    gv_colonistsRoute4Array[39] = PointFromId(1271688676);
    gv_colonistsRoute4Array[40] = PointFromId(1589389023);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp4SetRoute_Init () {
    gt_Camp4SetRoute = TriggerCreate("gt_Camp4SetRoute_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 5 - Set Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp5SetRoute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_colonistsRoute5Array[0] = PointFromId(1192528376);
    gv_colonistsRoute5Array[1] = PointFromId(2094942041);
    gv_colonistsRoute5Array[2] = PointFromId(2087736119);
    gv_colonistsRoute5Array[3] = PointFromId(609249684);
    gv_colonistsRoute5Array[4] = PointFromId(793140595);
    gv_colonistsRoute5Array[5] = PointFromId(967932973);
    gv_colonistsRoute5Array[6] = PointFromId(2128263858);
    gv_colonistsRoute5Array[7] = PointFromId(595769192);
    gv_colonistsRoute5Array[8] = PointFromId(1097693258);
    gv_colonistsRoute5Array[9] = PointFromId(2138009440);
    gv_colonistsRoute5Array[10] = PointFromId(1696049975);
    gv_colonistsRoute5Array[11] = PointFromId(458660111);
    gv_colonistsRoute5Array[12] = PointFromId(1572909501);
    gv_colonistsRoute5Array[13] = PointFromId(1045026703);
    gv_colonistsRoute5Array[14] = PointFromId(266993990);
    gv_colonistsRoute5Array[15] = PointFromId(1503119904);
    gv_colonistsRoute5Array[16] = PointFromId(264254086);
    gv_colonistsRoute5Array[17] = PointFromId(185983337);
    gv_colonistsRoute5Array[18] = PointFromId(1841179576);
    gv_colonistsRoute5Array[19] = PointFromId(1624392934);
    gv_colonistsRoute5Array[20] = PointFromId(184191861);
    gv_colonistsRoute5Array[21] = PointFromId(640369256);
    gv_colonistsRoute5Array[22] = PointFromId(940879814);
    gv_colonistsRoute5Array[23] = PointFromId(1156010684);
    gv_colonistsRoute5Array[24] = PointFromId(760242399);
    gv_colonistsRoute5Array[25] = PointFromId(258661082);
    gv_colonistsRoute5Array[26] = PointFromId(2023268589);
    gv_colonistsRoute5Array[27] = PointFromId(1079039303);
    gv_colonistsRoute5Array[28] = PointFromId(227079227);
    gv_colonistsRoute5Array[29] = PointFromId(1788695653);
    gv_colonistsRoute5Array[30] = PointFromId(721630507);
    gv_colonistsRoute5Array[31] = PointFromId(410219641);
    gv_colonistsRoute5Array[32] = PointFromId(1897963911);
    gv_colonistsRoute5Array[33] = PointFromId(550008692);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp5SetRoute_Init () {
    gt_Camp5SetRoute = TriggerCreate("gt_Camp5SetRoute_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 6 - Set Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp6SetRoute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_colonistsRoute6Array[0] = PointFromId(378555967);
    gv_colonistsRoute6Array[1] = PointFromId(1114497996);
    gv_colonistsRoute6Array[2] = PointFromId(1980311946);
    gv_colonistsRoute6Array[3] = PointFromId(2051665538);
    gv_colonistsRoute6Array[4] = PointFromId(1498388628);
    gv_colonistsRoute6Array[5] = PointFromId(1803617474);
    gv_colonistsRoute6Array[6] = PointFromId(1396997716);
    gv_colonistsRoute6Array[7] = PointFromId(1547732169);
    gv_colonistsRoute6Array[8] = PointFromId(1262052388);
    gv_colonistsRoute6Array[9] = PointFromId(1889262036);
    gv_colonistsRoute6Array[10] = PointFromId(747417826);
    gv_colonistsRoute6Array[11] = PointFromId(1700217350);
    gv_colonistsRoute6Array[12] = PointFromId(893553995);
    gv_colonistsRoute6Array[13] = PointFromId(1898066582);
    gv_colonistsRoute6Array[14] = PointFromId(2143678184);
    gv_colonistsRoute6Array[15] = PointFromId(1203400063);
    gv_colonistsRoute6Array[16] = PointFromId(612568826);
    gv_colonistsRoute6Array[17] = PointFromId(832745168);
    gv_colonistsRoute6Array[18] = PointFromId(1879405761);
    gv_colonistsRoute6Array[19] = PointFromId(1336665273);
    gv_colonistsRoute6Array[20] = PointFromId(597860514);
    gv_colonistsRoute6Array[21] = PointFromId(583455031);
    gv_colonistsRoute6Array[22] = PointFromId(711717542);
    gv_colonistsRoute6Array[23] = PointFromId(309418834);
    gv_colonistsRoute6Array[24] = PointFromId(1671182537);
    gv_colonistsRoute6Array[25] = PointFromId(725855309);
    gv_colonistsRoute6Array[26] = PointFromId(500782664);
    gv_colonistsRoute6Array[27] = PointFromId(993015302);
    gv_colonistsRoute6Array[28] = PointFromId(128328118);
    gv_colonistsRoute6Array[29] = PointFromId(984827510);
    gv_colonistsRoute6Array[30] = PointFromId(457354210);
    gv_colonistsRoute6Array[31] = PointFromId(1334618997);
    gv_colonistsRoute6Array[32] = PointFromId(1149889001);
    gv_colonistsRoute6Array[33] = PointFromId(1891146406);
    gv_colonistsRoute6Array[34] = PointFromId(28009422);
    gv_colonistsRoute6Array[35] = PointFromId(293841549);
    gv_colonistsRoute6Array[36] = PointFromId(741718515);
    gv_colonistsRoute6Array[37] = PointFromId(1020602874);
    gv_colonistsRoute6Array[38] = PointFromId(241620075);
    gv_colonistsRoute6Array[39] = PointFromId(1736156490);
    gv_colonistsRoute6Array[40] = PointFromId(563537275);
    gv_colonistsRoute6Array[41] = PointFromId(1695520087);
    gv_colonistsRoute6Array[42] = PointFromId(366633218);
    gv_colonistsRoute6Array[43] = PointFromId(1839156083);
    gv_colonistsRoute6Array[44] = PointFromId(1951767343);
    gv_colonistsRoute6Array[45] = PointFromId(1537139600);
    gv_colonistsRoute6Array[46] = PointFromId(875510704);
    gv_colonistsRoute6Array[47] = PointFromId(12961339);
    gv_colonistsRoute6Array[48] = PointFromId(1711004335);
    gv_colonistsRoute6Array[49] = PointFromId(1001102771);
    gv_colonistsRoute6Array[50] = PointFromId(1995294176);
    gv_colonistsRoute6Array[51] = PointFromId(354821115);
    gv_colonistsRoute6Array[52] = PointFromId(38465482);
    gv_colonistsRoute6Array[53] = PointFromId(919290196);
    gv_colonistsRoute6Array[54] = PointFromId(1062974623);
    gv_colonistsRoute6Array[55] = PointFromId(1187954368);
    gv_colonistsRoute6Array[56] = PointFromId(16657693);
    gv_colonistsRoute6Array[57] = PointFromId(2068254767);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp6SetRoute_Init () {
    gt_Camp6SetRoute = TriggerCreate("gt_Camp6SetRoute_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Is Idle
//--------------------------------------------------------------------------------------------------
bool gt_APCIsIdle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroupIdle(5, false), gv_aPCUnit) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_lastAPCOrder != null)) {
        UnitIssueOrder(gv_aPCUnit, gv_lastAPCOrder, c_orderQueueReplace);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCIsIdle_Init () {
    gt_APCIsIdle = TriggerCreate("gt_APCIsIdle_Func");
    TriggerAddEventUnitBecomesIdle(gt_APCIsIdle, null, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Attack Waves to APC
//--------------------------------------------------------------------------------------------------
bool gt_SetUpAttackWavestoAPC_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(gv_aPCUnit) == true) && (gv_aPCisOnRoute == 1)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_AttackWaveAPC, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpAttackWavestoAPC_Init () {
    gt_SetUpAttackWavestoAPC = TriggerCreate("gt_SetUpAttackWavestoAPC_Func");
    TriggerAddEventGeneric(gt_SetUpAttackWavestoAPC, "APConRoute");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 5 Add All Huts to Unit Groups
//--------------------------------------------------------------------------------------------------
bool gt_Player5AddAllHutstoUnitGroups_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup("NovaColonistHut", 5, RegionFromId(10), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_camp1Structures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NovaColonistHut", 5, RegionFromId(16), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_camp2Structures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NovaColonistHut", 5, RegionFromId(17), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_camp3Structures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NovaColonistHut", 5, RegionFromId(18), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_camp4Structures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NovaColonistHut", 5, RegionFromId(19), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_camp5Structures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NovaColonistHut", 5, RegionFromId(20), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_camp6Structures, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player5AddAllHutstoUnitGroups_Init () {
    gt_Player5AddAllHutstoUnitGroups = TriggerCreate("gt_Player5AddAllHutstoUnitGroups_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 5 Set Commander and other
//--------------------------------------------------------------------------------------------------
bool gt_Player5SetCommanderandother_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(5, "RaynorCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "CommanderLevel", 15);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player5SetCommanderandother_Init () {
    gt_Player5SetCommanderandother = TriggerCreate("gt_Player5SetCommanderandother_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 5 Structure Armor Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_Player5StructureArmorUpgrade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(5, "TerranBuildingArmor", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player5StructureArmorUpgrade_Init () {
    gt_Player5StructureArmorUpgrade = TriggerCreate("gt_Player5StructureArmorUpgrade_Func");
    TriggerAddEventTimeElapsed(gt_Player5StructureArmorUpgrade, 600.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 5 Structure Fire Supression Upgrade and Turret
//--------------------------------------------------------------------------------------------------
bool gt_Player5StructureFireSupressionUpgradeandTurret_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(5, "HiSecAutoTracking", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ReinforcedSuperstructure", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "FireSuppressionSystems", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player5StructureFireSupressionUpgradeandTurret_Init () {
    gt_Player5StructureFireSupressionUpgradeandTurret = TriggerCreate("gt_Player5StructureFireSupressionUpgradeandTurret_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 5 Fortified Bunker Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_Player5FortifiedBunkerUpgrade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(5, "FortifiedBunkerCarapace", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "ShrikeTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "FireSuppressionSystems", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player5FortifiedBunkerUpgrade_Init () {
    gt_Player5FortifiedBunkerUpgrade = TriggerCreate("gt_Player5FortifiedBunkerUpgrade_Func");
    TriggerAddEventChatMessage(gt_Player5FortifiedBunkerUpgrade, c_playerAny, "-bunker", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Construct Red Outpost
//--------------------------------------------------------------------------------------------------
bool gt_ConstructRedOutpost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker1;
    unit lv_bunker2;
    unit lv_turret;
    actor lv_bunkerPlacement1;
    actor lv_bunkerPlacement2;
    actor lv_turretPlacement;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(810540701), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), (30.0*60));
    gv_redOutpostPing = PingLastCreated();
    PingSetTooltip(gv_redOutpostPing, StringExternal("Param/Value/7C3A6490"));
    libNtve_gf_CreateModelAtPoint("BunkerPlacement", PointFromId(817046164));
    lv_bunkerPlacement1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("BunkerPlacement", PointFromId(412237293));
    lv_bunkerPlacement2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", PointFromId(857806576));
    lv_turretPlacement = libNtve_gf_ActorLastCreated();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(817046164));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(817046164));
    lv_bunker1 = UnitLastCreated();
    libNtve_gf_KillModel(lv_bunkerPlacement1);
    UnitSetState(lv_bunker1, c_unitStateTargetable, false);
    UnitIssueOrder(gv_invisibleBuilderRedTealOutposts, OrderTargetingUnit(null, lv_bunker1), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_bunker1) == false) || ((UnitIsAlive(lv_bunker1) == true) && (UnitFilterMatch(lv_bunker1, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), gv_invisibleBuilderRedTealOutposts) == true))))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(810540701));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, PointFromId(810540701));
    UnitGroupLoopBegin(UnitGroup("Marine", 5, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunker1), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(412237293));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(412237293));
    lv_bunker2 = UnitLastCreated();
    libNtve_gf_KillModel(lv_bunkerPlacement2);
    UnitSetState(lv_bunker2, c_unitStateTargetable, false);
    UnitIssueOrder(gv_invisibleBuilderRedTealOutposts, OrderTargetingUnit(null, lv_bunker2), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_bunker2) == false) || ((UnitIsAlive(lv_bunker2) == true) && (UnitFilterMatch(lv_bunker2, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), gv_invisibleBuilderRedTealOutposts) == true))))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(810540701));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, PointFromId(810540701));
    UnitGroupLoopBegin(UnitGroup("Marine", 5, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunker2), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(857806576));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(857806576));
    lv_turret = UnitLastCreated();
    libNtve_gf_KillModel(lv_turretPlacement);
    UnitSetState(lv_turret, c_unitStateTargetable, false);
    UnitIssueOrder(gv_invisibleBuilderRedTealOutposts, OrderTargetingUnit(null, lv_turret), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_turret) == false) || ((UnitIsAlive(lv_turret) == true) && (UnitFilterMatch(lv_turret, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), gv_invisibleBuilderRedTealOutposts) == true))))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(gv_redOutpostPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ConstructRedOutpost_Init () {
    gt_ConstructRedOutpost = TriggerCreate("gt_ConstructRedOutpost_Func");
    TriggerAddEventGeneric(gt_ConstructRedOutpost, "Outposts");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Construct Teal Outpost
//--------------------------------------------------------------------------------------------------
bool gt_ConstructTealOutpost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    unit lv_turret2;
    unit lv_turret3;
    actor lv_bunkerPlacement;
    actor lv_turretPlacement2;
    actor lv_turretPlacement3;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(1056610188), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), (30.0*60));
    gv_tealOutpostPing = PingLastCreated();
    PingSetTooltip(gv_tealOutpostPing, StringExternal("Param/Value/EC7CDC5B"));
    libNtve_gf_CreateModelAtPoint("BunkerPlacement", PointFromId(1056610188));
    lv_bunkerPlacement = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", PointFromId(780928979));
    lv_turretPlacement2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("MissileTurretPlacement", PointFromId(1935393530));
    lv_turretPlacement3 = libNtve_gf_ActorLastCreated();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(1056610188));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(1056610188));
    lv_bunker = UnitLastCreated();
    libNtve_gf_KillModel(lv_bunkerPlacement);
    UnitSetState(lv_bunker, c_unitStateTargetable, false);
    UnitIssueOrder(gv_invisibleBuilderRedTealOutposts, OrderTargetingUnit(null, lv_bunker), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_bunker) == false) || ((UnitIsAlive(lv_bunker) == true) && (UnitFilterMatch(lv_bunker, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), gv_invisibleBuilderRedTealOutposts) == true))))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(357746324));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(4, "Marine", c_unitCreateIgnorePlacement, 5, PointFromId(357746324));
    UnitGroupLoopBegin(UnitGroup("Marine", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, lv_bunker), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(780928979));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(780928979));
    lv_turret2 = UnitLastCreated();
    libNtve_gf_KillModel(lv_turretPlacement2);
    UnitSetState(lv_turret2, c_unitStateTargetable, false);
    UnitIssueOrder(gv_invisibleBuilderRedTealOutposts, OrderTargetingUnit(null, lv_turret2), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_turret2) == false) || ((UnitIsAlive(lv_turret2) == true) && (UnitFilterMatch(lv_turret2, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), gv_invisibleBuilderRedTealOutposts) == true))))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(1935393530));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissileTurret", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(1935393530));
    lv_turret3 = UnitLastCreated();
    libNtve_gf_KillModel(lv_turretPlacement3);
    UnitSetState(lv_turret3, c_unitStateTargetable, false);
    UnitIssueOrder(gv_invisibleBuilderRedTealOutposts, OrderTargetingUnit(null, lv_turret3), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_turret3) == false) || ((UnitIsAlive(lv_turret3) == true) && (UnitFilterMatch(lv_turret3, 5, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) && (UnitGroupHasUnit(UnitGroupIdle(5, false), gv_invisibleBuilderRedTealOutposts) == true))))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(gv_tealOutpostPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ConstructTealOutpost_Init () {
    gt_ConstructTealOutpost = TriggerCreate("gt_ConstructTealOutpost_Func");
    TriggerAddEventGeneric(gt_ConstructTealOutpost, "Outposts");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Red Timer is 0
//--------------------------------------------------------------------------------------------------
bool gt_RedTimeris0_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(UnitGroup(null, 3, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_RedScienceFacilityCaptured, true, false);
    }
    else {
        TimerWindowDestroy(gv_redTimerWindow);
        TriggerExecute(gt_ObjectiveScienceFailed, true, false);
        PingDestroy(gv_redBeaconPing);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RedTimeris0_Init () {
    gt_RedTimeris0 = TriggerCreate("gt_RedTimeris0_Func");
    TriggerEnable(gt_RedTimeris0, false);
    TriggerAddEventTimer(gt_RedTimeris0, gv_secondaryObjectiveTimerScience);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teal Timer is 0
//--------------------------------------------------------------------------------------------------
bool gt_TealTimeris0_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(UnitGroup(null, 3, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerExecute(gt_TealWarFacilityCaptured, true, false);
    }
    else {
        TimerWindowDestroy(gv_tealTimerWindow);
        TriggerExecute(gt_ObjectiveWarFailed, true, false);
        PingDestroy(gv_tealBeaconPing);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TealTimeris0_Init () {
    gt_TealTimeris0 = TriggerCreate("gt_TealTimeris0_Func");
    TriggerEnable(gt_TealTimeris0, false);
    TriggerAddEventTimer(gt_TealTimeris0, gv_secondaryObjectiveTimerWar);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Secondary Obj Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateSecondaryObjPings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_redBeacon), StringExternal("Param/Value/EA09C5CC"));
    gv_redBeaconPing = PingLastCreated();
    gv_redTag = TextTagLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_tealBeacon), StringExternal("Param/Value/CD579C2E"));
    gv_tealBeaconPing = PingLastCreated();
    gv_tealTag = TextTagLastCreated();
    gv_secondaryObjectiveFlag = 1;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateSecondaryObjPings_Init () {
    gt_CreateSecondaryObjPings = TriggerCreate("gt_CreateSecondaryObjPings_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Red - Unit Activates Science Facility
//--------------------------------------------------------------------------------------------------
bool gt_RedUnitActivatesScienceFacility_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_redScienceFacilityActivated == 0))) {
            return false;
        }
        if (!((gv_secondaryObjectiveFlag == 1))) {
            return false;
        }
        if (!((UnitMoverExists(EventUnit(), "Ground") == true))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_redScienceFacilityActivated = 1;
    TextTagDestroy(gv_redTag);
    UnitKill(gv_redBeacon);
    TimerStart(gv_secondaryObjectiveTimerScience, (1.3*60), false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(gv_secondaryObjectiveTimerScience, StringExternal("Param/Value/8D56F407"), true, false);
    gv_redTimerWindow = TimerWindowLastCreated();
    TriggerExecute(gt_SecondaryMarineCleanUpTheFacilityArea, true, false);
    TriggerExecute(gt_AttackWaveSecondaryRed, true, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_RedFacilityDropPod, true, false);
    TriggerEnable(gt_RedTimeris0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RedUnitActivatesScienceFacility_Init () {
    gt_RedUnitActivatesScienceFacility = TriggerCreate("gt_RedUnitActivatesScienceFacility_Func");
    TriggerAddEventUnitRangePoint(gt_RedUnitActivatesScienceFacility, null, UnitGetPosition(UnitFromId(967723367)), 0.25, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teal - Unit Activates War Facility
//--------------------------------------------------------------------------------------------------
bool gt_TealUnitActivatesWarFacility_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_tealWarFacilityActivated == 0))) {
            return false;
        }
        if (!((gv_secondaryObjectiveFlag == 1))) {
            return false;
        }
        if (!((UnitMoverExists(EventUnit(), "Ground") == true))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_tealWarFacilityActivated = 1;
    TextTagDestroy(gv_tealTag);
    UnitKill(gv_tealBeacon);
    TimerStart(gv_secondaryObjectiveTimerWar, (1.3*60), false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(gv_secondaryObjectiveTimerWar, StringExternal("Param/Value/1C416821"), true, false);
    gv_tealTimerWindow = TimerWindowLastCreated();
    TriggerExecute(gt_SecondaryMarineCleanUpTheFacilityArea, true, false);
    TriggerExecute(gt_AttackWaveSecondaryTeal, true, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_TealFacilityDropPod, true, false);
    TriggerEnable(gt_TealTimeris0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TealUnitActivatesWarFacility_Init () {
    gt_TealUnitActivatesWarFacility = TriggerCreate("gt_TealUnitActivatesWarFacility_Func");
    TriggerAddEventUnitRangePoint(gt_TealUnitActivatesWarFacility, null, UnitGetPosition(UnitFromId(865012866)), 0.25, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Red - Science Facility Captured
//--------------------------------------------------------------------------------------------------
bool gt_RedScienceFacilityCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPods;
    unit lv_sCVUnitRed;
    // Variable Initialization
    lv_dropPods = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_secondaryObjectiveFlag == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_redTimerWindow);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(11), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 5, true);
    }
    UnitGroupLoopEnd();
    PingDestroy(gv_redBeaconPing);
    gf_SecondaryObjectiveConstruction(RegionFromId(11), PointFromId(1739156850), PointFromId(508499054), PointFromId(1239001286), PointFromId(1764937011), PointFromId(59774697));
    TriggerExecute(gt_ObjectiveScienceCaptured, true, false);
    TriggerExecute(gt_ScienceFacilityCapturedMakeUpgrades, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RedScienceFacilityCaptured_Init () {
    gt_RedScienceFacilityCaptured = TriggerCreate("gt_RedScienceFacilityCaptured_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teal - War Facility Captured
//--------------------------------------------------------------------------------------------------
bool gt_TealWarFacilityCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dropPods;
    unit lv_sCVUnitTeal;
    // Variable Initialization
    lv_dropPods = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((gv_secondaryObjectiveFlag == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowDestroy(gv_tealTimerWindow);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(12), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 5, true);
    }
    UnitGroupLoopEnd();
    PingDestroy(gv_tealBeaconPing);
    gf_SecondaryObjectiveConstruction(RegionFromId(12), PointFromId(1781926426), PointFromId(793036839), PointFromId(847488264), PointFromId(1864467682), PointFromId(2130853115));
    TriggerExecute(gt_ObjectiveWarCaptured, true, false);
    TriggerExecute(gt_WarFacilityCapturedMakeUpgrades, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TealWarFacilityCaptured_Init () {
    gt_TealWarFacilityCaptured = TriggerCreate("gt_TealWarFacilityCaptured_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: War Facility Captured - Make Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_WarFacilityCapturedMakeUpgrades_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Player5FortifiedBunkerUpgrade, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AC95D6D0"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WarFacilityCapturedMakeUpgrades_Init () {
    gt_WarFacilityCapturedMakeUpgrades = TriggerCreate("gt_WarFacilityCapturedMakeUpgrades_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Science Facility Captured - Make Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_ScienceFacilityCapturedMakeUpgrades_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Player5StructureFireSupressionUpgradeandTurret, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B2508AE7"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ScienceFacilityCapturedMakeUpgrades_Init () {
    gt_ScienceFacilityCapturedMakeUpgrades = TriggerCreate("gt_ScienceFacilityCapturedMakeUpgrades_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Construct Sensor Tower 1
//--------------------------------------------------------------------------------------------------
bool gt_ConstructSensorTower1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_placementModel;
    int lv_tag;
    unit lv_sensorTowerUnit;
    unit lv_sensorSCVLocal;
    // Variable Initialization
    lv_tag = c_textTagNone;
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(1356500068), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), (1.4*60));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/658DC63D"));
    libNtve_gf_CreateModelAtPoint("SensorTowerPlacement", PointFromId(1356500068));
    lv_placementModel = libNtve_gf_ActorLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(32), 60.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(32), 60.0, false);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(lv_placementModel);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(1356500068));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    lv_sensorSCVLocal = UnitFromId(937658160);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SensorTower", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(1356500068));
    lv_sensorTowerUnit = UnitLastCreated();
    TextTagCreate(StringExternal("Param/Value/C33E09D6"), 16, UnitGetPosition(gv_redBeacon), 2.0, true, true, PlayerGroupAll());
    lv_tag = TextTagLastCreated();
    TextTagShow(lv_tag, PlayerGroupAll(), true);
    UnitIssueOrder(lv_sensorSCVLocal, OrderTargetingUnit(null, lv_sensorTowerUnit), c_orderQueueReplace);
    TriggerExecute(gt_AttackWaveSensorTower1, false, false);
    while (!(((UnitGroupHasUnit(UnitGroup(null, 5, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_sensorTowerUnit) == true) || (UnitIsAlive(lv_sensorTowerUnit) == false)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_sensorTowerUnit) == true)) {
        libNtve_gf_MakeUnitInvulnerable(lv_sensorTowerUnit, true);
        TextTagDestroy(lv_tag);
        UnitBehaviorRemove(lv_sensorTowerUnit, "TerranBuildingBurnDown", 1);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ConstructSensorTower1_Init () {
    gt_ConstructSensorTower1 = TriggerCreate("gt_ConstructSensorTower1_Func");
    TriggerAddEventGeneric(gt_ConstructSensorTower1, "SensorTower1");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Construct Sensor Tower 2
//--------------------------------------------------------------------------------------------------
bool gt_ConstructSensorTower2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_placementModel;
    int lv_tag;
    unit lv_sensorTowerUnit;
    unit lv_sensorSCVLocal;
    // Variable Initialization
    lv_tag = c_textTagNone;
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonusCamp", PointFromId(1574818404), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), (1.4*60));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/73AFF7D7"));
    libNtve_gf_CreateModelAtPoint("SensorTowerPlacement", PointFromId(1574818404));
    lv_placementModel = libNtve_gf_ActorLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(33), 60.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(33), 60.0, false);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(lv_placementModel);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 5, PointFromId(1574818404));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("TerranDropPod", 5, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    lv_sensorSCVLocal = UnitFromId(937658160);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SensorTower", c_unitCreateConstruct | c_unitCreateIgnorePlacement, 5, PointFromId(1574818404));
    lv_sensorTowerUnit = UnitLastCreated();
    TextTagCreate(StringExternal("Param/Value/009F3378"), 16, UnitGetPosition(gv_redBeacon), 2.0, true, true, PlayerGroupAll());
    lv_tag = TextTagLastCreated();
    TextTagShow(lv_tag, PlayerGroupAll(), true);
    UnitIssueOrder(lv_sensorSCVLocal, OrderTargetingUnit(null, lv_sensorTowerUnit), c_orderQueueReplace);
    TriggerExecute(gt_AttackWaveSensorTower2, false, false);
    while (!(((UnitGroupHasUnit(UnitGroup(null, 5, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_sensorTowerUnit) == true) || (UnitIsAlive(lv_sensorTowerUnit) == false)))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_sensorTowerUnit) == true)) {
        libNtve_gf_MakeUnitInvulnerable(lv_sensorTowerUnit, true);
        TextTagDestroy(lv_tag);
        UnitBehaviorRemove(lv_sensorTowerUnit, "TerranBuildingBurnDown", 1);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ConstructSensorTower2_Init () {
    gt_ConstructSensorTower2 = TriggerCreate("gt_ConstructSensorTower2_Func");
    TriggerAddEventGeneric(gt_ConstructSensorTower2, "SensorTower2");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Any Camp Is Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_AnyCampIsUnderAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_camp1Structures, EventUnit()) == true) || (UnitGroupHasUnit(gv_camp2Structures, EventUnit()) == true) || (UnitGroupHasUnit(gv_camp3Structures, EventUnit()) == true) || (UnitGroupHasUnit(gv_camp4Structures, EventUnit()) == true) || (UnitGroupHasUnit(gv_camp5Structures, EventUnit()) == true) || (UnitGroupHasUnit(gv_camp6Structures, EventUnit()) == true)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    if ((gv_underAttackAttention == false)) {
        TriggerExecute(gt_HansonCampIsUnderAttack, true, false);
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
        gv_underAttackAttention = true;
        Wait(20.0, c_timeGame);
        gv_underAttackAttention = false;
    }
    else {
        TriggerStop(TriggerGetCurrent());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AnyCampIsUnderAttack_Init () {
    gt_AnyCampIsUnderAttack = TriggerCreate("gt_AnyCampIsUnderAttack_Func");
    TriggerAddEventUnitDamaged(gt_AnyCampIsUnderAttack, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Ready Camp 1
//--------------------------------------------------------------------------------------------------
bool gt_APCReadyCamp1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aPCNumberofRoute = 1;
    TriggerExecute(gt_HansonAPCIsReady, true, true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(22), 5.0, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(10), 5.0, false);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_Camp1LaunchAPC, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCReadyCamp1_Init () {
    gt_APCReadyCamp1 = TriggerCreate("gt_APCReadyCamp1_Func");
    TriggerAddEventTimeElapsed(gt_APCReadyCamp1, 300.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 1 - Launch APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp1LaunchAPC_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_maxIndexOfArray = 7;
    gv_currentPointGlobal = gv_colonistsRoute1Array[0];
    gv_unloadPoint = PointFromId(1227886990);
    gv_indexOfArray = 0;
    TriggerExecute(gt_APCRouteArrowPings1, false, false);
    gf_CreateAPC();
    UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
    gv_aPCisOnRoute = 1;
    TriggerEnable(gt_Camp1PeriodicRoute, true);
    gf_CreatePingsforCamp(PointFromId(1023496499));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp1LaunchAPC_Init () {
    gt_Camp1LaunchAPC = TriggerCreate("gt_Camp1LaunchAPC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 1 - APC is in Camp
//--------------------------------------------------------------------------------------------------
bool gt_Camp1APCisinCamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunkerUnit;
    unitgroup lv_dropPods;
    unit lv_sCVUnit;
    unit lv_randomHut;
    // Variable Initialization
    lv_dropPods = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(((gv_aPCUnitIsInCamp == 0) && (EventUnit() == gv_aPCUnit)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_APCisinCampConstrucion(RegionFromId(10), 3, 1, PointFromId(826946794), PointFromId(1023496499), PointFromId(1935945280), PointFromId(717843826), PointFromId(1444524958), false, null, false, null, null, gt_Camp1IsDead, gv_camp1Structures, gt_Camp1PeriodicRoute, gt_AttackWaveCamp1, "Camp1Bonus");
    gv_aPCUnitIsInCamp = 0;
    Wait((1.5*60), c_timeGame);
    TriggerExecute(gt_APCReadyCamp2, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp1APCisinCamp_Init () {
    gt_Camp1APCisinCamp = TriggerCreate("gt_Camp1APCisinCamp_Func");
    TriggerAddEventUnitRangePoint(gt_Camp1APCisinCamp, null, PointFromId(1227886990), 0.5, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 1 - Periodic Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp1PeriodicRoute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    point lv_currentPoint;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((gv_aPCisOnRoute == 1) && (gv_aPCUnitIsInCamp == 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupHasUnit(UnitGroupIdle(5, false), gv_aPCUnit) == true)) {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
                gv_lastAPCOrder = UnitOrder(gv_aPCUnit, 0);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute1Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
            gv_lastAPCOrder = UnitOrder(gv_aPCUnit, 0);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
            gv_lastAPCOrder = UnitOrder(gv_aPCUnit, 0);
        }
    }
    else {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
                gv_lastAPCOrder = UnitOrder(gv_aPCUnit, 0);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute1Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
            gv_lastAPCOrder = UnitOrder(gv_aPCUnit, 0);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
            gv_lastAPCOrder = UnitOrder(gv_aPCUnit, 0);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp1PeriodicRoute_Init () {
    gt_Camp1PeriodicRoute = TriggerCreate("gt_Camp1PeriodicRoute_Func");
    TriggerEnable(gt_Camp1PeriodicRoute, false);
    TriggerAddEventTimePeriodic(gt_Camp1PeriodicRoute, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 1 - Bonus
//--------------------------------------------------------------------------------------------------
bool gt_Camp1Bonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_camp1Structures, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_BonusCampPing(PointFromId(815536411));
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(23), 2.0, false);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_HansonBonusCamps, true, true);
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(23), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_BonusCampBuild(false, true, false, true, RegionFromId(10), RegionFromId(23), null, null, PointFromId(815536411), null, PointFromId(385222800), PointFromId(1775236527), null, PointFromId(2120114028), PointFromId(819106134), 3);
    PingDestroy(gv_bonusCampPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp1Bonus_Init () {
    gt_Camp1Bonus = TriggerCreate("gt_Camp1Bonus_Func");
    TriggerAddEventGeneric(gt_Camp1Bonus, "Camp1Bonus");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 1 Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_Camp1IsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_camp1Structures, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(gv_camp1Structures, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_deadCampsCount += 1;
    gv_deadCampsArray[0] = 1;
    gv_campConstructionCompleted = 1;
    TriggerExecute(gt_HansonCampIsDead, true, true);
    TriggerExecute(gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate, true, true);
    TriggerEnable(gt_Camp1Bonus, false);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingDeadCamp", PointFromId(1023496499), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5EB92060"));
    if ((gv_deadCampsCount >= 2)) {
        Wait(3.0, c_timeGame);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp1IsDead_Init () {
    gt_Camp1IsDead = TriggerCreate("gt_Camp1IsDead_Func");
    TriggerAddEventUnitDied(gt_Camp1IsDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Ready Camp 2
//--------------------------------------------------------------------------------------------------
bool gt_APCReadyCamp2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aPCNumberofRoute = 2;
    TriggerExecute(gt_HansonAPCIsReady, true, true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(22), 5.0, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(16), 5.0, false);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_Camp2LaunchAPC, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCReadyCamp2_Init () {
    gt_APCReadyCamp2 = TriggerCreate("gt_APCReadyCamp2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 2 - DropPod to APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp2DropPodtoAPC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_aPCUnit))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_DropPodWarpInUnitGroup(libCOMI_gf_LastCreatedCoopAttackForce(), PointFromId(748233872));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp2DropPodtoAPC_Init () {
    gt_Camp2DropPodtoAPC = TriggerCreate("gt_Camp2DropPodtoAPC_Func");
    TriggerAddEventUnitRangePoint(gt_Camp2DropPodtoAPC, null, PointFromId(117875691), 1.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 2 - Launch APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp2LaunchAPC_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_maxIndexOfArray = 18;
    gv_currentPointGlobal = gv_colonistsRoute2Array[0];
    gv_unloadPoint = PointFromId(833371193);
    gv_indexOfArray = 0;
    TriggerExecute(gt_APCRouteArrowPings2, false, false);
    gf_CreateAPC();
    UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_colonistsRoute2Array[0]), c_orderQueueReplace);
    gv_aPCisOnRoute = 1;
    TriggerEnable(gt_Camp2PeriodicRoute, true);
    gf_CreatePingsforCamp(PointFromId(1974010391));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp2LaunchAPC_Init () {
    gt_Camp2LaunchAPC = TriggerCreate("gt_Camp2LaunchAPC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 2 - APC is in Camp
//--------------------------------------------------------------------------------------------------
bool gt_Camp2APCisinCamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    string lv_unitTypeToBuild;
    unit lv_bunkerUnit;
    unitgroup lv_dropPods;
    unit lv_sCVUnit;
    unit lv_randomHut;
    // Variable Initialization
    lv_dropPods = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(((gv_aPCUnitIsInCamp == 0) && (EventUnit() == gv_aPCUnit)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_APCisinCampConstrucion(RegionFromId(16), 4, 2, PointFromId(2133796705), PointFromId(1974010391), PointFromId(118219006), PointFromId(1367080984), PointFromId(972166976), false, null, true, "Factory", PointFromId(348452632), gt_Camp2IsDead, gv_camp2Structures, gt_Camp2PeriodicRoute, gt_AttackWaveCamp2, "Camp2Bonus");
    gv_aPCUnitIsInCamp = 0;
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveCreateSecondary, true, false);
    Wait((1.5*60), c_timeGame);
    TriggerExecute(gt_APCReadyCamp3, true, false);
    TriggerSendEvent("SensorTower1");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp2APCisinCamp_Init () {
    gt_Camp2APCisinCamp = TriggerCreate("gt_Camp2APCisinCamp_Func");
    TriggerAddEventUnitRangePoint(gt_Camp2APCisinCamp, null, PointFromId(833371193), 0.5, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 2 - Periodic Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp2PeriodicRoute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    point lv_currentPoint;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((gv_aPCisOnRoute == 1) && (gv_aPCUnitIsInCamp == 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupHasUnit(UnitGroupIdle(5, false), gv_aPCUnit) == true)) {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute2Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    else {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute2Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp2PeriodicRoute_Init () {
    gt_Camp2PeriodicRoute = TriggerCreate("gt_Camp2PeriodicRoute_Func");
    TriggerEnable(gt_Camp2PeriodicRoute, false);
    TriggerAddEventTimePeriodic(gt_Camp2PeriodicRoute, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 2 - Bonus
//--------------------------------------------------------------------------------------------------
bool gt_Camp2Bonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_camp2Structures, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_BonusCampPing(PointFromId(1601619326));
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(34), 2.0, false);
    }
    PlayerGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(34), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_BonusCampBuild(false, true, false, true, RegionFromId(16), RegionFromId(34), null, null, PointFromId(1601619326), null, PointFromId(76914175), PointFromId(1296915810), null, PointFromId(2020663630), PointFromId(1934783166), 3);
    PingDestroy(gv_bonusCampPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp2Bonus_Init () {
    gt_Camp2Bonus = TriggerCreate("gt_Camp2Bonus_Func");
    TriggerAddEventGeneric(gt_Camp2Bonus, "Camp2Bonus");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 2 Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_Camp2IsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_camp2Structures, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(gv_camp2Structures, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_deadCampsCount += 1;
    gv_deadCampsArray[1] = 1;
    gv_campConstructionCompleted = 1;
    TriggerExecute(gt_HansonCampIsDead, true, true);
    TriggerExecute(gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate, true, true);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingDeadCamp", PointFromId(1974010391), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AB5C07FD"));
    if ((gv_deadCampsCount >= 2)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp2IsDead_Init () {
    gt_Camp2IsDead = TriggerCreate("gt_Camp2IsDead_Func");
    TriggerAddEventUnitDied(gt_Camp2IsDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Ready Camp 3
//--------------------------------------------------------------------------------------------------
bool gt_APCReadyCamp3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aPCNumberofRoute = 3;
    TriggerExecute(gt_HansonAPCIsReady, true, true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(22), 5.0, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(17), 5.0, false);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_Camp3LaunchAPC, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCReadyCamp3_Init () {
    gt_APCReadyCamp3 = TriggerCreate("gt_APCReadyCamp3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 3 - DropPod to APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp3DropPodtoAPC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_aPCUnit))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_DropPodWarpInUnitGroup(libCOMI_gf_LastCreatedCoopAttackForce(), PointFromId(1394771944));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp3DropPodtoAPC_Init () {
    gt_Camp3DropPodtoAPC = TriggerCreate("gt_Camp3DropPodtoAPC_Func");
    TriggerAddEventUnitRangePoint(gt_Camp3DropPodtoAPC, null, PointFromId(1003541194), 1.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 3 - Launch APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp3LaunchAPC_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_maxIndexOfArray = 26;
    gv_currentPointGlobal = gv_colonistsRoute3Array[0];
    gv_unloadPoint = PointFromId(1859844944);
    gv_indexOfArray = 0;
    TriggerExecute(gt_APCRouteArrowPings3, false, false);
    TriggerExecute(gt_Camp3SetRoute, true, true);
    gf_CreateAPC();
    UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_colonistsRoute3Array[0]), c_orderQueueReplace);
    gv_aPCisOnRoute = 1;
    TriggerEnable(gt_Camp3PeriodicRoute, true);
    gf_CreatePingsforCamp(PointFromId(825629526));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp3LaunchAPC_Init () {
    gt_Camp3LaunchAPC = TriggerCreate("gt_Camp3LaunchAPC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 3 - APC is in Camp
//--------------------------------------------------------------------------------------------------
bool gt_Camp3APCisinCamp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitTypeToBuild;
    unit lv_bunkerUnit;
    unitgroup lv_dropPods;
    unit lv_sCVUnit;
    unit lv_randomHut;
    // Variable Initialization
    lv_dropPods = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!(((gv_aPCUnitIsInCamp == 0) && (EventUnit() == gv_aPCUnit)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_APCisinCampConstrucion(RegionFromId(17), 4, 3, PointFromId(1518813446), PointFromId(825629526), PointFromId(1306002541), PointFromId(1268648411), PointFromId(104684631), false, null, true, "Barracks", PointFromId(1352316813), gt_Camp3IsDead, gv_camp3Structures, gt_Camp3PeriodicRoute, gt_AttackWaveCamp3, "Camp3Bonus");
    gv_aPCUnitIsInCamp = 0;
    Wait((1.5*60), c_timeGame);
    TriggerExecute(gt_APCReadyCamp4, true, false);
    TriggerSendEvent("SensorTower2");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp3APCisinCamp_Init () {
    gt_Camp3APCisinCamp = TriggerCreate("gt_Camp3APCisinCamp_Func");
    TriggerAddEventUnitRangePoint(gt_Camp3APCisinCamp, null, PointFromId(1859844944), 0.5, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 3 - Periodic Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp3PeriodicRoute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    point lv_currentPoint;
    int lv_flag;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((gv_aPCisOnRoute == 1) && (gv_aPCUnitIsInCamp == 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupHasUnit(UnitGroupIdle(5, false), gv_aPCUnit) == true)) {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute3Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    else {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute3Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp3PeriodicRoute_Init () {
    gt_Camp3PeriodicRoute = TriggerCreate("gt_Camp3PeriodicRoute_Func");
    TriggerEnable(gt_Camp3PeriodicRoute, false);
    TriggerAddEventTimePeriodic(gt_Camp3PeriodicRoute, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 3 - Bonus
//--------------------------------------------------------------------------------------------------
bool gt_Camp3Bonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_camp3Structures, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_BonusCampPing(PointFromId(950640475));
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(25), 2.0, false);
    }
    PlayerGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(25), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_BonusCampBuild(false, true, true, true, RegionFromId(17), RegionFromId(25), PointFromId(705279262), PointFromId(994912376), PointFromId(950640475), null, PointFromId(1077223173), PointFromId(468559921), null, PointFromId(161233355), PointFromId(1947415322), gv_pLAYER_04_ENEMY);
    PingDestroy(gv_bonusCampPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp3Bonus_Init () {
    gt_Camp3Bonus = TriggerCreate("gt_Camp3Bonus_Func");
    TriggerAddEventGeneric(gt_Camp3Bonus, "Camp3Bonus");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 3 Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_Camp3IsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_camp3Structures, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(gv_camp3Structures, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_deadCampsCount += 1;
    gv_deadCampsArray[2] = 1;
    gv_campConstructionCompleted = 1;
    TriggerExecute(gt_HansonCampIsDead, true, true);
    TriggerExecute(gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate, true, true);
    TriggerEnable(gt_Camp3Bonus, false);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingDeadCamp", PointFromId(825629526), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B574D3AC"));
    if ((gv_deadCampsCount >= 2)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp3IsDead_Init () {
    gt_Camp3IsDead = TriggerCreate("gt_Camp3IsDead_Func");
    TriggerAddEventUnitDied(gt_Camp3IsDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Ready Camp 4
//--------------------------------------------------------------------------------------------------
bool gt_APCReadyCamp4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aPCNumberofRoute = 4;
    TriggerExecute(gt_HansonAPCIsReady, true, true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(22), 5.0, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(18), 5.0, false);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_Camp4LaunchAPC, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCReadyCamp4_Init () {
    gt_APCReadyCamp4 = TriggerCreate("gt_APCReadyCamp4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 4 - DropPod to APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp4DropPodtoAPC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_aPCUnit))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_DropPodWarpInUnitGroup(libCOMI_gf_LastCreatedCoopAttackForce(), PointFromId(716429969));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp4DropPodtoAPC_Init () {
    gt_Camp4DropPodtoAPC = TriggerCreate("gt_Camp4DropPodtoAPC_Func");
    TriggerAddEventUnitRangePoint(gt_Camp4DropPodtoAPC, null, PointFromId(1542432173), 1.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 4 - Launch APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp4LaunchAPC_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_maxIndexOfArray = 40;
    gv_currentPointGlobal = gv_colonistsRoute4Array[0];
    gv_unloadPoint = PointFromId(755364163);
    gv_indexOfArray = 0;
    TriggerExecute(gt_APCRouteArrowPings4, false, false);
    TriggerExecute(gt_Camp4SetRoute, true, true);
    gf_CreateAPC();
    UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_colonistsRoute4Array[0]), c_orderQueueReplace);
    gv_aPCisOnRoute = 1;
    TriggerEnable(gt_Camp4PeriodicRoute, true);
    gf_CreatePingsforCamp(PointFromId(1937460410));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp4LaunchAPC_Init () {
    gt_Camp4LaunchAPC = TriggerCreate("gt_Camp4LaunchAPC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 4 - APC is in Camp
//--------------------------------------------------------------------------------------------------
bool gt_Camp4APCisinCamp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_aPCUnitIsInCamp == 0) && (EventUnit() == gv_aPCUnit)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_APCisinCampConstrucion(RegionFromId(18), 4, 4, PointFromId(729919990), PointFromId(1937460410), PointFromId(167686344), PointFromId(1794801816), PointFromId(523639059), true, PointFromId(1553921233), true, "Barracks", PointFromId(931688815), gt_Camp4IsDead, gv_camp4Structures, gt_Camp4PeriodicRoute, gt_AttackWaveCamp4, "Camp4Bonus");
    gv_aPCUnitIsInCamp = 0;
    Wait((1.5*60), c_timeGame);
    TriggerExecute(gt_APCReadyCamp5, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp4APCisinCamp_Init () {
    gt_Camp4APCisinCamp = TriggerCreate("gt_Camp4APCisinCamp_Func");
    TriggerAddEventUnitRangePoint(gt_Camp4APCisinCamp, null, PointFromId(755364163), 0.5, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 4 - Periodic Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp4PeriodicRoute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    point lv_currentPoint;
    int lv_flag;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((gv_aPCisOnRoute == 1) && (gv_aPCUnitIsInCamp == 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupHasUnit(UnitGroupIdle(5, false), gv_aPCUnit) == true)) {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute4Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    else {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute4Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp4PeriodicRoute_Init () {
    gt_Camp4PeriodicRoute = TriggerCreate("gt_Camp4PeriodicRoute_Func");
    TriggerEnable(gt_Camp4PeriodicRoute, false);
    TriggerAddEventTimePeriodic(gt_Camp4PeriodicRoute, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 4 - Bonus
//--------------------------------------------------------------------------------------------------
bool gt_Camp4Bonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_camp4Structures, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_BonusCampPing(PointFromId(397719196));
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(15), 2.0, false);
    }
    PlayerGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(15), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_BonusCampBuild(true, true, false, true, RegionFromId(18), RegionFromId(15), PointFromId(705279262), PointFromId(994912376), PointFromId(918809413), PointFromId(504837491), PointFromId(233930328), PointFromId(180028253), PointFromId(397719196), PointFromId(342659259), PointFromId(1568114361), gv_pLAYER_04_ENEMY);
    PingDestroy(gv_bonusCampPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp4Bonus_Init () {
    gt_Camp4Bonus = TriggerCreate("gt_Camp4Bonus_Func");
    TriggerAddEventGeneric(gt_Camp4Bonus, "Camp4Bonus");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 4 Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_Camp4IsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_camp4Structures, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(gv_camp4Structures, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_deadCampsCount += 1;
    gv_deadCampsArray[3] = 1;
    gv_campConstructionCompleted = 1;
    TriggerExecute(gt_HansonCampIsDead, true, true);
    TriggerExecute(gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate, true, true);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingDeadCamp", PointFromId(1937460410), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F7222278"));
    if ((gv_deadCampsCount >= 2)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp4IsDead_Init () {
    gt_Camp4IsDead = TriggerCreate("gt_Camp4IsDead_Func");
    TriggerAddEventUnitDied(gt_Camp4IsDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Ready Camp 5
//--------------------------------------------------------------------------------------------------
bool gt_APCReadyCamp5_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aPCNumberofRoute = 5;
    TriggerExecute(gt_HansonAPCIsReady, true, true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(22), 5.0, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(19), 5.0, false);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_Camp5LaunchAPC, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCReadyCamp5_Init () {
    gt_APCReadyCamp5 = TriggerCreate("gt_APCReadyCamp5_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 5 - DropPod to APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp5DropPodtoAPC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_aPCUnit))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_DropPodWarpInUnitGroup(libCOMI_gf_LastCreatedCoopAttackForce(), PointFromId(1788695653));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp5DropPodtoAPC_Init () {
    gt_Camp5DropPodtoAPC = TriggerCreate("gt_Camp5DropPodtoAPC_Func");
    TriggerAddEventUnitRangePoint(gt_Camp5DropPodtoAPC, null, PointFromId(1156010684), 1.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 5 - Launch APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp5LaunchAPC_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_maxIndexOfArray = 34;
    gv_currentPointGlobal = gv_colonistsRoute5Array[0];
    gv_unloadPoint = PointFromId(1982093464);
    gv_indexOfArray = 0;
    TriggerExecute(gt_APCRouteArrowPings5, false, false);
    TriggerExecute(gt_Camp5SetRoute, true, true);
    gf_CreateAPC();
    UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_colonistsRoute5Array[0]), c_orderQueueReplace);
    gv_aPCisOnRoute = 1;
    TriggerEnable(gt_Camp5PeriodicRoute, true);
    gf_CreatePingsforCamp(PointFromId(1605379981));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp5LaunchAPC_Init () {
    gt_Camp5LaunchAPC = TriggerCreate("gt_Camp5LaunchAPC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 5 - APC is in Camp
//--------------------------------------------------------------------------------------------------
bool gt_Camp5APCisinCamp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_aPCUnitIsInCamp == 0) && (EventUnit() == gv_aPCUnit)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_APCisinCampConstrucion(RegionFromId(19), 3, 5, PointFromId(852347465), PointFromId(1605379981), PointFromId(2009650130), PointFromId(262891322), PointFromId(826432447), true, PointFromId(788185155), true, "Barracks", PointFromId(767676009), gt_Camp5IsDead, gv_camp5Structures, gt_Camp5PeriodicRoute, gt_AttackWaveCamp5, "Camp5Bonus");
    gv_aPCUnitIsInCamp = 0;
    Wait((1.5*60), c_timeGame);
    TriggerExecute(gt_APCReadyCamp6, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp5APCisinCamp_Init () {
    gt_Camp5APCisinCamp = TriggerCreate("gt_Camp5APCisinCamp_Func");
    TriggerAddEventUnitRangePoint(gt_Camp5APCisinCamp, null, PointFromId(1982093464), 0.5, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 5 - Periodic Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp5PeriodicRoute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    point lv_currentPoint;
    int lv_flag;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((gv_aPCisOnRoute == 1) && (gv_aPCUnitIsInCamp == 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupHasUnit(UnitGroupIdle(5, false), gv_aPCUnit) == true)) {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute5Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    else {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute5Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp5PeriodicRoute_Init () {
    gt_Camp5PeriodicRoute = TriggerCreate("gt_Camp5PeriodicRoute_Func");
    TriggerEnable(gt_Camp5PeriodicRoute, false);
    TriggerAddEventTimePeriodic(gt_Camp5PeriodicRoute, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 5 - Bonus
//--------------------------------------------------------------------------------------------------
bool gt_Camp5Bonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_camp5Structures, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_BonusCampPing(PointFromId(1246895398));
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(24), 2.0, false);
    }
    PlayerGroupLoopEnd();
    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(24), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_BonusCampBuild(true, true, false, true, RegionFromId(19), RegionFromId(24), PointFromId(530390425), PointFromId(1284308004), PointFromId(1246895398), PointFromId(1052343195), PointFromId(1645670756), PointFromId(158755251), PointFromId(1006716004), PointFromId(925390655), PointFromId(1605379981), gv_pLAYER_03_ENEMY);
    PingDestroy(gv_bonusCampPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp5Bonus_Init () {
    gt_Camp5Bonus = TriggerCreate("gt_Camp5Bonus_Func");
    TriggerAddEventGeneric(gt_Camp5Bonus, "Camp5Bonus");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 5 Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_Camp5IsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_camp5Structures, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(gv_camp5Structures, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_deadCampsCount += 1;
    gv_deadCampsArray[4] = 1;
    gv_campConstructionCompleted = 1;
    TriggerExecute(gt_HansonCampIsDead, true, true);
    TriggerExecute(gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate, true, true);
    TriggerEnable(gt_Camp5Bonus, false);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingDeadCamp", PointFromId(1605379981), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), (30.0*60));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E36793FC"));
    if ((gv_deadCampsCount >= 2)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp5IsDead_Init () {
    gt_Camp5IsDead = TriggerCreate("gt_Camp5IsDead_Func");
    TriggerAddEventUnitDied(gt_Camp5IsDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: APC Ready Camp 6
//--------------------------------------------------------------------------------------------------
bool gt_APCReadyCamp6_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_aPCNumberofRoute = 6;
    TriggerExecute(gt_HansonAPCIsReady, true, true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(22), 5.0, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(20), 5.0, false);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_Camp6LaunchAPC, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_APCReadyCamp6_Init () {
    gt_APCReadyCamp6 = TriggerCreate("gt_APCReadyCamp6_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 6 - Final Attack
//--------------------------------------------------------------------------------------------------
bool gt_Camp6FinalAttack_Func (bool testConds, bool runActions) {
    int autoEA3561DD_val;
    int auto90B0CCF4_val;
    int autoBA357C4A_val;
    int auto1CAB70DC_val;
    int auto9A11B7FD_val;
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_aPCUnit))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    autoEA3561DD_val = gv_deadCampsArray[0];
    if (autoEA3561DD_val == 0) {
        if ((RandomInt(0, 1) == 1)) {
            TriggerExecute(gt_AttackWaveCamp1Final, true, false);
        }
    }
    else {
    }
    auto90B0CCF4_val = gv_deadCampsArray[1];
    if (auto90B0CCF4_val == 0) {
        if ((RandomInt(0, 1) == 1)) {
            TriggerExecute(gt_AttackWaveCamp2Final, true, false);
        }
    }
    else {
    }
    autoBA357C4A_val = gv_deadCampsArray[2];
    if (autoBA357C4A_val == 0) {
        if ((RandomInt(0, 1) == 1)) {
            TriggerExecute(gt_AttackWaveCamp3Final, true, false);
        }
    }
    else {
    }
    auto1CAB70DC_val = gv_deadCampsArray[3];
    if (auto1CAB70DC_val == 0) {
        if ((RandomInt(0, 1) == 1)) {
            TriggerExecute(gt_AttackWaveCamp4Final, true, false);
        }
    }
    else {
    }
    auto9A11B7FD_val = gv_deadCampsArray[4];
    if (auto9A11B7FD_val == 0) {
        if ((RandomInt(0, 1) == 1)) {
            TriggerExecute(gt_AttackWaveCamp5Final, true, false);
        }
    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp6FinalAttack_Init () {
    gt_Camp6FinalAttack = TriggerCreate("gt_Camp6FinalAttack_Func");
    TriggerAddEventUnitRangePoint(gt_Camp6FinalAttack, null, PointFromId(1537139600), 1.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 6 - DropPod to APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp6DropPodtoAPC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_aPCUnit))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_DropPodWarpInUnitGroup(libCOMI_gf_LastCreatedCoopAttackForce(), PointFromId(1839156083));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp6DropPodtoAPC_Init () {
    gt_Camp6DropPodtoAPC = TriggerCreate("gt_Camp6DropPodtoAPC_Func");
    TriggerAddEventUnitRangePoint(gt_Camp6DropPodtoAPC, null, PointFromId(293841549), 1.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 6 - Launch APC
//--------------------------------------------------------------------------------------------------
bool gt_Camp6LaunchAPC_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_maxIndexOfArray = 57;
    gv_currentPointGlobal = gv_colonistsRoute6Array[0];
    gv_unloadPoint = PointFromId(1337885921);
    gv_indexOfArray = 0;
    TriggerExecute(gt_APCRouteArrowPings6, false, false);
    TriggerExecute(gt_Camp6SetRoute, true, true);
    gf_CreateAPC();
    UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_colonistsRoute6Array[0]), c_orderQueueReplace);
    gv_aPCisOnRoute = 1;
    TriggerEnable(gt_Camp6PeriodicRoute, true);
    gf_CreatePingsforCamp(PointFromId(81606294));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp6LaunchAPC_Init () {
    gt_Camp6LaunchAPC = TriggerCreate("gt_Camp6LaunchAPC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 6 - APC is in Camp
//--------------------------------------------------------------------------------------------------
bool gt_Camp6APCisinCamp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_aPCUnitIsInCamp == 0) && (EventUnit() == gv_aPCUnit)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_HansonFinalAttack, true, true);
    TriggerExecute(gt_Camp6FinalAttack, true, false);
    gf_APCisinCampConstrucion(RegionFromId(20), 4, 5, PointFromId(822029709), PointFromId(81606294), PointFromId(1983472241), PointFromId(2135133532), PointFromId(1930032059), true, PointFromId(711992819), true, "Starport", PointFromId(1384541298), gt_Camp6IsDead, gv_camp6Structures, gt_Camp6PeriodicRoute, gt_AttackWaveCamp6, "NOEVENT");
    gv_aPCUnitIsInCamp = 0;
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp6APCisinCamp_Init () {
    gt_Camp6APCisinCamp = TriggerCreate("gt_Camp6APCisinCamp_Func");
    TriggerAddEventUnitRangePoint(gt_Camp6APCisinCamp, null, PointFromId(1337885921), 0.5, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 6 - Periodic Route
//--------------------------------------------------------------------------------------------------
bool gt_Camp6PeriodicRoute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    point lv_currentPoint;
    int lv_flag;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((gv_aPCisOnRoute == 1) && (gv_aPCUnitIsInCamp == 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupHasUnit(UnitGroupIdle(5, false), gv_aPCUnit) == true)) {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute6Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    else {
        lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_aPCUnit), gv_currentPointGlobal);
        if ((lv_distance <= 1)) {
            if ((gv_indexOfArray == gv_maxIndexOfArray)) {
                UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_unloadPoint), c_orderQueueReplace);
            }
            gv_indexOfArray += 1;
            gv_currentPointGlobal = gv_colonistsRoute6Array[gv_indexOfArray];
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_aPCUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_currentPointGlobal), c_orderQueueReplace);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp6PeriodicRoute_Init () {
    gt_Camp6PeriodicRoute = TriggerCreate("gt_Camp6PeriodicRoute_Func");
    TriggerEnable(gt_Camp6PeriodicRoute, false);
    TriggerAddEventTimePeriodic(gt_Camp6PeriodicRoute, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Camp 6 Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_Camp6IsDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_camp6Structures, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(gv_camp6Structures, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_deadCampsCount += 1;
    TriggerExecute(gt_HansonCampIsDead, true, true);
    TriggerExecute(gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate, true, true);
    gv_campConstructionCompleted = 1;
    if ((gv_deadCampsCount >= 2)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Camp6IsDead_Init () {
    gt_Camp6IsDead = TriggerCreate("gt_Camp6IsDead_Func");
    TriggerAddEventUnitDied(gt_Camp6IsDead, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - First Transmission
//--------------------------------------------------------------------------------------------------
bool gt_HansonFirstTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    PortraitCreate(20, 20, c_anchorLeft, 237, 360, "HansonPortrait", "", "Talk", true, true);
    libCOMI_gf_SendMissionTransmission("CY_Intro1", true, -1);
    PortraitDestroyAll();
    Wait(5.0, c_timeGame);
    PortraitCreate(20, 20, c_anchorLeft, 237, 360, "HansonPortrait", "", "Talk", true, true);
    libCOMI_gf_SendMissionTransmission("CY_Intro2", true, -1);
    PortraitDestroyAll();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonFirstTransmission_Init () {
    gt_HansonFirstTransmission = TriggerCreate("gt_HansonFirstTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Secondary Objective
//--------------------------------------------------------------------------------------------------
bool gt_HansonSecondaryObjective_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    PortraitCreate(15, 0, c_anchorLeft, 237, 360, "HansonPortrait", "", "Taunt", true, true);
    libCOMI_gf_SendMissionTransmission("CY_SecondaryObjective", true, -1);
    PortraitDestroy(PortraitLastCreated());
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonSecondaryObjective_Init () {
    gt_HansonSecondaryObjective = TriggerCreate("gt_HansonSecondaryObjective_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Secondary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_HansonSecondaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PortraitCreate(15, 0, c_anchorLeft, 237, 360, "HansonPortrait", "", "Taunt", true, true);
    libCOMI_gf_SendMissionTransmission("CY_SecondaryObjectiveCompleted", true, -1);
    PortraitDestroy(PortraitLastCreated());
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonSecondaryObjectiveComplete_Init () {
    gt_HansonSecondaryObjectiveComplete = TriggerCreate("gt_HansonSecondaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - APC Is Ready
//--------------------------------------------------------------------------------------------------
bool gt_HansonAPCIsReady_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TransportReady", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    lv_randomizer = RandomInt(0, 2);
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonAPCIsReady_Init () {
    gt_HansonAPCIsReady = TriggerCreate("gt_HansonAPCIsReady_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Camp Captured
//--------------------------------------------------------------------------------------------------
bool gt_HansonCampCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("DefendSucces", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    lv_randomizer = RandomInt(0, 2);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonCampCaptured_Init () {
    gt_HansonCampCaptured = TriggerCreate("gt_HansonCampCaptured_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Camp Is Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_HansonCampIsUnderAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("MainObjectiveDefendDamaged", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    lv_randomizer = RandomInt(0, 2);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonCampIsUnderAttack_Init () {
    gt_HansonCampIsUnderAttack = TriggerCreate("gt_HansonCampIsUnderAttack_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Camp Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_HansonCampIsDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("CaptureControlLost", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    lv_randomizer = RandomInt(0, 2);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonCampIsDead_Init () {
    gt_HansonCampIsDead = TriggerCreate("gt_HansonCampIsDead_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - 2 Camps are Dead. Defeat.
//--------------------------------------------------------------------------------------------------
bool gt_Hanson2CampsareDeadDefeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("DefeatOE", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    PortraitCreate(15, 0, c_anchorLeft, 237, 360, "HansonPortrait", "", "Taunt", true, true);
    libCOMI_gf_SendMissionTransmission("CY_2CampsAreDead", true, -1);
    PortraitDestroy(PortraitLastCreated());
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Hanson2CampsareDeadDefeat_Init () {
    gt_Hanson2CampsareDeadDefeat = TriggerCreate("gt_Hanson2CampsareDeadDefeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - 2 APCs are Dead. Defeat.
//--------------------------------------------------------------------------------------------------
bool gt_Hanson2APCsareDeadDefeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("DefeatOE", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    PortraitDestroyAll();
    Wait(2.0, c_timeGame);
    PortraitCreate(15, 0, c_anchorLeft, 237, 360, "HansonPortrait", "", "Taunt", true, true);
    libCOMI_gf_SendMissionTransmission("CY_2APCareDead", true, -1);
    PortraitDestroyAll();
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Hanson2APCsareDeadDefeat_Init () {
    gt_Hanson2APCsareDeadDefeat = TriggerCreate("gt_Hanson2APCsareDeadDefeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - APC Is Dead
//--------------------------------------------------------------------------------------------------
bool gt_HansonAPCIsDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TransportLost", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    lv_randomizer = RandomInt(0, 2);
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonAPCIsDead_Init () {
    gt_HansonAPCIsDead = TriggerCreate("gt_HansonAPCIsDead_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - APC Is Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_HansonAPCIsUnderAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TransportUnderAttack", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonAPCIsUnderAttack_Init () {
    gt_HansonAPCIsUnderAttack = TriggerCreate("gt_HansonAPCIsUnderAttack_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Sensor Tower
//--------------------------------------------------------------------------------------------------
bool gt_HansonSensorTower_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PortraitCreate(15, 0, c_anchorLeft, 237, 360, "HansonPortrait", "", "Talk", true, true);
    libCOMI_gf_SendMissionTransmission("CY_SensorTower", true, -1);
    PortraitDestroyAll();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonSensorTower_Init () {
    gt_HansonSensorTower = TriggerCreate("gt_HansonSensorTower_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Final Attack
//--------------------------------------------------------------------------------------------------
bool gt_HansonFinalAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    PortraitCreate(15, 0, c_anchorLeft, 237, 360, "HansonPortrait", "", "Taunt", true, true);
    libCOMI_gf_SendMissionTransmission("CY_LastAttack", true, -1);
    PortraitDestroyAll();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonFinalAttack_Init () {
    gt_HansonFinalAttack = TriggerCreate("gt_HansonFinalAttack_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hanson - Bonus Camps
//--------------------------------------------------------------------------------------------------
bool gt_HansonBonusCamps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    PortraitCreate(15, 0, c_anchorLeft, 237, 360, "HansonPortrait", "", "Taunt", true, true);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SendMissionTransmission("CY_BonusCamps", true, -1);
    PortraitDestroy(PortraitLastCreated());
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HansonBonusCamps_Init () {
    gt_HansonBonusCamps = TriggerCreate("gt_HansonBonusCamps_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Secondary - Marine - CleanUp The Facility Area
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryMarineCleanUpTheFacilityArea_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveDefend", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryMarineCleanUpTheFacilityArea_Init () {
    gt_SecondaryMarineCleanUpTheFacilityArea = TriggerCreate("gt_SecondaryMarineCleanUpTheFacilityArea_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Secondary - Hanson - Hold on failed
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryHansonHoldonfailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveLost", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    lv_randomizer = RandomInt(0, 2);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryHansonHoldonfailed_Init () {
    gt_SecondaryHansonHoldonfailed = TriggerCreate("gt_SecondaryHansonHoldonfailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Secondary - Hanson - Hold on Complete
//--------------------------------------------------------------------------------------------------
bool gt_SecondaryHansonHoldonComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveUpdated", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    lv_randomizer = RandomInt(0, 2);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SecondaryHansonHoldonComplete_Init () {
    gt_SecondaryHansonHoldonComplete = TriggerCreate("gt_SecondaryHansonHoldonComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: All Amon's Structures have been destroyed
//--------------------------------------------------------------------------------------------------
bool gt_AllAmonsStructureshavebeendestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_allEnemyStructures, EventUnit()) == true) && (UnitGroupCount(gv_allEnemyStructures, c_unitCountAlive) == 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_VictorySequence, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AllAmonsStructureshavebeendestroyed_Init () {
    gt_AllAmonsStructureshavebeendestroyed = TriggerCreate("gt_AllAmonsStructureshavebeendestroyed_Func");
    TriggerAddEventUnitDied(gt_AllAmonsStructureshavebeendestroyed, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DefendReminder", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(21), 6.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(21), 6.0, false);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(21)), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionFromId(21)), 1.5, -1, 10.0, false);
    TriggerExecute(gt_DefeatShipFlyesAway, true, true);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Ship Flyes Away
//--------------------------------------------------------------------------------------------------
bool gt_DefeatShipFlyesAway_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shipUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_shipUnit = UnitFromId(1583954415);
    UnitGroupLoopBegin(UnitGroup(null, 5, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_shipUnit, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_shipUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1188465759)), c_orderQueueAddToEnd);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatShipFlyesAway_Init () {
    gt_DefeatShipFlyesAway = TriggerCreate("gt_DefeatShipFlyesAway_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_deadCampsCount < 2))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_VictoryFanfareQ, true, true);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveVictory", false, -1);
    UnitPauseAll(true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BioDomeCommandFlying", c_unitCreateIgnorePlacement, 5, PointFromId(506457290));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(200161374)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BioDomeCommandFlying", c_unitCreateIgnorePlacement, 5, PointFromId(332038443));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(550365429)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ColonistShipFlying", c_unitCreateIgnorePlacement, 5, PointFromId(574802190));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1256212283)), c_orderQueueReplace);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, PointFromId(506457290), 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, PointFromId(506457290), 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E5C8709E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(8);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(57);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(14);
    lv_spawnLocationIter = 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(6);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(13);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(14);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (4.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (7.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (9.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (12.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (15.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (19.0 * 60.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 1 Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp1Final_Func (bool testConds, bool runActions) {
    int auto8F03B55A_val;
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 2);
    auto8F03B55A_val = lv_randomizer;
    if (auto8F03B55A_val == 0) {
        TriggerStop(TriggerGetCurrent());
    }
    else if (auto8F03B55A_val == 1) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto8F03B55A_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1023496499));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1023496499));
    lv_randomizer = RandomInt(0, 1);
    if ((UnitGroupCount(gv_camp1Structures, c_unitCountAlive) != 0)) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(456438477), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp1Final_Init () {
    gt_AttackWaveCamp1Final = TriggerCreate("gt_AttackWaveCamp1Final_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 2 Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp2Final_Func (bool testConds, bool runActions) {
    int auto87EE62EB_val;
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 2);
    auto87EE62EB_val = lv_randomizer;
    if (auto87EE62EB_val == 0) {
        TriggerStop(TriggerGetCurrent());
    }
    else if (auto87EE62EB_val == 1) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto87EE62EB_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1974010391));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1974010391));
    lv_randomizer = RandomInt(0, 1);
    if ((UnitGroupCount(gv_camp2Structures, c_unitCountAlive) != 0)) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1236032790), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp2Final_Init () {
    gt_AttackWaveCamp2Final = TriggerCreate("gt_AttackWaveCamp2Final_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 3 Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp3Final_Func (bool testConds, bool runActions) {
    int auto110B431A_val;
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 2);
    auto110B431A_val = lv_randomizer;
    if (auto110B431A_val == 0) {
        TriggerStop(TriggerGetCurrent());
    }
    else if (auto110B431A_val == 1) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto110B431A_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(825629526));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(825629526));
    lv_randomizer = RandomInt(0, 1);
    if ((UnitGroupCount(gv_camp3Structures, c_unitCountAlive) != 0)) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1348680410), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp3Final_Init () {
    gt_AttackWaveCamp3Final = TriggerCreate("gt_AttackWaveCamp3Final_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 4 Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp4Final_Func (bool testConds, bool runActions) {
    int autoC3699B4E_val;
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 2);
    autoC3699B4E_val = lv_randomizer;
    if (autoC3699B4E_val == 0) {
        TriggerStop(TriggerGetCurrent());
    }
    else if (autoC3699B4E_val == 1) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (autoC3699B4E_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1937460410));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1937460410));
    lv_randomizer = RandomInt(0, 1);
    if ((UnitGroupCount(gv_camp4Structures, c_unitCountAlive) != 0)) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(393560610), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp4Final_Init () {
    gt_AttackWaveCamp4Final = TriggerCreate("gt_AttackWaveCamp4Final_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 5 Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp5Final_Func (bool testConds, bool runActions) {
    int auto3FA74165_val;
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 2);
    auto3FA74165_val = lv_randomizer;
    if (auto3FA74165_val == 0) {
        TriggerStop(TriggerGetCurrent());
    }
    else if (auto3FA74165_val == 1) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (auto3FA74165_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1605379981));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1605379981));
    lv_randomizer = RandomInt(0, 1);
    if ((UnitGroupCount(gv_camp5Structures, c_unitCountAlive) != 0)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    }
    else {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1259980596), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp5Final_Init () {
    gt_AttackWaveCamp5Final = TriggerCreate("gt_AttackWaveCamp5Final_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 6 Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp6Final_Func (bool testConds, bool runActions) {
    int auto3B65A72F_val;
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 2);
    auto3B65A72F_val = lv_randomizer;
    if (auto3B65A72F_val == 0) {
        TriggerStop(TriggerGetCurrent());
    }
    else if (auto3B65A72F_val == 1) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (auto3B65A72F_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1605379981));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1605379981));
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1490085822), "Medivac");
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp6Final_Init () {
    gt_AttackWaveCamp6Final = TriggerCreate("gt_AttackWaveCamp6Final_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 1
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1023496499));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1023496499));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp1_Init () {
    gt_AttackWaveCamp1 = TriggerCreate("gt_AttackWaveCamp1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 2
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 1);
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1974010391));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1974010391));
    if ((lv_randomizer == 0)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    }
    else {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1259980596), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp2_Init () {
    gt_AttackWaveCamp2 = TriggerCreate("gt_AttackWaveCamp2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 3
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 1);
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(825629526));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(825629526));
    if ((lv_randomizer == 0)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    }
    else {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(2009020835), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp3_Init () {
    gt_AttackWaveCamp3 = TriggerCreate("gt_AttackWaveCamp3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 4
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 1);
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1937460410));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1937460410));
    if ((lv_randomizer == 0)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    }
    else {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(2009020835), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp4_Init () {
    gt_AttackWaveCamp4 = TriggerCreate("gt_AttackWaveCamp4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 5
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 1);
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1605379981));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1605379981));
    if ((lv_randomizer == 0)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    }
    else {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1259980596), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp5_Init () {
    gt_AttackWaveCamp5 = TriggerCreate("gt_AttackWaveCamp5_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Camp 6
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveCamp6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomizer = RandomInt(0, 1);
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(81606294));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(81606294));
    if ((lv_randomizer == 0)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    }
    else {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1259980596), "Medivac");
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveCamp6_Init () {
    gt_AttackWaveCamp6 = TriggerCreate("gt_AttackWaveCamp6_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Red Facility - DropPod
//--------------------------------------------------------------------------------------------------
bool gt_RedFacilityDropPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(508499054));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(508499054));
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(1259980596), "Medivac");
    libCOMI_gf_DropPodWarpInUnitGroup(libCOMI_gf_LastCreatedCoopAttackForce(), PointFromId(1989253996));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RedFacilityDropPod_Init () {
    gt_RedFacilityDropPod = TriggerCreate("gt_RedFacilityDropPod_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teal Facility - DropPod
//--------------------------------------------------------------------------------------------------
bool gt_TealFacilityDropPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(793036839));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(793036839));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_DropPodWarpInUnitGroup(libCOMI_gf_LastCreatedCoopAttackForce(), PointFromId(1268780087));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TealFacilityDropPod_Init () {
    gt_TealFacilityDropPod = TriggerCreate("gt_TealFacilityDropPod_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Secondary Red
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveSecondaryRed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(508499054));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(508499054));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(853781732), "Medivac");
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(509650742), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveSecondaryRed_Init () {
    gt_AttackWaveSecondaryRed = TriggerCreate("gt_AttackWaveSecondaryRed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Secondary Teal
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveSecondaryTeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(793036839));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(793036839));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(1630852538), "Medivac");
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1042013178), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveSecondaryTeal_Init () {
    gt_AttackWaveSecondaryTeal = TriggerCreate("gt_AttackWaveSecondaryTeal_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave APC
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveAPC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_aPCUnit) == true))) {
            return false;
        }
        if (!((gv_aPCisOnRoute == 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((GameGetMissionTime() >= (4.0*60))) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    if ((GameGetMissionTime() >= (7.0*60))) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    if ((GameGetMissionTime() >= (8.0*60))) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    if ((GameGetMissionTime() >= (11.0*60))) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    if ((GameGetMissionTime() >= (14.0*60))) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    if ((GameGetMissionTime() >= (17.0*60))) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    if ((GameGetMissionTime() >= (20.0*60))) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, UnitGetPosition(gv_aPCUnit));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, UnitGetPosition(gv_aPCUnit));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    gf_AddHybridstoAttackWave(GameGetMissionTime());
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveAPC_Init () {
    gt_AttackWaveAPC = TriggerCreate("gt_AttackWaveAPC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    PlayerGroupLoopEnd();
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(367))) {
        gv_attackWaveA_Wave05Path = PointFromId(358);
    }
    else {
        gv_attackWaveA_Wave05Path = PointFromId(367);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Sensor Tower 1
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveSensorTower1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1356500068));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1356500068));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(347866970), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(875400059), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveSensorTower1_Init () {
    gt_AttackWaveSensorTower1 = TriggerCreate("gt_AttackWaveSensorTower1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Sensor Tower 2
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveSensorTower2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomizer;
    int lv_resourceBucket;
    int lv_techBucket;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1574818404));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1574818404));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(347866970), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1983860709), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AttackWaveSensorTower2_Init () {
    gt_AttackWaveSensorTower2 = TriggerCreate("gt_AttackWaveSensorTower2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Six Camps
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSixCamps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TextExpressionSetToken("Param/Expression/01CAC7B0", "A", StringExternal("Param/Value/3E5B2493"));
    TextExpressionSetToken("Param/Expression/01CAC7B0", "B", IntToText(gv_capturedCamps));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/01CAC7B0"), StringToText(""), c_objectiveStateActive, true);
    gv_objectiveBuildUp6Camps = ObjectiveLastCreated();
    ObjectiveShow(gv_objectiveBuildUp6Camps, libCOMI_gf_HumanPlayers(), true);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSixCamps_Init () {
    gt_ObjectiveSixCamps = TriggerCreate("gt_ObjectiveSixCamps_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Do Not Loose 2 Camps
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDoNotLoose2Camps_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TextExpressionSetToken("Param/Expression/68CBA353", "A", StringExternal("Param/Value/2FDC9087"));
    TextExpressionSetToken("Param/Expression/68CBA353", "B", IntToText(gv_deadCampsCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/68CBA353"), StringToText(""), c_objectiveStateActive, true);
    gv_objectiveDoNotLoose2ormore = ObjectiveLastCreated();
    ObjectiveShow(gv_objectiveDoNotLoose2ormore, libCOMI_gf_HumanPlayers(), true);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDoNotLoose2Camps_Init () {
    gt_ObjectiveDoNotLoose2Camps = TriggerCreate("gt_ObjectiveDoNotLoose2Camps_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Primary Objectives - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimaryObjectivesFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_objectiveBuildUp6Camps, c_objectiveStateFailed);
    ObjectiveSetState(gv_objectiveDoNotLoose2ormore, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePrimaryObjectivesFailed_Init () {
    gt_ObjectivePrimaryObjectivesFailed = TriggerCreate("gt_ObjectivePrimaryObjectivesFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Primary Objectives Camp or APC Dead - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TextExpressionSetToken("Param/Expression/F541C82A", "A", StringExternal("Param/Value/BA0C032D"));
    TextExpressionSetToken("Param/Expression/F541C82A", "B", IntToText(gv_deadCampsCount));
    ObjectiveSetName(gv_objectiveDoNotLoose2ormore, TextExpressionAssemble("Param/Expression/F541C82A"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate_Init () {
    gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate = TriggerCreate("gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Primary Objectives Camp Captured - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimaryObjectivesCampCapturedUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TextExpressionSetToken("Param/Expression/75CACD82", "A", StringExternal("Param/Value/2C2572E3"));
    TextExpressionSetToken("Param/Expression/75CACD82", "B", IntToText(gv_capturedCamps));
    ObjectiveSetName(gv_objectiveBuildUp6Camps, TextExpressionAssemble("Param/Expression/75CACD82"));
    TriggerExecute(gt_HansonCampCaptured, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectivePrimaryObjectivesCampCapturedUpdate_Init () {
    gt_ObjectivePrimaryObjectivesCampCapturedUpdate = TriggerCreate("gt_ObjectivePrimaryObjectivesCampCapturedUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Create Secondary 
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCreateSecondary_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    ObjectiveCreate(StringExternal("Param/Value/F6ED40A5"), StringExternal("Param/Value/039D8E92"), c_objectiveStateActive, false);
    gv_objectiveSecondaryObjectiveScience = ObjectiveLastCreated();
    ObjectiveShow(gv_objectiveSecondaryObjectiveScience, libCOMI_gf_HumanPlayers(), true);
    ObjectiveCreate(StringExternal("Param/Value/78F3B86E"), StringExternal("Param/Value/A85AD58F"), c_objectiveStateActive, false);
    gv_objectiveSecondaryObjectiveWar = ObjectiveLastCreated();
    ObjectiveShow(gv_objectiveSecondaryObjectiveWar, libCOMI_gf_HumanPlayers(), true);
    TriggerExecute(gt_CreateSecondaryObjPings, true, false);
    TriggerSendEvent("Outposts");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCreateSecondary_Init () {
    gt_ObjectiveCreateSecondary = TriggerCreate("gt_ObjectiveCreateSecondary_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Science Captured
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveScienceCaptured_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryHansonHoldonComplete, true, false);
    ObjectiveSetState(gv_objectiveSecondaryObjectiveScience, c_objectiveStateCompleted);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveScienceCaptured_Init () {
    gt_ObjectiveScienceCaptured = TriggerCreate("gt_ObjectiveScienceCaptured_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Science Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveScienceFailed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryHansonHoldonfailed, true, false);
    ObjectiveSetState(gv_objectiveSecondaryObjectiveScience, c_objectiveStateFailed);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveScienceFailed_Init () {
    gt_ObjectiveScienceFailed = TriggerCreate("gt_ObjectiveScienceFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - War Captured
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarCaptured_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryHansonHoldonComplete, true, false);
    ObjectiveSetState(gv_objectiveSecondaryObjectiveWar, c_objectiveStateCompleted);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarCaptured_Init () {
    gt_ObjectiveWarCaptured = TriggerCreate("gt_ObjectiveWarCaptured_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - War Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarFailed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SecondaryHansonHoldonfailed, true, false);
    ObjectiveSetState(gv_objectiveSecondaryObjectiveWar, c_objectiveStateFailed);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarFailed_Init () {
    gt_ObjectiveWarFailed = TriggerCreate("gt_ObjectiveWarFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartGameQ_Init();
    gt_APCisUnderAttack_Init();
    gt_APCDies_Init();
    gt_APCRouteArrowPings1_Init();
    gt_APCRouteArrowPings2_Init();
    gt_APCRouteArrowPings3_Init();
    gt_APCRouteArrowPings4_Init();
    gt_APCRouteArrowPings5_Init();
    gt_APCRouteArrowPings6_Init();
    gt_Camp1SetRoute_Init();
    gt_Camp2SetRoute_Init();
    gt_Camp3SetRoute_Init();
    gt_Camp4SetRoute_Init();
    gt_Camp5SetRoute_Init();
    gt_Camp6SetRoute_Init();
    gt_APCIsIdle_Init();
    gt_SetUpAttackWavestoAPC_Init();
    gt_Player5AddAllHutstoUnitGroups_Init();
    gt_Player5SetCommanderandother_Init();
    gt_Player5StructureArmorUpgrade_Init();
    gt_Player5StructureFireSupressionUpgradeandTurret_Init();
    gt_Player5FortifiedBunkerUpgrade_Init();
    gt_ConstructRedOutpost_Init();
    gt_ConstructTealOutpost_Init();
    gt_RedTimeris0_Init();
    gt_TealTimeris0_Init();
    gt_CreateSecondaryObjPings_Init();
    gt_RedUnitActivatesScienceFacility_Init();
    gt_TealUnitActivatesWarFacility_Init();
    gt_RedScienceFacilityCaptured_Init();
    gt_TealWarFacilityCaptured_Init();
    gt_WarFacilityCapturedMakeUpgrades_Init();
    gt_ScienceFacilityCapturedMakeUpgrades_Init();
    gt_ConstructSensorTower1_Init();
    gt_ConstructSensorTower2_Init();
    gt_AnyCampIsUnderAttack_Init();
    gt_APCReadyCamp1_Init();
    gt_Camp1LaunchAPC_Init();
    gt_Camp1APCisinCamp_Init();
    gt_Camp1PeriodicRoute_Init();
    gt_Camp1Bonus_Init();
    gt_Camp1IsDead_Init();
    gt_APCReadyCamp2_Init();
    gt_Camp2DropPodtoAPC_Init();
    gt_Camp2LaunchAPC_Init();
    gt_Camp2APCisinCamp_Init();
    gt_Camp2PeriodicRoute_Init();
    gt_Camp2Bonus_Init();
    gt_Camp2IsDead_Init();
    gt_APCReadyCamp3_Init();
    gt_Camp3DropPodtoAPC_Init();
    gt_Camp3LaunchAPC_Init();
    gt_Camp3APCisinCamp_Init();
    gt_Camp3PeriodicRoute_Init();
    gt_Camp3Bonus_Init();
    gt_Camp3IsDead_Init();
    gt_APCReadyCamp4_Init();
    gt_Camp4DropPodtoAPC_Init();
    gt_Camp4LaunchAPC_Init();
    gt_Camp4APCisinCamp_Init();
    gt_Camp4PeriodicRoute_Init();
    gt_Camp4Bonus_Init();
    gt_Camp4IsDead_Init();
    gt_APCReadyCamp5_Init();
    gt_Camp5DropPodtoAPC_Init();
    gt_Camp5LaunchAPC_Init();
    gt_Camp5APCisinCamp_Init();
    gt_Camp5PeriodicRoute_Init();
    gt_Camp5Bonus_Init();
    gt_Camp5IsDead_Init();
    gt_APCReadyCamp6_Init();
    gt_Camp6FinalAttack_Init();
    gt_Camp6DropPodtoAPC_Init();
    gt_Camp6LaunchAPC_Init();
    gt_Camp6APCisinCamp_Init();
    gt_Camp6PeriodicRoute_Init();
    gt_Camp6IsDead_Init();
    gt_EnemyAttackingQ_Init();
    gt_HansonFirstTransmission_Init();
    gt_HansonSecondaryObjective_Init();
    gt_HansonSecondaryObjectiveComplete_Init();
    gt_HansonAPCIsReady_Init();
    gt_HansonCampCaptured_Init();
    gt_HansonCampIsUnderAttack_Init();
    gt_HansonCampIsDead_Init();
    gt_Hanson2CampsareDeadDefeat_Init();
    gt_Hanson2APCsareDeadDefeat_Init();
    gt_HansonAPCIsDead_Init();
    gt_HansonAPCIsUnderAttack_Init();
    gt_HansonSensorTower_Init();
    gt_HansonFinalAttack_Init();
    gt_HansonBonusCamps_Init();
    gt_SecondaryMarineCleanUpTheFacilityArea_Init();
    gt_SecondaryHansonHoldonfailed_Init();
    gt_SecondaryHansonHoldonComplete_Init();
    gt_AllAmonsStructureshavebeendestroyed_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_DefeatShipFlyesAway_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_StartAI_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWaveCamp1Final_Init();
    gt_AttackWaveCamp2Final_Init();
    gt_AttackWaveCamp3Final_Init();
    gt_AttackWaveCamp4Final_Init();
    gt_AttackWaveCamp5Final_Init();
    gt_AttackWaveCamp6Final_Init();
    gt_AttackWaveCamp1_Init();
    gt_AttackWaveCamp2_Init();
    gt_AttackWaveCamp3_Init();
    gt_AttackWaveCamp4_Init();
    gt_AttackWaveCamp5_Init();
    gt_AttackWaveCamp6_Init();
    gt_RedFacilityDropPod_Init();
    gt_TealFacilityDropPod_Init();
    gt_AttackWaveSecondaryRed_Init();
    gt_AttackWaveSecondaryTeal_Init();
    gt_AttackWaveAPC_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_AttackWaveSensorTower1_Init();
    gt_AttackWaveSensorTower2_Init();
    gt_ObjectiveSixCamps_Init();
    gt_ObjectiveDoNotLoose2Camps_Init();
    gt_ObjectivePrimaryObjectivesFailed_Init();
    gt_ObjectivePrimaryObjectivesCamporAPCDeadUpdate_Init();
    gt_ObjectivePrimaryObjectivesCampCapturedUpdate_Init();
    gt_ObjectiveCreateSecondary_Init();
    gt_ObjectiveScienceCaptured_Init();
    gt_ObjectiveScienceFailed_Init();
    gt_ObjectiveWarCaptured_Init();
    gt_ObjectiveWarFailed_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
