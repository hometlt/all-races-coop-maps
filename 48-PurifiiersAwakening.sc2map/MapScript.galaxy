//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC 2017: Awakening of the Purifiers
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "LibCOMI"
include "ai0108C8E1"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libVoiC_InitLib();
    libVCMI_InitLib();
    libVCUI_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_02_DOMINION2 = 3;
const int gv_pLAYER_02_DOMINION3 = 4;
const int gv_pLAYER_02_DOMINION4 = 5;
const int gv_pLAYER_02_DOMINION5 = 6;
const int gv_pLAYER_02_DOMINION6 = 7;
const int gv_pLAYER_02_DOMINION7 = 8;
const int gv_pLAYER_02_DOMINION8 = 9;
const int gv_objectivePurifierWardenMax = 1;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORDZergBase {
    bool lv_isEngaged;
    bool lv_isDestroyed;
    int lv_basePlayer;
    region lv_baseRegion;
    region lv_baseRevealRegion;
    point lv_basePingPoint;
    point lv_waveGatherPoint;
    region lv_waveDespawnRegion;
};

struct gs_RECORDStasisChambers {
    region lv_revealRegion;
    point lv_spawnPoint;
    point lv_waypoint01;
    point lv_waypoint02;
    point lv_waypoint03;
    unitgroup lv_warpathGroup;
    bool lv_isActivated;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_PRESETCoreMatrixApproach_NorthEast = 0;
const int ge_PRESETCoreMatrixApproach_SouthEast = 1;
const int ge_PRESETCoreMatrixApproach_SouthWest = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_purifiersSpawned;
int gv_buttonDialog;
int gv_buttonNW;
int gv_buttonNE;
int gv_buttonSE;
int gv_buttonCore;
unit gv_hybrid01;
string gv_mapMusicTrack;
playergroup gv_enemyPlayers;
unit gv_purifierCoreMatrix;
unit gv_purifierEnergizer;
unit gv_purifierSuperWarpgate;
unit gv_purifyCircuit;
gs_RECORDZergBase[5] gv_zergBase;
int gv_zergBasesDestroyedCount;
unit[13] gv_nullCircuits;
gs_RECORDStasisChambers[5] gv_purifierStasisChambers;
int gv_purifierStasisChambersOnlineCount;
unit gv_purifierWarpathEscortTargetUnit;
unitgroup gv_purifierWarpathEscortTargetUnitGroup;
fixed gv_warpinAngle;
fixed gv_warpinAngleIteration;
int gv_coreMatrixWarningCycle;
unit gv_purifierWarden;
int gv_purifierWardenBattlecryCount;
int gv_repeatWaveCycle;
fixed gv_coreMatrixLowestShields;
timer gv_purifierComboTimer;
int gv_hybridKilledCount;
int gv_masteryBehemothKilledCount;
timer gv_masteryBehemothKillTimer;
int gv_objectiveDestroyZergBase;
int gv_objectiveNullCircuitsCount;
int gv_objectiveNullCircuitsMax;
int gv_objectiveDestroyZergBase2;
int gv_objectiveRescueStalkers;
int gv_objectivePurifierWardenCount;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicCoreMatrix;
unit gv_cinematicCybros;
unitgroup gv_cinematicPurifierGroup;
unitgroup gv_cinematicZergGroup;
unit gv_cinematicPylon;
unitgroup gv_cinematicZergAttackerGroup;
unitgroup gv_cinematicProtossDefenderGroup;
bool gv_introZergSpreadingInfestation;
unitgroup gv_introZergInfestation;

void InitGlobals () {
    int init_i;

    gv_buttonDialog = c_invalidDialogId;
    gv_buttonNW = c_invalidDialogControlId;
    gv_buttonNE = c_invalidDialogControlId;
    gv_buttonSE = c_invalidDialogControlId;
    gv_buttonCore = c_invalidDialogControlId;
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_purifierCoreMatrix = UnitFromId(436);
    gv_purifierSuperWarpgate = UnitFromId(3168);
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_purifierStasisChambers[init_i].lv_warpathGroup = UnitGroupEmpty();
    }
    gv_purifierWarpathEscortTargetUnitGroup = UnitGroupEmpty();
    gv_purifierWarden = UnitFromId(610);
    gv_purifierComboTimer = TimerCreate();
    gv_masteryBehemothKillTimer = TimerCreate();
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveNullCircuitsMax = 12;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicPurifierGroup = UnitGroupEmpty();
    gv_cinematicZergGroup = UnitGroupEmpty();
    gv_cinematicZergAttackerGroup = UnitGroupEmpty();
    gv_cinematicProtossDefenderGroup = UnitGroupEmpty();
    gv_introZergInfestation = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateWarpInEffect (unit lp_unit);
unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup);
void gf_AttackBase (int lp_player);
int gf_GetZergBaseTarget (int lp_containmentTowerIndex);
void gf_ActivateStasisChamber (int lp_containmentTowerIndex);
void gf_WarpInPurifiers (int lp_stasisChamberIndex);
void gf_SendPurifierWarpathEscortGroup (int lp_containmentTowerIndex, int lp_chosenZergBaseTarget);
void gf_DespawnPurifiers (int lp_containmentTowerIndex, int lp_zergBaseIndex);
void gf_WarpOutPurifier (unit lp_warpOutUnit);
void gf_RevealPurifierContainmentTower (unit lp_purifierUnit);
void gf_TrackNullCircuitReticleAndTextTag (unit lp_inhibitorUnit);
string gf_GetCybrosLightConfiguration ();
void gf_PingClosestNullCircuitToPoint (point lp_point);
void gf_HybridBehemothAI (unit lp_hybrid);
void gf_HybridNemesisAI (unit lp_hybrid);
int gf_GetZergBaseAttacker (int lp_coreMatrixApproach);
void gf_AddWaypointIfZergBase03Attacking (int lp_zergBaseIndex, int lp_coreMatrixApproach);
void gf_UpdateWaveGroupPing (unitgroup lp_unitGroup, int lp_ping);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
point gf_AttackWaveSpawn (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_Init09Help;
trigger gt_InvulnerableCircuits;
trigger gt_RemovePings;
trigger gt_Purify;
trigger gt_CircuitDiesRetarget;
trigger gt_DialogInit;
trigger gt_DialogSetup;
trigger gt_DialogButtonPressed;
trigger gt_DisableAllButtons;
trigger gt_EnableButtons;
trigger gt_MegalithPush;
trigger gt_Ambush;
trigger gt_BanelingAmbush;
trigger gt_StealthAnnounce;
trigger gt_MegalithAmbush;
trigger gt_Teleport1;
trigger gt_Teleport2;
trigger gt_Harass;
trigger gt_Torrasque;
trigger gt_StartGame;
trigger gt_TransmissionPurifierNullCircuitsQ;
trigger gt_TransmissionPurifierCoreMatrixQ;
trigger gt_ZergBasesInit;
trigger gt_ZergBaseDestroyed;
trigger gt_TransmissionAllZergBasesDestroyedQ;
trigger gt_TurnOffWarnOfZergBaseTriggers;
trigger gt_TransmissionWarnOfZergBase01Q;
trigger gt_TransmissionWarnOfZergBase02Q;
trigger gt_TransmissionWarnOfZergBase03Q;
trigger gt_TransmissionWarnOfZergBase04Q;
trigger gt_KillLarva;
trigger gt_PurifierStasisChambersInit;
trigger gt_AssignPurifierUnitstoWaveGroup;
trigger gt_NullCircuitDestroyed;
trigger gt_TransmissionActivateStasisChamberQ;
trigger gt_TransmissionInitiateAttackFromStasisChamberQ;
trigger gt_TransmissionDestroyNullCircuitsReminderQ;
trigger gt_TransmissionPlayerSeesFirstNullCircuitRevealQ;
trigger gt_TransmissionLastFewNullCircuitsToGoEncouragementQ;
trigger gt_TrackNullCircuitPings;
trigger gt_UpdateCybrosLights;
trigger gt_TrackWarningPingOnCoreMatrix;
trigger gt_TransmissionCoreMatrixAttackedQ;
trigger gt_TransmissionCoreMatrixBadlyDamagedQ;
trigger gt_TransmissionCoreMatrixCriticallyDamagedQ;
trigger gt_RevealBonusObjectiveAfterTime;
trigger gt_UnitEntersRevealBonusObjectiveRegion;
trigger gt_TransmissionPurifierWardenRevealQ;
trigger gt_TransmissionPurifierWardenDiesQ;
trigger gt_TransmissionPurifierMegalithReachesEnd;
trigger gt_TransmissionPurifierMegalithDies;
trigger gt_PurifierWardenBehavior;
trigger gt_TransmissionPurifierWardenEngagesPlayerQ;
trigger gt_EnemyAttackingTransmission;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AIUpgradesNormal;
trigger gt_AIUpgradesHard;
trigger gt_AIUpgradesPurifierAttackGroup;
trigger gt_HybridCreated;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_AttackWave08;
trigger gt_ZergReinforcementsController;
trigger gt_ZergReinforcements01Q;
trigger gt_ZergReinforcements02;
trigger gt_ZergReinforcements03;
trigger gt_ZergReinforcements04Hard;
trigger gt_StatCoreMatrixMinimumShields;
trigger gt_StatHybridSlain;
trigger gt_AchievementPurifierActivationCombo;
trigger gt_AchievementHybridBehemothsKilledMastery;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryStasisChambersCompleted;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipReadyQ;
trigger gt_ObjectiveNullCircuitsCreate;
trigger gt_ObjectiveNullCircuitsComplete;
trigger gt_ObjectiveNullCircuitsUpdate;
trigger gt_ObjectiveNullCircuitsFailed;
trigger gt_ObjectivePurifiersMustSurviveCreate;
trigger gt_ObjectivePurifiersMustSurviveComplete;
trigger gt_ObjectivePurifiersMustSurviveFailed;
trigger gt_ObjectiveDestroyPurifierWardenCreate;
trigger gt_ObjectiveDestroyPurifierWardenUpdate;
trigger gt_ObjectiveDestroyPurifierWardenComplete;
trigger gt_ObjectiveDestroyPurifierWardenFailed;
trigger gt_IntroCinematic;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai0108C8E1") { ai0108C8E1_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { ai0108C8E1_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai0108C8E1") { return ai0108C8E1_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_CreateWarpInEffect_Trigger = null;
unit auto_gf_CreateWarpInEffect_lp_unit;

void gf_CreateWarpInEffect (unit lp_unit) {
    auto_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_gf_CreateWarpInEffect_Trigger == null) {
        auto_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "HybridWarpInEffect", "Ref_Center");
        lv_model = libNtve_gf_ActorLastCreated();
    }
    else {
        if (((UnitGetType(lp_unit) == "HybridDominatorVoid") || (UnitGetType(lp_unit) == "HybridBehemoth"))) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "Signal Birth");
        }
        else {
            libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Center");
            lv_model = libNtve_gf_ActorLastCreated();
        }
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_model);
    if ((UnitIsAlive(lp_unit) == true)) {
        UnitAbilityEnable(lp_unit, "move", true);
        UnitAbilityEnable(lp_unit, "attack", true);
    }

    return true;
}

unit gf_ToughestUnitinUnitGroup (unitgroup lp_unitGroup) {
    // Variable Declarations
    int lv_unitCount;
    unit lv_currentUnit;
    unit lv_targetUnit;

    // Variable Initialization

    // Implementation
    lv_unitCount = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
    if ((lv_unitCount == 0)) {
        lv_targetUnit = null;
    }
    else if ((lv_unitCount == 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
    }
    else if ((lv_unitCount > 1)) {
        lv_targetUnit = UnitGroupUnit(lp_unitGroup, 1);
        IntLoopBegin(2, lv_unitCount);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_currentUnit = UnitGroupUnit(lp_unitGroup, IntLoopCurrent());
            if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropVitality, c_unitPropCurrent) > UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent))) {
                lv_targetUnit = lv_currentUnit;
            }
            else {
                lv_currentUnit = null;
            }
        }
        IntLoopEnd();
    }
    return lv_targetUnit;
}

trigger auto_gf_AttackBase_Trigger = null;
int auto_gf_AttackBase_lp_player;

void gf_AttackBase (int lp_player) {
    auto_gf_AttackBase_lp_player = lp_player;

    if (auto_gf_AttackBase_Trigger == null) {
        auto_gf_AttackBase_Trigger = TriggerCreate("auto_gf_AttackBase_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackBase_Trigger, false, false);
}

bool auto_gf_AttackBase_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AttackBase_lp_player;

    // Variable Declarations
    point lv_point;

    // Variable Initialization

    // Implementation
    lv_point = PlayerStartLocation(lp_player);
    libVCMI_gf_PingMinimapCampaign(libCOMI_gf_HumanPlayers(), lv_point, 0.5, Color(100.00, 50.20, 0.00));
    UnitGroupIssueOrder(UnitGroup("ZealotPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("StalkerPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("SentryPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("ColossusPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("FenixChampion", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    UnitGroupIssueOrder(UnitGroup("ZealotPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("StalkerPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("SentryPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("ColossusPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("FenixChampion", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(lp_player)), c_orderQueueReplace);
    return true;
}

int gf_GetZergBaseTarget (int lp_containmentTowerIndex) {
    int autoCF9A4388_val;

    // Variable Declarations
    int lv_i;
    int[5] lv_zergBaseSortList;

    // Variable Initialization

    // Implementation
    autoCF9A4388_val = lp_containmentTowerIndex;
    if (autoCF9A4388_val == 1) {
        return 3;
    }
    else if (autoCF9A4388_val == 2) {
        return 3;
    }
    else if (autoCF9A4388_val == 3) {
        return 4;
    }
    else if (autoCF9A4388_val == 4) {
        return 4;
    }
    else {
    }
    return 3;
}

void gf_ActivateStasisChamber (int lp_containmentTowerIndex) {
    // Variable Declarations
    int lv_chosenZergBaseTarget;

    // Variable Initialization

    // Implementation
    if ((libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1) && (TimerGetRemaining(gv_purifierComboTimer) > 0.0)) {
        TriggerExecute(gt_AchievementPurifierActivationCombo, true, false);
    }
    else {
        TimerStart(gv_purifierComboTimer, 60.0, false, c_timeAI);
    }
    libVCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/E441FB13"));
    gv_purifierStasisChambersOnlineCount += 1;
    gv_purifierStasisChambers[lp_containmentTowerIndex].lv_isActivated = true;
    Wait(2.0, c_timeGame);
    if ((gv_purifierStasisChambersOnlineCount == 1)) {
        TriggerExecute(gt_TransmissionActivateStasisChamberQ, true, true);
        Wait(1.0, c_timeGame);
        VisRevealArea(gv_pLAYER_01_USER, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_revealRegion, 32.0, false);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_purifierStasisChambers[lp_containmentTowerIndex].lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
        TriggerExecute(gt_TransmissionInitiateAttackFromStasisChamberQ, true, true);
    }
    else {
        TriggerExecute(gt_UpdateCybrosLights, true, false);
        VisRevealArea(gv_pLAYER_01_USER, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_revealRegion, 32.0, false);
        libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_purifierStasisChambers[lp_containmentTowerIndex].lv_spawnPoint, 2.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_TransmissionActivateStasisChamberQ, true, false);
    }
    lv_chosenZergBaseTarget = gf_GetZergBaseTarget(lp_containmentTowerIndex);
    gv_zergBase[lv_chosenZergBaseTarget].lv_isEngaged = true;
    Wait(2.0, c_timeGame);
    if ((gv_purifierStasisChambersOnlineCount > 1)) {
        TriggerExecute(gt_TransmissionInitiateAttackFromStasisChamberQ, true, true);
    }

    gf_SendPurifierWarpathEscortGroup(lp_containmentTowerIndex, lv_chosenZergBaseTarget);
    AIToggleBulliesInRegion(gv_zergBase[lv_chosenZergBaseTarget].lv_basePlayer, gv_zergBase[lv_chosenZergBaseTarget].lv_baseRegion, false);
}

void gf_WarpInPurifiers (int lp_stasisChamberIndex) {
    int autoC17FD440_ae;
    int autoC17FD440_ai;
    int auto48015167_ae;
    int auto48015167_ai;
    int autoC4733E0F_ae;
    int autoC4733E0F_ai;
    int auto30CA256F_ae;
    int auto30CA256F_ai;

    // Variable Declarations
    int lv_warpIndex;
    fixed lv_warpinOffset;
    point lv_warpinLocationOrigin;
    point lv_warpinLocationIteration;

    // Variable Initialization

    // Implementation
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.3, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), 4.0), "Purifier_TeleportPlatform", c_animNameDefault, "Stand A", c_animFlagPlayForever, c_animTimeDefault);
    if ((lp_stasisChamberIndex <= 3)) {
        lv_warpinLocationOrigin = PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)));
    }
    else {
        lv_warpinLocationOrigin = PointFromName(("Purifier Spawn 0" + IntToString(2)));
    }
    autoC17FD440_ae = 16;
    autoC17FD440_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (autoC17FD440_ai >= 0 && lv_warpIndex <= autoC17FD440_ae) || (autoC17FD440_ai <= 0 && lv_warpIndex >= autoC17FD440_ae) ) ; lv_warpIndex += autoC17FD440_ai ) {
        if ((lv_warpIndex <= 10)) {
            gv_warpinAngleIteration = (180.0 / 10.0);
            lv_warpinOffset = 3.3;
        }
        else {
            gv_warpinAngleIteration = (180.0 / 6.0);
            lv_warpinOffset = 1.7;
        }
        if (((lv_warpIndex == 1) || (lv_warpIndex == 11))) {
            Wait(2.0, c_timeGame);
            gv_warpinAngle = ((PointGetFacing(lv_warpinLocationOrigin) - 90.0) + (gv_warpinAngleIteration / 2.0));
        }
        else {
            gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
        }
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 10), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(lv_warpinLocationOrigin) - 90.0);
    auto48015167_ae = 4;
    auto48015167_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto48015167_ai >= 0 && lv_warpIndex <= auto48015167_ae) || (auto48015167_ai <= 0 && lv_warpIndex >= auto48015167_ae) ) ; lv_warpIndex += auto48015167_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 16), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    Wait(2.0, c_timeGame);
    gv_warpinAngleIteration = 180.0;
    gv_warpinAngle = (PointGetFacing(lv_warpinLocationOrigin) - 90.0);
    lv_warpinLocationOrigin = PointWithOffsetPolar(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex))), -1.0, PointGetFacing(PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)))));
    autoC4733E0F_ae = 4;
    autoC4733E0F_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (autoC4733E0F_ai >= 0 && lv_warpIndex <= autoC4733E0F_ae) || (autoC4733E0F_ai <= 0 && lv_warpIndex >= autoC4733E0F_ae) ) ; lv_warpIndex += autoC4733E0F_ai ) {
        if ((lv_warpIndex <= 2)) {
            lv_warpinOffset = 2.0;
        }
        else {
            lv_warpinOffset = 0.75;
        }
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 12), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
    Wait(2.0, c_timeGame);
    lv_warpinLocationOrigin = PointFromName(("Purifier Spawn 0" + IntToString(lp_stasisChamberIndex)));
    gv_warpinAngleIteration = 90.0;
    gv_warpinAngle = ((PointGetFacing(lv_warpinLocationOrigin) + 90.0) + (gv_warpinAngleIteration / 2.0));
    lv_warpinOffset = 3.0;
    auto30CA256F_ae = 2;
    auto30CA256F_ai = 1;
    lv_warpIndex = 1;
    for ( ; ( (auto30CA256F_ai >= 0 && lv_warpIndex <= auto30CA256F_ae) || (auto30CA256F_ai <= 0 && lv_warpIndex >= auto30CA256F_ae) ) ; lv_warpIndex += auto30CA256F_ai ) {
        UnitIssueOrder(gv_purifierSuperWarpgate, OrderTargetingPoint(AbilityCommand("SuperWarpGateTrainVoid", 14), PointWithOffsetPolar(lv_warpinLocationOrigin, lv_warpinOffset, gv_warpinAngle)), c_orderQueueReplace);
        gv_warpinAngle = (gv_warpinAngle + gv_warpinAngleIteration);
    }
}

trigger auto_gf_SendPurifierWarpathEscortGroup_Trigger = null;
int auto_gf_SendPurifierWarpathEscortGroup_lp_containmentTowerIndex;
int auto_gf_SendPurifierWarpathEscortGroup_lp_chosenZergBaseTarget;

void gf_SendPurifierWarpathEscortGroup (int lp_containmentTowerIndex, int lp_chosenZergBaseTarget) {
    auto_gf_SendPurifierWarpathEscortGroup_lp_containmentTowerIndex = lp_containmentTowerIndex;
    auto_gf_SendPurifierWarpathEscortGroup_lp_chosenZergBaseTarget = lp_chosenZergBaseTarget;

    if (auto_gf_SendPurifierWarpathEscortGroup_Trigger == null) {
        auto_gf_SendPurifierWarpathEscortGroup_Trigger = TriggerCreate("auto_gf_SendPurifierWarpathEscortGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendPurifierWarpathEscortGroup_Trigger, false, false);
}

bool auto_gf_SendPurifierWarpathEscortGroup_TriggerFunc (bool testConds, bool runActions) {
    int lp_containmentTowerIndex = auto_gf_SendPurifierWarpathEscortGroup_lp_containmentTowerIndex;
    int lp_chosenZergBaseTarget = auto_gf_SendPurifierWarpathEscortGroup_lp_chosenZergBaseTarget;

    int auto7C0A0961_ae;
    int auto7C0A0961_ai;
    int autoEBFC8AD4_val;

    // Variable Declarations
    unit lv_escortUnit;
    int lv_i;
    point lv_waypoint;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_spawnPoint);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    lv_escortUnit = UnitLastCreated();
    AISetGroupScriptControlled(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION7, UnitGetPosition(lv_escortUnit));
    AIAttackWaveSetTargetEscort(gv_pLAYER_02_DOMINION7, libNtve_gf_ConvertUnitToUnitGroup(lv_escortUnit), 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION7, 0, true);
    auto7C0A0961_ae = 4;
    auto7C0A0961_ai = 1;
    lv_i = 1;
    for ( ; ( (auto7C0A0961_ai >= 0 && lv_i <= auto7C0A0961_ae) || (auto7C0A0961_ai <= 0 && lv_i >= auto7C0A0961_ae) ) ; lv_i += auto7C0A0961_ai ) {
        autoEBFC8AD4_val = lv_i;
        if (autoEBFC8AD4_val == 1) {
            lv_waypoint = gv_purifierStasisChambers[lp_containmentTowerIndex].lv_waypoint01;
        }
        else if (autoEBFC8AD4_val == 2) {
            lv_waypoint = gv_purifierStasisChambers[lp_containmentTowerIndex].lv_waypoint02;
        }
        else if (autoEBFC8AD4_val == 3) {
            lv_waypoint = gv_purifierStasisChambers[lp_containmentTowerIndex].lv_waypoint03;
        }
        else if (autoEBFC8AD4_val == 4) {
            lv_waypoint = gv_zergBase[lp_chosenZergBaseTarget].lv_basePingPoint;
        }
        else {
        }
        while ((libVCMI_gf_GameIsOver() == false) && (DistanceBetweenPoints(UnitGetPosition(lv_escortUnit), lv_waypoint) > 1.0)) {
            if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_escortUnit), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                UnitIssueOrder(lv_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_waypoint), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_escortUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            Wait(0.25, c_timeGame);
        }
    }
    UnitRemove(lv_escortUnit);
    AIRemoveGroupFromAnyWaves(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION7, UnitGroupCenterOfGroup(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_DOMINION7, gv_zergBase[lp_chosenZergBaseTarget].lv_baseRegion, 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION7, 0, true);
    while (!(((gv_zergBase[lp_chosenZergBaseTarget].lv_isDestroyed == true) || (UnitGroupCount(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeGame);
    }
    return true;
}

void gf_DespawnPurifiers (int lp_containmentTowerIndex, int lp_zergBaseIndex) {
    // Implementation
    AIRemoveGroupFromAnyWaves(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSetGatherPoint(gv_pLAYER_02_DOMINION7, UnitGroupCenterOfGroup(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup));
    AIAttackWaveSetTargetRegion(gv_pLAYER_02_DOMINION7, gv_zergBase[lp_zergBaseIndex].lv_waveDespawnRegion, 0);
    AIAttackWaveUseGroup(gv_pLAYER_02_DOMINION7, gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup);
    AIAttackWaveSend(gv_pLAYER_02_DOMINION7, 0, true);
    while ((libVCMI_gf_GameIsOver() == false) && (UnitGroupCount(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION7, gv_zergBase[lp_zergBaseIndex].lv_waveDespawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupHasUnit(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, UnitGroupLoopCurrent()) == true)) {
                UnitGroupRemove(gv_purifierStasisChambers[lp_containmentTowerIndex].lv_warpathGroup, UnitGroupLoopCurrent());
                gf_WarpOutPurifier(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        Wait(0.5, c_timeGame);
    }
}

trigger auto_gf_WarpOutPurifier_Trigger = null;
unit auto_gf_WarpOutPurifier_lp_warpOutUnit;

void gf_WarpOutPurifier (unit lp_warpOutUnit) {
    auto_gf_WarpOutPurifier_lp_warpOutUnit = lp_warpOutUnit;

    if (auto_gf_WarpOutPurifier_Trigger == null) {
        auto_gf_WarpOutPurifier_Trigger = TriggerCreate("auto_gf_WarpOutPurifier_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpOutPurifier_Trigger, false, false);
}

bool auto_gf_WarpOutPurifier_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpOutUnit = auto_gf_WarpOutPurifier_lp_warpOutUnit;

    // Variable Declarations
    actor lv_warpOutModel;

    // Variable Initialization

    // Implementation
    libNtve_gf_PauseUnit(lp_warpOutUnit, true);
    libNtve_gf_AttachModelToUnitInheritVisibility(lp_warpOutUnit, "ProtossGenericWarpInOut", "Ref_Origin");
    lv_warpOutModel = libNtve_gf_ActorLastCreated();
    SoundPlayAtPointForPlayer(SoundLink("Event_Exp3_LassaraWarpInFinish", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_warpOutUnit), 0.0, 50.0, 0.0);
    Wait(5.0, c_timeGame);
    UnitRemove(lp_warpOutUnit);
    libNtve_gf_KillModel(lv_warpOutModel);
    return true;
}

void gf_RevealPurifierContainmentTower (unit lp_purifierUnit) {
    // Implementation
    if (((UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x8A") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x8B") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x8C"))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(UnitGetPosition(lp_purifierUnit)) - 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) - 5.0), (PointGetX(UnitGetPosition(lp_purifierUnit)) + 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) + 5.0)), 6.0, false);
    }
    else if (((UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x12A") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x12B") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock8x12C"))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(UnitGetPosition(lp_purifierUnit)) - 5.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) - 7.0), (PointGetX(UnitGetPosition(lp_purifierUnit)) + 5.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) + 7.0)), 6.0, false);
    }
    else if (((UnitGetType(lp_purifierUnit) == "PurifierCellBlock12x8A") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock12x8B") || (UnitGetType(lp_purifierUnit) == "PurifierCellBlock12x8C"))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(UnitGetPosition(lp_purifierUnit)) - 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) - 5.0), (PointGetX(UnitGetPosition(lp_purifierUnit)) + 7.0), (PointGetY(UnitGetPosition(lp_purifierUnit)) + 5.0)), 6.0, false);
    }
}

trigger auto_gf_TrackNullCircuitReticleAndTextTag_Trigger = null;
unit auto_gf_TrackNullCircuitReticleAndTextTag_lp_inhibitorUnit;

void gf_TrackNullCircuitReticleAndTextTag (unit lp_inhibitorUnit) {
    auto_gf_TrackNullCircuitReticleAndTextTag_lp_inhibitorUnit = lp_inhibitorUnit;

    if (auto_gf_TrackNullCircuitReticleAndTextTag_Trigger == null) {
        auto_gf_TrackNullCircuitReticleAndTextTag_Trigger = TriggerCreate("auto_gf_TrackNullCircuitReticleAndTextTag_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrackNullCircuitReticleAndTextTag_Trigger, false, false);
}

bool auto_gf_TrackNullCircuitReticleAndTextTag_TriggerFunc (bool testConds, bool runActions) {
    unit lp_inhibitorUnit = auto_gf_TrackNullCircuitReticleAndTextTag_lp_inhibitorUnit;

    // Implementation
    while (!((UnitGetType(lp_inhibitorUnit) == "NullCircuitActivated"))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_inhibitorUnit, 1));
    TextTagDestroy(libHots_gf_TextTagForUnit(lp_inhibitorUnit, 1));
    return true;
}

string gf_GetCybrosLightConfiguration () {
    // Variable Declarations
    string lv_newLight;

    // Variable Initialization

    // Implementation
    if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros01_Nesw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros02_nEsw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros03_neSw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros04_nesW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros05_NEsw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros06_nESw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros07_neSW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros08_NesW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros09_NeSw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros10_nEsW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == false)) {
        lv_newLight = "Cybros11_nESW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros12_NeSW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros13_NEsW";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros14_NESw";
    }
    else if ((gv_purifierStasisChambers[1].lv_isActivated == true) && (gv_purifierStasisChambers[2].lv_isActivated == true) && (gv_purifierStasisChambers[3].lv_isActivated == true) && (gv_purifierStasisChambers[4].lv_isActivated == true)) {
        lv_newLight = "Cybros15_NESW";
    }
    else if (true) {
        lv_newLight = "Cybros00_nesw";
    }
    return lv_newLight;
}

void gf_PingClosestNullCircuitToPoint (point lp_point) {
    int auto35EF9B15_ae;
    int auto35EF9B15_ai;

    // Variable Declarations
    int lv_i;
    unitgroup lv_lockGroup;
    unit lv_lockUnit;

    // Variable Initialization
    lv_lockGroup = UnitGroupEmpty();

    // Implementation
    TriggerEnable(TriggerGetCurrent(), false);
    auto35EF9B15_ae = gv_objectiveNullCircuitsMax;
    auto35EF9B15_ai = 1;
    lv_i = 1;
    for ( ; ( (auto35EF9B15_ai >= 0 && lv_i <= auto35EF9B15_ae) || (auto35EF9B15_ai <= 0 && lv_i >= auto35EF9B15_ae) ) ; lv_i += auto35EF9B15_ai ) {
        if ((UnitGetType(gv_nullCircuits[lv_i]) == "NullCircuit")) {
            UnitGroupAdd(lv_lockGroup, gv_nullCircuits[lv_i]);
        }

    }
    lv_lockUnit = UnitGroupClosestToPoint(lv_lockGroup, lp_point);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7F379361"), null, UnitGetPosition(lv_lockUnit));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/19AF051B"), null, UnitGetPosition(lv_lockUnit));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_lockUnit), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lv_lockUnit), 2.0), 8.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lv_lockUnit), 2.0), 8.0, false);
}

trigger auto_gf_HybridBehemothAI_Trigger = null;
unit auto_gf_HybridBehemothAI_lp_hybrid;

void gf_HybridBehemothAI (unit lp_hybrid) {
    auto_gf_HybridBehemothAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridBehemothAI_Trigger == null) {
        auto_gf_HybridBehemothAI_Trigger = TriggerCreate("auto_gf_HybridBehemothAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBehemothAI_Trigger, false, false);
}

bool auto_gf_HybridBehemothAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridBehemothAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyGroup5;
    int lv_targetCount;

    // Variable Initialization
    lv_enemyGroup5 = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_hybrid) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_enemyGroup5 = UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hybrid), 5.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("ConsumeDNA", 0), c_cmdStateCooldown) == false)) {
            if ((UnitGroupCount(lv_enemyGroup5, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("ConsumeDNA", 0), gf_ToughestUnitinUnitGroup(lv_enemyGroup5)));
            }

        }

        lv_targetCount = UnitGroupCount(lv_enemyGroup5, c_unitCountAlive);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridFAoEStun", 0), c_cmdStateCooldown) == false) && (lv_targetCount >= 3)) {
            libNtve_gf_AICast(lp_hybrid, Order(AbilityCommand("HybridFAoEStun", 0)));
        }

        lv_enemyGroup5 = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_HybridNemesisAI_Trigger = null;
unit auto_gf_HybridNemesisAI_lp_hybrid;

void gf_HybridNemesisAI (unit lp_hybrid) {
    auto_gf_HybridNemesisAI_lp_hybrid = lp_hybrid;

    if (auto_gf_HybridNemesisAI_Trigger == null) {
        auto_gf_HybridNemesisAI_Trigger = TriggerCreate("auto_gf_HybridNemesisAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridNemesisAI_Trigger, false, false);
}

bool auto_gf_HybridNemesisAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybrid = auto_gf_HybridNemesisAI_lp_hybrid;

    // Variable Declarations
    unitgroup lv_enemyGroup9;

    // Variable Initialization
    lv_enemyGroup9 = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_hybrid) == true) && (libVCMI_gf_GameIsOver() == false)) {
        lv_enemyGroup9 = UnitGroupAlliance(UnitGetOwner(lp_hybrid), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hybrid), 9.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitCheckAbilCmdState(lp_hybrid, AbilityCommand("HybridGeneralPhaseShift", 0), c_cmdStateCooldown) == false)) {
            UnitGroupLoopBegin(lv_enemyGroup9);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitHasBehavior2(UnitGroupLoopCurrent(), "HybridGeneralPhaseShift") == true) || (UnitHasBehavior2(UnitGroupLoopCurrent(), "HybridNemesisStasisPrevention") == true))) {
                    UnitGroupRemove(lv_enemyGroup9, UnitGroupLoopCurrent());
                }

            }
            UnitGroupLoopEnd();
            if ((UnitGroupCount(lv_enemyGroup9, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_hybrid, OrderTargetingUnit(AbilityCommand("HybridGeneralPhaseShift", 0), UnitGroupClosestToPoint(lv_enemyGroup9, UnitGetPosition(lp_hybrid))));
            }

        }

        lv_enemyGroup9 = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

int gf_GetZergBaseAttacker (int lp_coreMatrixApproach) {
    int auto0FFFCA91_val;
    int auto11E7BBBF_ae;
    int auto11E7BBBF_ai;
    int auto03932E96_ae;
    int auto03932E96_ai;

    // Variable Declarations
    int lv_i;
    int[5] lv_zergBaseSortList;

    // Variable Initialization

    // Implementation
    auto0FFFCA91_val = lp_coreMatrixApproach;
    if (auto0FFFCA91_val == ge_PRESETCoreMatrixApproach_SouthWest) {
        lv_zergBaseSortList[1] = 2;
        lv_zergBaseSortList[2] = 3;
        lv_zergBaseSortList[3] = 4;
    }
    else if (auto0FFFCA91_val == ge_PRESETCoreMatrixApproach_NorthEast) {
        lv_zergBaseSortList[1] = 4;
        lv_zergBaseSortList[2] = 2;
        lv_zergBaseSortList[3] = 3;
    }
    else if (auto0FFFCA91_val == ge_PRESETCoreMatrixApproach_SouthEast) {
        lv_zergBaseSortList[1] = 2;
        lv_zergBaseSortList[2] = 4;
        lv_zergBaseSortList[3] = 3;
    }
    else {
        lv_zergBaseSortList[1] = 2;
        lv_zergBaseSortList[2] = 3;
        lv_zergBaseSortList[3] = 4;
    }
    auto11E7BBBF_ae = 4;
    auto11E7BBBF_ai = 1;
    lv_i = 2;
    for ( ; ( (auto11E7BBBF_ai >= 0 && lv_i <= auto11E7BBBF_ae) || (auto11E7BBBF_ai <= 0 && lv_i >= auto11E7BBBF_ae) ) ; lv_i += auto11E7BBBF_ai ) {
        if ((gv_zergBase[lv_zergBaseSortList[lv_i]].lv_isEngaged == false) && (gv_zergBase[lv_zergBaseSortList[lv_i]].lv_isDestroyed == false)) {
            return lv_zergBaseSortList[lv_i];
        }

    }
    auto03932E96_ae = 4;
    auto03932E96_ai = 1;
    lv_i = 2;
    for ( ; ( (auto03932E96_ai >= 0 && lv_i <= auto03932E96_ae) || (auto03932E96_ai <= 0 && lv_i >= auto03932E96_ae) ) ; lv_i += auto03932E96_ai ) {
        if ((gv_zergBase[lv_zergBaseSortList[lv_i]].lv_isDestroyed == false)) {
            return lv_zergBaseSortList[lv_i];
        }

    }
    return 2;
}

void gf_AddWaypointIfZergBase03Attacking (int lp_zergBaseIndex, int lp_coreMatrixApproach) {
    // Implementation
    if ((lp_zergBaseIndex == 3)) {
        if ((lp_coreMatrixApproach == ge_PRESETCoreMatrixApproach_NorthEast)) {
            AIAttackWaveAddWaypoint(gv_zergBase[lp_zergBaseIndex].lv_basePlayer, PointFromId(1648), false);
        }

        if ((lp_coreMatrixApproach == ge_PRESETCoreMatrixApproach_SouthEast)) {
            AIAttackWaveAddWaypoint(gv_zergBase[lp_zergBaseIndex].lv_basePlayer, PointFromId(1647), false);
        }

        if ((lp_coreMatrixApproach == ge_PRESETCoreMatrixApproach_SouthWest)) {
            AIAttackWaveAddWaypoint(gv_zergBase[lp_zergBaseIndex].lv_basePlayer, PointFromId(1647), false);
        }

    }

}

trigger auto_gf_UpdateWaveGroupPing_Trigger = null;
unitgroup auto_gf_UpdateWaveGroupPing_lp_unitGroup;
int auto_gf_UpdateWaveGroupPing_lp_ping;

void gf_UpdateWaveGroupPing (unitgroup lp_unitGroup, int lp_ping) {
    auto_gf_UpdateWaveGroupPing_lp_unitGroup = lp_unitGroup;
    auto_gf_UpdateWaveGroupPing_lp_ping = lp_ping;

    if (auto_gf_UpdateWaveGroupPing_Trigger == null) {
        auto_gf_UpdateWaveGroupPing_Trigger = TriggerCreate("auto_gf_UpdateWaveGroupPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateWaveGroupPing_Trigger, false, false);
}

bool auto_gf_UpdateWaveGroupPing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_UpdateWaveGroupPing_lp_unitGroup;
    int lp_ping = auto_gf_UpdateWaveGroupPing_lp_ping;

    // Implementation
    while ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) > 0)) {
        PingSetPosition(lp_ping, UnitGroupCenterOfGroup(lp_unitGroup));
        Wait(0.25, c_timeGame);
    }
    PingDestroy(lp_ping);
    return true;
}

trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

point gf_AttackWaveSpawn (int lp_player) {
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;

    // Variable Initialization

    // Implementation
    return PlayerStartLocation(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    playergroup autoB320A25D_g;
    int autoB320A25D_p;
    string autoCBF1E40F_val;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB320A25D_g = libCOMI_gf_HumanPlayers();
    autoB320A25D_p = 1;
    for ( ; autoB320A25D_p <= PlayerGroupCount(autoB320A25D_g) ; autoB320A25D_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoB320A25D_g, autoB320A25D_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(autoB320A25D_g, autoB320A25D_p);
        autoCBF1E40F_val = GameAttributePlayerValue("[bnet:local/0.0/356576]1", lv_indexPlayer);
        if (autoCBF1E40F_val == "0004") {
            PlayerSetCommander(lv_indexPlayer, "Artanis");
        }
        else if (autoCBF1E40F_val == "0003") {
            PlayerSetCommander(lv_indexPlayer, "Kerrigan");
        }
        else if (autoCBF1E40F_val == "0001") {
            PlayerSetCommander(lv_indexPlayer, "Raynor");
        }
        else {
            if ((lv_indexPlayer == 1)) {
                PlayerSetCommander(lv_indexPlayer, "Raynor");
            }
            else {
                PlayerSetCommander(lv_indexPlayer, "Artanis");
            }
        }
    }
    libCOMI_gf_SetDefaultCommandersForContestLocalTest("ZergKerrigan", "ZergKerrigan");
    libCOMI_gf_EnableArcadeContestMode();
    TriggerExecute(gt_Init02Players, true, false);
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_USER, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_01_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_USER, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION5, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION6, gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION6, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_DOMINION7, gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION3);
    PlayerGroupAdd(gv_enemyPlayers, gv_pLAYER_02_DOMINION4);
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION5, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION6, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION7, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_02_DOMINION8, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateMineralCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateVespeneCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateFoodIgnored, true);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), 1, true);
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropSuppliesMade, c_playerPropOperSetTo, 1000);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION7, 0, true);
    PlayerSetColorIndex(gv_pLAYER_02_DOMINION8, 5, true);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    libVCMI_gf_PM_DetectionUpgradesApply();
    PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdPower, gv_pLAYER_02_USER, true);
    PlayerSetAlliance(gv_pLAYER_02_USER, c_allianceIdPower, gv_pLAYER_01_USER, true);
    libCOMI_gf_SetAlliedCommandersstartingResources();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init04Technology, true, false);
    libCOMI_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_Init09Help, true, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(636256265), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1721959331), true);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(128));
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(128));
    UnitSetPropertyFixed(UnitFromId(777192201), c_unitPropLifePercent, 100.0);
    if (((PlayerRace(gv_pLAYER_01_USER) == "Zerg") || (PlayerRace(gv_pLAYER_02_USER) == "Zerg") || (PlayerRace(gv_pLAYER_01_USER) == "InfT") || (PlayerRace(gv_pLAYER_02_USER) == "InfT"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, 8, PointFromId(1456900997));
        libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/B55CDF4C"), StringExternal("Param/Value/5076BDB7"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, 8, PointFromId(575451750));
        libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/C8BEEA7F"), StringExternal("Param/Value/B0C07702"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorUsed", c_unitCreateIgnorePlacement, 8, PointFromId(13));
        libVCMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/0CBBD60F"), StringExternal("Param/Value/FC5A655A"));
    }

    gv_purifierEnergizer = UnitFromId(43118423);
    libNtve_gf_MakeUnitInvulnerable(gv_purifierEnergizer, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1201159282), true);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_purifierEnergizer, null, StringExternal("Param/Value/04C113F8"), StringExternal("Param/Value/E36A439B"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1201159282), null, StringExternal("Param/Value/10782B45"), StringExternal("Param/Value/5280B1DC"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(1721959331), null, StringExternal("Param/Value/3E5AEE12"), StringExternal("Param/Value/D9BE1DCE"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(210799873), null, StringExternal("Param/Value/9AB21F2C"), StringExternal("Param/Value/DDE919EB"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(558081114), null, StringExternal("Param/Value/C81D149E"), StringExternal("Param/Value/77B823C7"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2114522947), null, StringExternal("Param/Value/7758B3C6"), StringExternal("Param/Value/992B611A"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(754170281), null, StringExternal("Param/Value/35ACC9BC"), StringExternal("Param/Value/BA917C65"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(165971686), null, StringExternal("Param/Value/AC97745D"), StringExternal("Param/Value/1E210DAE"));
    libVCMI_gf_SetUnitInfoTextCampaign(UnitFromId(2137751540), null, StringExternal("Param/Value/B1A58819"), StringExternal("Param/Value/CF6EC855"));
    libCOMI_gf_PlayMapIntroZoom(true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00129", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGame, true, false);
    Wait(240.0, c_timeGame);
    TriggerExecute(gt_Torrasque, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    playergroup auto6BF2D20F_g;
    int auto6BF2D20F_p;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libVoiC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION2, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION3, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "overlordtransport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_02_DOMINION4, "overlordspeed", 1);
    auto6BF2D20F_g = libCOMI_gf_HumanPlayers();
    auto6BF2D20F_p = 1;
    for ( ; auto6BF2D20F_p <= PlayerGroupCount(auto6BF2D20F_g) ; auto6BF2D20F_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto6BF2D20F_g, auto6BF2D20F_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto6BF2D20F_g, auto6BF2D20F_p);
        TechTreeUnitAllow(lv_indexPlayer, "SCV", true);
        TechTreeUnitAllow(lv_indexPlayer, "Marine", true);
        TechTreeUnitAllow(lv_indexPlayer, "Firebat", true);
        TechTreeUnitAllow(lv_indexPlayer, "Medic", true);
        TechTreeUnitAllow(lv_indexPlayer, "Marauder", true);
        TechTreeUnitAllow(lv_indexPlayer, "Vulture", true);
        TechTreeUnitAllow(lv_indexPlayer, "SiegeTank", true);
        TechTreeUnitAllow(lv_indexPlayer, "VikingFighter", true);
        TechTreeUnitAllow(lv_indexPlayer, "Banshee", true);
        TechTreeUnitAllow(lv_indexPlayer, "Battlecruiser", true);
        TechTreeUnitAllow(lv_indexPlayer, "OrbitalCommand", true);
        TechTreeUnitAllow(lv_indexPlayer, "Bunker", true);
        TechTreeUnitAllow(lv_indexPlayer, "MissileTurret", true);
        TechTreeUnitAllow(lv_indexPlayer, "Reactor", true);
        TechTreeUnitAllow(lv_indexPlayer, "BarracksReactor", true);
        TechTreeUnitAllow(lv_indexPlayer, "FactoryReactor", true);
        TechTreeUnitAllow(lv_indexPlayer, "StarportReactor", true);
        TechTreeUnitAllow(lv_indexPlayer, "Drone", true);
        TechTreeUnitAllow(lv_indexPlayer, "HotSRaptor", true);
        TechTreeUnitAllow(lv_indexPlayer, "QueenCoop", true);
        TechTreeUnitAllow(lv_indexPlayer, "HydraliskLurker", true);
        TechTreeUnitAllow(lv_indexPlayer, "MutaliskBroodlord", true);
        TechTreeUnitAllow(lv_indexPlayer, "BroodLord", true);
        TechTreeUnitAllow(lv_indexPlayer, "HotSTorrasque", true);
        TechTreeUnitAllow(lv_indexPlayer, "Overseer", true);
        TechTreeUnitAllow(lv_indexPlayer, "Lurker", true);
        TechTreeUnitAllow(lv_indexPlayer, "SpineCrawler", true);
        TechTreeUnitAllow(lv_indexPlayer, "SporeCrawler", true);
        TechTreeUnitAllow(lv_indexPlayer, "GreaterNydusWormAlly", true);
        TechTreeUnitAllow(lv_indexPlayer, "NydusNetworkAlly", true);
        TechTreeUnitAllow(lv_indexPlayer, "Spire", true);
        TechTreeUnitAllow(lv_indexPlayer, "GreaterSpire", true);
        TechTreeUnitAllow(lv_indexPlayer, "Probe", true);
        TechTreeUnitAllow(lv_indexPlayer, "ZealotAiur", true);
        TechTreeUnitAllow(lv_indexPlayer, "Dragoon", true);
        TechTreeUnitAllow(lv_indexPlayer, "Stalker", true);
        TechTreeUnitAllow(lv_indexPlayer, "HighTemplar", true);
        TechTreeUnitAllow(lv_indexPlayer, "Archon", true);
        TechTreeUnitAllow(lv_indexPlayer, "ImmortalAiur", true);
        TechTreeUnitAllow(lv_indexPlayer, "Observer", true);
        TechTreeUnitAllow(lv_indexPlayer, "Phoenix", true);
        TechTreeUnitAllow(lv_indexPlayer, "PhoenixAiur", true);
        TechTreeUnitAllow(lv_indexPlayer, "Reaver", true);
        TechTreeUnitAllow(lv_indexPlayer, "Tempest", true);
        TechTreeUnitAllow(lv_indexPlayer, "TempestPurifier", true);
        TechTreeUnitAllow(lv_indexPlayer, "PhotonCannon", true);
        TechTreeUnitAllow(lv_indexPlayer, "TemplarArchive", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ShieldWall", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "BansheeCloak", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "PunisherGrenades", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "BattlecruiserEnableSpecializations", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "NanoConstructor", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "AresClassWeaponsSystemViking", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "TerranInfantryWeaponsLevel1", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "TerranInfantryWeaponsLevel2", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "TerranInfantryWeaponsLevel3", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "TerranInfantryArmorsLevel1", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "TerranInfantryArmorsLevel2", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "TerranInfantryArmorsLevel3", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergMeleeWeaponsLevel1", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergMeleeWeaponsLevel2", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergMeleeWeaponsLevel3", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergFlyerWeaponsLevel1", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergFlyerWeaponsLevel2", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergFlyerWeaponsLevel3", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergFlyerArmorsLevel1", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergFlyerArmorsLevel2", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ZergFlyerArmorsLevel3", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "HotSRapidRegeneration", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "HotSViciousGlaive", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "StalkerResearchDragoonRange", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "PhoenixRangeUpgrade", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ObserverGraviticBooster", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "PsiStormTech", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "HighTemplarResearchPsionicStorm", true);
        TechTreeUpgradeAllow(lv_indexPlayer, "ReaverIncreasedScarabSplashRadius", true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("GravitonBeam", 0), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("GravitonBeamVoidCampaign", 0), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("Feedback", 0), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("PsiStorm", 0), true);
        if ((PlayerRace(lv_indexPlayer) == "Prot")) {
            libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier2Power1");
            libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier4Power2");
            libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier5Power2");
            libVoiC_gf_EnableDisableSpearofAdunAbility(true, "GPTier3Power3");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
    TriggerExecute(gt_ZergBasesInit, true, true);
    libNtve_gf_ShareVisionofUnit(gv_purifierCoreMatrix, true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(gv_purifierCoreMatrix, true, gv_pLAYER_02_USER);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_purifierCoreMatrix, null, StringExternal("Param/Value/4F090CB6"), StringExternal("Param/Value/5F87AFC2"));
    UnitBehaviorAddPlayer(gv_purifierCoreMatrix, "HybridNemesisStasisPrevention", gv_pLAYER_02_DOMINION6, 1);
    UnitGroupLoopBegin(UnitGroup("HybridBehemoth", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_HybridBehemothAI(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libVCMI_gf_SetUnitInfoTextCampaign(gv_purifierWarden, null, StringExternal("Param/Value/993180C1"), null);
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(3)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(26)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(27)) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(29)) == false) && ((UnitGetType(UnitGroupLoopCurrent()) == "Zergling"))) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "CritterWanderLeashShort", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_PurifierStasisChambersInit, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PPurifier03_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    GameSetLighting("Cybros00_nesw", 0.0);
    libLbty_gf_AutoRevealRegion(RegionFromId(107), RegionFromId(107), gv_pLAYER_01_USER);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(117), "Purifier_StasisPods_Chamber");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(117), "Purifier_StasisPods");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(6000, 6000, 4000, 2000));
    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShieldsMax, libLotv_gf_DifficultyValueInt2(2000, 2000, 2000, 2000));
    UnitSetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShieldsPercent, 100.0);
    gv_coreMatrixLowestShields = UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent);
    IntLoopBegin(1, 12);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetPropertyFixed(gv_nullCircuits[IntLoopCurrent()], c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(500, 500, 750, 1000));
        UnitSetPropertyFixed(gv_nullCircuits[IntLoopCurrent()], c_unitPropLifePercent, 100.0);
    }
    IntLoopEnd();
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION8, "RoguePurifierBotCountUpgrade", 1);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        PlayerGroupLoopBegin(gv_enemyPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
        PlayerGroupLoopBegin(gv_enemyPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("FungalGrowth", 0), false);
        }
        PlayerGroupLoopEnd();
    }
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_enemyPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "zerglingattackspeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ChitinousPlating", 1);
        }
        PlayerGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 09 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init09Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_AddMissionTipCampaign("NullCircuit");
    libVCMI_gf_AddMissionTipCampaign("PurifierCoreMatrix");
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HotSNoxious", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("RoguePurifier", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_01_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridBehemoth", false, gv_pLAYER_02_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridNemesis", false, gv_pLAYER_02_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("RoguePurifier", false, gv_pLAYER_02_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDestroyer", false, gv_pLAYER_02_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridReaver", false, gv_pLAYER_02_USER);
    libVoiC_gf_AddUnitTypeToUnitHelpPanel("HybridDominatorVoid", false, gv_pLAYER_02_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init09Help_Init () {
    gt_Init09Help = TriggerCreate("gt_Init09Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Invulnerable Circuits
//--------------------------------------------------------------------------------------------------
bool gt_InvulnerableCircuits_Func (bool testConds, bool runActions) {
    unitgroup auto4DE187C6_g;
    int auto4DE187C6_u;

    // Variable Declarations
    bool lv_invulnerable;
    unit lv_zergUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("NullCircuit", gv_pLAYER_02_DOMINION5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_invulnerable = false;
        auto4DE187C6_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_02_DOMINION2, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4DE187C6_u = 1;
        for ( ; auto4DE187C6_u <= UnitGroupCount(auto4DE187C6_g, c_unitCountAll) ; auto4DE187C6_u += BoolToInt(lv_zergUnit == UnitGroupUnit(auto4DE187C6_g, auto4DE187C6_u)) ) {
            lv_zergUnit = UnitGroupUnit(auto4DE187C6_g, auto4DE187C6_u);
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_zergUnit)) <= 8.0) && (lv_invulnerable == false) && (UnitGetType(lv_zergUnit) != "CreepTumor") && (UnitGetType(lv_zergUnit) != "CreepTumorBurrowed") && (UnitGetType(lv_zergUnit) != "CreepTumorQueen") && (UnitGetType(lv_zergUnit) != "CreepTumorUsed")) {
                lv_invulnerable = true;
                libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
            }

        }
        if ((lv_invulnerable == false)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InvulnerableCircuits_Init () {
    gt_InvulnerableCircuits = TriggerCreate("gt_InvulnerableCircuits_Func");
    TriggerAddEventTimePeriodic(gt_InvulnerableCircuits, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Pings
//--------------------------------------------------------------------------------------------------
bool gt_RemovePings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemovePings_Init () {
    gt_RemovePings = TriggerCreate("gt_RemovePings_Func");
    TriggerAddEventUnitDied(gt_RemovePings, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purify
//--------------------------------------------------------------------------------------------------
bool gt_Purify_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_purifyCircuit == null))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purifyCircuit = UnitGroupClosestToPoint(UnitGroup("NullCircuit", gv_pLAYER_02_DOMINION5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gf_ToughestUnitinUnitGroup(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0))));
    if ((gv_purifyCircuit != null)) {
        lv_point = UnitGetPosition(gv_purifyCircuit);
        libVCMI_gf_PingMinimapCampaign(libCOMI_gf_HumanPlayers(), lv_point, 0.5, Color(100.00, 50.20, 0.00));
        UnitGroupIssueOrder(UnitGroup("ZealotPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup("StalkerPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup("SentryPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup("ColossusPurifier", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup("FenixChampion", gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Purify_Init () {
    gt_Purify = TriggerCreate("gt_Purify_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Circuit Dies Retarget
//--------------------------------------------------------------------------------------------------
bool gt_CircuitDiesRetarget_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_purifyCircuit = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CircuitDiesRetarget_Init () {
    gt_CircuitDiesRetarget = TriggerCreate("gt_CircuitDiesRetarget_Func");
    TriggerAddEventUnitDied(gt_CircuitDiesRetarget, UnitRefFromVariable("gv_purifyCircuit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Init
//--------------------------------------------------------------------------------------------------
bool gt_DialogInit_Func (bool testConds, bool runActions) {
    int auto86195362_ae;
    int auto86195362_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto86195362_ae = 9;
    auto86195362_ai = 1;
    lv_i = 1;
    for ( ; ( (auto86195362_ai >= 0 && lv_i <= auto86195362_ae) || (auto86195362_ai <= 0 && lv_i >= auto86195362_ae) ) ; lv_i += auto86195362_ai ) {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogInit_Init () {
    gt_DialogInit = TriggerCreate("gt_DialogInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Setup
//--------------------------------------------------------------------------------------------------
bool gt_DialogSetup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(220, 220, c_anchorTopRight, 90, 220, false);
    gv_buttonDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_buttonDialog, 100, 100, c_anchorTopLeft, 20, 23, StringExternal("Param/Value/B2EA87C3"), StringToText(""), "Assets\\Textures\\ui_research_button_zerg_normaloverpressedover.dds");
    gv_buttonNW = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_buttonNW, "Assets\\Textures\\ui_research_button_zerg_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_buttonNW, c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetEnabled(gv_buttonNW, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonNW, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonNW, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_buttonDialog, 80, 80, c_anchorTopLeft, 29, 33, StringToText(""), "Assets\\Textures\\aicommand_harass1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_buttonDialog, 100, 100, c_anchorTopLeft, 101, 23, StringExternal("Param/Value/7B611731"), StringToText(""), "Assets\\Textures\\ui_research_button_zerg_normaloverpressedover.dds");
    gv_buttonNE = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_buttonNE, "Assets\\Textures\\ui_research_button_zerg_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_buttonNE, c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetEnabled(gv_buttonNE, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonNE, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonNE, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_buttonDialog, 80, 80, c_anchorTopLeft, 110, 33, StringToText(""), "Assets\\Textures\\aicommand_harass1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_buttonDialog, 100, 100, c_anchorTopLeft, 20, 104, StringExternal("Param/Value/E73E92EC"), StringToText(""), "Assets\\Textures\\ui_research_button_zerg_normaloverpressedover.dds");
    gv_buttonCore = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_buttonCore, "Assets\\Textures\\ui_research_button_zerg_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_buttonCore, c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetEnabled(gv_buttonCore, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonCore, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonCore, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_buttonDialog, 80, 80, c_anchorTopLeft, 29, 114, StringToText(""), "Assets\\Textures\\tip_nullcircuit.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 0, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_buttonDialog, 100, 100, c_anchorTopLeft, 101, 104, StringExternal("Param/Value/99197F7F"), StringToText(""), "Assets\\Textures\\ui_research_button_zerg_normaloverpressedover.dds");
    gv_buttonSE = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_buttonSE, "Assets\\Textures\\ui_research_button_zerg_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_buttonSE, c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetEnabled(gv_buttonSE, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonSE, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonSE, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_buttonDialog, 80, 80, c_anchorTopLeft, 110, 114, StringToText(""), "Assets\\Textures\\aicommand_harass1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 0, PlayerGroupAll());
    if (true) {
    }

    DialogSetVisible(gv_buttonDialog, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("PMoebius01_RevealButtons", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogSetup_Init () {
    gt_DialogSetup = TriggerCreate("gt_DialogSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_DialogButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nextLocation;
    fixed lv_direction;
    unitgroup lv_probeGroup;
    fixed lv_angleIncrement;
    int lv_i;
    unit lv_currentProbe;

    // Variable Initialization
    lv_probeGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_buttonNW)) {
        gf_AttackBase(gv_pLAYER_02_DOMINION3);
    }

    if ((EventDialogControl() == gv_buttonNE)) {
        gf_AttackBase(gv_pLAYER_02_DOMINION4);
    }

    if ((EventDialogControl() == gv_buttonSE)) {
        gf_AttackBase(gv_pLAYER_02_DOMINION2);
    }

    if ((EventDialogControl() == gv_buttonCore)) {
        gv_purifyCircuit = null;
        TriggerEnable(gt_Purify, true);
        TriggerExecute(gt_Purify, true, false);
    }
    else {
        TriggerEnable(gt_Purify, false);
    }
    TriggerExecute(gt_DisableAllButtons, true, false);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_EnableButtons, true, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogButtonPressed_Init () {
    gt_DialogButtonPressed = TriggerCreate("gt_DialogButtonPressed_Func");
    TriggerAddEventDialogControl(gt_DialogButtonPressed, gv_pLAYER_01_USER, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_DialogButtonPressed, gv_pLAYER_02_USER, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable All Buttons
//--------------------------------------------------------------------------------------------------
bool gt_DisableAllButtons_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_buttonSE, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonSE, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonSE, PlayerGroupAll(), 0.0, 50.0);
    DialogControlFadeTransparency(gv_buttonSE, PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetEnabled(gv_buttonNW, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonNW, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonNW, PlayerGroupAll(), 0.0, 50.0);
    DialogControlFadeTransparency(gv_buttonNW, PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetEnabled(gv_buttonNE, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonNE, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonNE, PlayerGroupAll(), 0.0, 50.0);
    DialogControlFadeTransparency(gv_buttonNE, PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetEnabled(gv_buttonCore, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_buttonCore, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_buttonCore, PlayerGroupAll(), 0.0, 50.0);
    DialogControlFadeTransparency(gv_buttonCore, PlayerGroupAll(), 0.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableAllButtons_Init () {
    gt_DisableAllButtons = TriggerCreate("gt_DisableAllButtons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Buttons
//--------------------------------------------------------------------------------------------------
bool gt_EnableButtons_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_purifiersSpawned != false)) {
        DialogControlSetEnabled(gv_buttonNW, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemDesaturated(gv_buttonNW, false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_buttonNW, PlayerGroupAll(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonNW, PlayerGroupAll(), 0.0, 0.0);
    }

    if ((gv_purifiersSpawned != false)) {
        DialogControlSetEnabled(gv_buttonNE, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemDesaturated(gv_buttonNE, false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_buttonNE, PlayerGroupAll(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonNE, PlayerGroupAll(), 0.0, 0.0);
    }

    if ((gv_purifiersSpawned != false)) {
        DialogControlSetEnabled(gv_buttonSE, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemDesaturated(gv_buttonSE, false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_buttonSE, PlayerGroupAll(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonSE, PlayerGroupAll(), 0.0, 0.0);
    }

    if ((gv_purifiersSpawned != false)) {
        DialogControlSetEnabled(gv_buttonCore, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemDesaturated(gv_buttonCore, false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_buttonCore, PlayerGroupAll(), 0.0, 0.0);
        DialogControlFadeTransparency(gv_buttonCore, PlayerGroupAll(), 0.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableButtons_Init () {
    gt_EnableButtons = TriggerCreate("gt_EnableButtons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Push
//--------------------------------------------------------------------------------------------------
bool gt_MegalithPush_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(UnitFromId(636256265), c_unitPropShieldsPercent, c_unitPropCurrent) >= 75.0)) {
        UnitSetPropertyFixed(UnitFromId(636256265), c_unitPropMovementSpeed, 1.0);
    }
    else {
        UnitSetPropertyFixed(UnitFromId(636256265), c_unitPropMovementSpeed, 0.01);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithPush_Init () {
    gt_MegalithPush = TriggerCreate("gt_MegalithPush_Func");
    TriggerAddEventTimePeriodic(gt_MegalithPush, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ambush
//--------------------------------------------------------------------------------------------------
bool gt_Ambush_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionFromId(121), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ambush_Init () {
    gt_Ambush = TriggerCreate("gt_Ambush_Func");
    TriggerAddEventUnitRegion(gt_Ambush, null, RegionFromId(121), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Ambush
//--------------------------------------------------------------------------------------------------
bool gt_BanelingAmbush_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) <= gv_pLAYER_02_USER) || ((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7) && (UnitGetType(EventUnit()) != "SentryPhasing"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionFromId(123), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("BurrowHotSSplitterlingBigUp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanelingAmbush_Init () {
    gt_BanelingAmbush = TriggerCreate("gt_BanelingAmbush_Func");
    TriggerAddEventUnitRegion(gt_BanelingAmbush, null, RegionFromId(124), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stealth Announce
//--------------------------------------------------------------------------------------------------
bool gt_StealthAnnounce_Func (bool testConds, bool runActions) {
    unitgroup auto5312FA4A_g;
    int auto5312FA4A_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_02_DOMINION7, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto5312FA4A_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_02_DOMINION2, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5312FA4A_u = 1;
        for ( ; auto5312FA4A_u <= UnitGroupCount(auto5312FA4A_g, c_unitCountAll) ; auto5312FA4A_u += BoolToInt(lv_unit == UnitGroupUnit(auto5312FA4A_g, auto5312FA4A_u)) ) {
            lv_unit = UnitGroupUnit(auto5312FA4A_g, auto5312FA4A_u);
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_unit)) <= 12.0) && (UnitGetType(lv_unit) != "CreepTumor") && (UnitGetType(lv_unit) != "CreepTumorBurrowed") && (UnitGetType(lv_unit) != "CreepTumorQueen") && (UnitGetType(lv_unit) != "CreepTumorUsed") && (libVCMI_gf_GameIsOver() == false) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(30.0, c_timeGame);
                TriggerEnable(TriggerGetCurrent(), true);
                TriggerQueueExit();
            }

        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StealthAnnounce_Init () {
    gt_StealthAnnounce = TriggerCreate("gt_StealthAnnounce_Func");
    TriggerAddEventTimePeriodic(gt_StealthAnnounce, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Megalith Ambush
//--------------------------------------------------------------------------------------------------
bool gt_MegalithAmbush_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(UnitGroupAlliance(gv_pLAYER_02_DOMINION3, c_unitAllianceAnyExcludeSelf, RegionFromId(45), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(636256265)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionFromId(129), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("BurrowHotSSplitterlingBigUp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegalithAmbush_Init () {
    gt_MegalithAmbush = TriggerCreate("gt_MegalithAmbush_Func");
    TriggerAddEventUnitRegion(gt_MegalithAmbush, UnitRefFromUnit(UnitFromId(636256265)), RegionFromId(129), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleport1
//--------------------------------------------------------------------------------------------------
bool gt_Teleport1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() != gv_purifierEnergizer))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) <= gv_pLAYER_02_USER) || ((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7) && (UnitGetType(EventUnit()) != "SentryPhasing"))))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(1867669674), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(UnitGetOwner(EventUnit())), UnitGetPosition(EventUnit()), 0.5, Color(100.00, 50.20, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teleport1_Init () {
    gt_Teleport1 = TriggerCreate("gt_Teleport1_Func");
    TriggerEnable(gt_Teleport1, false);
    TriggerAddEventUnitRegion(gt_Teleport1, null, RegionFromId(125), true);
    TriggerAddEventUnitRegion(gt_Teleport1, null, RegionFromId(127), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleport2
//--------------------------------------------------------------------------------------------------
bool gt_Teleport2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) <= gv_pLAYER_02_USER) || ((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7) && (UnitGetType(EventUnit()) != "SentryPhasing"))))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(449849252), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupSingle(UnitGetOwner(EventUnit())), UnitGetPosition(EventUnit()), 0.5, Color(100.00, 50.20, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teleport2_Init () {
    gt_Teleport2 = TriggerCreate("gt_Teleport2_Func");
    TriggerAddEventUnitRegion(gt_Teleport2, null, RegionFromId(126), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harass
//--------------------------------------------------------------------------------------------------
bool gt_Harass_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "HybridNemesis", 0, 4, RegionGetCenter(RegionFromId(27)), PointFromId(2045557023));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGroupCenterOfGroup(UnitLastCreatedGroup()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.65);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/859A2BFF"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    libNtve_gf_UnitCreateFacingPoint(1, "HybridNemesis", 0, 4, RegionGetCenter(RegionFromId(96)), PointFromId(458));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGroupCenterOfGroup(UnitLastCreatedGroup()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.65);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6FDB68BB"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    Wait(5.0, c_timeGame);
    UnitGroupIssueOrder(UnitGroup("HybridNemesis", 4, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2045557023)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("HybridNemesis", 4, RegionFromId(96), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(458)), c_orderQueueReplace);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Harass_Init () {
    gt_Harass = TriggerCreate("gt_Harass_Func");
    TriggerAddEventTimePeriodic(gt_Harass, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torrasque
//--------------------------------------------------------------------------------------------------
bool gt_Torrasque_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization
    lv_point = PointFromId(575451750);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeGame);
    lv_point = PointFromId(575451750);
    libNtve_gf_UnitCreateFacingPoint(1, "HybridBehemoth", 0, gv_pLAYER_02_DOMINION2, lv_point, PointFromId(75));
    gv_hybrid01 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", lv_point, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.65);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B6B50374"));
    PingSetUnit(PingLastCreated(), gv_hybrid01);
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(240.0, c_timeGame);
    lv_point = PointFromId(13);
    libNtve_gf_UnitCreateFacingPoint(1, "HybridBehemoth", 0, gv_pLAYER_02_DOMINION2, lv_point, PointFromId(75));
    gv_hybrid01 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", lv_point, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.65);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/712FAE8F"));
    PingSetUnit(PingLastCreated(), gv_hybrid01);
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(TriggerGetCurrent(), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Torrasque_Init () {
    gt_Torrasque = TriggerCreate("gt_Torrasque_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/ACA91C61"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/C048C243"), null, PlayerStartLocation(gv_pLAYER_02_USER));
    TriggerExecute(gt_RevealBonusObjectiveAfterTime, true, false);
    TriggerExecute(gt_TransmissionDestroyNullCircuitsReminderQ, true, false);
    TriggerExecute(gt_TrackNullCircuitPings, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_TransmissionPurifierNullCircuitsQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TransmissionPurifierCoreMatrixQ, true, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Null Circuits Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierNullCircuitsQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, true);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F95E02B3"), null, UnitFromId(213));
    UIAlertUnit("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/BF6D74C4"), null, UnitFromId(213));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(213)), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(213)), 3.0), 2.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(213)), 3.0), 2.0, false);
    Wait(0.25, c_timeGame);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/CC560994"), null, UnitFromId(212));
    UIAlertUnit("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/FAF1099B"), null, UnitFromId(212));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(212)), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(212)), 3.0), 2.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(212)), 3.0), 2.0, false);
    Wait(0.25, c_timeGame);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3182698F"), null, UnitFromId(214));
    UIAlertUnit("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/4123C308"), null, UnitFromId(214));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(214)), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(214)), 3.0), 2.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(214)), 3.0), 2.0, false);
    Wait(0.25, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingTriangle", UnitGetPosition(gv_purifierEnergizer), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/78F48F7B"));
    PingSetScale(PingLastCreated(), 0.2);
    libHots_gf_StorePingForUnit(gv_purifierEnergizer, 1, PingLastCreated());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingTriangle", UnitGetPosition(UnitFromId(1201159282)), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/05733E50"));
    PingSetScale(PingLastCreated(), 0.2);
    libHots_gf_StorePingForUnit(UnitFromId(1201159282), 1, PingLastCreated());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingTriangle", UnitGetPosition(UnitFromId(1721959331)), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/72D10C73"));
    PingSetScale(PingLastCreated(), 0.2);
    libHots_gf_StorePingForUnit(UnitFromId(1721959331), 1, PingLastCreated());
    TriggerEnable(gt_Teleport1, true);
    Wait(1.75, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveRevealed", true, -1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F6B40A31"));
    libVCMI_gf_SendTransmissionCampaign(UnitFromId(777192201), "pMission_Purifier03|Line00203", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(UnitFromId(777192201), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(126))), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    UnitIssueOrder(UnitFromId(777192201), OrderTargetingPoint(AbilityCommand("BlinkMultiple", 0), PointFromId(1456900997)), c_orderQueueAddToEnd);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierNullCircuitsQ_Init () {
    gt_TransmissionPurifierNullCircuitsQ = TriggerCreate("gt_TransmissionPurifierNullCircuitsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Core Matrix Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierCoreMatrixQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TrackWarningPingOnCoreMatrix, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectivePurifiersMustSurviveCreate, true, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A51458D4"), null, PointFromId(75));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/EF2F076C"), null, PointFromId(75));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(2), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(2), 0.0, false);
    Wait(0.25, c_timeGame);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_purifierCoreMatrix), 4.0, Color(0.00, 100.00, 0.00));
    libVCUI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\tip_cybroscorematrix.dds", StringExternal("Param/Value/9F124553"), 100);
    libVCUI_gf_SetSingularBossBarBossVoidCampaign(gv_purifierCoreMatrix, true);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00206", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierCoreMatrixQ_Init () {
    gt_TransmissionPurifierCoreMatrixQ = TriggerCreate("gt_TransmissionPurifierCoreMatrixQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Bases Init
//--------------------------------------------------------------------------------------------------
bool gt_ZergBasesInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(3);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(30);
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(15);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(1355);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(21);
    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(26);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(33);
    gv_zergBase[lv_i].lv_basePlayer = gv_pLAYER_02_DOMINION2;
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(71);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(1356);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(22);
    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(27);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(35);
    gv_zergBase[lv_i].lv_basePlayer = gv_pLAYER_02_DOMINION3;
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(273);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(1357);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(23);
    lv_i += 1;
    gv_zergBase[lv_i].lv_baseRegion = RegionFromId(29);
    gv_zergBase[lv_i].lv_baseRevealRegion = RegionFromId(37);
    gv_zergBase[lv_i].lv_basePlayer = gv_pLAYER_02_DOMINION4;
    gv_zergBase[lv_i].lv_basePingPoint = PointFromId(520);
    gv_zergBase[lv_i].lv_waveGatherPoint = PointFromId(869);
    gv_zergBase[lv_i].lv_waveDespawnRegion = RegionFromId(24);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBasesInit_Init () {
    gt_ZergBasesInit = TriggerCreate("gt_ZergBasesInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ZergBaseDestroyed_Func (bool testConds, bool runActions) {
    int autoB5D55A8B_ae;
    int autoB5D55A8B_ai;

    // Variable Declarations
    int lv_i;
    unitgroup lv_zergBaseStructureGroup;

    // Variable Initialization
    lv_zergBaseStructureGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB5D55A8B_ae = 4;
    autoB5D55A8B_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB5D55A8B_ai >= 0 && lv_i <= autoB5D55A8B_ae) || (autoB5D55A8B_ai <= 0 && lv_i >= autoB5D55A8B_ae) ) ; lv_i += autoB5D55A8B_ai ) {
        if ((gv_zergBase[lv_i].lv_isDestroyed == false)) {
            lv_zergBaseStructureGroup = UnitGroupEmpty();
            UnitGroupLoopBegin(UnitGroup(null, gv_zergBase[lv_i].lv_basePlayer, gv_zergBase[lv_i].lv_baseRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitGetType(UnitGroupLoopCurrent()) == "Hatchery") || (UnitGetType(UnitGroupLoopCurrent()) == "Lair") || (UnitGetType(UnitGroupLoopCurrent()) == "Hive"))) {
                    UnitGroupAdd(lv_zergBaseStructureGroup, UnitGroupLoopCurrent());
                }

            }
            UnitGroupLoopEnd();
            if ((UnitGroupCount(lv_zergBaseStructureGroup, c_unitCountAlive) == 0)) {
                gv_zergBase[lv_i].lv_isDestroyed = true;
                gv_zergBasesDestroyedCount += 1;
                if ((gv_zergBase[1].lv_isDestroyed == true) && (gv_zergBase[2].lv_isDestroyed == true) && (gv_zergBase[3].lv_isDestroyed == true) && (gv_zergBase[4].lv_isDestroyed == true)) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_TransmissionAllZergBasesDestroyedQ, true, false);
                }

            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergBaseDestroyed_Init () {
    gt_ZergBaseDestroyed = TriggerCreate("gt_ZergBaseDestroyed_Func");
    TriggerAddEventTimePeriodic(gt_ZergBaseDestroyed, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - All Zerg Bases Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllZergBasesDestroyedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00305", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_VictoryStasisChambersCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllZergBasesDestroyedQ_Init () {
    gt_TransmissionAllZergBasesDestroyedQ = TriggerCreate("gt_TransmissionAllZergBasesDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn Off Warn Of Zerg Base Triggers
//--------------------------------------------------------------------------------------------------
bool gt_TurnOffWarnOfZergBaseTriggers_Func (bool testConds, bool runActions) {
    region auto636719FE_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto636719FE_val = EventUnitRegion();
    if (auto636719FE_val == RegionFromId(41)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase01Q, false);
    }
    else if (auto636719FE_val == RegionFromId(44)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase02Q, false);
    }
    else if (auto636719FE_val == RegionFromId(45)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase03Q, false);
    }
    else if (auto636719FE_val == RegionFromId(46)) {
        TriggerEnable(gt_TransmissionWarnOfZergBase04Q, false);
    }
    else {
    }
    if ((TriggerIsEnabled(gt_TransmissionWarnOfZergBase01Q) == false) && (TriggerIsEnabled(gt_TransmissionWarnOfZergBase02Q) == false) && (TriggerIsEnabled(gt_TransmissionWarnOfZergBase03Q) == false) && (TriggerIsEnabled(gt_TransmissionWarnOfZergBase04Q) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOffWarnOfZergBaseTriggers_Init () {
    gt_TurnOffWarnOfZergBaseTriggers = TriggerCreate("gt_TurnOffWarnOfZergBaseTriggers_Func");
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(44), true);
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_TurnOffWarnOfZergBaseTriggers, null, RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00320", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[1].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveRevealed", true, -1);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase01Q_Init () {
    gt_TransmissionWarnOfZergBase01Q = TriggerCreate("gt_TransmissionWarnOfZergBase01Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase01Q, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase02Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00320", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[2].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveRevealed", true, -1);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase02Q_Init () {
    gt_TransmissionWarnOfZergBase02Q = TriggerCreate("gt_TransmissionWarnOfZergBase02Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase02Q, null, RegionFromId(44), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase03Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00320", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[3].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase03Q_Init () {
    gt_TransmissionWarnOfZergBase03Q = TriggerCreate("gt_TransmissionWarnOfZergBase03Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase03Q, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warn Of Zerg Base 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarnOfZergBase04Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur04|Line00323", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeAI);
    gf_PingClosestNullCircuitToPoint(gv_zergBase[4].lv_basePingPoint);
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarnOfZergBase04Q_Init () {
    gt_TransmissionWarnOfZergBase04Q = TriggerCreate("gt_TransmissionWarnOfZergBase04Q_Func");
    TriggerAddEventUnitRegion(gt_TransmissionWarnOfZergBase04Q, null, RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Larva
//--------------------------------------------------------------------------------------------------
bool gt_KillLarva_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Larva", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillLarva_Init () {
    gt_KillLarva = TriggerCreate("gt_KillLarva_Func");
    TriggerAddEventUnitDied(gt_KillLarva, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Stasis Chambers Init
//--------------------------------------------------------------------------------------------------
bool gt_PurifierStasisChambersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1556);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1557);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1558);
    gv_nullCircuits[1] = UnitFromId(2);
    gv_nullCircuits[2] = UnitFromId(411);
    gv_nullCircuits[3] = UnitFromId(1);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[1], null, StringExternal("Param/Value/024F9E2D"), StringExternal("Param/Value/BFB6124E"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[2], null, StringExternal("Param/Value/72348F38"), StringExternal("Param/Value/7BD6614C"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[3], null, StringExternal("Param/Value/98780D7E"), StringExternal("Param/Value/5D431F9A"));
    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_revealRegion = RegionFromId(17);
    gv_purifierStasisChambers[lv_i].lv_spawnPoint = PointFromId(442);
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1559);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1562);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1563);
    gv_nullCircuits[4] = UnitFromId(4);
    gv_nullCircuits[5] = UnitFromId(7);
    gv_nullCircuits[6] = UnitFromId(8);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[4], null, StringExternal("Param/Value/BF9B9D00"), StringExternal("Param/Value/7E63F35A"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[5], null, StringExternal("Param/Value/E03BF46D"), StringExternal("Param/Value/5C84B483"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[6], null, StringExternal("Param/Value/64C01EBB"), StringExternal("Param/Value/7D11905E"));
    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_revealRegion = RegionFromId(18);
    gv_purifierStasisChambers[lv_i].lv_spawnPoint = PointFromId(450);
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1560);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1567);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1568);
    gv_nullCircuits[7] = UnitFromId(212);
    gv_nullCircuits[8] = UnitFromId(213);
    gv_nullCircuits[9] = UnitFromId(214);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[7], null, StringExternal("Param/Value/37658080"), StringExternal("Param/Value/54771EBA"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[8], null, StringExternal("Param/Value/8B4335BA"), StringExternal("Param/Value/6C7B0458"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[9], null, StringExternal("Param/Value/D5D19258"), StringExternal("Param/Value/15B74676"));
    lv_i += 1;
    gv_purifierStasisChambers[lv_i].lv_spawnPoint = PointFromId(458);
    gv_purifierStasisChambers[lv_i].lv_waypoint01 = PointFromId(1561);
    gv_purifierStasisChambers[lv_i].lv_waypoint02 = PointFromId(1564);
    gv_purifierStasisChambers[lv_i].lv_waypoint03 = PointFromId(1566);
    gv_nullCircuits[10] = UnitFromId(210);
    gv_nullCircuits[11] = UnitFromId(211);
    gv_nullCircuits[12] = UnitFromId(209);
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[10], null, StringExternal("Param/Value/AB757EB7"), StringExternal("Param/Value/8D137209"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[11], null, StringExternal("Param/Value/A9E6A4BF"), StringExternal("Param/Value/19574FCB"));
    libVCMI_gf_SetUnitInfoTextCampaign(gv_nullCircuits[12], null, StringExternal("Param/Value/0C91D1E2"), StringExternal("Param/Value/4E396BE5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierStasisChambersInit_Init () {
    gt_PurifierStasisChambersInit = TriggerCreate("gt_PurifierStasisChambersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Purifier Units to Wave Group
//--------------------------------------------------------------------------------------------------
bool gt_AssignPurifierUnitstoWaveGroup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_02_DOMINION7))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(18)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_DOMINION7, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_purifierStasisChambers[2].lv_warpathGroup, UnitGroupLoopCurrent());
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignPurifierUnitstoWaveGroup_Init () {
    gt_AssignPurifierUnitstoWaveGroup = TriggerCreate("gt_AssignPurifierUnitstoWaveGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Null Circuit Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_NullCircuitDestroyed_Func (bool testConds, bool runActions) {
    int auto4AAF15E7_ae;
    int auto4AAF15E7_ai;

    // Variable Declarations
    int lv_i;
    int lv_powerInhibitorIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NullCircuitActivated"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveNullCircuitsCount += 1;
    TriggerExecute(gt_ObjectiveNullCircuitsUpdate, true, false);
    if ((gv_objectiveNullCircuitsCount == gv_objectiveNullCircuitsMax)) {
        PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
        TriggerExecute(gt_VictoryStasisChambersCompleted, true, false);
    }

    UnitSetOwner(EventUnit(), 0, true);
    UnitStatusBarOverride(EventUnit(), -1);
    UnitSetState(EventUnit(), c_unitStateHighlightable, false);
    UnitSetState(EventUnit(), c_unitStateTargetable, false);
    UnitSetState(EventUnit(), c_unitStateSelectable, false);
    UnitSetState(EventUnit(), c_unitStateTooltipable, false);
    UnitSelect(EventUnit(), gv_pLAYER_01_USER, false);
    UnitSelect(EventUnit(), gv_pLAYER_02_USER, false);
    auto4AAF15E7_ae = 12;
    auto4AAF15E7_ai = 1;
    lv_i = 1;
    for ( ; ( (auto4AAF15E7_ai >= 0 && lv_i <= auto4AAF15E7_ae) || (auto4AAF15E7_ai <= 0 && lv_i >= auto4AAF15E7_ae) ) ; lv_i += auto4AAF15E7_ai ) {
        if ((EventUnit() == gv_nullCircuits[lv_i])) {
            lv_powerInhibitorIndex = lv_i;
            break;
        }

    }
    if ((lv_powerInhibitorIndex < 10)) {
        libVCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupApply Work", "Purifier_Energy_Pipes", RegionFromName(("Power Line 0" + IntToString(lv_powerInhibitorIndex))));
    }
    else {
        libVCMI_gf_SendActorMessageToDoodadsInRegion("AnimGroupApply Work", "Purifier_Energy_Pipes", RegionFromName(("Power Line " + IntToString(lv_powerInhibitorIndex))));
    }
    if (((gv_objectiveNullCircuitsMax - gv_objectiveNullCircuitsCount) <= 4)) {
        TriggerExecute(gt_TransmissionLastFewNullCircuitsToGoEncouragementQ, true, false);
    }

    if ((gv_purifierStasisChambers[1].lv_isActivated == false) && (gv_objectiveNullCircuitsCount == 3)) {
        gf_ActivateStasisChamber(1);
    }

    if ((gv_purifierStasisChambers[2].lv_isActivated == false) && (gv_objectiveNullCircuitsCount == 6)) {
        gf_ActivateStasisChamber(2);
    }

    if ((gv_purifierStasisChambers[3].lv_isActivated == false) && (gv_objectiveNullCircuitsCount == 9)) {
        gf_ActivateStasisChamber(3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NullCircuitDestroyed_Init () {
    gt_NullCircuitDestroyed = TriggerCreate("gt_NullCircuitDestroyed_Func");
    TriggerAddEventUnitAbility(gt_NullCircuitDestroyed, null, AbilityCommand("PowerConductorLockMorph", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Activate Stasis Chamber Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionActivateStasisChamberQ_Func (bool testConds, bool runActions) {
    int auto229ECD4C_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto229ECD4C_val = gv_purifierStasisChambersOnlineCount;
    if (auto229ECD4C_val == 1) {
    }
    else if (auto229ECD4C_val == 2) {
    }
    else if (auto229ECD4C_val == 3) {
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionActivateStasisChamberQ_Init () {
    gt_TransmissionActivateStasisChamberQ = TriggerCreate("gt_TransmissionActivateStasisChamberQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Initiate Attack From Stasis Chamber Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionInitiateAttackFromStasisChamberQ_Func (bool testConds, bool runActions) {
    int auto23B6075B_val;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    auto23B6075B_val = gv_objectiveNullCircuitsCount;
    if (auto23B6075B_val == 3) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00181", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(17));
        VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(17));
        gf_WarpInPurifiers(2);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B24047CE"));
        gv_purifiersSpawned = true;
        TriggerExecute(gt_DialogSetup, true, false);
        TriggerExecute(gt_EnableButtons, true, false);
    }
    else if (auto23B6075B_val == 6) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00183", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gf_WarpInPurifiers(2);
    }
    else if (auto23B6075B_val == 9) {
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00204", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00205", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gf_WarpInPurifiers(2);
        libNtve_gf_UnitCreateFacingPoint(1, "FenixChampion", c_unitCreateIgnorePlacement, gv_pLAYER_02_DOMINION7, PointFromId(442), RegionGetCenter(RegionFromId(114)));
        gf_CreateWarpInEffect(UnitLastCreated());
    }
    else {
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionInitiateAttackFromStasisChamberQ_Init () {
    gt_TransmissionInitiateAttackFromStasisChamberQ = TriggerCreate("gt_TransmissionInitiateAttackFromStasisChamberQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Destroy Null Circuits Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDestroyNullCircuitsReminderQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait((4.0 * 60.0), c_timeAI);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_purifierStasisChambersOnlineCount == 0)) {
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("DestroyedReminder", true, -1);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDestroyNullCircuitsReminderQ_Init () {
    gt_TransmissionDestroyNullCircuitsReminderQ = TriggerCreate("gt_TransmissionDestroyNullCircuitsReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Player Sees First Null Circuit Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cHOSEN_UNIT;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_cHOSEN_UNIT = UnitGroupUnit(UnitGroup("NullCircuit", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/40400A71"), null, UnitGetPosition(lv_cHOSEN_UNIT));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/3E72F9FF"), null, UnitGetPosition(lv_cHOSEN_UNIT));
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_cHOSEN_UNIT), 2.0, Color(0.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, EventUnitRegion(), 8.0, false);
    VisRevealArea(gv_pLAYER_02_USER, EventUnitRegion(), 8.0, false);
    libVCMI_gf_CreateReticleEffectAndTextTagAtPoint(libVCMI_ge_CampaginReticleType_ProtossEnemy, libVCMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/1653F5A8"), libNtve_gf_PointFromXYZ(PointGetX(UnitGetPosition(lv_cHOSEN_UNIT)), PointGetY(UnitGetPosition(lv_cHOSEN_UNIT)), 0.5));
    libHots_gf_StoreActorForUnit(lv_cHOSEN_UNIT, 1, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lv_cHOSEN_UNIT, 1, TextTagLastCreated());
    gf_TrackNullCircuitReticleAndTextTag(lv_cHOSEN_UNIT);
    Wait(2.0, c_timeGame);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveRevealed", true, -1);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Init () {
    gt_TransmissionPlayerSeesFirstNullCircuitRevealQ = TriggerCreate("gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(56), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(40), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(48), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(65), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(66), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(67), true);
    TriggerAddEventUnitRegion(gt_TransmissionPlayerSeesFirstNullCircuitRevealQ, null, RegionFromId(110), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Last Few Null Circuits To Go Encouragement Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libVCMI_gf_GameIsOver() == false) && (libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        UnitGroupLoopBegin(UnitGroup("NullCircuit", gv_pLAYER_02_DOMINION5, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitGroupLoopCurrent()), 6.0, Color(0.00, 100.00, 0.00));
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 3.0), 8.0, false);
            VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 3.0), 8.0, false);
            Wait(0.25, c_timeAI);
        }
        UnitGroupLoopEnd();
        Wait(1.75, c_timeAI);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
        libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Init () {
    gt_TransmissionLastFewNullCircuitsToGoEncouragementQ = TriggerCreate("gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Null Circuit Pings
//--------------------------------------------------------------------------------------------------
bool gt_TrackNullCircuitPings_Func (bool testConds, bool runActions) {
    int auto85A62C08_ae;
    int auto85A62C08_ai;

    // Variable Declarations
    int lv_i;
    unit lv_nullCircuit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            auto85A62C08_ae = gv_objectiveNullCircuitsMax;
            auto85A62C08_ai = 1;
            lv_i = 1;
            for ( ; ( (auto85A62C08_ai >= 0 && lv_i <= auto85A62C08_ae) || (auto85A62C08_ai <= 0 && lv_i >= auto85A62C08_ae) ) ; lv_i += auto85A62C08_ai ) {
                lv_nullCircuit = gv_nullCircuits[lv_i];
                if ((UnitGetType(lv_nullCircuit) == "NullCircuit")) {
                    if ((libNtve_gf_UnitIsVisibleToPlayer(lv_nullCircuit, gv_pLAYER_01_USER) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_nullCircuit, gv_pLAYER_02_USER) == true) && (libHots_gf_PingStoredForUnit(lv_nullCircuit, 1) == c_invalidPingId)) {
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lv_nullCircuit), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
                        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/10DFB082"));
                        libHots_gf_StorePingForUnit(lv_nullCircuit, 1, PingLastCreated());
                    }

                }
                else {
                    PingDestroy(libHots_gf_PingStoredForUnit(lv_nullCircuit, 1));
                }
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackNullCircuitPings_Init () {
    gt_TrackNullCircuitPings = TriggerCreate("gt_TrackNullCircuitPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Cybros Lights
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCybrosLights_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_newLight;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newLight = gf_GetCybrosLightConfiguration();
    GameSetLighting(lv_newLight, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCybrosLights_Init () {
    gt_UpdateCybrosLights = TriggerCreate("gt_UpdateCybrosLights_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Warning Ping On Core Matrix
//--------------------------------------------------------------------------------------------------
bool gt_TrackWarningPingOnCoreMatrix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;
    bool lv_pingActive;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libVCMI_gf_GameIsOver() == false)) {
        if ((UnitGetDamageTakenTime(gv_purifierCoreMatrix) <= 4.0)) {
            if ((lv_pingActive == false)) {
                lv_pingActive = true;
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_purifierCoreMatrix), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                lv_ping = PingLastCreated();
            }

        }
        else {
            lv_pingActive = false;
            PingDestroy(lv_ping);
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackWarningPingOnCoreMatrix_Init () {
    gt_TrackWarningPingOnCoreMatrix = TriggerCreate("gt_TrackWarningPingOnCoreMatrix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Core Matrix Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCoreMatrixAttackedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShieldsPercent, c_unitPropCurrent) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (gv_coreMatrixWarningCycle >= 3) {
        gv_coreMatrixWarningCycle = 1;
    }
    else {
        gv_coreMatrixWarningCycle = gv_coreMatrixWarningCycle + 1;
    }
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C04CA56A"), null, UnitGetPosition(gv_purifierCoreMatrix));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/497A4AB0"), null, UnitGetPosition(gv_purifierCoreMatrix));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00164", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    while (!((UnitGetDamageTakenTime(gv_purifierCoreMatrix) > 20.0))) {
        Wait(1.0, c_timeAI);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCoreMatrixAttackedQ_Init () {
    gt_TransmissionCoreMatrixAttackedQ = TriggerCreate("gt_TransmissionCoreMatrixAttackedQ_Func");
    TriggerAddEventUnitAttacked2(gt_TransmissionCoreMatrixAttackedQ, UnitRefFromVariable("gv_purifierCoreMatrix"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Core Matrix Badly Damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCoreMatrixBadlyDamagedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionCoreMatrixCriticallyDamagedQ, true);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/51E52E85"), null, UnitGetPosition(gv_purifierCoreMatrix));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/B45B6BBD"), null, UnitGetPosition(gv_purifierCoreMatrix));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("MainObjectiveDefendDamaged", true, -1);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCoreMatrixBadlyDamagedQ_Init () {
    gt_TransmissionCoreMatrixBadlyDamagedQ = TriggerCreate("gt_TransmissionCoreMatrixBadlyDamagedQ_Func");
    TriggerAddEventUnitProperty(gt_TransmissionCoreMatrixBadlyDamagedQ, UnitRefFromVariable("gv_purifierCoreMatrix"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Core Matrix Critically Damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCoreMatrixCriticallyDamagedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/A85C6A70"), null, UnitGetPosition(gv_purifierCoreMatrix));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/616589F1"), null, UnitGetPosition(gv_purifierCoreMatrix));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("MainObjectiveDefendCritical", true, -1);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionCoreMatrixCriticallyDamagedQ_Init () {
    gt_TransmissionCoreMatrixCriticallyDamagedQ = TriggerCreate("gt_TransmissionCoreMatrixCriticallyDamagedQ_Func");
    TriggerEnable(gt_TransmissionCoreMatrixCriticallyDamagedQ, false);
    TriggerAddEventUnitProperty(gt_TransmissionCoreMatrixCriticallyDamagedQ, UnitRefFromVariable("gv_purifierCoreMatrix"), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Bonus Objective After Time
//--------------------------------------------------------------------------------------------------
bool gt_RevealBonusObjectiveAfterTime_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait((7.0 * 60.0), c_timeAI);
    TriggerExecute(gt_TransmissionPurifierWardenRevealQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealBonusObjectiveAfterTime_Init () {
    gt_RevealBonusObjectiveAfterTime = TriggerCreate("gt_RevealBonusObjectiveAfterTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Reveal Bonus Objective Region
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersRevealBonusObjectiveRegion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionPurifierWardenRevealQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersRevealBonusObjectiveRegion_Init () {
    gt_UnitEntersRevealBonusObjectiveRegion = TriggerCreate("gt_UnitEntersRevealBonusObjectiveRegion_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersRevealBonusObjectiveRegion, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Warden Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierWardenRevealQ_Func (bool testConds, bool runActions) {
    int auto15DEE791_ae;
    int auto15DEE791_ai;

    // Variable Declarations
    int lv_pointInt;
    point[14] lv_points;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_PurifierWardenBehavior, true, false);
    lv_points[0] = PointFromId(932853040);
    lv_points[1] = PointFromId(859799326);
    lv_points[2] = PointFromId(2122389886);
    lv_points[3] = PointFromId(1337067972);
    lv_points[4] = PointFromId(598450711);
    lv_points[5] = PointFromId(1558847455);
    lv_points[6] = PointFromId(216882698);
    lv_points[7] = PointFromId(341163323);
    lv_points[8] = PointFromId(970318426);
    lv_points[9] = PointFromId(484655483);
    lv_points[10] = PointFromId(1879762968);
    lv_points[11] = PointFromId(440350564);
    lv_points[12] = PointFromId(2078585592);
    lv_points[13] = PointFromId(740011808);
    libVCMI_gf_CreateObjectivePing(false, UnitGetPosition(UnitFromId(636256265)), StringExternal("Param/Value/1DF8E26D"));
    libHots_gf_StorePingForUnit(UnitFromId(636256265), 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), UnitFromId(636256265));
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(119));
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(119));
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPurifierWardenCreate, true, true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveEscortMoving", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6CD9800C"));
    auto15DEE791_ae = 13;
    auto15DEE791_ai = 1;
    lv_pointInt = 0;
    for ( ; ( (auto15DEE791_ai >= 0 && lv_pointInt <= auto15DEE791_ae) || (auto15DEE791_ai <= 0 && lv_pointInt >= auto15DEE791_ae) ) ; lv_pointInt += auto15DEE791_ai ) {
        if ((lv_points[lv_pointInt] != null)) {
            PingCreate(PlayerGroupAll(), "PingArrow", lv_points[lv_pointInt], ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 8.0);
            PingSetScale(PingLastCreated(), 0.75);
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_points[lv_pointInt], 10.0), 5.0, false);
            VisRevealArea(gv_pLAYER_02_USER, RegionCircle(lv_points[lv_pointInt], 10.0), 5.0, false);
            Wait(0.1, c_timeGame);
        }

    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierWardenRevealQ_Init () {
    gt_TransmissionPurifierWardenRevealQ = TriggerCreate("gt_TransmissionPurifierWardenRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Warden Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierWardenDiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;
    unit lv_solariteUnit;

    // Variable Initialization
    lv_unitPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TransmissionPurifierWardenEngagesPlayerQ, false);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    Wait(2.0, c_timeAI);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00174", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierWardenDiesQ_Init () {
    gt_TransmissionPurifierWardenDiesQ = TriggerCreate("gt_TransmissionPurifierWardenDiesQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionPurifierWardenDiesQ, UnitRefFromVariable("gv_purifierWarden"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Megalith Reaches End
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierMegalithReachesEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;
    unit lv_solariteUnit;

    // Variable Initialization
    lv_unitPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectivePurifierWardenCount += 1;
    if ((gv_objectivePurifierWardenCount == gv_objectivePurifierWardenMax)) {
        TriggerExecute(gt_ObjectiveDestroyPurifierWardenComplete, true, false);
    }

    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/78CDA6B3"), null, lv_unitPoint);
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/C1911946"), null, lv_unitPoint);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_unitPoint, 3.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeAI);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(636256265), true);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveSuccess", true, -1);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierMegalithReachesEnd_Init () {
    gt_TransmissionPurifierMegalithReachesEnd = TriggerCreate("gt_TransmissionPurifierMegalithReachesEnd_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierMegalithReachesEnd, UnitRefFromUnit(UnitFromId(636256265)), RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Megalith Dies
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierMegalithDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unitPoint;
    unit lv_solariteUnit;

    // Variable Initialization
    lv_unitPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyPurifierWardenFailed, true, false);
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E7095796"), null, lv_unitPoint);
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/0BD49981"), null, lv_unitPoint);
    libVCMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_unitPoint, 3.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeAI);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E1CE1BE5"));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierMegalithDies_Init () {
    gt_TransmissionPurifierMegalithDies = TriggerCreate("gt_TransmissionPurifierMegalithDies_Func");
    TriggerAddEventUnitDied(gt_TransmissionPurifierMegalithDies, UnitRefFromUnit(UnitFromId(636256265)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purifier Warden Behavior
//--------------------------------------------------------------------------------------------------
bool gt_PurifierWardenBehavior_Func (bool testConds, bool runActions) {
    fixed auto3505BB6D_at;

    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libVCMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_purifierWarden) == true)) {
        if ((libVCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(gv_purifierWarden, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
                while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
                    Wait(1.0, c_timeAI);
                }
            }
            else {
                libNtve_gf_AICast(gv_purifierWarden, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroup("InvisibleTargetDummy", 0, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
                auto3505BB6D_at = 0;
                while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) && auto3505BB6D_at <= 8.0) {
                    Wait(1.0, c_timeAI);
                    auto3505BB6D_at = auto3505BB6D_at + 1.0;
                }
            }
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurifierWardenBehavior_Init () {
    gt_PurifierWardenBehavior = TriggerCreate("gt_PurifierWardenBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Purifier Warden Engages Player Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPurifierWardenEngagesPlayerQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) <= gv_pLAYER_02_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_DOMINION7)))) {
            return false;
        }

        if (!((UnitIsAlive(gv_purifierWarden) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false)) {
        gv_purifierWardenBattlecryCount += 1;
        TriggerQueueEnter();
        if ((gv_purifierWardenBattlecryCount == 1) && (UnitIsAlive(gv_purifierWarden) == true)) {
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
            libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00171", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
        }

        TriggerQueueExit();
    }

    while (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(gv_purifierWarden) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPurifierWardenEngagesPlayerQ_Init () {
    gt_TransmissionPurifierWardenEngagesPlayerQ = TriggerCreate("gt_TransmissionPurifierWardenEngagesPlayerQ_Func");
    TriggerAddEventUnitRegion(gt_TransmissionPurifierWardenEngagesPlayerQ, null, RegionFromId(107), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AttackingTransmission
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingTransmission_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingTransmission_Init () {
    gt_EnemyAttackingTransmission = TriggerCreate("gt_EnemyAttackingTransmission_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingTransmission, gv_pLAYER_02_DOMINION2);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingTransmission, gv_pLAYER_02_DOMINION3);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingTransmission, gv_pLAYER_02_DOMINION4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopAI(gv_pLAYER_02_DOMINION2, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_02_DOMINION4, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    cai_startall();
    libVCMI_gf_EnableVoidCampaignAIBehaviorForAllPlayers();
    cai_runall();
    TriggerExecute(gt_AIAttackWaves, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        TriggerExecute(gt_AIUpgradesHard, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesNormal, true, false);
    }
    TriggerExecute(gt_AIUpgradesPurifierAttackGroup, true, false);
    TriggerExecute(gt_ZergReinforcementsController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 5000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 5000);
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION7, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(600.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(300.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesNormal_Init () {
    gt_AIUpgradesNormal = TriggerCreate("gt_AIUpgradesNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades (Hard)
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
    }
    PlayerGroupLoopEnd();
    Wait(360.0, c_timeAI);
    PlayerGroupLoopBegin(gv_enemyPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel3", 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHard_Init () {
    gt_AIUpgradesHard = TriggerCreate("gt_AIUpgradesHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades Purifier Attack Group
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesPurifierAttackGroup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_DOMINION7, "ProtossShieldsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesPurifierAttackGroup_Init () {
    gt_AIUpgradesPurifierAttackGroup = TriggerCreate("gt_AIUpgradesPurifierAttackGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Created
//--------------------------------------------------------------------------------------------------
bool gt_HybridCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "HybridReaver") || (UnitGetType(EventUnitCreatedUnit()) == "HybridDestroyer") || (UnitGetType(EventUnitCreatedUnit()) == "HybridNemesis") || (UnitGetType(EventUnitCreatedUnit()) == "HybridBehemoth") || (UnitGetType(EventUnitCreatedUnit()) == "HybridDominatorVoid")))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateWarpInEffect(EventUnitCreatedUnit());
    if ((UnitGetType(EventUnitCreatedUnit()) == "HybridBehemoth")) {
        gf_HybridBehemothAI(EventUnitCreatedUnit());
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "HybridNemesis")) {
        gf_HybridNemesisAI(EventUnitCreatedUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridCreated_Init () {
    gt_HybridCreated = TriggerCreate("gt_HybridCreated_Func");
    TriggerAddEventUnitCreated(gt_HybridCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (4.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (7.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (9.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (12.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (16.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (18.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (23.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (26.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (29.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (32.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_DOMINION2) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_DOMINION2) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_DOMINION3) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_DOMINION3) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_DOMINION4) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_DOMINION4) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, UnitGetPosition(gv_purifierCoreMatrix));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION2, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(3), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, UnitGetPosition(gv_purifierCoreMatrix));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION2, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(4), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    if (((UnitIsAlive(UnitFromId(165971686)) == false) || (UnitIsAlive(UnitFromId(2137751540)) == false))) {
        lv_attackPathWaypoint = PointFromId(2045557023);
    }
    else {
        lv_attackPathWaypoint = UnitGetPosition(gv_purifierCoreMatrix);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, lv_attackPathWaypoint);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, lv_attackPathWaypoint);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, lv_attackPathWaypoint);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(4), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION2, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(3), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, UnitGetPosition(gv_purifierCoreMatrix));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(4), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION2, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(3), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(240.0, c_timeGame);
    TriggerExecute(gt_AttackWave05, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    if (((UnitIsAlive(UnitFromId(165971686)) == false) || (UnitIsAlive(UnitFromId(2137751540)) == false))) {
        lv_attackPathWaypoint = PointFromId(2045557023);
    }
    else {
        lv_attackPathWaypoint = UnitGetPosition(gv_purifierCoreMatrix);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, lv_attackPathWaypoint);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, lv_attackPathWaypoint);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, lv_attackPathWaypoint);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION2, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(3), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(4), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, UnitGetPosition(gv_purifierCoreMatrix));
    TriggerExecute(gt_Torrasque, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(4), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION2, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(3), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, UnitGetPosition(gv_purifierCoreMatrix));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, UnitGetPosition(gv_purifierCoreMatrix));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(4), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION2, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(3), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(120.0, c_timeGame);
    TriggerExecute(gt_AttackWave08, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    if (((UnitIsAlive(UnitFromId(165971686)) == false) || (UnitIsAlive(UnitFromId(2137751540)) == false))) {
        lv_attackPathWaypoint = PointFromId(2045557023);
    }
    else {
        lv_attackPathWaypoint = UnitGetPosition(gv_purifierCoreMatrix);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, lv_attackPathWaypoint);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, lv_attackPathWaypoint);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION4, lv_attackPathWaypoint);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION3, gv_pLAYER_02_DOMINION4, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(4), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(120.0, c_timeGame);
    TriggerExecute(gt_AttackWave07, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave08_Init () {
    gt_AttackWave08 = TriggerCreate("gt_AttackWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements Controller
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcementsController_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(360.0, c_timeAI);
    TriggerExecute(gt_ZergReinforcements01Q, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(360.0, 360.0, 240.0, 240.0), c_timeAI);
    TriggerExecute(gt_ZergReinforcements02, true, false);
    Wait(libLotv_gf_DifficultyValueFixed2(360.0, 360.0, 240.0, 240.0), c_timeAI);
    TriggerExecute(gt_ZergReinforcements03, true, false);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        Wait(240.0, c_timeAI);
        TriggerExecute(gt_ZergReinforcements04Hard, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcementsController_Init () {
    gt_ZergReinforcementsController = TriggerCreate("gt_ZergReinforcementsController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements01Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(25), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(58), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(61), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(64), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(70), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(82), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(73), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(74), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(77), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(104), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(49), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(95), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(96), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(97), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(84), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(87), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(90), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(93), true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00160", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements01Q_Init () {
    gt_ZergReinforcements01Q = TriggerCreate("gt_ZergReinforcements01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(28), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(52), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(60), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(63), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(69), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(80), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(72), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(75), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(79), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(105), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(50), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(98), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(99), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(100), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(85), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(88), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(91), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(94), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements02_Init () {
    gt_ZergReinforcements02 = TriggerCreate("gt_ZergReinforcements02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 03
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(31), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(55), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(59), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(62), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(68), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(81), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(71), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(76), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(78), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(106), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(51), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(101), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(102), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(103), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(83), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(86), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(89), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(92), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements03_Init () {
    gt_ZergReinforcements03 = TriggerCreate("gt_ZergReinforcements03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Reinforcements 04 (Hard+)
//--------------------------------------------------------------------------------------------------
bool gt_ZergReinforcements04Hard_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(108), true);
    AIToggleBulliesInRegion(gv_zergBase[1].lv_basePlayer, RegionFromId(109), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(111), true);
    AIToggleBulliesInRegion(gv_zergBase[2].lv_basePlayer, RegionFromId(112), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(115), true);
    AIToggleBulliesInRegion(gv_zergBase[3].lv_basePlayer, RegionFromId(116), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(113), true);
    AIToggleBulliesInRegion(gv_zergBase[4].lv_basePlayer, RegionFromId(114), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergReinforcements04Hard_Init () {
    gt_ZergReinforcements04Hard = TriggerCreate("gt_ZergReinforcements04Hard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Core Matrix Minimum Shields
//--------------------------------------------------------------------------------------------------
bool gt_StatCoreMatrixMinimumShields_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) != gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent) == 0.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_coreMatrixLowestShields = 0.0;
    }
    else {
        if ((UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent) < gv_coreMatrixLowestShields)) {
            gv_coreMatrixLowestShields = UnitGetPropertyFixed(gv_purifierCoreMatrix, c_unitPropShields, c_unitPropCurrent);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatCoreMatrixMinimumShields_Init () {
    gt_StatCoreMatrixMinimumShields = TriggerCreate("gt_StatCoreMatrixMinimumShields_Func");
    TriggerAddEventUnitDamaged(gt_StatCoreMatrixMinimumShields, UnitRefFromVariable("gv_purifierCoreMatrix"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat - Hybrid Slain
//--------------------------------------------------------------------------------------------------
bool gt_StatHybridSlain_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HybridReaver") || (UnitGetType(EventUnit()) == "HybridDestroyer") || (UnitGetType(EventUnit()) == "HybridNemesis") || (UnitGetType(EventUnit()) == "HybridBehemoth") || (UnitGetType(EventUnit()) == "HybridDominatorVoid")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridKilledCount += 1;
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1) && (UnitGetType(EventUnit()) == "HybridBehemoth")) {
        gv_masteryBehemothKilledCount += 1;
        if ((gv_masteryBehemothKilledCount >= 5) && (TimerGetRemaining(gv_masteryBehemothKillTimer) > 0.0)) {
            TriggerExecute(gt_AchievementHybridBehemothsKilledMastery, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatHybridSlain_Init () {
    gt_StatHybridSlain = TriggerCreate("gt_StatHybridSlain_Func");
    TriggerAddEventUnitDied(gt_StatHybridSlain, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Purifier Activation Combo
//--------------------------------------------------------------------------------------------------
bool gt_AchievementPurifierActivationCombo_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("PPurifier03_3", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementPurifierActivationCombo_Init () {
    gt_AchievementPurifierActivationCombo = TriggerCreate("gt_AchievementPurifierActivationCombo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Hybrid Behemoths Killed (Mastery)
//--------------------------------------------------------------------------------------------------
bool gt_AchievementHybridBehemothsKilledMastery_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_CampaignAwardAchievement("Mastery_Purifier03", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementHybridBehemothsKilledMastery_Init () {
    gt_AchievementHybridBehemothsKilledMastery = TriggerCreate("gt_AchievementHybridBehemothsKilledMastery_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveNullCircuitsFailed, true, false);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/AB60F842"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/24C7B286"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
    }
    else {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/377A188D"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/C137220E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
    }
    Wait(2.0, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_02_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_02_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    Wait(4.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    DialogDestroyAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveNullCircuitsFailed, true, false);
    TriggerExecute(gt_ObjectivePurifiersMustSurviveFailed, true, false);
    libVCMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libVCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7D0AF851"), libVCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_purifierCoreMatrix"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stasis Chambers Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStasisChambersCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStasisChambersCompleted_Init () {
    gt_VictoryStasisChambersCompleted = TriggerCreate("gt_VictoryStasisChambersCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_MakeUnitInvulnerable(gv_purifierCoreMatrix, true);
    DialogDestroyAll();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveNullCircuitsComplete, true, false);
    TriggerExecute(gt_ObjectivePurifiersMustSurviveComplete, true, true);
    TriggerQueueEnter();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(436)), 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, UnitGetPosition(UnitFromId(436)), 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/35CE9A06"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/C480DD83"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Aiur05|Line00184", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Victory);
    libVCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_GameOver(libVCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(libVCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier03Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier03Primary01", gv_objectiveNullCircuitsCount);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsCreate_Init () {
    gt_ObjectiveNullCircuitsCreate = TriggerCreate("gt_ObjectiveNullCircuitsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsComplete_Init () {
    gt_ObjectiveNullCircuitsComplete = TriggerCreate("gt_ObjectiveNullCircuitsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, true);
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier03Primary01", gv_objectiveNullCircuitsCount);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsUpdate_Init () {
    gt_ObjectiveNullCircuitsUpdate = TriggerCreate("gt_ObjectiveNullCircuitsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Null Circuits Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNullCircuitsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNullCircuitsCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNullCircuitsFailed_Init () {
    gt_ObjectiveNullCircuitsFailed = TriggerCreate("gt_ObjectiveNullCircuitsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifiers Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifiersMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVCMI_gf_CreateObjectiveCampaign("PPurifier03Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifiersMustSurviveCreate_Init () {
    gt_ObjectivePurifiersMustSurviveCreate = TriggerCreate("gt_ObjectivePurifiersMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifiers Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifiersMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectivePurifiersMustSurviveCreate, true, false);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("DefendSucces", true, -1);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary02", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifiersMustSurviveComplete_Init () {
    gt_ObjectivePurifiersMustSurviveComplete = TriggerCreate("gt_ObjectivePurifiersMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Purifiers Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePurifiersMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Speech);
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectivePurifiersMustSurviveCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Primary02", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePurifiersMustSurviveFailed_Init () {
    gt_ObjectivePurifiersMustSurviveFailed = TriggerCreate("gt_ObjectivePurifiersMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Warden Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierWardenCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libVCMI_gf_CreateObjectiveCampaign("PPurifier03Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(636256265), false);
    UnitSetPropertyFixed(UnitFromId(636256265), c_unitPropShieldsPercent, 0.0);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(859799326)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(598450711)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1558847455)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(216882698)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(341163323)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(484655483)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1879762968)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(440350564)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2078585592)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(740011808)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(636256265), OrderTargetingUnit(AbilityCommand("MegalithCutterDock", 0), UnitFromId(1339986018)), c_orderQueueAddToEnd);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierWardenCreate_Init () {
    gt_ObjectiveDestroyPurifierWardenCreate = TriggerCreate("gt_ObjectiveDestroyPurifierWardenCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Warden Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierWardenUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libVCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyPurifierWardenCreate, true, false);
    libVCMI_gf_SetMissionObjectiveProgress("PPurifier03Bonus01", gv_objectivePurifierWardenCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierWardenUpdate_Init () {
    gt_ObjectiveDestroyPurifierWardenUpdate = TriggerCreate("gt_ObjectiveDestroyPurifierWardenUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Warden Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierWardenComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPurifierWardenCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Bonus01", libVoiC_ge_MissionObjectiveState_Completed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierWardenComplete_Init () {
    gt_ObjectiveDestroyPurifierWardenComplete = TriggerCreate("gt_ObjectiveDestroyPurifierWardenComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Purifier Warden Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPurifierWardenFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPurifierWardenCreate, true, false);
    libVCMI_gf_ZS_SetMissionObjectiveState("PPurifier03Bonus01", libVoiC_ge_MissionObjectiveState_Failed);
    Wait(libVCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPurifierWardenFailed_Init () {
    gt_ObjectiveDestroyPurifierWardenFailed = TriggerCreate("gt_ObjectiveDestroyPurifierWardenFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PPurifier03_Music_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_A_ZergMovement", -1), PlayerGroupAll(), 100.0, 0.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00089", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(gv_introZergInfestation);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(2.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Purifier03_StartCine_B_HybridSpawn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Cinematic_Reaver_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00093", c_transmissionDurationAdd, 0.0, false, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_C_TeleportPadDrone", -1), PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SendMissionTransmission("DestroyedReminder", false, -1);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_DNullCircuitDrone", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, UnitFromId(209), "Ref_Overhead");
    libHots_gf_StoreActorForUnit(UnitFromId(209), 1, libNtve_gf_ActorLastCreated());
    Wait(1.0, c_timeGame);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, UnitFromId(210), "Ref_Overhead");
    libHots_gf_StoreActorForUnit(UnitFromId(210), 1, libNtve_gf_ActorLastCreated());
    Wait(2.5, c_timeGame);
    libVCMI_gf_AttachReticleEffectAndTextTagOnUnit(libVCMI_ge_CampaginReticleType_ProtossMainObjective, libVCMI_ge_CampaginReticleSize_Medium, null, UnitFromId(211), "Ref_Overhead");
    libHots_gf_StoreActorForUnit(UnitFromId(211), 1, libNtve_gf_ActorLastCreated());
    TransmissionWait(TransmissionLastSent(), 0.0);
    Wait(1.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_PlaySoundCinematic(SoundLink("Event_Purifier03_StartCine_E_CoreMatrixDrone", -1), PlayerGroupAll(), 80.0, 0.0);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libVCMI_gf_SendTransmissionCampaign(null, "pMission_Purifier03|Line00093", c_transmissionDurationAdd, 0.0, true, libVCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libVCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_Init09Help_Init();
    gt_InvulnerableCircuits_Init();
    gt_RemovePings_Init();
    gt_Purify_Init();
    gt_CircuitDiesRetarget_Init();
    gt_DialogInit_Init();
    gt_DialogSetup_Init();
    gt_DialogButtonPressed_Init();
    gt_DisableAllButtons_Init();
    gt_EnableButtons_Init();
    gt_MegalithPush_Init();
    gt_Ambush_Init();
    gt_BanelingAmbush_Init();
    gt_StealthAnnounce_Init();
    gt_MegalithAmbush_Init();
    gt_Teleport1_Init();
    gt_Teleport2_Init();
    gt_Harass_Init();
    gt_Torrasque_Init();
    gt_StartGame_Init();
    gt_TransmissionPurifierNullCircuitsQ_Init();
    gt_TransmissionPurifierCoreMatrixQ_Init();
    gt_ZergBasesInit_Init();
    gt_ZergBaseDestroyed_Init();
    gt_TransmissionAllZergBasesDestroyedQ_Init();
    gt_TurnOffWarnOfZergBaseTriggers_Init();
    gt_TransmissionWarnOfZergBase01Q_Init();
    gt_TransmissionWarnOfZergBase02Q_Init();
    gt_TransmissionWarnOfZergBase03Q_Init();
    gt_TransmissionWarnOfZergBase04Q_Init();
    gt_KillLarva_Init();
    gt_PurifierStasisChambersInit_Init();
    gt_AssignPurifierUnitstoWaveGroup_Init();
    gt_NullCircuitDestroyed_Init();
    gt_TransmissionActivateStasisChamberQ_Init();
    gt_TransmissionInitiateAttackFromStasisChamberQ_Init();
    gt_TransmissionDestroyNullCircuitsReminderQ_Init();
    gt_TransmissionPlayerSeesFirstNullCircuitRevealQ_Init();
    gt_TransmissionLastFewNullCircuitsToGoEncouragementQ_Init();
    gt_TrackNullCircuitPings_Init();
    gt_UpdateCybrosLights_Init();
    gt_TrackWarningPingOnCoreMatrix_Init();
    gt_TransmissionCoreMatrixAttackedQ_Init();
    gt_TransmissionCoreMatrixBadlyDamagedQ_Init();
    gt_TransmissionCoreMatrixCriticallyDamagedQ_Init();
    gt_RevealBonusObjectiveAfterTime_Init();
    gt_UnitEntersRevealBonusObjectiveRegion_Init();
    gt_TransmissionPurifierWardenRevealQ_Init();
    gt_TransmissionPurifierWardenDiesQ_Init();
    gt_TransmissionPurifierMegalithReachesEnd_Init();
    gt_TransmissionPurifierMegalithDies_Init();
    gt_PurifierWardenBehavior_Init();
    gt_TransmissionPurifierWardenEngagesPlayerQ_Init();
    gt_EnemyAttackingTransmission_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AIUpgradesNormal_Init();
    gt_AIUpgradesHard_Init();
    gt_AIUpgradesPurifierAttackGroup_Init();
    gt_HybridCreated_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_AttackWave08_Init();
    gt_ZergReinforcementsController_Init();
    gt_ZergReinforcements01Q_Init();
    gt_ZergReinforcements02_Init();
    gt_ZergReinforcements03_Init();
    gt_ZergReinforcements04Hard_Init();
    gt_StatCoreMatrixMinimumShields_Init();
    gt_StatHybridSlain_Init();
    gt_AchievementPurifierActivationCombo_Init();
    gt_AchievementHybridBehemothsKilledMastery_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryStasisChambersCompleted_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipReadyQ_Init();
    gt_ObjectiveNullCircuitsCreate_Init();
    gt_ObjectiveNullCircuitsComplete_Init();
    gt_ObjectiveNullCircuitsUpdate_Init();
    gt_ObjectiveNullCircuitsFailed_Init();
    gt_ObjectivePurifiersMustSurviveCreate_Init();
    gt_ObjectivePurifiersMustSurviveComplete_Init();
    gt_ObjectivePurifiersMustSurviveFailed_Init();
    gt_ObjectiveDestroyPurifierWardenCreate_Init();
    gt_ObjectiveDestroyPurifierWardenUpdate_Init();
    gt_ObjectiveDestroyPurifierWardenComplete_Init();
    gt_ObjectiveDestroyPurifierWardenFailed_Init();
    gt_IntroCinematic_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
