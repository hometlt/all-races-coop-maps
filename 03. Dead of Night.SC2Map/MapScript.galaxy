//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Dead of Night
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_AMONS_FORCES = 10;
const int gv_pLAYER_04_AMONS_FORCES = 11;
const int gv_pLAYER_05_INFESTED = 12;
const int gv_pLAYER_06_SCIENCE_FACILITY = 6;
const int gv_pLAYER_07_SPECIAL_INFESTED = 7;
const int gv_pLAYER_08_HOSTILEROCKS = 8;
const int gv_pLAYER_09_NEUTRALROCKS = 9;
const int gv_iNFESTED_REGION_COUNT = 17;
const int gv_c_BonusBossSpawnRegion_Count = 7;
const int gv_c_NydusSpawnLocationsTotal = 11;
const int gv_c_NydusSpawnedUnit_MAX = 100;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_TimeOfDay_Day = 0;
const int ge_TimeOfDay_Night = 1;
const int ge_AttackDirection_NorthWestP2 = 0;
const int ge_AttackDirection_NorthEast = 1;
const int ge_AttackDirection_SouthEastP1 = 2;
const int ge_AttackDirection_SouthWest = 3;
const int ge_PRESET_BossType__None = 0;
const int ge_PRESET_BossType_Stank = 1;
const int ge_PRESET_BossType_Nydus = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
playergroup gv_infestedPlayers;
playergroup gv_enemyPlayers;
int gv_leaderboardTimeScoreFinal;
int gv_leaderboardBonusScoreFinal;
int gv_infestedAreaClearedTransmissionIndex;
bool[gv_iNFESTED_REGION_COUNT + 1] gv_infestedAreaCleared;
bool[13] gv_infestedAreaRevealed;
region[13] gv_infestedAreaRevealers;
int gv_infestedStructuresTotal;
int gv_infestedStructuresRemaining;
unit[201] gv_infestedStructuresUnit;
unitgroup gv_infestedStructuresGroup;
int[21] gv_infestedStructuresPing;
point gv_infestedStructuresPositionofLastKilled;
fixed[201] gv_infestedStructuresStructureHealth;
region[gv_iNFESTED_REGION_COUNT + 1] gv_infestedRegions;
int[gv_iNFESTED_REGION_COUNT + 1] gv_infestedRegionObjectiveMarkers;
region[gv_c_BonusBossSpawnRegion_Count + 1] gv_bonusBossSpawnRegions;
point[gv_c_BonusBossSpawnRegion_Count + 1] gv_bonusBossSpawnLocation;
unit gv_bonusBossMonster;
int gv_bonusBossMonsterPing;
int gv_bonusBossMonsterCurrentHealth;
fixed gv_volatileSpawnCooldownValue;
timer gv_volatileSpawnCooldown;
fixed gv_bonusBossAttackCooldownValue;
timer gv_bonusBossAttackCooldown;
fixed gv_day_Duration_First;
fixed gv_day_Duration;
fixed gv_night_Duration;
int gv_dayNumber;
int gv_nightNumber;
bool gv_specialInfestedSoundsIsPlaying;
int gv_dayORNight;
timer gv_globalDayNightTimer;
int gv_mainTimerWindow;
timer gv_transitionToDay;
timer gv_transitionToNight;
int gv_areasCleared;
unitgroup gv_barricadeSE;
unitgroup gv_barricadeNW;
unitgroup gv_barricadeNE;
unitgroup gv_barricadeSW;
int gv_nightDefenderDifficulty;
fixed gv_nightDefenderSpawnLifeThreshold;
int gv_c_NightDefenderReactionTimerIndex;
fixed gv_nightDefenderCooldown;
timer gv_specialInfestedEngagedCalloutTimer;
int gv_karmaSE_P1;
int gv_karmaNW_P2;
int gv_karmaNE_Barricade;
int gv_karmaSW_Barricade;
int gv_infestedMarineQty;
int gv_infestedTerranQty;
int gv_infestedVolatileQty;
int gv_infestedAberrationQty;
int gv_whiteNoiseSpawnCooldown;
region[5] gv_whiteNoiseZombieRegions;
int gv_whiteNoiseZombieRegionsIndex;
unitgroup gv_whiteNoiseZombiesNE;
unitgroup gv_whiteNoiseZombiesNW;
unitgroup gv_whiteNoiseZombiesSE;
unitgroup gv_whiteNoiseZombiesSW;
fixed gv_nydusSpitPeriod;
unit gv_nydusWorm_GlobalVar;
int gv_bossType;
fixed gv_stankMovementSpeed;
int gv_nydusWormHP;
int gv_stankHP;
unitgroup gv_whiteNoiseInfested;
bool gv_specialInfestedAttacks_Night3_Boss;
bool gv_specialInfestedAttacks_Night3_PrimarySI_First;
string[3] gv_specialInfestedAttacks_InfestedTypes;
trigger[7][3] gv_specialInfestedAttackTriggers;
unitgroup gv_scourgeTeamVictims;
unitgroup gv_scourgeTeamVictims2;
int gv_bossPingControllerCount;
int gv_maxConcurrentNydusWorms;
unitgroup gv_activeNydusWorms;
int[gv_c_NydusSpawnLocationsTotal + 1] gv_nydusSpawnLocations;
int gv_nydusSpawnLocationCurrent;
unitgroup gv_nydusSpawnedUnits;
int gv_bigTextMessage;
int[3] gv_scoreScreen_InfestedStructuresKilled;
int gv_objective_Primary_DestroyInfestation;
int gv_currentStructures;
unitgroup gv_totalStructures;
int gv_objective_Bonus_DestroyInfestationSource;

void InitGlobals () {
    int init_i;

    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_infestedPlayers = PlayerGroupEmpty();
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_infestedStructuresGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_infestedStructuresPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= gv_iNFESTED_REGION_COUNT; init_i += 1) {
        gv_infestedRegionObjectiveMarkers[init_i] = c_invalidPingId;
    }
    gv_bonusBossMonsterPing = c_invalidPingId;
    gv_volatileSpawnCooldown = TimerCreate();
    gv_bonusBossAttackCooldown = TimerCreate();
    gv_dayNumber = 1;
    gv_dayORNight = ge_TimeOfDay_Day;
    gv_globalDayNightTimer = TimerCreate();
    gv_transitionToDay = TimerCreate();
    gv_transitionToNight = TimerCreate();
    gv_barricadeSE = UnitGroupEmpty();
    gv_barricadeNW = UnitGroupEmpty();
    gv_barricadeNE = UnitGroupEmpty();
    gv_barricadeSW = UnitGroupEmpty();
    gv_nightDefenderDifficulty = 2;
    gv_specialInfestedEngagedCalloutTimer = TimerCreate();
    gv_whiteNoiseZombieRegionsIndex = 1;
    gv_whiteNoiseZombiesNE = UnitGroupEmpty();
    gv_whiteNoiseZombiesNW = UnitGroupEmpty();
    gv_whiteNoiseZombiesSE = UnitGroupEmpty();
    gv_whiteNoiseZombiesSW = UnitGroupEmpty();
    gv_bossType = ge_PRESET_BossType__None;
    gv_whiteNoiseInfested = UnitGroupEmpty();
    gv_scourgeTeamVictims = UnitGroupEmpty();
    gv_scourgeTeamVictims2 = UnitGroupEmpty();
    gv_activeNydusWorms = UnitGroupEmpty();
    gv_nydusSpawnedUnits = UnitGroupEmpty();
    gv_bigTextMessage = c_invalidDialogId;
    gv_objective_Primary_DestroyInfestation = c_invalidObjectiveId;
    gv_totalStructures = UnitGroupEmpty();
    gv_objective_Bonus_DestroyInfestationSource = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
trigger gf_SpecialInfestedAttackTrigger (int lp_night, string lp_specialInfestedType);
void gf_AIBonusBoss (unit lp_bonusBoss);
point gf_FindBossSpawn ();
void gf_RevealBarricadeDestruction (region lp_barricadeArea);
void gf_TargetBarricadeforDestruction (region lp_barriacdeArea, fixed lp_waitToAttack);
void gf_AINightDefenderSpawn (unit lp_attackedStructure);
void gf_AIRemoveWorkersFromScanGroup (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave);
string gf_TransportType (int lp_player);
void gf_CleanUpAttackWaveTransports (unitgroup lp_transports, point lp_cleanupLocation);
void gf_AttackDirectionWarningPing (point lp_pingLocation);
void gf_InfestedScourgeAIThink (int lp_owner, unit lp_scourge, unitgroup lp_nearbyUnits);
void gf_AISendInfestedAttackWave (int lp_count, string lp_type, bool lp_raid, bool lp_flank);
void gf_AIBossPingController (unit lp_unit);
void gf_AISpawnedSpecialInfestedAmbience (string lp_specialInfestedType);
point gf_AIGetSpawnLocation (bool lp_raid, bool lp_flank);
void gf_AIHunterlingAI (int lp_owner, unit lp_hunter, unitgroup lp_nearbyUnits);
void gf_AIChokerAI (int lp_owner, unit lp_choker, unitgroup lp_nearbyUnits);
void gf_AISpotterAI (int lp_owner, unit lp_spotter, unitgroup lp_nearbyUnits);
void gf_AIStankAI (int lp_owner, unit lp_stank, unitgroup lp_nearbyUnits);
void gf_SpecialInfestedPing (unit lp_specialInfested);
region gf_NydusWormSpawn ();
void gf_AISpawnNydusWorm (region lp_region);
void gf_AISpawnAttackFromNydusWorm (unit lp_worm, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation);
void gf_UpdateNydusSpawnLocation ();
unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
bool gf_DifficultyValueBoolean (bool lp_casual, bool lp_normal, bool lp_hard, bool lp_brutal);
region gf_DifficultyValueRegion (region lp_casual, region lp_normal, region lp_hard, region lp_brutal);
point gf_AttackDirectionGatherPoint (int lp_direction);
void gf_AIPrepareAttackDirection (int lp_direction);
void gf_AIAttackWaveFromDirection (int lp_direction, int lp_delay, int lp_infestedCivilians, int lp_infestedMarines, int lp_aberrations);
void gf_AIExpansionCheckNorth ();
void gf_AIExpansionCheckSouth ();
void gf_AIBigTextMessage (soundlink lp_sound, text lp_message, text lp_color);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02LoadingComplete;
trigger gt_Init03Players;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_PickSpecialInfested;
trigger gt_PickBossType;
trigger gt_StartGameQ;
trigger gt_ShowDayNightTimerWindow;
trigger gt_StartDayNightTimers;
trigger gt_TrackInfestedStructureCount;
trigger gt_UpdateAreasCleared;
trigger gt_EffortValue;
trigger gt_SetupGuidingPingOrder;
trigger gt_ShowandUpdateObjectiveMarkers;
trigger gt_DestroySmallBuildingObjectiveMarkers;
trigger gt_DayFindSomeInfestedQ;
trigger gt_ObjectiveFindandDestroyBossInitialization;
trigger gt_ObjectiveFindandDestroyBossResurface;
trigger gt_ObjectiveFindandDestroyBossCheckStatus;
trigger gt_ObjectiveFindandDestroyBossHidingBehavior;
trigger gt_ObjectiveBonusCreateQ;
trigger gt_ObjectiveBonusEngagedQ;
trigger gt_ObjectiveBonusSuccessQ;
trigger gt_DayNightTimerCycling;
trigger gt_DayNightPlayDayMusic;
trigger gt_DayNightPlayNightMusic;
trigger gt_DayNightTransitionToDay;
trigger gt_DayNightTransitionToNight;
trigger gt_DayNightBurnInfestedDuringDay;
trigger gt_TransmissionDayNightin30SecondsQ;
trigger gt_TransmissionItsDaytimeQ;
trigger gt_TransmissionItsNightQ;
trigger gt_BarricadeNEDestroyedQ;
trigger gt_BarricadeNWDestroyedQ;
trigger gt_BarricadeSEDestroyedQ;
trigger gt_BarricadeNEAttackedQ;
trigger gt_BarricadeNWAttackedQ;
trigger gt_BarricadeSEAttackedQ;
trigger gt_ProgressFirstInfestedStructuresRemainingQ;
trigger gt_ProgressMiddleInfestedStructuresRemainingQ;
trigger gt_ProgressFinalInfestedStructuresRemainingQ;
trigger gt_SpawnBroodlings;
trigger gt_AINightDefenderReaction;
trigger gt_AINightDefenderReactionQ;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave05;
trigger gt_EnemyAttackingQ;
trigger gt_AIUpdateSpawnSettingsClassic;
trigger gt_AIAttackWavesNightTriggersClassic;
trigger gt_AINormalInfestedAttacksNight1InfestedCivilians;
trigger gt_AINormalInfestedAttacksNight2NEBarricade;
trigger gt_AINormalInfestedAttacksNight3SEandNWBarricades;
trigger gt_AINormalInfestedAttacksNight4HeavyAttacks;
trigger gt_AINormalInfestedAttacksNight5VeryHeavyAttacks;
trigger gt_AINormalInfestedAttacksKillNightRepeat;
trigger gt_TrackScourgeVictims;
trigger gt_ScourgeKillTeams;
trigger gt_AISpecialInfestedAttacksScourges;
trigger gt_AISpecialInfestedAttacksHunterlingNight1;
trigger gt_AISpecialInfestedAttacksHunterlingNight2;
trigger gt_AISpecialInfestedAttacksHunterlingNight3;
trigger gt_AISpecialInfestedAttacksHunterlingNight4;
trigger gt_AISpecialInfestedAttacksHunterlingNight5;
trigger gt_AISpecialInfestedAttacksHunterlingNight6;
trigger gt_AISpecialInfestedAttacksSpotterNight1;
trigger gt_AISpecialInfestedAttacksSpotterNight2;
trigger gt_AISpecialInfestedAttacksSpotterNight3;
trigger gt_AISpecialInfestedAttacksSpotterNight4;
trigger gt_AISpecialInfestedAttacksSpotterNight5;
trigger gt_AISpecialInfestedAttacksSpotterNight6;
trigger gt_AISpecialInfestedAttacksChokerNight1;
trigger gt_AISpecialInfestedAttacksChokerNight2;
trigger gt_AISpecialInfestedAttacksChokerNight3;
trigger gt_AISpecialInfestedAttacksChokerNight4;
trigger gt_AISpecialInfestedAttacksChokerNight5;
trigger gt_AISpecialInfestedAttacksChokerNight6;
trigger gt_AISpecialInfestedAttacksKaboomerNight1;
trigger gt_AISpecialInfestedAttacksKaboomerNight2;
trigger gt_AISpecialInfestedAttacksKaboomerNight3;
trigger gt_AISpecialInfestedAttacksKaboomerNight4;
trigger gt_AISpecialInfestedAttacksKaboomerNight5;
trigger gt_AISpecialInfestedAttacksKaboomerNight6;
trigger gt_AISpecialInfestedAttacksBossNight3;
trigger gt_AISpecialInfestedAttacksBossNight4;
trigger gt_AISpecialInfestedAttacksBossNight5;
trigger gt_AISpecialInfestedAttacksBossNight6;
trigger gt_AISpecialInfestedEngagedQ;
trigger gt_HunterlingEngagedQ;
trigger gt_KaboomerEngagedQ;
trigger gt_SpotterEngagedQ;
trigger gt_ChokerEngagedQ;
trigger gt_AINydusPingSound;
trigger gt_TransmissionNydusQ;
trigger gt_TransmissionStankQ;
trigger gt_SetupNydusSpawnLocation;
trigger gt_AIWhiteNoiseSpawning;
trigger gt_AIWhiteNoiseZombieSuicideNE;
trigger gt_AIWhiteNoiseZombieSuicideNW;
trigger gt_AIWhiteNoiseZombieSuicideSE;
trigger gt_AIWhiteNoiseZombieSuicideSW;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryInfestationPurged;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_VictoryFanfareQ;
trigger gt_Defeat;
trigger gt_CountInfestedStructuresKilled;
trigger gt_ObjectiveCreateDestroyInfestation;
trigger gt_ObjectiveUpdateDestroyInfestation;
trigger gt_ObjectiveCompleteDestroyInfestation;
trigger gt_ObjectiveFailedDestroyInfestation;
trigger gt_ObjectiveBonusDestroyInfestationSourceCreate;
trigger gt_ObjectiveBonusDestroyInfestationSourceUpdateSuccess;
trigger gt_ObjectiveBonusDestroyInfestationSourceUpdateFail;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger gf_SpecialInfestedAttackTrigger (int lp_night, string lp_specialInfestedType) {
    // Automatic Variable Declarations
    string auto12DF0507_val;
    int auto12D03F60_val;
    int autoFFBBEF93_val;
    int auto88CE07D2_val;
    int auto28061A7B_val;

    // Implementation
    auto12DF0507_val = lp_specialInfestedType;
    if (auto12DF0507_val == "Hunterling") {
        auto12D03F60_val = lp_night;
        if (auto12D03F60_val == 1) {
            return gt_AISpecialInfestedAttacksHunterlingNight1;
        }
        else if (auto12D03F60_val == 2) {
            return gt_AISpecialInfestedAttacksHunterlingNight2;
        }
        else if (auto12D03F60_val == 3) {
            return gt_AISpecialInfestedAttacksHunterlingNight3;
        }
        else if (auto12D03F60_val == 4) {
            return gt_AISpecialInfestedAttacksHunterlingNight4;
        }
        else if (auto12D03F60_val == 5) {
            return gt_AISpecialInfestedAttacksHunterlingNight5;
        }
        else if (auto12D03F60_val == 6) {
            return gt_AISpecialInfestedAttacksHunterlingNight6;
        }
        else {
        }
    }
    else if (auto12DF0507_val == "Kaboomer") {
        autoFFBBEF93_val = lp_night;
        if (autoFFBBEF93_val == 1) {
            return gt_AISpecialInfestedAttacksKaboomerNight1;
        }
        else if (autoFFBBEF93_val == 2) {
            return gt_AISpecialInfestedAttacksKaboomerNight2;
        }
        else if (autoFFBBEF93_val == 3) {
            return gt_AISpecialInfestedAttacksKaboomerNight3;
        }
        else if (autoFFBBEF93_val == 4) {
            return gt_AISpecialInfestedAttacksKaboomerNight4;
        }
        else if (autoFFBBEF93_val == 5) {
            return gt_AISpecialInfestedAttacksKaboomerNight5;
        }
        else if (autoFFBBEF93_val == 6) {
            return gt_AISpecialInfestedAttacksKaboomerNight6;
        }
        else {
        }
    }
    else if (auto12DF0507_val == "Spotter") {
        auto88CE07D2_val = lp_night;
        if (auto88CE07D2_val == 1) {
            return gt_AISpecialInfestedAttacksSpotterNight1;
        }
        else if (auto88CE07D2_val == 2) {
            return gt_AISpecialInfestedAttacksSpotterNight2;
        }
        else if (auto88CE07D2_val == 3) {
            return gt_AISpecialInfestedAttacksSpotterNight3;
        }
        else if (auto88CE07D2_val == 4) {
            return gt_AISpecialInfestedAttacksSpotterNight4;
        }
        else if (auto88CE07D2_val == 5) {
            return gt_AISpecialInfestedAttacksSpotterNight5;
        }
        else if (auto88CE07D2_val == 6) {
            return gt_AISpecialInfestedAttacksSpotterNight6;
        }
        else {
        }
    }
    else if (auto12DF0507_val == "Choker") {
        auto28061A7B_val = lp_night;
        if (auto28061A7B_val == 1) {
            return gt_AISpecialInfestedAttacksChokerNight1;
        }
        else if (auto28061A7B_val == 2) {
            return gt_AISpecialInfestedAttacksChokerNight2;
        }
        else if (auto28061A7B_val == 3) {
            return gt_AISpecialInfestedAttacksChokerNight3;
        }
        else if (auto28061A7B_val == 4) {
            return gt_AISpecialInfestedAttacksChokerNight4;
        }
        else if (auto28061A7B_val == 5) {
            return gt_AISpecialInfestedAttacksChokerNight5;
        }
        else if (auto28061A7B_val == 6) {
            return gt_AISpecialInfestedAttacksChokerNight6;
        }
        else {
        }
    }
    else {
    }
    return null;
}

trigger auto_gf_AIBonusBoss_Trigger = null;
unit auto_gf_AIBonusBoss_lp_bonusBoss;

void gf_AIBonusBoss (unit lp_bonusBoss) {
    auto_gf_AIBonusBoss_lp_bonusBoss = lp_bonusBoss;

    if (auto_gf_AIBonusBoss_Trigger == null) {
        auto_gf_AIBonusBoss_Trigger = TriggerCreate("auto_gf_AIBonusBoss_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIBonusBoss_Trigger, false, false);
}

bool auto_gf_AIBonusBoss_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bonusBoss = auto_gf_AIBonusBoss_lp_bonusBoss;

    // Variable Declarations
    unit lv_chosenTarget;
    unitgroup lv_possibleTargets;
    unit lv_enemy;
    point lv_volatileSpawnPoint;
    unitgroup lv_volatileGroup;

    // Automatic Variable Declarations
    fixed autoD17E8E74_at;
    fixed auto9490B813_at;
    unitgroup auto2DBEBBE0_g;
    int auto2DBEBBE0_u;
    const int auto85D61F2D_n = 4;
    int auto85D61F2D_i;
    unitgroup autoF9F2E96F_g;
    int autoF9F2E96F_u;
    unit autoF9F2E96F_var;

    // Variable Initialization
    lv_possibleTargets = UnitGroupEmpty();
    lv_volatileGroup = UnitGroupEmpty();

    // Implementation
    TimerStart(gv_bonusBossAttackCooldown, gv_bonusBossAttackCooldownValue, false, c_timeAI);
    TimerStart(gv_volatileSpawnCooldown, gv_volatileSpawnCooldownValue, false, c_timeAI);
    UnitIssueOrder(lp_bonusBoss, Order(AbilityCommand("BurrowACVirophageUp", 0)), c_orderQueueReplace);
    autoD17E8E74_at = 0;
    while (!((UnitGetType(lp_bonusBoss) == "ACVirophage")) && autoD17E8E74_at <= 4.0) {
        Wait(2.0, c_timeAI);
        autoD17E8E74_at = autoD17E8E74_at + 2.0;
    }
    while ((UnitIsAlive(gv_bonusBossMonster) == true) && (libNtve_gf_UnitIsPaused(gv_bonusBossMonster) == false)) {
        if ((UnitIsAlive(gv_bonusBossMonster) == true) && ((gv_dayORNight == ge_TimeOfDay_Day) || ((gv_dayORNight == ge_TimeOfDay_Night) && (TimerGetRemaining(gv_globalDayNightTimer) <= 5.0)))) {
            UnitIssueOrder(lp_bonusBoss, Order(AbilityCommand("BurrowACVirophageDown", 0)), c_orderQueueReplace);
            auto9490B813_at = 0;
            while (!((UnitGetType(lp_bonusBoss) == "ACVirophageBurrowed")) && auto9490B813_at <= 4.0) {
                Wait(2.0, c_timeAI);
                auto9490B813_at = auto9490B813_at + 2.0;
            }
            libNtve_gf_ShowHideUnit(gv_bonusBossMonster, false);
            libNtve_gf_PauseUnit(gv_bonusBossMonster, true);
            PingSetVisible(gv_bonusBossMonsterPing, false);
            TriggerEnable(gt_ObjectiveFindandDestroyBossCheckStatus, false);
            break;
        }

        if ((TimerGetRemaining(gv_bonusBossAttackCooldown) <= 0.0)) {
            TimerStart(gv_bonusBossAttackCooldown, gv_bonusBossAttackCooldownValue, false, c_timeAI);
            lv_possibleTargets = gf_EnemiesWithinRange(lp_bonusBoss, 12.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
            auto2DBEBBE0_g = lv_possibleTargets;
            auto2DBEBBE0_u = UnitGroupCount(auto2DBEBBE0_g, c_unitCountAll);
            for (;; auto2DBEBBE0_u -= 1) {
                lv_enemy = UnitGroupUnitFromEnd(auto2DBEBBE0_g, auto2DBEBBE0_u);
                if (lv_enemy == null) { break; }
                if ((UnitGetType(lv_enemy) == "SpiderMineBurrowed") && (UnitGetType(lv_enemy) == "BiomassPickup")) {
                    TimerStart(gv_bonusBossAttackCooldown, gv_bonusBossAttackCooldownValue, false, c_timeAI);
                    UnitGroupRemove(lv_possibleTargets, lv_enemy);
                }

            }
            lv_chosenTarget = UnitGroupRandomUnit(lv_possibleTargets, c_unitCountAlive);
            libNtve_gf_AICast(lp_bonusBoss, OrderTargetingUnit(AbilityCommand("attack", 0), lv_chosenTarget));
        }

        if ((TimerGetRemaining(gv_globalDayNightTimer) > 20.0) && (TimerGetRemaining(gv_volatileSpawnCooldown) <= 0.0) && (UnitCountAlliance(gv_pLAYER_07_SPECIAL_INFESTED, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_bonusBossMonster), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) > 0)) {
            TimerStart(gv_volatileSpawnCooldown, gv_volatileSpawnCooldownValue, false, c_timeAI);
            for (auto85D61F2D_i = 1; auto85D61F2D_i <= auto85D61F2D_n; auto85D61F2D_i += 1) {
                if ((UnitGroupCount(lv_volatileGroup, c_unitCountAlive) < libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 3, 5, 0, 0))) {
                    lv_volatileSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_bonusBossMonster), 5.0));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedExploderBurrowed", 0, gv_pLAYER_07_SPECIAL_INFESTED, lv_volatileSpawnPoint);
                    UnitGroupAdd(lv_volatileGroup, UnitLastCreated());
                }

            }
        }

        autoF9F2E96F_g = lv_volatileGroup;
        autoF9F2E96F_u = UnitGroupCount(autoF9F2E96F_g, c_unitCountAll);
        for (;; autoF9F2E96F_u -= 1) {
            autoF9F2E96F_var = UnitGroupUnitFromEnd(autoF9F2E96F_g, autoF9F2E96F_u);
            if (autoF9F2E96F_var == null) { break; }
            UnitIssueOrder(autoF9F2E96F_var, Order(AbilityCommand("BurrowInfestedExploderUp", 0)), c_orderQueueReplace);
            AISetUnitSuicide(autoF9F2E96F_var, true);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

point gf_FindBossSpawn () {
    // Variable Declarations
    int lv_regionNum;
    int lv_regionIter;
    int lv_mostEmptyRegionIndex;
    int lv_mostEmptyRegionStructureCount;
    int lv_currentEmptyRegionStructureCount;

    // Automatic Variable Declarations
    const int auto4592DB58_ae = gv_c_BonusBossSpawnRegion_Count;
    const int auto4592DB58_ai = 1;

    // Variable Initialization
    lv_mostEmptyRegionStructureCount = 999999;

    // Implementation
    lv_regionIter = 1;
    for ( ; ( (auto4592DB58_ai >= 0 && lv_regionIter <= auto4592DB58_ae) || (auto4592DB58_ai < 0 && lv_regionIter >= auto4592DB58_ae) ) ; lv_regionIter += auto4592DB58_ai ) {
        lv_currentEmptyRegionStructureCount = UnitGroupCount(UnitGroup(null, gv_pLAYER_05_INFESTED, gv_bonusBossSpawnRegions[lv_regionIter], UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_currentEmptyRegionStructureCount <= lv_mostEmptyRegionStructureCount)) {
            lv_mostEmptyRegionIndex = lv_regionIter;
            lv_mostEmptyRegionStructureCount = lv_currentEmptyRegionStructureCount;
        }

    }
    return gv_bonusBossSpawnLocation[lv_mostEmptyRegionIndex];
}

void gf_RevealBarricadeDestruction (region lp_barricadeArea) {
    // Variable Declarations
    int lv_playerIter;
    revealer[3] lv_revealers;

    // Automatic Variable Declarations
    playergroup autoB5153637_g;

    // Variable Initialization

    // Implementation
    autoB5153637_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoB5153637_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        VisRevealArea(lv_playerIter, lp_barricadeArea, 5.0, false);
    }
}

trigger auto_gf_TargetBarricadeforDestruction_Trigger = null;
region auto_gf_TargetBarricadeforDestruction_lp_barriacdeArea;
fixed auto_gf_TargetBarricadeforDestruction_lp_waitToAttack;

void gf_TargetBarricadeforDestruction (region lp_barriacdeArea, fixed lp_waitToAttack) {
    auto_gf_TargetBarricadeforDestruction_lp_barriacdeArea = lp_barriacdeArea;
    auto_gf_TargetBarricadeforDestruction_lp_waitToAttack = lp_waitToAttack;

    if (auto_gf_TargetBarricadeforDestruction_Trigger == null) {
        auto_gf_TargetBarricadeforDestruction_Trigger = TriggerCreate("auto_gf_TargetBarricadeforDestruction_TriggerFunc");
    }

    TriggerExecute(auto_gf_TargetBarricadeforDestruction_Trigger, false, false);
}

bool auto_gf_TargetBarricadeforDestruction_TriggerFunc (bool testConds, bool runActions) {
    region lp_barriacdeArea = auto_gf_TargetBarricadeforDestruction_lp_barriacdeArea;
    fixed lp_waitToAttack = auto_gf_TargetBarricadeforDestruction_lp_waitToAttack;

    // Variable Declarations
    unitgroup lv_barricadeUnits;
    trigger lv_destroyedTransmission;
    int lv_whiteNoiseRegionIndex;
    region lv_whiteNoiseMoveToLocation;
    region lv_killTeamSpawnArea;
    unit lv_barricadeIter;
    unitgroup lv_barricadeDestroyers;
    unit lv_barricadeDestroyerIter;

    // Automatic Variable Declarations
    region auto0409315A_val;
    unitgroup autoA43A879C_g;
    int autoA43A879C_u;
    int autoC158DC36_n;
    int autoC158DC36_i;
    unitgroup autoAE888CA6_g;
    int autoAE888CA6_u;
    int auto1FD0529F_n;
    int auto1FD0529F_i;
    unitgroup auto36BFE0FF_g;
    int auto36BFE0FF_u;
    unitgroup autoF9BB7227_g;
    int autoF9BB7227_u;

    // Variable Initialization
    lv_barricadeUnits = UnitGroupEmpty();
    lv_barricadeDestroyers = UnitGroupEmpty();

    // Implementation
    Wait(lp_waitToAttack, c_timeAI);
    auto0409315A_val = lp_barriacdeArea;
    if (auto0409315A_val == RegionFromId(3)) {
        lv_barricadeUnits = gv_barricadeNE;
        lv_destroyedTransmission = gt_BarricadeNEDestroyedQ;
        lv_whiteNoiseRegionIndex = 2;
        lv_whiteNoiseMoveToLocation = RegionFromId(18);
        lv_killTeamSpawnArea = RegionFromId(4);
    }
    else if (auto0409315A_val == RegionFromId(50)) {
        lv_barricadeUnits = gv_barricadeSE;
        lv_destroyedTransmission = gt_BarricadeSEDestroyedQ;
        lv_whiteNoiseRegionIndex = 3;
        lv_whiteNoiseMoveToLocation = RegionFromId(17);
        lv_killTeamSpawnArea = RegionFromId(29);
    }
    else if (auto0409315A_val == RegionFromId(30)) {
        lv_barricadeUnits = gv_barricadeNW;
        lv_destroyedTransmission = gt_BarricadeNWDestroyedQ;
        lv_whiteNoiseRegionIndex = 4;
        lv_whiteNoiseMoveToLocation = RegionFromId(16);
        lv_killTeamSpawnArea = RegionFromId(25);
    }
    else {
        return true;
    }
    if ((UnitGroupCount(lv_barricadeUnits, c_unitCountAlive) == 0)) {
        gv_whiteNoiseZombieRegions[lv_whiteNoiseRegionIndex] = lv_whiteNoiseMoveToLocation;
        TriggerEnable(lv_destroyedTransmission, false);
        return true;
    }

    autoA43A879C_g = lv_barricadeUnits;
    autoA43A879C_u = UnitGroupCount(autoA43A879C_g, c_unitCountAll);
    for (;; autoA43A879C_u -= 1) {
        lv_barricadeIter = UnitGroupUnitFromEnd(autoA43A879C_g, autoA43A879C_u);
        if (lv_barricadeIter == null) { break; }
        UnitSetOwner(lv_barricadeIter, gv_pLAYER_08_HOSTILEROCKS, false);
    }
    autoC158DC36_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 4, 5, 0, 0);
    for (autoC158DC36_i = 1; autoC158DC36_i <= autoC158DC36_n; autoC158DC36_i += 1) {
        UnitCreate(2, "InfestedTerranCampaignBurrowed", 0, gv_pLAYER_05_INFESTED, RegionRandomPoint(lv_killTeamSpawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_barricadeDestroyers, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
    }
    Wait(2.0, c_timeAI);
    autoAE888CA6_g = lv_barricadeDestroyers;
    autoAE888CA6_u = UnitGroupCount(autoAE888CA6_g, c_unitCountAll);
    for (;; autoAE888CA6_u -= 1) {
        lv_barricadeDestroyerIter = UnitGroupUnitFromEnd(autoAE888CA6_g, autoAE888CA6_u);
        if (lv_barricadeDestroyerIter == null) { break; }
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedTerranCampaignUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_barricadeDestroyerIter, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_barriacdeArea)), c_orderQueueAddToEnd);
    }
    auto1FD0529F_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 0, 0);
    for (auto1FD0529F_i = 1; auto1FD0529F_i <= auto1FD0529F_n; auto1FD0529F_i += 1) {
        UnitCreate(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_05_INFESTED, RegionRandomPoint(lv_killTeamSpawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_barricadeDestroyers, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
    }
    Wait(2.0, c_timeAI);
    auto36BFE0FF_g = lv_barricadeDestroyers;
    auto36BFE0FF_u = UnitGroupCount(auto36BFE0FF_g, c_unitCountAll);
    for (;; auto36BFE0FF_u -= 1) {
        lv_barricadeDestroyerIter = UnitGroupUnitFromEnd(auto36BFE0FF_g, auto36BFE0FF_u);
        if (lv_barricadeDestroyerIter == null) { break; }
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_barricadeDestroyerIter, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_barriacdeArea)), c_orderQueueAddToEnd);
    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((UnitGroupCount(lv_barricadeDestroyers, c_unitCountAlive) == 0)) {
            break;
        }

        if ((UnitGroupCount(lv_barricadeUnits, c_unitCountAlive) == 0)) {
            AISetGroupScriptControlled(lv_barricadeDestroyers, false);
            AISetGroupSuicide(lv_barricadeDestroyers, true);
            gv_whiteNoiseZombieRegions[lv_whiteNoiseRegionIndex] = lv_whiteNoiseMoveToLocation;
            TriggerEnable(lv_destroyedTransmission, false);
            break;
        }

        autoF9BB7227_g = lv_barricadeDestroyers;
        autoF9BB7227_u = UnitGroupCount(autoF9BB7227_g, c_unitCountAll);
        for (;; autoF9BB7227_u -= 1) {
            lv_barricadeDestroyerIter = UnitGroupUnitFromEnd(autoF9BB7227_g, autoF9BB7227_u);
            if (lv_barricadeDestroyerIter == null) { break; }
            UnitIssueOrder(lv_barricadeDestroyerIter, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_barriacdeArea)), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_AINightDefenderSpawn_Trigger = null;
unit auto_gf_AINightDefenderSpawn_lp_attackedStructure;

void gf_AINightDefenderSpawn (unit lp_attackedStructure) {
    auto_gf_AINightDefenderSpawn_lp_attackedStructure = lp_attackedStructure;

    if (auto_gf_AINightDefenderSpawn_Trigger == null) {
        auto_gf_AINightDefenderSpawn_Trigger = TriggerCreate("auto_gf_AINightDefenderSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_AINightDefenderSpawn_Trigger, false, false);
}

bool auto_gf_AINightDefenderSpawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attackedStructure = auto_gf_AINightDefenderSpawn_lp_attackedStructure;

    // Variable Declarations
    unitgroup lv_nightDefenders;

    // Automatic Variable Declarations
    int auto4CAC48E6_n;
    int auto4CAC48E6_i;
    int autoD093741F_n;
    int autoD093741F_i;
    int auto6489F784_n;
    int auto6489F784_i;
    int auto9F9C9EA6_n;
    int auto9F9C9EA6_i;
    int auto6C5C92DD_n;
    int auto6C5C92DD_i;
    int auto17EAD7E5_n;
    int auto17EAD7E5_i;
    int autoA43BC334_n;
    int autoA43BC334_i;
    int auto77CED483_n;
    int auto77CED483_i;
    int autoB75ED9A7_n;
    int autoB75ED9A7_i;

    // Variable Initialization
    lv_nightDefenders = UnitGroupEmpty();

    // Implementation
    if ((UnitGetCustomValue(lp_attackedStructure, gv_c_NightDefenderReactionTimerIndex) > 0.0)) {
        return true;
    }

    if ((UnitIsAlive(lp_attackedStructure) == true)) {
        UnitSetCustomValue(lp_attackedStructure, gv_c_NightDefenderReactionTimerIndex, gv_nightDefenderCooldown);
        SoundPlayAtPoint(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), UnitGetPosition(lp_attackedStructure), 0.0, 100.0, 0.0);
        auto4CAC48E6_n = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
        for (auto4CAC48E6_i = 1; auto4CAC48E6_i <= auto4CAC48E6_n; auto4CAC48E6_i += 1) {
            if ((UnitIsValid(lp_attackedStructure) == true)) {
                libNtve_gf_CreateUnitsAtPoint2(2, "InfestedCivilianBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                Wait(0.25, c_timeAI);
            }

        }
        if ((gv_nightNumber >= 2) && (gv_nightNumber < 4)) {
            autoD093741F_n = libNtve_gf_DifficultyValueInt(1, 1, 2, 2);
            for (autoD093741F_i = 1; autoD093741F_i <= autoD093741F_n; autoD093741F_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(2, "InfestedTerranCampaignBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
            auto6489F784_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 1);
            for (auto6489F784_i = 1; auto6489F784_i <= auto6489F784_n; auto6489F784_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedExploderBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
        }

        if ((gv_nightNumber >= 4) && (gv_nightNumber < 6)) {
            auto9F9C9EA6_n = libNtve_gf_DifficultyValueInt(0, 0, 2, 2);
            for (auto9F9C9EA6_i = 1; auto9F9C9EA6_i <= auto9F9C9EA6_n; auto9F9C9EA6_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
            auto6C5C92DD_n = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
            for (auto6C5C92DD_i = 1; auto6C5C92DD_i <= auto6C5C92DD_n; auto6C5C92DD_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(3, "InfestedTerranCampaignBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
            auto17EAD7E5_n = libNtve_gf_DifficultyValueInt(0, 0, 2, 3);
            for (auto17EAD7E5_i = 1; auto17EAD7E5_i <= auto17EAD7E5_n; auto17EAD7E5_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedExploderBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
        }

        if ((gv_nightNumber >= 6)) {
            autoA43BC334_n = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
            for (autoA43BC334_i = 1; autoA43BC334_i <= autoA43BC334_n; autoA43BC334_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
            auto77CED483_n = libNtve_gf_DifficultyValueInt(1, 1, 2, 3);
            for (auto77CED483_i = 1; auto77CED483_i <= auto77CED483_n; auto77CED483_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(4, "InfestedTerranCampaignBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
            autoB75ED9A7_n = libNtve_gf_DifficultyValueInt(0, 0, 2, 3);
            for (autoB75ED9A7_i = 1; autoB75ED9A7_i <= autoB75ED9A7_n; autoB75ED9A7_i += 1) {
                if ((UnitIsValid(lp_attackedStructure) == true)) {
                    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedExploderBurrowed", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lp_attackedStructure));
                    UnitGroupAddUnitGroup(lv_nightDefenders, UnitLastCreatedGroup());
                    Wait(0.25, c_timeAI);
                }

            }
        }

        AISetGroupNotUsableInWaves(lv_nightDefenders, true);
        AISetGroupSuicide(lv_nightDefenders, true);
    }

    return true;
}

void gf_AIRemoveWorkersFromScanGroup (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_workerlessNearbyUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_workerlessNearbyUnits = UnitGroupEmpty();

    // Implementation
    lv_workerlessNearbyUnits = UnitGroupFilter(null, c_playerAny, lp_nearbyUnits, UnitFilter(0, 0, (1 << c_targetFilterWorker), 0), 0);
    AIBaseThink(lp_aIUnit, lv_workerlessNearbyUnits);
}

trigger auto_gf_AttackWaveatTime_Trigger = null;
fixed auto_gf_AttackWaveatTime_lp_time;
trigger auto_gf_AttackWaveatTime_lp_aIAttackWave;

void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave) {
    auto_gf_AttackWaveatTime_lp_time = lp_time;
    auto_gf_AttackWaveatTime_lp_aIAttackWave = lp_aIAttackWave;

    if (auto_gf_AttackWaveatTime_Trigger == null) {
        auto_gf_AttackWaveatTime_Trigger = TriggerCreate("auto_gf_AttackWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWaveatTime_Trigger, false, false);
}

bool auto_gf_AttackWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_AttackWaveatTime_lp_time;
    trigger lp_aIAttackWave = auto_gf_AttackWaveatTime_lp_aIAttackWave;

    // Variable Declarations
    fixed lv_attackWaveVariance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIAttackWave, true, false);
    }

    return true;
}

string gf_TransportType (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, lp_player);
}

void gf_CleanUpAttackWaveTransports (unitgroup lp_transports, point lp_cleanupLocation) {
    // Variable Declarations
    unitgroup lv_transportToWatch;
    unit lv_cleanUpTransport;
    unitgroup lv_transportsToCleanup;
    fixed lv_position_X_Min;
    fixed lv_position_X_Max;
    fixed lv_position_Y_Min;
    fixed lv_position_Y_Max;
    point lv_transportPosition;

    // Automatic Variable Declarations
    unitgroup auto22B29EAF_g;
    int auto22B29EAF_u;
    unitgroup auto2606F53C_g;
    int auto2606F53C_u;

    // Variable Initialization
    lv_transportToWatch = UnitGroupEmpty();
    lv_transportsToCleanup = UnitGroupEmpty();

    // Implementation
    lv_position_X_Min = (PointGetX(RegionGetBoundsMin(RegionPlayableMap())) - 3.0);
    lv_position_Y_Min = (PointGetY(RegionGetBoundsMin(RegionPlayableMap())) - 3.0);
    lv_position_X_Max = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - 3.0);
    lv_position_Y_Max = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - 3.0);
    Wait(3.0, c_timeGame);
    UnitGroupAddUnitGroup(lv_transportToWatch, lp_transports);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_transportToWatch, c_unitCountAlive) > 0) && (UnitGroupCount(lv_transportsToCleanup, c_unitCountAlive) > 0)) {
        auto22B29EAF_g = lv_transportToWatch;
        auto22B29EAF_u = UnitGroupCount(auto22B29EAF_g, c_unitCountAll);
        for (;; auto22B29EAF_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto22B29EAF_g, auto22B29EAF_u);
            if (lv_cleanUpTransport == null) { break; }
            UnitIssueOrder(lv_cleanUpTransport, OrderTargetingPoint(AbilityCommand("move", 0), lp_cleanupLocation), c_orderQueueReplace);
            lv_transportPosition = UnitGetPosition(lv_cleanUpTransport);
            if (((PointGetX(lv_transportPosition) < lv_position_X_Min) || (PointGetX(lv_transportPosition) > lv_position_X_Max) || (PointGetY(lv_transportPosition) < lv_position_Y_Min) || (PointGetY(lv_transportPosition) > lv_position_Y_Max))) {
                UnitSetHeight(lv_cleanUpTransport, 15.0, 4.0);
                UnitGroupRemove(lv_transportToWatch, lv_cleanUpTransport);
                UnitGroupAdd(lv_transportsToCleanup, lv_cleanUpTransport);
            }

        }
        auto2606F53C_g = lv_transportsToCleanup;
        auto2606F53C_u = UnitGroupCount(auto2606F53C_g, c_unitCountAll);
        for (;; auto2606F53C_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto2606F53C_g, auto2606F53C_u);
            if (lv_cleanUpTransport == null) { break; }
            if ((UnitGetHeight(lv_cleanUpTransport) > 14.0)) {
                UnitRemove(lv_cleanUpTransport);
            }

        }
        Wait(1.0, c_timeAI);
    }
}

trigger auto_gf_AttackDirectionWarningPing_Trigger = null;
point auto_gf_AttackDirectionWarningPing_lp_pingLocation;

void gf_AttackDirectionWarningPing (point lp_pingLocation) {
    auto_gf_AttackDirectionWarningPing_lp_pingLocation = lp_pingLocation;

    if (auto_gf_AttackDirectionWarningPing_Trigger == null) {
        auto_gf_AttackDirectionWarningPing_Trigger = TriggerCreate("auto_gf_AttackDirectionWarningPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackDirectionWarningPing_Trigger, false, false);
}

bool auto_gf_AttackDirectionWarningPing_TriggerFunc (bool testConds, bool runActions) {
    point lp_pingLocation = auto_gf_AttackDirectionWarningPing_lp_pingLocation;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), lp_pingLocation, PointGetFacing(lp_pingLocation), "PingArrow", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
    return true;
}

void gf_InfestedScourgeAIThink (int lp_owner, unit lp_scourge, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_scourgeTargets;
    unit lv_scourgeVictim;

    // Automatic Variable Declarations
    unitgroup autoC2371D17_g;
    int autoC2371D17_u;

    // Variable Initialization
    lv_scourgeTargets = UnitGroupEmpty();

    // Implementation
    TriggerExecute(gt_TrackScourgeVictims, true, false);
    libNtve_gf_AICast(lp_scourge, Order(AbilityCommand("SuicideBuilding", 0)));
    autoC2371D17_g = gv_scourgeTeamVictims;
    autoC2371D17_u = UnitGroupCount(autoC2371D17_g, c_unitCountAll);
    for (;; autoC2371D17_u -= 1) {
        lv_scourgeVictim = UnitGroupUnitFromEnd(autoC2371D17_g, autoC2371D17_u);
        if (lv_scourgeVictim == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_scourgeVictim, lp_owner) == true)) {
            UnitGroupAdd(lv_scourgeTargets, lv_scourgeVictim);
        }

    }
    if ((UnitGroupCount(lv_scourgeTargets, c_unitCountAlive) > 0)) {
        libNtve_gf_AICast(lp_scourge, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_scourgeTargets, UnitGetPosition(lp_scourge))));
    }
    else {
        libNtve_gf_AICast(lp_scourge, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupClosestToPoint(gv_infestedStructuresGroup, UnitGetPosition(lp_scourge))), 6.0))));
    }
}

trigger auto_gf_AISendInfestedAttackWave_Trigger = null;
int auto_gf_AISendInfestedAttackWave_lp_count;
string auto_gf_AISendInfestedAttackWave_lp_type;
bool auto_gf_AISendInfestedAttackWave_lp_raid;
bool auto_gf_AISendInfestedAttackWave_lp_flank;

void gf_AISendInfestedAttackWave (int lp_count, string lp_type, bool lp_raid, bool lp_flank) {
    auto_gf_AISendInfestedAttackWave_lp_count = lp_count;
    auto_gf_AISendInfestedAttackWave_lp_type = lp_type;
    auto_gf_AISendInfestedAttackWave_lp_raid = lp_raid;
    auto_gf_AISendInfestedAttackWave_lp_flank = lp_flank;

    if (auto_gf_AISendInfestedAttackWave_Trigger == null) {
        auto_gf_AISendInfestedAttackWave_Trigger = TriggerCreate("auto_gf_AISendInfestedAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_AISendInfestedAttackWave_Trigger, false, false);
}

bool auto_gf_AISendInfestedAttackWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_AISendInfestedAttackWave_lp_count;
    string lp_type = auto_gf_AISendInfestedAttackWave_lp_type;
    bool lp_raid = auto_gf_AISendInfestedAttackWave_lp_raid;
    bool lp_flank = auto_gf_AISendInfestedAttackWave_lp_flank;

    // Variable Declarations
    point lv_spawnPoint;
    unit lv_storedUnit;
    fixed lv_flyerHeight;

    // Automatic Variable Declarations
    int auto12D84EFF_n;
    int auto12D84EFF_i;

    // Variable Initialization

    // Implementation
    if (((lp_count == 0) || (lp_type == null))) {
        return true;
    }

    auto12D84EFF_n = lp_count;
    for (auto12D84EFF_i = 1; auto12D84EFF_i <= auto12D84EFF_n; auto12D84EFF_i += 1) {
        lv_spawnPoint = gf_AIGetSpawnLocation(lp_raid, lp_flank);
        UnitCreate(1, lp_type, c_unitCreateIgnorePlacement, gv_pLAYER_07_SPECIAL_INFESTED, lv_spawnPoint, libNtve_gf_RandomAngle());
        UnitSetInfoText(UnitLastCreated(), StringToText(""), UnitTypeGetName(UnitGetType(UnitLastCreated())), StringToText(""));
        lv_storedUnit = UnitLastCreated();
        gf_AISpawnedSpecialInfestedAmbience(UnitGetType(UnitLastCreated()));
        if ((lp_type == "Stank")) {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_stankHP);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, gv_stankMovementSpeed);
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, lv_spawnPoint, UnitLastCreatedGroup(), true, UnitGetOwner(UnitLastCreated()));
            Wait(3.0, c_timeAI);
            AISetUnitSuicide(lv_storedUnit, true);
            gf_AIBossPingController(lv_storedUnit);
        }
        else {
            if ((lp_type == "Spotter")) {
                lv_flyerHeight = UnitGetHeight(UnitLastCreated());
                UnitSetHeight(UnitLastCreated(), 18.0, 0.0);
                UnitSetHeight(UnitLastCreated(), lv_flyerHeight, 5.0);
            }
            else {
                libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, lv_spawnPoint, UnitLastCreatedGroup(), true, UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)));
            }
            gf_SpecialInfestedPing(lv_storedUnit);
            AISetUnitSuicide(lv_storedUnit, true);
            Wait(6.0, c_timeAI);
        }
    }
    return true;
}

trigger auto_gf_AIBossPingController_Trigger = null;
unit auto_gf_AIBossPingController_lp_unit;

void gf_AIBossPingController (unit lp_unit) {
    auto_gf_AIBossPingController_lp_unit = lp_unit;

    if (auto_gf_AIBossPingController_Trigger == null) {
        auto_gf_AIBossPingController_Trigger = TriggerCreate("auto_gf_AIBossPingController_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIBossPingController_Trigger, false, false);
}

bool auto_gf_AIBossPingController_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_AIBossPingController_lp_unit;

    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    if ((UnitIsAlive(lp_unit) == false)) {
        return true;
    }

    gv_bossPingControllerCount += 1;
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(lp_unit), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), UnitTypeGetName(UnitGetType(lp_unit)));
    PingSetUnit(PingLastCreated(), lp_unit);
    lv_ping = PingLastCreated();
    while ((UnitIsValid(lp_unit) == true)) {
        PingSetScale(PingLastCreated(), libCOMI_gf_Lerp(0.33, 0.66, ((10.0 - MinF(gv_bossPingControllerCount, 10.0)) / 10.0)));
        Wait(0.25, c_timeGame);
    }
    PingDestroy(lv_ping);
    gv_bossPingControllerCount -= 1;
    return true;
}

trigger auto_gf_AISpawnedSpecialInfestedAmbience_Trigger = null;
string auto_gf_AISpawnedSpecialInfestedAmbience_lp_specialInfestedType;

void gf_AISpawnedSpecialInfestedAmbience (string lp_specialInfestedType) {
    auto_gf_AISpawnedSpecialInfestedAmbience_lp_specialInfestedType = lp_specialInfestedType;

    if (auto_gf_AISpawnedSpecialInfestedAmbience_Trigger == null) {
        auto_gf_AISpawnedSpecialInfestedAmbience_Trigger = TriggerCreate("auto_gf_AISpawnedSpecialInfestedAmbience_TriggerFunc");
    }

    TriggerExecute(auto_gf_AISpawnedSpecialInfestedAmbience_Trigger, false, false);
}

bool auto_gf_AISpawnedSpecialInfestedAmbience_TriggerFunc (bool testConds, bool runActions) {
    string lp_specialInfestedType = auto_gf_AISpawnedSpecialInfestedAmbience_lp_specialInfestedType;

    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    string autoF473CA97_val;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    if ((gv_specialInfestedSoundsIsPlaying == false)) {
        gv_specialInfestedSoundsIsPlaying = true;
        autoF473CA97_val = lp_specialInfestedType;
        if (autoF473CA97_val == "Hunterling") {
            SoundPlay(SoundLink("Left2Die_Hunterling_Amb_Trigger", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF473CA97_val == "Kaboomer") {
            SoundPlay(SoundLink("Left2Die_Kaboomer_Amb_Trigger", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF473CA97_val == "Spotter") {
            SoundPlay(SoundLink("Left2Die_Spotter_Amb_Trigger", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF473CA97_val == "Choker") {
            SoundPlay(SoundLink("Left2Die_Choker_Amb_Trigger", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (autoF473CA97_val == "Stank") {
            SoundPlay(SoundLink("Left2Die_Stank_Amb_Trigger", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
        }
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        Wait(1.0, c_timeReal);
        gv_specialInfestedSoundsIsPlaying = false;
    }

    return true;
}

point gf_AIGetSpawnLocation (bool lp_raid, bool lp_flank) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_flank == false)) {
        if ((gv_karmaSE_P1 == gv_karmaNW_P2)) {
            if ((RandomInt(1, 2) == 1)) {
                gv_karmaSE_P1 += 1;
                if ((lp_raid == true)) {
                    return RegionRandomPoint(RegionFromId(26));
                }
                else {
                    return RegionRandomPoint(RegionFromId(7));
                }
            }
            else {
                gv_karmaNW_P2 += 1;
                if ((lp_raid == true)) {
                    return RegionRandomPoint(RegionFromId(23));
                }
                else {
                    return RegionRandomPoint(RegionFromId(5));
                }
            }
        }

        if ((gv_karmaSE_P1 < gv_karmaNW_P2)) {
            gv_karmaSE_P1 += 2;
            if ((lp_raid == true)) {
                return RegionRandomPoint(RegionFromId(26));
            }
            else {
                return RegionRandomPoint(RegionFromId(7));
            }
        }
        else {
            gv_karmaNW_P2 += 2;
            if ((lp_raid == true)) {
                return RegionRandomPoint(RegionFromId(23));
            }
            else {
                return RegionRandomPoint(RegionFromId(5));
            }
        }
    }
    else {
        if ((gv_karmaSW_Barricade == gv_karmaNE_Barricade)) {
            if ((RandomInt(1, 2) == 1)) {
                gv_karmaSW_Barricade += 1;
                return RegionRandomPoint(RegionFromId(8));
            }
            else {
                gv_karmaNE_Barricade += 1;
                return RegionRandomPoint(RegionFromId(6));
            }
        }

        if ((gv_karmaSW_Barricade < gv_karmaNE_Barricade)) {
            gv_karmaSW_Barricade += 2;
            return RegionRandomPoint(RegionFromId(8));
        }
        else {
            gv_karmaNE_Barricade += 2;
            return RegionRandomPoint(RegionFromId(6));
        }
    }
}

void gf_AIHunterlingAI (int lp_owner, unit lp_hunter, unitgroup lp_nearbyUnits) {
    int init_i;

    // Variable Declarations
    unit lv_unitException;
    unit lv_victim;
    unitgroup lv_canidates;
    unitgroup[3] lv_potentialTargets;
    aifilter lv_targetFilter;
    int lv_targetIndex;
    int lv_unitPosition;
    bool lv_debugInfo;
    text lv_textTagText;

    // Automatic Variable Declarations
    unitgroup autoD82D4C01_g;
    int autoD82D4C01_u;
    const int auto81AE1106_ae = 2;
    const int auto81AE1106_ai = 1;

    // Variable Initialization
    lv_canidates = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_potentialTargets[init_i] = UnitGroupEmpty();
    }
    lv_targetFilter = AIFilter(lp_owner);

    // Implementation
    if (((UnitGroupCount(lp_nearbyUnits, c_unitCountAlive) == 0) || (UnitAbilityGetCooldown(lp_hunter, "LeapAttack", "Abil/LeapAttack") > 0.0))) {
        return ;
    }

    AISetFilterAlliance(lv_targetFilter, c_playerGroupEnemy);
    AISetFilterPlane(lv_targetFilter, c_planeGround);
    AISetFilterBits(lv_targetFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    AISetFilterRange(lv_targetFilter, lp_hunter, 10.0);
    libCOMI_gf_TacticalAIFilterSortByLife(lv_targetFilter, 100.0, 100*c_distanceFromDamage);
    lv_canidates = AIGetFilterGroup(lv_targetFilter, lp_nearbyUnits);
    autoD82D4C01_g = lv_canidates;
    autoD82D4C01_u = UnitGroupCount(autoD82D4C01_g, c_unitCountAll);
    for (;; autoD82D4C01_u -= 1) {
        lv_unitException = UnitGroupUnitFromEnd(autoD82D4C01_g, autoD82D4C01_u);
        if (lv_unitException == null) { break; }
        if ((UnitGetType(lv_unitException) != "SpiderMine") && (UnitGetType(lv_unitException) != "SpiderMineBurrowed")) {
            lv_unitPosition += 1;
            if ((UnitFilterMatch(lv_unitException, lp_owner, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
                UnitGroupAdd(lv_potentialTargets[1], lv_unitException);
                TextExpressionSetToken("Param/Expression/CBF122A5", "A", IntToText(lv_unitPosition));
                lv_textTagText = TextExpressionAssemble("Param/Expression/CBF122A5");
            }
            else {
                UnitGroupAdd(lv_potentialTargets[2], lv_unitException);
                TextExpressionSetToken("Param/Expression/F1AFF5A3", "A", IntToText(lv_unitPosition));
                lv_textTagText = TextExpressionAssemble("Param/Expression/F1AFF5A3");
            }
            if ((lv_debugInfo == true)) {
                TextTagCreate(lv_textTagText, 24, UnitGetPosition(lv_unitException), 1.0, true, false, PlayerGroupAll());
                TextTagAttachToUnit(TextTagLastCreated(), lv_unitException, 1.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
            }

        }

    }
    if ((UnitGroupCount(lv_potentialTargets[1], c_unitCountAlive) == 0) && (UnitGroupCount(lv_potentialTargets[2], c_unitCountAlive) == 0)) {
        return ;
    }

    lv_targetIndex = 1;
    for ( ; ( (auto81AE1106_ai >= 0 && lv_targetIndex <= auto81AE1106_ae) || (auto81AE1106_ai < 0 && lv_targetIndex >= auto81AE1106_ae) ) ; lv_targetIndex += auto81AE1106_ai ) {
        lv_victim = UnitGroupUnit(lv_potentialTargets[lv_targetIndex], 1);
        if ((lv_victim != null)) {
            break;
        }

    }
    libNtve_gf_AICast(lp_hunter, OrderTargetingPoint(AbilityCommand("LeapAttack", 0), UnitGetPosition(lv_victim)));
}

void gf_AIChokerAI (int lp_owner, unit lp_choker, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unit lv_victim;
    unitgroup lv_candidates;
    unit lv_unitException;
    fixed lv_tentacleRange;
    aifilter lv_chokerAIFilter;
    marker lv_chokerMark;
    point lv_bestTarget;
    int lv_chokerAverageDelay;

    // Automatic Variable Declarations
    unitgroup auto5973CCE0_g;
    int auto5973CCE0_u;

    // Variable Initialization
    lv_candidates = UnitGroupEmpty();
    lv_chokerAIFilter = AIFilter(lp_owner);

    // Implementation
    lv_chokerAverageDelay = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 5, 0, 0, 0);
    if ((RandomInt(0, lv_chokerAverageDelay) != 0)) {
        return ;
    }

    if (((UnitGroupCount(lp_nearbyUnits, c_unitCountAlive) == 0) || (UnitAbilityGetCooldown(lp_choker, "TentacleAttack", "Abil/TentacleAttack") > 0.0))) {
        return ;
    }

    lv_tentacleRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "TentacleAttack", "Range[" + IntToString(0) + "]", lp_owner);
    AISetFilterBits(lv_chokerAIFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
    AISetFilterRange(lv_chokerAIFilter, lp_choker, (lv_tentacleRange + 3.0));
    AISetFilterAlliance(lv_chokerAIFilter, c_playerGroupEnemy);
    lv_candidates = AIGetFilterGroup(lv_chokerAIFilter, lp_nearbyUnits);
    auto5973CCE0_g = lv_candidates;
    auto5973CCE0_u = UnitGroupCount(auto5973CCE0_g, c_unitCountAll);
    for (;; auto5973CCE0_u -= 1) {
        lv_victim = UnitGroupUnitFromEnd(auto5973CCE0_g, auto5973CCE0_u);
        if (lv_victim == null) { break; }
        if ((UnitHasBehavior2(lv_victim, "ChokePrevent") == true)) {
            UnitGroupRemove(lv_candidates, lv_victim);
        }

    }
    if ((UnitGroupCount(lv_candidates, c_unitCountAlive) == 0)) {
        return ;
    }

    lv_bestTarget = AIBestTargetPoint(lv_candidates, 1, TruncI((4.0*2.0*8.0)), 2.0, 2.0, UnitGetPosition(lp_choker), lv_tentacleRange, c_unitAttributeHeroic);
    if ((lv_bestTarget != null)) {
        AICast(lp_choker, OrderTargetingUnit(AbilityCommand("TentacleAttack", 0), UnitGroupClosestToPoint(lv_candidates, lv_bestTarget)), null, true);
    }

}

void gf_AISpotterAI (int lp_owner, unit lp_spotter, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unit lv_victim;
    unitgroup lv_nearbyObjects;
    unitgroup lv_nearbyEnemyUnits;
    unitgroup lv_nearbyEnemyStructures;
    unitgroup lv_nearbyEnemyStructures_Priority;
    aifilter lv_enemyUnitsFilter;
    aifilter lv_enemyStructuresFilter;

    // Automatic Variable Declarations
    unitgroup auto818E9CDE_g;
    int auto818E9CDE_u;

    // Variable Initialization
    lv_nearbyObjects = UnitGroupEmpty();
    lv_nearbyEnemyUnits = UnitGroupEmpty();
    lv_nearbyEnemyStructures = UnitGroupEmpty();
    lv_nearbyEnemyStructures_Priority = UnitGroupEmpty();
    lv_enemyUnitsFilter = AIFilter(lp_owner);
    lv_enemyStructuresFilter = AIFilter(lp_owner);

    // Implementation
    lv_nearbyObjects = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_spotter), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    AISetFilterAlliance(lv_enemyUnitsFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyUnitsFilter, UnitFilter(0, 0, (1 << c_targetFilterStructure), 0));
    lv_nearbyEnemyUnits = AIGetFilterGroup(lv_enemyUnitsFilter, lv_nearbyObjects);
    AISetFilterAlliance(lv_enemyStructuresFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyStructuresFilter, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0));
    lv_nearbyEnemyStructures = AIGetFilterGroup(lv_enemyStructuresFilter, lv_nearbyObjects);
    if ((UnitAbilityGetCooldown(lp_spotter, "HybridGeneralPhaseShift", "Abil/HybridGeneralPhaseShift") <= 0.0) && (UnitGroupCount(lv_nearbyEnemyStructures, c_unitCountAlive) > 0)) {
        auto818E9CDE_g = lv_nearbyEnemyStructures;
        auto818E9CDE_u = UnitGroupCount(auto818E9CDE_g, c_unitCountAll);
        for (;; auto818E9CDE_u -= 1) {
            lv_victim = UnitGroupUnitFromEnd(auto818E9CDE_g, auto818E9CDE_u);
            if (lv_victim == null) { break; }
            if ((UnitHasBehavior2(lv_victim, "HybridGeneralPhaseShift") == false)) {
                if (((UnitHasBehavior2(lv_victim, "VoidPylonPowerSource") == true) || (UnitHasBehavior2(lv_victim, "PowerSource") == true) || (UnitHasBehavior2(lv_victim, "DarkPylonPowerSource") == true))) {
                    UnitGroupAdd(lv_nearbyEnemyStructures_Priority, lv_victim);
                    UnitGroupRemove(lv_nearbyEnemyStructures, lv_victim);
                }
                else {
                    if ((UnitWeaponCount(lv_victim) < 0)) {
                        UnitGroupRemove(lv_nearbyEnemyStructures, lv_victim);
                    }

                }
            }
            else {
                UnitGroupRemove(lv_nearbyEnemyStructures, lv_victim);
            }
        }
        if ((UnitGroupCount(lv_nearbyEnemyStructures_Priority, c_unitCountAlive) > 0)) {
            AICast(lp_spotter, OrderTargetingUnit(AbilityCommand("HybridGeneralPhaseShift", 0), UnitGroupRandomUnit(lv_nearbyEnemyStructures_Priority, c_unitCountAlive)), null, true);
        }
        else {
            AICast(lp_spotter, OrderTargetingUnit(AbilityCommand("HybridGeneralPhaseShift", 0), UnitGroupRandomUnit(lv_nearbyEnemyStructures, c_unitCountAlive)), null, true);
        }
        return ;
    }

    if ((UnitAbilityGetCooldown(lp_spotter, "SpotterCorruption", "Abil/SpotterCorruption") <= 0.0) && (UnitGroupCount(lv_nearbyEnemyUnits, c_unitCountAlive) > 0)) {
        AICast(lp_spotter, OrderTargetingUnit(AbilityCommand("SpotterCorruption", 0), UnitGroupRandomUnit(lv_nearbyEnemyUnits, c_unitCountAlive)), null, true);
        return ;
    }

}

void gf_AIStankAI (int lp_owner, unit lp_stank, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_candidates;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_candidates = UnitGroupEmpty();

    // Implementation
    if (((UnitGroupCount(lp_nearbyUnits, c_unitCountAlive) == 0) || (UnitAbilityGetCooldown(lp_stank, "Headbutt", "Abil/Headbutt") > 0.0))) {
        return ;
    }

    lv_candidates = UnitGroupAlliance(UnitGetOwner(lp_stank), c_unitAllianceEnemy, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lp_stank), 3.0, UnitGetFacing(lp_stank)), 3.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    if (((UnitGroupCount(lv_candidates, c_unitCountAlive) >= 4) || (UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_candidates, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0), c_unitCountAlive) >= 1) || ((UnitGroupCount(lv_candidates, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_stank, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0)))) {
        libNtve_gf_AICast(lp_stank, OrderTargetingPoint(AbilityCommand("Headbutt", 0), PointWithOffsetPolar(UnitGetPosition(lp_stank), 1.0, UnitGetFacing(lp_stank))));
    }

}

trigger auto_gf_SpecialInfestedPing_Trigger = null;
unit auto_gf_SpecialInfestedPing_lp_specialInfested;

void gf_SpecialInfestedPing (unit lp_specialInfested) {
    auto_gf_SpecialInfestedPing_lp_specialInfested = lp_specialInfested;

    if (auto_gf_SpecialInfestedPing_Trigger == null) {
        auto_gf_SpecialInfestedPing_Trigger = TriggerCreate("auto_gf_SpecialInfestedPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialInfestedPing_Trigger, false, false);
}

bool auto_gf_SpecialInfestedPing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_specialInfested = auto_gf_SpecialInfestedPing_lp_specialInfested;

    // Variable Declarations
    int lv_specialInfestedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_specialInfestedPing = c_invalidPingId;

    // Implementation
    while ((UnitIsValid(lp_specialInfested) == true) && (libCOMI_gf_GameIsOver() == false)) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitFromId(2)), UnitGetPosition(lp_specialInfested)) <= 40.0)) {
            if ((lv_specialInfestedPing == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(lp_specialInfested), 270.0, "PingSimple", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                PingSetTooltip(PingLastCreated(), UnitGetName(lp_specialInfested));
                PingSetUnit(PingLastCreated(), lp_specialInfested);
                PingSetScale(PingLastCreated(), 0.5);
                lv_specialInfestedPing = PingLastCreated();
            }
            else {
                libCOMI_gf_ShowHidePingCoop(lv_specialInfestedPing, true);
            }
        }
        else {
            if ((lv_specialInfestedPing != c_invalidPingId)) {
                libCOMI_gf_ShowHidePingCoop(lv_specialInfestedPing, false);
            }

        }
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(lv_specialInfestedPing);
    return true;
}

region gf_NydusWormSpawn () {
    // Variable Declarations
    int lv_validNydusSpawnIter;
    region[gv_c_NydusSpawnLocationsTotal + 1] lv_validNydusSpawns;
    int lv_nydusSpawnIter;
    region lv_nydusSpawnAreaIter;

    // Automatic Variable Declarations
    const int autoB1C94151_ae = gv_c_NydusSpawnLocationsTotal;
    const int autoB1C94151_ai = 1;

    // Variable Initialization

    // Implementation
    lv_nydusSpawnIter = 1;
    for ( ; ( (autoB1C94151_ai >= 0 && lv_nydusSpawnIter <= autoB1C94151_ae) || (autoB1C94151_ai < 0 && lv_nydusSpawnIter >= autoB1C94151_ae) ) ; lv_nydusSpawnIter += autoB1C94151_ai ) {
        lv_nydusSpawnAreaIter = RegionFromName(("Nydus Worm Spawn " + IntToString(lv_nydusSpawnIter)));
        if ((UnitGroupCount(UnitGroupFilterRegion(gv_activeNydusWorms, lv_nydusSpawnAreaIter, 0), c_unitCountAlive) == 0)) {
            lv_validNydusSpawnIter += 1;
            lv_validNydusSpawns[lv_validNydusSpawnIter] = lv_nydusSpawnAreaIter;
        }

    }
    if ((lv_validNydusSpawnIter > 0)) {
        return lv_validNydusSpawns[RandomInt(1, lv_validNydusSpawnIter)];
    }
    else {
        return RegionFromId(27);
    }
}

trigger auto_gf_AISpawnNydusWorm_Trigger = null;
region auto_gf_AISpawnNydusWorm_lp_region;

void gf_AISpawnNydusWorm (region lp_region) {
    auto_gf_AISpawnNydusWorm_lp_region = lp_region;

    if (auto_gf_AISpawnNydusWorm_Trigger == null) {
        auto_gf_AISpawnNydusWorm_Trigger = TriggerCreate("auto_gf_AISpawnNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_AISpawnNydusWorm_Trigger, false, false);
}

bool auto_gf_AISpawnNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    region lp_region = auto_gf_AISpawnNydusWorm_lp_region;

    // Variable Declarations
    unit lv_nydusWorm;
    timer lv_spawnCooldown;
    point lv_spawnPoint;
    int lv_stage;
    int[5] lv_stageRepeat;
    int lv_resourceSize;
    int lv_techLevel;

    // Automatic Variable Declarations
    int autoAAAC5E9D_val;

    // Variable Initialization
    lv_spawnCooldown = TimerCreate();

    // Implementation
    while (!((UnitGroupCount(gv_activeNydusWorms, c_unitCountAlive) < gv_maxConcurrentNydusWorms))) {
        Wait(1.0, c_timeAI);
    }
    SoundPlayForPlayer(SoundLink("Event_Quake_NydusBurrow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.04, 2.0, 100.0, 3.0);
    CameraShakeStart(gv_pLAYER_02_USER, c_cameraPositionTarget, c_cameraDirectionZ, 0.04, 2.0, 100.0, 3.0);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_TransmissionNydusQ, true, false);
    lv_spawnPoint = RegionRandomPoint(lp_region);
    libNtve_gf_CreateUnitsAtPoint2(1, "NydusCanal", 0, gv_pLAYER_05_INFESTED, lv_spawnPoint);
    lv_nydusWorm = UnitLastCreated();
    UnitSetPropertyFixed(lv_nydusWorm, c_unitPropLifeMax, gv_nydusWormHP);
    UnitSetPropertyFixed(lv_nydusWorm, c_unitPropLifePercent, 100.0);
    UnitSetInfoText(lv_nydusWorm, StringToText(""), UnitTypeGetName(UnitGetType(lv_nydusWorm)), StringToText(""));
    libCOMI_gf_ShareVisionofUnitCoop(lv_nydusWorm, true, gv_pLAYER_01_USER);
    libCOMI_gf_ShareVisionofUnitCoop(lv_nydusWorm, true, gv_pLAYER_02_USER);
    UnitGroupAdd(gv_activeNydusWorms, lv_nydusWorm);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_nydusWorm), 6.0, Color(100.00, 0.00, 0.00));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_nydusWorm), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    SoundPlay(SoundLink("Event_NydusGreater_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nydus_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TimerStart(lv_spawnCooldown, libCOMI_gf_MinimumDifficultyValueCoopReal(20.0, 20.0, 15.0, 10.0, 0.0, 0.0), false, c_timeAI);
    libCOMI_gf_DisplayUnitProgressBar(lv_nydusWorm, StringExternal("Param/Value/90CA80A0"), 0, FixedToInt(TimerGetDuration(lv_spawnCooldown)));
    Wait(6.0, c_timeAI);
    gf_AIBossPingController(lv_nydusWorm);
    lv_stage = 1;
    lv_stageRepeat[1] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 3, 2, 0, 0);
    lv_stageRepeat[2] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 2, 1, 0, 0);
    lv_stageRepeat[3] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 25, 25, 0, 0);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsValid(lv_nydusWorm) == true)) {
        if ((TimerGetRemaining(lv_spawnCooldown) <= 0.0)) {
            TimerStart(lv_spawnCooldown, 60.0, false, c_timeAI);
            libCOMI_gf_SetUnitProgressBarValueRange(lv_nydusWorm, 0, FixedToInt(TimerGetDuration(lv_spawnCooldown)));
            autoAAAC5E9D_val = lv_stage;
            if (autoAAAC5E9D_val == 1) {
                lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
            }
            else if (autoAAAC5E9D_val == 2) {
                libCOMI_gf_ShareVisionofUnitCoop(lv_nydusWorm, false, gv_pLAYER_01_USER);
                libCOMI_gf_ShareVisionofUnitCoop(lv_nydusWorm, false, gv_pLAYER_02_USER);
                lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
            }
            else if (autoAAAC5E9D_val == 3) {
                lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
            }
            else {
                UnitKill(lv_nydusWorm);
                break;
            }
            gf_AISpawnAttackFromNydusWorm(lv_nydusWorm, lv_resourceSize, lv_techLevel, UnitGetPosition(lv_nydusWorm));
            lv_stageRepeat[lv_stage] -= 1;
            if ((lv_stageRepeat[lv_stage] <= 0)) {
                lv_stage += 1;
            }

        }

        if (((UnitOrderIsValid(lv_nydusWorm, Order(AbilityCommand("stop", 0))) == false) || (UnitGroupCount(gv_nydusSpawnedUnits, c_unitCountAlive) > gv_c_NydusSpawnedUnit_MAX))) {
            TimerPause(lv_spawnCooldown, true);
            libCOMI_gf_ShowHideUnitProgressBar(lv_nydusWorm, false);
        }
        else {
            TimerPause(lv_spawnCooldown, false);
            libCOMI_gf_ShowHideUnitProgressBar(lv_nydusWorm, true);
        }
        libCOMI_gf_SetUnitProgressBarProgress(lv_nydusWorm, FixedToInt(TimerGetElapsed(lv_spawnCooldown)));
        libCOMI_gf_SetUnitProgressBarProgress2(lv_nydusWorm, FixedToInt(TimerGetRemaining(lv_spawnCooldown)));
        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_gf_AISpawnAttackFromNydusWorm_Trigger = null;
unit auto_gf_AISpawnAttackFromNydusWorm_lp_worm;
int auto_gf_AISpawnAttackFromNydusWorm_lp_resourceSize;
int auto_gf_AISpawnAttackFromNydusWorm_lp_techLevel;
point auto_gf_AISpawnAttackFromNydusWorm_lp_spawnLocation;

void gf_AISpawnAttackFromNydusWorm (unit lp_worm, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    auto_gf_AISpawnAttackFromNydusWorm_lp_worm = lp_worm;
    auto_gf_AISpawnAttackFromNydusWorm_lp_resourceSize = lp_resourceSize;
    auto_gf_AISpawnAttackFromNydusWorm_lp_techLevel = lp_techLevel;
    auto_gf_AISpawnAttackFromNydusWorm_lp_spawnLocation = lp_spawnLocation;

    if (auto_gf_AISpawnAttackFromNydusWorm_Trigger == null) {
        auto_gf_AISpawnAttackFromNydusWorm_Trigger = TriggerCreate("auto_gf_AISpawnAttackFromNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_AISpawnAttackFromNydusWorm_Trigger, false, false);
}

bool auto_gf_AISpawnAttackFromNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    unit lp_worm = auto_gf_AISpawnAttackFromNydusWorm_lp_worm;
    int lp_resourceSize = auto_gf_AISpawnAttackFromNydusWorm_lp_resourceSize;
    int lp_techLevel = auto_gf_AISpawnAttackFromNydusWorm_lp_techLevel;
    point lp_spawnLocation = auto_gf_AISpawnAttackFromNydusWorm_lp_spawnLocation;

    // Variable Declarations
    unit lv_wormedInUnit;
    unitgroup lv_wormUnits;
    point lv_wormLocation;

    // Automatic Variable Declarations
    unitgroup auto3F59927C_g;
    int auto3F59927C_u;
    unitgroup autoD0DD31D4_g;
    int autoD0DD31D4_u;

    // Variable Initialization
    lv_wormUnits = UnitGroupEmpty();
    lv_wormLocation = UnitGetPosition(lp_worm);

    // Implementation
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AMONS_FORCES, gv_pLAYER_04_AMONS_FORCES, lp_resourceSize, lp_techLevel, UnitGetPosition(lp_worm), false);
    lv_wormUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    auto3F59927C_g = lv_wormUnits;
    auto3F59927C_u = UnitGroupCount(auto3F59927C_g, c_unitCountAll);
    for (;; auto3F59927C_u -= 1) {
        lv_wormedInUnit = UnitGroupUnitFromEnd(auto3F59927C_g, auto3F59927C_u);
        if (lv_wormedInUnit == null) { break; }
        libNtve_gf_PauseUnit(lv_wormedInUnit, true);
        libNtve_gf_ShowHideUnit(lv_wormedInUnit, false);
    }
    autoD0DD31D4_g = lv_wormUnits;
    autoD0DD31D4_u = UnitGroupCount(autoD0DD31D4_g, c_unitCountAll);
    for (;; autoD0DD31D4_u -= 1) {
        lv_wormedInUnit = UnitGroupUnitFromEnd(autoD0DD31D4_g, autoD0DD31D4_u);
        if (lv_wormedInUnit == null) { break; }
        UnitGroupAdd(gv_nydusSpawnedUnits, lv_wormedInUnit);
        if ((UnitIsValid(lp_worm) == true)) {
            libNtve_gf_PauseUnit(lv_wormedInUnit, false);
            libNtve_gf_ShowHideUnit(lv_wormedInUnit, true);
            if ((UnitTestPlane(lv_wormedInUnit, c_planeAir) == true) && (UnitTestPlane(lv_wormedInUnit, c_planeGround) == false)) {
                UnitBehaviorAddPlayer(lv_wormedInUnit, "MercAirDrop", UnitGetOwner(lv_wormedInUnit), 1);
            }
            else {
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_worm), c_animNameDefault, "Spell", 0, c_animTimeDefault);
                SoundPlayOnUnit(SoundLink("NydusWorm_Unload", -1), PlayerGroupAll(), lp_worm, 0.0, 100.0, 0.0);
            }
            Wait(gv_nydusSpitPeriod, c_timeAI);
        }
        else {
            UnitRemove(lv_wormedInUnit);
        }
    }
    Wait(5.0, c_timeAI);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_HumanPlayers());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AMONS_FORCES, libCOMI_gf_HumanPlayers());
    AIAttackWaveSetGatherPoint(gv_pLAYER_03_AMONS_FORCES, PointWithOffsetPolar(lv_wormLocation, 2.0, 270.0));
    AIAttackWaveSetGatherPoint(gv_pLAYER_04_AMONS_FORCES, PointWithOffsetPolar(lv_wormLocation, 2.0, 270.0));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_wormUnits, 0, true);
    return true;
}

void gf_UpdateNydusSpawnLocation () {
    // Variable Declarations
    int lv_tempStorage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_tempStorage = gv_nydusSpawnLocations[gv_nydusSpawnLocationCurrent];
    gv_nydusSpawnLocations[gv_nydusSpawnLocationCurrent] = gv_nydusSpawnLocations[gv_c_NydusSpawnLocationsTotal];
    gv_nydusSpawnLocations[gv_c_NydusSpawnLocationsTotal] = lv_tempStorage;
}

unitgroup gf_EnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

bool gf_DifficultyValueBoolean (bool lp_casual, bool lp_normal, bool lp_hard, bool lp_brutal) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 0, 0, 0, 0, 0) == 1)) {
        return lp_casual;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 0, 0, 0, 0) == 1)) {
        return lp_normal;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 0, 0, 0) == 1)) {
        return lp_hard;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0) == 1)) {
        return lp_brutal;
    }

    return false;
}

region gf_DifficultyValueRegion (region lp_casual, region lp_normal, region lp_hard, region lp_brutal) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 0, 0, 0, 0, 0) == 1)) {
        return lp_casual;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 0, 0, 0, 0) == 1)) {
        return lp_normal;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 0, 0, 0) == 1)) {
        return lp_hard;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0) == 1)) {
        return lp_brutal;
    }

    return RegionFromId(34);
}

point gf_AttackDirectionGatherPoint (int lp_direction) {
    // Automatic Variable Declarations
    int autoD45C8432_val;

    // Implementation
    autoD45C8432_val = lp_direction;
    if (autoD45C8432_val == ge_AttackDirection_NorthEast) {
        return PointFromId(263);
    }
    else if (autoD45C8432_val == ge_AttackDirection_NorthWestP2) {
        return PointFromId(237);
    }
    else if (autoD45C8432_val == ge_AttackDirection_SouthEastP1) {
        return PointFromId(458);
    }
    else if (autoD45C8432_val == ge_AttackDirection_SouthWest) {
        return PointFromId(324);
    }
    else {
    }
    return PointFromId(324);
}

void gf_AIPrepareAttackDirection (int lp_direction) {
    // Automatic Variable Declarations
    int autoEA1974A1_val;

    // Implementation
    autoEA1974A1_val = lp_direction;
    if (autoEA1974A1_val == ge_AttackDirection_NorthEast) {
        AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED, PointFromId(263));
        AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(220), false);
    }
    else if (autoEA1974A1_val == ge_AttackDirection_NorthWestP2) {
        AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED, PointFromId(237));
        AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(228), false);
    }
    else if (autoEA1974A1_val == ge_AttackDirection_SouthEastP1) {
        AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED, PointFromId(458));
        AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(317), false);
    }
    else if (autoEA1974A1_val == ge_AttackDirection_SouthWest) {
        AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED, PointFromId(324));
        AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(264), false);
    }
    else {
    }
}

void gf_AIAttackWaveFromDirection (int lp_direction, int lp_delay, int lp_infestedCivilians, int lp_infestedMarines, int lp_aberrations) {
    // Variable Declarations
    unitgroup lv_mutatorattackwaveunitgroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mutatorattackwaveunitgroup = UnitGroupEmpty();

    // Implementation
    gf_AIPrepareAttackDirection(lp_direction);
    libCOMI_gf_AddAttackWaveUnitType(lp_infestedCivilians, "InfestedCivilian");
    libCOMI_gf_AddAttackWaveUnitType(lp_infestedMarines, "InfestedTerranCampaign");
    libCOMI_gf_AddAttackWaveUnitType(lp_aberrations, "InfestedAbomination");
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_05_INFESTED, lv_mutatorattackwaveunitgroup, gf_AttackDirectionGatherPoint(lp_direction), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_05_INFESTED, lv_mutatorattackwaveunitgroup);
    AIAttackWaveSend(gv_pLAYER_05_INFESTED, lp_delay, false);
}

void gf_AIExpansionCheckNorth () {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1))) {
        if ((RandomInt(0, 1) == 1)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(859), false);
            AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(256117479), false);
        }
        else {
            AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(256117479), false);
            AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(859), false);
        }
    }

}

void gf_AIExpansionCheckSouth () {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionFromId(33), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) >= 1))) {
        if ((RandomInt(0, 1) == 1)) {
            AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(495), false);
        }
        else {
            AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, PointFromId(872362782), false);
        }
        AIAttackWaveAddWaypoint(gv_pLAYER_05_INFESTED, RegionGetCenter(RegionFromId(33)), false);
    }

}

trigger auto_gf_AIBigTextMessage_Trigger = null;
soundlink auto_gf_AIBigTextMessage_lp_sound;
text auto_gf_AIBigTextMessage_lp_message;
text auto_gf_AIBigTextMessage_lp_color;

void gf_AIBigTextMessage (soundlink lp_sound, text lp_message, text lp_color) {
    auto_gf_AIBigTextMessage_lp_sound = lp_sound;
    auto_gf_AIBigTextMessage_lp_message = lp_message;
    auto_gf_AIBigTextMessage_lp_color = lp_color;

    if (auto_gf_AIBigTextMessage_Trigger == null) {
        auto_gf_AIBigTextMessage_Trigger = TriggerCreate("auto_gf_AIBigTextMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIBigTextMessage_Trigger, false, false);
}

bool auto_gf_AIBigTextMessage_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_sound = auto_gf_AIBigTextMessage_lp_sound;
    text lp_message = auto_gf_AIBigTextMessage_lp_message;
    text lp_color = auto_gf_AIBigTextMessage_lp_color;

    // Automatic Variable Declarations
    // Implementation
    DialogCreate(1000, 150, c_anchorCenter, 0, -125, true);
    gv_bigTextMessage = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    SoundPlay(lp_sound, PlayerGroupAll(), 100.0, 0.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SetDialogItemTextWriteout(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteoutDuration(DialogControlLastCreated(), 1.5, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/2D861FBC") + lp_color + lp_message + StringExternal("Param/Value/AEDC9672")), PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 0);
    Wait(8.5, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 100.0);
    Wait(3.0, c_timeReal);
    DialogDestroy(DialogLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("AC_MeinhoffDayNight", gt_Init02LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init02LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init03Players, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02LoadingComplete_Init () {
    gt_Init02LoadingComplete = TriggerCreate("gt_Init02LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init03Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_humanPlayersAndAllies;
    int lv_humanIter;
    int lv_enemyIter;

    // Automatic Variable Declarations
    playergroup auto2FFF15E9_g;
    playergroup autoFEB91E30_g;

    // Variable Initialization
    lv_humanPlayersAndAllies = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) > 1)) {
        gv_pLAYER_02_USER = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 2);
    }
    else {
        gv_pLAYER_02_USER = gv_pLAYER_01_USER;
    }
    gv_enemyPlayers = libCOMI_gv_vU_Enemies;
    PlayerGroupAdd(gv_infestedPlayers, gv_pLAYER_07_SPECIAL_INFESTED);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_SCIENCE_FACILITY, "CoopNPCPlayer", 1);
    auto2FFF15E9_g = libCOMI_gf_GetEnemyPlayers();
    lv_enemyIter = -1;
    while (true) {
        lv_enemyIter = PlayerGroupNextPlayer(auto2FFF15E9_g, lv_enemyIter);
        if (lv_enemyIter < 0) { break; }
        libNtve_gf_SetAllianceOneWay(lv_enemyIter, gv_pLAYER_05_INFESTED, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAllianceOneWay(gv_pLAYER_05_INFESTED, lv_enemyIter, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAllianceOneWay(lv_enemyIter, gv_pLAYER_06_SCIENCE_FACILITY, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(lv_enemyIter, gv_pLAYER_09_NEUTRALROCKS, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(lv_enemyIter, gv_pLAYER_08_HOSTILEROCKS, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_07_SPECIAL_INFESTED, gv_pLAYER_05_INFESTED, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceOneWay(gv_pLAYER_05_INFESTED, gv_pLAYER_07_SPECIAL_INFESTED, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    autoFEB91E30_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_enemyIter = -1;
    while (true) {
        lv_enemyIter = PlayerGroupNextPlayer(autoFEB91E30_g, lv_enemyIter);
        if (lv_enemyIter < 0) { break; }
        libNtve_gf_SetAlliance(lv_enemyIter, gv_pLAYER_09_NEUTRALROCKS, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(lv_enemyIter, gv_pLAYER_08_HOSTILEROCKS, libNtve_ge_AllianceSetting_Neutral);
    }
    PlayerSetState(gv_pLAYER_08_HOSTILEROCKS, c_playerStateShowWorldTip, false);
    PlayerSetState(gv_pLAYER_09_NEUTRALROCKS, c_playerStateShowWorldTip, false);
    VisFillArea(gv_pLAYER_05_INFESTED, RegionEntireMap(), c_fillTypeMasked, false);
    VisRevealArea(gv_pLAYER_05_INFESTED, RegionEntireMap(), 2.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Players_Init () {
    gt_Init03Players = TriggerCreate("gt_Init03Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_infestedStructureIndex;
    unitgroup lv_barricades;

    // Automatic Variable Declarations
    unitgroup auto6A6C64E5_g;
    int auto6A6C64E5_u;
    unit auto6A6C64E5_var;
    unitgroup auto6BC5C66D_g;
    int auto6BC5C66D_u;
    unit auto6BC5C66D_var;
    unitgroup auto92012C39_g;
    int auto92012C39_u;
    unit auto92012C39_var;
    unitgroup autoD75C5DC7_g;
    int autoD75C5DC7_u;
    unit autoD75C5DC7_var;
    unitgroup autoF59C94C7_g;
    int autoF59C94C7_u;
    unit autoF59C94C7_var;
    unitgroup auto31461AD7_g;
    int auto31461AD7_u;
    unit auto31461AD7_var;
    unitgroup autoC7C894D9_g;
    int autoC7C894D9_u;
    unit autoC7C894D9_var;
    playergroup autoF3C96DAE_g;
    int autoF3C96DAE_var;

    // Variable Initialization
    lv_barricades = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogActor, "NydusCanal", "CustomUnitStatusFrame", gv_pLAYER_05_INFESTED, "LotV_UnitStatus/UnitStatusProgressFrameTemplate");
    UnitSetState(UnitFromId(2), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(2), c_unitStateInvulnerable, true);
    auto6A6C64E5_g = UnitGroup(null, gv_pLAYER_05_INFESTED, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A6C64E5_u = UnitGroupCount(auto6A6C64E5_g, c_unitCountAll);
    for (;; auto6A6C64E5_u -= 1) {
        auto6A6C64E5_var = UnitGroupUnitFromEnd(auto6A6C64E5_g, auto6A6C64E5_u);
        if (auto6A6C64E5_var == null) { break; }
        if (((UnitGetType(auto6A6C64E5_var) == "InfestableBiodome") || (UnitGetType(auto6A6C64E5_var) == "InfestableHut") || (UnitGetType(auto6A6C64E5_var) == "InfestedMercHaven") || (UnitGetType(auto6A6C64E5_var) == "NovaInfestableColonistHut") || (UnitGetType(auto6A6C64E5_var) == "JarbanInfestibleColonistHut"))) {
            lv_infestedStructureIndex += 1;
            gv_infestedStructuresUnit[lv_infestedStructureIndex] = auto6A6C64E5_var;
            UnitGroupAdd(gv_infestedStructuresGroup, auto6A6C64E5_var);
            UnitBehaviorAddPlayer(auto6A6C64E5_var, "ColonyInfestation", gv_pLAYER_05_INFESTED, 1);
        }

    }
    gv_infestedStructuresRemaining = lv_infestedStructureIndex;
    gv_infestedStructuresTotal = lv_infestedStructureIndex;
    auto6BC5C66D_g = UnitGroup("InfestedBunker", gv_pLAYER_05_INFESTED, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6BC5C66D_u = UnitGroupCount(auto6BC5C66D_g, c_unitCountAll);
    for (;; auto6BC5C66D_u -= 1) {
        auto6BC5C66D_var = UnitGroupUnitFromEnd(auto6BC5C66D_g, auto6BC5C66D_u);
        if (auto6BC5C66D_var == null) { break; }
        UnitCargoCreate(auto6BC5C66D_var, "InfestedTerranCampaign", libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 0, 0));
    }
    auto92012C39_g = UnitGroup(null, gv_pLAYER_09_NEUTRALROCKS, RegionFromId(3), UnitFilter((1 << c_targetFilterDestructible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92012C39_u = UnitGroupCount(auto92012C39_g, c_unitCountAll);
    for (;; auto92012C39_u -= 1) {
        auto92012C39_var = UnitGroupUnitFromEnd(auto92012C39_g, auto92012C39_u);
        if (auto92012C39_var == null) { break; }
        UnitGroupAdd(gv_barricadeNE, auto92012C39_var);
        UnitGroupAdd(lv_barricades, auto92012C39_var);
    }
    autoD75C5DC7_g = UnitGroup(null, gv_pLAYER_09_NEUTRALROCKS, RegionFromId(30), UnitFilter((1 << c_targetFilterDestructible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD75C5DC7_u = UnitGroupCount(autoD75C5DC7_g, c_unitCountAll);
    for (;; autoD75C5DC7_u -= 1) {
        autoD75C5DC7_var = UnitGroupUnitFromEnd(autoD75C5DC7_g, autoD75C5DC7_u);
        if (autoD75C5DC7_var == null) { break; }
        UnitGroupAdd(gv_barricadeNW, autoD75C5DC7_var);
        UnitGroupAdd(lv_barricades, autoD75C5DC7_var);
    }
    autoF59C94C7_g = UnitGroup(null, gv_pLAYER_09_NEUTRALROCKS, RegionFromId(50), UnitFilter((1 << c_targetFilterDestructible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF59C94C7_u = UnitGroupCount(autoF59C94C7_g, c_unitCountAll);
    for (;; autoF59C94C7_u -= 1) {
        autoF59C94C7_var = UnitGroupUnitFromEnd(autoF59C94C7_g, autoF59C94C7_u);
        if (autoF59C94C7_var == null) { break; }
        UnitGroupAdd(gv_barricadeSE, autoF59C94C7_var);
        UnitGroupAdd(lv_barricades, autoF59C94C7_var);
    }
    auto31461AD7_g = UnitGroup(null, gv_pLAYER_09_NEUTRALROCKS, RegionFromId(2), UnitFilter((1 << c_targetFilterDestructible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto31461AD7_u = UnitGroupCount(auto31461AD7_g, c_unitCountAll);
    for (;; auto31461AD7_u -= 1) {
        auto31461AD7_var = UnitGroupUnitFromEnd(auto31461AD7_g, auto31461AD7_u);
        if (auto31461AD7_var == null) { break; }
        UnitGroupAdd(gv_barricadeSW, auto31461AD7_var);
        UnitGroupAdd(lv_barricades, auto31461AD7_var);
    }
    autoC7C894D9_g = lv_barricades;
    autoC7C894D9_u = UnitGroupCount(autoC7C894D9_g, c_unitCountAll);
    for (;; autoC7C894D9_u -= 1) {
        autoC7C894D9_var = UnitGroupUnitFromEnd(autoC7C894D9_g, autoC7C894D9_u);
        if (autoC7C894D9_var == null) { break; }
        UnitSetState(autoC7C894D9_var, c_unitStateTargetable, false);
        UnitBehaviorAdd(autoC7C894D9_var, "Conjoined", autoC7C894D9_var, 1);
        UnitSetInfoTip(autoC7C894D9_var, PlayerName(UnitGetOwner(autoC7C894D9_var)));
    }
    autoF3C96DAE_g = gv_enemyPlayers;
    autoF3C96DAE_var = -1;
    while (true) {
        autoF3C96DAE_var = PlayerGroupNextPlayer(autoF3C96DAE_g, autoF3C96DAE_var);
        if (autoF3C96DAE_var < 0) { break; }
        AIToggleBulliesInRegion(autoF3C96DAE_var, RegionEntireMap(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIter;
    int lv_revealInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_regionIter = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("MeinhoffCampaignDay");
    GameTimeOfDaySet("12:00:00");
    GameTimeOfDayPause(true);
    GameTimeOfDaySetLength((gv_day_Duration + gv_night_Duration));
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerDown");
    lv_regionIter = 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(9);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(10);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(51);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(11);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(12);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(39);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(1);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(22);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(13);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(21);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(43);
    lv_regionIter += 1;
    gv_infestedAreaRevealers[lv_regionIter] = RegionFromId(20);
    lv_regionIter = 1;
    gv_whiteNoiseZombieRegions[lv_regionIter] = RegionFromId(19);
    lv_regionIter += 1;
    gv_whiteNoiseZombieRegions[lv_regionIter] = RegionFromId(19);
    lv_regionIter += 1;
    gv_whiteNoiseZombieRegions[lv_regionIter] = RegionFromId(19);
    lv_regionIter += 1;
    gv_whiteNoiseZombieRegions[lv_regionIter] = RegionFromId(19);
    lv_regionIter = 1;
    gv_bonusBossSpawnRegions[lv_regionIter] = RegionFromId(9);
    gv_bonusBossSpawnLocation[lv_regionIter] = PointFromId(2059873795);
    lv_regionIter += 1;
    gv_bonusBossSpawnRegions[lv_regionIter] = RegionFromId(10);
    gv_bonusBossSpawnLocation[lv_regionIter] = PointFromId(1359654955);
    lv_regionIter += 1;
    gv_bonusBossSpawnRegions[lv_regionIter] = RegionFromId(12);
    gv_bonusBossSpawnLocation[lv_regionIter] = PointFromId(1944512855);
    lv_regionIter += 1;
    gv_bonusBossSpawnRegions[lv_regionIter] = RegionFromId(39);
    gv_bonusBossSpawnLocation[lv_regionIter] = PointFromId(192044371);
    lv_regionIter += 1;
    gv_bonusBossSpawnRegions[lv_regionIter] = RegionFromId(1);
    gv_bonusBossSpawnLocation[lv_regionIter] = PointFromId(697979185);
    lv_regionIter += 1;
    gv_bonusBossSpawnRegions[lv_regionIter] = RegionFromId(22);
    gv_bonusBossSpawnLocation[lv_regionIter] = PointFromId(43810087);
    lv_regionIter += 1;
    gv_bonusBossSpawnRegions[lv_regionIter] = RegionFromId(43);
    gv_bonusBossSpawnLocation[lv_regionIter] = PointFromId(1067290936);
    TriggerExecute(gt_SetupGuidingPingOrder, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string[5] lv_specialInfestedPicks;
    int lv_specialInfestedPickIndex;
    int lv_specialInfestedTriggerIter;
    fixed lv_infestedStructureLifeSmall;
    fixed lv_infestedStructureLifeLarge;
    int lv_infestedStructureIndex;
    unit lv_infestedStructureIter;
    fixed lv_spotterBuildingDisableCooldown;
    fixed lv_spotterBuildingDisableDuration;
    int lv_difficulty;

    // Automatic Variable Declarations
    playergroup autoFCC8958C_g;
    int autoFCC8958C_var;
    int autoE8C7B93E_ae;
    const int autoE8C7B93E_ai = 1;
    const int autoA2D48F7C_ae = 6;
    const int autoA2D48F7C_ai = 1;

    // Variable Initialization
    lv_difficulty = libCOMI_gf_GetMissionDifficulty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_day_Duration_First = 210;
    gv_day_Duration = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 240, 240, 210, 210, 0, 0);
    gv_night_Duration = 240.0;
    gv_nydusSpitPeriod = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 0.6, 0.6, 0.55, 0.5, 0.0, 0.0);
    gv_nydusWormHP = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1000, 1000, 1500, 2000, 0, 0);
    gv_stankHP = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2000, 2000, 4000, 6000, 0, 0);
    gv_stankMovementSpeed = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1.2, 1.2, 1.6, 2.0, 0.0, 0.0);
    gv_volatileSpawnCooldownValue = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 20.0, 20.0, 15.0, 10.0, 0.0, 0.0);
    gv_bonusBossAttackCooldownValue = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 13.0, 13.0, 9.0, 5.0, 0.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogWeapon, "ACVirophageVileStream", "Period", gv_pLAYER_07_SPECIAL_INFESTED, FixedToString(gv_bonusBossAttackCooldownValue, c_fixedPrecisionAny));
    lv_spotterBuildingDisableCooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 8.0, 5.0, 0.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "HybridGeneralPhaseShift", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", gv_pLAYER_07_SPECIAL_INFESTED, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 8.0, 5.0, 0.0, 0.0), c_fixedPrecisionAny));
    lv_spotterBuildingDisableDuration = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 13.0, 18.0, 0.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "HybridGeneralPhaseShift", "Duration", gv_pLAYER_07_SPECIAL_INFESTED, FixedToString(lv_spotterBuildingDisableDuration, c_fixedPrecisionAny));
    gv_nightDefenderDifficulty = libCOMI_gf_GetMissionDifficulty();
    if ((gv_bossType == ge_PRESET_BossType__None)) {
        if ((RandomInt(0, 1) == 1)) {
            gv_bossType = ge_PRESET_BossType_Stank;
        }
        else {
            gv_bossType = ge_PRESET_BossType_Nydus;
        }
    }

    autoFCC8958C_g = gv_enemyPlayers;
    autoFCC8958C_var = -1;
    while (true) {
        autoFCC8958C_var = PlayerGroupNextPlayer(autoFCC8958C_g, autoFCC8958C_var);
        if (autoFCC8958C_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogEffect, "HunterlingLeapImpactStunSearch", "AreaArray[" + IntToString(0) + "].Radius", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 0.5, 0.5, 1.0, 1.5, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "LeapHunterlingDamage", "Amount", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 15.0, 15.0, 20.0, 25.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "LeapHunterlingStun", "Duration", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 0.0, 0.0, 1.0, 2.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "LeapAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 6.0, 4.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "LeapAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 30.0, 30.0, 0.0, 0.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "TentacleAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 45.0, 45.0, 20.0, 15.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "TentacleAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 15.0, 15.0, 10.0, 5.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "TentacleAttack", "Range[" + IntToString(0) + "]", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 12.0, 12.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "TentacleAttackSearchArea", "AreaArray[" + IntToString(0) + "].MaxCount", autoFCC8958C_var, IntToString(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0)));
        CatalogFieldValueSet(c_gameCatalogEffect, "TentacleAttackForce", "Amount", autoFCC8958C_var, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), -0.25, -0.25, -0.5, -0.5, 0.0, 0.0), c_fixedPrecisionAny));
    }
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0) == 1)) {
        UnitRemove(UnitFromId(73));
        UnitRemove(UnitFromId(360925840));
    }

    lv_infestedStructureLifeLarge = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 500.0, 500.0, 850.0, 1300.0, 0.0, 0.0);
    lv_infestedStructureLifeSmall = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 250.0, 250.0, 400.0, 500.0, 0.0, 0.0);
    gv_nightDefenderCooldown = 30.0;
    gv_nightDefenderSpawnLifeThreshold = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 150.0, 150.0, 250.0, 750.0, 0.0, 0.0);
    autoE8C7B93E_ae = gv_infestedStructuresTotal;
    lv_infestedStructureIndex = 1;
    for ( ; ( (autoE8C7B93E_ai >= 0 && lv_infestedStructureIndex <= autoE8C7B93E_ae) || (autoE8C7B93E_ai < 0 && lv_infestedStructureIndex >= autoE8C7B93E_ae) ) ; lv_infestedStructureIndex += autoE8C7B93E_ai ) {
        lv_infestedStructureIter = gv_infestedStructuresUnit[lv_infestedStructureIndex];
        if ((UnitGetType(lv_infestedStructureIter) == "InfestableBiodome")) {
            UnitSetPropertyFixed(lv_infestedStructureIter, c_unitPropLifeMax, lv_infestedStructureLifeLarge);
        }
        else {
            UnitSetPropertyFixed(lv_infestedStructureIter, c_unitPropLifeMax, lv_infestedStructureLifeSmall);
        }
        UnitSetPropertyFixed(lv_infestedStructureIter, c_unitPropLifePercent, 100.0);
        gv_infestedStructuresStructureHealth[lv_infestedStructureIndex] = UnitGetPropertyFixed(lv_infestedStructureIter, c_unitPropLife, c_unitPropCurrent);
    }
    if (((gv_specialInfestedAttacks_InfestedTypes[1] == null) || (gv_specialInfestedAttacks_InfestedTypes[2] == null))) {
        lv_specialInfestedPicks[1] = "Hunterling";
        lv_specialInfestedPicks[2] = "Spotter";
        lv_specialInfestedPicks[3] = "Kaboomer";
        lv_specialInfestedPicks[4] = "Choker";
        lv_specialInfestedPickIndex = RandomInt(1, 4);
        gv_specialInfestedAttacks_InfestedTypes[1] = lv_specialInfestedPicks[lv_specialInfestedPickIndex];
        lv_specialInfestedPicks[lv_specialInfestedPickIndex] = lv_specialInfestedPicks[4];
        lv_specialInfestedPickIndex = RandomInt(1, 3);
        gv_specialInfestedAttacks_InfestedTypes[2] = lv_specialInfestedPicks[lv_specialInfestedPickIndex];
    }

    lv_specialInfestedTriggerIter = 1;
    for ( ; ( (autoA2D48F7C_ai >= 0 && lv_specialInfestedTriggerIter <= autoA2D48F7C_ae) || (autoA2D48F7C_ai < 0 && lv_specialInfestedTriggerIter >= autoA2D48F7C_ae) ) ; lv_specialInfestedTriggerIter += autoA2D48F7C_ai ) {
        gv_specialInfestedAttackTriggers[lv_specialInfestedTriggerIter][1] = gf_SpecialInfestedAttackTrigger(lv_specialInfestedTriggerIter, gv_specialInfestedAttacks_InfestedTypes[1]);
        gv_specialInfestedAttackTriggers[lv_specialInfestedTriggerIter][2] = gf_SpecialInfestedAttackTrigger(lv_specialInfestedTriggerIter, gv_specialInfestedAttacks_InfestedTypes[2]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto556C697E_g;
    int auto556C697E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_INFESTED, "ZergBuildSwarmy");
    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_07_SPECIAL_INFESTED, "ZergBuildSwarmy");
    AICampaignStart(gv_pLAYER_05_INFESTED);
    AICampaignStart(gv_pLAYER_07_SPECIAL_INFESTED);
    libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(gv_infestedPlayers, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AMONS_FORCES, libCOMI_gv_vU_AlliedCommanders);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AMONS_FORCES, libCOMI_gv_vU_AlliedCommanders);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_05_INFESTED, libCOMI_gv_vU_AlliedCommanders);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_07_SPECIAL_INFESTED, libCOMI_gv_vU_AlliedCommanders);
    VisRevealArea(gv_pLAYER_05_INFESTED, RegionCircle(UnitGetPosition(UnitFromId(2)), 1.0), 1.0, false);
    auto556C697E_g = gv_enemyPlayers;
    auto556C697E_var = -1;
    while (true) {
        auto556C697E_var = PlayerGroupNextPlayer(auto556C697E_g, auto556C697E_var);
        if (auto556C697E_var < 0) { break; }
        libNtve_gf_SetTacticalAIThink(auto556C697E_var, "Hunterling", "AIHunterlingAI", false);
        libNtve_gf_SetTacticalAIThink(auto556C697E_var, "Choker", "AIChokerAI", false);
        libNtve_gf_SetTacticalAIThink(auto556C697E_var, "Spotter", "AISpotterAI", false);
        libNtve_gf_SetTacticalAIThink(auto556C697E_var, "Stank", "AIStankAI", false);
        libNtve_gf_SetTacticalAIThink(auto556C697E_var, "Raven", "AIRemoveWorkersFromScanGroup", false);
    }
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_05_INFESTED, "Scourge", "InfestedScourgeAIThink", false);
    AINearestTownBullyRebuild(gv_pLAYER_05_INFESTED, true);
    AINearestTownLimitWaveGather(gv_pLAYER_05_INFESTED, true);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_AMONS_FORCES, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMONS_FORCES, "overlordspeed", 1);
    TriggerExecute(gt_SetupNydusSpawnLocation, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Special Infested
//--------------------------------------------------------------------------------------------------
bool gt_PickSpecialInfested_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string[3] lv_unitType;

    // Automatic Variable Declarations
    const int auto3A116F1D_ae = 2;
    int auto3A116F1D_var;
    string auto0DDEC021_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_unitType[init_i] = "";
    }

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(gt_StartGameQ) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/45957CC1"));
        return true;
    }

    lv_unitType[1] = StringCase(StringWord(EventChatMessage(false), 2), false);
    lv_unitType[2] = StringCase(StringWord(EventChatMessage(false), 3), false);
    if (((lv_unitType[1] == "") || (lv_unitType[2] == ""))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BC78E2D7"));
        return true;
    }

    auto3A116F1D_var = 1;
    for ( ; auto3A116F1D_var <= auto3A116F1D_ae; auto3A116F1D_var += 1 ) {
        auto0DDEC021_val = lv_unitType[auto3A116F1D_var];
        if (auto0DDEC021_val == "hunterling") {
            gv_specialInfestedAttacks_InfestedTypes[auto3A116F1D_var] = "Hunterling";
        }
        else if (auto0DDEC021_val == "spotter") {
            gv_specialInfestedAttacks_InfestedTypes[auto3A116F1D_var] = "Spotter";
        }
        else if (auto0DDEC021_val == "choker") {
            gv_specialInfestedAttacks_InfestedTypes[auto3A116F1D_var] = "Choker";
        }
        else if (auto0DDEC021_val == "kaboomer") {
            gv_specialInfestedAttacks_InfestedTypes[auto3A116F1D_var] = "Kaboomer";
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9157EE9B"));
        }
    }
    if ((gv_specialInfestedAttacks_InfestedTypes[1] != null) && (gv_specialInfestedAttacks_InfestedTypes[2] != null)) {
        TextExpressionSetToken("Param/Expression/A45600F5", "A", UnitTypeGetName(gv_specialInfestedAttacks_InfestedTypes[1]));
        TextExpressionSetToken("Param/Expression/A45600F5", "B", UnitTypeGetName(gv_specialInfestedAttacks_InfestedTypes[2]));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A45600F5"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickSpecialInfested_Init () {
    gt_PickSpecialInfested = TriggerCreate("gt_PickSpecialInfested_Func");
    TriggerAddEventChatMessage(gt_PickSpecialInfested, c_playerAny, "-pick", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Boss Type
//--------------------------------------------------------------------------------------------------
bool gt_PickBossType_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_chosenBossType;

    // Automatic Variable Declarations
    string autoD23E3BDB_val;

    // Variable Initialization
    lv_chosenBossType = "";

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(gt_StartGameQ) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3463BA2A"));
        return true;
    }

    lv_chosenBossType = StringCase(StringWord(EventChatMessage(false), 2), false);
    if ((lv_chosenBossType == "")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/52B9BCDD"));
    }

    autoD23E3BDB_val = lv_chosenBossType;
    if (autoD23E3BDB_val == "stank") {
        gv_bossType = ge_PRESET_BossType_Stank;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/23DED067"));
    }
    else if (autoD23E3BDB_val == "nydus") {
        gv_bossType = ge_PRESET_BossType_Nydus;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0A89A6C1"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E71BBF67"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickBossType_Init () {
    gt_PickBossType = TriggerCreate("gt_PickBossType_Func");
    TriggerAddEventChatMessage(gt_PickBossType, c_playerAny, "-bossPick", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto650F3E61_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Meinhoff", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    GameTimeOfDayPause(true);
    TriggerExecute(gt_StartDayNightTimers, true, false);
    TriggerExecute(gt_EffortValue, true, false);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveCreateDestroyInfestation, true, false);
    TriggerExecute(gt_ShowandUpdateObjectiveMarkers, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ShowDayNightTimerWindow, true, false);
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto650F3E61_val = RandomInt(1, 3);
    if (auto650F3E61_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro1DoN", true, -1);
    }
    else if (auto650F3E61_val == 2) {
        libCOMI_gf_SendMissionTransmission("Intro2DoN", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3DoN", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_ProgressFirstInfestedStructuresRemainingQ, true);
    TriggerEnable(gt_TrackInfestedStructureCount, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Day/Night Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_ShowDayNightTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_TimerWindowCreate(gv_globalDayNightTimer, StringExternal("Param/Value/3F5FF9CA"), true, false);
    gv_mainTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_mainTimerWindow, StringToText("<mintotal/>:<sec2/>"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowDayNightTimerWindow_Init () {
    gt_ShowDayNightTimerWindow = TriggerCreate("gt_ShowDayNightTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Day/Night Timers
//--------------------------------------------------------------------------------------------------
bool gt_StartDayNightTimers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_dayORNight = ge_TimeOfDay_Day;
    TimerStart(gv_globalDayNightTimer, gv_day_Duration_First, false, c_timeAI);
    TimerStart(gv_transitionToNight, (TimerGetDuration(gv_globalDayNightTimer) - 40.0), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartDayNightTimers_Init () {
    gt_StartDayNightTimers = TriggerCreate("gt_StartDayNightTimers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Infested Structure Count
//--------------------------------------------------------------------------------------------------
bool gt_TrackInfestedStructureCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestedStructuresRemaining = UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive);
    TriggerExecute(gt_ObjectiveUpdateDestroyInfestation, true, false);
    if ((gv_infestedStructuresRemaining <= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryInfestationPurged, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackInfestedStructureCount_Init () {
    gt_TrackInfestedStructureCount = TriggerCreate("gt_TrackInfestedStructureCount_Func");
    TriggerEnable(gt_TrackInfestedStructureCount, false);
    TriggerAddEventTimePeriodic(gt_TrackInfestedStructureCount, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Areas Cleared
//--------------------------------------------------------------------------------------------------
bool gt_UpdateAreasCleared_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_infestedAreaIter;

    // Automatic Variable Declarations
    const int auto84DD02A4_ae = gv_iNFESTED_REGION_COUNT;
    const int auto84DD02A4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_infestedAreaIter = 1;
    for ( ; ( (auto84DD02A4_ai >= 0 && lv_infestedAreaIter <= auto84DD02A4_ae) || (auto84DD02A4_ai < 0 && lv_infestedAreaIter >= auto84DD02A4_ae) ) ; lv_infestedAreaIter += auto84DD02A4_ai ) {
        if ((gv_infestedAreaCleared[lv_infestedAreaIter] == false) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_03_AMONS_FORCES, gv_infestedRegions[lv_infestedAreaIter], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_04_AMONS_FORCES, gv_infestedRegions[lv_infestedAreaIter], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_INFESTED, gv_infestedRegions[lv_infestedAreaIter], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0)) {
            gv_infestedAreaCleared[lv_infestedAreaIter] = true;
            gv_areasCleared += 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateAreasCleared_Init () {
    gt_UpdateAreasCleared = TriggerCreate("gt_UpdateAreasCleared_Func");
    TriggerAddEventTimePeriodic(gt_UpdateAreasCleared, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effort Value
//--------------------------------------------------------------------------------------------------
bool gt_EffortValue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!(((IntToFixed(UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive)) / IntToFixed(gv_infestedStructuresTotal)) < 0.9))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SetMissionEffort(25.0);
    while (!(((IntToFixed(UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive)) / IntToFixed(gv_infestedStructuresTotal)) < 0.75))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SetMissionEffort(50.0);
    while (!(((IntToFixed(UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive)) / IntToFixed(gv_infestedStructuresTotal)) < 0.5))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SetMissionEffort(75.0);
    while (!(((IntToFixed(UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive)) / IntToFixed(gv_infestedStructuresTotal)) < 0.25))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SetMissionEffort(100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EffortValue_Init () {
    gt_EffortValue = TriggerCreate("gt_EffortValue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Guiding Ping Order
//--------------------------------------------------------------------------------------------------
bool gt_SetupGuidingPingOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_infestedRegionIter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(44);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(45);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(46);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(21);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(13);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(20);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(43);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(1);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(9);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(47);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(22);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(10);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(51);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(39);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(11);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(12);
    lv_infestedRegionIter += 1;
    gv_infestedRegions[lv_infestedRegionIter] = RegionFromId(48);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupGuidingPingOrder_Init () {
    gt_SetupGuidingPingOrder = TriggerCreate("gt_SetupGuidingPingOrder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show and Update Objective Markers
//--------------------------------------------------------------------------------------------------
bool gt_ShowandUpdateObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIter;
    region lv_pingInfestedRegion;
    int lv_activePingsDesired;
    int lv_activePingsTotal;
    int lv_activePingsPrevious;
    unitgroup lv_infestedStructureTargets;

    // Automatic Variable Declarations
    const int autoAF566734_ae = gv_iNFESTED_REGION_COUNT;
    const int autoAF566734_ai = 1;
    const int auto78C38B85_ae = gv_iNFESTED_REGION_COUNT;
    const int auto78C38B85_ai = 1;
    unitgroup auto7DE9646B_g;
    int auto7DE9646B_u;
    unit auto7DE9646B_var;

    // Variable Initialization
    lv_infestedStructureTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_activePingsDesired = 3;
    while ((libCOMI_gf_GameIsOver() == false)) {
        lv_activePingsTotal = 0;
        lv_regionIter = 1;
        for ( ; ( (autoAF566734_ai >= 0 && lv_regionIter <= autoAF566734_ae) || (autoAF566734_ai < 0 && lv_regionIter >= autoAF566734_ae) ) ; lv_regionIter += autoAF566734_ai ) {
            if ((gv_infestedRegionObjectiveMarkers[lv_regionIter] != c_invalidPingId)) {
                lv_activePingsTotal += 1;
            }

        }
        lv_regionIter = 1;
        for ( ; ( (auto78C38B85_ai >= 0 && lv_regionIter <= auto78C38B85_ae) || (auto78C38B85_ai < 0 && lv_regionIter >= auto78C38B85_ae) ) ; lv_regionIter += auto78C38B85_ai ) {
            lv_pingInfestedRegion = gv_infestedRegions[lv_regionIter];
            lv_infestedStructureTargets = UnitGroup(null, gv_pLAYER_05_INFESTED, lv_pingInfestedRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            if ((gv_infestedRegionObjectiveMarkers[lv_regionIter] == c_invalidPingId)) {
                if (((lv_activePingsTotal < lv_activePingsDesired) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_INFESTED, c_unitAllianceEnemy, lv_pingInfestedRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) && (UnitGroupCount(lv_infestedStructureTargets, c_unitCountAlive) >= 4)) {
                    TriggerExecute(gt_DayFindSomeInfestedQ, true, false);
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(lv_pingInfestedRegion), StringExternal("Param/Value/2C189408"));
                    gv_infestedRegionObjectiveMarkers[lv_regionIter] = PingLastCreated();
                    lv_activePingsTotal += 1;
                }

            }

            if ((UnitGroupCount(lv_infestedStructureTargets, c_unitCountAlive) < 4)) {
                libCOMI_gf_DestroyPingCoop(gv_infestedRegionObjectiveMarkers[lv_regionIter]);
                gv_infestedRegionObjectiveMarkers[lv_regionIter] = c_invalidPingId;
                auto7DE9646B_g = lv_infestedStructureTargets;
                auto7DE9646B_u = UnitGroupCount(auto7DE9646B_g, c_unitCountAll);
                for (;; auto7DE9646B_u -= 1) {
                    auto7DE9646B_var = UnitGroupUnitFromEnd(auto7DE9646B_g, auto7DE9646B_u);
                    if (auto7DE9646B_var == null) { break; }
                    if ((libHots_gf_PingStoredForUnit(auto7DE9646B_var, 1) == c_invalidPingId)) {
                        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(auto7DE9646B_var), StringExternal("Param/Value/61F50687"));
                        PingSetUnit(PingLastCreated(), auto7DE9646B_var);
                        libHots_gf_StorePingForUnit(auto7DE9646B_var, 1, PingLastCreated());
                        PingSetScale(PingLastCreated(), 0.6);
                    }

                }
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowandUpdateObjectiveMarkers_Init () {
    gt_ShowandUpdateObjectiveMarkers = TriggerCreate("gt_ShowandUpdateObjectiveMarkers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Small Building Objective Markers
//--------------------------------------------------------------------------------------------------
bool gt_DestroySmallBuildingObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infestedStructuresGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_infestedStructuresPositionofLastKilled = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroySmallBuildingObjectiveMarkers_Init () {
    gt_DestroySmallBuildingObjectiveMarkers = TriggerCreate("gt_DestroySmallBuildingObjectiveMarkers_Func");
    TriggerAddEventUnitDied(gt_DestroySmallBuildingObjectiveMarkers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day - Find Some Infested Q
//--------------------------------------------------------------------------------------------------
bool gt_DayFindSomeInfestedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lineRequestedMissionTime;
    bool lv_linePlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_dayORNight == ge_TimeOfDay_Day))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lineRequestedMissionTime = GameGetMissionTime();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_lineRequestedMissionTime) <= 3.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("StructureFoundDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        lv_linePlayed = true;
    }

    TriggerQueueExit();
    if ((lv_linePlayed == true)) {
        Wait(45.0, c_timeGame);
    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayFindSomeInfestedQ_Init () {
    gt_DayFindSomeInfestedQ = TriggerCreate("gt_DayFindSomeInfestedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find and Destroy Boss Initialization
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindandDestroyBossInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_bonusSpawnLocation;
    int lv_regionNum;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_bonusSpawnLocation = gf_FindBossSpawn();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ACVirophage", 0, gv_pLAYER_07_SPECIAL_INFESTED, lv_bonusSpawnLocation);
    SoundPlayForPlayer(SoundLink("Event_Virophage_Emerge_VxFx", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_bonusBossMonster = UnitLastCreated();
    TimerStart(gv_volatileSpawnCooldown, 6.0, false, c_timeGame);
    gf_AIBonusBoss(gv_bonusBossMonster);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusBossMonster), StringExternal("Param/Value/AA496DD0"));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5D8B3048"));
    gv_bonusBossMonsterPing = PingLastCreated();
    PingSetUnit(gv_bonusBossMonsterPing, gv_bonusBossMonster);
    UnitSetPropertyFixed(gv_bonusBossMonster, c_unitPropLifeMax, 10000.0);
    UnitSetPropertyFixed(gv_bonusBossMonster, c_unitPropLifePercent, 100.0);
    TriggerExecute(gt_ObjectiveBonusCreateQ, true, false);
    TriggerExecute(gt_ObjectiveBonusDestroyInfestationSourceCreate, true, false);
    TriggerEnable(gt_ObjectiveFindandDestroyBossCheckStatus, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindandDestroyBossInitialization_Init () {
    gt_ObjectiveFindandDestroyBossInitialization = TriggerCreate("gt_ObjectiveFindandDestroyBossInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find and Destroy Boss Resurface
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindandDestroyBossResurface_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_bonusMoveLocation;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bonusBossMonster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bonusMoveLocation = gf_FindBossSpawn();
    libNtve_gf_PauseUnit(gv_bonusBossMonster, false);
    UnitSetPosition(gv_bonusBossMonster, lv_bonusMoveLocation, false);
    libNtve_gf_ShowHideUnit(gv_bonusBossMonster, true);
    PingSetVisible(gv_bonusBossMonsterPing, true);
    TimerStart(gv_volatileSpawnCooldown, 6.0, false, c_timeGame);
    gf_AIBonusBoss(gv_bonusBossMonster);
    TriggerEnable(gt_ObjectiveFindandDestroyBossCheckStatus, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindandDestroyBossResurface_Init () {
    gt_ObjectiveFindandDestroyBossResurface = TriggerCreate("gt_ObjectiveFindandDestroyBossResurface_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find and Destroy Boss CheckStatus
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindandDestroyBossCheckStatus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_bonusBossMonster))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_DestroyPingCoop(gv_bonusBossMonsterPing);
    TriggerExecute(gt_ObjectiveBonusSuccessQ, true, false);
    TriggerExecute(gt_ObjectiveBonusDestroyInfestationSourceUpdateSuccess, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindandDestroyBossCheckStatus_Init () {
    gt_ObjectiveFindandDestroyBossCheckStatus = TriggerCreate("gt_ObjectiveFindandDestroyBossCheckStatus_Func");
    TriggerEnable(gt_ObjectiveFindandDestroyBossCheckStatus, false);
    TriggerAddEventUnitDied(gt_ObjectiveFindandDestroyBossCheckStatus, UnitRefFromVariable("gv_bonusBossMonster"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Find and Destroy Boss Hiding Behavior
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFindandDestroyBossHidingBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bonusBossMonster) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFindandDestroyBossHidingBehavior_Init () {
    gt_ObjectiveFindandDestroyBossHidingBehavior = TriggerCreate("gt_ObjectiveFindandDestroyBossHidingBehavior_Func");
    TriggerEnable(gt_ObjectiveFindandDestroyBossHidingBehavior, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveFindandDestroyBossHidingBehavior, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bonus Create Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusLocatedDoN", true, -1);
    libCOMI_gf_SendMissionTransmission("BonusEngagedDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusCreateQ_Init () {
    gt_ObjectiveBonusCreateQ = TriggerCreate("gt_ObjectiveBonusCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bonus Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bonusBossMonster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_bonusBossMonster) == true)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BonusEngagedDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusEngagedQ_Init () {
    gt_ObjectiveBonusEngagedQ = TriggerCreate("gt_ObjectiveBonusEngagedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bonus Success Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusSuccessQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusSuccessQ_Init () {
    gt_ObjectiveBonusSuccessQ = TriggerCreate("gt_ObjectiveBonusSuccessQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day/Night - Timer Cycling
//--------------------------------------------------------------------------------------------------
bool gt_DayNightTimerCycling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_infestedAreaIter;
    fixed lv_infestedLifeIncrease;

    // Automatic Variable Declarations
    const int autoA2FF1E27_ae = gv_iNFESTED_REGION_COUNT;
    const int autoA2FF1E27_ai = 1;
    playergroup autoFBD4D21F_g;
    int autoFBD4D21F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_dayORNight == ge_TimeOfDay_Night)) {
        gv_dayORNight = ge_TimeOfDay_Day;
        gv_dayNumber += 1;
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerDown");
        TriggerExecute(gt_DayNightPlayDayMusic, true, false);
        gf_AIBigTextMessage(SoundLink("UI_ObjectiveComplete", -1), StringExternal("Param/Value/C051CE95"), StringExternal("Param/Value/FB70620B"));
        SoundPlayForPlayer(SoundLink("Event_NightDay_Cue_RoosterCrow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_TransmissionItsDaytimeQ, true, false);
        TimerStart(gv_transitionToNight, (gv_day_Duration - 40.0), false, c_timeAI);
        TimerStart(gv_globalDayNightTimer, gv_day_Duration, false, c_timeAI);
        TimerWindowSetTitle(gv_mainTimerWindow, TextReplaceWord(StringExternal("Param/Value/6B0A5E41"), StringExternal("Param/Value/C3A5EF7D"), IntToText(gv_dayNumber), c_stringReplaceAll, c_stringCase));
        TimerWindowSetColor(gv_mainTimerWindow, c_timerWindowColorTitle, Color(0.00, 100.00, 0.00), 0.0);
        TriggerEnable(gt_DayNightBurnInfestedDuringDay, true);
        TriggerEnable(gt_AINightDefenderReaction, false);
        autoFBD4D21F_g = gv_enemyPlayers;
        autoFBD4D21F_var = -1;
        while (true) {
            autoFBD4D21F_var = PlayerGroupNextPlayer(autoFBD4D21F_g, autoFBD4D21F_var);
            if (autoFBD4D21F_var < 0) { break; }
            AIToggleBulliesInRegion(autoFBD4D21F_var, RegionEntireMap(), false);
        }
    }
    else {
        gv_dayORNight = ge_TimeOfDay_Night;
        gv_nightNumber += 1;
        TriggerExecute(gt_AIWhiteNoiseSpawning, true, false);
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal LightPowerUp");
        TriggerExecute(gt_DayNightPlayNightMusic, true, false);
        TriggerEnable(gt_DayNightBurnInfestedDuringDay, false);
        TriggerEnable(gt_AINightDefenderReaction, true);
        gf_AIBigTextMessage(SoundLink("Event_Night_Cue_WolfHowl", c_soundIndexAny), StringExternal("Param/Value/80E39C4E"), StringExternal("Param/Value/98ABBC38"));
        SoundPlay(SoundLink("Event_Night_Cue_ZombieHorde", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_TransmissionItsNightQ, true, false);
        TimerStart(gv_transitionToDay, (gv_night_Duration - 40.0), false, c_timeAI);
        TimerStart(gv_globalDayNightTimer, gv_night_Duration, false, c_timeAI);
        TimerWindowSetTitle(gv_mainTimerWindow, TextReplaceWord(StringExternal("Param/Value/749F57BE"), StringExternal("Param/Value/7E7BF9AB"), IntToText(gv_nightNumber), c_stringReplaceAll, c_stringCase));
        TimerWindowSetColor(gv_mainTimerWindow, c_timerWindowColorTitle, Color(100.00, 0.00, 0.00), 0.0);
        TriggerExecute(gt_AIUpdateSpawnSettingsClassic, true, false);
        TriggerExecute(gt_AIAttackWavesNightTriggersClassic, true, false);
        lv_infestedAreaIter = 1;
        for ( ; ( (autoA2FF1E27_ai >= 0 && lv_infestedAreaIter <= autoA2FF1E27_ae) || (autoA2FF1E27_ai < 0 && lv_infestedAreaIter >= autoA2FF1E27_ae) ) ; lv_infestedAreaIter += autoA2FF1E27_ai ) {
            if ((gv_infestedAreaCleared[lv_infestedAreaIter] == false)) {
                AIToggleBulliesInRegion(gv_pLAYER_05_INFESTED, gv_infestedRegions[lv_infestedAreaIter], true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightTimerCycling_Init () {
    gt_DayNightTimerCycling = TriggerCreate("gt_DayNightTimerCycling_Func");
    TriggerAddEventTimer(gt_DayNightTimerCycling, gv_globalDayNightTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day/Night - Play Day Music
//--------------------------------------------------------------------------------------------------
bool gt_DayNightPlayDayMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicEventB", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait("THanson02MusicEventB");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Meinhoff", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightPlayDayMusic_Init () {
    gt_DayNightPlayDayMusic = TriggerCreate("gt_DayNightPlayDayMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day/Night - Play Night Music
//--------------------------------------------------------------------------------------------------
bool gt_DayNightPlayNightMusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackWait("THanson02MusicEventA");
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THanson02MusicAlt", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_AiurInfested_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightPlayNightMusic_Init () {
    gt_DayNightPlayNightMusic = TriggerCreate("gt_DayNightPlayNightMusic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day/Night - Transition To Day
//--------------------------------------------------------------------------------------------------
bool gt_DayNightTransitionToDay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_dayORNight == ge_TimeOfDay_Night))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MeinhoffCampaignDay", 40.0);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TransmissionDayNightin30SecondsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightTransitionToDay_Init () {
    gt_DayNightTransitionToDay = TriggerCreate("gt_DayNightTransitionToDay_Func");
    TriggerAddEventTimer(gt_DayNightTransitionToDay, gv_transitionToDay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day/Night - Transition To Night
//--------------------------------------------------------------------------------------------------
bool gt_DayNightTransitionToNight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_dayORNight == ge_TimeOfDay_Day))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("MeinhoffCampaignNight", 40.0);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_TransmissionDayNightin30SecondsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightTransitionToNight_Init () {
    gt_DayNightTransitionToNight = TriggerCreate("gt_DayNightTransitionToNight_Func");
    TriggerAddEventTimer(gt_DayNightTransitionToNight, gv_transitionToNight);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day/Night - Burn Infested During Day
//--------------------------------------------------------------------------------------------------
bool gt_DayNightBurnInfestedDuringDay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_doomedUnits;
    unit lv_markedForDeath;

    // Automatic Variable Declarations
    unitgroup auto19B7E793_g;
    int auto19B7E793_u;
    unit auto19B7E793_var;
    unitgroup auto87EA6112_g;
    int auto87EA6112_u;
    unit auto87EA6112_var;
    unitgroup auto17484C82_g;
    int auto17484C82_u;

    // Variable Initialization
    lv_doomedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_dayORNight == ge_TimeOfDay_Day))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto19B7E793_g = UnitGroup(null, gv_pLAYER_07_SPECIAL_INFESTED, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19B7E793_u = UnitGroupCount(auto19B7E793_g, c_unitCountAll);
    for (;; auto19B7E793_u -= 1) {
        auto19B7E793_var = UnitGroupUnitFromEnd(auto19B7E793_g, auto19B7E793_u);
        if (auto19B7E793_var == null) { break; }
        if ((UnitHasBehavior(auto19B7E793_var, "SolarCombustion") == false) && (libNtve_gf_UnitIsInsideTransport(auto19B7E793_var) == false) && ((UnitGetType(auto19B7E793_var) == "Choker") || (UnitGetType(auto19B7E793_var) == "Hunterling") || (UnitGetType(auto19B7E793_var) == "Kaboomer") || (UnitGetType(auto19B7E793_var) == "Spotter"))) {
            UnitGroupAdd(lv_doomedUnits, auto19B7E793_var);
        }

    }
    auto87EA6112_g = UnitGroup(null, gv_pLAYER_05_INFESTED, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87EA6112_u = UnitGroupCount(auto87EA6112_g, c_unitCountAll);
    for (;; auto87EA6112_u -= 1) {
        auto87EA6112_var = UnitGroupUnitFromEnd(auto87EA6112_g, auto87EA6112_u);
        if (auto87EA6112_var == null) { break; }
        if ((UnitHasBehavior(auto87EA6112_var, "SolarCombustion") == false) && (libNtve_gf_UnitIsInsideTransport(auto87EA6112_var) == false) && ((UnitGetType(auto87EA6112_var) == "InfestedTerranCampaign") || (UnitGetType(auto87EA6112_var) == "InfestedTerranCampaignBurrowed") || (UnitGetType(auto87EA6112_var) == "InfestedCivilian") || (UnitGetType(auto87EA6112_var) == "InfestedCivilianBurrowed") || (UnitGetType(auto87EA6112_var) == "InfestedAbomination") || (UnitGetType(auto87EA6112_var) == "InfestedAbominationBurrowed") || (UnitGetType(auto87EA6112_var) == "InfestedExploder") || (UnitGetType(auto87EA6112_var) == "InfestedExploderBurrowed"))) {
            UnitGroupAdd(lv_doomedUnits, auto87EA6112_var);
        }

    }
    while (true) {
        auto17484C82_g = UnitGroupFilter(null, c_playerAny, lv_doomedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 15);
        auto17484C82_u = UnitGroupCount(auto17484C82_g, c_unitCountAll);
        for (;; auto17484C82_u -= 1) {
            lv_markedForDeath = UnitGroupUnitFromEnd(auto17484C82_g, auto17484C82_u);
            if (lv_markedForDeath == null) { break; }
            UnitBehaviorAdd(lv_markedForDeath, "SolarCombustion", lv_markedForDeath, 1);
            UnitGroupRemove(lv_doomedUnits, lv_markedForDeath);
        }
        if ((libNtve_gf_UnitGroupIsDead(lv_doomedUnits) == true)) {
            return true;
        }

        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightBurnInfestedDuringDay_Init () {
    gt_DayNightBurnInfestedDuringDay = TriggerCreate("gt_DayNightBurnInfestedDuringDay_Func");
    TriggerAddEventTimePeriodic(gt_DayNightBurnInfestedDuringDay, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Day/Night in 30 Seconds Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDayNightin30SecondsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_dayORNight == ge_TimeOfDay_Night)) {
        if ((gv_nightNumber == 1)) {
            libCOMI_gf_SendMissionTransmission("DaySoonFirstDoN", true, -1);
        }
        else {
            libCOMI_gf_SendMissionTransmission("DaySoonRepeatDoN", true, -1);
        }
    }
    else {
        if ((gv_dayNumber == 1)) {
            libCOMI_gf_SendMissionTransmission("NightWarnFirstDoN", true, -1);
        }
        else {
            libCOMI_gf_SendMissionTransmission("NightWarnRepeatDoN", true, -1);
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDayNightin30SecondsQ_Init () {
    gt_TransmissionDayNightin30SecondsQ = TriggerCreate("gt_TransmissionDayNightin30SecondsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - It's Daytime Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionItsDaytimeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto69EA6DF7_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto69EA6DF7_val = gv_dayNumber;
    if (auto69EA6DF7_val == 2) {
        libCOMI_gf_SendMissionTransmission("DayTwoDoN", true, -1);
    }
    else if (auto69EA6DF7_val == 3) {
        libCOMI_gf_SendMissionTransmission("DayThreeDoN", true, -1);
    }
    else if (auto69EA6DF7_val == 4) {
    }
    else {
        libCOMI_gf_SendMissionTransmission("DayThreeDoN", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionItsDaytimeQ_Init () {
    gt_TransmissionItsDaytimeQ = TriggerCreate("gt_TransmissionItsDaytimeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - It's Night Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionItsNightQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 25.0, 5.0);
    Wait(5.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 30.0, 0.4);
    if ((gv_nightNumber == 1)) {
        libCOMI_gf_SendMissionTransmission("NightNowFirstDoN", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("NightNowRepeatDoN", true, -1);
    }
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionItsNightQ_Init () {
    gt_TransmissionItsNightQ = TriggerCreate("gt_TransmissionItsNightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barricade - NE Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BarricadeNEDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_dayORNight == ge_TimeOfDay_Night))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_HOSTILEROCKS))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_barricadeNE, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != gv_pLAYER_02_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RevealBarricadeDestruction(RegionFromId(3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarricadeNEDestroyedQ_Init () {
    gt_BarricadeNEDestroyedQ = TriggerCreate("gt_BarricadeNEDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_BarricadeNEDestroyedQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barricade - NW Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BarricadeNWDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_dayORNight == ge_TimeOfDay_Night))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_HOSTILEROCKS))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_barricadeNW, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != gv_pLAYER_02_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RevealBarricadeDestruction(RegionFromId(30));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarricadeNWDestroyedQ_Init () {
    gt_BarricadeNWDestroyedQ = TriggerCreate("gt_BarricadeNWDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_BarricadeNWDestroyedQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barricade - SE Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BarricadeSEDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_dayORNight == ge_TimeOfDay_Night))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_HOSTILEROCKS))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_barricadeSE, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != gv_pLAYER_02_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RevealBarricadeDestruction(RegionFromId(50));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarricadeSEDestroyedQ_Init () {
    gt_BarricadeSEDestroyedQ = TriggerCreate("gt_BarricadeSEDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_BarricadeSEDestroyedQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barricade - NE Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_BarricadeNEAttackedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;
    unit lv_barricade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barricade = UnitFromId(1191390584);
    if ((UnitIsValid(lv_barricade) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((UnitGetPropertyFixed(lv_barricade, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_barricade, c_unitPropLife, c_unitPropNormal))) {
        TriggerEnable(TriggerGetCurrent(), false);
        lv_transmissionRequestTime = GameGetMissionTime();
        TriggerQueueEnter();
        if (((GameGetMissionTime() - lv_transmissionRequestTime) > 5.0)) {
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

        if ((UnitIsValid(lv_barricade) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_barricade), 10.0, Color(100.00, 0.00, 0.00));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BarricadeAlertDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarricadeNEAttackedQ_Init () {
    gt_BarricadeNEAttackedQ = TriggerCreate("gt_BarricadeNEAttackedQ_Func");
    TriggerAddEventTimePeriodic(gt_BarricadeNEAttackedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barricade - NW Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_BarricadeNWAttackedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;
    unit lv_barricade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barricade = UnitFromId(1303166484);
    if ((UnitIsValid(lv_barricade) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((UnitGetPropertyFixed(lv_barricade, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_barricade, c_unitPropLife, c_unitPropNormal))) {
        TriggerEnable(TriggerGetCurrent(), false);
        lv_transmissionRequestTime = GameGetMissionTime();
        TriggerQueueEnter();
        if (((GameGetMissionTime() - lv_transmissionRequestTime) > 5.0)) {
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

        if ((UnitIsValid(lv_barricade) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_barricade), 10.0, Color(100.00, 0.00, 0.00));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BarricadeAlertDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarricadeNWAttackedQ_Init () {
    gt_BarricadeNWAttackedQ = TriggerCreate("gt_BarricadeNWAttackedQ_Func");
    TriggerAddEventTimePeriodic(gt_BarricadeNWAttackedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barricade - SE Attacked Q
//--------------------------------------------------------------------------------------------------
bool gt_BarricadeSEAttackedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;
    unit lv_barricade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barricade = UnitFromId(1554559931);
    if ((UnitIsValid(lv_barricade) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((UnitGetPropertyFixed(lv_barricade, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(lv_barricade, c_unitPropLife, c_unitPropNormal))) {
        TriggerEnable(TriggerGetCurrent(), false);
        lv_transmissionRequestTime = GameGetMissionTime();
        TriggerQueueEnter();
        if (((GameGetMissionTime() - lv_transmissionRequestTime) > 5.0)) {
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

        if ((UnitIsValid(lv_barricade) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }

        MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_barricade), 10.0, Color(100.00, 0.00, 0.00));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BarricadeAlertDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarricadeSEAttackedQ_Init () {
    gt_BarricadeSEAttackedQ = TriggerCreate("gt_BarricadeSEAttackedQ_Func");
    TriggerAddEventTimePeriodic(gt_BarricadeSEAttackedQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress - First Infested Structures Remaining Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressFirstInfestedStructuresRemainingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infestedStructuresGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive) < FixedToInt((gv_infestedStructuresTotal * 0.9)))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ProgressFirstDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        TriggerEnable(gt_ProgressMiddleInfestedStructuresRemainingQ, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressFirstInfestedStructuresRemainingQ_Init () {
    gt_ProgressFirstInfestedStructuresRemainingQ = TriggerCreate("gt_ProgressFirstInfestedStructuresRemainingQ_Func");
    TriggerEnable(gt_ProgressFirstInfestedStructuresRemainingQ, false);
    TriggerAddEventUnitDied(gt_ProgressFirstInfestedStructuresRemainingQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress - Middle Infested Structures Remaining Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressMiddleInfestedStructuresRemainingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infestedStructuresGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive) < FixedToInt((gv_infestedStructuresTotal * 0.5)))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ProgressSecondDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        TriggerEnable(gt_ProgressFinalInfestedStructuresRemainingQ, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressMiddleInfestedStructuresRemainingQ_Init () {
    gt_ProgressMiddleInfestedStructuresRemainingQ = TriggerCreate("gt_ProgressMiddleInfestedStructuresRemainingQ_Func");
    TriggerEnable(gt_ProgressMiddleInfestedStructuresRemainingQ, false);
    TriggerAddEventUnitDied(gt_ProgressMiddleInfestedStructuresRemainingQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress - Final Infested Structures Remaining Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgressFinalInfestedStructuresRemainingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_INFESTED))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infestedStructuresGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive) < FixedToInt((gv_infestedStructuresTotal * 0.25)))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ProgressFinalDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgressFinalInfestedStructuresRemainingQ_Init () {
    gt_ProgressFinalInfestedStructuresRemainingQ = TriggerCreate("gt_ProgressFinalInfestedStructuresRemainingQ_Func");
    TriggerEnable(gt_ProgressFinalInfestedStructuresRemainingQ, false);
    TriggerAddEventUnitDied(gt_ProgressFinalInfestedStructuresRemainingQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Broodlings
//--------------------------------------------------------------------------------------------------
bool gt_SpawnBroodlings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7B5A4DB7_g;
    int auto7B5A4DB7_u;
    unit auto7B5A4DB7_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infestedStructuresGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "InfestableBiodome")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 6, 0, 0), "Broodling", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(EventUnit()));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), "Broodling", 0, gv_pLAYER_05_INFESTED, UnitGetPosition(EventUnit()));
    }
    auto7B5A4DB7_g = UnitLastCreatedGroup();
    auto7B5A4DB7_u = UnitGroupCount(auto7B5A4DB7_g, c_unitCountAll);
    for (;; auto7B5A4DB7_u -= 1) {
        auto7B5A4DB7_var = UnitGroupUnitFromEnd(auto7B5A4DB7_g, auto7B5A4DB7_u);
        if (auto7B5A4DB7_var == null) { break; }
        UnitBehaviorAdd(auto7B5A4DB7_var, "BroodlingFate", auto7B5A4DB7_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnBroodlings_Init () {
    gt_SpawnBroodlings = TriggerCreate("gt_SpawnBroodlings_Func");
    TriggerAddEventUnitDied(gt_SpawnBroodlings, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Night Defender Reaction
//--------------------------------------------------------------------------------------------------
bool gt_AINightDefenderReaction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoA6C4292B_ae;
    const int autoA6C4292B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA6C4292B_ae = gv_infestedStructuresTotal;
    lv_index = 1;
    for ( ; ( (autoA6C4292B_ai >= 0 && lv_index <= autoA6C4292B_ae) || (autoA6C4292B_ai < 0 && lv_index >= autoA6C4292B_ae) ) ; lv_index += autoA6C4292B_ai ) {
        if ((UnitIsValid(gv_infestedStructuresUnit[lv_index]) == false)) {
            continue;
        }

        if ((UnitGetCustomValue(gv_infestedStructuresUnit[lv_index], gv_c_NightDefenderReactionTimerIndex) >= 0.0)) {
            UnitSetCustomValue(gv_infestedStructuresUnit[lv_index], gv_c_NightDefenderReactionTimerIndex, (UnitGetCustomValue(gv_infestedStructuresUnit[lv_index], gv_c_NightDefenderReactionTimerIndex) - 1.0));
        }
        else {
            if ((gv_dayORNight == ge_TimeOfDay_Night) && (TimerGetElapsed(gv_globalDayNightTimer) > 10.0) && (UnitIsAlive(gv_infestedStructuresUnit[lv_index]) == true) && (UnitGetPropertyFixed(gv_infestedStructuresUnit[lv_index], c_unitPropLife, c_unitPropCurrent) < gv_infestedStructuresStructureHealth[lv_index]) && (UnitGetPropertyFixed(gv_infestedStructuresUnit[lv_index], c_unitPropLife, c_unitPropCurrent) < gv_nightDefenderSpawnLifeThreshold)) {
                gf_AINightDefenderSpawn(gv_infestedStructuresUnit[lv_index]);
                TriggerExecute(gt_AINightDefenderReactionQ, true, false);
            }

        }
        gv_infestedStructuresStructureHealth[lv_index] = UnitGetPropertyFixed(gv_infestedStructuresUnit[lv_index], c_unitPropLife, c_unitPropCurrent);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINightDefenderReaction_Init () {
    gt_AINightDefenderReaction = TriggerCreate("gt_AINightDefenderReaction_Func");
    TriggerEnable(gt_AINightDefenderReaction, false);
    TriggerAddEventTimePeriodic(gt_AINightDefenderReaction, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Night Defender Reaction Q
//--------------------------------------------------------------------------------------------------
bool gt_AINightDefenderReactionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_transmissionRequestTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_transmissionRequestTime) <= 5.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("NightAttackDoN", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINightDefenderReactionQ_Init () {
    gt_AINightDefenderReactionQ = TriggerCreate("gt_AINightDefenderReactionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveWaypoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_AMONS_FORCES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_AMONS_FORCES, "overlordtransport", 1);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    if ((RandomInt(1, 2) == 1)) {
        lv_attackWaveSpawnLocation = PointFromId(1509584848);
        lv_attackWaveWaypoint = PointFromId(1261396762);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(615544420);
        lv_attackWaveWaypoint = PointFromId(1739916338);
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_04_AMONS_FORCES, gv_pLAYER_03_AMONS_FORCES, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_AMONS_FORCES));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWaypoint, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveWaypoint;

    // Automatic Variable Declarations
    int autoBC5B5C10_val;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    autoBC5B5C10_val = RandomInt(1, 3);
    if (autoBC5B5C10_val == 1) {
        lv_attackWaveSpawnLocation = PointFromId(1441465925);
        lv_attackWaveWaypoint = PointFromId(980042978);
    }
    else if (autoBC5B5C10_val == 2) {
        lv_attackWaveSpawnLocation = PointFromId(615544420);
        lv_attackWaveWaypoint = PointFromId(245927287);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(1761784831);
        lv_attackWaveWaypoint = PointFromId(245927287);
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_04_AMONS_FORCES, gv_pLAYER_03_AMONS_FORCES, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_AMONS_FORCES));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWaypoint, true);
    libCOMI_gf_AddAttackForceWaypoint(AIGetBestTarget(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_HumanPlayers(), lv_attackWaveWaypoint, 64), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveWaypoint;
    bool lv_dropAttackTargetFound;

    // Automatic Variable Declarations
    int auto6745EDD9_val;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EnemyAttackingQ, true, false);
    auto6745EDD9_val = RandomInt(1, 4);
    if (auto6745EDD9_val == 1) {
        lv_attackWaveSpawnLocation = PointFromId(1441465925);
        lv_attackWaveWaypoint = PointFromId(980042978);
    }
    else if (auto6745EDD9_val == 2) {
        lv_attackWaveSpawnLocation = PointFromId(615544420);
        lv_attackWaveWaypoint = PointFromId(1739916338);
    }
    else if (auto6745EDD9_val == 3) {
        lv_attackWaveSpawnLocation = PointFromId(1761784831);
        lv_attackWaveWaypoint = PointFromId(245927287);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(1509584848);
        lv_attackWaveWaypoint = PointFromId(1261396762);
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_04_AMONS_FORCES, gv_pLAYER_03_AMONS_FORCES, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_AMONS_FORCES));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWaypoint, true);
    libCOMI_gf_AddAttackForceWaypoint(AIGetBestTarget(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_HumanPlayers(), lv_attackWaveWaypoint, 16), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveWaypoint;

    // Automatic Variable Declarations
    int auto2AAE60E2_val;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EnemyAttackingQ, true, false);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AMONS_FORCES, libCOMI_gf_GetAlliedCommandersPlayers());
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    auto2AAE60E2_val = RandomInt(1, 4);
    if (auto2AAE60E2_val == 1) {
        lv_attackWaveSpawnLocation = PointFromId(1441465925);
        lv_attackWaveWaypoint = PointFromId(980042978);
    }
    else if (auto2AAE60E2_val == 2) {
        lv_attackWaveSpawnLocation = PointFromId(615544420);
        lv_attackWaveWaypoint = PointFromId(1739916338);
    }
    else if (auto2AAE60E2_val == 3) {
        lv_attackWaveSpawnLocation = PointFromId(1761784831);
        lv_attackWaveWaypoint = PointFromId(245927287);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(1509584848);
        lv_attackWaveWaypoint = PointFromId(1261396762);
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_04_AMONS_FORCES, gv_pLAYER_03_AMONS_FORCES, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_AMONS_FORCES));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWaypoint, true);
    libCOMI_gf_AddAttackForceWaypoint(AIGetBestTarget(gv_pLAYER_03_AMONS_FORCES, libCOMI_gf_HumanPlayers(), lv_attackWaveWaypoint, 64), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_transmissionRequestTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_transmissionRequestTime) > 5.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AmonAttackDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Update Spawn Settings - Classic
//--------------------------------------------------------------------------------------------------
bool gt_AIUpdateSpawnSettingsClassic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto5AD20C4E_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5AD20C4E_val = gv_nightNumber;
    if (auto5AD20C4E_val == 1) {
        gv_infestedAberrationQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 0, 0, 0);
        gv_infestedVolatileQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 0, 0, 0);
        gv_infestedMarineQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 0, 0, 0);
        gv_infestedTerranQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 10, 10, 20, 30, 0, 0);
        gv_whiteNoiseSpawnCooldown = 30;
    }
    else if (auto5AD20C4E_val == 2) {
        gv_infestedAberrationQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 3, 0, 0);
        gv_infestedVolatileQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 0, 0, 0);
        gv_infestedMarineQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 20, 0, 0);
        gv_infestedTerranQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 10, 0, 0);
        gv_whiteNoiseSpawnCooldown = 30;
    }
    else if (auto5AD20C4E_val == 3) {
        gv_infestedAberrationQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 3, 6, 0, 0);
        gv_infestedVolatileQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 5, 0, 0);
        gv_infestedMarineQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 15, 0, 0);
        gv_infestedTerranQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 10, 0, 0);
        gv_whiteNoiseSpawnCooldown = 30;
    }
    else if (auto5AD20C4E_val == 4) {
        gv_infestedAberrationQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 6, 12, 0, 0);
        gv_infestedVolatileQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 5, 10, 0, 0);
        gv_infestedMarineQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 20, 0, 0);
        gv_infestedTerranQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 10, 0, 0);
        gv_whiteNoiseSpawnCooldown = 30;
    }
    else if (auto5AD20C4E_val == 5) {
        gv_infestedAberrationQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 12, 18, 0, 0);
        gv_infestedVolatileQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 10, 20, 0, 0);
        gv_infestedMarineQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 20, 20, 0, 0);
        gv_infestedTerranQty = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 10, 0, 0);
        gv_whiteNoiseSpawnCooldown = 30;
    }
    else {
        gv_whiteNoiseSpawnCooldown = 20;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpdateSpawnSettingsClassic_Init () {
    gt_AIUpdateSpawnSettingsClassic = TriggerCreate("gt_AIUpdateSpawnSettingsClassic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Waves - Night Triggers - Classic
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWavesNightTriggersClassic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto35A8E432_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_karmaSE_P1 = 0;
    gv_karmaNW_P2 = 0;
    gv_karmaNE_Barricade = 0;
    gv_karmaSW_Barricade = 0;
    auto35A8E432_val = gv_nightNumber;
    if (auto35A8E432_val == 1) {
        gf_AttackDirectionWarningPing(PointFromId(44326308));
        TriggerExecute(gt_AINormalInfestedAttacksNight1InfestedCivilians, true, false);
    }
    else if (auto35A8E432_val == 2) {
        gf_AttackDirectionWarningPing(PointFromId(44326308));
        gf_AttackDirectionWarningPing(PointFromId(936409753));
        TriggerExecute(gt_AINormalInfestedAttacksNight2NEBarricade, true, false);
    }
    else if (auto35A8E432_val == 3) {
        gf_AttackDirectionWarningPing(PointFromId(44326308));
        gf_AttackDirectionWarningPing(PointFromId(936409753));
        gf_AttackDirectionWarningPing(PointFromId(344153753));
        gf_AttackDirectionWarningPing(PointFromId(525667817));
        TriggerExecute(gt_AINormalInfestedAttacksNight3SEandNWBarricades, true, false);
        Wait(15.0, c_timeGame);
        TriggerExecute(gt_ObjectiveFindandDestroyBossInitialization, true, false);
    }
    else if (auto35A8E432_val == 4) {
        gf_AttackDirectionWarningPing(PointFromId(44326308));
        gf_AttackDirectionWarningPing(PointFromId(936409753));
        gf_AttackDirectionWarningPing(PointFromId(344153753));
        gf_AttackDirectionWarningPing(PointFromId(525667817));
        TriggerExecute(gt_AINormalInfestedAttacksNight4HeavyAttacks, true, false);
        Wait(20.0, c_timeGame);
        TriggerExecute(gt_ObjectiveFindandDestroyBossResurface, true, false);
    }
    else if (auto35A8E432_val == 5) {
        gf_AttackDirectionWarningPing(PointFromId(44326308));
        gf_AttackDirectionWarningPing(PointFromId(936409753));
        gf_AttackDirectionWarningPing(PointFromId(344153753));
        gf_AttackDirectionWarningPing(PointFromId(525667817));
        TriggerExecute(gt_AINormalInfestedAttacksNight5VeryHeavyAttacks, true, false);
        Wait(20.0, c_timeGame);
        TriggerExecute(gt_ObjectiveFindandDestroyBossResurface, true, false);
    }
    else {
        TriggerExecute(gt_AINormalInfestedAttacksKillNightRepeat, true, false);
        TriggerExecute(gt_ObjectiveFindandDestroyBossResurface, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWavesNightTriggersClassic_Init () {
    gt_AIAttackWavesNightTriggersClassic = TriggerCreate("gt_AIAttackWavesNightTriggersClassic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Normal Infested Attacks - Night 1 - Infested Civilians
//--------------------------------------------------------------------------------------------------
bool gt_AINormalInfestedAttacksNight1InfestedCivilians_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_karmaSW_Barricade = -10;
    if ((gf_DifficultyValueBoolean(false, false, false, true) == true)) {
        TriggerExecute(gt_AISpecialInfestedAttacksChokerNight1, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksHunterlingNight1, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksKaboomerNight1, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksSpotterNight1, true, false);
        TriggerExecute(gt_ScourgeKillTeams, true, false);
    }
    else {
        TriggerExecute(gv_specialInfestedAttackTriggers[1][1], true, false);
    }
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 5, 10, 0, 0), 0, 0);
    Wait(40.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 15, 20, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 8, 12, 0, 0), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINormalInfestedAttacksNight1InfestedCivilians_Init () {
    gt_AINormalInfestedAttacksNight1InfestedCivilians = TriggerCreate("gt_AINormalInfestedAttacksNight1InfestedCivilians_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Normal Infested Attacks - Night 2 - NE Barricade
//--------------------------------------------------------------------------------------------------
bool gt_AINormalInfestedAttacksNight2NEBarricade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_enemyPlayers;

    // Automatic Variable Declarations
    playergroup autoB7709A16_g;
    int autoB7709A16_var;

    // Variable Initialization
    lv_enemyPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoB7709A16_g = gv_enemyPlayers;
    autoB7709A16_var = -1;
    while (true) {
        autoB7709A16_var = PlayerGroupNextPlayer(autoB7709A16_g, autoB7709A16_var);
        if (autoB7709A16_var < 0) { break; }
        libNtve_gf_SetAlliance(autoB7709A16_var, gv_pLAYER_08_HOSTILEROCKS, libNtve_ge_AllianceSetting_Enemy);
    }
    gf_TargetBarricadeforDestruction(RegionFromId(3), libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 120.0, 120.0, 90.0, 90.0, 0.0, 0.0));
    gv_karmaNE_Barricade = -10;
    if ((gf_DifficultyValueBoolean(false, false, false, true) == true)) {
        TriggerExecute(gt_ScourgeKillTeams, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksChokerNight2, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksHunterlingNight2, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksKaboomerNight2, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksSpotterNight2, true, false);
    }
    else {
        TriggerExecute(gv_specialInfestedAttackTriggers[2][2], true, false);
    }
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 18, 24, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 12, 15, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthEast, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 9, 12, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 6, 8, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 3, 0, 0));
    Wait(40.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthEast, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 19, 19, 30, 30, 0, 0), 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 3, 0, 0));
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 30, 30, 45, 53, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 11, 15, 0, 0), 0);
    Wait(20.0, c_timeAI);
    while (!((TimerGetRemaining(gv_globalDayNightTimer) <= 60.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_AttackWave01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINormalInfestedAttacksNight2NEBarricade_Init () {
    gt_AINormalInfestedAttacksNight2NEBarricade = TriggerCreate("gt_AINormalInfestedAttacksNight2NEBarricade_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Normal Infested Attacks - Night 3 - SE and NW Barricades
//--------------------------------------------------------------------------------------------------
bool gt_AINormalInfestedAttacksNight3SEandNWBarricades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_barricadeDestructionSE;
    fixed lv_barricadeDestructionSW;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0) == 1)) {
        gv_specialInfestedAttacks_Night3_Boss = true;
    }
    else {
        gv_specialInfestedAttacks_Night3_Boss = false;
    }
    if ((RandomInt(0, 1) == 1)) {
        gv_specialInfestedAttacks_Night3_PrimarySI_First = true;
    }
    else {
        gv_specialInfestedAttacks_Night3_PrimarySI_First = false;
    }
    if ((RandomInt(0, 1) == 1)) {
        lv_barricadeDestructionSE = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 90.0, 90.0, 60.0, 60.0, 0.0, 0.0);
        lv_barricadeDestructionSW = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 60.0, 60.0, 45.0, 45.0, 0.0, 0.0);
    }
    else {
        lv_barricadeDestructionSE = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 60.0, 60.0, 45.0, 45.0, 0.0, 0.0);
        lv_barricadeDestructionSW = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 90.0, 90.0, 60.0, 60.0, 0.0, 0.0);
    }
    gf_TargetBarricadeforDestruction(RegionFromId(50), lv_barricadeDestructionSE);
    gf_TargetBarricadeforDestruction(RegionFromId(30), lv_barricadeDestructionSW);
    if ((gf_DifficultyValueBoolean(false, false, false, true) == true)) {
        TriggerExecute(gt_ScourgeKillTeams, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksChokerNight3, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksHunterlingNight3, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksKaboomerNight3, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksSpotterNight3, true, false);
    }
    else {
        TriggerExecute(gv_specialInfestedAttackTriggers[3][1], true, false);
        TriggerExecute(gv_specialInfestedAttackTriggers[3][2], true, false);
    }
    TriggerExecute(gt_AISpecialInfestedAttacksBossNight3, true, false);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 11, 11, 19, 26, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 12, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0));
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 11, 11, 19, 26, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 12, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0));
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 10, 15, 0, 0), 0, 0);
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 26, 34, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 6, 9, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 26, 34, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 6, 9, 0, 0), 0);
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 11, 11, 19, 23, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 11, 15, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 4, 0, 0));
    Wait(30.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 15, 19, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 4, 6, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 0, 0));
    while (!((TimerGetRemaining(gv_globalDayNightTimer) <= 60.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_AttackWave02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINormalInfestedAttacksNight3SEandNWBarricades_Init () {
    gt_AINormalInfestedAttacksNight3SEandNWBarricades = TriggerCreate("gt_AINormalInfestedAttacksNight3SEandNWBarricades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Normal Infested Attacks - Night 4 - Heavy Attacks
//--------------------------------------------------------------------------------------------------
bool gt_AINormalInfestedAttacksNight4HeavyAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shuffleIndex;
    int lv_shuffleStorage;
    int[5] lv_attackDirections;

    // Automatic Variable Declarations
    const int auto49DD56FB_n = 3;
    int auto49DD56FB_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackDirections[1] = ge_AttackDirection_NorthEast;
    lv_attackDirections[2] = ge_AttackDirection_NorthWestP2;
    lv_attackDirections[3] = ge_AttackDirection_SouthEastP1;
    lv_attackDirections[4] = ge_AttackDirection_SouthWest;
    for (auto49DD56FB_i = 1; auto49DD56FB_i <= auto49DD56FB_n; auto49DD56FB_i += 1) {
        lv_shuffleIndex = RandomInt(2, 4);
        lv_shuffleStorage = lv_attackDirections[1];
        lv_attackDirections[1] = lv_attackDirections[lv_shuffleIndex];
        lv_attackDirections[lv_shuffleIndex] = lv_shuffleStorage;
    }
    if ((gf_DifficultyValueBoolean(false, false, false, true) == true)) {
        TriggerExecute(gt_ScourgeKillTeams, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksChokerNight4, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksHunterlingNight4, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksKaboomerNight4, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksSpotterNight4, true, false);
    }
    else {
        TriggerExecute(gv_specialInfestedAttackTriggers[4][1], true, false);
        TriggerExecute(gv_specialInfestedAttackTriggers[4][2], true, false);
    }
    TriggerExecute(gt_AISpecialInfestedAttacksBossNight4, true, false);
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(lv_attackDirections[1], 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 19, 19, 23, 34, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 8, 11, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 3, 0, 0));
    Wait(30.0, c_timeAI);
    gf_AIAttackWaveFromDirection(lv_attackDirections[2], 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 23, 23, 26, 38, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 8, 11, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 5, 0, 0));
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(lv_attackDirections[3], 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 26, 26, 30, 38, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 8, 11, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 3, 6, 0, 0));
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(lv_attackDirections[4], 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 19, 19, 23, 34, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 8, 11, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 3, 6, 0, 0));
    Wait(10.0, c_timeAI);
    while (!((TimerGetRemaining(gv_globalDayNightTimer) <= 60.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_AttackWave03, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINormalInfestedAttacksNight4HeavyAttacks_Init () {
    gt_AINormalInfestedAttacksNight4HeavyAttacks = TriggerCreate("gt_AINormalInfestedAttacksNight4HeavyAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Normal Infested Attacks - Night 5 - Very Heavy Attacks
//--------------------------------------------------------------------------------------------------
bool gt_AINormalInfestedAttacksNight5VeryHeavyAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_DifficultyValueBoolean(false, false, false, true) == true)) {
        TriggerExecute(gt_ScourgeKillTeams, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksChokerNight5, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksHunterlingNight5, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksKaboomerNight5, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksSpotterNight5, true, false);
    }
    else {
        TriggerExecute(gv_specialInfestedAttackTriggers[5][1], true, false);
        TriggerExecute(gv_specialInfestedAttackTriggers[5][2], true, false);
    }
    TriggerExecute(gt_AISpecialInfestedAttacksBossNight5, true, false);
    Wait(10.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 9, 18, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 9, 11, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 19, 19, 30, 41, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 8, 10, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 19, 19, 30, 41, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), 0);
    Wait(30.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 11, 11, 19, 26, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 5, 6, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthEast, 140, 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 9, 11, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 11, 11, 19, 23, 0, 0), 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0));
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 11, 11, 19, 23, 0, 0), 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0));
    Wait(30.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 23, 34, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 0, 0, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 23, 34, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 0, 0, 0, 0), 0);
    Wait(10.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 30, 41, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 9, 14, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 0, 0));
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 11, 11, 19, 26, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 5, 6, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthEast, 140, 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 9, 11, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 0, 0));
    while (!((TimerGetRemaining(gv_globalDayNightTimer) <= 60.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_AttackWave05, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINormalInfestedAttacksNight5VeryHeavyAttacks_Init () {
    gt_AINormalInfestedAttacksNight5VeryHeavyAttacks = TriggerCreate("gt_AINormalInfestedAttacksNight5VeryHeavyAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Normal Infested Attacks - Kill Night Repeat
//--------------------------------------------------------------------------------------------------
bool gt_AINormalInfestedAttacksKillNightRepeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_DifficultyValueBoolean(false, false, false, true) == true)) {
        TriggerExecute(gt_ScourgeKillTeams, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksChokerNight6, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksHunterlingNight6, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksKaboomerNight6, true, false);
        TriggerExecute(gt_AISpecialInfestedAttacksSpotterNight6, true, false);
    }
    else {
        TriggerExecute(gv_specialInfestedAttackTriggers[6][1], true, false);
        TriggerExecute(gv_specialInfestedAttackTriggers[6][2], true, false);
    }
    TriggerExecute(gt_AISpecialInfestedAttacksBossNight6, true, false);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 20, 30, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 7, 12, 15, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 25, 25, 50, 60, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 8, 8, 10, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 25, 25, 50, 60, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 8, 8, 10, 0, 0), 0);
    Wait(30.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 25, 35, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 6, 8, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthEast, 140, 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 12, 12, 12, 18, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 25, 30, 0, 0), 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0));
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 25, 30, 0, 0), 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0));
    Wait(30.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthEastP1, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 30, 30, 30, 45, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 0, 0, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthWestP2, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 30, 30, 30, 45, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 0, 0, 0, 0), 0);
    Wait(10.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 20, 20, 40, 55, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 12, 18, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 0, 0));
    Wait(20.0, c_timeAI);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_SouthWest, 140, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 15, 15, 25, 35, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), 0);
    gf_AIAttackWaveFromDirection(ge_AttackDirection_NorthEast, 140, 0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 12, 12, 12, 14, 0, 0), libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 0, 0));
    while (!((TimerGetRemaining(gv_globalDayNightTimer) <= 45.0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_AttackWave05, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINormalInfestedAttacksKillNightRepeat_Init () {
    gt_AINormalInfestedAttacksKillNightRepeat = TriggerCreate("gt_AINormalInfestedAttacksKillNightRepeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Scourge Victims
//--------------------------------------------------------------------------------------------------
bool gt_TrackScourgeVictims_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8A153643_g;
    int auto8A153643_u;
    unit auto8A153643_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_scourgeTeamVictims = UnitGroupAlliance(gv_pLAYER_05_INFESTED, c_unitAllianceEnemy, null, UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(gv_scourgeTeamVictims, c_unitCountAlive) == 0)) {
        gv_scourgeTeamVictims = UnitGroupAlliance(gv_pLAYER_05_INFESTED, c_unitAllianceEnemy, null, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8A153643_g = gv_scourgeTeamVictims;
        auto8A153643_u = UnitGroupCount(auto8A153643_g, c_unitCountAll);
        for (;; auto8A153643_u -= 1) {
            auto8A153643_var = UnitGroupUnitFromEnd(auto8A153643_g, auto8A153643_u);
            if (auto8A153643_var == null) { break; }
            if ((UnitWeaponCount(auto8A153643_var) <= 0)) {
                UnitGroupRemove(gv_scourgeTeamVictims, auto8A153643_var);
            }

        }
    }

    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackScourgeVictims_Init () {
    gt_TrackScourgeVictims = TriggerCreate("gt_TrackScourgeVictims_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scourge Kill Teams
//--------------------------------------------------------------------------------------------------
bool gt_ScourgeKillTeams_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnArea;
    fixed lv_airUnitsVitalityTotal;
    int lv_scourgeCount;
    int lv_scourgeCountPerWave;
    fixed lv_scourgeDamage;

    // Automatic Variable Declarations
    int auto76D244E0_val;
    unitgroup auto7EC937FC_g;
    int auto7EC937FC_u;
    unit auto7EC937FC_var;
    int autoE5BA8F68_n;
    int autoE5BA8F68_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TrackScourgeVictims, true, false);
    auto76D244E0_val = RandomInt(1, 4);
    if (auto76D244E0_val == 1) {
        lv_spawnLocation = PointFromId(615544420);
    }
    else if (auto76D244E0_val == 2) {
        lv_spawnLocation = PointFromId(1441465925);
    }
    else if (auto76D244E0_val == 3) {
        lv_spawnLocation = PointFromId(1761784831);
    }
    else {
        lv_spawnLocation = PointFromId(1509584848);
    }
    auto7EC937FC_g = gv_scourgeTeamVictims;
    auto7EC937FC_u = UnitGroupCount(auto7EC937FC_g, c_unitCountAll);
    for (;; auto7EC937FC_u -= 1) {
        auto7EC937FC_var = UnitGroupUnitFromEnd(auto7EC937FC_g, auto7EC937FC_u);
        if (auto7EC937FC_var == null) { break; }
        lv_airUnitsVitalityTotal += UnitTypeGetProperty(UnitGetType(auto7EC937FC_var), c_unitPropVitality);
    }
    lv_airUnitsVitalityTotal *= libCOMI_gf_MinimumDifficultyValueCoopReal(0.1, 0.1, 0.3, 0.6, 0.0, 0.0);
    lv_spawnArea = RegionCircle(lv_spawnLocation, 1.0);
    lv_scourgeDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "SuicideDamage", "Amount", gv_pLAYER_05_INFESTED);
    lv_scourgeCount = TruncI((lv_airUnitsVitalityTotal / 110.0));
    lv_scourgeCount = (lv_scourgeCount - UnitGroupCount(gv_scourgeTeamVictims2, c_unitCountAlive));
    if ((lv_scourgeCount <= 0)) {
        return true;
    }

    lv_scourgeCountPerWave = TruncI((lv_scourgeCount / 5.0));
    autoE5BA8F68_n = MinI(10, lv_scourgeCountPerWave);
    for (autoE5BA8F68_i = 1; autoE5BA8F68_i <= autoE5BA8F68_n; autoE5BA8F68_i += 1) {
        UnitCreate(5, "Scourge", 0, gv_pLAYER_05_INFESTED, RegionRandomPoint(lv_spawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_scourgeTeamVictims2, UnitLastCreatedGroup());
        AISetGroupScriptControlled(UnitLastCreatedGroup(), false);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScourgeKillTeams_Init () {
    gt_ScourgeKillTeams = TriggerCreate("gt_ScourgeKillTeams_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Scourges
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksScourges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomInt(30, 150), c_timeAI);
    TriggerExecute(gt_ScourgeKillTeams, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksScourges_Init () {
    gt_AISpecialInfestedAttacksScourges = TriggerCreate("gt_AISpecialInfestedAttacksScourges_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Hunterling - Night 1
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksHunterlingNight1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), "Hunterling", false, false);
    Wait(170.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Hunterling", false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksHunterlingNight1_Init () {
    gt_AISpecialInfestedAttacksHunterlingNight1 = TriggerCreate("gt_AISpecialInfestedAttacksHunterlingNight1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Hunterling - Night 2
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksHunterlingNight2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 6, 0, 0), "Hunterling", false, true);
    Wait(70.0, c_timeAI);
    Wait(50.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 6, 0, 0), "Hunterling", false, true);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 6, 0, 0), "Hunterling", false, true);
    Wait(50.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 4, 0, 0), "Hunterling", true, true);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 4, 6, 0, 0), "Hunterling", false, false);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 4, 0, 0), "Hunterling", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksHunterlingNight2_Init () {
    gt_AISpecialInfestedAttacksHunterlingNight2 = TriggerCreate("gt_AISpecialInfestedAttacksHunterlingNight2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Hunterling - Night 3
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksHunterlingNight3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeAI);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 4, 8, 0, 0), "Hunterling", false, false);
    Wait(60.0, c_timeAI);
    if ((gv_specialInfestedAttacks_Night3_Boss == true)) {
        Wait(70.0, c_timeAI);
    }
    else {
        Wait(40.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 6, 8, 9, 0, 0), "Hunterling", false, false);
        Wait(30.0, c_timeAI);
    }
    if ((gv_specialInfestedAttacks_InfestedTypes[1] == "Hunterling") && (gv_specialInfestedAttacks_Night3_PrimarySI_First == true)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 5, 7, 0, 0), "Hunterling", false, false);
        Wait(10.0, c_timeAI);
    }
    else {
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 6, 0, 0), "Hunterling", false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksHunterlingNight3_Init () {
    gt_AISpecialInfestedAttacksHunterlingNight3 = TriggerCreate("gt_AISpecialInfestedAttacksHunterlingNight3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Hunterling - Night 4
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksHunterlingNight4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 3, 4, 0, 0), "Hunterling", false, false);
    Wait(15.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 6, 8, 0, 0), "Hunterling", false, false);
    Wait(40.0, c_timeAI);
    Wait(60.0, c_timeAI);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 4, 6, 0, 0), "Hunterling", false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksHunterlingNight4_Init () {
    gt_AISpecialInfestedAttacksHunterlingNight4 = TriggerCreate("gt_AISpecialInfestedAttacksHunterlingNight4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Hunterling - Night 5
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksHunterlingNight5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 8, 10, 0, 0), "Hunterling", false, false);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 6, 6, 8, 10, 0, 0), "Hunterling", false, false);
    Wait(40.0, c_timeAI);
    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Hunterling", false, false);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0) == 1)) {
    }
    else {
        Wait(10.0, c_timeAI);
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Hunterling", false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksHunterlingNight5_Init () {
    gt_AISpecialInfestedAttacksHunterlingNight5 = TriggerCreate("gt_AISpecialInfestedAttacksHunterlingNight5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Hunterling - Night 6+
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksHunterlingNight6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 10, 12, 0, 0), "Hunterling", false, false);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 10, 12, 0, 0), "Hunterling", true, false);
    Wait(40.0, c_timeAI);
    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 12, 14, 0, 0), "Hunterling", false, false);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0) == 1)) {
    }
    else {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 12, 14, 0, 0), "Hunterling", true, false);
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 12, 14, 0, 0), "Hunterling", false, true);
        Wait(10.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksHunterlingNight6_Init () {
    gt_AISpecialInfestedAttacksHunterlingNight6 = TriggerCreate("gt_AISpecialInfestedAttacksHunterlingNight6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Spotter - Night 1
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksSpotterNight1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), "Spotter", false, true);
    Wait(170.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0), "Spotter", false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksSpotterNight1_Init () {
    gt_AISpecialInfestedAttacksSpotterNight1 = TriggerCreate("gt_AISpecialInfestedAttacksSpotterNight1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Spotter - Night 2
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksSpotterNight2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(1, 1, 2, 2), "Spotter", false, true);
    Wait(50.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(1, 1, 2, 3), "Spotter", false, false);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Spotter", libCOMI_gf_DifficultyValueFixed4(libCOMI_gf_GetMissionDifficulty(), false, false, true, true, false, false), true);
    Wait(50.0, c_timeAI);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Spotter", false, false);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Spotter", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksSpotterNight2_Init () {
    gt_AISpecialInfestedAttacksSpotterNight2 = TriggerCreate("gt_AISpecialInfestedAttacksSpotterNight2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Spotter - Night 3
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksSpotterNight3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeAI);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 2, 0, 0), "Spotter", false, false);
    Wait(60.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 4, 0, 0), "Spotter", false, false);
    if ((gv_specialInfestedAttacks_Night3_Boss == true)) {
        Wait(70.0, c_timeAI);
    }
    else {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 2, 2, 0, 0), "Spotter", false, false);
        Wait(40.0, c_timeAI);
        Wait(30.0, c_timeAI);
    }
    if ((gv_specialInfestedAttacks_InfestedTypes[1] == "Spotter") && (gv_specialInfestedAttacks_Night3_PrimarySI_First == true)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 2, 4, 0, 0), "Spotter", false, false);
        Wait(10.0, c_timeAI);
    }
    else {
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), "Spotter", false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksSpotterNight3_Init () {
    gt_AISpecialInfestedAttacksSpotterNight3 = TriggerCreate("gt_AISpecialInfestedAttacksSpotterNight3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Spotter - Night 4
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksSpotterNight4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    Wait(15.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Spotter", false, false);
    Wait(40.0, c_timeAI);
    Wait(60.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 4, 4, 0, 0), "Spotter", false, true);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Spotter", false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksSpotterNight4_Init () {
    gt_AISpecialInfestedAttacksSpotterNight4 = TriggerCreate("gt_AISpecialInfestedAttacksSpotterNight4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Spotter - Night 5
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksSpotterNight5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0), "Spotter", false, false);
    Wait(40.0, c_timeAI);
    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 4, 5, 0, 0), "Spotter", false, false);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0) == 1)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Spotter", false, true);
    }
    else {
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0), "Spotter", false, true);
        Wait(10.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksSpotterNight5_Init () {
    gt_AISpecialInfestedAttacksSpotterNight5 = TriggerCreate("gt_AISpecialInfestedAttacksSpotterNight5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Spotter - Night 6+
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksSpotterNight6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 10, 12, 0, 0), "Spotter", false, false);
    Wait(40.0, c_timeAI);
    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 12, 14, 0, 0), "Spotter", false, false);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0) == 1)) {
    }
    else {
        Wait(10.0, c_timeAI);
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 8, 8, 12, 14, 0, 0), "Spotter", false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksSpotterNight6_Init () {
    gt_AISpecialInfestedAttacksSpotterNight6 = TriggerCreate("gt_AISpecialInfestedAttacksSpotterNight6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Choker - Night 1
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksChokerNight1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), "Choker", false, true);
    Wait(140.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0), "Choker", false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksChokerNight1_Init () {
    gt_AISpecialInfestedAttacksChokerNight1 = TriggerCreate("gt_AISpecialInfestedAttacksChokerNight1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Choker - Night 2
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksChokerNight2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Choker", false, true);
    Wait(50.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Choker", false, true);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Choker", gf_DifficultyValueBoolean(false, false, true, true), false);
    Wait(50.0, c_timeAI);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Choker", false, false);
    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(0, 0, 2, 2), "Choker", gf_DifficultyValueBoolean(false, false, true, true), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksChokerNight2_Init () {
    gt_AISpecialInfestedAttacksChokerNight2 = TriggerCreate("gt_AISpecialInfestedAttacksChokerNight2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Choker - Night 3
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksChokerNight3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 2, 2), "Choker", false, false);
    Wait(10.0, c_timeAI);
    Wait(30.0, c_timeAI);
    Wait(60.0, c_timeAI);
    if ((gv_specialInfestedAttacks_Night3_Boss == true)) {
        Wait(70.0, c_timeAI);
    }
    else {
        Wait(40.0, c_timeAI);
        gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 4, 4), "Choker", false, false);
        Wait(30.0, c_timeAI);
    }
    if ((gv_specialInfestedAttacks_InfestedTypes[1] == "Choker") && (gv_specialInfestedAttacks_Night3_PrimarySI_First == true)) {
        gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 4, 4), "Choker", false, false);
        Wait(10.0, c_timeAI);
    }
    else {
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libNtve_gf_DifficultyValueInt(2, 2, 4, 4), "Choker", false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksChokerNight3_Init () {
    gt_AISpecialInfestedAttacksChokerNight3 = TriggerCreate("gt_AISpecialInfestedAttacksChokerNight3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Choker - Night 4
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksChokerNight4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    Wait(15.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Choker", false, false);
    Wait(40.0, c_timeAI);
    Wait(60.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Choker", false, false);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 4, 4, 0, 0), "Choker", false, true);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Choker", false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksChokerNight4_Init () {
    gt_AISpecialInfestedAttacksChokerNight4 = TriggerCreate("gt_AISpecialInfestedAttacksChokerNight4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Choker - Night 5
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksChokerNight5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0), "Choker", false, false);
    Wait(40.0, c_timeAI);
    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 4, 5, 0, 0), "Choker", false, false);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0) == 1)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Choker", false, true);
    }
    else {
        Wait(10.0, c_timeAI);
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0), "Choker", false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksChokerNight5_Init () {
    gt_AISpecialInfestedAttacksChokerNight5 = TriggerCreate("gt_AISpecialInfestedAttacksChokerNight5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Choker - Night 6+
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksChokerNight6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    Wait(40.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Choker", false, false);
    Wait(70.0, c_timeAI);
    Wait(50.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 6, 8, 0, 0), "Choker", false, false);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0) == 1)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Choker", false, true);
    }
    else {
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Choker", false, true);
        Wait(10.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksChokerNight6_Init () {
    gt_AISpecialInfestedAttacksChokerNight6 = TriggerCreate("gt_AISpecialInfestedAttacksChokerNight6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Kaboomer - Night 1
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksKaboomerNight1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), "Kaboomer", false, true);
    Wait(110.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0), "Kaboomer", false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksKaboomerNight1_Init () {
    gt_AISpecialInfestedAttacksKaboomerNight1 = TriggerCreate("gt_AISpecialInfestedAttacksKaboomerNight1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Kaboomer - Night 2
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksKaboomerNight2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Kaboomer", false, true);
    Wait(50.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 3, 0, 0), "Kaboomer", false, false);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 3, 0, 0), "Kaboomer", false, true);
    Wait(50.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 2, 2, 0, 0), "Kaboomer", false, true);
    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 2, 0, 0), "Kaboomer", false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksKaboomerNight2_Init () {
    gt_AISpecialInfestedAttacksKaboomerNight2 = TriggerCreate("gt_AISpecialInfestedAttacksKaboomerNight2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Kaboomer - Night 3
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksKaboomerNight3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 3, 0, 0), "Kaboomer", false, false);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 3, 0, 0), "Kaboomer", false, false);
    Wait(60.0, c_timeAI);
    if ((gv_specialInfestedAttacks_Night3_Boss == true)) {
        Wait(70.0, c_timeAI);
    }
    else {
        Wait(40.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 2, 2, 0, 0), "Kaboomer", false, false);
        Wait(30.0, c_timeAI);
    }
    if ((gv_specialInfestedAttacks_InfestedTypes[0] == "Kaboomer") && (gv_specialInfestedAttacks_Night3_PrimarySI_First == true)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 2, 4, 0, 0), "Kaboomer", false, false);
        Wait(10.0, c_timeAI);
    }
    else {
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), "Kaboomer", false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksKaboomerNight3_Init () {
    gt_AISpecialInfestedAttacksKaboomerNight3 = TriggerCreate("gt_AISpecialInfestedAttacksKaboomerNight3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Kaboomer - Night 4
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksKaboomerNight4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    Wait(15.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Kaboomer", false, false);
    Wait(40.0, c_timeAI);
    Wait(60.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 4, 4, 0, 0), "Kaboomer", false, true);
    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Kaboomer", false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksKaboomerNight4_Init () {
    gt_AISpecialInfestedAttacksKaboomerNight4 = TriggerCreate("gt_AISpecialInfestedAttacksKaboomerNight4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Kaboomer - Night 5
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksKaboomerNight5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0), "Kaboomer", false, false);
    Wait(40.0, c_timeAI);
    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 4, 5, 0, 0), "Kaboomer", false, false);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0) == 1)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 0, 0), "Kaboomer", false, true);
    }
    else {
        Wait(10.0, c_timeAI);
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 4, 5, 0, 0), "Kaboomer", false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksKaboomerNight5_Init () {
    gt_AISpecialInfestedAttacksKaboomerNight5 = TriggerCreate("gt_AISpecialInfestedAttacksKaboomerNight5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Kaboomer - Night 6+
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksKaboomerNight6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Kaboomer", false, false);
    Wait(40.0, c_timeAI);
    Wait(70.0, c_timeAI);
    gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 5, 5, 6, 8, 0, 0), "Kaboomer", false, false);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0) == 1)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Kaboomer", false, true);
    }
    else {
        Wait(10.0, c_timeAI);
        Wait(10.0, c_timeAI);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 8, 0, 0), "Kaboomer", false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksKaboomerNight6_Init () {
    gt_AISpecialInfestedAttacksKaboomerNight6 = TriggerCreate("gt_AISpecialInfestedAttacksKaboomerNight6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Boss - Night 3
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksBossNight3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    Wait(10.0, c_timeAI);
    Wait(30.0, c_timeAI);
    Wait(60.0, c_timeAI);
    if ((gv_specialInfestedAttacks_Night3_Boss == true)) {
        if ((gv_bossType == ge_PRESET_BossType_Stank)) {
            gf_AISendInfestedAttackWave(1, "Stank", false, false);
        }
        else {
            gv_maxConcurrentNydusWorms = 1;
            gf_AISpawnNydusWorm(gf_NydusWormSpawn());
        }
        Wait(70.0, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksBossNight3_Init () {
    gt_AISpecialInfestedAttacksBossNight3 = TriggerCreate("gt_AISpecialInfestedAttacksBossNight3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Boss - Night 4
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksBossNight4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto56533474_n;
    int auto56533474_i;
    int auto666EF4C6_n;
    int auto666EF4C6_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeAI);
    Wait(15.0, c_timeAI);
    Wait(40.0, c_timeAI);
    if ((gv_bossType == ge_PRESET_BossType_Stank)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 0, 0), "Stank", false, false);
    }
    else {
        gv_maxConcurrentNydusWorms = 3;
        auto56533474_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0);
        for (auto56533474_i = 1; auto56533474_i <= auto56533474_n; auto56533474_i += 1) {
            gf_AISpawnNydusWorm(gf_NydusWormSpawn());
            Wait(2.0, c_timeAI);
        }
    }
    Wait(60.0, c_timeAI);
    Wait(30.0, c_timeAI);
    if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
        Wait(libNtve_gf_DifficultyValueFixed(0.0, 0.0, 50.0, 30.0), c_timeAI);
        if ((gv_bossType == ge_PRESET_BossType_Stank)) {
            gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), "Stank", false, true);
        }
        else {
            gv_maxConcurrentNydusWorms = 4;
            auto666EF4C6_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 0, 0);
            for (auto666EF4C6_i = 1; auto666EF4C6_i <= auto666EF4C6_n; auto666EF4C6_i += 1) {
                gf_AISpawnNydusWorm(gf_NydusWormSpawn());
                Wait(2.0, c_timeAI);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksBossNight4_Init () {
    gt_AISpecialInfestedAttacksBossNight4 = TriggerCreate("gt_AISpecialInfestedAttacksBossNight4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Boss - Night 5
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksBossNight5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nydusSpawnPoint;

    // Automatic Variable Declarations
    int autoC2A740DD_n;
    int autoC2A740DD_i;
    int auto4F2201DA_n;
    int auto4F2201DA_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeAI);
    Wait(40.0, c_timeAI);
    if ((gv_bossType == ge_PRESET_BossType_Stank)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 0, 0), "Stank", false, false);
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), "Stank", false, true);
    }
    else {
        gv_maxConcurrentNydusWorms = 4;
        autoC2A740DD_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0);
        for (autoC2A740DD_i = 1; autoC2A740DD_i <= autoC2A740DD_n; autoC2A740DD_i += 1) {
            gf_AISpawnNydusWorm(gf_NydusWormSpawn());
            Wait(2.0, c_timeAI);
        }
    }
    Wait(70.0, c_timeAI);
    Wait(50.0, c_timeAI);
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0) == 1)) {
        if ((gv_bossType == ge_PRESET_BossType_Stank)) {
            gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), "Stank", false, true);
            Wait(10.0, c_timeAI);
            gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), "Stank", false, true);
        }
        else {
            gv_maxConcurrentNydusWorms = 5;
            gf_AISpawnNydusWorm(RegionFromId(27));
            Wait(15.0, c_timeAI);
            auto4F2201DA_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 3, 4, 0, 0);
            for (auto4F2201DA_i = 1; auto4F2201DA_i <= auto4F2201DA_n; auto4F2201DA_i += 1) {
                gf_AISpawnNydusWorm(gf_NydusWormSpawn());
                Wait(2.0, c_timeAI);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksBossNight5_Init () {
    gt_AISpecialInfestedAttacksBossNight5 = TriggerCreate("gt_AISpecialInfestedAttacksBossNight5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Attacks - Boss - Night 6+
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedAttacksBossNight6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nydusSpawnPoint;

    // Automatic Variable Declarations
    const int auto007404AA_n = 2;
    int auto007404AA_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bossType == ge_PRESET_BossType_Nydus)) {
        gf_AISpawnNydusWorm(RegionFromId(27));
    }

    Wait(30.0, c_timeAI);
    Wait(40.0, c_timeAI);
    if ((gv_bossType == ge_PRESET_BossType_Stank)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 6, 6, 0, 0), "Stank", false, false);
    }
    else {
        gv_maxConcurrentNydusWorms = 6;
        for (auto007404AA_i = 1; auto007404AA_i <= auto007404AA_n; auto007404AA_i += 1) {
            gf_AISpawnNydusWorm(gf_NydusWormSpawn());
            Wait(15.0, c_timeAI);
        }
        if ((RandomInt(1, 3) == 1)) {
            gf_AISpawnNydusWorm(RegionFromId(27));
        }
        else {
            gf_AISpawnNydusWorm(gf_NydusWormSpawn());
        }
        Wait(15.0, c_timeAI);
        gf_AISpawnNydusWorm(gf_NydusWormSpawn());
        Wait(2.0, c_timeAI);
    }
    Wait(70.0, c_timeAI);
    Wait(50.0, c_timeAI);
    if ((gv_bossType == ge_PRESET_BossType_Stank)) {
        gf_AISendInfestedAttackWave(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 5, 5, 0, 0), "Stank", false, true);
    }
    else {
        gv_nydusSpawnLocationCurrent = gv_nydusSpawnLocations[RandomInt(1, (gv_c_NydusSpawnLocationsTotal - 1))];
        gf_AISpawnNydusWorm(RegionFromName(("Nydus Worm Spawn " + IntToString(gv_nydusSpawnLocationCurrent))));
        gf_UpdateNydusSpawnLocation();
        Wait(5.0, c_timeAI);
        gv_nydusSpawnLocationCurrent = gv_nydusSpawnLocations[RandomInt(1, (gv_c_NydusSpawnLocationsTotal - 1))];
        gf_AISpawnNydusWorm(RegionFromName(("Nydus Worm Spawn " + IntToString(gv_nydusSpawnLocationCurrent))));
        gf_UpdateNydusSpawnLocation();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedAttacksBossNight6_Init () {
    gt_AISpecialInfestedAttacksBossNight6 = TriggerCreate("gt_AISpecialInfestedAttacksBossNight6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Special Infested Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_AISpecialInfestedEngagedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_specialInfestedUnit;
    string lv_specialInfestedUnitType;

    // Automatic Variable Declarations
    string autoB8ED8FB0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_specialInfestedEngagedCalloutTimer) <= 0.0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_SPECIAL_INFESTED))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnitDamageSourceUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Choker") || (UnitGetType(EventUnit()) == "Hunterling") || (UnitGetType(EventUnit()) == "Kaboomer") || (UnitGetType(EventUnit()) == "Spotter") || (UnitGetType(EventUnit()) == "Stank")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_specialInfestedUnit = EventUnit();
    lv_specialInfestedUnitType = UnitGetType(lv_specialInfestedUnit);
    TimerStart(gv_specialInfestedEngagedCalloutTimer, 25.0, false, c_timeGame);
    autoB8ED8FB0_val = lv_specialInfestedUnitType;
    if (autoB8ED8FB0_val == "Hunterling") {
        TriggerExecute(gt_HunterlingEngagedQ, true, false);
    }
    else if (autoB8ED8FB0_val == "Kaboomer") {
        TriggerExecute(gt_KaboomerEngagedQ, true, false);
    }
    else if (autoB8ED8FB0_val == "Choker") {
        TriggerExecute(gt_ChokerEngagedQ, true, false);
    }
    else if (autoB8ED8FB0_val == "Spotter") {
        TriggerExecute(gt_SpotterEngagedQ, true, false);
    }
    else if (autoB8ED8FB0_val == "Stank") {
        TriggerExecute(gt_TransmissionStankQ, true, false);
        SoundPlayForPlayer(SoundLink("Event_Stank_Intro_VxFx", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISpecialInfestedEngagedQ_Init () {
    gt_AISpecialInfestedEngagedQ = TriggerCreate("gt_AISpecialInfestedEngagedQ_Func");
    TriggerAddEventUnitDamaged(gt_AISpecialInfestedEngagedQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunterling Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_HunterlingEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HunterlingDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterlingEngagedQ_Init () {
    gt_HunterlingEngagedQ = TriggerCreate("gt_HunterlingEngagedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kaboomer Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_KaboomerEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("KaboomerDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaboomerEngagedQ_Init () {
    gt_KaboomerEngagedQ = TriggerCreate("gt_KaboomerEngagedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spotter Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_SpotterEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("SpotterDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpotterEngagedQ_Init () {
    gt_SpotterEngagedQ = TriggerCreate("gt_SpotterEngagedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choker Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_ChokerEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ChokerDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChokerEngagedQ_Init () {
    gt_ChokerEngagedQ = TriggerCreate("gt_ChokerEngagedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - Nydus Ping Sound
//--------------------------------------------------------------------------------------------------
bool gt_AINydusPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AINydusPingSound_Init () {
    gt_AINydusPingSound = TriggerCreate("gt_AINydusPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Nydus Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNydusQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("Enemy Warning - Nydus Worm", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNydusQ_Init () {
    gt_TransmissionNydusQ = TriggerCreate("gt_TransmissionNydusQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Stank Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStankQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("StankDoN", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStankQ_Init () {
    gt_TransmissionStankQ = TriggerCreate("gt_TransmissionStankQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Nydus Spawn Location
//--------------------------------------------------------------------------------------------------
bool gt_SetupNydusSpawnLocation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB7F1AC9B_ae = gv_c_NydusSpawnLocationsTotal;
    int autoB7F1AC9B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB7F1AC9B_var = 1;
    for ( ; autoB7F1AC9B_var <= autoB7F1AC9B_ae; autoB7F1AC9B_var += 1 ) {
        gv_nydusSpawnLocations[autoB7F1AC9B_var] = autoB7F1AC9B_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupNydusSpawnLocation_Init () {
    gt_SetupNydusSpawnLocation = TriggerCreate("gt_SetupNydusSpawnLocation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - White Noise Spawning
//--------------------------------------------------------------------------------------------------
bool gt_AIWhiteNoiseSpawning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_modificator;
    unitgroup lv_spawners;
    unit lv_pickedSpawner;
    int[5] lv_infestedQty;
    string[5] lv_infestedTypes;
    int lv_infestedIter;
    int lv_infestedCount;
    int lv_infestedType;

    // Automatic Variable Declarations
    int auto033061DE_n;
    int auto033061DE_i;
    region auto2F198E06_val;

    // Variable Initialization
    lv_modificator = (2 * PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()));
    lv_spawners = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_infestedTypes[1] = "InfestedAbomination";
    lv_infestedTypes[2] = "InfestedExploder";
    lv_infestedTypes[3] = "InfestedTerranCampaign";
    lv_infestedTypes[4] = "InfestedCivilian";
    while (true) {
        if ((gv_dayORNight == ge_TimeOfDay_Night)) {
            lv_infestedQty[1] = (gv_infestedAberrationQty * lv_modificator);
            lv_infestedQty[2] = (gv_infestedVolatileQty * lv_modificator);
            lv_infestedQty[3] = (gv_infestedMarineQty * lv_modificator);
            lv_infestedQty[4] = (gv_infestedTerranQty * lv_modificator);
            lv_infestedQty[0] = (lv_infestedQty[1] + lv_infestedQty[2] + lv_infestedQty[3] + lv_infestedQty[4]);
            lv_spawners = UnitGroupFilterPlayer(gv_infestedStructuresGroup, gv_pLAYER_05_INFESTED, lv_infestedQty[0]);
            auto033061DE_n = lv_infestedQty[0];
            for (auto033061DE_i = 1; auto033061DE_i <= auto033061DE_n; auto033061DE_i += 1) {
                if ((UnitGroupCount(gv_infestedStructuresGroup, c_unitCountAlive) == 0)) {
                    return true;
                }

                if ((UnitGroupCount(lv_spawners, c_unitCountAlive) == 0)) {
                    lv_spawners = UnitGroupFilterPlayer(gv_infestedStructuresGroup, gv_pLAYER_05_INFESTED, lv_infestedQty[0]);
                }

                if ((gv_dayORNight == ge_TimeOfDay_Night)) {
                    lv_pickedSpawner = UnitGroupRandomUnit(lv_spawners, c_unitCountAlive);
                    lv_infestedIter = RandomInt(1, 4);
                    lv_infestedCount = 1;
                    if ((((lv_infestedIter == 1) && (lv_infestedQty[1] > 0)) || ((lv_infestedQty[2] <= 0) && (lv_infestedQty[3] <= 0) && (lv_infestedQty[4] <= 0)))) {
                        lv_infestedQty[1] -= lv_infestedCount;
                        lv_infestedType = 1;
                    }
                    else {
                        if ((((lv_infestedIter == 2) && (lv_infestedQty[2] > 0)) || ((lv_infestedQty[3] <= 0) && (lv_infestedQty[4] <= 0)))) {
                            lv_infestedQty[2] -= lv_infestedCount;
                            lv_infestedType = 2;
                        }
                        else {
                            if ((((lv_infestedIter == 3) && (lv_infestedQty[3] > 0)) || (lv_infestedQty[4] <= 0))) {
                                lv_infestedQty[3] -= lv_infestedCount;
                                lv_infestedType = 3;
                            }
                            else {
                                lv_infestedQty[4] -= lv_infestedCount;
                                lv_infestedType = 4;
                            }
                        }
                    }
                    libNtve_gf_CreateUnitsAtPoint2(lv_infestedCount, lv_infestedTypes[lv_infestedType], 0, gv_pLAYER_05_INFESTED, UnitGetPosition(lv_pickedSpawner));
                    auto2F198E06_val = gv_whiteNoiseZombieRegions[gv_whiteNoiseZombieRegionsIndex];
                    if (auto2F198E06_val == RegionFromId(18)) {
                        UnitGroupAdd(gv_whiteNoiseZombiesNE, UnitLastCreated());
                    }
                    else if (auto2F198E06_val == RegionFromId(16)) {
                        UnitGroupAdd(gv_whiteNoiseZombiesNW, UnitLastCreated());
                    }
                    else if (auto2F198E06_val == RegionFromId(17)) {
                        UnitGroupAdd(gv_whiteNoiseZombiesSE, UnitLastCreated());
                    }
                    else if (auto2F198E06_val == RegionFromId(19)) {
                        UnitGroupAdd(gv_whiteNoiseZombiesSW, UnitLastCreated());
                    }
                    else {
                    }
                    UnitGroupAdd(gv_whiteNoiseInfested, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueAddToFront);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_whiteNoiseZombieRegions[gv_whiteNoiseZombieRegionsIndex])), c_orderQueueAddToEnd);
                    UnitGroupRemove(lv_spawners, lv_pickedSpawner);
                    if (gv_whiteNoiseZombieRegionsIndex >= 4) {
                        gv_whiteNoiseZombieRegionsIndex = 1;
                    }
                    else {
                        gv_whiteNoiseZombieRegionsIndex = gv_whiteNoiseZombieRegionsIndex + 1;
                    }
                    Wait(0.1, c_timeAI);
                }
                else {
                    break;
                }
            }
            Wait(IntToFixed(gv_whiteNoiseSpawnCooldown), c_timeAI);
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIWhiteNoiseSpawning_Init () {
    gt_AIWhiteNoiseSpawning = TriggerCreate("gt_AIWhiteNoiseSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - White Noise Zombie Suicide NE
//--------------------------------------------------------------------------------------------------
bool gt_AIWhiteNoiseZombieSuicideNE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_whiteNoiseZombiesNE, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_whiteNoiseZombiesNE, EventUnit());
    AISetUnitScriptControlled(EventUnit(), false);
    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIWhiteNoiseZombieSuicideNE_Init () {
    gt_AIWhiteNoiseZombieSuicideNE = TriggerCreate("gt_AIWhiteNoiseZombieSuicideNE_Func");
    TriggerAddEventUnitRegion(gt_AIWhiteNoiseZombieSuicideNE, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - White Noise Zombie Suicide NW
//--------------------------------------------------------------------------------------------------
bool gt_AIWhiteNoiseZombieSuicideNW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_whiteNoiseZombiesNW, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_whiteNoiseZombiesNW, EventUnit());
    AISetUnitScriptControlled(EventUnit(), false);
    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIWhiteNoiseZombieSuicideNW_Init () {
    gt_AIWhiteNoiseZombieSuicideNW = TriggerCreate("gt_AIWhiteNoiseZombieSuicideNW_Func");
    TriggerAddEventUnitRegion(gt_AIWhiteNoiseZombieSuicideNW, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - White Noise Zombie Suicide SE
//--------------------------------------------------------------------------------------------------
bool gt_AIWhiteNoiseZombieSuicideSE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_whiteNoiseZombiesSE, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_whiteNoiseZombiesSE, EventUnit());
    AISetUnitScriptControlled(EventUnit(), false);
    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIWhiteNoiseZombieSuicideSE_Init () {
    gt_AIWhiteNoiseZombieSuicideSE = TriggerCreate("gt_AIWhiteNoiseZombieSuicideSE_Func");
    TriggerAddEventUnitRegion(gt_AIWhiteNoiseZombieSuicideSE, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI - White Noise Zombie Suicide SW
//--------------------------------------------------------------------------------------------------
bool gt_AIWhiteNoiseZombieSuicideSW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_whiteNoiseZombiesSW, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_whiteNoiseZombiesSW, EventUnit());
    AISetUnitScriptControlled(EventUnit(), false);
    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIWhiteNoiseZombieSuicideSW_Init () {
    gt_AIWhiteNoiseZombieSuicideSW = TriggerCreate("gt_AIWhiteNoiseZombieSuicideSW_Func");
    TriggerAddEventUnitRegion(gt_AIWhiteNoiseZombieSuicideSW, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DefeatDoN", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveFailedDestroyInfestation, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/9A91124E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Destroy Infestation Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryInfestationPurged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowDestroy(gv_mainTimerWindow);
    TimerPause(gv_globalDayNightTimer, true);
    TimerPause(gv_transitionToDay, true);
    TimerPause(gv_transitionToNight, true);
    TriggerQueueClear(c_triggerQueueRetain);
    TransmissionClearAll();
    TriggerExecute(gt_ObjectiveCompleteDestroyInfestation, true, false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryInfestationPurged_Init () {
    gt_VictoryInfestationPurged = TriggerCreate("gt_VictoryInfestationPurged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveCompleteDestroyInfestation, true, true);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendVictoryTransmission("VictoryDoN");
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_infestedStructuresPositionofLastKilled, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_infestedStructuresPositionofLastKilled, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/C687F236"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Count Infested Structures Killed
//--------------------------------------------------------------------------------------------------
bool gt_CountInfestedStructuresKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scoreAwardPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infestedStructuresGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scoreAwardPlayer = libNtve_gf_KillingPlayer();
    gv_scoreScreen_InfestedStructuresKilled[lv_scoreAwardPlayer] += 1;
    PlayerScoreValueSetFromInt(lv_scoreAwardPlayer, "MeinhoffDayNightInfestedKills", gv_scoreScreen_InfestedStructuresKilled[lv_scoreAwardPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountInfestedStructuresKilled_Init () {
    gt_CountInfestedStructuresKilled = TriggerCreate("gt_CountInfestedStructuresKilled_Func");
    TriggerAddEventUnitDied(gt_CountInfestedStructuresKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Create DestroyInfestation
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCreateDestroyInfestation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_MeinhoffDayNight_Primary01");
    gv_objective_Primary_DestroyInfestation = ObjectiveLastCreated();
    libCOMI_gf_SetMissionObjectiveProgress("AC_MeinhoffDayNight_Primary01", gv_infestedStructuresTotal);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCreateDestroyInfestation_Init () {
    gt_ObjectiveCreateDestroyInfestation = TriggerCreate("gt_ObjectiveCreateDestroyInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Update DestroyInfestation
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUpdateDestroyInfestation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetMissionObjectiveProgress("AC_MeinhoffDayNight_Primary01", gv_infestedStructuresRemaining);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUpdateDestroyInfestation_Init () {
    gt_ObjectiveUpdateDestroyInfestation = TriggerCreate("gt_ObjectiveUpdateDestroyInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Complete DestroyInfestation
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCompleteDestroyInfestation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCreateDestroyInfestation, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_MeinhoffDayNight_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCompleteDestroyInfestation_Init () {
    gt_ObjectiveCompleteDestroyInfestation = TriggerCreate("gt_ObjectiveCompleteDestroyInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Failed DestroyInfestation
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFailedDestroyInfestation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_MeinhoffDayNight_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFailedDestroyInfestation_Init () {
    gt_ObjectiveFailedDestroyInfestation = TriggerCreate("gt_ObjectiveFailedDestroyInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bonus DestroyInfestationSource Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusDestroyInfestationSourceCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_MeinhoffDayNight_Bonus01");
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_MeinhoffDayNight_Bonus01", libCOMI_ge_MissionObjectiveState_Available);
    gv_objective_Bonus_DestroyInfestationSource = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusDestroyInfestationSourceCreate_Init () {
    gt_ObjectiveBonusDestroyInfestationSourceCreate = TriggerCreate("gt_ObjectiveBonusDestroyInfestationSourceCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bonus DestroyInfestationSource UpdateSuccess
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusDestroyInfestationSourceUpdateSuccess_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_MeinhoffDayNight_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusDestroyInfestationSourceUpdateSuccess_Init () {
    gt_ObjectiveBonusDestroyInfestationSourceUpdateSuccess = TriggerCreate("gt_ObjectiveBonusDestroyInfestationSourceUpdateSuccess_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Bonus DestroyInfestationSource UpdateFail
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusDestroyInfestationSourceUpdateFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_MeinhoffDayNight_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusDestroyInfestationSourceUpdateFail_Init () {
    gt_ObjectiveBonusDestroyInfestationSourceUpdateFail = TriggerCreate("gt_ObjectiveBonusDestroyInfestationSourceUpdateFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02LoadingComplete_Init();
    gt_Init03Players_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_PickSpecialInfested_Init();
    gt_PickBossType_Init();
    gt_StartGameQ_Init();
    gt_ShowDayNightTimerWindow_Init();
    gt_StartDayNightTimers_Init();
    gt_TrackInfestedStructureCount_Init();
    gt_UpdateAreasCleared_Init();
    gt_EffortValue_Init();
    gt_SetupGuidingPingOrder_Init();
    gt_ShowandUpdateObjectiveMarkers_Init();
    gt_DestroySmallBuildingObjectiveMarkers_Init();
    gt_DayFindSomeInfestedQ_Init();
    gt_ObjectiveFindandDestroyBossInitialization_Init();
    gt_ObjectiveFindandDestroyBossResurface_Init();
    gt_ObjectiveFindandDestroyBossCheckStatus_Init();
    gt_ObjectiveFindandDestroyBossHidingBehavior_Init();
    gt_ObjectiveBonusCreateQ_Init();
    gt_ObjectiveBonusEngagedQ_Init();
    gt_ObjectiveBonusSuccessQ_Init();
    gt_DayNightTimerCycling_Init();
    gt_DayNightPlayDayMusic_Init();
    gt_DayNightPlayNightMusic_Init();
    gt_DayNightTransitionToDay_Init();
    gt_DayNightTransitionToNight_Init();
    gt_DayNightBurnInfestedDuringDay_Init();
    gt_TransmissionDayNightin30SecondsQ_Init();
    gt_TransmissionItsDaytimeQ_Init();
    gt_TransmissionItsNightQ_Init();
    gt_BarricadeNEDestroyedQ_Init();
    gt_BarricadeNWDestroyedQ_Init();
    gt_BarricadeSEDestroyedQ_Init();
    gt_BarricadeNEAttackedQ_Init();
    gt_BarricadeNWAttackedQ_Init();
    gt_BarricadeSEAttackedQ_Init();
    gt_ProgressFirstInfestedStructuresRemainingQ_Init();
    gt_ProgressMiddleInfestedStructuresRemainingQ_Init();
    gt_ProgressFinalInfestedStructuresRemainingQ_Init();
    gt_SpawnBroodlings_Init();
    gt_AINightDefenderReaction_Init();
    gt_AINightDefenderReactionQ_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave05_Init();
    gt_EnemyAttackingQ_Init();
    gt_AIUpdateSpawnSettingsClassic_Init();
    gt_AIAttackWavesNightTriggersClassic_Init();
    gt_AINormalInfestedAttacksNight1InfestedCivilians_Init();
    gt_AINormalInfestedAttacksNight2NEBarricade_Init();
    gt_AINormalInfestedAttacksNight3SEandNWBarricades_Init();
    gt_AINormalInfestedAttacksNight4HeavyAttacks_Init();
    gt_AINormalInfestedAttacksNight5VeryHeavyAttacks_Init();
    gt_AINormalInfestedAttacksKillNightRepeat_Init();
    gt_TrackScourgeVictims_Init();
    gt_ScourgeKillTeams_Init();
    gt_AISpecialInfestedAttacksScourges_Init();
    gt_AISpecialInfestedAttacksHunterlingNight1_Init();
    gt_AISpecialInfestedAttacksHunterlingNight2_Init();
    gt_AISpecialInfestedAttacksHunterlingNight3_Init();
    gt_AISpecialInfestedAttacksHunterlingNight4_Init();
    gt_AISpecialInfestedAttacksHunterlingNight5_Init();
    gt_AISpecialInfestedAttacksHunterlingNight6_Init();
    gt_AISpecialInfestedAttacksSpotterNight1_Init();
    gt_AISpecialInfestedAttacksSpotterNight2_Init();
    gt_AISpecialInfestedAttacksSpotterNight3_Init();
    gt_AISpecialInfestedAttacksSpotterNight4_Init();
    gt_AISpecialInfestedAttacksSpotterNight5_Init();
    gt_AISpecialInfestedAttacksSpotterNight6_Init();
    gt_AISpecialInfestedAttacksChokerNight1_Init();
    gt_AISpecialInfestedAttacksChokerNight2_Init();
    gt_AISpecialInfestedAttacksChokerNight3_Init();
    gt_AISpecialInfestedAttacksChokerNight4_Init();
    gt_AISpecialInfestedAttacksChokerNight5_Init();
    gt_AISpecialInfestedAttacksChokerNight6_Init();
    gt_AISpecialInfestedAttacksKaboomerNight1_Init();
    gt_AISpecialInfestedAttacksKaboomerNight2_Init();
    gt_AISpecialInfestedAttacksKaboomerNight3_Init();
    gt_AISpecialInfestedAttacksKaboomerNight4_Init();
    gt_AISpecialInfestedAttacksKaboomerNight5_Init();
    gt_AISpecialInfestedAttacksKaboomerNight6_Init();
    gt_AISpecialInfestedAttacksBossNight3_Init();
    gt_AISpecialInfestedAttacksBossNight4_Init();
    gt_AISpecialInfestedAttacksBossNight5_Init();
    gt_AISpecialInfestedAttacksBossNight6_Init();
    gt_AISpecialInfestedEngagedQ_Init();
    gt_HunterlingEngagedQ_Init();
    gt_KaboomerEngagedQ_Init();
    gt_SpotterEngagedQ_Init();
    gt_ChokerEngagedQ_Init();
    gt_AINydusPingSound_Init();
    gt_TransmissionNydusQ_Init();
    gt_TransmissionStankQ_Init();
    gt_SetupNydusSpawnLocation_Init();
    gt_AIWhiteNoiseSpawning_Init();
    gt_AIWhiteNoiseZombieSuicideNE_Init();
    gt_AIWhiteNoiseZombieSuicideNW_Init();
    gt_AIWhiteNoiseZombieSuicideSE_Init();
    gt_AIWhiteNoiseZombieSuicideSW_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryInfestationPurged_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_VictoryFanfareQ_Init();
    gt_Defeat_Init();
    gt_CountInfestedStructuresKilled_Init();
    gt_ObjectiveCreateDestroyInfestation_Init();
    gt_ObjectiveUpdateDestroyInfestation_Init();
    gt_ObjectiveCompleteDestroyInfestation_Init();
    gt_ObjectiveFailedDestroyInfestation_Init();
    gt_ObjectiveBonusDestroyInfestationSourceCreate_Init();
    gt_ObjectiveBonusDestroyInfestationSourceUpdateSuccess_Init();
    gt_ObjectiveBonusDestroyInfestationSourceUpdateFail_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
