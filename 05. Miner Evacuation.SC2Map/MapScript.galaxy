//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Miner Evacuation
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_AMON_Claimers = 13;
const int gv_pLAYER_04_AMON_BaseWaves = 14;
const int gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss = 12;
const int gv_pLAYER_06_INFESTED_BaseWavesHateToss = 6;
const int gv_pLAYER_07_ZERG = 7;
const int gv_pLAYER_08_ColonyShip = 8;
const int gv_pLAYER_09_ERADICATOR = 9;
const int gv_pLAYER_10_ColonyShipTARGET = 10;
const int gv_pLAYER_11_COLONISTS = 11;
const string gv_launchUnitToTargetPointBaseEffect = "UnitLaunchToTargetPoint";
const int gv_c_ColonyShipHoldoutTime = 120;
const string gv_c_ColonyShipObjective = "IndustrialShip";
const string gv_c_ColonyShipObjective_Dead = "InfestedIndustrialShip";
const int gv_c_ColonyShip_MaxCount = 9;
const int gv_c_InfestedTownCount = 10;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORDColonyShipLocation {
    unit lv_colonyShipUnit;
    unit lv_beaconUnit;
    region lv_beaconRegion;
    int lv_beaconState;
    point lv_colonyShipPoint;
    revealer[3] lv_revealer;
    int lv_state;
    point lv_protossClaimerWaveTransportTarget;
    region lv_protossClaimerWaveTargetRegion;
    unitgroup lv_protossClaimerWaveUnitGroup;
    doodad lv_griffinActor;
    point lv_canisterSpawn;
    unit lv_canisterUnit;
    point lv_claimWaveSpawn;
    bool[7] lv_tankUIState;
    timer lv_forceStartTimer;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_MissionEventType__None = 0;
const int ge_MissionEventType_BaseAttack = 1;
const int ge_MissionEventType_PanicAttack = 2;
const int ge_MissionEventType_TransportAttack = 3;
const int ge_PRESETColonyShipState_Available = 0;
const int ge_PRESETColonyShipState_Working = 1;
const int ge_PRESETColonyShipState_Exhausted = 2;
const int ge_PRESETColonyShipState_Sealed = 3;
const int ge_PRESETColonyShipBeaconState_Idle = 0;
const int ge_PRESETColonyShipBeaconState_Capturing = 1;
const int ge_PRESETColonyShipBeaconState_Removed = 2;
const int ge_ColonyShipUIState_SealedUI = 0;
const int ge_ColonyShipUIState_UnderAttack = 1;
const int ge_ColonyShipUIState_Panic = 2;
const int ge_ColonyShipUIState_TargetedByClaimers = 3;
const int ge_ColonyShipUIState_TargetOfInfestedHoldout = 4;
const int ge_ColonyShipUIState_Available = 5;
const int ge_ColonyShipUIState__End = 6;
const int ge_BonusObjectiveEradicatorPositions_EradicatorNorth = 0;
const int ge_BonusObjectiveEradicatorPositions_EradicatorSouth = 1;
const int ge_BonusObjectiveEradicatorPositions_EradicatorEast = 2;
const int ge_BonusObjectiveEradicatorPositions_EradicatorWest = 3;
const int ge_BonusObjectiveEradicatorPositions_EradicatorCenter = 4;
const int ge_HybridSize_SmallDestroyerReaverNemesis = 0;
const int ge_HybridSize_LargeDominatorBehemoth = 1;
const int ge_PRESETClaimerWaveType_SmallA = 0;
const int ge_PRESETClaimerWaveType_SmallB = 1;
const int ge_PRESETClaimerWaveType_MediumA = 2;
const int ge_PRESETClaimerWaveType_MediumB = 3;
const int ge_PRESETClaimerWaveType_LargeA = 4;
const int ge_PRESETClaimerWaveType_LargeB = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int[4] gv_optionsDialogMenus;
int gv_optionsDialogAccept;
int[4] gv_optionsDialogLabels;
int gv_optionsDialogTitle;
int gv_optionsDialog;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
string gv_mapMusicTrack2;
string gv_mapMusicTrack3;
string gv_mapMusicTrack4;
playergroup gv_zergPlayers;
playergroup gv_amonPlayers;
playergroup gv_enemyPlayers;
int gv_leaderboardTimeScoreFinal;
int gv_leaderboardShuttleScore;
int gv_leaderboardBonusScoreFinal;
int gv_leaderboardBonusScoreFinal2;
timer gv_pauseMissionTimer;
timer gv_missionEventTimer;
int gv_missionEventCounter;
int[26] gv_missionEventList;
int gv_missionEventCurrent;
timer gv_enableAIInfestedBansheeCloak;
unitgroup gv_infestedSiegeTanks;
gs_RECORDColonyShipLocation[17] gv_colonyShipLocations;
int gv_colonyShipLocationsCount;
int gv_colonyShipsDestroyedCount;
int gv_colonyShipLaunchTransmissionCount;
bool gv_colonyShipLaunchTransmissionInitial;
bool gv_colonyShipLaunchTransmissionSecond;
int gv_colonyShipDualLaunchTransmissionCount;
int gv_objectiveDestroyedProtossTransmissionCount;
int gv_objectiveDestroyedInfestedTransmissionCount;
int gv_colonyShipAttackedTransmissionCount;
int gv_colonyShipLowLifeTransmissionCount;
int gv_colonyShipReminderTransmissionCount;
bool gv_colonyShipCanisterRetrievalActive;
bool gv_forceStartWarningFirst;
bool gv_forceStartInitiatingFirst;
int[gv_c_ColonyShip_MaxCount + 1] gv_forceStartOrder;
int gv_forceStartNextIndex;
int gv_panicEventCount;
bool gv_bonusObjective_MineFirst;
bool gv_bonusObjective_FailedMines;
bool gv_bonusObjective_EventFinished;
bool gv_bonusObjective_SoloOperativeTipAdded;
bool gv_bonusObjective_MusicPlaying;
unitgroup gv_bonusObjective_HatchedInfestedGroup;
unit gv_c_BonusObjective_Blightbringer;
int gv_bonusObjective_BlightbringerExplorePing;
bool gv_bonusObjective_BlightbringerActive;
timer gv_bonusObjective_BlightbringerExpire;
unitgroup gv_bonusObjective_BlightbringerAdds;
fixed gv_bonusObjective_Blightbringer_EggSmall;
fixed gv_bonusObjective_Blightbringer_EggLarge;
fixed gv_bonusObjective_Blightbringer_EggHatchTime;
fixed gv_bonusObjective_Blightbringer_AttackGroundCD;
fixed gv_bonusObjective_Blightbringer_AttackAirCD;
unit gv_eradicatorTypeCannon;
unit gv_eradicatorTypeMissile;
unit gv_enragedEradicator;
int gv_eradicatorTypeCannonPosition;
timer gv_eradicatorExpireTimer;
unitgroup gv_bonusObjective_Eradicator_Adds;
bool gv_bonusObjective_Eradicator_CannonMoving;
int[3] gv_scoreScreen_InfestedKills;
fixed[gv_c_InfestedTownCount + 1] gv_infestedTownValue;
region[gv_c_InfestedTownCount + 1] gv_infestedTownAttackOriginOrder;
int gv_infestedAttackPlayer;
unitgroup gv_lastCreatedInfestedTransportCargo;
unitgroup gv_infestedRageWaveUnits;
unitgroup gv_nydusUnloadedUnits;
string gv_tier01_AliasZealot;
string gv_tier02_AliasStalker;
string gv_tier03_AliasImmortal;
string gv_tier04_AliasColossus;
unitgroup gv_protossBaseAttackGroup;
int gv_claimWaveTransmissionCount;
int gv_protossReachTankTransmissionCount;
int gv_protossClaimWavesSent;
int gv_sortOrderIndexStarter;
int[13] gv_sortOrderArray;
point gv_defeatLocation;
int gv_victoryIndex;
int gv_objectiveDestroyZergBase;
int gv_objectiveExtractColonyShipCount;
int gv_objectiveExtractColonyShipMax;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDoNotLetDevicesBeDestroyed;
int gv_objectiveDoNotLetDevicesBeDestroyedMax;
int gv_objectiveExploreUmojanMine_Kill;
bool gv_objectiveExploreUmojanMine_Kill_TextDone;
int gv_objectiveExploreScienceFacility_EradicatorsDestroyed;
int gv_objectiveExploreScienceFacility_Destroy;
bool gv_objectiveExploreScienceFacility_Destroy_TextDone;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogMenus[init_i] = c_invalidDialogControlId;
    }
    gv_optionsDialogAccept = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogLabels[init_i] = c_invalidDialogControlId;
    }
    gv_optionsDialogTitle = c_invalidDialogControlId;
    gv_optionsDialog = c_invalidDialogId;
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_zergPlayers = PlayerGroupEmpty();
    gv_amonPlayers = PlayerGroupEmpty();
    gv_enemyPlayers = PlayerGroupEmpty();
    gv_pauseMissionTimer = TimerCreate();
    gv_missionEventTimer = TimerCreate();
    gv_enableAIInfestedBansheeCloak = TimerCreate();
    gv_infestedSiegeTanks = UnitGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_colonyShipLocations[init_i].lv_state = ge_PRESETColonyShipState_Available;
        gv_colonyShipLocations[init_i].lv_protossClaimerWaveUnitGroup = UnitGroupEmpty();
        gv_colonyShipLocations[init_i].lv_forceStartTimer = TimerCreate();
    }
    gv_colonyShipLaunchTransmissionInitial = true;
    gv_colonyShipLaunchTransmissionSecond = true;
    gv_bonusObjective_HatchedInfestedGroup = UnitGroupEmpty();
    gv_c_BonusObjective_Blightbringer = UnitFromId(1004);
    gv_bonusObjective_BlightbringerExplorePing = c_invalidPingId;
    gv_bonusObjective_BlightbringerExpire = TimerCreate();
    gv_bonusObjective_BlightbringerAdds = UnitGroupEmpty();
    gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorEast;
    gv_eradicatorExpireTimer = TimerCreate();
    gv_bonusObjective_Eradicator_Adds = UnitGroupEmpty();
    gv_lastCreatedInfestedTransportCargo = UnitGroupEmpty();
    gv_infestedRageWaveUnits = UnitGroupEmpty();
    gv_nydusUnloadedUnits = UnitGroupEmpty();
    gv_protossBaseAttackGroup = UnitGroupEmpty();
    gv_sortOrderIndexStarter = 1;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveExploreUmojanMine_Kill = c_invalidObjectiveId;
    gv_objectiveExploreScienceFacility_Destroy = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_InfestUnit (unit lp_infested);
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_PauseMissionEventTimerFor (fixed lp_pauseTime);
void gf_ShuffleClaimerWaveArray (int lp_indexStart, int lp_indexEnd);
void gf_LaunchUnitToTargetPointWithMover (unit lp_unit, point lp_targetPoint, string lp_mover);
void gf_SetupColonyShipasObjective (int lp_tankIndex);
int gf_GetColonyShipIndexFromTankUnit (unit lp_colonyShipUnit);
int gf_GetColonyShipIndexFromBeaconRegion (region lp_beaconRegion);
void gf_DisableColonyShip (int lp_tankIndex);
void gf_PlayerInitiatesLaunchingColonyShip (int lp_colonyShipIndex);
void gf_PlayerFinishesLaunchingColonyShipQ (int lp_colonyShipIndex);
void gf_LaunchColonyShip (int lp_colonyShipIndex);
void gf_AnimateColonyShipTakeoff (int lp_colonyShipIndex);
void gf_ProtossDestroysColonyShipQ (int lp_colonyShipIndex);
void gf_InfestedDestroysColonyShip (int lp_colonyShipIndex);
void gf_SetColonyShipUIState (int lp_tankIndex, int lp_uIState, bool lp_enabled);
void gf_UpdateColonyShipUI (int lp_tankIndex);
void gf_RemoveActivationBeacon (unit lp_beacon);
int gf_PanicShuttleNextIndex ();
void gf_BonusObjectivePauseUnpauseUnitGroup (bool lp_pauseUnpause, unitgroup lp_pausingUnitGroup);
void gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit);
void gf_BonusObjectiveBlightbringerMoveToNewEggSpot (unit lp_blightbringer, point lp_targetPoint);
void gf_BonusObjectiveBlightbringerEgg (unit lp_blightbringer, point lp_eggPoint, bool lp_bigEgg);
void gf_BonusObjectiveBlightbringerCleanup ();
void gf_BonusObjectiveEradicatorMissilesRing ();
void gf_BonusObjectiveEradicatorMissilesAttackDirectly ();
void gf_BonusObjectiveEradicatorMissilesEnrageRing ();
void gf_BonusObjectiveEradicatorCannonFiveWayShot ();
void gf_BonusObjectiveEradicatorCannonFanAttack ();
void gf_BonusObjectiveEradicatorCannonAttack (point lp_target);
void gf_BonusObjectiveEradicatorCannonAttackNoTurn (point lp_target);
void gf_AIMonitorBullyRebuildRegion (playergroup lp_players, region lp_bullyRebuildRegion);
point gf_InfestedAttackWaveSpawn ();
void gf_InfestedTransportCargo (unit lp_transport, unitgroup lp_cargo, int lp_tankIndex);
void gf_CreateInfestedTransportCargo (int lp_player, int lp_resourceAmount, int lp_techLevel, point lp_spawnLocation);
void gf_RunInfestedRageWaves (int lp_colonyShipIndex);
void gf_InfestedRageWavesFirst (int lp_colonyShipIndex);
void gf_InfestedRageWavesEarly (int lp_colonyShipIndex);
void gf_InfestedRageWavesMid (int lp_colonyShipIndex);
void gf_InfestedRageWavesLate (int lp_colonyShipIndex);
void gf_SendInfestedRageWave (int lp_colonyShipIndex, region lp_spawnRegion, bool lp_waveStartsBurrowed, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount);
void gf_SendHybridinRageWave (int lp_colonyShipIndex, int lp_hybridUnitType, int lp_count, region lp_spawnRegion);
void gf_AddInfestedUnitsToRageWave (int lp_colonyShipIndex, string lp_infestedUnitType, int lp_count, region lp_spawnRegion);
void gf_BurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit);
void gf_RageWaveInfestedTransport (int lp_colonyShipIndex, int lp_player, int lp_resourceAmount, int lp_techLevel, point lp_spawn);
void gf_SpecialRageWaveJustMoreDudes (int lp_colonyShipIndex);
void gf_SpecialRageWaveExploders (int lp_colonyShipIndex);
void gf_SpecialRageWaveEggPoppers (int lp_colonyShipIndex);
void gf_GrowAndHatchEggCluster (doodad lp_eggClusterDoodad, point lp_eggClusterPoint);
void gf_SendInfestedEggPopperWave (int lp_colonyShipIndex, point lp_launchPoint, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount);
void gf_AddInfestedUnitsToEggPopperWave (int lp_colonyShipIndex, string lp_infestedUnitType, int lp_count, point lp_launchPoint);
void gf_SpecialRageWavesColonyShipExplodes (int lp_colonyShipIndex);
void gf_SpecialRageWavesSiegeTanks (int lp_colonyShipIndex);
void gf_UnloadInfestedSiegeTankFromOverlord (point lp_spawnPoint, point lp_dropPoint);
void gf_SpecialRageWavesNydusWorms (int lp_colonyShipIndex);
void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player, int lp_maxCount);
void gf_UnloadUnitGroupfromNydusWorm (unit lp_nydusWorm, unitgroup lp_transportedGroup, int lp_colonyShipIndex);
void gf_SpecialRageWavesNydusLogic (unit lp_nydusWorm, int lp_targetedTank);
void gf_SpecialRageWavesFlyers (int lp_colonyShipIndex);
void gf_SpecialRageWavesFlyersTransportDespawn (unit lp_transport, point lp_despawn);
void gf_SendInfestedRageWaveFlyers (int lp_colonyShipIndex, region lp_spawnRegion, int lp_infestedBansheeCount, int lp_mutaliskCount, int lp_guardianCount, int lp_corruptorCount);
string gf_TransportType (int lp_player);
void gf_DeployWarpPrismAndWarpInBaseAttacks (point lp_targetPoint);
void gf_WarpPrismBaseAttackReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount);
void gf_BaseAttackTransmissionQ (playergroup lp_transmissionPlayers);
void gf_RunProtossClaimerWave (int lp_claimerWaveSize);
void gf_RemoveClaimerWaveTransport (unit lp_transport, point lp_retreatLocation);
int gf_GetProtossClaimerWaveTarget ();
void gf_TrackClaimerAttackRouteandWait (unitgroup lp_inTransitUnitGroup, text lp_pingTooltip, int lp_colonyShipIndex);
void gf_DrawClaimerAttackRoute (point lp_startPoint, point lp_endPoint);
void gf_TrackClaimerWaveTargetPingandWait (int lp_claimerWaveTargetIndex, unitgroup lp_attackingUnits);
void gf_WarpOutProtossUnit (unit lp_warpingUnit);
void gf_WarpPrismClaimerReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount, int lp_colonyShipIndex);
void gf_ProtossClaimerWaveReachesTargetQ (int lp_colonyShipIndex);
abilcmd gf_GetUnitTypeSuperWarpGateCommand (string lp_warpInType);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_CreateOptionsDialog;
trigger gt_OpenOptions;
trigger gt_CloseOptions;
trigger gt_InitializeColonyShipLocations;
trigger gt_Init01LoadData;
trigger gt_Init02LoadingComplete;
trigger gt_Init03Players;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;
trigger gt_CharExample;
trigger gt_InfestMercs;
trigger gt_CreateColonyShipPings;
trigger gt_MissionProgression;
trigger gt_EnableAIInfestedBansheeCloak;
trigger gt_InfestedComeDownRamp;
trigger gt_NeverTakeMeAliveQ;
trigger gt_AberrationSurpriseQ;
trigger gt_MovingEquipmentQ;
trigger gt_SiegeTanksSiegeUp;
trigger gt_EffortValue;
trigger gt_PlayerEntersColonyShipBeacon;
trigger gt_PlayerInitiatesLaunchingTransmissionQ;
trigger gt_ColonyShipAttackedWarning;
trigger gt_ColonyShipAttackedWarningInfesetedTransmissionQ;
trigger gt_ColonyShipAttackedWarningAmonTransmissionQ;
trigger gt_ColonyShipLowLifeWarningInfesetedTransmissionQ;
trigger gt_ColonyShipLowLifeWarningAmonTransmissionQ;
trigger gt_ColonyShipIsDestroyed;
trigger gt_ColonyShipsDestroyedWarningQ;
trigger gt_ColonyShipsObjectiveReminderQ;
trigger gt_ForceColonyShipSetup;
trigger gt_ForceColonyShipUpdateIndex;
trigger gt_PANICEvent;
trigger gt_ForceColonyShipWarningTransmissionQ;
trigger gt_ForceColonyShipInitiatingTransmissionQ;
trigger gt_BonusObjectiveStartA;
trigger gt_BonusObjectiveStartB;
trigger gt_BonusObjectiveRevealMinesQ;
trigger gt_BonusObjectiveProximityMines;
trigger gt_BonusObjectiveRevealScienceFacilityQ;
trigger gt_BonusObjectiveProximityRevealScienceFacility;
trigger gt_BonusObjectiveCollectedMinesQ;
trigger gt_BonusObjectiveCollectedFacilityQ;
trigger gt_BonusObjectiveBlightbringerStart;
trigger gt_BonusObjectiveBlightbringerBattleAI;
trigger gt_BonusObjectiveBlightbringerEggCreated;
trigger gt_BonusObjectiveBlightbringerDies;
trigger gt_BonusObjectiveBlightbringerTimerExpiresQ;
trigger gt_BonusObjectiveBlightbringerTimerUpdate;
trigger gt_BonusObjectiveBlightbringerReminderQ;
trigger gt_BonusObjectiveCoopStartScienceFacility;
trigger gt_BonusObjectiveCoopTimerManagement;
trigger gt_BonusObjectiveEradicatorTimerExpires;
trigger gt_BonusObjectiveEradicatorReminderQ;
trigger gt_BonusObjectiveEradicatorExpiresQ;
trigger gt_BonusObjectiveCoopSpawnAdds;
trigger gt_BonusObjectiveCoopAddsLogic;
trigger gt_BonusObjectiveActivateEradicatorTransmissionQ;
trigger gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ;
trigger gt_BonusObjectiveEradicatorTypeMissile;
trigger gt_BonusObjectiveEradicatorTypeCannon;
trigger gt_BonusObjectiveEradicatorTypeMissileEnrage;
trigger gt_BonusObjectiveEradicatorTypeCannonEnrage;
trigger gt_BonusObjectiveEradicatorDies;
trigger gt_TrackInfestedKills;
trigger gt_EnemyAttackingQ;
trigger gt_SetupInfestedPoints;
trigger gt_RemoveStolenRageWaveUnit;
trigger gt_SetupProtossAIWarpInUnits;
trigger gt_BASEAttack01;
trigger gt_BASEAttack02;
trigger gt_BASEAttack03;
trigger gt_BASEAttack04;
trigger gt_BASEAttack05;
trigger gt_BASEAttack06;
trigger gt_BASEAttack07;
trigger gt_ProtossBaseAttackUnitWarpingIn;
trigger gt_CLAIMERWaveSmall;
trigger gt_CLAIMERWaveMedium;
trigger gt_CLAIMERWaveLarge;
trigger gt_InitializeClaimerWaveTargetPriority;
trigger gt_ClaimWaveUnitWarpedIn;
trigger gt_ProtossClaimerWaveTransmissionQ;
trigger gt_ClaimerWaveDestroyedTransmissionQ;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryDestoryZergBaseCompleted;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_ObjectiveExtractColonyShipCreate;
trigger gt_ObjectiveExtractColonyShipComplete;
trigger gt_ObjectiveExtractColonyShipUpdate;
trigger gt_ObjectiveExtractColonyShipFailed;
trigger gt_ObjectiveDoNotLetDevicesBeDestroyedCreate;
trigger gt_ObjectiveDoNotLetDevicesBeDestroyedComplete;
trigger gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate;
trigger gt_ObjectivePreventProtossFailed;
trigger gt_ObjectiveExploreUmojanMineKillBlightbringerCreate;
trigger gt_ObjectiveExploreUmojanMineUpdate;
trigger gt_ObjectiveExploreUmojanMineKillBlightbringerComplete;
trigger gt_ObjectiveExploreUmojanMineFailed;
trigger gt_ObjectiveExploreScienceFacilityDestroyCreate;
trigger gt_ObjectiveExploreScienceFacilityUpdate;
trigger gt_ObjectiveExploreScienceFacilityDestroyComplete;
trigger gt_ObjectiveExploreScienceFacilityFailed;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_InfestUnit (unit lp_infested) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_infested, "NeuralParasiteEffect") == false) && (UnitGetType(lp_infested) != "InfestedCivilian") && (UnitGetType(lp_infested) != "InfestedTerranCampaign") && (UnitGetType(lp_infested) != "InfestedExploder") && (UnitGetType(lp_infested) != "InfestedAbomination") && (UnitGetType(lp_infested) != "Infestor")) {
        UnitBehaviorAddPlayer(lp_infested, "NeuralParasiteEffect", UnitGetOwner(lp_infested), 1);
    }

}

trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;

void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;

    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}

bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;

    // Variable Declarations
    bool lv_missionEvent;

    // Automatic Variable Declarations
    trigger autoA7290454_val;

    // Variable Initialization

    // Implementation
    autoA7290454_val = lp_missionEventTrigger;
    if (autoA7290454_val == gt_PANICEvent) {
        lv_missionEvent = true;
        gv_missionEventCounter += 1;
        gv_missionEventList[gv_missionEventCounter] = ge_MissionEventType_PanicAttack;
    }
    else if (autoA7290454_val == gt_CLAIMERWaveSmall) {
        lv_missionEvent = true;
        gv_missionEventCounter += 1;
        gv_missionEventList[gv_missionEventCounter] = ge_MissionEventType_TransportAttack;
    }
    else if (autoA7290454_val == gt_CLAIMERWaveMedium) {
        lv_missionEvent = true;
        gv_missionEventCounter += 1;
        gv_missionEventList[gv_missionEventCounter] = ge_MissionEventType_TransportAttack;
    }
    else if (autoA7290454_val == gt_CLAIMERWaveLarge) {
        lv_missionEvent = true;
        gv_missionEventCounter += 1;
        gv_missionEventList[gv_missionEventCounter] = ge_MissionEventType_TransportAttack;
    }
    else {
    }
    while (!((TimerGetElapsed(gv_missionEventTimer) >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
        if ((lv_missionEvent == true)) {
            gv_missionEventCurrent += 1;
        }

    }

    return true;
}

trigger auto_gf_PauseMissionEventTimerFor_Trigger = null;
fixed auto_gf_PauseMissionEventTimerFor_lp_pauseTime;

void gf_PauseMissionEventTimerFor (fixed lp_pauseTime) {
    auto_gf_PauseMissionEventTimerFor_lp_pauseTime = lp_pauseTime;

    if (auto_gf_PauseMissionEventTimerFor_Trigger == null) {
        auto_gf_PauseMissionEventTimerFor_Trigger = TriggerCreate("auto_gf_PauseMissionEventTimerFor_TriggerFunc");
    }

    TriggerExecute(auto_gf_PauseMissionEventTimerFor_Trigger, false, false);
}

bool auto_gf_PauseMissionEventTimerFor_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_pauseTime = auto_gf_PauseMissionEventTimerFor_lp_pauseTime;

    // Automatic Variable Declarations
    // Implementation
    TimerPause(gv_missionEventTimer, true);
    TimerStart(gv_pauseMissionTimer, MaxF(TimerGetRemaining(gv_pauseMissionTimer), lp_pauseTime), false, c_timeAI);
    while (!((TimerGetRemaining(gv_pauseMissionTimer) <= 0.0))) {
        Wait(0.5, c_timeGame);
    }
    TimerPause(gv_missionEventTimer, false);
    return true;
}

void gf_ShuffleClaimerWaveArray (int lp_indexStart, int lp_indexEnd) {
    // Variable Declarations
    int lv_shuffleTemp;
    int lv_shuffleIndex;

    // Automatic Variable Declarations
    const int autoCF1E5D93_n = 6;
    int autoCF1E5D93_i;

    // Variable Initialization

    // Implementation
    for (autoCF1E5D93_i = 1; autoCF1E5D93_i <= autoCF1E5D93_n; autoCF1E5D93_i += 1) {
        lv_shuffleIndex = RandomInt(lp_indexStart, (lp_indexEnd - 1));
        lv_shuffleTemp = gv_sortOrderArray[lv_shuffleIndex];
        gv_sortOrderArray[lv_shuffleIndex] = gv_sortOrderArray[lp_indexEnd];
        gv_sortOrderArray[lp_indexEnd] = lv_shuffleTemp;
    }
}

void gf_LaunchUnitToTargetPointWithMover (unit lp_unit, point lp_targetPoint, string lp_mover) {
    // Variable Declarations
    int lv_o;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_o = UnitGetOwner(lp_unit);

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogMover, lp_mover) == true) && (CatalogEntryIsDefault(c_gameCatalogMover, lp_mover) == false) && (CatalogEntryScope(c_gameCatalogMover, lp_mover) == "CMoverMissile")) {
        CatalogReferenceSet("Effect,UnitLaunchToTargetPointLM,Movers[0].Link", lv_o, (lp_mover));
        UnitCreateEffectPoint(lp_unit, gv_launchUnitToTargetPointBaseEffect, lp_targetPoint);
    }

}

void gf_SetupColonyShipasObjective (int lp_tankIndex) {
    // Variable Declarations
    const fixed lv_c_RevealerRange = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit == null)) {
        return ;
    }

    UnitBehaviorAdd(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, "SuppressCloak", gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1);
    UnitStatusBarOverride(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, c_unitStatusGroupAll);
    libNtve_gf_ShowHideUnit(gv_colonyShipLocations[lp_tankIndex].lv_beaconUnit, true);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_colonyShipLocations[lp_tankIndex].lv_beaconUnit, null, StringExternal("Param/Value/B8CD2B19"), StringExternal("Param/Value/05391F34"));
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/CB135A05"), gv_colonyShipLocations[lp_tankIndex].lv_beaconUnit, "Ref_Center");
    libHots_gf_StoreTextTagForUnit(gv_colonyShipLocations[lp_tankIndex].lv_beaconUnit, 1, TextTagLastCreated());
    libHots_gf_StoreActorForUnit(gv_colonyShipLocations[lp_tankIndex].lv_beaconUnit, 1, libNtve_gf_ActorLastCreated());
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit), StringExternal("Param/Value/A6297CCB"));
    libHots_gf_StorePingForUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1, PingLastCreated());
    libCOMI_gf_ShowHidePingCoop(PingLastCreated(), false);
    gf_UpdateColonyShipUI(lp_tankIndex);
}

int gf_GetColonyShipIndexFromTankUnit (unit lp_colonyShipUnit) {
    // Variable Declarations
    int lv_tankIter;

    // Automatic Variable Declarations
    int auto45E26AD5_ae;
    const int auto45E26AD5_ai = 1;

    // Variable Initialization

    // Implementation
    auto45E26AD5_ae = gv_colonyShipLocationsCount;
    lv_tankIter = 1;
    for ( ; ( (auto45E26AD5_ai >= 0 && lv_tankIter <= auto45E26AD5_ae) || (auto45E26AD5_ai < 0 && lv_tankIter >= auto45E26AD5_ae) ) ; lv_tankIter += auto45E26AD5_ai ) {
        if ((gv_colonyShipLocations[lv_tankIter].lv_colonyShipUnit == lp_colonyShipUnit)) {
            return lv_tankIter;
        }

    }
    return 0;
}

int gf_GetColonyShipIndexFromBeaconRegion (region lp_beaconRegion) {
    // Variable Declarations
    int lv_tankIter;

    // Automatic Variable Declarations
    int auto9292E08D_ae;
    const int auto9292E08D_ai = 1;

    // Variable Initialization

    // Implementation
    auto9292E08D_ae = gv_colonyShipLocationsCount;
    lv_tankIter = 1;
    for ( ; ( (auto9292E08D_ai >= 0 && lv_tankIter <= auto9292E08D_ae) || (auto9292E08D_ai < 0 && lv_tankIter >= auto9292E08D_ae) ) ; lv_tankIter += auto9292E08D_ai ) {
        if ((gv_colonyShipLocations[lv_tankIter].lv_beaconRegion == lp_beaconRegion)) {
            return lv_tankIter;
        }

    }
    return 0;
}

void gf_DisableColonyShip (int lp_tankIndex) {
    // Variable Declarations
    region lv_removeBullies;
    int lv_bullyPlayerIter;
    unit lv_removedBully;

    // Automatic Variable Declarations
    playergroup autoFA2BCF72_g;
    unitgroup autoD57D6471_g;
    int autoD57D6471_u;

    // Variable Initialization

    // Implementation
    libNtve_gf_ReplaceUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, gv_c_ColonyShipObjective_Dead, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    UnitRemove(gv_colonyShipLocations[lp_tankIndex].lv_beaconUnit);
    gv_colonyShipLocations[lp_tankIndex].lv_state = ge_PRESETColonyShipState_Sealed;
    gf_SetColonyShipUIState(lp_tankIndex, ge_ColonyShipUIState_SealedUI, true);
    gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit = null;
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, "SetMinimapVisibility");
    UnitSetState(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, c_unitStateSelectable, false);
    UnitSetState(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, c_unitStateInvulnerable, false);
    UnitSetState(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitCreate(1, "PathingBlocker8x8Diagonal", c_unitCreateIgnorePlacement, 0, gv_colonyShipLocations[lp_tankIndex].lv_colonyShipPoint, UnitGetFacing(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit));
    lv_removeBullies = RegionFromName(("ColonyShip Disabled " + IntToString(lp_tankIndex)));
    if ((lv_removeBullies != null)) {
        autoFA2BCF72_g = gv_enemyPlayers;
        lv_bullyPlayerIter = -1;
        while (true) {
            lv_bullyPlayerIter = PlayerGroupNextPlayer(autoFA2BCF72_g, lv_bullyPlayerIter);
            if (lv_bullyPlayerIter < 0) { break; }
            autoD57D6471_g = UnitGroup(null, lv_bullyPlayerIter, lv_removeBullies, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoD57D6471_u = UnitGroupCount(autoD57D6471_g, c_unitCountAll);
            for (;; autoD57D6471_u -= 1) {
                lv_removedBully = UnitGroupUnitFromEnd(autoD57D6471_g, autoD57D6471_u);
                if (lv_removedBully == null) { break; }
                UnitRemove(lv_removedBully);
            }
        }
    }

}

void gf_PlayerInitiatesLaunchingColonyShip (int lp_colonyShipIndex) {
    // Variable Declarations
    bool lv_tankAttackedTransmissionBool;
    bool lv_tankLowLifeTransmissionBool;
    unit lv_progressBarUnit;
    int lv_timerMax;
    int lv_timerCount;

    // Automatic Variable Declarations
    playergroup autoD94AEB53_g;
    int autoD94AEB53_var;

    // Variable Initialization

    // Implementation
    lv_timerMax = (gv_c_ColonyShipHoldoutTime + FixedToInt(TimerGetDuration(gv_colonyShipLocations[lp_colonyShipIndex].lv_forceStartTimer)));
    lv_timerCount = gv_c_ColonyShipHoldoutTime;
    gv_colonyShipLocations[lp_colonyShipIndex].lv_state = ge_PRESETColonyShipState_Working;
    UnitSetOwner(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, gv_pLAYER_10_ColonyShipTARGET, true);
    gf_RemoveActivationBeacon(gv_colonyShipLocations[lp_colonyShipIndex].lv_beaconUnit);
    Wait(2.0, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarWideDummy", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit));
    lv_progressBarUnit = UnitLastCreated();
    UnitSetHeight(lv_progressBarUnit, 2.0, 0.0);
    libCOMI_gf_DisplayUnitProgressBar(lv_progressBarUnit, StringExternal("Param/Value/2EB011DE"), 0, lv_timerMax);
    libCOMI_gf_SetUnitProgressBarIsWideBar(lv_progressBarUnit, true);
    libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
    libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, lv_timerCount);
    gf_SetColonyShipUIState(lp_colonyShipIndex, ge_ColonyShipUIState_TargetOfInfestedHoldout, true);
    autoD94AEB53_g = libCOMI_gf_HumanPlayers();
    autoD94AEB53_var = -1;
    while (true) {
        autoD94AEB53_var = PlayerGroupNextPlayer(autoD94AEB53_g, autoD94AEB53_var);
        if (autoD94AEB53_var < 0) { break; }
        UIAlertPoint("Trigger", autoD94AEB53_var, StringExternal("Param/Value/B8D9895E"), null, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint);
    }
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_PlayerInitiatesLaunchingTransmissionQ, true, false);
    SoundPlayForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_RunInfestedRageWaves(lp_colonyShipIndex);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit) == true) && (lv_timerCount > 0)) {
        libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
        libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, lv_timerCount);
        lv_timerCount -= 1;
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_ShowHideUnitProgressBar(lv_progressBarUnit, false);
    UnitRemove(lv_progressBarUnit);
}

void gf_PlayerFinishesLaunchingColonyShipQ (int lp_colonyShipIndex) {
    // Automatic Variable Declarations
    unitgroup auto84896655_g;
    int auto84896655_u;
    unit auto84896655_var;
    playergroup auto8C3A2B83_g;
    int auto8C3A2B83_var;
    playergroup auto85AF491A_g;
    int auto85AF491A_var;

    // Implementation
    gv_colonyShipLocations[lp_colonyShipIndex].lv_state = ge_PRESETColonyShipState_Exhausted;
    UnitSetOwner(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, gv_pLAYER_08_ColonyShip, true);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, "SetMinimapVisibility");
    gf_SetColonyShipUIState(lp_colonyShipIndex, ge_ColonyShipUIState_SealedUI, true);
    libNtve_gf_MakeUnitInvulnerable(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, true);
    UnitSetState(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, c_unitStateStatusBar, false);
    UnitSetState(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, c_unitStateHighlightable, false);
    UnitSetState(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetState(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, c_unitStateTooltipable, false);
    UnitSetState(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit, c_unitStateSelectable, false);
    auto84896655_g = gv_infestedRageWaveUnits;
    auto84896655_u = UnitGroupCount(auto84896655_g, c_unitCountAll);
    for (;; auto84896655_u -= 1) {
        auto84896655_var = UnitGroupUnitFromEnd(auto84896655_g, auto84896655_u);
        if (auto84896655_var == null) { break; }
        if ((UnitGetCustomValue(auto84896655_var, 0) == lp_colonyShipIndex)) {
            gf_BurrowAndRemoveInfestedWaveUnit(auto84896655_var);
        }

    }
    gv_objectiveExtractColonyShipCount += 1;
    TriggerExecute(gt_ObjectiveExtractColonyShipUpdate, true, false);
    TriggerExecute(gt_EffortValue, true, false);
    if ((gv_objectiveExtractColonyShipCount >= gv_objectiveExtractColonyShipMax)) {
        gv_victoryIndex = lp_colonyShipIndex;
        TriggerExecute(gt_VictoryDestoryZergBaseCompleted, true, false);
        return ;
    }
    else {
        gf_AnimateColonyShipTakeoff(lp_colonyShipIndex);
    }
    Wait(2.0, c_timeAI);
    auto8C3A2B83_g = libCOMI_gf_HumanPlayers();
    auto8C3A2B83_var = -1;
    while (true) {
        auto8C3A2B83_var = PlayerGroupNextPlayer(auto8C3A2B83_g, auto8C3A2B83_var);
        if (auto8C3A2B83_var < 0) { break; }
        VisRevealerDestroy(gv_colonyShipLocations[lp_colonyShipIndex].lv_revealer[auto8C3A2B83_var]);
    }
    TriggerQueueEnter();
    auto85AF491A_g = PlayerGroupAll();
    auto85AF491A_var = -1;
    while (true) {
        auto85AF491A_var = PlayerGroupNextPlayer(auto85AF491A_g, auto85AF491A_var);
        if (auto85AF491A_var < 0) { break; }
        UIAlertPoint("Trigger", auto85AF491A_var, StringExternal("Param/Value/506C6D79"), null, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint);
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint, 10.0, Color(0.00, 100.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_objectiveExtractColonyShipCount == 1)) {
        libCOMI_gf_SendMissionTransmission("CaptureCompleteFirstJC", true, -1);
    }
    else if (((gv_objectiveExtractColonyShipMax - gv_objectiveExtractColonyShipCount) == 2)) {
        libCOMI_gf_SendMissionTransmission("ProgressSecondJC", true, -1);
    }
    else if ((gv_objectiveExtractColonyShipCount == 2)) {
        libCOMI_gf_SendMissionTransmission("ProgressFirstJC", true, -1);
    }
    else if (true) {
        libCOMI_gf_SendMissionTransmission("CaptureCompleteRepeatJC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

void gf_LaunchColonyShip (int lp_colonyShipIndex) {
    // Automatic Variable Declarations
    // Implementation
    gf_PlayerInitiatesLaunchingColonyShip(lp_colonyShipIndex);
    if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit) == true)) {
        gf_PlayerFinishesLaunchingColonyShipQ(lp_colonyShipIndex);
    }

}

trigger auto_gf_AnimateColonyShipTakeoff_Trigger = null;
int auto_gf_AnimateColonyShipTakeoff_lp_colonyShipIndex;

void gf_AnimateColonyShipTakeoff (int lp_colonyShipIndex) {
    auto_gf_AnimateColonyShipTakeoff_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_AnimateColonyShipTakeoff_Trigger == null) {
        auto_gf_AnimateColonyShipTakeoff_Trigger = TriggerCreate("auto_gf_AnimateColonyShipTakeoff_TriggerFunc");
    }

    TriggerExecute(auto_gf_AnimateColonyShipTakeoff_Trigger, false, false);
}

bool auto_gf_AnimateColonyShipTakeoff_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_AnimateColonyShipTakeoff_lp_colonyShipIndex;

    // Variable Declarations
    unit lv_colonistShip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_colonistShip = gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit;
    UnitIssueOrder(lv_colonistShip, Order(AbilityCommand("IndustrialShipLiftOff", 0)), c_orderQueueReplace);
    Wait(13.0, c_timeGame);
    UnitRemove(lv_colonistShip);
    return true;
}

void gf_ProtossDestroysColonyShipQ (int lp_colonyShipIndex) {
    // Variable Declarations
    fixed lv_timerTime;

    // Automatic Variable Declarations
    playergroup auto28FF006B_g;
    int auto28FF006B_var;
    playergroup autoD842F4B9_g;
    int autoD842F4B9_var;

    // Variable Initialization

    // Implementation
    Wait(2.0, c_timeAI);
    TriggerQueueEnter();
    auto28FF006B_g = libCOMI_gf_HumanPlayers();
    auto28FF006B_var = -1;
    while (true) {
        auto28FF006B_var = PlayerGroupNextPlayer(auto28FF006B_g, auto28FF006B_var);
        if (auto28FF006B_var < 0) { break; }
        UIAlertPoint("Trigger", auto28FF006B_var, StringExternal("Param/Value/2B8BDA35"), null, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint);
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint, 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    autoD842F4B9_g = libCOMI_gf_HumanPlayers();
    autoD842F4B9_var = -1;
    while (true) {
        autoD842F4B9_var = PlayerGroupNextPlayer(autoD842F4B9_g, autoD842F4B9_var);
        if (autoD842F4B9_var < 0) { break; }
        VisRevealerDestroy(gv_colonyShipLocations[lp_colonyShipIndex].lv_revealer[autoD842F4B9_var]);
    }
}

void gf_InfestedDestroysColonyShip (int lp_colonyShipIndex) {
    // Variable Declarations
    fixed lv_timerTime;

    // Automatic Variable Declarations
    unitgroup autoC02902CA_g;
    int autoC02902CA_u;
    unit autoC02902CA_var;
    playergroup auto34895626_g;
    int auto34895626_var;
    playergroup autoAF06A61C_g;
    int autoAF06A61C_var;

    // Variable Initialization

    // Implementation
    autoC02902CA_g = UnitGroup(null, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionCircle(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC02902CA_u = UnitGroupCount(autoC02902CA_g, c_unitCountAll);
    for (;; autoC02902CA_u -= 1) {
        autoC02902CA_var = UnitGroupUnitFromEnd(autoC02902CA_g, autoC02902CA_u);
        if (autoC02902CA_var == null) { break; }
        if ((AIUnitGetWave(autoC02902CA_var) != null)) {
            AIRemoveUnitFromAnyWaves(autoC02902CA_var);
        }

    }
    Wait(2.0, c_timeAI);
    auto34895626_g = libCOMI_gf_HumanPlayers();
    auto34895626_var = -1;
    while (true) {
        auto34895626_var = PlayerGroupNextPlayer(auto34895626_g, auto34895626_var);
        if (auto34895626_var < 0) { break; }
        VisRevealerDestroy(gv_colonyShipLocations[lp_colonyShipIndex].lv_revealer[auto34895626_var]);
    }
    autoAF06A61C_g = libCOMI_gf_HumanPlayers();
    autoAF06A61C_var = -1;
    while (true) {
        autoAF06A61C_var = PlayerGroupNextPlayer(autoAF06A61C_g, autoAF06A61C_var);
        if (autoAF06A61C_var < 0) { break; }
        UIAlertPoint("Trigger", autoAF06A61C_var, StringExternal("Param/Value/0FABD2CB"), null, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint);
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint, 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
}

void gf_SetColonyShipUIState (int lp_tankIndex, int lp_uIState, bool lp_enabled) {
    // Variable Declarations
    unit lv_tank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(lp_uIState)] = lp_enabled;
}

trigger auto_gf_UpdateColonyShipUI_Trigger = null;
int auto_gf_UpdateColonyShipUI_lp_tankIndex;

void gf_UpdateColonyShipUI (int lp_tankIndex) {
    auto_gf_UpdateColonyShipUI_lp_tankIndex = lp_tankIndex;

    if (auto_gf_UpdateColonyShipUI_Trigger == null) {
        auto_gf_UpdateColonyShipUI_Trigger = TriggerCreate("auto_gf_UpdateColonyShipUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateColonyShipUI_Trigger, false, false);
}

bool auto_gf_UpdateColonyShipUI_TriggerFunc (bool testConds, bool runActions) {
    int lp_tankIndex = auto_gf_UpdateColonyShipUI_lp_tankIndex;

    int init_i;

    // Variable Declarations
    unit lv_tank;
    timer lv_claimerPingLife;
    int[7] lv_eventPing;
    int lv_eventIter;
    int lv_eventCurrent;

    // Automatic Variable Declarations
    const int auto4F914350_ae = 6;
    const int auto4F914350_ai = 1;
    const int autoD128A6C1_ae = 6;
    const int autoD128A6C1_ai = 1;

    // Variable Initialization
    lv_claimerPingLife = TimerCreate();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_eventPing[init_i] = c_invalidPingId;
    }

    // Implementation
    lv_tank = gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit;
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_tank) == true)) {
        if (((gv_colonyShipLocations[lp_tankIndex].lv_state == ge_PRESETColonyShipState_Exhausted) || (gv_colonyShipLocations[lp_tankIndex].lv_state == ge_PRESETColonyShipState_Sealed) || (gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_SealedUI)] == true))) {
            break;
        }

        if (((gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_UnderAttack)] == true) || (gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_Panic)] == true) || (gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_TargetOfInfestedHoldout)] == true) || (gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_TargetedByClaimers)] == true))) {
            libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(lv_tank, 1), true);
        }

        if ((gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_UnderAttack)] == true)) {
            if ((lv_eventPing[(ge_ColonyShipUIState_UnderAttack)] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit), 270.0, "PingWarning", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/95D392A9"));
                lv_eventCurrent = (ge_ColonyShipUIState_UnderAttack);
                lv_eventPing[(ge_ColonyShipUIState_UnderAttack)] = PingLastCreated();
                PingSetScale(libHots_gf_PingStoredForUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1), 0.75);
            }

        }
        else if ((gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_TargetedByClaimers)] == true)) {
            if ((lv_eventPing[(ge_ColonyShipUIState_TargetedByClaimers)] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit), 270.0, "PingAlert", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FC736644"));
                lv_eventCurrent = (ge_ColonyShipUIState_TargetedByClaimers);
                lv_eventPing[(ge_ColonyShipUIState_TargetedByClaimers)] = PingLastCreated();
                PingSetScale(libHots_gf_PingStoredForUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1), 0.75);
            }

        }
        else if ((gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_Panic)] == true)) {
            if ((lv_eventPing[(ge_ColonyShipUIState_Panic)] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit), 270.0, "PingAlert", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/96C21974"));
                lv_eventCurrent = (ge_ColonyShipUIState_Panic);
                lv_eventPing[(ge_ColonyShipUIState_Panic)] = PingLastCreated();
                PingSetScale(libHots_gf_PingStoredForUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1), 0.75);
            }

        }
        else if ((gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[(ge_ColonyShipUIState_TargetOfInfestedHoldout)] == true)) {
            if ((lv_eventPing[(ge_ColonyShipUIState_TargetOfInfestedHoldout)] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit), 270.0, "PingAlert", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1671D608"));
                lv_eventCurrent = (ge_ColonyShipUIState_TargetOfInfestedHoldout);
                lv_eventPing[(ge_ColonyShipUIState_TargetOfInfestedHoldout)] = PingLastCreated();
                PingSetScale(libHots_gf_PingStoredForUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1), 0.75);
            }

        }
        else if (true) {
            PingSetScale(libHots_gf_PingStoredForUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1), 1.0);
        }
        lv_eventIter = 1;
        for ( ; ( (auto4F914350_ai >= 0 && lv_eventIter <= auto4F914350_ae) || (auto4F914350_ai < 0 && lv_eventIter >= auto4F914350_ae) ) ; lv_eventIter += auto4F914350_ai ) {
            if (((lv_eventCurrent != lv_eventIter) || (gv_colonyShipLocations[lp_tankIndex].lv_tankUIState[lv_eventIter] == false))) {
                libCOMI_gf_DestroyPingCoop(lv_eventPing[lv_eventIter]);
                lv_eventPing[lv_eventIter] = c_invalidPingId;
            }

        }
        Wait(0.5, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit, 1));
    lv_eventIter = 1;
    for ( ; ( (autoD128A6C1_ai >= 0 && lv_eventIter <= autoD128A6C1_ae) || (autoD128A6C1_ai < 0 && lv_eventIter >= autoD128A6C1_ae) ) ; lv_eventIter += autoD128A6C1_ai ) {
        libCOMI_gf_DestroyPingCoop(lv_eventPing[lv_eventIter]);
    }
    return true;
}

void gf_RemoveActivationBeacon (unit lp_beacon) {
    // Variable Declarations
    int lv_beaconIter;

    // Automatic Variable Declarations
    const int autoB254154E_ae = gv_c_ColonyShip_MaxCount;
    const int autoB254154E_ai = 1;

    // Variable Initialization

    // Implementation
    UnitKill(lp_beacon);
    TextTagDestroy(libHots_gf_TextTagForUnit(lp_beacon, 1));
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_beacon, 1));
    lv_beaconIter = 1;
    for ( ; ( (autoB254154E_ai >= 0 && lv_beaconIter <= autoB254154E_ae) || (autoB254154E_ai < 0 && lv_beaconIter >= autoB254154E_ae) ) ; lv_beaconIter += autoB254154E_ai ) {
        if ((gv_colonyShipLocations[lv_beaconIter].lv_beaconUnit == lp_beacon)) {
            gv_colonyShipLocations[lv_beaconIter].lv_beaconState = ge_PRESETColonyShipBeaconState_Removed;
            break;
        }

    }
}

int gf_PanicShuttleNextIndex () {
    // Variable Declarations
    int lv_forceStartIter;
    int lv_forceStartIndex;

    // Automatic Variable Declarations
    const int auto08E86B92_ae = gv_c_ColonyShip_MaxCount;
    const int auto08E86B92_ai = 1;

    // Variable Initialization

    // Implementation
    lv_forceStartIter = 1;
    for ( ; ( (auto08E86B92_ai >= 0 && lv_forceStartIter <= auto08E86B92_ae) || (auto08E86B92_ai < 0 && lv_forceStartIter >= auto08E86B92_ae) ) ; lv_forceStartIter += auto08E86B92_ai ) {
        lv_forceStartIndex = gv_forceStartOrder[lv_forceStartIter];
        if ((gv_colonyShipLocations[lv_forceStartIndex].lv_state == ge_PRESETColonyShipState_Available) && (gv_colonyShipLocations[lv_forceStartIndex].lv_tankUIState[ge_ColonyShipUIState_Panic] == false)) {
            return lv_forceStartIndex;
        }

    }
    return -1;
}

void gf_BonusObjectivePauseUnpauseUnitGroup (bool lp_pauseUnpause, unitgroup lp_pausingUnitGroup) {
    // Automatic Variable Declarations
    bool auto57E003E7_val;
    unitgroup autoCCF771C0_g;
    int autoCCF771C0_u;
    unit autoCCF771C0_var;
    unitgroup auto725FFC0D_g;
    int auto725FFC0D_u;
    unit auto725FFC0D_var;

    // Implementation
    auto57E003E7_val = lp_pauseUnpause;
    if (auto57E003E7_val == true) {
        autoCCF771C0_g = lp_pausingUnitGroup;
        autoCCF771C0_u = UnitGroupCount(autoCCF771C0_g, c_unitCountAll);
        for (;; autoCCF771C0_u -= 1) {
            autoCCF771C0_var = UnitGroupUnitFromEnd(autoCCF771C0_g, autoCCF771C0_u);
            if (autoCCF771C0_var == null) { break; }
            if ((UnitGetType(autoCCF771C0_var) != "Beacon_Nova") && (UnitGetCustomValue(autoCCF771C0_var, 1) == 0.0)) {
                libNtve_gf_PauseUnit(autoCCF771C0_var, true);
                UnitSetState(autoCCF771C0_var, c_unitStateHighlightable, false);
                UnitSetState(autoCCF771C0_var, c_unitStateSelectable, false);
                UnitSetState(autoCCF771C0_var, c_unitStateTargetable, false);
                libNtve_gf_MakeUnitUncommandable(autoCCF771C0_var, true);
                libNtve_gf_MakeUnitInvulnerable(autoCCF771C0_var, true);
            }

        }
    }
    else if (auto57E003E7_val == false) {
        auto725FFC0D_g = lp_pausingUnitGroup;
        auto725FFC0D_u = UnitGroupCount(auto725FFC0D_g, c_unitCountAll);
        for (;; auto725FFC0D_u -= 1) {
            auto725FFC0D_var = UnitGroupUnitFromEnd(auto725FFC0D_g, auto725FFC0D_u);
            if (auto725FFC0D_var == null) { break; }
            if ((UnitGetType(auto725FFC0D_var) != "Beacon_Nova") && (UnitGetCustomValue(auto725FFC0D_var, 1) == 0.0)) {
                libNtve_gf_PauseUnit(auto725FFC0D_var, false);
                UnitSetState(auto725FFC0D_var, c_unitStateHighlightable, true);
                UnitSetState(auto725FFC0D_var, c_unitStateSelectable, true);
                UnitSetState(auto725FFC0D_var, c_unitStateTargetable, true);
                libNtve_gf_MakeUnitUncommandable(auto725FFC0D_var, false);
                libNtve_gf_MakeUnitInvulnerable(auto725FFC0D_var, false);
            }

        }
    }
    else {
    }
}

trigger auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger = null;
unit auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

void gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit) {
    auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_lp_infestedUnit = lp_infestedUnit;

    if (auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger == null) {
        auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger = TriggerCreate("auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_Trigger, false, false);
}

bool auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_infestedUnit = auto_gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

    // Automatic Variable Declarations
    // Implementation
    AIRemoveUnitFromAnyWaves(lp_infestedUnit);
    Wait(RandomFixed(2.0, 5.0), c_timeGame);
    while ((UnitIsAlive(lp_infestedUnit) == true) && ((UnitGetType(lp_infestedUnit) == "InfestedCivilian") || (UnitGetType(lp_infestedUnit) == "InfestedExploder") || (UnitGetType(lp_infestedUnit) == "InfestedTerranCampaign") || (UnitGetType(lp_infestedUnit) == "InfestedAbomination"))) {
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedCivilianDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedExploderDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedTerranCampaignDown", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedAbominationDown", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(lp_infestedUnit) == true)) {
        UnitRemove(lp_infestedUnit);
    }

    return true;
}

void gf_BonusObjectiveBlightbringerMoveToNewEggSpot (unit lp_blightbringer, point lp_targetPoint) {
    // Variable Declarations
    timer lv_burrowFailSafe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_burrowFailSafe = TimerCreate();

    // Implementation
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_blightbringer) == true) && (UnitGetType(lp_blightbringer) == "Blightbringer")) {
        UnitIssueOrder(lp_blightbringer, Order(AbilityCommand("BurrowBlightbringerDown", 0)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    TimerStart(lv_burrowFailSafe, 15.0, false, c_timeAI);
    libNtve_gf_MakeUnitInvulnerable(lp_blightbringer, true);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_blightbringer) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_blightbringer), lp_targetPoint) > 0.5) && (TimerGetRemaining(lv_burrowFailSafe) > 0.0)) {
        UnitIssueOrder(lp_blightbringer, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_MakeUnitInvulnerable(lp_blightbringer, false);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_blightbringer) == true) && (UnitGetType(lp_blightbringer) == "BlightbringerBurrowed")) {
        UnitIssueOrder(lp_blightbringer, Order(AbilityCommand("BurrowBlightbringerUp", 0)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
}

void gf_BonusObjectiveBlightbringerEgg (unit lp_blightbringer, point lp_eggPoint, bool lp_bigEgg) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_blightbringer) == true) && (UnitGroupCount(gv_bonusObjective_HatchedInfestedGroup, c_unitCountAlive) < 20)) {
        if ((lp_bigEgg == true)) {
            UnitIssueOrder(lp_blightbringer, OrderTargetingPoint(AbilityCommand("BlightbringerCreateLargeEggs", 0), lp_eggPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_blightbringer, OrderTargetingPoint(AbilityCommand("BlightbringerCreateEggs", 0), lp_eggPoint), c_orderQueueReplace);
        }
        Wait(0.26, c_timeGame);
    }

}

void gf_BonusObjectiveBlightbringerCleanup () {
    // Automatic Variable Declarations
    unitgroup autoABDBBD63_g;
    int autoABDBBD63_u;
    unit autoABDBBD63_var;

    // Implementation
    if ((UnitIsAlive(gv_c_BonusObjective_Blightbringer) == true)) {
        UnitSetPosition(gv_c_BonusObjective_Blightbringer, Point(47.0, 32.0), false);
        UnitSetFacing(gv_c_BonusObjective_Blightbringer, 140.0, 0.0);
        UnitIssueOrder(gv_c_BonusObjective_Blightbringer, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    if (((gv_bonusObjective_BlightbringerActive == true) || (UnitIsAlive(gv_c_BonusObjective_Blightbringer) == false))) {
        autoABDBBD63_g = UnitGroup(null, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoABDBBD63_u = UnitGroupCount(autoABDBBD63_g, c_unitCountAll);
        for (;; autoABDBBD63_u -= 1) {
            autoABDBBD63_var = UnitGroupUnitFromEnd(autoABDBBD63_g, autoABDBBD63_u);
            if (autoABDBBD63_var == null) { break; }
            if (((UnitGetType(autoABDBBD63_var) == "InfestedCivilian") || (UnitGetType(autoABDBBD63_var) == "InfestedCivilianBurrowed") || (UnitGetType(autoABDBBD63_var) == "InfestedExploder") || (UnitGetType(autoABDBBD63_var) == "InfestedExploderBurrowed") || (UnitGetType(autoABDBBD63_var) == "InfestedTerranCampaign") || (UnitGetType(autoABDBBD63_var) == "InfestedTerranCampaign") || (UnitGetType(autoABDBBD63_var) == "InfestedAbomination") || (UnitGetType(autoABDBBD63_var) == "InfestedAbominationBurrowed") || (UnitGetType(autoABDBBD63_var) == "BlightbringerEgg") || (UnitGetType(autoABDBBD63_var) == "BlightbringerLargeEgg") || (UnitGetType(autoABDBBD63_var) == "BlightbringerEggWeapon") || (UnitGetType(autoABDBBD63_var) == "BlightbringerLargeEggWeapon") || (UnitGetType(autoABDBBD63_var) == "BlightbringerVileStream") || (UnitGetType(autoABDBBD63_var) == "NovaAcidPuddle"))) {
                UnitRemove(autoABDBBD63_var);
            }

        }
    }

    TriggerStop(gt_BonusObjectiveBlightbringerBattleAI);
}

void gf_BonusObjectiveEradicatorMissilesRing () {
    // Variable Declarations
    fixed lv_currentAngle;
    fixed lv_initialAngle;
    unitgroup lv_nearbyEnemies;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyEnemies = UnitGroupEmpty();

    // Implementation
    lv_nearbyEnemies = UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeMissile), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
        lv_initialAngle = (AngleBetweenPoints(UnitGetPosition(gv_eradicatorTypeMissile), UnitGroupCenterOfGroup(lv_nearbyEnemies)) - 90.0);
    }
    else {
        lv_initialAngle = libNtve_gf_RandomAngle();
    }
    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        lv_currentAngle = lv_initialAngle;
        while ((lv_currentAngle < (lv_initialAngle + 180.0)) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            lv_currentAngle += 52.0;
            if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
            }

            Wait(0.08, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }

    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        lv_currentAngle = lv_initialAngle;
        lv_initialAngle = lv_currentAngle;
        while ((lv_currentAngle < (lv_initialAngle + 180.0)) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            lv_currentAngle += 20.0;
            if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 9.0, lv_currentAngle)) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 9.0, lv_currentAngle)), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeMissile), 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
            }

            Wait(0.05, c_timeGame);
        }
        Wait(1.0, c_timeGame);
    }

}

void gf_BonusObjectiveEradicatorMissilesAttackDirectly () {
    // Variable Declarations
    fixed lv_currentAngle;
    fixed lv_initialAngle;
    const int lv_maxAttacks = 5;
    int lv_attackCounter;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_targetUnit = UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeMissile), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingUnit(AbilityCommand("NovaEradicatorTurnTurret", 0), lv_targetUnit), c_orderQueueAddToEnd);
    while ((UnitIsAlive(gv_eradicatorTypeMissile) == true) && (lv_attackCounter <= lv_maxAttacks)) {
        if ((lv_targetUnit != null) && (UnitIsAlive(lv_targetUnit) == true)) {
            if ((UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent) > 0.0)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(UnitGetPosition(lv_targetUnit), UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent), UnitGetFacing(lv_targetUnit))), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), UnitGetPosition(lv_targetUnit)), c_orderQueueAddToEnd);
            }
        }
        else {
            lv_targetUnit = UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeMissile), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        }
        lv_attackCounter += 1;
        Wait(0.7, c_timeGame);
    }
}

void gf_BonusObjectiveEradicatorMissilesEnrageRing () {
    // Variable Declarations
    fixed lv_currentAngle;
    fixed lv_initialAngle;
    fixed lv_missileRange;
    fixed lv_missileVolleyAngle;
    point lv_attackCenter;
    unitgroup lv_nearbyEnemies;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missileRange = 6.0;
    lv_nearbyEnemies = UnitGroupEmpty();

    // Implementation
    lv_nearbyEnemies = UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeMissile), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_attackCenter = UnitGroupCenterOfGroup(lv_nearbyEnemies);
    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        lv_currentAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        lv_initialAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        while ((lv_currentAngle < (lv_initialAngle + 360.0)) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            lv_currentAngle += 52.0;
            if ((PointPathingPassable(PointWithOffsetPolar(lv_attackCenter, 3.0, lv_currentAngle)) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(lv_attackCenter, 3.0, lv_currentAngle)), c_orderQueueAddToEnd);
            }

            Wait(0.08, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }

    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        lv_currentAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        lv_initialAngle = UnitGetFacing(gv_eradicatorTypeMissile);
        while ((lv_currentAngle < (lv_initialAngle + 360.0)) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
            lv_currentAngle += 24.0;
            if ((PointPathingPassable(PointWithOffsetPolar(lv_attackCenter, 11.0, lv_currentAngle)) == true)) {
                UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorLaunchMissile", 0), PointWithOffsetPolar(lv_attackCenter, 11.0, lv_currentAngle)), c_orderQueueAddToEnd);
            }

            Wait(0.08, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }

}

void gf_BonusObjectiveEradicatorCannonFiveWayShot () {
    // Variable Declarations
    point lv_startPoint;
    point lv_endPoint;
    int lv_shotCount;
    fixed lv_interpolationOffset;

    // Automatic Variable Declarations
    int autoC17E2FA7_val;
    int auto902A0F71_val;

    // Variable Initialization

    // Implementation
    autoC17E2FA7_val = gv_eradicatorTypeCannonPosition;
    if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorNorth) {
        lv_startPoint = PointFromId(2106);
        lv_endPoint = PointFromId(2109);
    }
    else if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorEast) {
        lv_startPoint = PointFromId(2108);
        lv_endPoint = PointFromId(2104);
    }
    else if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorSouth) {
        lv_startPoint = PointFromId(2109);
        lv_endPoint = PointFromId(2106);
    }
    else if (autoC17E2FA7_val == ge_BonusObjectiveEradicatorPositions_EradicatorWest) {
        lv_startPoint = PointFromId(2104);
        lv_endPoint = PointFromId(2108);
    }
    else {
    }
    while ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (lv_shotCount < 5)) {
        auto902A0F71_val = lv_shotCount;
        if (auto902A0F71_val == 0) {
            lv_interpolationOffset = 0.0;
        }
        else if (auto902A0F71_val == 1) {
            lv_interpolationOffset = 0.25;
        }
        else if (auto902A0F71_val == 2) {
            lv_interpolationOffset = 0.5;
        }
        else if (auto902A0F71_val == 3) {
            lv_interpolationOffset = 0.75;
        }
        else if (auto902A0F71_val == 4) {
            lv_interpolationOffset = 1.0;
        }
        else {
        }
        if (((lv_shotCount == 0) || (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1))) {
            gf_BonusObjectiveEradicatorCannonAttack(PointInterpolate(lv_startPoint, lv_endPoint, lv_interpolationOffset));
        }
        else {
            gf_BonusObjectiveEradicatorCannonAttackNoTurn(PointInterpolate(lv_startPoint, lv_endPoint, lv_interpolationOffset));
        }
        lv_shotCount += 1;
        Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(3.1, 3.1, 1.6, 1.6, 0.0, 0.0), c_timeGame);
    }
}

void gf_BonusObjectiveEradicatorCannonFanAttack () {
    // Variable Declarations
    point lv_targetPoint;
    int lv_shotCount;
    fixed lv_leftArc;
    fixed lv_rightArc;

    // Automatic Variable Declarations
    int autoC7E9A424_val;

    // Variable Initialization

    // Implementation
    gf_BonusObjectiveEradicatorCannonAttack(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeCannon), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
    Wait(0.5, c_timeGame);
    while ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (lv_shotCount < 4)) {
        autoC7E9A424_val = lv_shotCount;
        if (autoC7E9A424_val == 0) {
            lv_leftArc -= 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_leftArc));
        }
        else if (autoC7E9A424_val == 1) {
            lv_rightArc += 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_rightArc));
        }
        else if (autoC7E9A424_val == 2) {
            lv_leftArc -= 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_leftArc));
        }
        else if (autoC7E9A424_val == 3) {
            lv_rightArc += 30.0;
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, (UnitGetFacing(gv_eradicatorTypeCannon) + lv_rightArc));
        }
        else {
        }
        lv_shotCount += 1;
        gf_BonusObjectiveEradicatorCannonAttackNoTurn(lv_targetPoint);
        Wait(0.5, c_timeGame);
    }
}

trigger auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger = null;
point auto_gf_BonusObjectiveEradicatorCannonAttack_lp_target;

void gf_BonusObjectiveEradicatorCannonAttack (point lp_target) {
    auto_gf_BonusObjectiveEradicatorCannonAttack_lp_target = lp_target;

    if (auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger == null) {
        auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger = TriggerCreate("auto_gf_BonusObjectiveEradicatorCannonAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_BonusObjectiveEradicatorCannonAttack_Trigger, false, false);
}

bool auto_gf_BonusObjectiveEradicatorCannonAttack_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_BonusObjectiveEradicatorCannonAttack_lp_target;

    // Variable Declarations
    int lv_dEBUG_SHOT_NUMBER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), lp_target), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgun", 0), lp_target), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), lp_target), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgunFire", 0), lp_target), c_orderQueueReplace);
    }

    return true;
}

trigger auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger = null;
point auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_lp_target;

void gf_BonusObjectiveEradicatorCannonAttackNoTurn (point lp_target) {
    auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_lp_target = lp_target;

    if (auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger == null) {
        auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger = TriggerCreate("auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_TriggerFunc");
    }

    TriggerExecute(auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_Trigger, false, false);
}

bool auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_BonusObjectiveEradicatorCannonAttackNoTurn_lp_target;

    // Variable Declarations
    int lv_dEBUG_SHOT_NUMBER;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgun", 0), lp_target), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), lp_target), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgunFire", 0), lp_target), c_orderQueueReplace);
    }

    return true;
}

trigger auto_gf_AIMonitorBullyRebuildRegion_Trigger = null;
playergroup auto_gf_AIMonitorBullyRebuildRegion_lp_players;
region auto_gf_AIMonitorBullyRebuildRegion_lp_bullyRebuildRegion;

void gf_AIMonitorBullyRebuildRegion (playergroup lp_players, region lp_bullyRebuildRegion) {
    auto_gf_AIMonitorBullyRebuildRegion_lp_players = lp_players;
    auto_gf_AIMonitorBullyRebuildRegion_lp_bullyRebuildRegion = lp_bullyRebuildRegion;

    if (auto_gf_AIMonitorBullyRebuildRegion_Trigger == null) {
        auto_gf_AIMonitorBullyRebuildRegion_Trigger = TriggerCreate("auto_gf_AIMonitorBullyRebuildRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIMonitorBullyRebuildRegion_Trigger, false, false);
}

bool auto_gf_AIMonitorBullyRebuildRegion_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_gf_AIMonitorBullyRebuildRegion_lp_players;
    region lp_bullyRebuildRegion = auto_gf_AIMonitorBullyRebuildRegion_lp_bullyRebuildRegion;

    // Variable Declarations
    unit lv_allowRebuildIter;
    unitgroup lv_allowRebuilding;
    int lv_playerIter;
    unitgroup lv_playerGroupUnits;

    // Automatic Variable Declarations
    playergroup autoE6A776E0_g;
    unitgroup autoCC7F8707_g;
    int autoCC7F8707_u;
    playergroup autoD9F95E86_g;

    // Variable Initialization
    lv_allowRebuilding = UnitGroupEmpty();
    lv_playerGroupUnits = UnitGroupEmpty();

    // Implementation
    autoE6A776E0_g = lp_players;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoE6A776E0_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        libNtve_gf_DeclareNextTown(lv_playerIter, RegionGetCenter(lp_bullyRebuildRegion));
        UnitGroupAddUnitGroup(lv_playerGroupUnits, UnitGroup(null, lv_playerIter, lp_bullyRebuildRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    autoCC7F8707_g = lv_playerGroupUnits;
    autoCC7F8707_u = UnitGroupCount(autoCC7F8707_g, c_unitCountAll);
    for (;; autoCC7F8707_u -= 1) {
        lv_allowRebuildIter = UnitGroupUnitFromEnd(autoCC7F8707_g, autoCC7F8707_u);
        if (lv_allowRebuildIter == null) { break; }
        if (((UnitGetType(lv_allowRebuildIter) == "InfestableColonistHut") || (UnitGetType(lv_allowRebuildIter) == "InfestedCC") || (UnitGetType(lv_allowRebuildIter) == "InfestedBarracks") || (UnitGetType(lv_allowRebuildIter) == "InfestedFactory") || (UnitGetType(lv_allowRebuildIter) == "InfestedStarport") || (UnitGetType(lv_allowRebuildIter) == "InfestedEngBay") || (UnitGetType(lv_allowRebuildIter) == "InfestedArmory") || (UnitGetType(lv_allowRebuildIter) == "InfestedBunker") || (UnitGetType(lv_allowRebuildIter) == "InfestedSupply") || (UnitGetType(lv_allowRebuildIter) == "InfestedMissileTurret"))) {
            UnitGroupAdd(lv_allowRebuilding, lv_allowRebuildIter);
        }

    }
    Wait(2.0, c_timeAI);
    while (!(((libCOMI_gf_GameIsOver() == true) || (UnitGroupCount(lv_allowRebuilding, c_unitCountAlive) == 0)))) {
        Wait(2.0, c_timeGame);
    }
    autoD9F95E86_g = lp_players;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoD9F95E86_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        AIToggleBulliesInRegion(lv_playerIter, lp_bullyRebuildRegion, false);
    }
    return true;
}

point gf_InfestedAttackWaveSpawn () {
    // Variable Declarations
    int lv_infestedTownGatherIter;
    unit lv_infestedTownMemberIter;
    fixed lv_infestedTownValueCurrent;

    // Automatic Variable Declarations
    const int autoCD654878_ae = gv_c_InfestedTownCount;
    const int autoCD654878_ai = 1;
    unitgroup autoC8810B06_g;
    int autoC8810B06_u;

    // Variable Initialization

    // Implementation
    lv_infestedTownGatherIter = 1;
    for ( ; ( (autoCD654878_ai >= 0 && lv_infestedTownGatherIter <= autoCD654878_ae) || (autoCD654878_ai < 0 && lv_infestedTownGatherIter >= autoCD654878_ae) ) ; lv_infestedTownGatherIter += autoCD654878_ai ) {
        lv_infestedTownValueCurrent = 0.0;
        if ((gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] != null)) {
            autoC8810B06_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC8810B06_u = UnitGroupCount(autoC8810B06_g, c_unitCountAll);
            for (;; autoC8810B06_u -= 1) {
                lv_infestedTownMemberIter = UnitGroupUnitFromEnd(autoC8810B06_g, autoC8810B06_u);
                if (lv_infestedTownMemberIter == null) { break; }
                lv_infestedTownValueCurrent += UnitGetPropertyFixed(lv_infestedTownMemberIter, c_unitPropVitality, c_unitPropCurrent);
            }
            if (((lv_infestedTownValueCurrent / gv_infestedTownValue[lv_infestedTownGatherIter]) > 0.9)) {
                return RegionGetCenter(gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter]);
            }

        }

    }
    return PointFromId(1895684626);
}

trigger auto_gf_InfestedTransportCargo_Trigger = null;
unit auto_gf_InfestedTransportCargo_lp_transport;
unitgroup auto_gf_InfestedTransportCargo_lp_cargo;
int auto_gf_InfestedTransportCargo_lp_tankIndex;

void gf_InfestedTransportCargo (unit lp_transport, unitgroup lp_cargo, int lp_tankIndex) {
    auto_gf_InfestedTransportCargo_lp_transport = lp_transport;
    auto_gf_InfestedTransportCargo_lp_cargo = lp_cargo;
    auto_gf_InfestedTransportCargo_lp_tankIndex = lp_tankIndex;

    if (auto_gf_InfestedTransportCargo_Trigger == null) {
        auto_gf_InfestedTransportCargo_Trigger = TriggerCreate("auto_gf_InfestedTransportCargo_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedTransportCargo_Trigger, false, false);
}

bool auto_gf_InfestedTransportCargo_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_InfestedTransportCargo_lp_transport;
    unitgroup lp_cargo = auto_gf_InfestedTransportCargo_lp_cargo;
    int lp_tankIndex = auto_gf_InfestedTransportCargo_lp_tankIndex;

    // Variable Declarations
    unit lv_cargoIter;
    point lv_cargoSpawn;
    bool lv_transportUnloadSafely;
    playergroup lv_cargoPlayers;
    int lv_cargoPlayerIter;

    // Automatic Variable Declarations
    unitgroup auto83990163_g;
    int auto83990163_u;
    unitgroup auto2585CBEA_g;
    int auto2585CBEA_u;
    unitgroup auto6BA51A0C_g;
    int auto6BA51A0C_u;
    playergroup auto7CF93D7D_g;

    // Variable Initialization
    lv_cargoPlayers = PlayerGroupEmpty();

    // Implementation
    UnitSetPropertyFixed(lp_transport, c_unitPropLifeMax, 750.0);
    UnitSetPropertyFixed(lp_transport, c_unitPropLifePercent, 100.0);
    UnitBehaviorRemove(lp_transport, "Harmless", 1);
    UnitSetState(lp_transport, c_unitStateHighlightable, true);
    UnitSetState(lp_transport, c_unitStateSelectable, true);
    UnitSetState(lp_transport, c_unitStateTargetable, true);
    UnitSetState(lp_transport, c_unitStateTooltipable, true);
    UnitAbilityEnable(lp_transport, "ColonistTransportTransport", false);
    UnitBehaviorAdd(lp_transport, "Frenzy", lp_transport, 1);
    auto83990163_g = lp_cargo;
    auto83990163_u = UnitGroupCount(auto83990163_g, c_unitCountAll);
    for (;; auto83990163_u -= 1) {
        lv_cargoIter = UnitGroupUnitFromEnd(auto83990163_g, auto83990163_u);
        if (lv_cargoIter == null) { break; }
        if ((UnitGetType(lv_cargoIter) == "Raven")) {
            UnitRemove(lv_cargoIter);
        }

        gf_InfestUnit(lv_cargoIter);
        libNtve_gf_PauseUnit(lv_cargoIter, true);
        libNtve_gf_ShowHideUnit(lv_cargoIter, false);
    }
    while ((UnitIsAlive(lp_transport) == true)) {
        lv_cargoSpawn = UnitGetPosition(lp_transport);
        if (((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_transport), c_unitAllianceEnemy, RegionCircle(lv_cargoSpawn, 4.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(gv_c_ColonyShipObjective, c_playerAny, RegionCircle(lv_cargoSpawn, 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            lv_transportUnloadSafely = true;
            UnitKill(lp_transport);
            break;
        }

        if ((UnitGetOwner(lp_transport) == 0)) {
            auto2585CBEA_g = lp_cargo;
            auto2585CBEA_u = UnitGroupCount(auto2585CBEA_g, c_unitCountAll);
            for (;; auto2585CBEA_u -= 1) {
                lv_cargoIter = UnitGroupUnitFromEnd(auto2585CBEA_g, auto2585CBEA_u);
                if (lv_cargoIter == null) { break; }
                UnitRemove(lv_cargoIter);
            }
            return true;
        }

        Wait(0.25, c_timeGame);
    }
    auto6BA51A0C_g = lp_cargo;
    auto6BA51A0C_u = UnitGroupCount(auto6BA51A0C_g, c_unitCountAll);
    for (;; auto6BA51A0C_u -= 1) {
        lv_cargoIter = UnitGroupUnitFromEnd(auto6BA51A0C_g, auto6BA51A0C_u);
        if (lv_cargoIter == null) { break; }
        libNtve_gf_PauseUnit(lv_cargoIter, false);
        libNtve_gf_ShowHideUnit(lv_cargoIter, true);
        UnitSetPosition(lv_cargoIter, lv_cargoSpawn, false);
        PlayerGroupAdd(lv_cargoPlayers, UnitGetOwner(lv_cargoIter));
        if ((lv_transportUnloadSafely == false)) {
            UnitSetPropertyFixed(lv_cargoIter, c_unitPropLifePercent, (UnitGetPropertyFixed(lv_cargoIter, c_unitPropVitalityPercent, c_unitPropNormal) * 0.5));
            UnitSetPropertyFixed(lv_cargoIter, c_unitPropShieldsPercent, (UnitGetPropertyFixed(lv_cargoIter, c_unitPropVitalityPercent, c_unitPropNormal) * 0.5));
            UnitSetPropertyFixed(lv_cargoIter, c_unitPropEnergyPercent, 0.0);
        }

    }
    AISetGroupScriptControlled(lp_cargo, false);
    auto7CF93D7D_g = lv_cargoPlayers;
    lv_cargoPlayerIter = -1;
    while (true) {
        lv_cargoPlayerIter = PlayerGroupNextPlayer(auto7CF93D7D_g, lv_cargoPlayerIter);
        if (lv_cargoPlayerIter < 0) { break; }
        AIAttackWaveSetTargetUnit(lv_cargoPlayerIter, gv_colonyShipLocations[lp_tankIndex].lv_colonyShipUnit);
        AIAttackWaveUseGroup(lv_cargoPlayerIter, lp_cargo);
        AIAttackWaveSend(lv_cargoPlayerIter, 0, true);
    }
    return true;
}

void gf_CreateInfestedTransportCargo (int lp_player, int lp_resourceAmount, int lp_techLevel, point lp_spawnLocation) {
    // Variable Declarations
    string[5] lv_transportCargoType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lp_player, lp_player, lp_resourceAmount, lp_techLevel, lp_spawnLocation, true);
    gv_lastCreatedInfestedTransportCargo = libCOMI_gf_LastCreatedCoopAttackForce();
}

void gf_RunInfestedRageWaves (int lp_colonyShipIndex) {
    // Variable Declarations
    int lv_colonyShipIter;
    int lv_colonyShipWorkingOrExhaustedCount;

    // Automatic Variable Declarations
    int auto84CD3957_ae;
    const int auto84CD3957_ai = 1;
    int auto63856149_val;
    int auto1F527A4B_val;

    // Variable Initialization

    // Implementation
    auto84CD3957_ae = gv_colonyShipLocationsCount;
    lv_colonyShipIter = 1;
    for ( ; ( (auto84CD3957_ai >= 0 && lv_colonyShipIter <= auto84CD3957_ae) || (auto84CD3957_ai < 0 && lv_colonyShipIter >= auto84CD3957_ae) ) ; lv_colonyShipIter += auto84CD3957_ai ) {
        if (((gv_colonyShipLocations[lv_colonyShipIter].lv_state == ge_PRESETColonyShipState_Working) || (gv_colonyShipLocations[lv_colonyShipIter].lv_state == ge_PRESETColonyShipState_Exhausted))) {
            lv_colonyShipWorkingOrExhaustedCount += 1;
        }

    }
    auto63856149_val = lv_colonyShipWorkingOrExhaustedCount;
    if (auto63856149_val == 1) {
        gf_InfestedRageWavesFirst(lp_colonyShipIndex);
    }
    else if (auto63856149_val == 2) {
        gf_InfestedRageWavesEarly(lp_colonyShipIndex);
    }
    else if (auto63856149_val == 3) {
        gf_InfestedRageWavesMid(lp_colonyShipIndex);
    }
    else if (auto63856149_val == 4) {
        gf_InfestedRageWavesMid(lp_colonyShipIndex);
    }
    else {
        gf_InfestedRageWavesLate(lp_colonyShipIndex);
    }
    auto1F527A4B_val = lp_colonyShipIndex;
    if (auto1F527A4B_val == 1) {
        gf_SpecialRageWaveJustMoreDudes(1);
    }
    else if (auto1F527A4B_val == 2) {
        gf_SpecialRageWavesColonyShipExplodes(2);
    }
    else if (auto1F527A4B_val == 3) {
        gf_SpecialRageWavesNydusWorms(3);
    }
    else if (auto1F527A4B_val == 4) {
        gf_SpecialRageWavesFlyers(4);
    }
    else if (auto1F527A4B_val == 5) {
        gf_SpecialRageWaveExploders(5);
    }
    else if (auto1F527A4B_val == 6) {
        gf_SpecialRageWavesColonyShipExplodes(6);
    }
    else if (auto1F527A4B_val == 7) {
        gf_SpecialRageWavesSiegeTanks(7);
    }
    else if (auto1F527A4B_val == 8) {
        gf_SpecialRageWaveEggPoppers(8);
    }
    else if (auto1F527A4B_val == 9) {
        gf_SpecialRageWaveJustMoreDudes(9);
    }
    else {
    }
}

trigger auto_gf_InfestedRageWavesFirst_Trigger = null;
int auto_gf_InfestedRageWavesFirst_lp_colonyShipIndex;

void gf_InfestedRageWavesFirst (int lp_colonyShipIndex) {
    auto_gf_InfestedRageWavesFirst_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_InfestedRageWavesFirst_Trigger == null) {
        auto_gf_InfestedRageWavesFirst_Trigger = TriggerCreate("auto_gf_InfestedRageWavesFirst_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesFirst_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesFirst_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_InfestedRageWavesFirst_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;

    // Automatic Variable Declarations
    const int autoBC94B77C_n = 7;
    int autoBC94B77C_i;
    const int auto10D25486_n = 10;
    int auto10D25486_i;

    // Variable Initialization

    // Implementation
    if ((lp_colonyShipIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    Wait(5.0, c_timeAI);
    for (autoBC94B77C_i = 1; autoBC94B77C_i <= autoBC94B77C_n; autoBC94B77C_i += 1) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, 3, 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), 0, 0);
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, 3, 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), 0, 0);
            Wait(10.0, c_timeAI);
        }

    }
    for (auto10D25486_i = 1; auto10D25486_i <= auto10D25486_n; auto10D25486_i += 1) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 5, 7, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), 0, 0);
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 5, 7, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 0, 0), 0, 0);
            Wait(10.0, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_InfestedRageWavesEarly_Trigger = null;
int auto_gf_InfestedRageWavesEarly_lp_colonyShipIndex;

void gf_InfestedRageWavesEarly (int lp_colonyShipIndex) {
    auto_gf_InfestedRageWavesEarly_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_InfestedRageWavesEarly_Trigger == null) {
        auto_gf_InfestedRageWavesEarly_Trigger = TriggerCreate("auto_gf_InfestedRageWavesEarly_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesEarly_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesEarly_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_InfestedRageWavesEarly_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;
    point lv_spawnLocation;
    unitgroup lv_attackGroup;
    unitgroup lv_infestedTransportCargo;
    point[3] lv_infestedTransportSpawn;

    // Automatic Variable Declarations
    const int auto48C2BDE9_n = 7;
    int auto48C2BDE9_i;
    int auto616DBA25_n;
    int auto616DBA25_i;
    const int auto246363A6_n = 7;
    int auto246363A6_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_infestedTransportCargo = UnitGroupEmpty();

    // Implementation
    if ((lp_colonyShipIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 02"));
        lv_infestedTransportSpawn[1] = PointFromName(("ColonyShip Waves Truck Spawn 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_infestedTransportSpawn[2] = PointFromName(("ColonyShip Waves Truck Spawn 0" + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    for (auto48C2BDE9_i = 1; auto48C2BDE9_i <= auto48C2BDE9_n; auto48C2BDE9_i += 1) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 0, 0), 0, 0);
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), 0, 0);
            Wait(10.0, c_timeAI);
        }

    }
    auto616DBA25_n = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0);
    for (auto616DBA25_i = 1; auto616DBA25_i <= auto616DBA25_n; auto616DBA25_i += 1) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            lv_spawnLocation = lv_infestedTransportSpawn[RandomInt(1, 2)];
            gf_RageWaveInfestedTransport(lp_colonyShipIndex, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_spawnLocation);
            Wait(7.0, c_timeAI);
        }

    }
    for (auto246363A6_i = 1; auto246363A6_i <= auto246363A6_n; auto246363A6_i += 1) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), 0, 0);
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), 0);
            Wait(10.0, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_InfestedRageWavesMid_Trigger = null;
int auto_gf_InfestedRageWavesMid_lp_colonyShipIndex;

void gf_InfestedRageWavesMid (int lp_colonyShipIndex) {
    auto_gf_InfestedRageWavesMid_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_InfestedRageWavesMid_Trigger == null) {
        auto_gf_InfestedRageWavesMid_Trigger = TriggerCreate("auto_gf_InfestedRageWavesMid_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesMid_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesMid_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_InfestedRageWavesMid_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;
    point lv_spawnLocation;
    unitgroup lv_attackGroup;
    unitgroup lv_infestedTransportCargo;
    point[3] lv_infestedTransportSpawn;
    int lv_infestedAttackIter;

    // Automatic Variable Declarations
    const int autoA06F3702_n = 6;
    int autoA06F3702_i;
    const int auto19C93E11_ae = 8;
    const int auto19C93E11_ai = 1;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_infestedTransportCargo = UnitGroupEmpty();

    // Implementation
    if ((lp_colonyShipIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 02"));
        lv_infestedTransportSpawn[1] = PointFromName(("ColonyShip Waves Truck Spawn 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_infestedTransportSpawn[2] = PointFromName(("ColonyShip Waves Truck Spawn 0" + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    for (autoA06F3702_i = 1; autoA06F3702_i <= autoA06F3702_n; autoA06F3702_i += 1) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), 0);
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 3, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0), 0);
            Wait(7.0, c_timeAI);
        }

    }
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendHybridinRageWave(lp_colonyShipIndex, ge_HybridSize_SmallDestroyerReaverNemesis, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), lv_spawnRegion02);
    }

    lv_infestedAttackIter = 1;
    for ( ; ( (auto19C93E11_ai >= 0 && lv_infestedAttackIter <= auto19C93E11_ae) || (auto19C93E11_ai < 0 && lv_infestedAttackIter >= auto19C93E11_ae) ) ; lv_infestedAttackIter += auto19C93E11_ai ) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 3, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), 0);
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 3, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 1, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0));
            if (((lv_infestedAttackIter == 1) || (lv_infestedAttackIter == 3) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0) == 1) && (lv_infestedAttackIter == 5)) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0) == 1) && (lv_infestedAttackIter == 7)))) {
                lv_spawnLocation = lv_infestedTransportSpawn[RandomInt(1, 2)];
                gf_RageWaveInfestedTransport(lp_colonyShipIndex, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lv_spawnLocation);
            }

            Wait(7.0, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_InfestedRageWavesLate_Trigger = null;
int auto_gf_InfestedRageWavesLate_lp_colonyShipIndex;

void gf_InfestedRageWavesLate (int lp_colonyShipIndex) {
    auto_gf_InfestedRageWavesLate_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_InfestedRageWavesLate_Trigger == null) {
        auto_gf_InfestedRageWavesLate_Trigger = TriggerCreate("auto_gf_InfestedRageWavesLate_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedRageWavesLate_Trigger, false, false);
}

bool auto_gf_InfestedRageWavesLate_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_InfestedRageWavesLate_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;
    point lv_spawnLocation;
    unitgroup lv_attackGroup;
    unitgroup lv_infestedTransportCargo;
    int lv_transportCreationIter;
    point[3] lv_infestedTransportSpawn;
    int lv_attackWaveIter;
    int lv_createTransportCount;

    // Automatic Variable Declarations
    const int auto78D8C335_n = 4;
    int auto78D8C335_i;
    const int auto3418BF78_ae = 5;
    const int auto3418BF78_ai = 1;
    int auto16A2036B_val;
    int auto57E1DE10_n;
    int auto57E1DE10_i;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_infestedTransportCargo = UnitGroupEmpty();

    // Implementation
    if ((lp_colonyShipIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 02"));
        lv_infestedTransportSpawn[1] = PointFromName(("ColonyShip Waves Truck Spawn 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_infestedTransportSpawn[2] = PointFromName(("ColonyShip Waves Truck Spawn 0" + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    for (auto78D8C335_i = 1; auto78D8C335_i <= auto78D8C335_n; auto78D8C335_i += 1) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 3, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0), 0);
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0));
            Wait(7.0, c_timeAI);
        }

    }
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendHybridinRageWave(lp_colonyShipIndex, ge_HybridSize_SmallDestroyerReaverNemesis, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), lv_spawnRegion02);
    }

    lv_attackWaveIter = 1;
    for ( ; ( (auto3418BF78_ai >= 0 && lv_attackWaveIter <= auto3418BF78_ae) || (auto3418BF78_ai < 0 && lv_attackWaveIter >= auto3418BF78_ae) ) ; lv_attackWaveIter += auto3418BF78_ai ) {
        if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 5, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 3, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0));
            gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), 2, 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 3, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0));
            lv_createTransportCount = 0;
            auto16A2036B_val = lv_attackWaveIter;
            if (auto16A2036B_val == 1) {
                gf_SendHybridinRageWave(lp_colonyShipIndex, ge_HybridSize_SmallDestroyerReaverNemesis, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), lv_spawnRegion02);
            }
            else if (auto16A2036B_val == 2) {
                lv_createTransportCount = 1;
            }
            else if (auto16A2036B_val == 3) {
                gf_SendHybridinRageWave(lp_colonyShipIndex, ge_HybridSize_LargeDominatorBehemoth, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), lv_spawnRegion02);
            }
            else if (auto16A2036B_val == 4) {
                lv_createTransportCount = 2;
            }
            else if (auto16A2036B_val == 5) {
                gf_SendHybridinRageWave(lp_colonyShipIndex, ge_HybridSize_SmallDestroyerReaverNemesis, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), lv_spawnRegion02);
                gf_SendHybridinRageWave(lp_colonyShipIndex, ge_HybridSize_LargeDominatorBehemoth, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0), lv_spawnRegion02);
            }
            else {
            }
            auto57E1DE10_n = lv_createTransportCount;
            for (auto57E1DE10_i = 1; auto57E1DE10_i <= auto57E1DE10_n; auto57E1DE10_i += 1) {
                lv_spawnLocation = lv_infestedTransportSpawn[RandomInt(1, 2)];
                gf_RageWaveInfestedTransport(lp_colonyShipIndex, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lv_spawnLocation);
            }
            Wait(14.0, c_timeAI);
        }

    }
    return true;
}

void gf_SendInfestedRageWave (int lp_colonyShipIndex, region lp_spawnRegion, bool lp_waveStartsBurrowed, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetTargetRegion(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionCircle(UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit), 4.0), 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionGetCenter(lp_spawnRegion));
    if ((lp_waveStartsBurrowed == true)) {
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedCivilianBurrowed", lp_infestedTerranCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedExploderBurrowed", lp_infestedExploderCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedTerranCampaignBurrowed", lp_infestedMarineCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedAbominationBurrowed", lp_aberrationCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "NovaInfestedBansheeBurrowed", lp_infestedBansheeCount, lp_spawnRegion);
    }
    else {
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedCivilian", lp_infestedTerranCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedExploder", lp_infestedExploderCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedTerranCampaign", lp_infestedMarineCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "InfestedAbomination", lp_aberrationCount, lp_spawnRegion);
        gf_AddInfestedUnitsToRageWave(lp_colonyShipIndex, "NovaInfestedBanshee", lp_infestedBansheeCount, lp_spawnRegion);
    }
    AIAttackWaveSend(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 0, true);
}

void gf_SendHybridinRageWave (int lp_colonyShipIndex, int lp_hybridUnitType, int lp_count, region lp_spawnRegion) {
    // Variable Declarations
    point lv_hybridSpawnLocation;
    unitgroup lv_spawnedHybrid;
    string lv_hybridSpawnType;

    // Automatic Variable Declarations
    int autoE6C2FC25_n;
    int autoE6C2FC25_i;
    unitgroup auto134E4D0F_g;
    int auto134E4D0F_u;
    unit auto134E4D0F_var;

    // Variable Initialization
    lv_spawnedHybrid = UnitGroupEmpty();

    // Implementation
    if ((lp_hybridUnitType == ge_HybridSize_LargeDominatorBehemoth)) {
        if ((PlayerRace(gv_pLAYER_03_AMON_Claimers) == "Zerg")) {
            lv_hybridSpawnType = "HybridBehemoth";
        }
        else {
            lv_hybridSpawnType = "HybridBehemoth";
        }
    }

    AIAttackWaveSetTargetUnit(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionGetCenter(lp_spawnRegion));
    autoE6C2FC25_n = lp_count;
    for (autoE6C2FC25_i = 1; autoE6C2FC25_i <= autoE6C2FC25_n; autoE6C2FC25_i += 1) {
        if ((lp_hybridUnitType == ge_HybridSize_SmallDestroyerReaverNemesis)) {
            if ((RandomInt(0, 3) == 1)) {
                lv_hybridSpawnType = "HybridNemesis";
            }
            else {
                if ((PlayerRace(gv_pLAYER_03_AMON_Claimers) == "Zerg")) {
                    lv_hybridSpawnType = "HybridDestroyer";
                }
                else {
                    lv_hybridSpawnType = "HybridReaver";
                }
            }
        }

        lv_hybridSpawnLocation = RegionRandomPoint(lp_spawnRegion);
        libNtve_gf_UnitCreateFacingPoint(1, lv_hybridSpawnType, 0, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, lv_hybridSpawnLocation, UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit));
        UnitGroupAdd(gv_infestedRageWaveUnits, UnitLastCreated());
        UnitGroupAdd(lv_spawnedHybrid, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 0, lp_colonyShipIndex);
        libNtve_gf_CreateActorAtPoint("HybridWarpInEffect", lv_hybridSpawnLocation);
        libHots_gf_StoreActorForUnit(UnitLastCreated(), 1, libNtve_gf_ActorLastCreated());
        Wait(0.0625, c_timeGame);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIAttackWaveUseUnit(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitLastCreated());
    }
    AIAttackWaveSend(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 0, true);
    Wait(2.0, c_timeGame);
    auto134E4D0F_g = lv_spawnedHybrid;
    auto134E4D0F_u = UnitGroupCount(auto134E4D0F_g, c_unitCountAll);
    for (;; auto134E4D0F_u -= 1) {
        auto134E4D0F_var = UnitGroupUnitFromEnd(auto134E4D0F_g, auto134E4D0F_u);
        if (auto134E4D0F_var == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(auto134E4D0F_var, 1));
    }
}

void gf_AddInfestedUnitsToRageWave (int lp_colonyShipIndex, string lp_infestedUnitType, int lp_count, region lp_spawnRegion) {
    // Automatic Variable Declarations
    int auto07296E11_n;
    int auto07296E11_i;

    // Implementation
    auto07296E11_n = lp_count;
    for (auto07296E11_i = 1; auto07296E11_i <= auto07296E11_n; auto07296E11_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_infestedUnitType, 0, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionRandomPoint(lp_spawnRegion));
        UnitGroupAdd(gv_infestedRageWaveUnits, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 0, lp_colonyShipIndex);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("NovaInfestedBansheeLand", 1)), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIAttackWaveUseUnit(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitLastCreated());
    }
}

trigger auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger = null;
unit auto_gf_BurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

void gf_BurrowAndRemoveInfestedWaveUnit (unit lp_infestedUnit) {
    auto_gf_BurrowAndRemoveInfestedWaveUnit_lp_infestedUnit = lp_infestedUnit;

    if (auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger == null) {
        auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger = TriggerCreate("auto_gf_BurrowAndRemoveInfestedWaveUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_BurrowAndRemoveInfestedWaveUnit_Trigger, false, false);
}

bool auto_gf_BurrowAndRemoveInfestedWaveUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_infestedUnit = auto_gf_BurrowAndRemoveInfestedWaveUnit_lp_infestedUnit;

    // Variable Declarations
    fixed lv_missionTimeRemoveIssued;
    string lv_typeOfInfestedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    AIRemoveUnitFromAnyWaves(lp_infestedUnit);
    Wait(RandomFixed(0.0, 3.0), c_timeAI);
    lv_missionTimeRemoveIssued = GameGetMissionTime();
    if ((UnitIsAlive(lp_infestedUnit) == true) && (UnitGetType(lp_infestedUnit) == "InfestedColonistTransportNova")) {
        UnitSetOwner(lp_infestedUnit, 0, true);
        return true;
    }

    lv_typeOfInfestedUnit = UnitGetType(lp_infestedUnit);
    while ((UnitIsAlive(lp_infestedUnit) == true)) {
        if ((libCOMI_gf_GetUnitRace(lp_infestedUnit) == "Prot")) {
            gf_WarpOutProtossUnit(lp_infestedUnit);
            return true;
        }
        else if ((UnitTestPlane(lp_infestedUnit, c_planeAir) == true) && (lv_typeOfInfestedUnit != "NovaInfestedBanshee")) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(lp_infestedUnit, gv_pLAYER_01_USER) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lp_infestedUnit, gv_pLAYER_02_USER) == true)) {
                UnitIssueOrder(lp_infestedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_infestedUnit), 5.0, AngleBetweenPoints(RegionGetCenter(RegionPlayableMap()), UnitGetPosition(lp_infestedUnit)))), c_orderQueueReplace);
                Wait(1.0, c_timeGame);
            }
            else {
                break;
            }
        }
        else if ((lv_typeOfInfestedUnit != "NovaInfestedSiegeTank") && (lv_typeOfInfestedUnit != "NovaInfestedSiegeTankUprooted") && ((libCOMI_gf_GetUnitRace(lp_infestedUnit) == "Zerg") || (lv_typeOfInfestedUnit == "InfestedCivilian") || (lv_typeOfInfestedUnit == "InfestedExploder") || (lv_typeOfInfestedUnit == "InfestedTerranCampaign") || (lv_typeOfInfestedUnit == "InfestedAbomination") || (lv_typeOfInfestedUnit == "NovaInfestedBanshee"))) {
            if ((lv_typeOfInfestedUnit == UnitGetType(lp_infestedUnit))) {
                UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueReplace);
                UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedCivilianDown", 0)), c_orderQueueReplace);
                UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedExploderDown", 0)), c_orderQueueReplace);
                UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedTerranCampaignDown", 0)), c_orderQueueReplace);
                UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("BurrowInfestedAbominationDown", 0)), c_orderQueueReplace);
                UnitIssueOrder(lp_infestedUnit, Order(AbilityCommand("NovaInfestedBansheeLand", 0)), c_orderQueueReplace);
            }
            else {
                break;
            }
            Wait(2.0, c_timeAI);
        }
        else if (true) {
            UnitBehaviorAdd(lp_infestedUnit, "SolarCombustion", lp_infestedUnit, 1);
            Wait(2.0, c_timeGame);
        }
    }
    if ((UnitIsAlive(lp_infestedUnit) == true)) {
        Wait(4.0, c_timeAI);
        UnitRemove(lp_infestedUnit);
    }

    return true;
}

void gf_RageWaveInfestedTransport (int lp_colonyShipIndex, int lp_player, int lp_resourceAmount, int lp_techLevel, point lp_spawn) {
    // Variable Declarations
    point lv_spawnLocation;
    unitgroup lv_attackGroup;
    unitgroup lv_infestedTransportCargo;
    int lv_transportCreationIter;
    unit lv_nearbyTransport;
    unit lv_cargoIter;

    // Automatic Variable Declarations
    unitgroup auto46A457CC_g;
    int auto46A457CC_u;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_infestedTransportCargo = UnitGroupEmpty();

    // Implementation
    gf_CreateInfestedTransportCargo(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, lp_resourceAmount, lp_techLevel, PointFromId(1664965403));
    UnitGroupAddUnitGroup(lv_infestedTransportCargo, gv_lastCreatedInfestedTransportCargo);
    UnitGroupAddUnitGroup(gv_infestedRageWaveUnits, lv_infestedTransportCargo);
    auto46A457CC_g = lv_infestedTransportCargo;
    auto46A457CC_u = UnitGroupCount(auto46A457CC_g, c_unitCountAll);
    for (;; auto46A457CC_u -= 1) {
        lv_cargoIter = UnitGroupUnitFromEnd(auto46A457CC_g, auto46A457CC_u);
        if (lv_cargoIter == null) { break; }
        UnitSetCustomValue(lv_cargoIter, 0, lp_colonyShipIndex);
    }
    AIAttackWaveSetTargetUnit(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, lv_spawnLocation);
    lv_nearbyTransport = UnitGroupUnit(UnitGroup("InfestedColonistTransportNova", c_playerAny, RegionCircle(lp_spawn, 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((lv_nearbyTransport == null)) {
        UnitCreate(1, "InfestedColonistTransportNova", 0, lp_player, lp_spawn, PointGetFacing(lp_spawn));
        lv_nearbyTransport = UnitLastCreated();
    }
    else {
        UnitSetOwner(lv_nearbyTransport, lp_player, true);
    }
    UnitGroupAdd(lv_attackGroup, lv_nearbyTransport);
    UnitSetCustomValue(lv_nearbyTransport, 0, lp_colonyShipIndex);
    UnitGroupAdd(gv_infestedRageWaveUnits, lv_nearbyTransport);
    gf_InfestedTransportCargo(lv_nearbyTransport, lv_infestedTransportCargo, lp_colonyShipIndex);
    AIAttackWaveUseGroup(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, lv_attackGroup);
    AIAttackWaveSend(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 0, true);
}

trigger auto_gf_SpecialRageWaveJustMoreDudes_Trigger = null;
int auto_gf_SpecialRageWaveJustMoreDudes_lp_colonyShipIndex;

void gf_SpecialRageWaveJustMoreDudes (int lp_colonyShipIndex) {
    auto_gf_SpecialRageWaveJustMoreDudes_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_SpecialRageWaveJustMoreDudes_Trigger == null) {
        auto_gf_SpecialRageWaveJustMoreDudes_Trigger = TriggerCreate("auto_gf_SpecialRageWaveJustMoreDudes_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWaveJustMoreDudes_Trigger, false, false);
}

bool auto_gf_SpecialRageWaveJustMoreDudes_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SpecialRageWaveJustMoreDudes_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion01;
    region lv_spawnRegion02;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(63.0, c_timeAI);
    if ((lp_colonyShipIndex < 10)) {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves 0" + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    else {
        lv_spawnRegion01 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 01"));
        lv_spawnRegion02 = RegionFromName(("ColonyShip Waves " + IntToString(lp_colonyShipIndex) + " - 02"));
    }
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(8, 8, 12, 16, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 6, 9, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 4, 0, 0), 0);
        Wait(5.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 3, 3, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), 0);
        Wait(10.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), 0);
        Wait(5.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion02, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), 0);
        Wait(10.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), 0);
        Wait(5.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion01, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0), 0);
    }

    return true;
}

trigger auto_gf_SpecialRageWaveExploders_Trigger = null;
int auto_gf_SpecialRageWaveExploders_lp_colonyShipIndex;

void gf_SpecialRageWaveExploders (int lp_colonyShipIndex) {
    auto_gf_SpecialRageWaveExploders_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_SpecialRageWaveExploders_Trigger == null) {
        auto_gf_SpecialRageWaveExploders_Trigger = TriggerCreate("auto_gf_SpecialRageWaveExploders_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWaveExploders_Trigger, false, false);
}

bool auto_gf_SpecialRageWaveExploders_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SpecialRageWaveExploders_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(63.0, c_timeAI);
    if ((lp_colonyShipIndex == 1)) {
        lv_spawnRegion = RegionFromId(57);
    }
    else {
        lv_spawnRegion = RegionFromId(58);
    }
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion, true, 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(6, 6, 8, 10, 0, 0), 0, 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion, true, 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(10, 10, 12, 14, 0, 0), 0, 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion, true, 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(15, 15, 18, 21, 0, 0), 0, 0, 0);
    }

    return true;
}

trigger auto_gf_SpecialRageWaveEggPoppers_Trigger = null;
int auto_gf_SpecialRageWaveEggPoppers_lp_colonyShipIndex;

void gf_SpecialRageWaveEggPoppers (int lp_colonyShipIndex) {
    auto_gf_SpecialRageWaveEggPoppers_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_SpecialRageWaveEggPoppers_Trigger == null) {
        auto_gf_SpecialRageWaveEggPoppers_Trigger = TriggerCreate("auto_gf_SpecialRageWaveEggPoppers_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWaveEggPoppers_Trigger, false, false);
}

bool auto_gf_SpecialRageWaveEggPoppers_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SpecialRageWaveEggPoppers_lp_colonyShipIndex;

    // Automatic Variable Declarations
    // Implementation
    Wait(37.0, c_timeAI);
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3181), PointFromId(352));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(352), libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 2, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 0, 0), 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3178), PointFromId(568));
        gf_GrowAndHatchEggCluster(DoodadFromId(3177), PointFromId(573));
        Wait(0.125, c_timeAI);
        gf_GrowAndHatchEggCluster(DoodadFromId(596), PointFromId(594));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(568), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 6, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 3, 6, 0, 0), 0, 0);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(573), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 4, 0, 0), 0, 0);
        Wait(0.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(594), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 4, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 6, 0, 0), 0, 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3182), PointFromId(595));
        gf_GrowAndHatchEggCluster(DoodadFromId(598), PointFromId(600));
        Wait(0.125, c_timeAI);
        gf_GrowAndHatchEggCluster(DoodadFromId(3180), PointFromId(791));
        gf_GrowAndHatchEggCluster(DoodadFromId(597), PointFromId(3183));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(595), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), 0);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(600), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 4, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 4, 0, 0), 0, 0);
        Wait(0.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(791), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 4, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 4, 0, 0), 0, 0);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(3183), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 4, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 3, 4, 0, 0), 0);
        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_GrowAndHatchEggCluster(DoodadFromId(3179), PointFromId(3184));
        gf_GrowAndHatchEggCluster(DoodadFromId(599), PointFromId(3185));
        Wait(0.125, c_timeAI);
        gf_GrowAndHatchEggCluster(DoodadFromId(571), PointFromId(3186));
        gf_GrowAndHatchEggCluster(DoodadFromId(2612), PointFromId(3187));
        Wait(4.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(3184), 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 3, 0, 0), 0);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(3185), 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 4, 6, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 0, 0), 0);
        Wait(0.125, c_timeAI);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(3186), 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 4, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 1, 0, 0), 0);
        gf_SendInfestedEggPopperWave(lp_colonyShipIndex, PointFromId(3187), 2, libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 4, 6, 0, 0), 0, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 3, 0, 0), 0);
    }

    return true;
}

trigger auto_gf_GrowAndHatchEggCluster_Trigger = null;
doodad auto_gf_GrowAndHatchEggCluster_lp_eggClusterDoodad;
point auto_gf_GrowAndHatchEggCluster_lp_eggClusterPoint;

void gf_GrowAndHatchEggCluster (doodad lp_eggClusterDoodad, point lp_eggClusterPoint) {
    auto_gf_GrowAndHatchEggCluster_lp_eggClusterDoodad = lp_eggClusterDoodad;
    auto_gf_GrowAndHatchEggCluster_lp_eggClusterPoint = lp_eggClusterPoint;

    if (auto_gf_GrowAndHatchEggCluster_Trigger == null) {
        auto_gf_GrowAndHatchEggCluster_Trigger = TriggerCreate("auto_gf_GrowAndHatchEggCluster_TriggerFunc");
    }

    TriggerExecute(auto_gf_GrowAndHatchEggCluster_Trigger, false, false);
}

bool auto_gf_GrowAndHatchEggCluster_TriggerFunc (bool testConds, bool runActions) {
    doodad lp_eggClusterDoodad = auto_gf_GrowAndHatchEggCluster_lp_eggClusterDoodad;
    point lp_eggClusterPoint = auto_gf_GrowAndHatchEggCluster_lp_eggClusterPoint;

    // Automatic Variable Declarations
    // Implementation
    SoundPlayAtPointForPlayer(SoundLink("Doodad_ZerusChrysalisEgg_StandMorphStart", -1), c_maxPlayers, PlayerGroupAll(), lp_eggClusterPoint, 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(lp_eggClusterDoodad), "AnimClear StandUnpowered");
    ActorSend(ActorFromDoodad(lp_eggClusterDoodad), "AnimPlay StandUnpoweredEnd Stand,Unpowered,End 0 -1.000000 -1.000000 2.000000 AsDuration");
    Wait(4.0, c_timeAI);
    SoundPlayAtPointForPlayer(SoundLink("Doodad_GiantYagdraEgg_Death", -1), c_maxPlayers, PlayerGroupAll(), lp_eggClusterPoint, 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(lp_eggClusterDoodad), "AnimPlay Death Death PlayForever,NonLooping -1.000000 -1.000000 2.000000 AsDuration");
    return true;
}

void gf_SendInfestedEggPopperWave (int lp_colonyShipIndex, point lp_launchPoint, int lp_infestedTerranCount, int lp_infestedExploderCount, int lp_infestedMarineCount, int lp_aberrationCount, int lp_infestedBansheeCount) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetTargetUnit(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_colonyShipIndex, "InfestedCivilian", lp_infestedTerranCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_colonyShipIndex, "InfestedExploder", lp_infestedExploderCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_colonyShipIndex, "InfestedTerranCampaign", lp_infestedMarineCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_colonyShipIndex, "InfestedAbomination", lp_aberrationCount, lp_launchPoint);
    gf_AddInfestedUnitsToEggPopperWave(lp_colonyShipIndex, "NovaInfestedBanshee", lp_infestedBansheeCount, lp_launchPoint);
    AIAttackWaveSend(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 0, true);
}

void gf_AddInfestedUnitsToEggPopperWave (int lp_colonyShipIndex, string lp_infestedUnitType, int lp_count, point lp_launchPoint) {
    // Variable Declarations
    point lv_impactPoint;

    // Automatic Variable Declarations
    int auto4577369B_n;
    int auto4577369B_i;
    const int auto9FFDE875_n = 50;
    int auto9FFDE875_i;

    // Variable Initialization

    // Implementation
    auto4577369B_n = lp_count;
    for (auto4577369B_i = 1; auto4577369B_i <= auto4577369B_n; auto4577369B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_infestedUnitType, c_unitCreateIgnorePlacement, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionRandomPoint(RegionCircle(lp_launchPoint, 1.0)));
        UnitGroupAdd(gv_infestedRageWaveUnits, UnitLastCreated());
        lv_impactPoint = RegionRandomPoint(RegionCircle(lp_launchPoint, 3.5));
        for (auto9FFDE875_i = 1; auto9FFDE875_i <= auto9FFDE875_n; auto9FFDE875_i += 1) {
            if (((PointPathingPassable(lv_impactPoint) == false) || (PointPathingCliffLevel(lp_launchPoint) != PointPathingCliffLevel(lv_impactPoint)))) {
                lv_impactPoint = RegionRandomPoint(RegionCircle(lp_launchPoint, 3.5));
            }
            else {
                break;
            }
        }
        if (((PointPathingPassable(lv_impactPoint) == false) || (PointPathingCliffLevel(lp_launchPoint) != PointPathingCliffLevel(lv_impactPoint)))) {
            lv_impactPoint = libNtve_gf_PointOffsetTowardsPoint(lp_launchPoint, 2.0, PointFromId(3188));
        }

        gf_LaunchUnitToTargetPointWithMover(UnitLastCreated(), lv_impactPoint, "UnitLaunchToTargetPointSlower");
        UnitSetCustomValue(UnitLastCreated(), 0, lp_colonyShipIndex);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIAttackWaveUseUnit(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitLastCreated());
    }
}

trigger auto_gf_SpecialRageWavesColonyShipExplodes_Trigger = null;
int auto_gf_SpecialRageWavesColonyShipExplodes_lp_colonyShipIndex;

void gf_SpecialRageWavesColonyShipExplodes (int lp_colonyShipIndex) {
    auto_gf_SpecialRageWavesColonyShipExplodes_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_SpecialRageWavesColonyShipExplodes_Trigger == null) {
        auto_gf_SpecialRageWavesColonyShipExplodes_Trigger = TriggerCreate("auto_gf_SpecialRageWavesColonyShipExplodes_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesColonyShipExplodes_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesColonyShipExplodes_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SpecialRageWavesColonyShipExplodes_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion;
    unit lv_spawnColonyShip;

    // Automatic Variable Declarations
    playergroup auto262E298B_g;
    int auto262E298B_var;

    // Variable Initialization

    // Implementation
    Wait(56.0, c_timeAI);
    if ((lp_colonyShipIndex == 2)) {
        lv_spawnRegion = RegionFromId(59);
        lv_spawnColonyShip = UnitFromId(803);
    }
    else {
        lv_spawnRegion = RegionFromId(62);
        lv_spawnColonyShip = UnitFromId(506);
    }
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        auto262E298B_g = libCOMI_gf_HumanPlayers();
        auto262E298B_var = -1;
        while (true) {
            auto262E298B_var = PlayerGroupNextPlayer(auto262E298B_g, auto262E298B_var);
            if (auto262E298B_var < 0) { break; }
            VisRevealArea(auto262E298B_var, RegionCircle(UnitGetPosition(lv_spawnColonyShip), 4.0), 12.0, false);
        }
        Wait(6.0, c_timeAI);
        UnitKill(lv_spawnColonyShip);
        Wait(0.25, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_SendInfestedRageWave(lp_colonyShipIndex, lv_spawnRegion, true, libCOMI_gf_MinimumDifficultyValueCoopInteger(4, 4, 6, 8, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 6, 0, 0), libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 3, 0, 0), 3, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 3, 4, 0, 0));
    }

    return true;
}

trigger auto_gf_SpecialRageWavesSiegeTanks_Trigger = null;
int auto_gf_SpecialRageWavesSiegeTanks_lp_colonyShipIndex;

void gf_SpecialRageWavesSiegeTanks (int lp_colonyShipIndex) {
    auto_gf_SpecialRageWavesSiegeTanks_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_SpecialRageWavesSiegeTanks_Trigger == null) {
        auto_gf_SpecialRageWavesSiegeTanks_Trigger = TriggerCreate("auto_gf_SpecialRageWavesSiegeTanks_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesSiegeTanks_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesSiegeTanks_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SpecialRageWavesSiegeTanks_lp_colonyShipIndex;

    // Automatic Variable Declarations
    // Implementation
    Wait(30.0, c_timeAI);
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        }

        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        Wait(10.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        }

        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        }

        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(72)));
        }

        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0) == 1)) {
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(73)));
            gf_UnloadInfestedSiegeTankFromOverlord(RegionRandomPoint(RegionFromId(71)), RegionRandomPoint(RegionFromId(63)));
        }

    }

    return true;
}

trigger auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger = null;
point auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_spawnPoint;
point auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_dropPoint;

void gf_UnloadInfestedSiegeTankFromOverlord (point lp_spawnPoint, point lp_dropPoint) {
    auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_spawnPoint = lp_spawnPoint;
    auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_dropPoint = lp_dropPoint;

    if (auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger == null) {
        auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger = TriggerCreate("auto_gf_UnloadInfestedSiegeTankFromOverlord_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnloadInfestedSiegeTankFromOverlord_Trigger, false, false);
}

bool auto_gf_UnloadInfestedSiegeTankFromOverlord_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_spawnPoint;
    point lp_dropPoint = auto_gf_UnloadInfestedSiegeTankFromOverlord_lp_dropPoint;

    // Variable Declarations
    unit lv_overlord;
    unit lv_infestedSiegeTank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, "Overlord", 0, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, lp_spawnPoint, 270.0);
    lv_overlord = UnitLastCreated();
    UnitCargoCreate(lv_overlord, "NovaInfestedSiegeTankUprooted", 1);
    lv_infestedSiegeTank = UnitCargoLastCreated();
    UnitGroupAdd(gv_infestedRageWaveUnits, lv_infestedSiegeTank);
    UnitSetCustomValue(lv_infestedSiegeTank, 0, 7.0);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_overlord) == true) && (libNtve_gf_UnitIsInsideTransport(lv_infestedSiegeTank) == true)) {
        UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), lp_dropPoint), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    UnitIssueOrder(lv_infestedSiegeTank, Order(AbilityCommand("NovaInfestedSiegeTankRoot", 0)), c_orderQueueReplace);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_overlord) == true) && (libNtve_gf_UnitInRegion(lv_overlord, RegionFromId(71)) == false)) {
        UnitIssueOrder(lv_overlord, OrderTargetingPoint(AbilityCommand("move", 0), lp_spawnPoint), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    if ((UnitIsAlive(lv_overlord) == true)) {
        UnitRemove(lv_overlord);
    }

    return true;
}

trigger auto_gf_SpecialRageWavesNydusWorms_Trigger = null;
int auto_gf_SpecialRageWavesNydusWorms_lp_colonyShipIndex;

void gf_SpecialRageWavesNydusWorms (int lp_colonyShipIndex) {
    auto_gf_SpecialRageWavesNydusWorms_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_SpecialRageWavesNydusWorms_Trigger == null) {
        auto_gf_SpecialRageWavesNydusWorms_Trigger = TriggerCreate("auto_gf_SpecialRageWavesNydusWorms_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesNydusWorms_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesNydusWorms_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SpecialRageWavesNydusWorms_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion;
    unit lv_nydus01;
    unit lv_nydus02;
    unit lv_nydus03;
    unitgroup lv_nydusWorms;
    int lv_nextSpawningWormIndex;
    unit lv_nextSpawningWorm;

    // Automatic Variable Declarations
    playergroup auto3CCCBE92_g;
    int auto3CCCBE92_var;
    playergroup auto7A0941F2_g;
    int auto7A0941F2_var;
    playergroup auto595CCE72_g;
    int auto595CCE72_var;

    // Variable Initialization
    lv_nydusWorms = UnitGroupEmpty();

    // Implementation
    Wait(30.0, c_timeAI);
    if ((lp_colonyShipIndex == 1)) {
        lv_spawnRegion = RegionFromId(57);
    }
    else {
        lv_spawnRegion = RegionFromId(58);
    }
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        SoundPlayAtPointForPlayer(SoundLink("PShakuras02_BricksCrumble", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(203), 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("AC_Lava_Volcanic_Rumble_Swells", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(203), 0.0, 150.0, 0.0);
        auto3CCCBE92_g = libCOMI_gf_HumanPlayers();
        auto3CCCBE92_var = -1;
        while (true) {
            auto3CCCBE92_var = PlayerGroupNextPlayer(auto3CCCBE92_g, auto3CCCBE92_var);
            if (auto3CCCBE92_var < 0) { break; }
            if ((RegionContainsPoint(RegionFromId(154), CameraGetTarget(auto3CCCBE92_var)) == true)) {
                SoundPlayAtPointForPlayer(SoundLink("Event_EarthquakeRumble", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(205), 0.0, 100.0, 0.0);
                CameraShake(auto3CCCBE92_var, "Medium", "Shake", 1.0, 0.0, 2.0);
            }

        }
        Wait(2.0, c_timeAI);
        auto7A0941F2_g = libCOMI_gf_HumanPlayers();
        auto7A0941F2_var = -1;
        while (true) {
            auto7A0941F2_var = PlayerGroupNextPlayer(auto7A0941F2_g, auto7A0941F2_var);
            if (auto7A0941F2_var < 0) { break; }
            if ((RegionContainsPoint(RegionFromId(154), CameraGetTarget(auto7A0941F2_var)) == true)) {
                CameraShake(auto7A0941F2_var, "Medium", "Earthquake", 0.5, 1.0, 2.0);
                SoundPlayAtPointForPlayer(SoundLink("Event_EarthquakeRumble", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(205), 0.0, 100.0, 0.0);
            }

        }
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(203), 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_07_ZERG, PointFromId(203));
        UnitBehaviorRemove(UnitLastCreated(), "GreaterNydusWormAllyCreate", 1);
        UnitBehaviorRemove(UnitLastCreated(), "GreaterNydusWormConjoined", 1);
        lv_nydus01 = UnitLastCreated();
        UnitGroupAdd(lv_nydusWorms, lv_nydus01);
        UnitAbilityEnable(lv_nydus01, "GreaterNydusWormTransport", false);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,00 DontResetOnUnhide 0.000000");
        SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(203), 0.0, 100.0, 0.0);
        gf_SpecialRageWavesNydusLogic(UnitLastCreated(), lp_colonyShipIndex);
        Wait(15.0, c_timeAI);
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(205), 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_07_ZERG, PointFromId(205));
        UnitBehaviorRemove(UnitLastCreated(), "GreaterNydusWormAllyCreate", 1);
        UnitBehaviorRemove(UnitLastCreated(), "GreaterNydusWormConjoined", 1);
        lv_nydus02 = UnitLastCreated();
        UnitGroupAdd(lv_nydusWorms, lv_nydus02);
        UnitAbilityEnable(lv_nydus02, "GreaterNydusWormTransport", false);
        gf_SpecialRageWavesNydusLogic(UnitLastCreated(), lp_colonyShipIndex);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,01 DontResetOnUnhide 0.000000");
        SoundPlayAtPointForPlayer(SoundLink("Nydus_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(205), 0.0, 100.0, 0.0);
        Wait(10.0, c_timeAI);
        auto595CCE72_g = libCOMI_gf_HumanPlayers();
        auto595CCE72_var = -1;
        while (true) {
            auto595CCE72_var = PlayerGroupNextPlayer(auto595CCE72_g, auto595CCE72_var);
            if (auto595CCE72_var < 0) { break; }
            if ((RegionContainsPoint(RegionFromId(64), CameraGetTarget(auto595CCE72_var)) == true)) {
                CameraShake(auto595CCE72_var, "Medium", "Earthquake", 0.5, 1.0, 2.0);
                SoundPlayAtPointForPlayer(SoundLink("AC_Lava_Volcanic_Rumble_Swells", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(203), 0.0, 120.0, 0.0);
            }

        }
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(208), 4.0, Color(100.00, 0.00, 0.00));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_07_ZERG, PointFromId(208));
        UnitBehaviorRemove(UnitLastCreated(), "GreaterNydusWormAllyCreate", 1);
        UnitBehaviorRemove(UnitLastCreated(), "GreaterNydusWormConjoined", 1);
        lv_nydus03 = UnitLastCreated();
        UnitGroupAdd(lv_nydusWorms, lv_nydus03);
        UnitAbilityEnable(lv_nydus03, "GreaterNydusWormTransport", false);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,01 DontResetOnUnhide 0.000000");
        SoundPlayAtPointForPlayer(SoundLink("Nydus_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(208), 0.0, 100.0, 0.0);
        gf_SpecialRageWavesNydusLogic(UnitLastCreated(), lp_colonyShipIndex);
    }

    return true;
}

trigger auto_gf_UnloadUnitsFromNydusWorm_Trigger = null;
int auto_gf_UnloadUnitsFromNydusWorm_lp_count;
string auto_gf_UnloadUnitsFromNydusWorm_lp_unitType;
unit auto_gf_UnloadUnitsFromNydusWorm_lp_nydusWorm;
point auto_gf_UnloadUnitsFromNydusWorm_lp_rallyPoint;
int auto_gf_UnloadUnitsFromNydusWorm_lp_player;
int auto_gf_UnloadUnitsFromNydusWorm_lp_maxCount;

void gf_UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player, int lp_maxCount) {
    auto_gf_UnloadUnitsFromNydusWorm_lp_count = lp_count;
    auto_gf_UnloadUnitsFromNydusWorm_lp_unitType = lp_unitType;
    auto_gf_UnloadUnitsFromNydusWorm_lp_nydusWorm = lp_nydusWorm;
    auto_gf_UnloadUnitsFromNydusWorm_lp_rallyPoint = lp_rallyPoint;
    auto_gf_UnloadUnitsFromNydusWorm_lp_player = lp_player;
    auto_gf_UnloadUnitsFromNydusWorm_lp_maxCount = lp_maxCount;

    if (auto_gf_UnloadUnitsFromNydusWorm_Trigger == null) {
        auto_gf_UnloadUnitsFromNydusWorm_Trigger = TriggerCreate("auto_gf_UnloadUnitsFromNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnloadUnitsFromNydusWorm_Trigger, false, false);
}

bool auto_gf_UnloadUnitsFromNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_UnloadUnitsFromNydusWorm_lp_count;
    string lp_unitType = auto_gf_UnloadUnitsFromNydusWorm_lp_unitType;
    unit lp_nydusWorm = auto_gf_UnloadUnitsFromNydusWorm_lp_nydusWorm;
    point lp_rallyPoint = auto_gf_UnloadUnitsFromNydusWorm_lp_rallyPoint;
    int lp_player = auto_gf_UnloadUnitsFromNydusWorm_lp_player;
    int lp_maxCount = auto_gf_UnloadUnitsFromNydusWorm_lp_maxCount;

    // Variable Declarations
    int lv_i;
    string lv_alternateUnitType;

    // Automatic Variable Declarations
    string auto2AA44822_val;
    int auto0EB86770_ae;
    const int auto0EB86770_ai = 1;

    // Variable Initialization

    // Implementation
    auto2AA44822_val = lp_unitType;
    if (auto2AA44822_val == "Zergling") {
        lv_alternateUnitType = gv_tier01_AliasZealot;
    }
    else if (auto2AA44822_val == "Roach") {
        lv_alternateUnitType = gv_tier02_AliasStalker;
    }
    else if (auto2AA44822_val == "Hydralisk") {
        lv_alternateUnitType = gv_tier03_AliasImmortal;
    }
    else if (auto2AA44822_val == "Ultralisk") {
        lv_alternateUnitType = gv_tier04_AliasColossus;
    }
    else {
        lv_alternateUnitType = "Predator";
    }
    auto0EB86770_ae = lp_count;
    lv_i = 1;
    for ( ; ( (auto0EB86770_ai >= 0 && lv_i <= auto0EB86770_ae) || (auto0EB86770_ai < 0 && lv_i >= auto0EB86770_ae) ) ; lv_i += auto0EB86770_ai ) {
        if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_nydusWorm) == true) && (UnitGroupCount(UnitGroupFilter(lp_unitType, c_playerAny, gv_nydusUnloadedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lp_maxCount)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_alternateUnitType, 0, lp_player, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            UnitGroupAdd(gv_nydusUnloadedUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_rallyPoint), c_orderQueueReplace);
            Wait(0.75, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_UnloadUnitGroupfromNydusWorm_Trigger = null;
unit auto_gf_UnloadUnitGroupfromNydusWorm_lp_nydusWorm;
unitgroup auto_gf_UnloadUnitGroupfromNydusWorm_lp_transportedGroup;
int auto_gf_UnloadUnitGroupfromNydusWorm_lp_colonyShipIndex;

void gf_UnloadUnitGroupfromNydusWorm (unit lp_nydusWorm, unitgroup lp_transportedGroup, int lp_colonyShipIndex) {
    auto_gf_UnloadUnitGroupfromNydusWorm_lp_nydusWorm = lp_nydusWorm;
    auto_gf_UnloadUnitGroupfromNydusWorm_lp_transportedGroup = lp_transportedGroup;
    auto_gf_UnloadUnitGroupfromNydusWorm_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_UnloadUnitGroupfromNydusWorm_Trigger == null) {
        auto_gf_UnloadUnitGroupfromNydusWorm_Trigger = TriggerCreate("auto_gf_UnloadUnitGroupfromNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnloadUnitGroupfromNydusWorm_Trigger, false, false);
}

bool auto_gf_UnloadUnitGroupfromNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nydusWorm = auto_gf_UnloadUnitGroupfromNydusWorm_lp_nydusWorm;
    unitgroup lp_transportedGroup = auto_gf_UnloadUnitGroupfromNydusWorm_lp_transportedGroup;
    int lp_colonyShipIndex = auto_gf_UnloadUnitGroupfromNydusWorm_lp_colonyShipIndex;

    // Variable Declarations
    unit lv_transportIter;
    point lv_nydusLocation;
    int lv_nydusOwner;
    point lv_attackTargetLocation;

    // Automatic Variable Declarations
    unitgroup autoB854A1C1_g;
    int autoB854A1C1_u;
    unitgroup auto3FD865C9_g;
    int auto3FD865C9_u;

    // Variable Initialization
    lv_nydusLocation = UnitGetPosition(lp_nydusWorm);
    lv_nydusOwner = UnitGetOwner(lp_nydusWorm);

    // Implementation
    if ((UnitIsAlive(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit) == true)) {
        lv_attackTargetLocation = UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
    }
    else {
        lv_attackTargetLocation = PlayerStartLocation(RandomInt(gv_pLAYER_01_USER, gv_pLAYER_01_USER));
    }
    Wait(1.0, c_timeAI);
    autoB854A1C1_g = lp_transportedGroup;
    autoB854A1C1_u = UnitGroupCount(autoB854A1C1_g, c_unitCountAll);
    for (;; autoB854A1C1_u -= 1) {
        lv_transportIter = UnitGroupUnitFromEnd(autoB854A1C1_g, autoB854A1C1_u);
        if (lv_transportIter == null) { break; }
        libNtve_gf_ShowHideUnit(lv_transportIter, false);
        libNtve_gf_PauseUnit(lv_transportIter, true);
    }
    auto3FD865C9_g = lp_transportedGroup;
    auto3FD865C9_u = UnitGroupCount(auto3FD865C9_g, c_unitCountAll);
    for (;; auto3FD865C9_u -= 1) {
        lv_transportIter = UnitGroupUnitFromEnd(auto3FD865C9_g, auto3FD865C9_u);
        if (lv_transportIter == null) { break; }
        if ((UnitIsAlive(lp_nydusWorm) == true) && (gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), lv_nydusLocation, 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_ShowHideUnit(lv_transportIter, true);
            libNtve_gf_PauseUnit(lv_transportIter, false);
            UnitSetPosition(lv_transportIter, libNtve_gf_PointOffsetTowardsPoint(lv_nydusLocation, 0.75, lv_attackTargetLocation), false);
            UnitIssueOrder(lv_transportIter, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(lv_nydusLocation, 2.5, lv_attackTargetLocation)), c_orderQueueReplace);
            UnitGroupAdd(gv_infestedRageWaveUnits, lv_transportIter);
            UnitSetCustomValue(lv_transportIter, 0, lp_colonyShipIndex);
            Wait(0.75, c_timeAI);
        }
        else {
            UnitRemove(lv_transportIter);
        }
    }
    if ((UnitGroupCount(lp_transportedGroup, c_unitCountAlive) > 0)) {
        if ((UnitIsAlive(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit) == true)) {
            AIAttackWaveSetTargetUnit(lv_nydusOwner, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
        }
        else {
            AIAttackWaveSetTargetPlayer(lv_nydusOwner, libCOMI_gf_HumanPlayers());
        }
        AIAttackWaveUseGroup(lv_nydusOwner, lp_transportedGroup);
        AIAttackWaveSend(lv_nydusOwner, 0, true);
        libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
    }

    return true;
}

trigger auto_gf_SpecialRageWavesNydusLogic_Trigger = null;
unit auto_gf_SpecialRageWavesNydusLogic_lp_nydusWorm;
int auto_gf_SpecialRageWavesNydusLogic_lp_targetedTank;

void gf_SpecialRageWavesNydusLogic (unit lp_nydusWorm, int lp_targetedTank) {
    auto_gf_SpecialRageWavesNydusLogic_lp_nydusWorm = lp_nydusWorm;
    auto_gf_SpecialRageWavesNydusLogic_lp_targetedTank = lp_targetedTank;

    if (auto_gf_SpecialRageWavesNydusLogic_Trigger == null) {
        auto_gf_SpecialRageWavesNydusLogic_Trigger = TriggerCreate("auto_gf_SpecialRageWavesNydusLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesNydusLogic_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesNydusLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nydusWorm = auto_gf_SpecialRageWavesNydusLogic_lp_nydusWorm;
    int lp_targetedTank = auto_gf_SpecialRageWavesNydusLogic_lp_targetedTank;

    // Variable Declarations
    int lv_controllingPlayer;
    int[5] lv_resourceAmount;
    int[5] lv_techLevel;
    int lv_attackForceIter;
    unitgroup lv_nextWaveUnits;
    unitgroup lv_spawnedUnits;

    // Automatic Variable Declarations
    playergroup auto7966813D_g;
    int auto7966813D_var;

    // Variable Initialization
    lv_nextWaveUnits = UnitGroupEmpty();
    lv_spawnedUnits = UnitGroupEmpty();

    // Implementation
    auto7966813D_g = libCOMI_gf_HumanPlayers();
    auto7966813D_var = -1;
    while (true) {
        auto7966813D_var = PlayerGroupNextPlayer(auto7966813D_g, auto7966813D_var);
        if (auto7966813D_var < 0) { break; }
        VisRevealArea(auto7966813D_var, RegionCircle(UnitGetPosition(lp_nydusWorm), 5.0), 8.0, false);
    }
    lv_controllingPlayer = UnitGetOwner(lp_nydusWorm);
    lv_attackForceIter += 1;
    lv_resourceAmount[lv_attackForceIter] = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel[lv_attackForceIter] = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackForceIter += 1;
    lv_resourceAmount[lv_attackForceIter] = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel[lv_attackForceIter] = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_attackForceIter += 1;
    lv_resourceAmount[lv_attackForceIter] = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel[lv_attackForceIter] = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackForceIter += 1;
    lv_resourceAmount[lv_attackForceIter] = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel[lv_attackForceIter] = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackForceIter = 0;
    while (true) {
        if ((UnitIsAlive(lp_nydusWorm) == false)) {
            return true;
        }

        if (lv_attackForceIter >= 4) {
            lv_attackForceIter = 1;
        }
        else {
            lv_attackForceIter = lv_attackForceIter + 1;
        }
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_controllingPlayer, c_playerAny, lv_resourceAmount[lv_attackForceIter], lv_techLevel[lv_attackForceIter], PlayerStartLocation(lv_controllingPlayer), true);
        lv_nextWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        UnitGroupAddUnitGroup(lv_spawnedUnits, lv_nextWaveUnits);
        UnitGroupAddUnitGroup(gv_nydusUnloadedUnits, lv_nextWaveUnits);
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_nydusWorm) == false)) {
            return true;
        }

        gf_UnloadUnitGroupfromNydusWorm(lp_nydusWorm, lv_nextWaveUnits, lp_targetedTank);
        while (!(((UnitIsAlive(lp_nydusWorm) == false) || (UnitGroupCount(lv_spawnedUnits, c_unitCountAlive) <= 0)))) {
            Wait(1.0, c_timeGame);
        }
        Wait(30.0, c_timeAI);
        if ((UnitGroupCount(gv_nydusUnloadedUnits, c_unitCountAlive) > 25)) {
            while (!((UnitGroupCount(gv_nydusUnloadedUnits, c_unitCountAlive) <= 10))) {
                Wait(2.0, c_timeAI);
            }
        }

        if ((UnitIsAlive(lp_nydusWorm) == true) && (gv_colonyShipLocations[lp_targetedTank].lv_state != ge_PRESETColonyShipState_Working)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_nydusWorm), "Unburrow", "Unburrow", c_animFlagFullMatch | c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            AnimWait(libNtve_gf_MainActorofUnit(lp_nydusWorm), "Unburrow", 0.0, c_animationOffsetEnd);
            UnitRemove(lp_nydusWorm);
            return true;
        }

    }
    return true;
}

trigger auto_gf_SpecialRageWavesFlyers_Trigger = null;
int auto_gf_SpecialRageWavesFlyers_lp_colonyShipIndex;

void gf_SpecialRageWavesFlyers (int lp_colonyShipIndex) {
    auto_gf_SpecialRageWavesFlyers_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_SpecialRageWavesFlyers_Trigger == null) {
        auto_gf_SpecialRageWavesFlyers_Trigger = TriggerCreate("auto_gf_SpecialRageWavesFlyers_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesFlyers_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesFlyers_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SpecialRageWavesFlyers_lp_colonyShipIndex;

    // Variable Declarations
    region lv_spawnRegion;
    int lv_rageWaveIter;
    unit lv_transportIter;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto54B24C54_g;
    unitgroup auto63A89D8F_g;
    int auto63A89D8F_u;
    playergroup auto1F447DD8_g;
    unitgroup autoAE4466F1_g;
    int autoAE4466F1_u;
    playergroup auto9BF410FF_g;
    unitgroup auto2675C17D_g;
    int auto2675C17D_u;
    playergroup auto0E068CD7_g;
    unitgroup auto96A4BC09_g;
    int auto96A4BC09_u;

    // Variable Initialization

    // Implementation
    Wait(15.0, c_timeAI);
    lv_spawnRegion = RegionFromId(61);
    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        auto54B24C54_g = gv_amonPlayers;
        lv_rageWaveIter = -1;
        while (true) {
            lv_rageWaveIter = PlayerGroupNextPlayer(auto54B24C54_g, lv_rageWaveIter);
            if (lv_rageWaveIter < 0) { break; }
            AIAttackWaveSetTargetUnit(lv_rageWaveIter, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
        }
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, RegionRandomPoint(lv_spawnRegion), gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
        libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        auto63A89D8F_g = libCOMI_gf_LastCreatedCoopAttackForce();
        auto63A89D8F_u = UnitGroupCount(auto63A89D8F_g, c_unitCountAll);
        for (;; auto63A89D8F_u -= 1) {
            lv_transportIter = UnitGroupUnitFromEnd(auto63A89D8F_g, auto63A89D8F_u);
            if (lv_transportIter == null) { break; }
            if ((UnitGetType(lv_transportIter) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
                gf_SpecialRageWavesFlyersTransportDespawn(lv_transportIter, RegionGetCenter(lv_spawnRegion));
            }

            UnitGroupAdd(gv_infestedRageWaveUnits, lv_transportIter);
            UnitSetCustomValue(lv_transportIter, 0, lp_colonyShipIndex);
        }
        Wait(15.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        auto1F447DD8_g = gv_amonPlayers;
        lv_rageWaveIter = -1;
        while (true) {
            lv_rageWaveIter = PlayerGroupNextPlayer(auto1F447DD8_g, lv_rageWaveIter);
            if (lv_rageWaveIter < 0) { break; }
            AIAttackWaveSetTargetUnit(lv_rageWaveIter, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
        }
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, RegionRandomPoint(lv_spawnRegion), gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
        libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        autoAE4466F1_g = libCOMI_gf_LastCreatedCoopAttackForce();
        autoAE4466F1_u = UnitGroupCount(autoAE4466F1_g, c_unitCountAll);
        for (;; autoAE4466F1_u -= 1) {
            lv_transportIter = UnitGroupUnitFromEnd(autoAE4466F1_g, autoAE4466F1_u);
            if (lv_transportIter == null) { break; }
            if ((UnitGetType(lv_transportIter) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
                gf_SpecialRageWavesFlyersTransportDespawn(lv_transportIter, RegionGetCenter(lv_spawnRegion));
            }

            UnitGroupAdd(gv_infestedRageWaveUnits, lv_transportIter);
            UnitSetCustomValue(lv_transportIter, 0, lp_colonyShipIndex);
        }
        Wait(20.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        auto9BF410FF_g = gv_amonPlayers;
        lv_rageWaveIter = -1;
        while (true) {
            lv_rageWaveIter = PlayerGroupNextPlayer(auto9BF410FF_g, lv_rageWaveIter);
            if (lv_rageWaveIter < 0) { break; }
            AIAttackWaveSetTargetUnit(lv_rageWaveIter, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
        }
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, RegionRandomPoint(lv_spawnRegion), gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
        libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        auto2675C17D_g = libCOMI_gf_LastCreatedCoopAttackForce();
        auto2675C17D_u = UnitGroupCount(auto2675C17D_g, c_unitCountAll);
        for (;; auto2675C17D_u -= 1) {
            lv_transportIter = UnitGroupUnitFromEnd(auto2675C17D_g, auto2675C17D_u);
            if (lv_transportIter == null) { break; }
            if ((UnitGetType(lv_transportIter) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
                gf_SpecialRageWavesFlyersTransportDespawn(lv_transportIter, RegionGetCenter(lv_spawnRegion));
            }

            UnitGroupAdd(gv_infestedRageWaveUnits, lv_transportIter);
            UnitSetCustomValue(lv_transportIter, 0, lp_colonyShipIndex);
        }
        Wait(30.0, c_timeAI);
    }

    if ((gv_colonyShipLocations[lp_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working)) {
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        auto0E068CD7_g = gv_amonPlayers;
        lv_rageWaveIter = -1;
        while (true) {
            lv_rageWaveIter = PlayerGroupNextPlayer(auto0E068CD7_g, lv_rageWaveIter);
            if (lv_rageWaveIter < 0) { break; }
            AIAttackWaveSetTargetUnit(lv_rageWaveIter, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit);
        }
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, RegionRandomPoint(lv_spawnRegion), gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
        libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        auto96A4BC09_g = libCOMI_gf_LastCreatedCoopAttackForce();
        auto96A4BC09_u = UnitGroupCount(auto96A4BC09_g, c_unitCountAll);
        for (;; auto96A4BC09_u -= 1) {
            lv_transportIter = UnitGroupUnitFromEnd(auto96A4BC09_g, auto96A4BC09_u);
            if (lv_transportIter == null) { break; }
            if ((UnitGetType(lv_transportIter) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
                gf_SpecialRageWavesFlyersTransportDespawn(lv_transportIter, RegionGetCenter(lv_spawnRegion));
            }

        }
        UnitGroupAdd(gv_infestedRageWaveUnits, lv_transportIter);
        UnitSetCustomValue(lv_transportIter, 0, lp_colonyShipIndex);
    }

    return true;
}

trigger auto_gf_SpecialRageWavesFlyersTransportDespawn_Trigger = null;
unit auto_gf_SpecialRageWavesFlyersTransportDespawn_lp_transport;
point auto_gf_SpecialRageWavesFlyersTransportDespawn_lp_despawn;

void gf_SpecialRageWavesFlyersTransportDespawn (unit lp_transport, point lp_despawn) {
    auto_gf_SpecialRageWavesFlyersTransportDespawn_lp_transport = lp_transport;
    auto_gf_SpecialRageWavesFlyersTransportDespawn_lp_despawn = lp_despawn;

    if (auto_gf_SpecialRageWavesFlyersTransportDespawn_Trigger == null) {
        auto_gf_SpecialRageWavesFlyersTransportDespawn_Trigger = TriggerCreate("auto_gf_SpecialRageWavesFlyersTransportDespawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpecialRageWavesFlyersTransportDespawn_Trigger, false, false);
}

bool auto_gf_SpecialRageWavesFlyersTransportDespawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_SpecialRageWavesFlyersTransportDespawn_lp_transport;
    point lp_despawn = auto_gf_SpecialRageWavesFlyersTransportDespawn_lp_despawn;

    // Automatic Variable Declarations
    // Implementation
    Wait(10.0, c_timeGame);
    while (!((UnitGroupCount(UnitCargoGroup(lp_transport), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    while ((UnitIsAlive(lp_transport) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_transport), lp_despawn) > 0.5)) {
        UnitIssueOrder(lp_transport, OrderTargetingPoint(AbilityCommand("move", 0), lp_despawn), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lp_transport);
    return true;
}

trigger auto_gf_SendInfestedRageWaveFlyers_Trigger = null;
int auto_gf_SendInfestedRageWaveFlyers_lp_colonyShipIndex;
region auto_gf_SendInfestedRageWaveFlyers_lp_spawnRegion;
int auto_gf_SendInfestedRageWaveFlyers_lp_infestedBansheeCount;
int auto_gf_SendInfestedRageWaveFlyers_lp_mutaliskCount;
int auto_gf_SendInfestedRageWaveFlyers_lp_guardianCount;
int auto_gf_SendInfestedRageWaveFlyers_lp_corruptorCount;

void gf_SendInfestedRageWaveFlyers (int lp_colonyShipIndex, region lp_spawnRegion, int lp_infestedBansheeCount, int lp_mutaliskCount, int lp_guardianCount, int lp_corruptorCount) {
    auto_gf_SendInfestedRageWaveFlyers_lp_colonyShipIndex = lp_colonyShipIndex;
    auto_gf_SendInfestedRageWaveFlyers_lp_spawnRegion = lp_spawnRegion;
    auto_gf_SendInfestedRageWaveFlyers_lp_infestedBansheeCount = lp_infestedBansheeCount;
    auto_gf_SendInfestedRageWaveFlyers_lp_mutaliskCount = lp_mutaliskCount;
    auto_gf_SendInfestedRageWaveFlyers_lp_guardianCount = lp_guardianCount;
    auto_gf_SendInfestedRageWaveFlyers_lp_corruptorCount = lp_corruptorCount;

    if (auto_gf_SendInfestedRageWaveFlyers_Trigger == null) {
        auto_gf_SendInfestedRageWaveFlyers_Trigger = TriggerCreate("auto_gf_SendInfestedRageWaveFlyers_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendInfestedRageWaveFlyers_Trigger, false, false);
}

bool auto_gf_SendInfestedRageWaveFlyers_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_SendInfestedRageWaveFlyers_lp_colonyShipIndex;
    region lp_spawnRegion = auto_gf_SendInfestedRageWaveFlyers_lp_spawnRegion;
    int lp_infestedBansheeCount = auto_gf_SendInfestedRageWaveFlyers_lp_infestedBansheeCount;
    int lp_mutaliskCount = auto_gf_SendInfestedRageWaveFlyers_lp_mutaliskCount;
    int lp_guardianCount = auto_gf_SendInfestedRageWaveFlyers_lp_guardianCount;
    int lp_corruptorCount = auto_gf_SendInfestedRageWaveFlyers_lp_corruptorCount;

    // Variable Declarations
    unitgroup lv_flyerUnits;
    string lv_mutaliskAlias;
    string lv_corruptorAlias;
    string lv_guardianAlias;

    // Automatic Variable Declarations
    int autoD1854113_n;
    int autoD1854113_i;
    int autoADEE4102_n;
    int autoADEE4102_i;
    int auto1DF713DA_n;
    int auto1DF713DA_i;
    int autoC2F1ABD3_n;
    int autoC2F1ABD3_i;
    unitgroup auto2F8EBA0F_g;
    int auto2F8EBA0F_u;
    unit auto2F8EBA0F_var;
    unitgroup auto3D66AE73_g;
    int auto3D66AE73_u;
    unit auto3D66AE73_var;

    // Variable Initialization
    lv_flyerUnits = UnitGroupEmpty();

    // Implementation
    autoD1854113_n = lp_infestedBansheeCount;
    for (autoD1854113_i = 1; autoD1854113_i <= autoD1854113_n; autoD1854113_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "NovaInfestedBanshee", 0, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    autoADEE4102_n = lp_mutaliskCount;
    for (autoADEE4102_i = 1; autoADEE4102_i <= autoADEE4102_n; autoADEE4102_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    auto1DF713DA_n = lp_guardianCount;
    for (auto1DF713DA_i = 1; auto1DF713DA_i <= auto1DF713DA_n; auto1DF713DA_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Guardian", 0, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    autoC2F1ABD3_n = lp_corruptorCount;
    for (autoC2F1ABD3_i = 1; autoC2F1ABD3_i <= autoC2F1ABD3_n; autoC2F1ABD3_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Corruptor", 0, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionRandomPoint(lp_spawnRegion), UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit));
        UnitGroupAdd(lv_flyerUnits, UnitLastCreated());
    }
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_flyerUnits, c_unitCountAlive) > 0) && (UnitIsAlive(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit) == true)) {
        auto2F8EBA0F_g = lv_flyerUnits;
        auto2F8EBA0F_u = UnitGroupCount(auto2F8EBA0F_g, c_unitCountAll);
        for (;; auto2F8EBA0F_u -= 1) {
            auto2F8EBA0F_var = UnitGroupUnitFromEnd(auto2F8EBA0F_g, auto2F8EBA0F_u);
            if (auto2F8EBA0F_var == null) { break; }
            UnitIssueOrder(auto2F8EBA0F_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit)), c_orderQueueReplace);
            UnitIssueOrder(auto2F8EBA0F_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit), c_orderQueueAddToEnd);
        }
        Wait(2.0, c_timeAI);
    }
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_flyerUnits, c_unitCountAlive) > 0)) {
        auto3D66AE73_g = lv_flyerUnits;
        auto3D66AE73_u = UnitGroupCount(auto3D66AE73_g, c_unitCountAll);
        for (;; auto3D66AE73_u -= 1) {
            auto3D66AE73_var = UnitGroupUnitFromEnd(auto3D66AE73_g, auto3D66AE73_u);
            if (auto3D66AE73_var == null) { break; }
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(auto3D66AE73_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_colonyShipLocations[lp_colonyShipIndex].lv_protossClaimerWaveTargetRegion)), c_orderQueueReplace);
            }

        }
        Wait(2.0, c_timeAI);
    }
    return true;
}

string gf_TransportType (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, lp_player);
}

trigger auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger = null;
point auto_gf_DeployWarpPrismAndWarpInBaseAttacks_lp_targetPoint;

void gf_DeployWarpPrismAndWarpInBaseAttacks (point lp_targetPoint) {
    auto_gf_DeployWarpPrismAndWarpInBaseAttacks_lp_targetPoint = lp_targetPoint;

    if (auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger == null) {
        auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger = TriggerCreate("auto_gf_DeployWarpPrismAndWarpInBaseAttacks_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeployWarpPrismAndWarpInBaseAttacks_Trigger, false, false);
}

bool auto_gf_DeployWarpPrismAndWarpInBaseAttacks_TriggerFunc (bool testConds, bool runActions) {
    point lp_targetPoint = auto_gf_DeployWarpPrismAndWarpInBaseAttacks_lp_targetPoint;

    // Variable Declarations
    unit lv_warpPrismUnit;
    unitgroup lv_escortGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", 0, gv_pLAYER_04_AMON_BaseWaves, PointFromId(1321));
    lv_warpPrismUnit = UnitLastCreated();
    AIAttackWaveSetGatherPoint(gv_pLAYER_04_AMON_BaseWaves, PointFromId(1321));
    AIAttackWaveSetTargetEscort(gv_pLAYER_04_AMON_BaseWaves, libNtve_gf_ConvertUnitToUnitGroup(lv_warpPrismUnit), 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_04_AMON_BaseWaves, PointFromId(1321));
    AIAttackWaveAddEscortUnit(gv_pLAYER_04_AMON_BaseWaves, UnitLastCreated(), lv_warpPrismUnit, 3.0, 45.0);
    UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Oracle", 0, gv_pLAYER_04_AMON_BaseWaves, PointFromId(1321));
        AIAttackWaveAddEscortUnit(gv_pLAYER_04_AMON_BaseWaves, UnitLastCreated(), lv_warpPrismUnit, 3.0, -135.0);
        UnitGroupAdd(lv_escortGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Phoenix", 0, gv_pLAYER_04_AMON_BaseWaves, PointFromId(1321));
        AIAttackWaveAddEscortUnit(gv_pLAYER_04_AMON_BaseWaves, UnitLastCreated(), lv_warpPrismUnit, 3.0, -45.0);
        UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    }

    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scout", 0, gv_pLAYER_04_AMON_BaseWaves, PointFromId(1321));
        AIAttackWaveAddEscortUnit(gv_pLAYER_04_AMON_BaseWaves, UnitLastCreated(), lv_warpPrismUnit, 3.0, 135.0);
        UnitGroupAdd(lv_escortGroup, UnitLastCreated());
    }

    AIAttackWaveSend(gv_pLAYER_04_AMON_BaseWaves, 0, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_warpPrismUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FF7333B5"));
    PingSetUnit(PingLastCreated(), lv_warpPrismUnit);
    libHots_gf_StorePingForUnit(lv_warpPrismUnit, 1, PingLastCreated());
    Wait(2.0, c_timeAI);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_warpPrismUnit) == true) && (UnitGetType(lv_warpPrismUnit) == "WarpPrism")) {
        UnitIssueOrder(lv_warpPrismUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_warpPrismUnit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
    gf_WarpPrismBaseAttackReinforcements(lv_warpPrismUnit, "Zealot", libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 2, 2, 0, 0));
    gf_WarpPrismBaseAttackReinforcements(lv_warpPrismUnit, "Stalker", libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 2, 0, 0));
    while (!(((libCOMI_gf_GameIsOver() == true) || (UnitIsAlive(lv_warpPrismUnit) == false)))) {
        Wait(1.0, c_timeAI);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lv_warpPrismUnit, 1));
    AIRemoveGroupFromAnyWavesAndSetHome(lv_escortGroup, PointFromId(666));
    return true;
}

trigger auto_gf_WarpPrismBaseAttackReinforcements_Trigger = null;
unit auto_gf_WarpPrismBaseAttackReinforcements_lp_warpPrism;
string auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitType;
int auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitMaxCount;

void gf_WarpPrismBaseAttackReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount) {
    auto_gf_WarpPrismBaseAttackReinforcements_lp_warpPrism = lp_warpPrism;
    auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitType = lp_warpUnitType;
    auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitMaxCount = lp_warpUnitMaxCount;

    if (auto_gf_WarpPrismBaseAttackReinforcements_Trigger == null) {
        auto_gf_WarpPrismBaseAttackReinforcements_Trigger = TriggerCreate("auto_gf_WarpPrismBaseAttackReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpPrismBaseAttackReinforcements_Trigger, false, false);
}

bool auto_gf_WarpPrismBaseAttackReinforcements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpPrism = auto_gf_WarpPrismBaseAttackReinforcements_lp_warpPrism;
    string lp_warpUnitType = auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitType;
    int lp_warpUnitMaxCount = auto_gf_WarpPrismBaseAttackReinforcements_lp_warpUnitMaxCount;

    // Variable Declarations
    abilcmd lv_warpAbilCmd;

    // Automatic Variable Declarations
    int auto3ED4B61B_n;
    int auto3ED4B61B_i;

    // Variable Initialization

    // Implementation
    lv_warpAbilCmd = gf_GetUnitTypeSuperWarpGateCommand(lp_warpUnitType);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_warpPrism) == true)) {
        auto3ED4B61B_n = lp_warpUnitMaxCount;
        for (auto3ED4B61B_i = 1; auto3ED4B61B_i <= auto3ED4B61B_n; auto3ED4B61B_i += 1) {
            if ((UnitGroupCount(gv_protossBaseAttackGroup, c_unitCountAlive) <= lp_warpUnitMaxCount) && (UnitIsAlive(lp_warpPrism) == true)) {
                UnitIssueOrder(UnitFromId(1437), OrderTargetingPoint(lv_warpAbilCmd, RegionRandomPoint(RegionCircle(UnitGetPosition(lp_warpPrism), 4.0))), c_orderQueueReplace);
                Wait(1.0, c_timeAI);
            }

        }
        Wait(20.0, c_timeAI);
    }
    return true;
}

void gf_BaseAttackTransmissionQ (playergroup lp_transmissionPlayers) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return ;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, PlayerGroupPlayer(lp_transmissionPlayers, RandomInt(1, PlayerGroupCount(lp_transmissionPlayers))));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

trigger auto_gf_RunProtossClaimerWave_Trigger = null;
int auto_gf_RunProtossClaimerWave_lp_claimerWaveSize;

void gf_RunProtossClaimerWave (int lp_claimerWaveSize) {
    auto_gf_RunProtossClaimerWave_lp_claimerWaveSize = lp_claimerWaveSize;

    if (auto_gf_RunProtossClaimerWave_Trigger == null) {
        auto_gf_RunProtossClaimerWave_Trigger = TriggerCreate("auto_gf_RunProtossClaimerWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunProtossClaimerWave_Trigger, false, false);
}

bool auto_gf_RunProtossClaimerWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_claimerWaveSize = auto_gf_RunProtossClaimerWave_lp_claimerWaveSize;

    // Variable Declarations
    point lv_spawnLocation;
    unit lv_warpPrismUnit;
    int lv_colonyShipTargetIndex;
    unitgroup lv_eligibleTargets;
    timer lv_objectiveReminderTimer;
    int lv_claimerWaveSizeActual;

    // Automatic Variable Declarations
    int auto9485ABC2_val;
    string auto8B9C496A_val;
    string autoEF42B193_val;
    string autoDE733F58_val;
    string auto4E0B8AF6_val;
    string auto4E6DBB20_val;
    string auto55AAA96C_val;
    playergroup autoBF331E23_g;
    int autoBF331E23_var;
    unitgroup auto0184EA48_g;
    int auto0184EA48_u;
    unit auto0184EA48_var;

    // Variable Initialization
    lv_eligibleTargets = UnitGroupEmpty();
    lv_objectiveReminderTimer = TimerCreate();

    // Implementation
    lv_colonyShipTargetIndex = gf_PanicShuttleNextIndex();
    if ((lv_colonyShipTargetIndex <= 0)) {
        return true;
    }

    lv_spawnLocation = gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_claimWaveSpawn;
    TimerStart(lv_objectiveReminderTimer, 120.0, false, c_timeAI);
    gf_SetColonyShipUIState(lv_colonyShipTargetIndex, ge_ColonyShipUIState_TargetedByClaimers, true);
    auto9485ABC2_val = lp_claimerWaveSize;
    if (auto9485ABC2_val == ge_PRESETClaimerWaveType_SmallA) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_AMON_Claimers, gv_pLAYER_04_AMON_BaseWaves, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_spawnLocation, gf_TransportType(gv_pLAYER_03_AMON_Claimers));
        UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, libCOMI_gf_LastCreatedCoopAttackForce());
        autoEF42B193_val = PlayerRace(gv_pLAYER_03_AMON_Claimers);
        if (autoEF42B193_val == "Prot") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON_Claimers, lv_spawnLocation);
            UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier01_AliasZealot, libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 4, 5, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier02_AliasStalker, libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), lv_colonyShipTargetIndex);
        }
        else {
        }
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_SmallB) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_AMON_Claimers, gv_pLAYER_04_AMON_BaseWaves, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_spawnLocation, gf_TransportType(gv_pLAYER_03_AMON_Claimers));
        UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, libCOMI_gf_LastCreatedCoopAttackForce());
        autoDE733F58_val = PlayerRace(gv_pLAYER_03_AMON_Claimers);
        if (autoDE733F58_val == "Prot") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON_Claimers, lv_spawnLocation);
            UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier01_AliasZealot, libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 4, 5, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier02_AliasStalker, libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0), lv_colonyShipTargetIndex);
        }
        else {
        }
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_MediumA) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_AMON_Claimers, gv_pLAYER_04_AMON_BaseWaves, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_spawnLocation, gf_TransportType(gv_pLAYER_03_AMON_Claimers));
        UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, libCOMI_gf_LastCreatedCoopAttackForce());
        auto4E0B8AF6_val = PlayerRace(gv_pLAYER_03_AMON_Claimers);
        if (auto4E0B8AF6_val == "Prot") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON_Claimers, lv_spawnLocation);
            UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier01_AliasZealot, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier02_AliasStalker, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 2, 2, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier04_AliasColossus, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 0, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier03_AliasImmortal, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), lv_colonyShipTargetIndex);
        }
        else {
        }
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_MediumB) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_AMON_Claimers, gv_pLAYER_04_AMON_BaseWaves, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_spawnLocation, gf_TransportType(gv_pLAYER_03_AMON_Claimers));
        UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, libCOMI_gf_LastCreatedCoopAttackForce());
        auto4E6DBB20_val = PlayerRace(gv_pLAYER_03_AMON_Claimers);
        if (auto4E6DBB20_val == "Prot") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON_Claimers, lv_spawnLocation);
            UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier01_AliasZealot, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier02_AliasStalker, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 2, 2, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier04_AliasColossus, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 0, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier03_AliasImmortal, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), lv_colonyShipTargetIndex);
        }
        else {
        }
    }
    else if (auto9485ABC2_val == ge_PRESETClaimerWaveType_LargeA) {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_AMON_Claimers, gv_pLAYER_04_AMON_BaseWaves, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_spawnLocation, gf_TransportType(gv_pLAYER_03_AMON_Claimers));
        UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, libCOMI_gf_LastCreatedCoopAttackForce());
        auto55AAA96C_val = PlayerRace(gv_pLAYER_03_AMON_Claimers);
        if (auto55AAA96C_val == "Prot") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON_Claimers, lv_spawnLocation);
            UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier01_AliasZealot, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier02_AliasStalker, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 2, 3, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier03_AliasImmortal, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier04_AliasColossus, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), lv_colonyShipTargetIndex);
        }
        else {
        }
    }
    else {
        libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_AMON_Claimers, gv_pLAYER_04_AMON_BaseWaves, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_spawnLocation, gf_TransportType(gv_pLAYER_03_AMON_Claimers));
        UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, libCOMI_gf_LastCreatedCoopAttackForce());
        auto8B9C496A_val = PlayerRace(gv_pLAYER_03_AMON_Claimers);
        if (auto8B9C496A_val == "Prot") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", c_unitCreateIgnorePlacement, gv_pLAYER_03_AMON_Claimers, lv_spawnLocation);
            UnitGroupAddUnitGroup(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, UnitLastCreatedGroup());
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier01_AliasZealot, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier02_AliasStalker, libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 2, 3, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier03_AliasImmortal, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0), lv_colonyShipTargetIndex);
            gf_WarpPrismClaimerReinforcements(UnitLastCreated(), gv_tier04_AliasColossus, libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0), lv_colonyShipTargetIndex);
        }
        else {
        }
    }
    autoBF331E23_g = gv_amonPlayers;
    autoBF331E23_var = -1;
    while (true) {
        autoBF331E23_var = PlayerGroupNextPlayer(autoBF331E23_g, autoBF331E23_var);
        if (autoBF331E23_var < 0) { break; }
        AIAttackWaveSetGatherPoint(autoBF331E23_var, lv_spawnLocation);
        AIAttackWaveSetTargetUnit(autoBF331E23_var, gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_colonyShipUnit);
        AIAttackWaveAddWaypoint(autoBF331E23_var, gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveTransportTarget, true);
        AIAttackWaveUseGroup(autoBF331E23_var, UnitGroupFilterPlayer(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, autoBF331E23_var, 0));
        AIAttackWaveSend(autoBF331E23_var, 90, false);
        libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
    }
    if (gv_sortOrderIndexStarter >= 9) {
        gv_sortOrderIndexStarter = 1;
    }
    else {
        gv_sortOrderIndexStarter = gv_sortOrderIndexStarter + 1;
    }
    Wait(0.125, c_timeAI);
    TriggerExecute(gt_ProtossClaimerWaveTransmissionQ, true, false);
    gf_TrackClaimerAttackRouteandWait(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, StringExternal("Param/Value/75FE2C98"), lv_colonyShipTargetIndex);
    if ((UnitGroupCount(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, c_unitCountAlive) > UnitGroupCount(UnitGroupFilter("Observer", c_playerAny, gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))) {
        AISetGroupScriptControlled(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, true);
        UnitGroupIssueOrder(gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        Wait(5.0, c_timeAI);
        auto0184EA48_g = gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_protossClaimerWaveUnitGroup;
        auto0184EA48_u = UnitGroupCount(auto0184EA48_g, c_unitCountAll);
        for (;; auto0184EA48_u -= 1) {
            auto0184EA48_var = UnitGroupUnitFromEnd(auto0184EA48_g, auto0184EA48_u);
            if (auto0184EA48_var == null) { break; }
            gf_WarpOutProtossUnit(auto0184EA48_var);
            Wait(0.125, c_timeAI);
        }
    }
    else {
        if ((gv_colonyShipLocations[lv_colonyShipTargetIndex].lv_state != ge_PRESETColonyShipState_Sealed)) {
            TriggerExecute(gt_ClaimerWaveDestroyedTransmissionQ, true, false);
        }

    }
    gf_SetColonyShipUIState(lv_colonyShipTargetIndex, ge_ColonyShipUIState_TargetedByClaimers, false);
    Wait(16.0, c_timeAI);
    if ((TimerGetRemaining(lv_objectiveReminderTimer) > 0.0)) {
        TriggerExecute(gt_ColonyShipsObjectiveReminderQ, true, false);
    }

    return true;
}

trigger auto_gf_RemoveClaimerWaveTransport_Trigger = null;
unit auto_gf_RemoveClaimerWaveTransport_lp_transport;
point auto_gf_RemoveClaimerWaveTransport_lp_retreatLocation;

void gf_RemoveClaimerWaveTransport (unit lp_transport, point lp_retreatLocation) {
    auto_gf_RemoveClaimerWaveTransport_lp_transport = lp_transport;
    auto_gf_RemoveClaimerWaveTransport_lp_retreatLocation = lp_retreatLocation;

    if (auto_gf_RemoveClaimerWaveTransport_Trigger == null) {
        auto_gf_RemoveClaimerWaveTransport_Trigger = TriggerCreate("auto_gf_RemoveClaimerWaveTransport_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveClaimerWaveTransport_Trigger, false, false);
}

bool auto_gf_RemoveClaimerWaveTransport_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_RemoveClaimerWaveTransport_lp_transport;
    point lp_retreatLocation = auto_gf_RemoveClaimerWaveTransport_lp_retreatLocation;

    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_owner = UnitGetOwner(lp_transport);
    while (!((UnitCargoValue(lp_transport, c_unitCargoUnitCount) > 0))) {
        Wait(1.0, c_timeGame);
    }
    while (!(((UnitIsAlive(lp_transport) == false) || (UnitCargoValue(lp_transport, c_unitCargoUnitCount) <= 0)))) {
        Wait(1.0, c_timeGame);
    }
    while ((UnitIsAlive(lp_transport) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_transport), lp_retreatLocation) > 30.0)) {
        if ((UnitGetOwner(lp_transport) != lv_owner)) {
            return true;
        }

        UnitIssueOrder(lp_transport, OrderTargetingPoint(AbilityCommand("attack", 0), lp_retreatLocation), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
    }
    UnitSetHeight(lp_transport, 20.0, 5.0);
    Wait(5.0, c_timeGame);
    UnitRemove(lp_transport);
    return true;
}

int gf_GetProtossClaimerWaveTarget () {
    // Variable Declarations
    int lv_sortOrderIndex;

    // Automatic Variable Declarations
    int autoEC27C2D5_ae;
    const int autoEC27C2D5_ai = 1;
    int autoDA15607A_ae;
    const int autoDA15607A_ai = 1;

    // Variable Initialization

    // Implementation
    autoEC27C2D5_ae = gv_colonyShipLocationsCount;
    lv_sortOrderIndex = gv_sortOrderIndexStarter;
    for ( ; ( (autoEC27C2D5_ai >= 0 && lv_sortOrderIndex <= autoEC27C2D5_ae) || (autoEC27C2D5_ai < 0 && lv_sortOrderIndex >= autoEC27C2D5_ae) ) ; lv_sortOrderIndex += autoEC27C2D5_ai ) {
        if ((lv_sortOrderIndex == 0)) {
            continue;
        }

        if (((gv_sortOrderArray[lv_sortOrderIndex] <= 0) || (gv_colonyShipLocations[gv_sortOrderArray[lv_sortOrderIndex]].lv_state == ge_PRESETColonyShipState_Sealed))) {
            if (gv_sortOrderIndexStarter >= 9) {
                gv_sortOrderIndexStarter = 1;
            }
            else {
                gv_sortOrderIndexStarter = gv_sortOrderIndexStarter + 1;
            }
            continue;
        }

        if ((gv_colonyShipLocations[gv_sortOrderArray[lv_sortOrderIndex]].lv_state == ge_PRESETColonyShipState_Available) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(gv_colonyShipLocations[gv_sortOrderArray[lv_sortOrderIndex]].lv_colonyShipPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(gv_colonyShipLocations[gv_sortOrderArray[lv_sortOrderIndex]].lv_colonyShipPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return gv_sortOrderArray[lv_sortOrderIndex];
        }

    }
    autoDA15607A_ae = gv_colonyShipLocationsCount;
    lv_sortOrderIndex = 1;
    for ( ; ( (autoDA15607A_ai >= 0 && lv_sortOrderIndex <= autoDA15607A_ae) || (autoDA15607A_ai < 0 && lv_sortOrderIndex >= autoDA15607A_ae) ) ; lv_sortOrderIndex += autoDA15607A_ai ) {
        if ((gv_colonyShipLocations[gv_sortOrderArray[lv_sortOrderIndex]].lv_state == ge_PRESETColonyShipState_Available)) {
            return gv_sortOrderArray[lv_sortOrderIndex];
        }

    }
    gv_sortOrderIndexStarter = 0;
    return 0;
}

void gf_TrackClaimerAttackRouteandWait (unitgroup lp_inTransitUnitGroup, text lp_pingTooltip, int lp_colonyShipIndex) {
    // Variable Declarations
    int lv_pingRedrawTimerCounter;
    unitgroup lv_trackedUnitGroup;
    point lv_trackedPingPoint;

    // Automatic Variable Declarations
    unitgroup auto4621A529_g;
    int auto4621A529_u;
    unit auto4621A529_var;
    unitgroup auto61EECEDA_g;
    int auto61EECEDA_u;
    unit auto61EECEDA_var;

    // Variable Initialization
    lv_trackedUnitGroup = UnitGroupEmpty();

    // Implementation
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGroupCenterOfGroup(lp_inTransitUnitGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/487A6F48"));
    lv_trackedUnitGroup = lp_inTransitUnitGroup;
    auto4621A529_g = lv_trackedUnitGroup;
    auto4621A529_u = UnitGroupCount(auto4621A529_g, c_unitCountAll);
    for (;; auto4621A529_u -= 1) {
        auto4621A529_var = UnitGroupUnitFromEnd(auto4621A529_g, auto4621A529_u);
        if (auto4621A529_var == null) { break; }
        if ((UnitGetType(auto4621A529_var) == gf_TransportType(gv_pLAYER_03_AMON_Claimers))) {
            UnitGroupRemove(lv_trackedUnitGroup, auto4621A529_var);
            gf_RemoveClaimerWaveTransport(auto4621A529_var, gv_colonyShipLocations[lp_colonyShipIndex].lv_claimWaveSpawn);
        }

        if ((libCOMI_gf_UnitisValidforanAttackWavePing(auto4621A529_var) == false)) {
            UnitGroupRemove(lv_trackedUnitGroup, auto4621A529_var);
        }

    }
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lv_trackedUnitGroup, c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(lv_trackedUnitGroup), gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint) > 15.0)) {
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lv_trackedUnitGroup));
        if (lv_pingRedrawTimerCounter >= 5) {
            lv_pingRedrawTimerCounter = 1;
        }
        else {
            lv_pingRedrawTimerCounter = lv_pingRedrawTimerCounter + 1;
        }
        if ((lv_pingRedrawTimerCounter == 1)) {
            lv_trackedPingPoint = UnitGroupCenterOfGroup(lv_trackedUnitGroup);
            gf_DrawClaimerAttackRoute(lv_trackedPingPoint, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint);
        }

        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_DestroyPingCoop(PingLastCreated());
    if ((UnitGroupCount(lv_trackedUnitGroup, c_unitCountAlive) > 0)) {
        gf_ProtossClaimerWaveReachesTargetQ(lp_colonyShipIndex);
        auto61EECEDA_g = UnitGroup(null, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, gv_colonyShipLocations[lp_colonyShipIndex].lv_protossClaimerWaveTargetRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto61EECEDA_u = UnitGroupCount(auto61EECEDA_g, c_unitCountAll);
        for (;; auto61EECEDA_u -= 1) {
            auto61EECEDA_var = UnitGroupUnitFromEnd(auto61EECEDA_g, auto61EECEDA_u);
            if (auto61EECEDA_var == null) { break; }
            UnitSetOwner(auto61EECEDA_var, gv_pLAYER_06_INFESTED_BaseWavesHateToss, true);
        }
        gf_TrackClaimerWaveTargetPingandWait(lp_colonyShipIndex, lv_trackedUnitGroup);
    }

}

trigger auto_gf_DrawClaimerAttackRoute_Trigger = null;
point auto_gf_DrawClaimerAttackRoute_lp_startPoint;
point auto_gf_DrawClaimerAttackRoute_lp_endPoint;

void gf_DrawClaimerAttackRoute (point lp_startPoint, point lp_endPoint) {
    auto_gf_DrawClaimerAttackRoute_lp_startPoint = lp_startPoint;
    auto_gf_DrawClaimerAttackRoute_lp_endPoint = lp_endPoint;

    if (auto_gf_DrawClaimerAttackRoute_Trigger == null) {
        auto_gf_DrawClaimerAttackRoute_Trigger = TriggerCreate("auto_gf_DrawClaimerAttackRoute_TriggerFunc");
    }

    TriggerExecute(auto_gf_DrawClaimerAttackRoute_Trigger, false, false);
}

bool auto_gf_DrawClaimerAttackRoute_TriggerFunc (bool testConds, bool runActions) {
    point lp_startPoint = auto_gf_DrawClaimerAttackRoute_lp_startPoint;
    point lp_endPoint = auto_gf_DrawClaimerAttackRoute_lp_endPoint;

    // Variable Declarations
    unit lv_drawUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, "InvisibleEscortFlying", c_unitCreateIgnorePlacement, 0, lp_startPoint, AngleBetweenPoints(lp_startPoint, lp_endPoint));
    lv_drawUnit = UnitLastCreated();
    UnitSetPropertyFixed(lv_drawUnit, c_unitPropMovementSpeed, 75.0);
    UnitIssueOrder(lv_drawUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_endPoint), c_orderQueueReplace);
    Wait(0.125, c_timeAI);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_drawUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_drawUnit), lp_endPoint) > 5.0)) {
        UnitIssueOrder(lv_drawUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_endPoint), c_orderQueueReplace);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", UnitGetPosition(lv_drawUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, UnitGetFacing(lv_drawUnit));
        PingSetScale(PingLastCreated(), 0.75);
        Wait(0.25, c_timeAI);
    }
    UnitRemove(lv_drawUnit);
    return true;
}

void gf_TrackClaimerWaveTargetPingandWait (int lp_claimerWaveTargetIndex, unitgroup lp_attackingUnits) {
    // Variable Declarations
    unit lv_attackingUnitsIter;

    // Automatic Variable Declarations
    unitgroup autoEC888F09_g;
    int autoEC888F09_u;

    // Variable Initialization

    // Implementation
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGroupCenterOfGroup(lp_attackingUnits), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8536BB32"));
    while ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(lp_attackingUnits, c_unitCountAlive) > 0) && ((gv_colonyShipLocations[lp_claimerWaveTargetIndex].lv_state == ge_PRESETColonyShipState_Available) || (gv_colonyShipLocations[lp_claimerWaveTargetIndex].lv_state == ge_PRESETColonyShipState_Working))) {
        autoEC888F09_g = lp_attackingUnits;
        autoEC888F09_u = UnitGroupCount(autoEC888F09_g, c_unitCountAll);
        for (;; autoEC888F09_u -= 1) {
            lv_attackingUnitsIter = UnitGroupUnitFromEnd(autoEC888F09_g, autoEC888F09_u);
            if (lv_attackingUnitsIter == null) { break; }
            if ((PlayerType(UnitGetOwner(lv_attackingUnitsIter)) == c_playerTypeUser)) {
                UnitGroupRemove(lp_attackingUnits, lv_attackingUnitsIter);
                UnitGroupRemove(gv_colonyShipLocations[lp_claimerWaveTargetIndex].lv_protossClaimerWaveUnitGroup, lv_attackingUnitsIter);
            }

        }
        PingSetPosition(PingLastCreated(), UnitGroupCenterOfGroup(lp_attackingUnits));
        Wait(0.5, c_timeAI);
    }
    libCOMI_gf_DestroyPingCoop(PingLastCreated());
}

trigger auto_gf_WarpOutProtossUnit_Trigger = null;
unit auto_gf_WarpOutProtossUnit_lp_warpingUnit;

void gf_WarpOutProtossUnit (unit lp_warpingUnit) {
    auto_gf_WarpOutProtossUnit_lp_warpingUnit = lp_warpingUnit;

    if (auto_gf_WarpOutProtossUnit_Trigger == null) {
        auto_gf_WarpOutProtossUnit_Trigger = TriggerCreate("auto_gf_WarpOutProtossUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpOutProtossUnit_Trigger, false, false);
}

bool auto_gf_WarpOutProtossUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpingUnit = auto_gf_WarpOutProtossUnit_lp_warpingUnit;

    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(lp_warpingUnit, "ProtossGenericWarpInOut", lp_warpingUnit, 1);
    libNtve_gf_SendActorMessageToUnit(lp_warpingUnit, "SetOpacity 0.000000 4.500000");
    Wait(5.0, c_timeAI);
    UnitRemove(lp_warpingUnit);
    return true;
}

trigger auto_gf_WarpPrismClaimerReinforcements_Trigger = null;
unit auto_gf_WarpPrismClaimerReinforcements_lp_warpPrism;
string auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitType;
int auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitMaxCount;
int auto_gf_WarpPrismClaimerReinforcements_lp_colonyShipIndex;

void gf_WarpPrismClaimerReinforcements (unit lp_warpPrism, string lp_warpUnitType, int lp_warpUnitMaxCount, int lp_colonyShipIndex) {
    auto_gf_WarpPrismClaimerReinforcements_lp_warpPrism = lp_warpPrism;
    auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitType = lp_warpUnitType;
    auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitMaxCount = lp_warpUnitMaxCount;
    auto_gf_WarpPrismClaimerReinforcements_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_WarpPrismClaimerReinforcements_Trigger == null) {
        auto_gf_WarpPrismClaimerReinforcements_Trigger = TriggerCreate("auto_gf_WarpPrismClaimerReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarpPrismClaimerReinforcements_Trigger, false, false);
}

bool auto_gf_WarpPrismClaimerReinforcements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_warpPrism = auto_gf_WarpPrismClaimerReinforcements_lp_warpPrism;
    string lp_warpUnitType = auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitType;
    int lp_warpUnitMaxCount = auto_gf_WarpPrismClaimerReinforcements_lp_warpUnitMaxCount;
    int lp_colonyShipIndex = auto_gf_WarpPrismClaimerReinforcements_lp_colonyShipIndex;

    // Variable Declarations
    abilcmd lv_warpAbilCmd;
    point lv_warpInPoint;
    int lv_warpInTries;

    // Automatic Variable Declarations
    int autoC395BA85_n;
    int autoC395BA85_i;
    const int auto9639418E_ae = 10;
    const int auto9639418E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_warpAbilCmd = gf_GetUnitTypeSuperWarpGateCommand(lp_warpUnitType);
    AISetUnitScriptControlled(lp_warpPrism, true);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_warpPrism) == true) && (libNtve_gf_UnitInRegion(lp_warpPrism, gv_colonyShipLocations[lp_colonyShipIndex].lv_protossClaimerWaveTargetRegion) != true) && (UnitGroupCount(gv_colonyShipLocations[lp_colonyShipIndex].lv_protossClaimerWaveUnitGroup, c_unitCountAlive) > 1)) {
        UnitIssueOrder(lp_warpPrism, OrderTargetingPoint(AbilityCommand("move", 0), UnitGroupCenterOfGroup(gv_colonyShipLocations[lp_colonyShipIndex].lv_protossClaimerWaveUnitGroup)), c_orderQueueReplace);
        Wait(0.25, c_timeAI);
    }
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_warpPrism) == true) && (UnitGetType(lp_warpPrism) == "WarpPrism") && (UnitIsAlive(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit) == true) && (libNtve_gf_UnitInRegion(lp_warpPrism, gv_colonyShipLocations[lp_colonyShipIndex].lv_protossClaimerWaveTargetRegion) == true) && (PathingType(UnitGetPosition(lp_warpPrism)) == c_pathingGround)) {
        UnitIssueOrder(lp_warpPrism, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
        Wait(0.25, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    autoC395BA85_n = lp_warpUnitMaxCount;
    for (autoC395BA85_i = 1; autoC395BA85_i <= autoC395BA85_n; autoC395BA85_i += 1) {
        if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_warpPrism) == true) && (UnitIsAlive(gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipUnit) == true) && (UnitHasBehavior2(lp_warpPrism, "ProtossGenericWarpInOut") == false)) {
            lv_warpInTries = 1;
            for ( ; ( (auto9639418E_ai >= 0 && lv_warpInTries <= auto9639418E_ae) || (auto9639418E_ai < 0 && lv_warpInTries >= auto9639418E_ae) ) ; lv_warpInTries += auto9639418E_ai ) {
                lv_warpInPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_warpPrism), 3.0));
                if ((PathingType(lv_warpInPoint) == c_pathingGround)) {
                    UnitIssueOrder(UnitFromId(1438), OrderTargetingPoint(lv_warpAbilCmd, lv_warpInPoint), c_orderQueueReplace);
                    break;
                }

            }
            Wait(1.0, c_timeAI);
        }

    }
    return true;
}

trigger auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger = null;
int auto_gf_ProtossClaimerWaveReachesTargetQ_lp_colonyShipIndex;

void gf_ProtossClaimerWaveReachesTargetQ (int lp_colonyShipIndex) {
    auto_gf_ProtossClaimerWaveReachesTargetQ_lp_colonyShipIndex = lp_colonyShipIndex;

    if (auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger == null) {
        auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger = TriggerCreate("auto_gf_ProtossClaimerWaveReachesTargetQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_ProtossClaimerWaveReachesTargetQ_Trigger, false, false);
}

bool auto_gf_ProtossClaimerWaveReachesTargetQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_colonyShipIndex = auto_gf_ProtossClaimerWaveReachesTargetQ_lp_colonyShipIndex;

    // Automatic Variable Declarations
    playergroup auto7A88501A_g;
    int auto7A88501A_var;

    // Implementation
    TriggerQueueEnter();
    auto7A88501A_g = libCOMI_gf_HumanPlayers();
    auto7A88501A_var = -1;
    while (true) {
        auto7A88501A_var = PlayerGroupNextPlayer(auto7A88501A_g, auto7A88501A_var);
        if (auto7A88501A_var < 0) { break; }
        UIAlertPoint("Trigger", auto7A88501A_var, StringExternal("Param/Value/C3DF8648"), null, gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint);
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_colonyShipLocations[lp_colonyShipIndex].lv_colonyShipPoint, 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackReminderJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

abilcmd gf_GetUnitTypeSuperWarpGateCommand (string lp_warpInType) {
    // Variable Declarations
    abilcmd lv_warpAbilCmd;

    // Automatic Variable Declarations
    string autoB28DA18A_val;

    // Variable Initialization

    // Implementation
    autoB28DA18A_val = lp_warpInType;
    if (autoB28DA18A_val == "Phoenix") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 7);
    }
    else if (autoB28DA18A_val == "Zealot") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 0);
    }
    else if (autoB28DA18A_val == "Adept") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrainVoid", 11);
    }
    else if (autoB28DA18A_val == "Stalker") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 1);
    }
    else if (autoB28DA18A_val == "Sentry") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 5);
    }
    else if (autoB28DA18A_val == "HighTemplar") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 3);
    }
    else if (autoB28DA18A_val == "Archon") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 9);
    }
    else if (autoB28DA18A_val == "Immortal") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 2);
    }
    else if (autoB28DA18A_val == "Colossus") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 15);
    }
    else if (autoB28DA18A_val == "Scout") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 14);
    }
    else if (autoB28DA18A_val == "VoidRay") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 8);
    }
    else if (autoB28DA18A_val == "Carrier") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 6);
    }
    else if (autoB28DA18A_val == "Disruptor") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrain", 2);
    }
    else if (autoB28DA18A_val == "Reaver") {
        lv_warpAbilCmd = AbilityCommand("SuperWarpGateTrainVoid", 18);
    }
    else {
        breakpoint;
    }
    return lv_warpAbilCmd;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Options Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateOptionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_numOptions;

    // Automatic Variable Declarations
    int auto5C2C6261_ae;
    const int auto5C2C6261_ai = 1;
    int autoA59C40DA_ae;
    const int autoA59C40DA_ai = 1;

    // Variable Initialization
    lv_numOptions = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(700, (220+(lv_numOptions*70)), c_anchorCenter, 0, 0, true);
    gv_optionsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_optionsDialog, 700, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/782B2E60"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_optionsDialogTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_optionsDialogTitle, "BattlenetDialogTitle", PlayerGroupAll());
    auto5C2C6261_ae = (lv_numOptions-1);
    lv_i = 0;
    for ( ; ( (auto5C2C6261_ai >= 0 && lv_i <= auto5C2C6261_ae) || (auto5C2C6261_ai < 0 && lv_i >= auto5C2C6261_ae) ) ; lv_i += auto5C2C6261_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 60, (120+(lv_i*70)), IntToText(lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_optionsDialogLabels[lv_i] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[0], StringExternal("Param/Value/8B20FC55"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[1], StringExternal("Param/Value/CE2CFE4F"), PlayerGroupAll());
    autoA59C40DA_ae = (lv_numOptions-1);
    lv_i = 0;
    for ( ; ( (autoA59C40DA_ai >= 0 && lv_i <= autoA59C40DA_ae) || (autoA59C40DA_ai < 0 && lv_i >= autoA59C40DA_ae) ) ; lv_i += autoA59C40DA_ai ) {
        DialogControlCreate(gv_optionsDialog, c_triggerControlTypePulldown);
        gv_optionsDialogMenus[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(gv_optionsDialogMenus[lv_i], PlayerGroupAll(), c_anchorTopLeft, 390, (100+(lv_i*70)));
        DialogControlAddItem(gv_optionsDialogMenus[lv_i], PlayerGroupAll(), StringExternal("Param/Value/E05E3741"));
    }
    DialogControlRemoveAllItems(gv_optionsDialogMenus[0], PlayerGroupAll());
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/4EE237E5"));
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/4213F89C"));
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/19632C72"));
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/E8F17C87"));
    DialogControlSelectItem(gv_optionsDialogMenus[0], PlayerGroupAll(), 1);
    DialogControlRemoveAllItems(gv_optionsDialogMenus[1], PlayerGroupAll());
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/5994A54C"));
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/3A8F5A52"));
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/E4F52433"));
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/6C571503"));
    DialogControlSelectItem(gv_optionsDialogMenus[1], PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemButton(gv_optionsDialog, 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/E55CF9D2"), "");
    gv_optionsDialogAccept = DialogControlLastCreated();
    DialogSetRenderPriority(gv_optionsDialog, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateOptionsDialog_Init () {
    gt_CreateOptionsDialog = TriggerCreate("gt_CreateOptionsDialog_Func");
    TriggerAddEventMapInit(gt_CreateOptionsDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Options
//--------------------------------------------------------------------------------------------------
bool gt_OpenOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_optionsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenOptions_Init () {
    gt_OpenOptions = TriggerCreate("gt_OpenOptions_Func");
    TriggerAddEventChatMessage(gt_OpenOptions, c_playerAny, "-options", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Options
//--------------------------------------------------------------------------------------------------
bool gt_CloseOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsDialogAccept))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_optionsDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseOptions_Init () {
    gt_CloseOptions = TriggerCreate("gt_CloseOptions_Func");
    TriggerAddEventDialogControl(gt_CloseOptions, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize ColonyShip Locations
//--------------------------------------------------------------------------------------------------
bool gt_InitializeColonyShipLocations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_beaconTriggerDiameter;
    int[4] lv_listOfDisableTanks;
    int lv_disableTanksIter;
    int lv_disableTanksRoll;
    int lv_disableTanksIndex;

    // Automatic Variable Declarations
    playergroup autoAAB33195_g;
    int autoAAB33195_var;
    int auto17A80970_val;
    playergroup auto30720D25_g;
    int auto30720D25_var;
    int autoA1514799_val;
    int auto5C348BA4_ae;
    int auto5C348BA4_var;

    // Variable Initialization
    lv_beaconTriggerDiameter = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(380);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(57);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(13);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(12);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(379);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(71);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(85);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(13);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(335);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(59);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(87);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(14);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(128);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(82);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(88);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(15);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(129);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(90);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(89);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(16);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(136);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(83);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(91);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(17);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(131);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(84);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(92);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(18);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(133);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(86);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(93);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(19);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    gv_colonyShipLocationsCount += 1;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit = UnitFromId(405);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipPoint = UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit = UnitFromId(404);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconRegion = RegionCircle(UnitGetPosition(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit), lv_beaconTriggerDiameter);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_state = ge_PRESETColonyShipState_Available;
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTransportTarget = PointFromId(406);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_protossClaimerWaveTargetRegion = RegionFromId(21);
    gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_claimWaveSpawn = PointFromName(("Claimer Wave Spawn 0" + IntToString(gv_colonyShipLocationsCount)));
    UnitSetState(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, c_unitStateTargetable, false);
    UnitSetCustomValue(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_colonyShipUnit, 1, 1.0);
    libNtve_gf_SendActorMessageToUnit(gv_colonyShipLocations[gv_colonyShipLocationsCount].lv_beaconUnit, "SetMinimapVisibility");
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1) == 1)) {
        gf_DisableColonyShip(1);
    }

    lv_listOfDisableTanks[1] = 2;
    lv_listOfDisableTanks[2] = 3;
    lv_listOfDisableTanks[3] = 6;
    lv_disableTanksRoll = RandomInt(1, 5);
    if (((lv_disableTanksRoll == 1) || (lv_disableTanksRoll == 2))) {
        lv_disableTanksIndex = 1;
    }
    else {
        if (((lv_disableTanksRoll == 3) || (lv_disableTanksRoll == 4))) {
            lv_disableTanksIndex = 3;
        }
        else {
            lv_disableTanksIndex = 2;
        }
    }
    if ((DialogControlGetSelectedItem(gv_optionsDialogMenus[0], 1) == 1) && (DialogControlGetSelectedItem(gv_optionsDialogMenus[0], 2) == 1)) {
        gf_DisableColonyShip(lv_listOfDisableTanks[lv_disableTanksIndex]);
    }
    else {
        autoAAB33195_g = PlayerGroupActive();
        autoAAB33195_var = -1;
        while (true) {
            autoAAB33195_var = PlayerGroupNextPlayer(autoAAB33195_g, autoAAB33195_var);
            if (autoAAB33195_var < 0) { break; }
            auto17A80970_val = DialogControlGetSelectedItem(gv_optionsDialogMenus[0], autoAAB33195_var);
            if (auto17A80970_val == 2) {
                gf_DisableColonyShip(lv_listOfDisableTanks[1]);
                break;
            }
            else if (auto17A80970_val == 3) {
                gf_DisableColonyShip(lv_listOfDisableTanks[2]);
                break;
            }
            else if (auto17A80970_val == 4) {
                gf_DisableColonyShip(lv_listOfDisableTanks[3]);
                break;
            }
            else {
            }
        }
    }
    lv_disableTanksIter = 1;
    lv_listOfDisableTanks[lv_disableTanksIter] = 4;
    lv_disableTanksIter += 1;
    lv_listOfDisableTanks[lv_disableTanksIter] = 7;
    lv_disableTanksIter += 1;
    lv_listOfDisableTanks[lv_disableTanksIter] = 9;
    if ((DialogControlGetSelectedItem(gv_optionsDialogMenus[1], 1) == 1) && (DialogControlGetSelectedItem(gv_optionsDialogMenus[1], 2) == 1)) {
        gf_DisableColonyShip(lv_listOfDisableTanks[RandomInt(1, 3)]);
    }
    else {
        auto30720D25_g = PlayerGroupActive();
        auto30720D25_var = -1;
        while (true) {
            auto30720D25_var = PlayerGroupNextPlayer(auto30720D25_g, auto30720D25_var);
            if (auto30720D25_var < 0) { break; }
            autoA1514799_val = DialogControlGetSelectedItem(gv_optionsDialogMenus[1], auto30720D25_var);
            if (autoA1514799_val == 2) {
                gf_DisableColonyShip(lv_listOfDisableTanks[1]);
                break;
            }
            else if (autoA1514799_val == 3) {
                gf_DisableColonyShip(lv_listOfDisableTanks[2]);
                break;
            }
            else if (autoA1514799_val == 4) {
                gf_DisableColonyShip(lv_listOfDisableTanks[3]);
                break;
            }
            else {
            }
        }
    }
    auto5C348BA4_ae = gv_colonyShipLocationsCount;
    auto5C348BA4_var = 1;
    for ( ; auto5C348BA4_var <= auto5C348BA4_ae; auto5C348BA4_var += 1 ) {
        libCOMI_gf_DisplayUnitProgressBar(gv_colonyShipLocations[auto5C348BA4_var].lv_beaconUnit, StringExternal("Param/Value/1595402E"), 0, 100);
        libCOMI_gf_ShowHideUnitProgressBar(gv_colonyShipLocations[auto5C348BA4_var].lv_beaconUnit, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeColonyShipLocations_Init () {
    gt_InitializeColonyShipLocations = TriggerCreate("gt_InitializeColonyShipLocations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("AC_JarbanPointCapture", gt_Init02LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init02LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init03Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02LoadingComplete_Init () {
    gt_Init02LoadingComplete = TriggerCreate("gt_Init02LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init03Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_humanPlayerIter;
    playergroup lv_ignoreResources;

    // Automatic Variable Declarations
    playergroup autoF7951ECD_g;
    playergroup auto5A28068E_g;
    int auto5A28068E_var;
    playergroup autoF04F56FE_g;
    int autoF04F56FE_var;
    playergroup autoAEA6D7E6_g;
    int autoAEA6D7E6_var;

    // Variable Initialization
    lv_ignoreResources = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) > 1)) {
        gv_pLAYER_02_USER = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 2);
    }
    else {
        gv_pLAYER_02_USER = gv_pLAYER_01_USER;
    }
    libCOMI_gf_StartCoopAI(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_06_INFESTED_BaseWavesHateToss, gv_pLAYER_02_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_06_INFESTED_BaseWavesHateToss, gv_pLAYER_02_USER);
    PlayerGroupAdd(gv_amonPlayers, gv_pLAYER_03_AMON_Claimers);
    PlayerGroupAdd(gv_amonPlayers, gv_pLAYER_04_AMON_BaseWaves);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetEnemyHumanPlayers(), gv_amonPlayers);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_06_INFESTED_BaseWavesHateToss);
    PlayerGroupAdd(gv_zergPlayers, gv_pLAYER_07_ZERG);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_amonPlayers, gv_enemyPlayers);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_zergPlayers, gv_enemyPlayers);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_ColonyShip, "CoopNPCPlayer", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_10_ColonyShipTARGET, "CoopNPCPlayer", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_11_COLONISTS, "CoopNPCPlayer", 1);
    autoF7951ECD_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_humanPlayerIter = -1;
    while (true) {
        lv_humanPlayerIter = PlayerGroupNextPlayer(autoF7951ECD_g, lv_humanPlayerIter);
        if (lv_humanPlayerIter < 0) { break; }
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_08_ColonyShip, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_10_ColonyShipTARGET, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_11_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_03_AMON_Claimers, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_04_AMON_BaseWaves, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_06_INFESTED_BaseWavesHateToss, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_07_ZERG, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_humanPlayerIter, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_08_ColonyShip, gv_pLAYER_10_ColonyShipTARGET, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_08_ColonyShip, gv_pLAYER_11_COLONISTS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_11_COLONISTS, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_11_COLONISTS, gv_pLAYER_10_ColonyShipTARGET, libNtve_ge_AllianceSetting_Ally);
    auto5A28068E_g = gv_zergPlayers;
    auto5A28068E_var = -1;
    while (true) {
        auto5A28068E_var = PlayerGroupNextPlayer(auto5A28068E_g, auto5A28068E_var);
        if (auto5A28068E_var < 0) { break; }
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_08_ColonyShip, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_10_ColonyShipTARGET, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_11_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_04_AMON_BaseWaves, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_03_AMON_Claimers, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_06_INFESTED_BaseWavesHateToss, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(auto5A28068E_var, gv_pLAYER_07_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        PlayerSetColorIndex(auto5A28068E_var, 1, true);
    }
    autoF04F56FE_g = gv_amonPlayers;
    autoF04F56FE_var = -1;
    while (true) {
        autoF04F56FE_var = PlayerGroupNextPlayer(autoF04F56FE_g, autoF04F56FE_var);
        if (autoF04F56FE_var < 0) { break; }
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_08_ColonyShip, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_10_ColonyShipTARGET, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_11_COLONISTS, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_06_INFESTED_BaseWavesHateToss, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_06_INFESTED_BaseWavesHateToss, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_09_ERADICATOR, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_03_AMON_Claimers, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_04_AMON_BaseWaves, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(autoF04F56FE_var, gv_pLAYER_07_ZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetEnemyAIPlayers(), lv_ignoreResources);
    PlayerGroupAdd(lv_ignoreResources, gv_pLAYER_06_INFESTED_BaseWavesHateToss);
    PlayerGroupAdd(lv_ignoreResources, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss);
    PlayerGroupAdd(lv_ignoreResources, gv_pLAYER_11_COLONISTS);
    autoAEA6D7E6_g = lv_ignoreResources;
    autoAEA6D7E6_var = -1;
    while (true) {
        autoAEA6D7E6_var = PlayerGroupNextPlayer(autoAEA6D7E6_g, autoAEA6D7E6_var);
        if (autoAEA6D7E6_var < 0) { break; }
        PlayerSetState(autoAEA6D7E6_var, c_playerStateMineralCostIgnored, true);
        PlayerSetState(autoAEA6D7E6_var, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(autoAEA6D7E6_var, c_playerStateFoodIgnored, true);
    }
    PlayerSetColorIndex(gv_pLAYER_09_ERADICATOR, 0, true);
    PlayerSetColorIndex(gv_pLAYER_11_COLONISTS, 0, true);
    PlayerSetColorIndex(gv_pLAYER_08_ColonyShip, 0, true);
    PlayerSetColorIndex(gv_pLAYER_10_ColonyShipTARGET, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Players_Init () {
    gt_Init03Players = TriggerCreate("gt_Init03Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_08_ColonyShip, "FireSuppressionSystems", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_10_ColonyShipTARGET, "FireSuppressionSystems", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_rocksSmall;
    unitgroup lv_rocksLarge;

    // Automatic Variable Declarations
    unitgroup auto71F4FFAB_g;
    int auto71F4FFAB_u;
    unit auto71F4FFAB_var;
    unitgroup auto67337D53_g;
    int auto67337D53_u;
    unit auto67337D53_var;
    unitgroup autoC386889F_g;
    int autoC386889F_u;
    unit autoC386889F_var;
    unitgroup autoB24B72C5_g;
    int autoB24B72C5_u;
    unit autoB24B72C5_var;
    unitgroup auto3043FF71_g;
    int auto3043FF71_u;
    unit auto3043FF71_var;
    unitgroup auto63ED60AE_g;
    int auto63ED60AE_u;
    unit auto63ED60AE_var;
    unitgroup auto4B109324_g;
    int auto4B109324_u;
    unit auto4B109324_var;
    unitgroup auto4BFC89B0_g;
    int auto4BFC89B0_u;
    unit auto4BFC89B0_var;
    unitgroup auto9E557A8C_g;
    int auto9E557A8C_u;
    unit auto9E557A8C_var;
    unitgroup auto5EF66E23_g;
    int auto5EF66E23_u;
    unit auto5EF66E23_var;
    unitgroup auto1BD26239_g;
    int auto1BD26239_u;
    unit auto1BD26239_var;
    unitgroup autoDFFB1E2D_g;
    int autoDFFB1E2D_u;
    unit autoDFFB1E2D_var;
    unitgroup autoAB3250EE_g;
    int autoAB3250EE_u;
    unit autoAB3250EE_var;
    unitgroup auto0976269A_g;
    int auto0976269A_u;
    unit auto0976269A_var;

    // Variable Initialization
    lv_rocksSmall = UnitGroupEmpty();
    lv_rocksLarge = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitializeColonyShipLocations, true, false);
    auto71F4FFAB_g = UnitGroup(null, gv_pLAYER_11_COLONISTS, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71F4FFAB_u = UnitGroupCount(auto71F4FFAB_g, c_unitCountAll);
    for (;; auto71F4FFAB_u -= 1) {
        auto71F4FFAB_var = UnitGroupUnitFromEnd(auto71F4FFAB_g, auto71F4FFAB_u);
        if (auto71F4FFAB_var == null) { break; }
        if (((UnitGetType(auto71F4FFAB_var) == "JarbanColonistHut") || (UnitGetType(auto71F4FFAB_var) == "Excavator") || (UnitGetType(auto71F4FFAB_var) == "TankerTruck") || (UnitGetType(auto71F4FFAB_var) == "DumpTruck") || (UnitGetType(auto71F4FFAB_var) == "TruckFlatbedUnit"))) {
            libNtve_gf_SendActorMessageToUnit(auto71F4FFAB_var, "SetMinimapVisibility");
            UnitIssueOrder(auto71F4FFAB_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }

    }
    auto67337D53_g = UnitGroupFromId(2);
    auto67337D53_u = UnitGroupCount(auto67337D53_g, c_unitCountAll);
    for (;; auto67337D53_u -= 1) {
        auto67337D53_var = UnitGroupUnitFromEnd(auto67337D53_g, auto67337D53_u);
        if (auto67337D53_var == null) { break; }
        UnitBehaviorAdd(auto67337D53_var, "Harmless", auto67337D53_var, 1);
    }
    autoC386889F_g = UnitGroup("InfestedColonistTransportNova", gv_pLAYER_11_COLONISTS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC386889F_u = UnitGroupCount(autoC386889F_g, c_unitCountAll);
    for (;; autoC386889F_u -= 1) {
        autoC386889F_var = UnitGroupUnitFromEnd(autoC386889F_g, autoC386889F_u);
        if (autoC386889F_var == null) { break; }
        UnitBehaviorAdd(autoC386889F_var, "Harmless", autoC386889F_var, 1);
        UnitSetState(autoC386889F_var, c_unitStateHighlightable, false);
        UnitSetState(autoC386889F_var, c_unitStateSelectable, false);
        UnitSetState(autoC386889F_var, c_unitStateTargetable, false);
        UnitSetState(autoC386889F_var, c_unitStateTooltipable, false);
        UnitIssueOrder(autoC386889F_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    autoB24B72C5_g = UnitGroup("MilitarizedColonistTransportNova", gv_pLAYER_11_COLONISTS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB24B72C5_u = UnitGroupCount(autoB24B72C5_g, c_unitCountAll);
    for (;; autoB24B72C5_u -= 1) {
        autoB24B72C5_var = UnitGroupUnitFromEnd(autoB24B72C5_g, autoB24B72C5_u);
        if (autoB24B72C5_var == null) { break; }
        UnitBehaviorAdd(autoB24B72C5_var, "Harmless", autoB24B72C5_var, 1);
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion("AnimPlay StandUnpowered Stand,Unpowered PlayForever", "Zerg_EggSackOneEggs", RegionFromId(57));
    libCOMI_gf_SendActorMessageToDoodadsInRegion("AnimPlay StandUnpowered Stand,Unpowered PlayForever", "Zerg_EggSackTwoEggs", RegionFromId(57));
    libCOMI_gf_SendActorMessageToDoodadsInRegion("AnimPlay StandUnpowered Stand,Unpowered PlayForever", "Zerg_EggSackThreeEggs", RegionFromId(57));
    libCOMI_gf_SendActorMessageToDoodadsInRegion("SetMinimapVisibility", "Zerg_EggSackOneEggs", RegionFromId(57));
    libCOMI_gf_SendActorMessageToDoodadsInRegion("SetMinimapVisibility", "Zerg_EggSackTwoEggs", RegionFromId(57));
    libCOMI_gf_SendActorMessageToDoodadsInRegion("SetMinimapVisibility", "Zerg_EggSackThreeEggs", RegionFromId(57));
    auto3043FF71_g = UnitGroup(gv_c_ColonyShipObjective_Dead, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3043FF71_u = UnitGroupCount(auto3043FF71_g, c_unitCountAll);
    for (;; auto3043FF71_u -= 1) {
        auto3043FF71_var = UnitGroupUnitFromEnd(auto3043FF71_g, auto3043FF71_u);
        if (auto3043FF71_var == null) { break; }
        UnitSetCustomValue(auto3043FF71_var, 1, 1.0);
        UnitSetState(auto3043FF71_var, c_unitStateHighlightable, false);
        UnitSetState(auto3043FF71_var, c_unitStateSelectable, false);
        UnitSetState(auto3043FF71_var, c_unitStateTargetable, false);
        UnitSetState(auto3043FF71_var, c_unitStateTooltipable, false);
        UnitSetState(auto3043FF71_var, c_unitStateInvulnerable, true);
        libNtve_gf_SendActorMessageToUnit(auto3043FF71_var, "SetMinimapVisibility");
    }
    auto63ED60AE_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63ED60AE_u = UnitGroupCount(auto63ED60AE_g, c_unitCountAll);
    for (;; auto63ED60AE_u -= 1) {
        auto63ED60AE_var = UnitGroupUnitFromEnd(auto63ED60AE_g, auto63ED60AE_u);
        if (auto63ED60AE_var == null) { break; }
        if (((UnitGetType(auto63ED60AE_var) == "InfestableBiodome") || (UnitGetType(auto63ED60AE_var) == "InfestableColonistBiodome") || (UnitGetType(auto63ED60AE_var) == "InfestableColonistHut") || (UnitGetType(auto63ED60AE_var) == "JarbanInfestibleColonistHut") || (UnitGetType(auto63ED60AE_var) == "InfestableHut") || (UnitGetType(auto63ED60AE_var) == "InfestedArmory") || (UnitGetType(auto63ED60AE_var) == "InfestedBarracks") || (UnitGetType(auto63ED60AE_var) == "InfestedBunker") || (UnitGetType(auto63ED60AE_var) == "InfestedCC") || (UnitGetType(auto63ED60AE_var) == "InfestedEngBay") || (UnitGetType(auto63ED60AE_var) == "InfestedFactory") || (UnitGetType(auto63ED60AE_var) == "InfestedMissileTurret") || (UnitGetType(auto63ED60AE_var) == "InfestedRefinery") || (UnitGetType(auto63ED60AE_var) == "InfestedStarport") || (UnitGetType(auto63ED60AE_var) == "InfestedSupply") || (UnitGetType(auto63ED60AE_var) == "InfestedMercHaven"))) {
            UnitBehaviorAddPlayer(auto63ED60AE_var, "ColonyInfestation", UnitGetOwner(auto63ED60AE_var), 1);
        }

    }
    auto4B109324_g = UnitGroup("InfestedBunker", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B109324_u = UnitGroupCount(auto4B109324_g, c_unitCountAll);
    for (;; auto4B109324_u -= 1) {
        auto4B109324_var = UnitGroupUnitFromEnd(auto4B109324_g, auto4B109324_u);
        if (auto4B109324_var == null) { break; }
        UnitBehaviorAddPlayer(auto4B109324_var, "ColonyInfestation", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 1);
        UnitCargoCreate(auto4B109324_var, "InfestedTerranCampaign", 4);
    }
    auto4BFC89B0_g = UnitGroup("NovaInfestedSiegeTankUprooted", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BFC89B0_u = UnitGroupCount(auto4BFC89B0_g, c_unitCountAll);
    for (;; auto4BFC89B0_u -= 1) {
        auto4BFC89B0_var = UnitGroupUnitFromEnd(auto4BFC89B0_g, auto4BFC89B0_u);
        if (auto4BFC89B0_var == null) { break; }
        UnitGroupAdd(gv_infestedSiegeTanks, auto4BFC89B0_var);
        AISetUnitScriptControlled(auto4BFC89B0_var, true);
    }
    auto9E557A8C_g = UnitGroup("NovaInfestedSiegeTankUprooted", gv_pLAYER_06_INFESTED_BaseWavesHateToss, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E557A8C_u = UnitGroupCount(auto9E557A8C_g, c_unitCountAll);
    for (;; auto9E557A8C_u -= 1) {
        auto9E557A8C_var = UnitGroupUnitFromEnd(auto9E557A8C_g, auto9E557A8C_u);
        if (auto9E557A8C_var == null) { break; }
        UnitGroupAdd(gv_infestedSiegeTanks, auto9E557A8C_var);
        AISetUnitScriptControlled(auto9E557A8C_var, true);
    }
    auto5EF66E23_g = UnitGroup("InfestedCivilianBurrowed", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5EF66E23_u = UnitGroupCount(auto5EF66E23_g, c_unitCountAll);
    for (;; auto5EF66E23_u -= 1) {
        auto5EF66E23_var = UnitGroupUnitFromEnd(auto5EF66E23_g, auto5EF66E23_u);
        if (auto5EF66E23_var == null) { break; }
        UnitBehaviorAddPlayer(auto5EF66E23_var, "ScanRangeBonus", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 1);
    }
    auto1BD26239_g = UnitGroup("InfestedTerranCampaignBurrowed", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BD26239_u = UnitGroupCount(auto1BD26239_g, c_unitCountAll);
    for (;; auto1BD26239_u -= 1) {
        auto1BD26239_var = UnitGroupUnitFromEnd(auto1BD26239_g, auto1BD26239_u);
        if (auto1BD26239_var == null) { break; }
        UnitBehaviorAddPlayer(auto1BD26239_var, "ScanRangeBonus", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 1);
    }
    libNtve_gf_PauseUnit(gv_c_BonusObjective_Blightbringer, true);
    UnitSetCustomValue(gv_c_BonusObjective_Blightbringer, 1, 1.0);
    autoDFFB1E2D_g = UnitGroup("InfestedCivilian", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFFB1E2D_u = UnitGroupCount(autoDFFB1E2D_g, c_unitCountAll);
    for (;; autoDFFB1E2D_u -= 1) {
        autoDFFB1E2D_var = UnitGroupUnitFromEnd(autoDFFB1E2D_g, autoDFFB1E2D_u);
        if (autoDFFB1E2D_var == null) { break; }
        UnitGroupAdd(gv_bonusObjective_HatchedInfestedGroup, autoDFFB1E2D_var);
        UnitBehaviorAdd(autoDFFB1E2D_var, "CritterWanderLeashShort", autoDFFB1E2D_var, 1);
    }
    gv_eradicatorTypeMissile = UnitFromId(895);
    gv_eradicatorTypeCannon = UnitFromId(1340);
    UnitIssueOrder(gv_eradicatorTypeMissile, Order(AbilityCommand("NovaEradicatorMissileMode", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_eradicatorTypeMissile, OrderSetAutoCast(AbilityCommand("EradicatorLockOnAir", 0), false), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_eradicatorTypeCannon, OrderSetAutoCast(AbilityCommand("EradicatorLockOnAir", 0), false), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_eradicatorTypeMissile, OrderSetAutoCast(AbilityCommand("EradicatorLockOn", 0), false), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_eradicatorTypeCannon, OrderSetAutoCast(AbilityCommand("EradicatorLockOn", 0), false), c_orderQueueAddToEnd);
    UnitAbilityEnable(gv_eradicatorTypeMissile, "move", false);
    CatalogFieldValueSet(c_gameCatalogActor, "Cyclone", "PortraitModel", gv_pLAYER_09_ERADICATOR, ("MULEPortrait"));
    autoAB3250EE_g = UnitGroupFromId(1);
    autoAB3250EE_u = UnitGroupCount(autoAB3250EE_g, c_unitCountAll);
    for (;; autoAB3250EE_u -= 1) {
        autoAB3250EE_var = UnitGroupUnitFromEnd(autoAB3250EE_g, autoAB3250EE_u);
        if (autoAB3250EE_var == null) { break; }
        gf_InfestUnit(autoAB3250EE_var);
    }
    if ((RandomInt(0, 100) > 33)) {
        auto0976269A_g = UnitGroup(null, c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0976269A_u = UnitGroupCount(auto0976269A_g, c_unitCountAll);
        for (;; auto0976269A_u -= 1) {
            auto0976269A_var = UnitGroupUnitFromEnd(auto0976269A_g, auto0976269A_u);
            if (auto0976269A_var == null) { break; }
            UnitRemove(auto0976269A_var);
        }
        TriggerEnable(gt_NeverTakeMeAliveQ, false);
    }

    UnitSetPropertyFixed(UnitFromId(1634), c_unitPropLifePercent, 50.0);
    UnitSetPropertyFixed(UnitFromId(1636), c_unitPropLifePercent, 30.0);
    UnitSetPropertyFixed(UnitFromId(1635), c_unitPropLifePercent, 1.0);
    UnitSetPropertyFixed(UnitFromId(1634), c_unitPropKills, 5.0);
    UnitSetPropertyFixed(UnitFromId(1636), c_unitPropKills, 2.0);
    UnitSetPropertyFixed(UnitFromId(1635), c_unitPropKills, 17.0);
    UnitBehaviorAdd(UnitFromId(1634), "CritterWanderLeashShort", UnitFromId(1634), 1);
    UnitBehaviorAdd(UnitFromId(1636), "CritterWanderLeashShort", UnitFromId(1636), 1);
    UnitBehaviorAdd(UnitFromId(1635), "CritterWanderLeashShort", UnitFromId(1635), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack2 = "Ambience_Nova05_Main";
    gv_mapMusicTrack3 = "Ambience_Nova05_ZergMines";
    gv_mapMusicTrack4 = "Ambience_Nova05_ScienceFacility";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDC6F5366_g;
    int autoDC6F5366_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetToDLighting("JarbanMinor_Jungle");
    autoDC6F5366_g = libCOMI_gf_HumanPlayers();
    autoDC6F5366_var = -1;
    while (true) {
        autoDC6F5366_var = PlayerGroupNextPlayer(autoDC6F5366_g, autoDC6F5366_var);
        if (autoDC6F5366_var < 0) { break; }
        libCOMI_gf_AutoRevealRegionCoop(RegionFromId(65), RegionFromId(65), autoDC6F5366_var);
        libCOMI_gf_AutoRevealRegionCoop(RegionFromId(74), RegionFromId(74), autoDC6F5366_var);
        libCOMI_gf_AutoRevealRegionCoop(RegionFromId(68), RegionFromId(68), autoDC6F5366_var);
        libCOMI_gf_AutoRevealRegionCoop(RegionFromId(69), RegionFromId(69), autoDC6F5366_var);
        libCOMI_gf_AutoRevealRegionCoop(RegionFromId(70), RegionFromId(70), autoDC6F5366_var);
        libCOMI_gf_AutoRevealRegionCoop(RegionFromId(155), RegionFromId(155), autoDC6F5366_var);
    }
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Griffin_Pickup_Flyby");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_colonyShipLifeMax;
    fixed lv_eradicatorLifeMax;
    fixed lv_blightbringerLifeMax;

    // Automatic Variable Declarations
    playergroup auto2AD571A7_g;
    int auto2AD571A7_var;
    playergroup auto139417E7_g;
    int auto139417E7_var;
    unitgroup auto95A5FABE_g;
    int auto95A5FABE_u;
    unit auto95A5FABE_var;
    int auto927DCC0B_val;
    playergroup auto60B674C5_g;
    int auto60B674C5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2AD571A7_g = gv_enemyPlayers;
    auto2AD571A7_var = -1;
    while (true) {
        auto2AD571A7_var = PlayerGroupNextPlayer(auto2AD571A7_g, auto2AD571A7_var);
        if (auto2AD571A7_var < 0) { break; }
        TechTreeAbilityAllow(auto2AD571A7_var, AbilityCommand("InfestedBansheeCloakingField", 0), false);
    }
    TimerStart(gv_enableAIInfestedBansheeCloak, (9.0 * 60.0), false, c_timeGame);
    if ((RandomInt(0, 100) <= 66)) {
        gv_bonusObjective_MineFirst = true;
    }
    else {
        gv_bonusObjective_MineFirst = false;
    }
    gv_objectiveExtractColonyShipMax = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4, 4, 5, 5, 0, 0);
    gv_objectiveDoNotLetDevicesBeDestroyedMax = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 2, 2, 0, 0);
    lv_colonyShipLifeMax = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 2000.0, 2000.0, 1750.0, 1500.0, 0.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogUnit, gv_c_ColonyShipObjective, "LifeMax", gv_pLAYER_08_ColonyShip, FixedToString(lv_colonyShipLifeMax, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, gv_c_ColonyShipObjective, "LifeMax", gv_pLAYER_10_ColonyShipTARGET, FixedToString(lv_colonyShipLifeMax, c_fixedPrecisionAny));
    TechTreeUpgradeAddLevel(gv_pLAYER_11_COLONISTS, "ShieldWall", 1);
    lv_eradicatorLifeMax = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1500.0, 1500.0, 2500.0, 3500.0, 0.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaEradicator", "LifeStart", gv_pLAYER_09_ERADICATOR, FixedToString(lv_eradicatorLifeMax, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "NovaEradicator", "LifeMax", gv_pLAYER_09_ERADICATOR, FixedToString(lv_eradicatorLifeMax, c_fixedPrecisionAny));
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_09_ERADICATOR, "NovaEradicatorDamageHard", libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 0, 0, 0));
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_09_ERADICATOR, "NovaEradicatorDamageBrutal", libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0));
    lv_blightbringerLifeMax = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 3000.0, 3000.0, 4500.0, 5500.0, 0.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "Blightbringer", "LifeStart", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, FixedToString(lv_blightbringerLifeMax, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "Blightbringer", "LifeMax", gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, FixedToString(lv_blightbringerLifeMax, c_fixedPrecisionAny));
    gv_bonusObjective_Blightbringer_EggLarge = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 60.0, 60.0, 120.0, 180.0, 0.0, 0.0);
    gv_bonusObjective_Blightbringer_EggSmall = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 40.0, 40.0, 80.0, 120.0, 0.0, 0.0);
    gv_bonusObjective_Blightbringer_EggHatchTime = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 9.0, 8.0, 0.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "ParasiticBomb", "Cost[" + IntToString(0) + "].Vital[" + IntToString(c_unitVitalEnergy) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), IntToString(0));
    gv_bonusObjective_Blightbringer_AttackGroundCD = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 6.0, 6.0, 4.0, 3.0, 0.0, 0.0);
    gv_bonusObjective_Blightbringer_AttackAirCD = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 30.0, 30.0, 20.0, 10.0, 0.0, 0.0);
    auto139417E7_g = gv_enemyPlayers;
    auto139417E7_var = -1;
    while (true) {
        auto139417E7_var = PlayerGroupNextPlayer(auto139417E7_g, auto139417E7_var);
        if (auto139417E7_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto139417E7_var, "overlordspeed", 1);
        TechTreeUpgradeAddLevel(auto139417E7_var, "overlordtransport", 1);
        TechTreeUpgradeAddLevel(auto139417E7_var, "ObserverGraviticBooster", 1);
    }
    auto95A5FABE_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto95A5FABE_u = UnitGroupCount(auto95A5FABE_g, c_unitCountAll);
    for (;; auto95A5FABE_u -= 1) {
        auto95A5FABE_var = UnitGroupUnitFromEnd(auto95A5FABE_g, auto95A5FABE_u);
        if (auto95A5FABE_var == null) { break; }
        if (((UnitGetType(auto95A5FABE_var) == "InfestableBiodome") || (UnitGetType(auto95A5FABE_var) == "InfestableColonistBiodome") || (UnitGetType(auto95A5FABE_var) == "InfestableColonistHut") || (UnitGetType(auto95A5FABE_var) == "InfestableHut") || (UnitGetType(auto95A5FABE_var) == "InfestedArmory") || (UnitGetType(auto95A5FABE_var) == "InfestedBarracks") || (UnitGetType(auto95A5FABE_var) == "InfestedBunker") || (UnitGetType(auto95A5FABE_var) == "InfestedCC") || (UnitGetType(auto95A5FABE_var) == "InfestedEngBay") || (UnitGetType(auto95A5FABE_var) == "InfestedFactory") || (UnitGetType(auto95A5FABE_var) == "InfestedMissileTurret") || (UnitGetType(auto95A5FABE_var) == "InfestedRefinery") || (UnitGetType(auto95A5FABE_var) == "InfestedStarport") || (UnitGetType(auto95A5FABE_var) == "InfestedSupply"))) {
            auto927DCC0B_val = libCOMI_gf_GetMissionDifficulty();
            if (auto927DCC0B_val == 1) {
                UnitSetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, (UnitGetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, c_unitPropCurrent) * 0.75));
            }
            else if (auto927DCC0B_val == 2) {
                UnitSetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, (UnitGetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, c_unitPropCurrent) * 0.75));
            }
            else if (auto927DCC0B_val == 3) {
                UnitSetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, (UnitGetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, c_unitPropCurrent) * 1.25));
            }
            else if (auto927DCC0B_val == 4) {
                UnitSetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, (UnitGetPropertyFixed(auto95A5FABE_var, c_unitPropLifeMax, c_unitPropCurrent) * 1.5));
            }
            else {
            }
            UnitSetPropertyFixed(auto95A5FABE_var, c_unitPropLifePercent, 100.0);
        }

    }
    auto60B674C5_g = gv_enemyPlayers;
    auto60B674C5_var = -1;
    while (true) {
        auto60B674C5_var = PlayerGroupNextPlayer(auto60B674C5_g, auto60B674C5_var);
        if (auto60B674C5_var < 0) { break; }
        if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0) == 1)) {
            TechTreeUpgradeAddLevel(auto60B674C5_var, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(auto60B674C5_var, "hydraliskspeed", 1);
        }

        if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0) == 1)) {
            TechTreeUpgradeAddLevel(auto60B674C5_var, "zerglingattackspeed", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_infestedBullies;

    // Automatic Variable Declarations
    playergroup autoCCE4179B_g;
    int autoCCE4179B_var;
    playergroup auto8C4A9983_g;
    int auto8C4A9983_var;

    // Variable Initialization
    lv_infestedBullies = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetupInfestedPoints, true, false);
    libCOMI_gf_StartCoopAI(gv_pLAYER_07_ZERG, gv_pLAYER_01_USER);
    if ((PlayerGroupCount(libCOMI_gv_vU_AlliedCommanders) == 1)) {
        libCOMI_gf_StartCoopAIwithSpecificPersonality(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, PlayerGroupPlayer(libCOMI_gv_vU_AlliedCommanders, 1), "Infested");
        libCOMI_gf_StartCoopAIwithSpecificPersonality(gv_pLAYER_06_INFESTED_BaseWavesHateToss, PlayerGroupPlayer(libCOMI_gv_vU_AlliedCommanders, 2), "Infested");
    }
    else {
        if ((RandomInt(0, 100) <= 50)) {
            libCOMI_gf_StartCoopAIwithSpecificPersonality(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, PlayerGroupPlayer(libCOMI_gv_vU_AlliedCommanders, 1), "Infested");
            libCOMI_gf_StartCoopAIwithSpecificPersonality(gv_pLAYER_06_INFESTED_BaseWavesHateToss, PlayerGroupPlayer(libCOMI_gv_vU_AlliedCommanders, 2), "Infested");
        }
        else {
            libCOMI_gf_StartCoopAIwithSpecificPersonality(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, PlayerGroupPlayer(libCOMI_gv_vU_AlliedCommanders, 2), "Infested");
            libCOMI_gf_StartCoopAIwithSpecificPersonality(gv_pLAYER_06_INFESTED_BaseWavesHateToss, PlayerGroupPlayer(libCOMI_gv_vU_AlliedCommanders, 1), "Infested");
        }
    }
    TriggerExecute(gt_SetupProtossAIWarpInUnits, true, false);
    TriggerExecute(gt_InitializeClaimerWaveTargetPriority, true, false);
    CampaignInitAI();
    AITransportSetPanic(gv_pLAYER_03_AMON_Claimers, 0.9);
    autoCCE4179B_g = gv_enemyPlayers;
    autoCCE4179B_var = -1;
    while (true) {
        autoCCE4179B_var = PlayerGroupNextPlayer(autoCCE4179B_g, autoCCE4179B_var);
        if (autoCCE4179B_var < 0) { break; }
        VisRevealArea(autoCCE4179B_var, RegionFromId(3), 2.0, false);
    }
    PlayerGroupAdd(lv_infestedBullies, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss);
    PlayerGroupAdd(lv_infestedBullies, gv_pLAYER_06_INFESTED_BaseWavesHateToss);
    auto8C4A9983_g = lv_infestedBullies;
    auto8C4A9983_var = -1;
    while (true) {
        auto8C4A9983_var = PlayerGroupNextPlayer(auto8C4A9983_g, auto8C4A9983_var);
        if (auto8C4A9983_var < 0) { break; }
        libNtve_gf_SetTacticalAIThink(auto8C4A9983_var, "InfestedColonistTransportNova", "InfestedTransportAI", false);
        AISetBullyRebuildDelay(5.0, 10.0, auto8C4A9983_var);
        AINearestTownBullyRebuild(auto8C4A9983_var, true);
        AINearestTownLimitWaveGather(auto8C4A9983_var, true);
    }
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(87));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(88));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(102));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(103));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(104));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(105));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(106));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(109));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(109));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(107));
    gf_AIMonitorBullyRebuildRegion(lv_infestedBullies, RegionFromId(108));
    gv_infestedAttackPlayer = gv_pLAYER_06_INFESTED_BaseWavesHateToss;
    libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(PlayerGroupSingle(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9DE949BB_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_MissionProgression, true, false);
    TriggerExecute(gt_ForceColonyShipSetup, true, false);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveExtractColonyShipCreate, true, true);
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto9DE949BB_val = RandomInt(0, 2);
    if (auto9DE949BB_val == 0) {
        libCOMI_gf_SendMissionTransmission("Intro1JC", true, -1);
    }
    else if (auto9DE949BB_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro2JC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3JC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_CreateColonyShipPings, true, false);
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("CapturePingJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Char Example
//--------------------------------------------------------------------------------------------------
bool gt_CharExample_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_missionTimeScoreMax;
    int lv_missionParTime;
    int lv_objectiveScoreMax;
    int lv_bonusObjectiveParTime;
    int lv_bonusScoreMax;
    int lv_timeScore;
    int lv_logicFrames;
    fixed lv_bonusScoreReal;
    int lv_objectiveScore;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionTimeScoreMax = 100000;
    lv_missionParTime = 30;
    lv_objectiveScoreMax = 100000;
    lv_bonusObjectiveParTime = 20;
    lv_bonusScoreMax = 50000;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 250, c_anchorBottomLeft, 0, 375, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_bonusScoreReal = lv_bonusScoreMax;
    while ((libCOMI_gf_GameIsOver() == false)) {
        if (true) {
            lv_bonusScoreReal -= libCOMI_gf_LeaderboardObjectDurationModifierValue(lv_bonusScoreMax, lv_bonusObjectiveParTime);
        }

        lv_logicFrames += 1;
        lv_timeScore = libCOMI_gf_LeaderboardTimeScore(lv_missionTimeScoreMax, lv_missionParTime);
        TextExpressionSetToken("Param/Expression/A04A8E86", "A", FixedToText(lv_timeScore, 0));
        TextExpressionSetToken("Param/Expression/A04A8E86", "B", FixedToText(lv_bonusScoreReal, 0));
        TextExpressionSetToken("Param/Expression/A04A8E86", "C", IntToText(lv_objectiveScore));
        DialogSetTitle(DialogLastCreated(), TextExpressionAssemble("Param/Expression/A04A8E86"));
        Wait(0.0625, c_timeGame);
    }
    if (true) {
        lv_bonusScoreReal = 0.0;
    }

    if (true) {
        lv_bonusScoreReal = 0.0;
    }
    else {
        if ((lv_bonusScoreReal < 1000.0)) {
            lv_bonusScoreReal = 1000.0;
        }

    }
    if (((lv_timeScore <= 0))) {
        lv_timeScore = 0;
    }
    else {
        if ((lv_timeScore <= 1000)) {
            lv_timeScore = 1000;
        }

    }
    if (((lv_objectiveScore <= 0))) {
        lv_objectiveScore = 0;
    }
    else {
        if ((lv_objectiveScore <= 1000)) {
            lv_objectiveScore = 1000;
        }

    }
    libCOMI_gf_SetMissionScore("MSCompletionSpeed", lv_timeScore, gv_pLAYER_01_USER);
    libCOMI_gf_SetMissionScore("MSCompletionSpeed", lv_timeScore, gv_pLAYER_02_USER);
    libCOMI_gf_SetMissionScore("MSFortressLifeRemaining", lv_objectiveScore, gv_pLAYER_01_USER);
    libCOMI_gf_SetMissionScore("MSFortressLifeRemaining", lv_objectiveScore, gv_pLAYER_02_USER);
    libCOMI_gf_SetMissionScore("MSBonusSpeed", FixedToInt(lv_bonusScoreReal), gv_pLAYER_01_USER);
    libCOMI_gf_SetMissionScore("MSBonusSpeed", FixedToInt(lv_bonusScoreReal), gv_pLAYER_02_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharExample_Init () {
    gt_CharExample = TriggerCreate("gt_CharExample_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infest Mercs
//--------------------------------------------------------------------------------------------------
bool gt_InfestMercs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_enemyPlayers, UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "HERC") || (UnitGetType(EventUnitCreatedUnit()) == "HammerSecurity") || (UnitGetType(EventUnitCreatedUnit()) == "DevilDog") || (UnitGetType(EventUnitCreatedUnit()) == "MercMedic") || (UnitGetType(EventUnitCreatedUnit()) == "MercReaper") || (UnitGetType(EventUnitCreatedUnit()) == "WarPig")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_InfestUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestMercs_Init () {
    gt_InfestMercs = TriggerCreate("gt_InfestMercs_Func");
    TriggerAddEventUnitCreated(gt_InfestMercs, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create ColonyShip Pings
//--------------------------------------------------------------------------------------------------
bool gt_CreateColonyShipPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    int lv_missionEvent;
    int lv_transportOfInterest;
    int lv_humanIter;

    // Automatic Variable Declarations
    const int auto702AF802_ae = gv_c_ColonyShip_MaxCount;
    const int auto702AF802_ai = 1;
    playergroup autoDFDE1A07_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_colonyShipIndex = 1;
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 0, 0, 0) == 1)) {
        gf_SetupColonyShipasObjective(lv_colonyShipIndex);
    }

    lv_colonyShipIndex = 2;
    for ( ; ( (auto702AF802_ai >= 0 && lv_colonyShipIndex <= auto702AF802_ae) || (auto702AF802_ai < 0 && lv_colonyShipIndex >= auto702AF802_ae) ) ; lv_colonyShipIndex += auto702AF802_ai ) {
        gf_SetupColonyShipasObjective(lv_colonyShipIndex);
    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        lv_missionEvent = (gv_missionEventCurrent + 1);
        lv_transportOfInterest = gf_PanicShuttleNextIndex();
        if ((lv_transportOfInterest <= 0)) {
            break;
        }

        libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(gv_colonyShipLocations[lv_transportOfInterest].lv_colonyShipUnit, 1), true);
        autoDFDE1A07_g = libCOMI_gf_HumanPlayers();
        lv_humanIter = -1;
        while (true) {
            lv_humanIter = PlayerGroupNextPlayer(autoDFDE1A07_g, lv_humanIter);
            if (lv_humanIter < 0) { break; }
            VisRevealArea(lv_humanIter, RegionCircle(UnitGetPosition(gv_colonyShipLocations[lv_transportOfInterest].lv_colonyShipUnit), 4.5), 0.1, false);
        }
        while (!((lv_missionEvent == gv_missionEventCurrent))) {
            Wait(1.0, c_timeGame);
        }
        while (!(((gv_colonyShipLocations[lv_transportOfInterest].lv_state == ge_PRESETColonyShipState_Sealed) || (gv_colonyShipLocations[lv_transportOfInterest].lv_state == ge_PRESETColonyShipState_Exhausted) || ((gv_colonyShipLocations[lv_transportOfInterest].lv_tankUIState[(ge_ColonyShipUIState_Panic)] == false) && (gv_colonyShipLocations[lv_transportOfInterest].lv_tankUIState[(ge_ColonyShipUIState_TargetedByClaimers)] == false) && (gv_colonyShipLocations[lv_transportOfInterest].lv_tankUIState[(ge_ColonyShipUIState_TargetOfInfestedHoldout)] == false))))) {
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateColonyShipPings_Init () {
    gt_CreateColonyShipPings = TriggerCreate("gt_CreateColonyShipPings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Progression
//--------------------------------------------------------------------------------------------------
bool gt_MissionProgression_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_missionEventTimer, c_timerDurationInfinite, false, c_timeAI);
    gf_RunMissionEvent(gt_PANICEvent, (3.75 * 60.0));
    gf_RunMissionEvent(gt_BASEAttack02, (6.5 * 60.0));
    gf_RunMissionEvent(gt_CLAIMERWaveSmall, (8.0 * 60.0));
    gf_RunMissionEvent(gt_BonusObjectiveStartA, (9.0 * 60.0));
    gf_RunMissionEvent(gt_PANICEvent, (12.0 * 60.0));
    gf_RunMissionEvent(gt_BASEAttack03, (13.0 * 60.0));
    gf_RunMissionEvent(gt_BonusObjectiveStartB, (15.0 * 60.0));
    gf_RunMissionEvent(gt_CLAIMERWaveMedium, (15.2 * 60.0));
    gf_RunMissionEvent(gt_PANICEvent, (16.5 * 60.0));
    gf_RunMissionEvent(gt_BASEAttack04, (17.5 * 60.0));
    gf_RunMissionEvent(gt_CLAIMERWaveSmall, (19.3 * 60.0));
    gf_RunMissionEvent(gt_CLAIMERWaveSmall, (19.4 * 60.0));
    gf_RunMissionEvent(gt_BASEAttack05, (23.0 * 60.0));
    gf_RunMissionEvent(gt_PANICEvent, (23.5 * 60.0));
    gf_RunMissionEvent(gt_CLAIMERWaveLarge, (26.0 * 60.0));
    gf_RunMissionEvent(gt_BASEAttack06, (26.5 * 60.0));
    gf_RunMissionEvent(gt_PANICEvent, (27.0 * 60.0));
    gf_RunMissionEvent(gt_BASEAttack07, (28.0 * 60.0));
    gf_RunMissionEvent(gt_PANICEvent, (29.0 * 60.0));
    gf_RunMissionEvent(gt_PANICEvent, (29.5 * 60.0));
    gf_RunMissionEvent(gt_BASEAttack07, (32.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionProgression_Init () {
    gt_MissionProgression = TriggerCreate("gt_MissionProgression_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable AI Infested Banshee Cloak
//--------------------------------------------------------------------------------------------------
bool gt_EnableAIInfestedBansheeCloak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto27CCCAEE_g;
    int auto27CCCAEE_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto27CCCAEE_g = gv_enemyPlayers;
    auto27CCCAEE_var = -1;
    while (true) {
        auto27CCCAEE_var = PlayerGroupNextPlayer(auto27CCCAEE_g, auto27CCCAEE_var);
        if (auto27CCCAEE_var < 0) { break; }
        TechTreeAbilityAllow(auto27CCCAEE_var, AbilityCommand("InfestedBansheeCloakingField", 0), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableAIInfestedBansheeCloak_Init () {
    gt_EnableAIInfestedBansheeCloak = TriggerCreate("gt_EnableAIInfestedBansheeCloak_Func");
    TriggerAddEventTimer(gt_EnableAIInfestedBansheeCloak, gv_enableAIInfestedBansheeCloak);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Come Down Ramp
//--------------------------------------------------------------------------------------------------
bool gt_InfestedComeDownRamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0782E754_g;
    int auto0782E754_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0782E754_g = libCOMI_gf_HumanPlayers();
    auto0782E754_var = -1;
    while (true) {
        auto0782E754_var = PlayerGroupNextPlayer(auto0782E754_g, auto0782E754_var);
        if (auto0782E754_var < 0) { break; }
        if ((UnitGroupCount(UnitGroup(null, auto0782E754_var, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            break;
        }

        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionGetCenter(RegionFromId(37)));
    AIAttackWaveSetTargetPoint(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionGetCenter(RegionFromId(37)));
    AIAttackWaveUseGroup(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitGroup(null, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, RegionFromId(37), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, 10, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedComeDownRamp_Init () {
    gt_InfestedComeDownRamp = TriggerCreate("gt_InfestedComeDownRamp_Func");
    TriggerAddEventTimePeriodic(gt_InfestedComeDownRamp, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Never Take Me Alive! Q
//--------------------------------------------------------------------------------------------------
bool gt_NeverTakeMeAliveQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    playergroup autoCFE3E97D_g;
    int autoCFE3E97D_var;
    playergroup auto3B8CAB5A_g;
    int auto3B8CAB5A_var;
    unitgroup auto6138109D_g;
    int auto6138109D_u;
    unit auto6138109D_var;

    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(792)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCFE3E97D_g = libCOMI_gf_HumanPlayers();
    autoCFE3E97D_var = -1;
    while (true) {
        autoCFE3E97D_var = PlayerGroupNextPlayer(autoCFE3E97D_g, autoCFE3E97D_var);
        if (autoCFE3E97D_var < 0) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitFromId(792), autoCFE3E97D_var) == true)) {
            break;
        }

        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(792)), 3.0, Color(100.00, 100.00, 0.00));
    auto3B8CAB5A_g = libCOMI_gf_HumanPlayers();
    auto3B8CAB5A_var = -1;
    while (true) {
        auto3B8CAB5A_var = PlayerGroupNextPlayer(auto3B8CAB5A_g, auto3B8CAB5A_var);
        if (auto3B8CAB5A_var < 0) { break; }
        UIAlertPoint("Trigger", auto3B8CAB5A_var, StringExternal("Param/Value/9F26D80B"), null, UnitGetPosition(UnitFromId(792)));
        VisRevealArea(auto3B8CAB5A_var, RegionFromId(24), 6.0, false);
    }
    libCOMI_gf_ShareVisionofUnitWithHumansCoop(UnitFromId(792), true);
    UnitIssueOrder(UnitFromId(792), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(804)), c_orderQueueReplace);
    auto6138109D_g = UnitGroup(null, gv_pLAYER_06_INFESTED_BaseWavesHateToss, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6138109D_u = UnitGroupCount(auto6138109D_g, c_unitCountAll);
    for (;; auto6138109D_u -= 1) {
        auto6138109D_var = UnitGroupUnitFromEnd(auto6138109D_g, auto6138109D_u);
        if (auto6138109D_var == null) { break; }
        UnitIssueOrder(auto6138109D_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(792)), c_orderQueueReplace);
    }
    Wait(2.0, c_timeAI);
    TimerStart(lv_talkTimer, 1.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(UnitFromId(792)) == true) && (TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendTransmissionCampaign(UnitFromId(792), "acObj|Line01854", c_transmissionDurationAdd, 0.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    UnitKill(UnitFromId(792));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NeverTakeMeAliveQ_Init () {
    gt_NeverTakeMeAliveQ = TriggerCreate("gt_NeverTakeMeAliveQ_Func");
    TriggerAddEventTimePeriodic(gt_NeverTakeMeAliveQ, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aberration Surprise Q
//--------------------------------------------------------------------------------------------------
bool gt_AberrationSurpriseQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(375)) == false)) {
        return true;
    }

    if ((RandomInt(0, 100) > 33)) {
        Wait(RandomFixed(120.0, 300.0), c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    UnitKill(UnitFromId(375));
    Wait(0.5, c_timeAI);
    libNtve_gf_CreateUnitsAtPoint2(1, "InfestedAbominationBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, PointFromId(334));
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0) && (UnitIsAlive(UnitLastCreated()) == true)) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/FD294869"), null, PointFromId(334));
        UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/501DFCDB"), null, PointFromId(334));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendTransmissionCampaign(UnitLastCreated(), "acObj|Line01853", c_transmissionDurationAdd, 0.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AberrationSurpriseQ_Init () {
    gt_AberrationSurpriseQ = TriggerCreate("gt_AberrationSurpriseQ_Func");
    TriggerAddEventTimePeriodic(gt_AberrationSurpriseQ, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moving Equipment Q
//--------------------------------------------------------------------------------------------------
bool gt_MovingEquipmentQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(4), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionFromId(4), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(324)) == false)) {
        return true;
    }

    if ((RandomInt(0, 100) > 33)) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(324)), "ArmUp", "Stand Work Start", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    if ((RandomInt(0, 100) < 33)) {
        UnitIssueOrder(UnitFromId(324), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(54809096)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(324), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }

    AnimWait(libNtve_gf_MainActorofUnit(UnitFromId(324)), "ArmUp", 0.0, c_animationOffsetEnd);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(324)), "ArmUp", "Stand Work 01", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MovingEquipmentQ_Init () {
    gt_MovingEquipmentQ = TriggerCreate("gt_MovingEquipmentQ_Func");
    TriggerAddEventTimePeriodic(gt_MovingEquipmentQ, 2.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Tanks Siege Up
//--------------------------------------------------------------------------------------------------
bool gt_SiegeTanksSiegeUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto64C5BD11_g;
    int auto64C5BD11_u;
    unit auto64C5BD11_var;
    playergroup auto820C0FBB_g;
    int auto820C0FBB_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto64C5BD11_g = gv_infestedSiegeTanks;
    auto64C5BD11_u = UnitGroupCount(auto64C5BD11_g, c_unitCountAll);
    for (;; auto64C5BD11_u -= 1) {
        auto64C5BD11_var = UnitGroupUnitFromEnd(auto64C5BD11_g, auto64C5BD11_u);
        if (auto64C5BD11_var == null) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(auto64C5BD11_var)) == false)) {
            auto820C0FBB_g = libCOMI_gf_HumanPlayers();
            auto820C0FBB_var = -1;
            while (true) {
                auto820C0FBB_var = PlayerGroupNextPlayer(auto820C0FBB_g, auto820C0FBB_var);
                if (auto820C0FBB_var < 0) { break; }
                if ((UnitCount(null, auto820C0FBB_var, RegionCircle(UnitGetPosition(auto64C5BD11_var), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) == 1)) {
                    UnitIssueOrder(auto64C5BD11_var, Order(AbilityCommand("NovaInfestedSiegeTankRoot", 0)), c_orderQueueReplace);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiegeTanksSiegeUp_Init () {
    gt_SiegeTanksSiegeUp = TriggerCreate("gt_SiegeTanksSiegeUp_Func");
    TriggerAddEventTimePeriodic(gt_SiegeTanksSiegeUp, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effort Value
//--------------------------------------------------------------------------------------------------
bool gt_EffortValue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2BB706E7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2BB706E7_val = gv_objectiveExtractColonyShipCount;
    if (auto2BB706E7_val == 1) {
        libCOMI_gf_SetMissionEffort(20.0);
    }
    else if (auto2BB706E7_val == 2) {
        libCOMI_gf_SetMissionEffort(40.0);
    }
    else if (auto2BB706E7_val == 3) {
        libCOMI_gf_SetMissionEffort(60.0);
    }
    else if (auto2BB706E7_val == 4) {
        libCOMI_gf_SetMissionEffort(80.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EffortValue_Init () {
    gt_EffortValue = TriggerCreate("gt_EffortValue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters ColonyShip Beacon
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersColonyShipBeacon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    int lv_tankIter;
    unitfilter lv_eventInitiationUnitFilter;
    timer lv_colonyShipCaptureTimer;
    unitgroup lv_capturingPlayerUnits;

    // Automatic Variable Declarations
    int auto5C9D9D58_ae;
    const int auto5C9D9D58_ai = 1;
    playergroup auto3DFB8766_g;
    int auto3DFB8766_var;

    // Variable Initialization
    lv_eventInitiationUnitFilter = UnitFilter(0, 0, 0, 0);
    lv_colonyShipCaptureTimer = TimerCreate();
    lv_capturingPlayerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eventInitiationUnitFilter = UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    auto5C9D9D58_ae = gv_colonyShipLocationsCount;
    lv_tankIter = 1;
    for ( ; ( (auto5C9D9D58_ai >= 0 && lv_tankIter <= auto5C9D9D58_ae) || (auto5C9D9D58_ai < 0 && lv_tankIter >= auto5C9D9D58_ae) ) ; lv_tankIter += auto5C9D9D58_ai ) {
        auto3DFB8766_g = libCOMI_gf_HumanPlayers();
        auto3DFB8766_var = -1;
        while (true) {
            auto3DFB8766_var = PlayerGroupNextPlayer(auto3DFB8766_g, auto3DFB8766_var);
            if (auto3DFB8766_var < 0) { break; }
            if ((gv_colonyShipLocations[lv_tankIter].lv_state == ge_PRESETColonyShipState_Available) && (gv_colonyShipLocations[lv_tankIter].lv_beaconState == ge_PRESETColonyShipBeaconState_Idle) && (UnitGroupCount(UnitGroup(null, auto3DFB8766_var, gv_colonyShipLocations[lv_tankIter].lv_beaconRegion, lv_eventInitiationUnitFilter, 1), c_unitCountAlive) > 0)) {
                lv_colonyShipIndex = lv_tankIter;
                break;
            }

        }
        if ((lv_colonyShipIndex != 0)) {
            break;
        }

    }
    if ((lv_colonyShipIndex == 0)) {
        return true;
    }

    TimerStart(lv_colonyShipCaptureTimer, 10.0, false, c_timeGame);
    gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconState = ge_PRESETColonyShipBeaconState_Capturing;
    libCOMI_gf_SetUnitProgressBarValueRange(gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconUnit, 0, FixedToInt(TimerGetDuration(lv_colonyShipCaptureTimer)));
    libCOMI_gf_ShowHideUnitProgressBar(gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconUnit, true);
    while (true) {
        lv_capturingPlayerUnits = UnitGroupAlliance(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, c_unitAllianceEnemy, gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconRegion, lv_eventInitiationUnitFilter, 0);
        libCOMI_gf_SetUnitProgressBarProgress2(gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconUnit, FixedToInt(TimerGetRemaining(lv_colonyShipCaptureTimer)));
        libCOMI_gf_SetUnitProgressBarProgress(gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconUnit, FixedToInt(TimerGetRemaining(lv_colonyShipCaptureTimer)));
        if (((TimerGetRemaining(lv_colonyShipCaptureTimer) <= 0.0) || (UnitGroupCount(lv_capturingPlayerUnits, c_unitCountAlive) <= 0))) {
            break;
        }

        Wait(0.5, c_timeGame);
    }
    if ((UnitGroupCount(lv_capturingPlayerUnits, c_unitCountAlive) <= 0)) {
        gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconState = ge_PRESETColonyShipBeaconState_Idle;
        libCOMI_gf_ShowHideUnitProgressBar(gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconUnit, false);
        return true;
    }

    gf_LaunchColonyShip(lv_colonyShipIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersColonyShipBeacon_Init () {
    gt_PlayerEntersColonyShipBeacon = TriggerCreate("gt_PlayerEntersColonyShipBeacon_Func");
    TriggerAddEventTimePeriodic(gt_PlayerEntersColonyShipBeacon, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Initiates Launching Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInitiatesLaunchingTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    int lv_concurrentTanksLaunchingCount;

    // Automatic Variable Declarations
    const int autoE9C99AAE_ae = gv_c_ColonyShip_MaxCount;
    const int autoE9C99AAE_ai = 1;
    int autoCEEC0A02_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyShipIndex = 1;
    for ( ; ( (autoE9C99AAE_ai >= 0 && lv_colonyShipIndex <= autoE9C99AAE_ae) || (autoE9C99AAE_ai < 0 && lv_colonyShipIndex >= autoE9C99AAE_ae) ) ; lv_colonyShipIndex += autoE9C99AAE_ai ) {
        if ((gv_colonyShipLocations[lv_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Working) && (gv_colonyShipLocations[lv_colonyShipIndex].lv_tankUIState[(ge_ColonyShipUIState_Panic)] == false)) {
            lv_concurrentTanksLaunchingCount += 1;
        }

    }
    autoCEEC0A02_val = lv_concurrentTanksLaunchingCount;
    if (autoCEEC0A02_val == 0) {
    }
    else if (autoCEEC0A02_val == 1) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        if ((gv_objectiveExtractColonyShipCount == (gv_objectiveExtractColonyShipMax - 1))) {
            libCOMI_gf_SendMissionTransmission("ProgressFinalJC", true, -1);
        }
        else if ((gv_colonyShipLaunchTransmissionInitial == true)) {
            gv_colonyShipLaunchTransmissionInitial = false;
            libCOMI_gf_SendMissionTransmission("CaptureStartFirstJC", true, -1);
            SoundPlayForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else if (true) {
            libCOMI_gf_SendMissionTransmission("CaptureStartRepeatJC", true, -1);
            SoundPlayForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("CaptureMultiJC", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInitiatesLaunchingTransmissionQ_Init () {
    gt_PlayerInitiatesLaunchingTransmissionQ = TriggerCreate("gt_PlayerInitiatesLaunchingTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShip Attacked Warning
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipAttackedWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_c_ColonyShipObjective))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_enemyPlayers, UnitGetOwner(EventUnitTarget())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyShipIndex = gf_GetColonyShipIndexFromTankUnit(EventUnit());
    if ((lv_colonyShipIndex == 0) && ((gv_colonyShipLocations[lv_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Exhausted) || (gv_colonyShipLocations[lv_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Sealed))) {
        return true;
    }

    if ((gv_colonyShipLocations[lv_colonyShipIndex].lv_tankUIState[ge_ColonyShipUIState_UnderAttack] == true)) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) > 45.0)) {
        if ((PlayerGroupHasPlayer(gv_zergPlayers, UnitGetOwner(EventUnitTarget())) == true)) {
            TriggerExecute(gt_ColonyShipAttackedWarningInfesetedTransmissionQ, true, false);
        }
        else {
            TriggerExecute(gt_ColonyShipAttackedWarningAmonTransmissionQ, true, false);
        }
    }
    else {
        if ((PlayerGroupHasPlayer(gv_zergPlayers, UnitGetOwner(EventUnitTarget())) == true)) {
            TriggerExecute(gt_ColonyShipLowLifeWarningInfesetedTransmissionQ, true, false);
        }
        else {
            TriggerExecute(gt_ColonyShipLowLifeWarningAmonTransmissionQ, true, false);
        }
    }
    gf_SetColonyShipUIState(lv_colonyShipIndex, ge_ColonyShipUIState_UnderAttack, true);
    Wait(6.0, c_timeGame);
    gf_SetColonyShipUIState(lv_colonyShipIndex, ge_ColonyShipUIState_UnderAttack, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipAttackedWarning_Init () {
    gt_ColonyShipAttackedWarning = TriggerCreate("gt_ColonyShipAttackedWarning_Func");
    TriggerAddEventUnitAttacked2(gt_ColonyShipAttackedWarning, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShip Attacked Warning Infeseted Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipAttackedWarningInfesetedTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("CaptureUnderAttackJC", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipAttackedWarningInfesetedTransmissionQ_Init () {
    gt_ColonyShipAttackedWarningInfesetedTransmissionQ = TriggerCreate("gt_ColonyShipAttackedWarningInfesetedTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShip Attacked Warning Amon Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipAttackedWarningAmonTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(lv_talkTimer, 2.0, false, c_timeGame);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("AttackNowJC", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipAttackedWarningAmonTransmissionQ_Init () {
    gt_ColonyShipAttackedWarningAmonTransmissionQ = TriggerCreate("gt_ColonyShipAttackedWarningAmonTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShip Low Life Warning Infeseted Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipLowLifeWarningInfesetedTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("CaptureAlmostDeadJC", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipLowLifeWarningInfesetedTransmissionQ_Init () {
    gt_ColonyShipLowLifeWarningInfesetedTransmissionQ = TriggerCreate("gt_ColonyShipLowLifeWarningInfesetedTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShip Low Life Warning Amon Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipLowLifeWarningAmonTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    timer lv_talkTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((TimerGetRemaining(lv_talkTimer) > 0.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("AttackNowJC", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipLowLifeWarningAmonTransmissionQ_Init () {
    gt_ColonyShipLowLifeWarningAmonTransmissionQ = TriggerCreate("gt_ColonyShipLowLifeWarningAmonTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShip Is Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipIsDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    fixed lv_timerTime;
    revealer[3] lv_deathReveal;
    revealer lv_deathReveal_P2;

    // Automatic Variable Declarations
    playergroup auto9231907E_g;
    int auto9231907E_var;
    unitgroup autoD7D5EE58_g;
    int autoD7D5EE58_u;
    unit autoD7D5EE58_var;
    playergroup autoF4B43A89_g;
    int autoF4B43A89_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_c_ColonyShipObjective))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_colonyShipIndex = gf_GetColonyShipIndexFromTankUnit(EventUnit());
    gf_RemoveActivationBeacon(gv_colonyShipLocations[lv_colonyShipIndex].lv_beaconUnit);
    gv_colonyShipsDestroyedCount += 1;
    if (((lv_colonyShipIndex == 0) || (gv_colonyShipLocations[lv_colonyShipIndex].lv_state == ge_PRESETColonyShipState_Exhausted))) {
        return true;
    }

    auto9231907E_g = libCOMI_gf_HumanPlayers();
    auto9231907E_var = -1;
    while (true) {
        auto9231907E_var = PlayerGroupNextPlayer(auto9231907E_g, auto9231907E_var);
        if (auto9231907E_var < 0) { break; }
        libCOMI_gf_CreateRevealerCoop(auto9231907E_var, RegionCircle(UnitGetPosition(EventUnit()), 6.0));
        lv_deathReveal[auto9231907E_var] = VisRevealerLastCreated();
    }
    gf_SetColonyShipUIState(lv_colonyShipIndex, ge_ColonyShipUIState_SealedUI, true);
    gv_colonyShipLocations[lv_colonyShipIndex].lv_state = ge_PRESETColonyShipState_Sealed;
    autoD7D5EE58_g = gv_infestedRageWaveUnits;
    autoD7D5EE58_u = UnitGroupCount(autoD7D5EE58_g, c_unitCountAll);
    for (;; autoD7D5EE58_u -= 1) {
        autoD7D5EE58_var = UnitGroupUnitFromEnd(autoD7D5EE58_g, autoD7D5EE58_u);
        if (autoD7D5EE58_var == null) { break; }
        if ((UnitGetCustomValue(autoD7D5EE58_var, 0) == lv_colonyShipIndex)) {
            gf_BurrowAndRemoveInfestedWaveUnit(autoD7D5EE58_var);
        }

    }
    gv_objectiveDoNotLetDevicesBeDestroyed += 1;
    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate, true, false);
    if ((gv_objectiveDoNotLetDevicesBeDestroyed >= gv_objectiveDoNotLetDevicesBeDestroyedMax)) {
        gv_defeatLocation = UnitGetPosition(EventUnit());
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
        return true;
    }

    TriggerExecute(gt_ColonyShipsDestroyedWarningQ, true, false);
    Wait(2.0, c_timeGame);
    autoF4B43A89_g = libCOMI_gf_HumanPlayers();
    autoF4B43A89_var = -1;
    while (true) {
        autoF4B43A89_var = PlayerGroupNextPlayer(autoF4B43A89_g, autoF4B43A89_var);
        if (autoF4B43A89_var < 0) { break; }
        libCOMI_gf_DestroyRevealerCoop(lv_deathReveal[autoF4B43A89_var]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipIsDestroyed_Init () {
    gt_ColonyShipIsDestroyed = TriggerCreate("gt_ColonyShipIsDestroyed_Func");
    TriggerAddEventUnitDied(gt_ColonyShipIsDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShips Destroyed Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipsDestroyedWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto075B2621_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto075B2621_val = (gv_objectiveDoNotLetDevicesBeDestroyedMax - gv_objectiveDoNotLetDevicesBeDestroyed);
    if (auto075B2621_val == 2) {
        libCOMI_gf_SendMissionTransmission("FailureFirstJC", true, -1);
    }
    else if (auto075B2621_val == 1) {
        libCOMI_gf_SendMissionTransmission("FailureFinalJC", true, -1);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipsDestroyedWarningQ_Init () {
    gt_ColonyShipsDestroyedWarningQ = TriggerCreate("gt_ColonyShipsDestroyedWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ColonyShips Objective Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_ColonyShipsObjectiveReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_objectiveExtractColonyShipCount == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_colonyShipReminderTransmissionCount == 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gv_colonyShipReminderTransmissionCount += 1;
    libCOMI_gf_SendMissionTransmission("CaptureMoveOutJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColonyShipsObjectiveReminderQ_Init () {
    gt_ColonyShipsObjectiveReminderQ = TriggerCreate("gt_ColonyShipsObjectiveReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force ColonyShip Setup
//--------------------------------------------------------------------------------------------------
bool gt_ForceColonyShipSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forceStartIter;

    // Automatic Variable Declarations
    int auto58C8E1D8_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_forceStartIter += 1;
    gv_forceStartOrder[lv_forceStartIter] = 1;
    lv_forceStartIter += 1;
    gv_forceStartOrder[lv_forceStartIter] = 3;
    auto58C8E1D8_val = RandomInt(0, 3);
    if (auto58C8E1D8_val == 0) {
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 2;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 5;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 6;
    }
    else if (auto58C8E1D8_val == 1) {
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 2;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 6;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 5;
    }
    else if (auto58C8E1D8_val == 2) {
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 5;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 2;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 6;
    }
    else {
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 6;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 2;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 5;
    }
    if ((RandomInt(0, 1) == 1)) {
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 4;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 9;
    }
    else {
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 9;
        lv_forceStartIter += 1;
        gv_forceStartOrder[lv_forceStartIter] = 4;
    }
    lv_forceStartIter += 1;
    gv_forceStartOrder[lv_forceStartIter] = 8;
    lv_forceStartIter += 1;
    gv_forceStartOrder[lv_forceStartIter] = 7;
    TriggerExecute(gt_ForceColonyShipUpdateIndex, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceColonyShipSetup_Init () {
    gt_ForceColonyShipSetup = TriggerCreate("gt_ForceColonyShipSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force ColonyShip Update Index
//--------------------------------------------------------------------------------------------------
bool gt_ForceColonyShipUpdateIndex_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        gv_forceStartNextIndex = gf_PanicShuttleNextIndex();
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceColonyShipUpdateIndex_Init () {
    gt_ForceColonyShipUpdateIndex = TriggerCreate("gt_ForceColonyShipUpdateIndex_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PANIC Event
//--------------------------------------------------------------------------------------------------
bool gt_PANICEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forceStartIter;
    int lv_forceStartIndex;
    int lv_forceStartTank;
    timer lv_forceStartWarning;
    unit lv_progressBarUnit;
    int lv_objectiveInprogressCount;

    // Automatic Variable Declarations
    const int autoA5A74F0E_ae = gv_c_ColonyShip_MaxCount;
    int autoA5A74F0E_var;

    // Variable Initialization
    lv_forceStartWarning = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_panicEventCount += 1;
    autoA5A74F0E_var = 1;
    for ( ; autoA5A74F0E_var <= autoA5A74F0E_ae; autoA5A74F0E_var += 1 ) {
        if (((gv_colonyShipLocations[autoA5A74F0E_var].lv_state == ge_PRESETColonyShipState_Working) || (gv_colonyShipLocations[autoA5A74F0E_var].lv_tankUIState[(ge_ColonyShipUIState_Panic)] == true))) {
            lv_objectiveInprogressCount += 1;
        }

    }
    if ((gv_panicEventCount <= ((gv_objectiveExtractColonyShipCount + lv_objectiveInprogressCount) + gv_colonyShipsDestroyedCount))) {
        return true;
    }

    lv_forceStartTank = gf_PanicShuttleNextIndex();
    if ((lv_forceStartTank == -1)) {
        return true;
    }

    gf_RemoveActivationBeacon(gv_colonyShipLocations[lv_forceStartTank].lv_beaconUnit);
    TriggerExecute(gt_ForceColonyShipWarningTransmissionQ, true, false);
    TimerStart(gv_colonyShipLocations[lv_forceStartTank].lv_forceStartTimer, 60.0, false, c_timeGame);
    gf_SetColonyShipUIState(lv_forceStartTank, ge_ColonyShipUIState_Panic, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarWideDummy", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_colonyShipLocations[lv_forceStartTank].lv_colonyShipUnit));
    lv_progressBarUnit = UnitLastCreated();
    UnitSetHeight(lv_progressBarUnit, 2.0, 0.0);
    libCOMI_gf_DisplayUnitProgressBar(lv_progressBarUnit, StringExternal("Param/Value/21720A7E"), 0, FixedToInt((TimerGetRemaining(gv_colonyShipLocations[lv_forceStartTank].lv_forceStartTimer) + gv_c_ColonyShipHoldoutTime)));
    libCOMI_gf_SetUnitProgressBarIsWideBar(lv_progressBarUnit, true);
    libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, FixedToInt(TimerGetDuration(gv_colonyShipLocations[lv_forceStartTank].lv_forceStartTimer)));
    libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, FixedToInt(TimerGetDuration(gv_colonyShipLocations[lv_forceStartTank].lv_forceStartTimer)));
    while ((gv_colonyShipLocations[lv_forceStartTank].lv_state == ge_PRESETColonyShipState_Available) && (TimerGetRemaining(gv_colonyShipLocations[lv_forceStartTank].lv_forceStartTimer) > 0.0)) {
        libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, FixedToInt((TimerGetRemaining(gv_colonyShipLocations[lv_forceStartTank].lv_forceStartTimer) + gv_c_ColonyShipHoldoutTime)));
        libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, FixedToInt((TimerGetRemaining(gv_colonyShipLocations[lv_forceStartTank].lv_forceStartTimer) + gv_c_ColonyShipHoldoutTime)));
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_ShowHideUnitProgressBar(lv_progressBarUnit, false);
    UnitRemove(lv_progressBarUnit);
    if ((gv_colonyShipLocations[lv_forceStartTank].lv_state == ge_PRESETColonyShipState_Available)) {
        TriggerExecute(gt_ForceColonyShipInitiatingTransmissionQ, true, false);
        gf_LaunchColonyShip(lv_forceStartTank);
    }

    gf_SetColonyShipUIState(lv_forceStartTank, ge_ColonyShipUIState_Panic, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PANICEvent_Init () {
    gt_PANICEvent = TriggerCreate("gt_PANICEvent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force ColonyShip Warning Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ForceColonyShipWarningTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_forceStartWarningFirst == false)) {
        gv_forceStartWarningFirst = true;
        libCOMI_gf_SendMissionTransmission("CaptureAutoWarnFirstJC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("CaptureAutoWarnRepeatJC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceColonyShipWarningTransmissionQ_Init () {
    gt_ForceColonyShipWarningTransmissionQ = TriggerCreate("gt_ForceColonyShipWarningTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force ColonyShip Initiating Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ForceColonyShipInitiatingTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_forceStartInitiatingFirst == false)) {
        gv_forceStartInitiatingFirst = true;
        libCOMI_gf_SendMissionTransmission("CaptureAutoStartFirstJC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("CaptureAutoStartRepeatJC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceColonyShipInitiatingTransmissionQ_Init () {
    gt_ForceColonyShipInitiatingTransmissionQ = TriggerCreate("gt_ForceColonyShipInitiatingTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Start A
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveStartA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bonusObjective_MineFirst == true)) {
        TriggerExecute(gt_BonusObjectiveRevealMinesQ, true, false);
    }
    else {
        TriggerExecute(gt_BonusObjectiveRevealScienceFacilityQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveStartA_Init () {
    gt_BonusObjectiveStartA = TriggerCreate("gt_BonusObjectiveStartA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Start B
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveStartB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bonusObjective_MineFirst == true)) {
        TriggerExecute(gt_BonusObjectiveRevealScienceFacilityQ, true, false);
    }
    else {
        TriggerExecute(gt_BonusObjectiveRevealMinesQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveStartB_Init () {
    gt_BonusObjectiveStartB = TriggerCreate("gt_BonusObjectiveStartB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Reveal Mines Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRevealMinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9EB4A069_g;
    int auto9EB4A069_var;
    playergroup auto5ECF158C_g;
    int auto5ECF158C_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_bonusObjective_FailedMines == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveProximityMines, false);
    TriggerQueueEnter();
    auto9EB4A069_g = libCOMI_gf_HumanPlayers();
    auto9EB4A069_var = -1;
    while (true) {
        auto9EB4A069_var = PlayerGroupNextPlayer(auto9EB4A069_g, auto9EB4A069_var);
        if (auto9EB4A069_var < 0) { break; }
        UIAlertPoint("Trigger", auto9EB4A069_var, StringExternal("Param/Value/44D60041"), null, PointFromId(1152563932));
    }
    TriggerExecute(gt_ObjectiveExploreUmojanMineKillBlightbringerCreate, true, true);
    TriggerExecute(gt_BonusObjectiveBlightbringerStart, true, false);
    TimerStart(gv_bonusObjective_BlightbringerExpire, 360.0, false, c_timeAI);
    TriggerExecute(gt_BonusObjectiveBlightbringerTimerUpdate, true, false);
    auto5ECF158C_g = libCOMI_gf_HumanPlayers();
    auto5ECF158C_var = -1;
    while (true) {
        auto5ECF158C_var = PlayerGroupNextPlayer(auto5ECF158C_g, auto5ECF158C_var);
        if (auto5ECF158C_var < 0) { break; }
        VisRevealArea(auto5ECF158C_var, RegionFromId(90), 12.0, false);
    }
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, PointFromId(1152563932), StringExternal("Param/Value/11B1338E"));
    libHots_gf_StorePingForUnit(gv_c_BonusObjective_Blightbringer, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), gv_c_BonusObjective_Blightbringer);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusLocatedFirstJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRevealMinesQ_Init () {
    gt_BonusObjectiveRevealMinesQ = TriggerCreate("gt_BonusObjectiveRevealMinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Proximity Mines
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveProximityMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto22D29C4A_g;
    int auto22D29C4A_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto22D29C4A_g = libCOMI_gf_HumanPlayers();
    auto22D29C4A_var = -1;
    while (true) {
        auto22D29C4A_var = PlayerGroupNextPlayer(auto22D29C4A_g, auto22D29C4A_var);
        if (auto22D29C4A_var < 0) { break; }
        if ((UnitGroupCount(UnitGroup(null, auto22D29C4A_var, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            break;
        }

        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveRevealMinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveProximityMines_Init () {
    gt_BonusObjectiveProximityMines = TriggerCreate("gt_BonusObjectiveProximityMines_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveProximityMines, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Reveal Science Facility Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRevealScienceFacilityQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0591BCA1_g;
    int auto0591BCA1_var;
    playergroup auto7811E6AA_g;
    int auto7811E6AA_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveProximityRevealScienceFacility, false);
    TriggerExecute(gt_BonusObjectiveCoopStartScienceFacility, true, false);
    TriggerQueueEnter();
    auto0591BCA1_g = libCOMI_gf_HumanPlayers();
    auto0591BCA1_var = -1;
    while (true) {
        auto0591BCA1_var = PlayerGroupNextPlayer(auto0591BCA1_g, auto0591BCA1_var);
        if (auto0591BCA1_var < 0) { break; }
        UIAlertPoint("Trigger", auto0591BCA1_var, StringExternal("Param/Value/6D06812E"), null, RegionGetCenter(RegionFromId(78)));
    }
    TriggerExecute(gt_ObjectiveExploreScienceFacilityDestroyCreate, true, true);
    auto7811E6AA_g = libCOMI_gf_HumanPlayers();
    auto7811E6AA_var = -1;
    while (true) {
        auto7811E6AA_var = PlayerGroupNextPlayer(auto7811E6AA_g, auto7811E6AA_var);
        if (auto7811E6AA_var < 0) { break; }
        VisRevealArea(auto7811E6AA_var, RegionFromId(92), 2.0, false);
    }
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(1340)), StringExternal("Param/Value/E30664D3"));
    libHots_gf_StorePingForUnit(UnitFromId(1340), 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), UnitFromId(1340));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(895)), StringExternal("Param/Value/90E500F4"));
    libHots_gf_StorePingForUnit(UnitFromId(895), 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), UnitFromId(895));
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusLocatedSecondJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRevealScienceFacilityQ_Init () {
    gt_BonusObjectiveRevealScienceFacilityQ = TriggerCreate("gt_BonusObjectiveRevealScienceFacilityQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Proximity Reveal Science Facility
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveProximityRevealScienceFacility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5E77BCAA_g;
    int auto5E77BCAA_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5E77BCAA_g = libCOMI_gf_HumanPlayers();
    auto5E77BCAA_var = -1;
    while (true) {
        auto5E77BCAA_var = PlayerGroupNextPlayer(auto5E77BCAA_g, auto5E77BCAA_var);
        if (auto5E77BCAA_var < 0) { break; }
        if ((UnitGroupCount(UnitGroup(null, auto5E77BCAA_var, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            break;
        }

        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveRevealScienceFacilityQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveProximityRevealScienceFacility_Init () {
    gt_BonusObjectiveProximityRevealScienceFacility = TriggerCreate("gt_BonusObjectiveProximityRevealScienceFacility_Func");
    TriggerAddEventTimePeriodic(gt_BonusObjectiveProximityRevealScienceFacility, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Collected Mines Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCollectedMinesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteFirstJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCollectedMinesQ_Init () {
    gt_BonusObjectiveCollectedMinesQ = TriggerCreate("gt_BonusObjectiveCollectedMinesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Collected Facility Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCollectedFacilityQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_bonusObjective_EventFinished = true;
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteSecondJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCollectedFacilityQ_Init () {
    gt_BonusObjectiveCollectedFacilityQ = TriggerCreate("gt_BonusObjectiveCollectedFacilityQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Start
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_bonusObjective_FailedMines == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_bonusObjective_BlightbringerActive = true;
    TriggerExecute(gt_ObjectiveExploreUmojanMineKillBlightbringerCreate, true, false);
    libCOMI_gf_DestroyPingCoop(gv_bonusObjective_BlightbringerExplorePing);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_c_BonusObjective_Blightbringer, null, StringExternal("Param/Value/D048DB5E"), null);
    libNtve_gf_PauseUnit(gv_c_BonusObjective_Blightbringer, false);
    libNtve_gf_ShowHideUnit(gv_c_BonusObjective_Blightbringer, true);
    UnitSetState(gv_c_BonusObjective_Blightbringer, c_unitStateTargetable, false);
    UnitSetState(gv_c_BonusObjective_Blightbringer, c_unitStateInvulnerable, true);
    UnitIssueOrder(gv_c_BonusObjective_Blightbringer, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1152563932)), c_orderQueueReplace);
    TriggerExecute(gt_BonusObjectiveBlightbringerBattleAI, true, false);
    Wait(5.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerStart_Init () {
    gt_BonusObjectiveBlightbringerStart = TriggerCreate("gt_BonusObjectiveBlightbringerStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Battle AI
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerBattleAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_attackTimer;
    timer lv_attackGroundTimer;
    timer lv_attackAirTimer;
    unit lv_attackAirTarget;
    int lv_layEggsIndex;
    timer lv_layEggsTimer;
    fixed lv_layEggsCooldown;
    fixed lv_layEggsCooldownEnraged;
    int lv_layEggsCooldownEnragedIter;
    unitgroup lv_enemiesNearby;

    // Automatic Variable Declarations
    const int auto060C7B26_n = 7;
    int auto060C7B26_i;
    int autoC371A2AF_n;
    int autoC371A2AF_i;
    int auto12B683AE_n;
    int auto12B683AE_i;
    int autoC65E6B59_n;
    int autoC65E6B59_i;
    int auto9A2057DD_val;
    unitgroup auto2D8D160F_g;
    int auto2D8D160F_u;
    unit auto2D8D160F_var;

    // Variable Initialization
    lv_attackTimer = TimerCreate();
    lv_attackGroundTimer = TimerCreate();
    lv_attackAirTimer = TimerCreate();
    lv_layEggsTimer = TimerCreate();
    lv_enemiesNearby = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_layEggsCooldown = libCOMI_gf_MinimumDifficultyValueCoopReal(12.0, 12.0, 10.0, 9.0, 0.0, 0.0);
    lv_layEggsCooldownEnraged = libCOMI_gf_MinimumDifficultyValueCoopReal(8.0, 8.0, 5.0, 4.0, 0.0, 0.0);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand2) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "0", c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand9) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "0", c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand11) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "0", c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand6) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "0", c_upgradeOperationSet);
    Wait(2.0, c_timeAI);
    UnitSetState(gv_c_BonusObjective_Blightbringer, c_unitStateTargetable, true);
    UnitSetState(gv_c_BonusObjective_Blightbringer, c_unitStateInvulnerable, false);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand2) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "1", c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand9) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "1", c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand11) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "1", c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "Blightbringer", "Collide[" + IntToString(c_unitCollideLand6) + "]", UnitGetOwner(gv_c_BonusObjective_Blightbringer), "1", c_upgradeOperationSet);
    TimerStart(lv_layEggsTimer, 3.0, false, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_c_BonusObjective_Blightbringer) == true)) {
        lv_enemiesNearby = UnitGroupAlliance(UnitGetOwner(gv_c_BonusObjective_Blightbringer), c_unitAllianceEnemy, RegionFromId(79), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) > 0)) {
            if ((TimerGetRemaining(lv_layEggsTimer) <= 0.0)) {
                if (lv_layEggsIndex >= 5) {
                    lv_layEggsIndex = 1;
                }
                else {
                    lv_layEggsIndex = lv_layEggsIndex + 1;
                }
                gf_BonusObjectiveBlightbringerMoveToNewEggSpot(gv_c_BonusObjective_Blightbringer, PointFromName(("BO Blightbringer Eggs Stand 0" + IntToString(lv_layEggsIndex))));
                for (auto060C7B26_i = 1; auto060C7B26_i <= auto060C7B26_n; auto060C7B26_i += 1) {
                    gf_BonusObjectiveBlightbringerEgg(gv_c_BonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                }
                gf_BonusObjectiveBlightbringerEgg(gv_c_BonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), true);
                autoC371A2AF_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 2, 0, 0, 0);
                for (autoC371A2AF_i = 1; autoC371A2AF_i <= autoC371A2AF_n; autoC371A2AF_i += 1) {
                    gf_BonusObjectiveBlightbringerEgg(gv_c_BonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex)))), false);
                }
                auto12B683AE_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 2, 0, 0);
                for (auto12B683AE_i = 1; auto12B683AE_i <= auto12B683AE_n; auto12B683AE_i += 1) {
                    gf_BonusObjectiveBlightbringerEgg(gv_c_BonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex) + " (Brutal)"))), false);
                }
                autoC65E6B59_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 0, 0);
                for (autoC65E6B59_i = 1; autoC65E6B59_i <= autoC65E6B59_n; autoC65E6B59_i += 1) {
                    gf_BonusObjectiveBlightbringerEgg(gv_c_BonusObjective_Blightbringer, RegionRandomPoint(RegionFromName(("BO Blightbringer Eggs 0" + IntToString(lv_layEggsIndex) + " (Brutal)"))), true);
                }
                if ((UnitGetPropertyFixed(gv_c_BonusObjective_Blightbringer, c_unitPropLifePercent, c_unitPropCurrent) > 40.0)) {
                    TimerStart(lv_layEggsTimer, lv_layEggsCooldown, false, c_timeGame);
                }
                else {
                    if (lv_layEggsCooldownEnragedIter >= 2) {
                        lv_layEggsCooldownEnragedIter = 1;
                    }
                    else {
                        lv_layEggsCooldownEnragedIter = lv_layEggsCooldownEnragedIter + 1;
                    }
                    auto9A2057DD_val = lv_layEggsCooldownEnragedIter;
                    if (auto9A2057DD_val == 1) {
                        TimerStart(lv_layEggsTimer, lv_layEggsCooldownEnraged, false, c_timeGame);
                    }
                    else if (auto9A2057DD_val == 2) {
                        TimerStart(lv_layEggsTimer, lv_layEggsCooldown, false, c_timeGame);
                    }
                    else {
                    }
                }
            }
            else {
                if ((TimerGetRemaining(lv_attackGroundTimer) <= 0.0)) {
                    TimerStart(lv_attackGroundTimer, gv_bonusObjective_Blightbringer_AttackGroundCD, false, c_timeGame);
                    UnitIssueOrder(gv_c_BonusObjective_Blightbringer, OrderTargetingPoint(AbilityCommand("attack", 2), UnitGetPosition(UnitGroupClosestToPoint(lv_enemiesNearby, UnitGetPosition(gv_c_BonusObjective_Blightbringer)))), c_orderQueueReplace);
                }

                if ((TimerGetRemaining(lv_attackAirTimer) <= 0.0)) {
                    TimerStart(lv_attackAirTimer, gv_bonusObjective_Blightbringer_AttackAirCD, false, c_timeGame);
                    UnitIssueOrder(gv_c_BonusObjective_Blightbringer, ParasiticBomb(3, gv_c_BonusObjective_Blightbringer, lv_enemiesNearby, null), c_orderQueueReplace);
                }

            }
        }

        auto2D8D160F_g = gv_bonusObjective_HatchedInfestedGroup;
        auto2D8D160F_u = UnitGroupCount(auto2D8D160F_g, c_unitCountAll);
        for (;; auto2D8D160F_u -= 1) {
            auto2D8D160F_var = UnitGroupUnitFromEnd(auto2D8D160F_g, auto2D8D160F_u);
            if (auto2D8D160F_var == null) { break; }
            if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) > 0)) {
                UnitIssueOrder(auto2D8D160F_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lv_enemiesNearby, c_unitCountAlive))), c_orderQueueReplace);
            }
            else {
                if ((RandomInt(0, 20) == 0)) {
                    UnitIssueOrder(auto2D8D160F_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(79))), c_orderQueueReplace);
                }

            }
        }
        if (((AIGetTime() - AILastAttack(gv_c_BonusObjective_Blightbringer)) < 3.0)) {
            TimerPause(gv_bonusObjective_BlightbringerExpire, true);
        }
        else {
            TimerPause(gv_bonusObjective_BlightbringerExpire, false);
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerBattleAI_Init () {
    gt_BonusObjectiveBlightbringerBattleAI = TriggerCreate("gt_BonusObjectiveBlightbringerBattleAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Egg Created
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerEggCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_eggUnit;
    int lv_randomInt;

    // Automatic Variable Declarations
    string autoD1A3541C_val;
    string autoBB01348F_val;
    unitgroup autoA6C93D58_g;
    int autoA6C93D58_u;
    unit autoA6C93D58_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "BlightbringerEgg") || (UnitGetType(EventUnit()) == "BlightbringerLargeEgg")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eggUnit = EventUnit();
    autoD1A3541C_val = UnitGetType(lv_eggUnit);
    if (autoD1A3541C_val == "BlightbringerEgg") {
        UnitSetPropertyFixed(lv_eggUnit, c_unitPropLifeMax, gv_bonusObjective_Blightbringer_EggSmall);
    }
    else if (autoD1A3541C_val == "BlightbringerLargeEgg") {
        UnitSetPropertyFixed(lv_eggUnit, c_unitPropLifeMax, gv_bonusObjective_Blightbringer_EggLarge);
    }
    else {
        return true;
    }
    UnitSetPropertyFixed(lv_eggUnit, c_unitPropLifePercent, 100.0);
    UnitBehaviorAdd(lv_eggUnit, "ProgressBar", lv_eggUnit, 1);
    UnitBehaviorSetDuration(lv_eggUnit, "ProgressBar", gv_bonusObjective_Blightbringer_EggHatchTime);
    UnitBehaviorSetDurationRemaining(lv_eggUnit, "ProgressBar", gv_bonusObjective_Blightbringer_EggHatchTime);
    Wait((gv_bonusObjective_Blightbringer_EggHatchTime + 0.1), c_timeAI);
    if ((UnitIsAlive(lv_eggUnit) == true)) {
        lv_randomInt = RandomInt(1, 100);
        autoBB01348F_val = UnitGetType(lv_eggUnit);
        if (autoBB01348F_val == "BlightbringerEgg") {
            if ((lv_randomInt < 50)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", c_unitCreateIgnorePlacement, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitGetPosition(lv_eggUnit));
            }
            else {
                if ((lv_randomInt < 80)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign", c_unitCreateIgnorePlacement, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitGetPosition(lv_eggUnit));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedExploder", c_unitCreateIgnorePlacement, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitGetPosition(lv_eggUnit));
                }
            }
        }
        else if (autoBB01348F_val == "BlightbringerLargeEgg") {
            if ((lv_randomInt < 50)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "InfestedTerranCampaign", c_unitCreateIgnorePlacement, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitGetPosition(lv_eggUnit));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", c_unitCreateIgnorePlacement, gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, UnitGetPosition(lv_eggUnit));
            }
        }
        else {
        }
        autoA6C93D58_g = UnitLastCreatedGroup();
        autoA6C93D58_u = UnitGroupCount(autoA6C93D58_g, c_unitCountAll);
        for (;; autoA6C93D58_u -= 1) {
            autoA6C93D58_var = UnitGroupUnitFromEnd(autoA6C93D58_g, autoA6C93D58_u);
            if (autoA6C93D58_var == null) { break; }
            UnitGroupAdd(gv_bonusObjective_HatchedInfestedGroup, autoA6C93D58_var);
            UnitSetPropertyFixed(autoA6C93D58_var, c_unitPropLifePercent, UnitGetPropertyFixed(lv_eggUnit, c_unitPropLifePercent, c_unitPropCurrent));
        }
        UnitKill(lv_eggUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerEggCreated_Init () {
    gt_BonusObjectiveBlightbringerEggCreated = TriggerCreate("gt_BonusObjectiveBlightbringerEggCreated_Func");
    TriggerAddEventUnitRegion(gt_BonusObjectiveBlightbringerEggCreated, null, RegionFromId(79), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dyingPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveBlightbringerTimerExpiresQ, false);
    TriggerExecute(gt_ObjectiveExploreUmojanMineKillBlightbringerComplete, true, false);
    gv_bonusObjective_BlightbringerActive = false;
    TimerPause(gv_bonusObjective_BlightbringerExpire, true);
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    TriggerExecute(gt_BonusObjectiveCollectedMinesQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerDies_Init () {
    gt_BonusObjectiveBlightbringerDies = TriggerCreate("gt_BonusObjectiveBlightbringerDies_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveBlightbringerDies, UnitRefFromUnit(UnitFromId(1004)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Timer Expires Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerTimerExpiresQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveBlightbringerDies, false);
    TriggerExecute(gt_ObjectiveExploreUmojanMineFailed, true, false);
    gf_BonusObjectiveBurrowAndRemoveInfestedWaveUnit(gv_c_BonusObjective_Blightbringer);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_c_BonusObjective_Blightbringer, 1));
    PingDestroy(gv_bonusObjective_BlightbringerExplorePing);
    gv_bonusObjective_FailedMines = true;
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusExpireFirstJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerTimerExpiresQ_Init () {
    gt_BonusObjectiveBlightbringerTimerExpiresQ = TriggerCreate("gt_BonusObjectiveBlightbringerTimerExpiresQ_Func");
    TriggerAddEventTimer(gt_BonusObjectiveBlightbringerTimerExpiresQ, gv_bonusObjective_BlightbringerExpire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Timer Update
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerTimerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false) && (TimerGetRemaining(gv_bonusObjective_BlightbringerExpire) > 0.0)) {
        TriggerExecute(gt_ObjectiveExploreUmojanMineUpdate, true, false);
        if (((TimerGetRemaining(gv_bonusObjective_BlightbringerExpire) / TimerGetDuration(gv_bonusObjective_BlightbringerExpire)) < 0.5)) {
            TriggerExecute(gt_BonusObjectiveBlightbringerReminderQ, true, false);
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerTimerUpdate_Init () {
    gt_BonusObjectiveBlightbringerTimerUpdate = TriggerCreate("gt_BonusObjectiveBlightbringerTimerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Blightbringer Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveBlightbringerReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusReminderFirstJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveBlightbringerReminderQ_Init () {
    gt_BonusObjectiveBlightbringerReminderQ = TriggerCreate("gt_BonusObjectiveBlightbringerReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective (Coop) - Start Science Facility
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCoopStartScienceFacility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_eradicatorExpireTimer, 360.0, false, c_timeAI);
    TriggerExecute(gt_BonusObjectiveCoopTimerManagement, true, false);
    VisRevealArea(gv_pLAYER_09_ERADICATOR, RegionPlayableMap(), 0.0, false);
    TriggerExecute(gt_BonusObjectiveEradicatorTypeMissile, true, false);
    TriggerExecute(gt_BonusObjectiveEradicatorTypeCannon, true, false);
    TriggerExecute(gt_BonusObjectiveCoopSpawnAdds, true, false);
    TriggerExecute(gt_ObjectiveExploreScienceFacilityDestroyCreate, true, false);
    TriggerExecute(gt_BonusObjectiveActivateEradicatorTransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCoopStartScienceFacility_Init () {
    gt_BonusObjectiveCoopStartScienceFacility = TriggerCreate("gt_BonusObjectiveCoopStartScienceFacility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective (Coop) - Timer Management
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCoopTimerManagement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_bonusObjective_EventFinished == false) && (TimerGetRemaining(gv_eradicatorExpireTimer) > 0.0)) {
        if ((((UnitIsAlive(gv_eradicatorTypeMissile) == true) && ((AIGetTime() - AILastAttack(gv_eradicatorTypeMissile)) < 2.0)) || ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && ((AIGetTime() - AILastAttack(gv_eradicatorTypeCannon)) < 2.0)))) {
            TimerPause(gv_eradicatorExpireTimer, true);
        }
        else {
            TimerPause(gv_eradicatorExpireTimer, false);
        }
        TriggerExecute(gt_ObjectiveExploreScienceFacilityUpdate, true, false);
        if (((TimerGetRemaining(gv_eradicatorExpireTimer) / TimerGetDuration(gv_eradicatorExpireTimer)) < 0.5)) {
            TriggerExecute(gt_BonusObjectiveEradicatorReminderQ, true, false);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCoopTimerManagement_Init () {
    gt_BonusObjectiveCoopTimerManagement = TriggerCreate("gt_BonusObjectiveCoopTimerManagement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE452570B_g;
    int autoE452570B_u;
    unit autoE452570B_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveExploreScienceFacilityFailed, true, false);
    TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
    TriggerStop(gt_BonusObjectiveEradicatorTypeCannonEnrage);
    TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
    TriggerStop(gt_BonusObjectiveEradicatorTypeMissileEnrage);
    gv_bonusObjective_EventFinished = true;
    TriggerExecute(gt_BonusObjectiveEradicatorExpiresQ, true, false);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_eradicatorTypeCannon, 1));
    PingDestroy(libHots_gf_PingStoredForUnit(gv_eradicatorTypeMissile, 1));
    UnitAbilityEnable(gv_eradicatorTypeMissile, "move", true);
    while ((UnitGroupCount(UnitGroup(null, gv_pLAYER_09_ERADICATOR, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        autoE452570B_g = UnitGroup(null, gv_pLAYER_09_ERADICATOR, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE452570B_u = UnitGroupCount(autoE452570B_g, c_unitCountAll);
        for (;; autoE452570B_u -= 1) {
            autoE452570B_var = UnitGroupUnitFromEnd(autoE452570B_g, autoE452570B_u);
            if (autoE452570B_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(autoE452570B_var), PointFromId(992784431)) < 1)) {
                UnitRemove(autoE452570B_var);
            }
            else {
                UnitIssueOrder(autoE452570B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(992784431)), c_orderQueueReplace);
            }
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTimerExpires_Init () {
    gt_BonusObjectiveEradicatorTimerExpires = TriggerCreate("gt_BonusObjectiveEradicatorTimerExpires_Func");
    TriggerAddEventTimer(gt_BonusObjectiveEradicatorTimerExpires, gv_eradicatorExpireTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusReminderSecondJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorReminderQ_Init () {
    gt_BonusObjectiveEradicatorReminderQ = TriggerCreate("gt_BonusObjectiveEradicatorReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Expires Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorExpiresQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusExpireSecondJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorExpiresQ_Init () {
    gt_BonusObjectiveEradicatorExpiresQ = TriggerCreate("gt_BonusObjectiveEradicatorExpiresQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective (Coop) - Spawn Adds
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCoopSpawnAdds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_spawnedSentryBots;

    // Automatic Variable Declarations
    int autoD60AED1D_n;
    int autoD60AED1D_i;
    int autoFD352954_n;
    int autoFD352954_i;
    int auto10508FEE_n;
    int auto10508FEE_i;
    int autoA7A4B915_n;
    int autoA7A4B915_i;
    int autoCC197CA6_n;
    int autoCC197CA6_i;

    // Variable Initialization
    lv_spawnedSentryBots = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BonusObjectiveCoopAddsLogic, true, false);
    while (!(((UnitGetPropertyFixed(gv_eradicatorTypeCannon, c_unitPropLifePercent, c_unitPropCurrent) + UnitGetPropertyFixed(gv_eradicatorTypeMissile, c_unitPropLifePercent, c_unitPropCurrent)) < 90.0))) {
        Wait(1.0, c_timeAI);
    }
    autoD60AED1D_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 5, 7, 0, 0);
    for (autoD60AED1D_i = 1; autoD60AED1D_i <= autoD60AED1D_n; autoD60AED1D_i += 1) {
        if (((UnitIsAlive(gv_eradicatorTypeCannon) == true) || (UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            libNtve_gf_UnitCreateFacingPoint(1, "UmojanLabMicrobot", 0, gv_pLAYER_09_ERADICATOR, PointFromId(992784431), PointFromId(992784431));
            UnitGroupAdd(lv_spawnedSentryBots, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(78))), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }

    }
    while (!(((UnitGetPropertyFixed(gv_eradicatorTypeCannon, c_unitPropLifePercent, c_unitPropCurrent) + UnitGetPropertyFixed(gv_eradicatorTypeMissile, c_unitPropLifePercent, c_unitPropCurrent)) < 70.0))) {
        Wait(1.0, c_timeAI);
    }
    autoFD352954_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 5, 7, 0, 0);
    for (autoFD352954_i = 1; autoFD352954_i <= autoFD352954_n; autoFD352954_i += 1) {
        if (((UnitIsAlive(gv_eradicatorTypeCannon) == true) || (UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            libNtve_gf_UnitCreateFacingPoint(1, "UmojanLabMicrobot", 0, gv_pLAYER_09_ERADICATOR, PointFromId(992784431), PointFromId(992784431));
            UnitGroupAdd(lv_spawnedSentryBots, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(78))), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }

    }
    auto10508FEE_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 4, 0, 0);
    for (auto10508FEE_i = 1; auto10508FEE_i <= auto10508FEE_n; auto10508FEE_i += 1) {
        if (((UnitIsAlive(gv_eradicatorTypeCannon) == true) || (UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            libNtve_gf_UnitCreateFacingPoint(1, "Cyclone", 0, gv_pLAYER_09_ERADICATOR, PointFromId(992784431), PointFromId(992784431));
            UnitGroupAdd(lv_spawnedSentryBots, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(78))), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
        }

    }
    while (!(((UnitGetPropertyFixed(gv_eradicatorTypeCannon, c_unitPropLifePercent, c_unitPropCurrent) + UnitGetPropertyFixed(gv_eradicatorTypeMissile, c_unitPropLifePercent, c_unitPropCurrent)) < 50.0))) {
        Wait(1.0, c_timeAI);
    }
    autoA7A4B915_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 3, 5, 7, 0, 0);
    for (autoA7A4B915_i = 1; autoA7A4B915_i <= autoA7A4B915_n; autoA7A4B915_i += 1) {
        if (((UnitIsAlive(gv_eradicatorTypeCannon) == true) || (UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            libNtve_gf_UnitCreateFacingPoint(1, "UmojanLabMicrobot", 0, gv_pLAYER_09_ERADICATOR, PointFromId(992784431), PointFromId(992784431));
            UnitGroupAdd(lv_spawnedSentryBots, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(78))), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
        }

    }
    autoCC197CA6_n = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 6, 0, 0);
    for (autoCC197CA6_i = 1; autoCC197CA6_i <= autoCC197CA6_n; autoCC197CA6_i += 1) {
        if (((UnitIsAlive(gv_eradicatorTypeCannon) == true) || (UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            libNtve_gf_UnitCreateFacingPoint(1, "Cyclone", 0, gv_pLAYER_09_ERADICATOR, PointFromId(992784431), PointFromId(992784431));
            UnitGroupAdd(lv_spawnedSentryBots, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(78))), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
        }

    }
    AISetGroupSuicide(lv_spawnedSentryBots, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCoopSpawnAdds_Init () {
    gt_BonusObjectiveCoopSpawnAdds = TriggerCreate("gt_BonusObjectiveCoopSpawnAdds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective (Coop) - Adds Logic
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCoopAddsLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_addGroupIter;
    unit lv_addIter;
    int lv_shouldBotWander;

    // Automatic Variable Declarations
    int auto188C577E_ae;
    const int auto188C577E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false) && (gv_bonusObjective_EventFinished == false)) {
        auto188C577E_ae = UnitGroupCount(gv_bonusObjective_Eradicator_Adds, c_unitCountAlive);
        lv_addGroupIter = 1;
        for ( ; ( (auto188C577E_ai >= 0 && lv_addGroupIter <= auto188C577E_ae) || (auto188C577E_ai < 0 && lv_addGroupIter >= auto188C577E_ae) ) ; lv_addGroupIter += auto188C577E_ai ) {
            lv_addIter = UnitGroupUnit(gv_bonusObjective_Eradicator_Adds, lv_addGroupIter);
            lv_shouldBotWander = RandomInt(1, 5);
            if (((lv_shouldBotWander <= lv_shouldBotWander) || (libNtve_gf_UnitInRegion(lv_addIter, RegionFromId(78)) == false))) {
                UnitIssueOrder(lv_addIter, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(78))), c_orderQueueReplace);
            }

        }
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCoopAddsLogic_Init () {
    gt_BonusObjectiveCoopAddsLogic = TriggerCreate("gt_BonusObjectiveCoopAddsLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Activate Eradicator Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveActivateEradicatorTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDC84C3BC_g;
    int autoDC84C3BC_var;
    string auto83F50B59_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(UnitFromId(895)), 270.0, "PingAlert", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
    autoDC84C3BC_g = libCOMI_gf_HumanPlayers();
    autoDC84C3BC_var = -1;
    while (true) {
        autoDC84C3BC_var = PlayerGroupNextPlayer(autoDC84C3BC_g, autoDC84C3BC_var);
        if (autoDC84C3BC_var < 0) { break; }
        auto83F50B59_val = PlayerRace(autoDC84C3BC_var);
        if (auto83F50B59_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(autoDC84C3BC_var), 100.0, 0.0);
        }
        else if (auto83F50B59_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(autoDC84C3BC_var), 100.0, 0.0);
        }
        else if (auto83F50B59_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupSingle(autoDC84C3BC_var), 100.0, 0.0);
        }
        else {
        }
    }
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9BFCBEA0"));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        libCOMI_gf_SendTransmissionCampaign(UnitFromId(895), "acObj|Line01855", c_transmissionDurationAdd, 0.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        libCOMI_gf_SendTransmissionCampaign(gv_eradicatorTypeCannon, "acObj|Line01855", c_transmissionDurationAdd, 0.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveActivateEradicatorTransmissionQ_Init () {
    gt_BonusObjectiveActivateEradicatorTransmissionQ = TriggerCreate("gt_BonusObjectiveActivateEradicatorTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Activate Eradicator Enrage Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC7542139_g;
    int autoC7542139_var;
    string auto3D235C53_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_enragedEradicator), 270.0, "PingAlert", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
    autoC7542139_g = libCOMI_gf_HumanPlayers();
    autoC7542139_var = -1;
    while (true) {
        autoC7542139_var = PlayerGroupNextPlayer(autoC7542139_g, autoC7542139_var);
        if (autoC7542139_var < 0) { break; }
        auto3D235C53_val = PlayerRace(autoC7542139_var);
        if (auto3D235C53_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(autoC7542139_var), 100.0, 0.0);
        }
        else if (auto3D235C53_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(autoC7542139_var), 100.0, 0.0);
        }
        else if (auto3D235C53_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupSingle(autoC7542139_var), 100.0, 0.0);
        }
        else {
        }
    }
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9581578E"));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(gv_enragedEradicator) == true)) {
        libCOMI_gf_SendTransmissionCampaign(gv_enragedEradicator, "acObj|Line01856", c_transmissionDurationAdd, 0.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Init () {
    gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ = TriggerCreate("gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Missile
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unitgroup lv_nearbyEnemyAir;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyEnemyAir = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(gv_eradicatorTypeMissile, "move", false);
    UnitAbilityEnable(gv_eradicatorTypeCannon, "EradicatorLockOnAir", false);
    CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOn", "Range[" + IntToString(0) + "]", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(9.0, 9.0, 12.0, 15.0, 0.0, 0.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOn", "AutoCastRange", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(9.0, 9.0, 12.0, 15.0, 0.0, 0.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOnAir", "Range[" + IntToString(0) + "]", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(9.0, 9.0, 12.0, 15.0, 0.0, 0.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOnAir", "AutoCastRange", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(9.0, 9.0, 12.0, 15.0, 0.0, 0.0), c_fixedPrecisionAny));
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true) && (UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        lv_nearbyEnemyAir = UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeMissile), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_eradicatorTypeMissile), 15.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_nearbyEnemyAir, c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_eradicatorTypeMissile, OrderSetAutoCast(AbilityCommand("EradicatorLockOn", 0), true), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(gv_eradicatorTypeMissile, OrderSetAutoCast(AbilityCommand("EradicatorLockOn", 0), false), c_orderQueueAddToEnd);
            if ((gv_bonusObjective_Eradicator_CannonMoving == true)) {
                gf_BonusObjectiveEradicatorMissilesRing();
            }

        }
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeMissile_Init () {
    gt_BonusObjectiveEradicatorTypeMissile = TriggerCreate("gt_BonusObjectiveEradicatorTypeMissile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Cannon
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPosition;

    // Automatic Variable Declarations
    int autoC7813182_val;
    fixed auto5F1EC19C_at;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeCannon) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true) && (UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            gf_BonusObjectiveEradicatorCannonFiveWayShot();
            Wait(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 0.0, 0.0, 1.7, 1.7, 0.0, 0.0), c_timeAI);
            Wait(1.0, c_timeAI);
            autoC7813182_val = gv_eradicatorTypeCannonPosition;
            if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorEast) {
                lv_targetPosition = PointFromId(2108);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorSouth;
            }
            else if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorSouth) {
                lv_targetPosition = PointFromId(2109);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorWest;
            }
            else if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorWest) {
                lv_targetPosition = PointFromId(2104);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorNorth;
            }
            else if (autoC7813182_val == ge_BonusObjectiveEradicatorPositions_EradicatorNorth) {
                lv_targetPosition = PointFromId(2106);
                gv_eradicatorTypeCannonPosition = ge_BonusObjectiveEradicatorPositions_EradicatorEast;
            }
            else {
            }
            if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
                UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPosition), c_orderQueueReplace);
            }

            gv_bonusObjective_Eradicator_CannonMoving = true;
            auto5F1EC19C_at = 0;
            while (!(((DistanceBetweenPoints(UnitGetPosition(gv_eradicatorTypeCannon), lv_targetPosition) <= 0.2) || (UnitIsAlive(gv_eradicatorTypeCannon) == false))) && auto5F1EC19C_at <= ((DistanceBetweenPoints(UnitGetPosition(gv_eradicatorTypeCannon), lv_targetPosition) / UnitGetPropertyFixed(gv_eradicatorTypeCannon, c_unitPropMovementSpeed, c_unitPropCurrent)) + 0.3)) {
                Wait(0.01, c_timeAI);
                auto5F1EC19C_at = auto5F1EC19C_at + 0.01;
            }
            gv_bonusObjective_Eradicator_CannonMoving = false;
            if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
                UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(2094)), c_orderQueueReplace);
                UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeCannon_Init () {
    gt_BonusObjectiveEradicatorTypeCannon = TriggerCreate("gt_BonusObjectiveEradicatorTypeCannon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Missile Enrage
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeMissileEnrage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyGroundEnemies;
    unitgroup lv_nearbyAirEnemies;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyGroundEnemies = UnitGroupEmpty();
    lv_nearbyAirEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enragedEradicator = gv_eradicatorTypeMissile;
    TriggerExecute(gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ, true, false);
    Wait(3.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOn", "Range[" + IntToString(0) + "]", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(15.0, 15.0, 20.0, 25.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOn", "AutoCastRange", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(15.0, 15.0, 20.0, 25.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOnAir", "Range[" + IntToString(0) + "]", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(15.0, 15.0, 20.0, 25.0, 0.0, 0.0), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "EradicatorLockOnAir", "AutoCastRange", gv_pLAYER_09_ERADICATOR, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(15.0, 15.0, 20.0, 25.0, 0.0, 0.0), c_fixedPrecisionAny));
        lv_nearbyGroundEnemies = UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeMissile), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearbyAirEnemies = UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeMissile), c_unitAllianceEnemy, RegionFromId(78), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_nearbyGroundEnemies, c_unitCountAlive) <= 0) && (UnitGroupCount(lv_nearbyAirEnemies, c_unitCountAlive) <= 0)) {
            Wait(0.5, c_timeAI);
            continue;
        }
        else if ((UnitGroupCount(lv_nearbyAirEnemies, c_unitCountAlive) > 0) && (UnitGroupCount(lv_nearbyGroundEnemies, c_unitCountAlive) <= 0)) {
            UnitIssueOrder(gv_eradicatorTypeMissile, OrderSetAutoCast(AbilityCommand("EradicatorLockOn", 0), true), c_orderQueueAddToEnd);
            Wait(0.5, c_timeAI);
            continue;
        }
        else if ((UnitGroupCount(lv_nearbyGroundEnemies, c_unitCountAlive) > 0)) {
            UnitIssueOrder(gv_eradicatorTypeMissile, OrderSetAutoCast(AbilityCommand("EradicatorLockOn", 0), false), c_orderQueueReplace);
        }
        lv_targetUnit = UnitGroupRandomUnit(lv_nearbyGroundEnemies, c_unitCountAlive);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("NovaEradicatorTurnTurret", 0), UnitGetPosition(lv_targetUnit)), c_orderQueueReplace);
        UnitIssueOrder(gv_eradicatorTypeMissile, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(lv_targetUnit)), c_orderQueueAddToEnd);
        gf_BonusObjectiveEradicatorMissilesEnrageRing();
        Wait(4.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeMissileEnrage_Init () {
    gt_BonusObjectiveEradicatorTypeMissileEnrage = TriggerCreate("gt_BonusObjectiveEradicatorTypeMissileEnrage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Type Cannon Enrage
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorTypeCannonEnrage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attackCount;
    unit lv_targetUnit;
    unitgroup lv_nearbyEnemies;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_eradicatorTypeCannon) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_enragedEradicator = gv_eradicatorTypeCannon;
    TriggerExecute(gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ, true, false);
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("NovaEradicatorFlamethrower", 0)), c_orderQueueReplace);
    }

    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
        lv_nearbyEnemies = UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeCannon), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_nearbyEnemies, c_unitCountAlive);
            gf_BonusObjectiveEradicatorCannonAttack(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, UnitGetPosition(lv_targetUnit)));
        }

        lv_attackCount = 0;
        while ((lv_attackCount < 5) && (UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            lv_attackCount += 1;
            if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
                lv_targetUnit = UnitGroupRandomUnit(lv_nearbyEnemies, c_unitCountAlive);
                gf_BonusObjectiveEradicatorCannonAttackNoTurn(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_eradicatorTypeCannon), 1.0, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeCannon), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))));
                Wait(1.1, c_timeGame);
            }

        }
        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            UnitIssueOrder(gv_eradicatorTypeCannon, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(gv_eradicatorTypeCannon), c_unitAllianceEnemy, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }

        Wait(0.3, c_timeGame);
        if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            gf_BonusObjectiveEradicatorCannonFanAttack();
        }

        Wait(4.0, c_timeGame);
        if ((UnitIsAlive(gv_eradicatorTypeCannon) == true)) {
            UnitIssueOrder(gv_eradicatorTypeCannon, Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorTypeCannonEnrage_Init () {
    gt_BonusObjectiveEradicatorTypeCannonEnrage = TriggerCreate("gt_BonusObjectiveEradicatorTypeCannonEnrage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Eradicator Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEradicatorDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_dyingPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_objectiveExploreScienceFacility_EradicatorsDestroyed += 1;
    if ((UnitIsAlive(gv_eradicatorTypeCannon) == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == false)) {
        TriggerEnable(gt_BonusObjectiveEradicatorTimerExpires, false);
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissileEnrage);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannonEnrage);
        TriggerEnable(TriggerGetCurrent(), false);
        TimerPause(gv_eradicatorExpireTimer, true);
        TriggerExecute(gt_ObjectiveExploreScienceFacilityDestroyComplete, true, false);
        Wait(4.0, c_timeGame);
        TriggerExecute(gt_BonusObjectiveCollectedFacilityQ, true, false);
    }
    else if ((UnitIsAlive(gv_eradicatorTypeCannon) == true) && (UnitIsAlive(gv_eradicatorTypeMissile) == false)) {
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
        TriggerExecute(gt_BonusObjectiveEradicatorTypeCannonEnrage, true, false);
    }
    else if ((UnitIsAlive(gv_eradicatorTypeCannon) == false) && (UnitIsAlive(gv_eradicatorTypeMissile) == true)) {
        TriggerStop(gt_BonusObjectiveEradicatorTypeMissile);
        TriggerStop(gt_BonusObjectiveEradicatorTypeCannon);
        TriggerExecute(gt_BonusObjectiveEradicatorTypeMissileEnrage, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEradicatorDies_Init () {
    gt_BonusObjectiveEradicatorDies = TriggerCreate("gt_BonusObjectiveEradicatorDies_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveEradicatorDies, UnitRefFromVariable("gv_eradicatorTypeCannon"));
    TriggerAddEventUnitDied(gt_BonusObjectiveEradicatorDies, UnitRefFromVariable("gv_eradicatorTypeMissile"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Infested Kills
//--------------------------------------------------------------------------------------------------
bool gt_TrackInfestedKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_enemyPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "InfestedCivilian") || (UnitGetType(EventUnit()) == "InfestedTerranCampaign") || (UnitGetType(EventUnit()) == "InfestedExploder") || (UnitGetType(EventUnit()) == "InfestedAbomination") || (UnitGetType(EventUnit()) == "Infestor") || (UnitGetType(EventUnit()) == "InfestedSiegeBreaker") || (UnitGetType(EventUnit()) == "InfestedSiegeBreakerSieged") || (UnitGetType(EventUnit()) == "InfestedBanshee") || (UnitGetType(EventUnit()) == "InfestedColonistTransportNova")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scoreScreen_InfestedKills[libNtve_gf_KillingPlayer()] += 1;
    PlayerScoreValueSetFromInt(gv_pLAYER_01_USER, "JarbanPointCaptureKills", gv_scoreScreen_InfestedKills[gv_pLAYER_01_USER]);
    PlayerScoreValueSetFromInt(gv_pLAYER_02_USER, "JarbanPointCaptureKills", gv_scoreScreen_InfestedKills[gv_pLAYER_02_USER]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackInfestedKills_Init () {
    gt_TrackInfestedKills = TriggerCreate("gt_TrackInfestedKills_Func");
    TriggerAddEventUnitDied(gt_TrackInfestedKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Infested Points
//--------------------------------------------------------------------------------------------------
bool gt_SetupInfestedPoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_infestedTownGatherIter;
    unit lv_infestedTownMemberIter;

    // Automatic Variable Declarations
    const int auto8861C35D_ae = gv_c_InfestedTownCount;
    const int auto8861C35D_ai = 1;
    unitgroup auto95214E0F_g;
    int auto95214E0F_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 100) < 50)) {
        lv_infestedTownGatherIter += 1;
        gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(102);
        lv_infestedTownGatherIter += 1;
        gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(107);
    }
    else {
        lv_infestedTownGatherIter += 1;
        gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(107);
        lv_infestedTownGatherIter += 1;
        gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(102);
    }
    lv_infestedTownGatherIter += 1;
    gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(103);
    lv_infestedTownGatherIter += 1;
    gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(108);
    lv_infestedTownGatherIter += 1;
    gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(109);
    lv_infestedTownGatherIter += 1;
    gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(104);
    lv_infestedTownGatherIter += 1;
    gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(105);
    lv_infestedTownGatherIter += 1;
    gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] = RegionFromId(106);
    lv_infestedTownGatherIter = 1;
    for ( ; ( (auto8861C35D_ai >= 0 && lv_infestedTownGatherIter <= auto8861C35D_ae) || (auto8861C35D_ai < 0 && lv_infestedTownGatherIter >= auto8861C35D_ae) ) ; lv_infestedTownGatherIter += auto8861C35D_ai ) {
        if ((gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter] != null)) {
            auto95214E0F_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_infestedTownAttackOriginOrder[lv_infestedTownGatherIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto95214E0F_u = UnitGroupCount(auto95214E0F_g, c_unitCountAll);
            for (;; auto95214E0F_u -= 1) {
                lv_infestedTownMemberIter = UnitGroupUnitFromEnd(auto95214E0F_g, auto95214E0F_u);
                if (lv_infestedTownMemberIter == null) { break; }
                gv_infestedTownValue[lv_infestedTownGatherIter] += UnitGetPropertyFixed(lv_infestedTownMemberIter, c_unitPropVitality, c_unitPropCurrent);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupInfestedPoints_Init () {
    gt_SetupInfestedPoints = TriggerCreate("gt_SetupInfestedPoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Stolen Rage Wave Unit
//--------------------------------------------------------------------------------------------------
bool gt_RemoveStolenRageWaveUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_infestedRageWaveUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_infestedRageWaveUnits, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveStolenRageWaveUnit_Init () {
    gt_RemoveStolenRageWaveUnit = TriggerCreate("gt_RemoveStolenRageWaveUnit_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(gt_RemoveStolenRageWaveUnit, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(gt_RemoveStolenRageWaveUnit, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Protoss AI Warp-In Units
//--------------------------------------------------------------------------------------------------
bool gt_SetupProtossAIWarpInUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allowableDifficulty;

    // Automatic Variable Declarations
    const int auto441E4F38_ae = 5;
    int auto441E4F38_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tier01_AliasZealot = UserDataGetUnit("CoopAICommanderTiers", libCOMI_gf_CM_CoopAI_GetTechLevel(gv_pLAYER_03_AMON_Claimers, libCOMI_ge_CoopAITechLevelBuckets__1Early), "PhaseUnits", 1);
    gv_tier02_AliasStalker = UserDataGetUnit("CoopAICommanderTiers", libCOMI_gf_CM_CoopAI_GetTechLevel(gv_pLAYER_03_AMON_Claimers, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid), "PhaseUnits", 1);
    gv_tier03_AliasImmortal = UserDataGetUnit("CoopAICommanderTiers", libCOMI_gf_CM_CoopAI_GetTechLevel(gv_pLAYER_03_AMON_Claimers, libCOMI_ge_CoopAITechLevelBuckets__3Mid), "PhaseUnits", 1);
    auto441E4F38_var = 1;
    for ( ; auto441E4F38_var <= auto441E4F38_ae; auto441E4F38_var += 1 ) {
        lv_allowableDifficulty = UserDataGetInt("CoopAICommanderTiers", libCOMI_gf_CM_CoopAI_GetTechLevel(gv_pLAYER_03_AMON_Claimers, libCOMI_ge_CoopAITechLevelBuckets__5Late), "minDifficulty", auto441E4F38_var);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 3, 4, 5, 6) >= lv_allowableDifficulty)) {
            gv_tier04_AliasColossus = UserDataGetUnit("CoopAICommanderTiers", libCOMI_gf_CM_CoopAI_GetTechLevel(gv_pLAYER_03_AMON_Claimers, libCOMI_ge_CoopAITechLevelBuckets__5Late), "PhaseUnits", auto441E4F38_var);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupProtossAIWarpInUnits_Init () {
    gt_SetupProtossAIWarpInUnits = TriggerCreate("gt_SetupProtossAIWarpInUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BASE Attack 01
//--------------------------------------------------------------------------------------------------
bool gt_BASEAttack01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_defendingPlayers;
    point lv_attackSpawn;
    point lv_attackWaypoint;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto2CE44D9D_g;
    int auto2CE44D9D_var;
    unitgroup autoCE910FE1_g;
    int autoCE910FE1_u;
    unit autoCE910FE1_var;

    // Variable Initialization
    lv_defendingPlayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    if ((RandomInt(0, 100) <= 66)) {
        lv_attackSpawn = PointFromId(1131953593);
        lv_attackWaypoint = PointFromId(682313983);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_01_USER);
    }
    else {
        lv_attackSpawn = PointFromId(589598171);
        lv_attackWaypoint = PointFromId(1556275793);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_02_USER);
    }
    gf_BaseAttackTransmissionQ(lv_defendingPlayers);
    auto2CE44D9D_g = gv_amonPlayers;
    auto2CE44D9D_var = -1;
    while (true) {
        auto2CE44D9D_var = PlayerGroupNextPlayer(auto2CE44D9D_g, auto2CE44D9D_var);
        if (auto2CE44D9D_var < 0) { break; }
        AIAttackWaveSetTargetPlayer(auto2CE44D9D_var, libCOMI_gf_HumanPlayers());
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackSpawn, gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    autoCE910FE1_g = libCOMI_gf_LastCreatedCoopAttackForce();
    autoCE910FE1_u = UnitGroupCount(autoCE910FE1_g, c_unitCountAll);
    for (;; autoCE910FE1_u -= 1) {
        autoCE910FE1_var = UnitGroupUnitFromEnd(autoCE910FE1_g, autoCE910FE1_u);
        if (autoCE910FE1_var == null) { break; }
        if ((UnitGetType(autoCE910FE1_var) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
            gf_RemoveClaimerWaveTransport(autoCE910FE1_var, lv_attackSpawn);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BASEAttack01_Init () {
    gt_BASEAttack01 = TriggerCreate("gt_BASEAttack01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BASE Attack 02
//--------------------------------------------------------------------------------------------------
bool gt_BASEAttack02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_defendingPlayers;
    point lv_attackSpawn;
    point lv_attackWaypoint;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto8D21C6BC_g;
    int auto8D21C6BC_var;
    unitgroup autoCAE87DCF_g;
    int autoCAE87DCF_u;
    unit autoCAE87DCF_var;

    // Variable Initialization
    lv_defendingPlayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    if ((RandomInt(0, 100) <= 66)) {
        lv_attackSpawn = PointFromId(589598171);
        lv_attackWaypoint = PointFromId(1556275793);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_02_USER);
    }
    else {
        lv_attackSpawn = PointFromId(1131953593);
        lv_attackWaypoint = PointFromId(682313983);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_01_USER);
    }
    gf_BaseAttackTransmissionQ(lv_defendingPlayers);
    auto8D21C6BC_g = gv_amonPlayers;
    auto8D21C6BC_var = -1;
    while (true) {
        auto8D21C6BC_var = PlayerGroupNextPlayer(auto8D21C6BC_g, auto8D21C6BC_var);
        if (auto8D21C6BC_var < 0) { break; }
        AIAttackWaveSetTargetPlayer(auto8D21C6BC_var, libCOMI_gf_HumanPlayers());
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackSpawn, gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    autoCAE87DCF_g = libCOMI_gf_LastCreatedCoopAttackForce();
    autoCAE87DCF_u = UnitGroupCount(autoCAE87DCF_g, c_unitCountAll);
    for (;; autoCAE87DCF_u -= 1) {
        autoCAE87DCF_var = UnitGroupUnitFromEnd(autoCAE87DCF_g, autoCAE87DCF_u);
        if (autoCAE87DCF_var == null) { break; }
        if ((UnitGetType(autoCAE87DCF_var) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
            gf_RemoveClaimerWaveTransport(autoCAE87DCF_var, lv_attackSpawn);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BASEAttack02_Init () {
    gt_BASEAttack02 = TriggerCreate("gt_BASEAttack02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BASE Attack 03
//--------------------------------------------------------------------------------------------------
bool gt_BASEAttack03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_attackSpawn;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto00B52183_g;
    int auto00B52183_var;
    unitgroup auto24355C60_g;
    int auto24355C60_u;
    unit auto24355C60_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_attackSpawn = PointFromId(984466149);
    gf_BaseAttackTransmissionQ(libCOMI_gf_HumanPlayers());
    auto00B52183_g = gv_amonPlayers;
    auto00B52183_var = -1;
    while (true) {
        auto00B52183_var = PlayerGroupNextPlayer(auto00B52183_g, auto00B52183_var);
        if (auto00B52183_var < 0) { break; }
        AIAttackWaveSetTargetPlayer(auto00B52183_var, libCOMI_gf_HumanPlayers());
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackSpawn, gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(251087913), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    auto24355C60_g = libCOMI_gf_LastCreatedCoopAttackForce();
    auto24355C60_u = UnitGroupCount(auto24355C60_g, c_unitCountAll);
    for (;; auto24355C60_u -= 1) {
        auto24355C60_var = UnitGroupUnitFromEnd(auto24355C60_g, auto24355C60_u);
        if (auto24355C60_var == null) { break; }
        if ((UnitGetType(auto24355C60_var) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
            gf_RemoveClaimerWaveTransport(auto24355C60_var, lv_attackSpawn);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BASEAttack03_Init () {
    gt_BASEAttack03 = TriggerCreate("gt_BASEAttack03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BASE Attack 04
//--------------------------------------------------------------------------------------------------
bool gt_BASEAttack04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_defendingPlayers;
    point lv_attackSpawn;
    point[3] lv_attackWaypoint;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup autoFC6937C1_g;
    int autoFC6937C1_var;
    unitgroup auto8642AA63_g;
    int auto8642AA63_u;
    unit auto8642AA63_var;

    // Variable Initialization
    lv_defendingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, c_unitAllianceEnemy, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_attackWaypoint[2] = RegionGetCenter(RegionFromId(11));
    }

    if ((RandomInt(0, 100) <= 66)) {
        lv_attackSpawn = PointFromId(1131953593);
        lv_attackWaypoint[1] = PointFromId(682313983);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_01_USER);
    }
    else {
        lv_attackSpawn = PointFromId(589598171);
        lv_attackWaypoint[1] = PointFromId(1556275793);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_02_USER);
    }
    gf_BaseAttackTransmissionQ(lv_defendingPlayers);
    autoFC6937C1_g = gv_amonPlayers;
    autoFC6937C1_var = -1;
    while (true) {
        autoFC6937C1_var = PlayerGroupNextPlayer(autoFC6937C1_g, autoFC6937C1_var);
        if (autoFC6937C1_var < 0) { break; }
        AIAttackWaveSetTargetPlayer(autoFC6937C1_var, libCOMI_gf_HumanPlayers());
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackSpawn, gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint[1], true);
    if ((lv_attackWaypoint[2] != null)) {
        libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint[2], true);
    }

    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    auto8642AA63_g = libCOMI_gf_LastCreatedCoopAttackForce();
    auto8642AA63_u = UnitGroupCount(auto8642AA63_g, c_unitCountAll);
    for (;; auto8642AA63_u -= 1) {
        auto8642AA63_var = UnitGroupUnitFromEnd(auto8642AA63_g, auto8642AA63_u);
        if (auto8642AA63_var == null) { break; }
        if ((UnitGetType(auto8642AA63_var) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
            gf_RemoveClaimerWaveTransport(auto8642AA63_var, lv_attackSpawn);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BASEAttack04_Init () {
    gt_BASEAttack04 = TriggerCreate("gt_BASEAttack04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BASE Attack 05
//--------------------------------------------------------------------------------------------------
bool gt_BASEAttack05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_defendingPlayers;
    point lv_attackSpawn;
    point[3] lv_attackWaypoint;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup autoEAFAB564_g;
    int autoEAFAB564_var;
    unitgroup auto03928B28_g;
    int auto03928B28_u;
    unit auto03928B28_var;

    // Variable Initialization
    lv_defendingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_INFESTED_BulliesHoldoutNeutralToss, c_unitAllianceEnemy, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_attackWaypoint[2] = RegionGetCenter(RegionFromId(11));
    }

    if ((RandomInt(0, 100) <= 66)) {
        lv_attackSpawn = PointFromId(589598171);
        lv_attackWaypoint[1] = PointFromId(1556275793);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_02_USER);
    }
    else {
        lv_attackSpawn = PointFromId(1131953593);
        lv_attackWaypoint[1] = PointFromId(682313983);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_01_USER);
    }
    gf_BaseAttackTransmissionQ(lv_defendingPlayers);
    autoEAFAB564_g = gv_amonPlayers;
    autoEAFAB564_var = -1;
    while (true) {
        autoEAFAB564_var = PlayerGroupNextPlayer(autoEAFAB564_g, autoEAFAB564_var);
        if (autoEAFAB564_var < 0) { break; }
        AIAttackWaveSetTargetPlayer(autoEAFAB564_var, libCOMI_gf_HumanPlayers());
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackSpawn, gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint[1], true);
    if ((lv_attackWaypoint[2] != null)) {
        libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint[2], true);
    }

    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    auto03928B28_g = libCOMI_gf_LastCreatedCoopAttackForce();
    auto03928B28_u = UnitGroupCount(auto03928B28_g, c_unitCountAll);
    for (;; auto03928B28_u -= 1) {
        auto03928B28_var = UnitGroupUnitFromEnd(auto03928B28_g, auto03928B28_u);
        if (auto03928B28_var == null) { break; }
        if ((UnitGetType(auto03928B28_var) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
            gf_RemoveClaimerWaveTransport(auto03928B28_var, lv_attackSpawn);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BASEAttack05_Init () {
    gt_BASEAttack05 = TriggerCreate("gt_BASEAttack05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BASE Attack 06
//--------------------------------------------------------------------------------------------------
bool gt_BASEAttack06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_defendingPlayers;
    point lv_attackSpawn;
    point lv_attackWaypoint;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto50035216_g;
    int auto50035216_var;
    unitgroup autoFE6880EC_g;
    int autoFE6880EC_u;
    unit autoFE6880EC_var;

    // Variable Initialization
    lv_defendingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    if ((RandomInt(0, 100) <= 66)) {
        lv_attackSpawn = PointFromId(1131953593);
        lv_attackWaypoint = PointFromId(682313983);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_01_USER);
    }
    else {
        lv_attackSpawn = PointFromId(589598171);
        lv_attackWaypoint = PointFromId(1556275793);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_02_USER);
    }
    gf_BaseAttackTransmissionQ(lv_defendingPlayers);
    auto50035216_g = gv_amonPlayers;
    auto50035216_var = -1;
    while (true) {
        auto50035216_var = PlayerGroupNextPlayer(auto50035216_g, auto50035216_var);
        if (auto50035216_var < 0) { break; }
        AIAttackWaveSetTargetPlayer(auto50035216_var, libCOMI_gf_HumanPlayers());
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackSpawn, gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    autoFE6880EC_g = libCOMI_gf_LastCreatedCoopAttackForce();
    autoFE6880EC_u = UnitGroupCount(autoFE6880EC_g, c_unitCountAll);
    for (;; autoFE6880EC_u -= 1) {
        autoFE6880EC_var = UnitGroupUnitFromEnd(autoFE6880EC_g, autoFE6880EC_u);
        if (autoFE6880EC_var == null) { break; }
        if ((UnitGetType(autoFE6880EC_var) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
            gf_RemoveClaimerWaveTransport(autoFE6880EC_var, lv_attackSpawn);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BASEAttack06_Init () {
    gt_BASEAttack06 = TriggerCreate("gt_BASEAttack06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BASE Attack 07
//--------------------------------------------------------------------------------------------------
bool gt_BASEAttack07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_defendingPlayers;
    point lv_attackSpawn;
    point lv_attackWaypoint;
    int lv_resourceAmount;
    int lv_techLevel;

    // Automatic Variable Declarations
    playergroup auto3A8A29D3_g;
    int auto3A8A29D3_var;
    unitgroup autoFDF3AC02_g;
    int autoFDF3AC02_u;
    unit autoFDF3AC02_var;

    // Variable Initialization
    lv_defendingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    if ((RandomInt(0, 100) <= 66)) {
        lv_attackSpawn = PointFromId(589598171);
        lv_attackWaypoint = PointFromId(1556275793);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_02_USER);
    }
    else {
        lv_attackSpawn = PointFromId(1131953593);
        lv_attackWaypoint = PointFromId(682313983);
        PlayerGroupAdd(lv_defendingPlayers, gv_pLAYER_01_USER);
    }
    gf_BaseAttackTransmissionQ(lv_defendingPlayers);
    auto3A8A29D3_g = gv_amonPlayers;
    auto3A8A29D3_var = -1;
    while (true) {
        auto3A8A29D3_var = PlayerGroupNextPlayer(auto3A8A29D3_g, auto3A8A29D3_var);
        if (auto3A8A29D3_var < 0) { break; }
        AIAttackWaveSetTargetPlayer(auto3A8A29D3_var, libCOMI_gf_HumanPlayers());
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(PlayerGroupPlayer(gv_amonPlayers, 1), PlayerGroupPlayer(gv_amonPlayers, 2), lv_resourceAmount, lv_techLevel, lv_attackSpawn, gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)));
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaypoint, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    autoFDF3AC02_g = libCOMI_gf_LastCreatedCoopAttackForce();
    autoFDF3AC02_u = UnitGroupCount(autoFDF3AC02_g, c_unitCountAll);
    for (;; autoFDF3AC02_u -= 1) {
        autoFDF3AC02_var = UnitGroupUnitFromEnd(autoFDF3AC02_g, autoFDF3AC02_u);
        if (autoFDF3AC02_var == null) { break; }
        if ((UnitGetType(autoFDF3AC02_var) == gf_TransportType(PlayerGroupPlayer(gv_amonPlayers, 1)))) {
            gf_RemoveClaimerWaveTransport(autoFDF3AC02_var, lv_attackSpawn);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BASEAttack07_Init () {
    gt_BASEAttack07 = TriggerCreate("gt_BASEAttack07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Base Attack Unit Warping In
//--------------------------------------------------------------------------------------------------
bool gt_ProtossBaseAttackUnitWarpingIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_04_AMON_BaseWaves))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(84)) == true) || (libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(85)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_protossBaseAttackGroup, EventUnitProgressUnit());
    AIAttackWaveSetGatherPoint(gv_pLAYER_04_AMON_BaseWaves, UnitGetPosition(EventUnitProgressUnit()));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_AMON_BaseWaves, PlayerStartLocation(RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER)));
    AIAttackWaveUseUnit(gv_pLAYER_04_AMON_BaseWaves, EventUnitProgressUnit());
    AIAttackWaveSend(gv_pLAYER_04_AMON_BaseWaves, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossBaseAttackUnitWarpingIn_Init () {
    gt_ProtossBaseAttackUnitWarpingIn = TriggerCreate("gt_ProtossBaseAttackUnitWarpingIn_Func");
    TriggerAddEventUnitConstructProgress(gt_ProtossBaseAttackUnitWarpingIn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLAIMER Wave (Small)
//--------------------------------------------------------------------------------------------------
bool gt_CLAIMERWaveSmall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_SmallB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLAIMERWaveSmall_Init () {
    gt_CLAIMERWaveSmall = TriggerCreate("gt_CLAIMERWaveSmall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLAIMER Wave (Medium)
//--------------------------------------------------------------------------------------------------
bool gt_CLAIMERWaveMedium_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_MediumB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLAIMERWaveMedium_Init () {
    gt_CLAIMERWaveMedium = TriggerCreate("gt_CLAIMERWaveMedium_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CLAIMER Wave (Large)
//--------------------------------------------------------------------------------------------------
bool gt_CLAIMERWaveLarge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_protossClaimWavesSent += 1;
    if ((ModI(gv_protossClaimWavesSent, 2) == 1)) {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeA);
    }
    else {
        gf_RunProtossClaimerWave(ge_PRESETClaimerWaveType_LargeB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CLAIMERWaveLarge_Init () {
    gt_CLAIMERWaveLarge = TriggerCreate("gt_CLAIMERWaveLarge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Claimer Wave Target Priority
//--------------------------------------------------------------------------------------------------
bool gt_InitializeClaimerWaveTargetPriority_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sortArrayIter;
    int lv_earlyShuffleStart;
    int lv_earlyShuffleEnd;
    int lv_lateShuffleStart;
    int lv_lateShuffleEnd;
    int lv_removeDeadIter;

    // Automatic Variable Declarations
    const int autoC740678E_n = 10;
    int autoC740678E_i;
    const int auto0F74FB38_ae = gv_c_ColonyShip_MaxCount;
    const int auto0F74FB38_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 0, 0, 0, 0) == 1)) {
        lv_sortArrayIter += 1;
        gv_sortOrderArray[lv_sortArrayIter] = 1;
    }

    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 2;
    lv_earlyShuffleStart = lv_sortArrayIter;
    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 3;
    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 5;
    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 6;
    lv_earlyShuffleEnd = lv_sortArrayIter;
    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 4;
    lv_lateShuffleStart = lv_sortArrayIter;
    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 7;
    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 8;
    lv_sortArrayIter += 1;
    gv_sortOrderArray[lv_sortArrayIter] = 9;
    lv_lateShuffleEnd = lv_sortArrayIter;
    if ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0) == 1)) {
        lv_sortArrayIter += 1;
        gv_sortOrderArray[lv_sortArrayIter] = 1;
    }

    gf_ShuffleClaimerWaveArray(lv_earlyShuffleStart, lv_earlyShuffleEnd);
    gf_ShuffleClaimerWaveArray(lv_lateShuffleStart, lv_lateShuffleEnd);
    lv_sortArrayIter = 0;
    for (autoC740678E_i = 1; autoC740678E_i <= autoC740678E_n; autoC740678E_i += 1) {
        lv_sortArrayIter += 1;
        if ((gv_sortOrderArray[lv_sortArrayIter] != -1) && (gv_colonyShipLocations[gv_sortOrderArray[lv_sortArrayIter]].lv_state == ge_PRESETColonyShipState_Sealed)) {
            lv_removeDeadIter = lv_sortArrayIter;
            for ( ; ( (auto0F74FB38_ai >= 0 && lv_removeDeadIter <= auto0F74FB38_ae) || (auto0F74FB38_ai < 0 && lv_removeDeadIter >= auto0F74FB38_ae) ) ; lv_removeDeadIter += auto0F74FB38_ai ) {
                gv_sortOrderArray[lv_removeDeadIter] = gv_sortOrderArray[(lv_removeDeadIter + 1)];
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeClaimerWaveTargetPriority_Init () {
    gt_InitializeClaimerWaveTargetPriority = TriggerCreate("gt_InitializeClaimerWaveTargetPriority_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Claim Wave Unit Warped In
//--------------------------------------------------------------------------------------------------
bool gt_ClaimWaveUnitWarpedIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colonyShipIndex;
    unit lv_warpedUnit;

    // Automatic Variable Declarations
    int auto843D6849_ae;
    const int auto843D6849_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == UnitFromId(1438)))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_03_AMON_Claimers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto843D6849_ae = gv_colonyShipLocationsCount;
    lv_colonyShipIndex = 1;
    for ( ; ( (auto843D6849_ai >= 0 && lv_colonyShipIndex <= auto843D6849_ae) || (auto843D6849_ai < 0 && lv_colonyShipIndex >= auto843D6849_ae) ) ; lv_colonyShipIndex += auto843D6849_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), gv_colonyShipLocations[lv_colonyShipIndex].lv_protossClaimerWaveTargetRegion) == true)) {
            UnitGroupAdd(gv_colonyShipLocations[lv_colonyShipIndex].lv_protossClaimerWaveUnitGroup, EventUnitProgressUnit());
            lv_warpedUnit = EventUnitProgressUnit();
            break;
        }

    }
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_warpedUnit) == true)) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_03_AMON_Claimers, c_unitAllianceEnemy, gv_colonyShipLocations[lv_colonyShipIndex].lv_protossClaimerWaveTargetRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 1)) {
            UnitIssueOrder(lv_warpedUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupAlliance(gv_pLAYER_03_AMON_Claimers, c_unitAllianceEnemy, gv_colonyShipLocations[lv_colonyShipIndex].lv_protossClaimerWaveTargetRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_warpedUnit)))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_warpedUnit, OrderTargetingUnit(AbilityCommand("attack", 0), gv_colonyShipLocations[lv_colonyShipIndex].lv_colonyShipUnit), c_orderQueueReplace);
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClaimWaveUnitWarpedIn_Init () {
    gt_ClaimWaveUnitWarpedIn = TriggerCreate("gt_ClaimWaveUnitWarpedIn_Func");
    TriggerAddEventUnitConstructProgress(gt_ClaimWaveUnitWarpedIn, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protoss Claimer Wave Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ProtossClaimerWaveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gv_claimWaveTransmissionCount += 1;
    if ((gv_claimWaveTransmissionCount == 1)) {
        TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, true);
        libCOMI_gf_SendMissionTransmission("AttackDepartFirstJC", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("AttackDepartRepeatJC", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossClaimerWaveTransmissionQ_Init () {
    gt_ProtossClaimerWaveTransmissionQ = TriggerCreate("gt_ProtossClaimerWaveTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Claimer Wave Destroyed Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_ClaimerWaveDestroyedTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackStopPlayerJC", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClaimerWaveDestroyedTransmissionQ_Init () {
    gt_ClaimerWaveDestroyedTransmissionQ = TriggerCreate("gt_ClaimerWaveDestroyedTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF26283F8_g;
    int autoF26283F8_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DefeatJC", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveExtractColonyShipFailed, true, false);
    TriggerExecute(gt_ObjectivePreventProtossFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/124EBD46"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    autoF26283F8_g = libCOMI_gf_HumanPlayers();
    autoF26283F8_var = -1;
    while (true) {
        autoF26283F8_var = PlayerGroupNextPlayer(autoF26283F8_g, autoF26283F8_var);
        if (autoF26283F8_var < 0) { break; }
        CameraLockInput(autoF26283F8_var, true);
        UnitClearSelection(autoF26283F8_var);
        CameraPan(autoF26283F8_var, gv_defeatLocation, 1.5, -1, 10.0, false);
    }
    libCOMI_gf_WaitForMissionTransmission();
    Wait(3.0, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(libCOMI_gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory {Destory Zerg Base} Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestoryZergBaseCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestoryZergBaseCompleted_Init () {
    gt_VictoryDestoryZergBaseCompleted = TriggerCreate("gt_VictoryDestoryZergBaseCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveExtractColonyShipComplete, true, true);
    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedComplete, true, true);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto285B5B8B_g;
    int auto285B5B8B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendVictoryTransmission("VictoryJC");
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    auto285B5B8B_g = libCOMI_gf_HumanPlayers();
    auto285B5B8B_var = -1;
    while (true) {
        auto285B5B8B_var = PlayerGroupNextPlayer(auto285B5B8B_g, auto285B5B8B_var);
        if (auto285B5B8B_var < 0) { break; }
        CameraApplyInfo(auto285B5B8B_var, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(auto285B5B8B_var, UnitGetPosition(gv_colonyShipLocations[gv_victoryIndex].lv_colonyShipUnit), 2.0, -1, 10.0, false);
    }
    gf_AnimateColonyShipTakeoff(gv_victoryIndex);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/93FC67C5"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/4F2D2B30"), StringExternal("Param/Value/2DE76641"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E91D5A5F"), StringExternal("Param/Value/D61C8849"));
    TriggerExecute(libCOMI_gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract ColonyShip Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractColonyShipCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_JarbanPointCapture_Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_JarbanPointCapture_Primary01", gv_objectiveExtractColonyShipMax);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractColonyShipCreate_Init () {
    gt_ObjectiveExtractColonyShipCreate = TriggerCreate("gt_ObjectiveExtractColonyShipCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract ColonyShip Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractColonyShipComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExtractColonyShipCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractColonyShipComplete_Init () {
    gt_ObjectiveExtractColonyShipComplete = TriggerCreate("gt_ObjectiveExtractColonyShipComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract ColonyShip Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractColonyShipUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveExtractColonyShipCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_JarbanPointCapture_Primary01", gv_objectiveExtractColonyShipCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractColonyShipUpdate_Init () {
    gt_ObjectiveExtractColonyShipUpdate = TriggerCreate("gt_ObjectiveExtractColonyShipUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Extract ColonyShip Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExtractColonyShipFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExtractColonyShipCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExtractColonyShipFailed_Init () {
    gt_ObjectiveExtractColonyShipFailed = TriggerCreate("gt_ObjectiveExtractColonyShipFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Do Not Let Devices Be Destroyed Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_JarbanPointCapture_Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_JarbanPointCapture_Primary02", gv_objectiveDoNotLetDevicesBeDestroyedMax);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Init () {
    gt_ObjectiveDoNotLetDevicesBeDestroyedCreate = TriggerCreate("gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Do Not Let Devices Be Destroyed Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Primary02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Init () {
    gt_ObjectiveDoNotLetDevicesBeDestroyedComplete = TriggerCreate("gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Do Not Let Devices Be Destroyed Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_JarbanPointCapture_Primary02", gv_objectiveDoNotLetDevicesBeDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Init () {
    gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate = TriggerCreate("gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prevent Protoss Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventProtossFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDoNotLetDevicesBeDestroyedCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Primary02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventProtossFailed_Init () {
    gt_ObjectivePreventProtossFailed = TriggerCreate("gt_ObjectivePreventProtossFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Umojan Mine - Kill Blightbringer - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreUmojanMineKillBlightbringerCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_JarbanPointCapture_Bonus01c");
    gv_objectiveExploreUmojanMine_Kill = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    gv_objectiveExploreUmojanMine_Kill_TextDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreUmojanMineKillBlightbringerCreate_Init () {
    gt_ObjectiveExploreUmojanMineKillBlightbringerCreate = TriggerCreate("gt_ObjectiveExploreUmojanMineKillBlightbringerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Umojan Mine Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreUmojanMineUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_remainingTime;
    text lv_textTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveExploreUmojanMineKillBlightbringerCreate, true, false);
    lv_remainingTime = FixedToInt(TimerGetRemaining(gv_bonusObjective_BlightbringerExpire));
    TextExpressionSetToken("Param/Expression/97E07B75", "Timer", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_remainingTime));
    lv_textTime = TextExpressionAssemble("Param/Expression/97E07B75");
    if ((gv_objectiveExploreUmojanMine_Kill_TextDone == true)) {
        if ((libCOMI_gf_MissionObjectiveStateCheck("AC_JarbanPointCapture_Bonus01c", libCOMI_ge_MissionObjectiveState_Completed) == true)) {
            libCOMI_gf_SetMissionObjectiveCustomText("AC_JarbanPointCapture_Bonus01c", StringToText(""));
        }
        else {
            libCOMI_gf_SetMissionObjectiveCustomText("AC_JarbanPointCapture_Bonus01c", lv_textTime);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreUmojanMineUpdate_Init () {
    gt_ObjectiveExploreUmojanMineUpdate = TriggerCreate("gt_ObjectiveExploreUmojanMineUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Umojan Mine - Kill Blightbringer - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreUmojanMineKillBlightbringerComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExploreUmojanMineKillBlightbringerCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Bonus01c", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveProgress("AC_JarbanPointCapture_Bonus01c", 1);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreUmojanMineKillBlightbringerComplete_Init () {
    gt_ObjectiveExploreUmojanMineKillBlightbringerComplete = TriggerCreate("gt_ObjectiveExploreUmojanMineKillBlightbringerComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Umojan Mine Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreUmojanMineFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExploreUmojanMineKillBlightbringerCreate, true, false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_JarbanPointCapture_Bonus01c", StringToText(""));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Bonus01c", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreUmojanMineFailed_Init () {
    gt_ObjectiveExploreUmojanMineFailed = TriggerCreate("gt_ObjectiveExploreUmojanMineFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Science Facility - Destroy - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreScienceFacilityDestroyCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_JarbanPointCapture_Bonus02b");
    gv_objectiveExploreScienceFacility_Destroy = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    gv_objectiveExploreScienceFacility_Destroy_TextDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreScienceFacilityDestroyCreate_Init () {
    gt_ObjectiveExploreScienceFacilityDestroyCreate = TriggerCreate("gt_ObjectiveExploreScienceFacilityDestroyCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Science Facility Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreScienceFacilityUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_remainingTime;
    text lv_textTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_remainingTime = FixedToInt(TimerGetRemaining(gv_eradicatorExpireTimer));
    TextExpressionSetToken("Param/Expression/6BA0298C", "Timer", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_remainingTime));
    lv_textTime = TextExpressionAssemble("Param/Expression/6BA0298C");
    if ((gv_objectiveExploreScienceFacility_Destroy_TextDone == true)) {
        libCOMI_gf_SetMissionObjectiveProgress("AC_JarbanPointCapture_Bonus02b", gv_objectiveExploreScienceFacility_EradicatorsDestroyed);
        if ((libCOMI_gf_MissionObjectiveStateCheck("AC_JarbanPointCapture_Bonus02b", libCOMI_ge_MissionObjectiveState_Completed) == true)) {
            libCOMI_gf_SetMissionObjectiveCustomText("AC_JarbanPointCapture_Bonus02b", StringToText(""));
        }
        else {
            libCOMI_gf_SetMissionObjectiveCustomText("AC_JarbanPointCapture_Bonus02b", lv_textTime);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreScienceFacilityUpdate_Init () {
    gt_ObjectiveExploreScienceFacilityUpdate = TriggerCreate("gt_ObjectiveExploreScienceFacilityUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Science Facility - Destroy - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreScienceFacilityDestroyComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExploreScienceFacilityDestroyCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Bonus02b", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveProgress("AC_JarbanPointCapture_Bonus02b", gv_objectiveExploreScienceFacility_EradicatorsDestroyed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreScienceFacilityDestroyComplete_Init () {
    gt_ObjectiveExploreScienceFacilityDestroyComplete = TriggerCreate("gt_ObjectiveExploreScienceFacilityDestroyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Explore Science Facility Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExploreScienceFacilityFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveExploreScienceFacilityDestroyCreate, true, false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_JarbanPointCapture_Bonus02b", StringToText(""));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_JarbanPointCapture_Bonus02b", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExploreScienceFacilityFailed_Init () {
    gt_ObjectiveExploreScienceFacilityFailed = TriggerCreate("gt_ObjectiveExploreScienceFacilityFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_CreateOptionsDialog_Init();
    gt_OpenOptions_Init();
    gt_CloseOptions_Init();
    gt_InitializeColonyShipLocations_Init();
    gt_Init01LoadData_Init();
    gt_Init02LoadingComplete_Init();
    gt_Init03Players_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
    gt_CharExample_Init();
    gt_InfestMercs_Init();
    gt_CreateColonyShipPings_Init();
    gt_MissionProgression_Init();
    gt_EnableAIInfestedBansheeCloak_Init();
    gt_InfestedComeDownRamp_Init();
    gt_NeverTakeMeAliveQ_Init();
    gt_AberrationSurpriseQ_Init();
    gt_MovingEquipmentQ_Init();
    gt_SiegeTanksSiegeUp_Init();
    gt_EffortValue_Init();
    gt_PlayerEntersColonyShipBeacon_Init();
    gt_PlayerInitiatesLaunchingTransmissionQ_Init();
    gt_ColonyShipAttackedWarning_Init();
    gt_ColonyShipAttackedWarningInfesetedTransmissionQ_Init();
    gt_ColonyShipAttackedWarningAmonTransmissionQ_Init();
    gt_ColonyShipLowLifeWarningInfesetedTransmissionQ_Init();
    gt_ColonyShipLowLifeWarningAmonTransmissionQ_Init();
    gt_ColonyShipIsDestroyed_Init();
    gt_ColonyShipsDestroyedWarningQ_Init();
    gt_ColonyShipsObjectiveReminderQ_Init();
    gt_ForceColonyShipSetup_Init();
    gt_ForceColonyShipUpdateIndex_Init();
    gt_PANICEvent_Init();
    gt_ForceColonyShipWarningTransmissionQ_Init();
    gt_ForceColonyShipInitiatingTransmissionQ_Init();
    gt_BonusObjectiveStartA_Init();
    gt_BonusObjectiveStartB_Init();
    gt_BonusObjectiveRevealMinesQ_Init();
    gt_BonusObjectiveProximityMines_Init();
    gt_BonusObjectiveRevealScienceFacilityQ_Init();
    gt_BonusObjectiveProximityRevealScienceFacility_Init();
    gt_BonusObjectiveCollectedMinesQ_Init();
    gt_BonusObjectiveCollectedFacilityQ_Init();
    gt_BonusObjectiveBlightbringerStart_Init();
    gt_BonusObjectiveBlightbringerBattleAI_Init();
    gt_BonusObjectiveBlightbringerEggCreated_Init();
    gt_BonusObjectiveBlightbringerDies_Init();
    gt_BonusObjectiveBlightbringerTimerExpiresQ_Init();
    gt_BonusObjectiveBlightbringerTimerUpdate_Init();
    gt_BonusObjectiveBlightbringerReminderQ_Init();
    gt_BonusObjectiveCoopStartScienceFacility_Init();
    gt_BonusObjectiveCoopTimerManagement_Init();
    gt_BonusObjectiveEradicatorTimerExpires_Init();
    gt_BonusObjectiveEradicatorReminderQ_Init();
    gt_BonusObjectiveEradicatorExpiresQ_Init();
    gt_BonusObjectiveCoopSpawnAdds_Init();
    gt_BonusObjectiveCoopAddsLogic_Init();
    gt_BonusObjectiveActivateEradicatorTransmissionQ_Init();
    gt_BonusObjectiveActivateEradicatorEnrageTransmissionQ_Init();
    gt_BonusObjectiveEradicatorTypeMissile_Init();
    gt_BonusObjectiveEradicatorTypeCannon_Init();
    gt_BonusObjectiveEradicatorTypeMissileEnrage_Init();
    gt_BonusObjectiveEradicatorTypeCannonEnrage_Init();
    gt_BonusObjectiveEradicatorDies_Init();
    gt_TrackInfestedKills_Init();
    gt_EnemyAttackingQ_Init();
    gt_SetupInfestedPoints_Init();
    gt_RemoveStolenRageWaveUnit_Init();
    gt_SetupProtossAIWarpInUnits_Init();
    gt_BASEAttack01_Init();
    gt_BASEAttack02_Init();
    gt_BASEAttack03_Init();
    gt_BASEAttack04_Init();
    gt_BASEAttack05_Init();
    gt_BASEAttack06_Init();
    gt_BASEAttack07_Init();
    gt_ProtossBaseAttackUnitWarpingIn_Init();
    gt_CLAIMERWaveSmall_Init();
    gt_CLAIMERWaveMedium_Init();
    gt_CLAIMERWaveLarge_Init();
    gt_InitializeClaimerWaveTargetPriority_Init();
    gt_ClaimWaveUnitWarpedIn_Init();
    gt_ProtossClaimerWaveTransmissionQ_Init();
    gt_ClaimerWaveDestroyedTransmissionQ_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryDestoryZergBaseCompleted_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_ObjectiveExtractColonyShipCreate_Init();
    gt_ObjectiveExtractColonyShipComplete_Init();
    gt_ObjectiveExtractColonyShipUpdate_Init();
    gt_ObjectiveExtractColonyShipFailed_Init();
    gt_ObjectiveDoNotLetDevicesBeDestroyedCreate_Init();
    gt_ObjectiveDoNotLetDevicesBeDestroyedComplete_Init();
    gt_ObjectiveDoNotLetDevicesBeDestroyedUpdate_Init();
    gt_ObjectivePreventProtossFailed_Init();
    gt_ObjectiveExploreUmojanMineKillBlightbringerCreate_Init();
    gt_ObjectiveExploreUmojanMineUpdate_Init();
    gt_ObjectiveExploreUmojanMineKillBlightbringerComplete_Init();
    gt_ObjectiveExploreUmojanMineFailed_Init();
    gt_ObjectiveExploreScienceFacilityDestroyCreate_Init();
    gt_ObjectiveExploreScienceFacilityUpdate_Init();
    gt_ObjectiveExploreScienceFacilityDestroyComplete_Init();
    gt_ObjectiveExploreScienceFacilityFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
