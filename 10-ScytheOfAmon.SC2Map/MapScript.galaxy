//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Scythe of Amon
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const string gv_c_TempAdvisorImage = "ImmortalShakurasPortrait";
const int gv_c_VoidSliversCount = 5;
const fixed gv_bONUSCAPDURATION = 20.0;
const int gv_c_EscortShipMax = 3;
const int gv_pLAYER_03_Player01Enemy = 8;
const int gv_pLAYER_04_Player02Enemy = 9;
const int gv_pLAYER_03_BULLIES = 8;
const int gv_pLAYER_04_BULLIES = 9;
const int gv_pLAYER_05_VOIDFORCES = 10;
const int gv_pLAYER_06_VOIDFORCES = 6;
const int gv_pLAYER_07_VOIDFORCES = 7;
const int gv_pLAYER_11_BONUSESCORT = 11;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
text gv_c_TempAdvisorName;
fixed gv_sliverKilledFailTimerIncrease;
timer gv_missionFailTimer;
int gv_missionFailTimerWindow;
unit[6] gv_voidSlivers;
fixed gv_voidSliverGenericCooldown;
fixed gv_voidSliverShockwaveRange;
fixed gv_voidSliverShockwaveCooldown;
fixed gv_voidSliverDeathGripRange;
fixed gv_voidSliverDeathGripVitalityGrabbed;
fixed gv_voidSliverDeathGripCooldown;
fixed gv_voidSliverUnstableEnergyRange;
fixed gv_voidSliverUnstableEnergyCooldown;
int gv_voidSliver_KilledAbilityUnlock_Shockwave;
int gv_voidSliver_KilledAbilityUnlock_DeathGrip;
int gv_voidSliver_KilledAbilityUnlock_UnstableEnergy;
fixed gv_voidSliverDifficultyIncreaseShields;
fixed gv_voidSliverDifficultyIncreaseAbilityCooldownReductionPercent;
fixed[3] gv_voidSliverRunningDamage;
unitgroup gv_bonus_EvacPointGroup;
unit gv_bonus_EvacPointNorth;
unit gv_bonus_EvacPointEast;
unit gv_bonus_EvacPointSouth;
unit gv_bonus_EvacPointStart;
point gv_bonus_DestinationEvacPoint;
point gv_bonusObjectiveSpawnPt;
fixed gv_bonusObjectiveSpeed;
fixed gv_bonusObjectiveHealth;
fixed gv_bonusObjectiveShields;
bool gv_escortPointNorthFirst;
unit gv_currentEscortShip;
unit gv_amonDeathBeam;
point gv_wave04_ExpoAttack;
string gv_hybridMajor;
string gv_hybridMinor;
point gv_wave02_RampAttack;
point gv_pLAYER04_EXPO_ATTACKWAYPOINT;
point gv_pLAYER04_ATTACKWAYPOINT;
point gv_pLAYER03_EXPO_ATTACKWAYPOINT;
point gv_pLAYER03_ATTACKWAYPOINT;
bool gv_attackWave02_AttackP1;
int gv_objectiveFailTimer;
int gv_objectiveDestroyVoidSlivers;
string[gv_c_EscortShipMax + 1] gv_bonusObjectives;
int[gv_c_EscortShipMax + 1] gv_objectiveEscortEvacShips;
int gv_powerEvacPointsCount;
int gv_warpPrismsLeft;
int gv_warpPrismsMax;
int[3] gv_victoryStat_UnitsLostToSliver;
int[3] gv_victoryStat_VoidUnitsKilled;
int gv_leaderboardTimeScoreFinal;
int[gv_c_EscortShipMax + 1] gv_leaderboardBonusScoreFinal;
fixed[gv_c_EscortShipMax + 1] gv_bonusObjectiveDamageTaken;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
playergroup gv_enemyPlayerGroup_All;
playergroup gv_enemyPlayerGroup_VoidForces;
playergroup gv_allyPlayerGroup;
unit gv_amonUnit;
unit gv_chosenVoidSliver;
int[4] gv_optionsDialogMenus;
int gv_optionsDialogAccept;
int[4] gv_optionsDialogLabels;
int gv_optionsDialogTitle;
int gv_optionsDialog;
int[4] gv_wavePattern;

void InitGlobals () {
    int init_i;

    gv_c_TempAdvisorName = StringExternal("Param/Value/DA2AE412");
    gv_missionFailTimer = TimerCreate();
    gv_missionFailTimerWindow = c_timerWindowNone;
    gv_bonus_EvacPointGroup = UnitGroupEmpty();
    gv_pLAYER04_EXPO_ATTACKWAYPOINT = PointFromId(207123326);
    gv_pLAYER04_ATTACKWAYPOINT = PointFromId(2080400002);
    gv_pLAYER03_EXPO_ATTACKWAYPOINT = PointFromId(427894755);
    gv_pLAYER03_ATTACKWAYPOINT = PointFromId(1162714313);
    gv_objectiveFailTimer = c_invalidObjectiveId;
    gv_objectiveDestroyVoidSlivers = c_invalidObjectiveId;
    for (init_i = 0; init_i <= gv_c_EscortShipMax; init_i += 1) {
        gv_objectiveEscortEvacShips[init_i] = c_invalidObjectiveId;
    }
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_enemyPlayerGroup_All = PlayerGroupEmpty();
    gv_enemyPlayerGroup_VoidForces = PlayerGroupEmpty();
    gv_allyPlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogMenus[init_i] = c_invalidDialogControlId;
    }
    gv_optionsDialogAccept = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogLabels[init_i] = c_invalidDialogControlId;
    }
    gv_optionsDialogTitle = c_invalidDialogControlId;
    gv_optionsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_wavePattern[init_i] = 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_PlusOrMinus ();
int gf_NumberofDestroyedVoidSlivers ();
void gf_VoidSliverAI (int lp_index, unit lp_voidSliver);
void gf_VoidSliverAbilityDeathGripUnit (unit lp_casterUnit, region lp_targetRegion);
void gf_VoidSliverAbilityShockwave (unit lp_voidSliver, region lp_targetRegion);
void gf_VoidSliverAbilityUnstableEnergy (unit lp_voidSliver, region lp_targetRegion);
void gf_InitiateBonusObjectiveEscort (point lp_escortSpawnLocation, point lp_destinationLocation, int lp_objectiveIndex);
void gf_CreateEscortUnit (point lp_spawnPoint);
void gf_SendEscortUnit (unit lp_escortUnit, point lp_evacPoint, int lp_bonusObjectiveIndex, int lp_pathDisplay);
void gf_MarkEscortUnitBlocker (unit lp_escortUnitObstacle);
void gf_EvacueeCeremony (point lp_evacShipDestination);
void gf_EvacueeWarpOut (unit lp_evacuee, point lp_warpOutLocation);
string gf_TransportType (int lp_player);
void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave, bool lp_difficultyCheck);
void gf_CleanUpAttackWaveTransports (unitgroup lp_transports, point lp_cleanupLocation);
void gf_CreateWarpInEffect (unit lp_unit);
void gf_ObjectiveEscortEvacShipsCreate (int lp_escortObjective);
void gf_ObjectiveEscortEvacShipsUpdate (int lp_escortObjective);
void gf_ObjectiveEscortEvacShipsComplete (int lp_escortObjective);
void gf_ObjectiveEscortEvacShipsFailed (int lp_escortObjective);
void gf_InfestedBunker (unit lp_bunker);
void gf_MissionEventatTime (fixed lp_time, trigger lp_missionEvent);
fixed gf_UnitGroupTotalVitality (unitgroup lp_unitGroup);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MissionEvents;
trigger gt_FailXP;
trigger gt_FailTimerWindow;
trigger gt_FailWarningQ;
trigger gt_FailImminentQ;
trigger gt_VoidACShardModifyHealth;
trigger gt_VoidSliverDies;
trigger gt_TransmissionVoidSliverDestroyedQ;
trigger gt_VoidSliverWarningController;
trigger gt_TransmissionSliverWarning1DestroyedQ;
trigger gt_TransmissionSliverWarning2DestroyedQ;
trigger gt_TransmissionSliverWarning3DestroyedQ;
trigger gt_TransmissionSliverWarning4DestroyedQ;
trigger gt_ScoreScreenVoidSliverDamageTaken;
trigger gt_StartBonusObjectiveA;
trigger gt_StartBonusObjectiveB;
trigger gt_StartBonusObjectiveC;
trigger gt_BonusEscortIntroPingEvacPoints;
trigger gt_BonusEscortIntroQ;
trigger gt_BonusEscortCreateQ;
trigger gt_BonusEscortMovingQ;
trigger gt_BonusEscortStoppedQ;
trigger gt_BonusEscortFailedQ;
trigger gt_BonusEscortCompleteQ;
trigger gt_TurnOnRain;
trigger gt_TurnOnLightningStrikes;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryVoidSliversDestroyedCompleted;
trigger gt_P01Fanfare;
trigger gt_P02Fanfare;
trigger gt_DefeatAmonBeamController;
trigger gt_AttackWave02;
trigger gt_AttackWave03ExpoAttack;
trigger gt_AttackWave04BaseAttack;
trigger gt_AttackWave05a;
trigger gt_AttackWave05b;
trigger gt_SetupHybridTypes;
trigger gt_EnemyAttackingQ;
trigger gt_VoidSpawnsReinforcements01;
trigger gt_VoidSpawnsReinforcements02;
trigger gt_VoidSpawnsReinforcements03;
trigger gt_VoidSpawnsReinforcements04Hard;
trigger gt_ObjectiveFailTimerCreate;
trigger gt_ObjectiveFailTimerComplete;
trigger gt_ObjectiveFailTimerUpdate;
trigger gt_ObjectiveFailTimerFailed;
trigger gt_ObjectiveDestroyVoidSliversCreate;
trigger gt_ObjectiveDestroyVoidSliversComplete;
trigger gt_ObjectiveDestroyVoidSliversUpdate;
trigger gt_ObjectiveDestroyVoidSliversFailed;
trigger gt_VictoryStatsForUnitsThatDie;
trigger gt_VoidEntitySpawned;
trigger gt_Init03LoadingComplete;
trigger gt_Init02Players;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_Init08aDifficultySettingsVoidSlivers;
trigger gt_StartAI;
trigger gt_StartGameQ;
trigger gt_CreateOptionsDialog;
trigger gt_OpenOptions;
trigger gt_CloseOptions;
trigger gt_AttackWave01c;
trigger gt_AttackWave05c;
trigger gt_AttackWave06c;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_PlusOrMinus () {
    // Automatic Variable Declarations
    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        return 1;
    }
    else {
        return -1;
    }
}

int gf_NumberofDestroyedVoidSlivers () {
    // Variable Declarations
    int lv_iter;
    int lv_destroyedNodes;

    // Automatic Variable Declarations
    const int auto6016ED47_ae = gv_c_VoidSliversCount;
    const int auto6016ED47_ai = 1;

    // Variable Initialization

    // Implementation
    lv_iter = 1;
    for ( ; ( (auto6016ED47_ai >= 0 && lv_iter <= auto6016ED47_ae) || (auto6016ED47_ai < 0 && lv_iter >= auto6016ED47_ae) ) ; lv_iter += auto6016ED47_ai ) {
        if ((UnitIsAlive(gv_voidSlivers[lv_iter]) == false)) {
            lv_destroyedNodes += 1;
        }

    }
    return lv_destroyedNodes;
}

trigger auto_gf_VoidSliverAI_Trigger = null;
int auto_gf_VoidSliverAI_lp_index;
unit auto_gf_VoidSliverAI_lp_voidSliver;

void gf_VoidSliverAI (int lp_index, unit lp_voidSliver) {
    auto_gf_VoidSliverAI_lp_index = lp_index;
    auto_gf_VoidSliverAI_lp_voidSliver = lp_voidSliver;

    if (auto_gf_VoidSliverAI_Trigger == null) {
        auto_gf_VoidSliverAI_Trigger = TriggerCreate("auto_gf_VoidSliverAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_VoidSliverAI_Trigger, false, false);
}

bool auto_gf_VoidSliverAI_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_VoidSliverAI_lp_index;
    unit lp_voidSliver = auto_gf_VoidSliverAI_lp_voidSliver;

    // Variable Declarations
    region lv_voidSliverRegion_DeathGrip;
    region lv_voidSliverRegion_Shockwave;
    region lv_voidSliverRegion_UnstableEnergy;
    timer lv_timerGeneric;
    timer lv_timerDeathGrip;
    timer lv_timerShockwave;
    timer lv_timerUnstableEnergy;
    point lv_deathGripSliverSpawn;
    unitgroup lv_deathGripTargets;
    int lv_deathGripSliverCount;

    // Automatic Variable Declarations
    int auto025251BE_n;
    int auto025251BE_i;

    // Variable Initialization
    lv_timerGeneric = TimerCreate();
    lv_timerDeathGrip = TimerCreate();
    lv_timerShockwave = TimerCreate();
    lv_timerUnstableEnergy = TimerCreate();
    lv_deathGripTargets = UnitGroupEmpty();

    // Implementation
    lv_voidSliverRegion_DeathGrip = RegionCircle(UnitGetPosition(lp_voidSliver), gv_voidSliverDeathGripRange);
    lv_voidSliverRegion_Shockwave = RegionCircle(UnitGetPosition(lp_voidSliver), gv_voidSliverShockwaveRange);
    lv_voidSliverRegion_UnstableEnergy = RegionCircle(UnitGetPosition(lp_voidSliver), gv_voidSliverUnstableEnergyRange);
    while ((UnitIsAlive(lp_voidSliver) == true) && (libCOMI_gf_GameIsOver() == false)) {
        if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_voidSliver) == true) && ((gf_NumberofDestroyedVoidSlivers() == gv_voidSliver_KilledAbilityUnlock_Shockwave) || (gf_NumberofDestroyedVoidSlivers() == 4)) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lv_voidSliverRegion_Shockwave, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TimerGetRemaining(lv_timerGeneric) <= 0.0) && (TimerGetRemaining(lv_timerShockwave) <= 0.0)) {
            gf_VoidSliverAbilityShockwave(lp_voidSliver, lv_voidSliverRegion_Shockwave);
            TimerStart(lv_timerShockwave, gv_voidSliverShockwaveCooldown, false, c_timeGame);
            TimerStart(lv_timerGeneric, gv_voidSliverGenericCooldown, false, c_timeGame);
        }

        lv_deathGripTargets = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lv_voidSliverRegion_DeathGrip, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_voidSliver) == true) && (UnitGroupCount(lv_deathGripTargets, c_unitCountAlive) >= 1) && (TimerGetRemaining(lv_timerGeneric) <= 0.0) && (TimerGetRemaining(lv_timerDeathGrip) <= 0.0) && ((gf_NumberofDestroyedVoidSlivers() == gv_voidSliver_KilledAbilityUnlock_DeathGrip) || (gf_NumberofDestroyedVoidSlivers() == 4))) {
            if ((gf_NumberofDestroyedVoidSlivers() >= 3)) {
                lv_deathGripSliverCount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 0, 0);
            }
            else {
                lv_deathGripSliverCount = 1;
            }
            auto025251BE_n = lv_deathGripSliverCount;
            for (auto025251BE_i = 1; auto025251BE_i <= auto025251BE_n; auto025251BE_i += 1) {
                lv_deathGripSliverSpawn = PointWithOffsetPolar(UnitGetPosition(lp_voidSliver), RandomFixed(10.0, 15.0), (AngleBetweenPoints(UnitGetPosition(lp_voidSliver), UnitGroupCenterOfGroup(lv_deathGripTargets)) + (gf_PlusOrMinus() * RandomFixed(45.0, 90.0))));
                UnitCreate(1, "VoidSliverDeathGripCrystalAC", 0, UnitGetOwner(lp_voidSliver), lv_deathGripSliverSpawn, libNtve_gf_RandomAngle());
                UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", 0, c_animTimeDefault);
                gf_VoidSliverAbilityDeathGripUnit(UnitLastCreated(), lv_voidSliverRegion_DeathGrip);
                if ((lv_deathGripSliverCount > 1)) {
                    Wait(12.0, c_timeGame);
                }

                if (((UnitIsAlive(lp_voidSliver) == false) || (UnitGroupCount(lv_deathGripTargets, c_unitCountAlive) == 0))) {
                    break;
                }

            }
            TimerStart(lv_timerDeathGrip, gv_voidSliverDeathGripCooldown, false, c_timeGame);
            TimerStart(lv_timerGeneric, gv_voidSliverGenericCooldown, false, c_timeGame);
        }

        if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_voidSliver) == true) && (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lv_voidSliverRegion_UnstableEnergy, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && (TimerGetRemaining(lv_timerGeneric) <= 0.0) && (TimerGetRemaining(lv_timerUnstableEnergy) <= 0.0) && ((gf_NumberofDestroyedVoidSlivers() == gv_voidSliver_KilledAbilityUnlock_UnstableEnergy) || (gf_NumberofDestroyedVoidSlivers() == 4))) {
            gf_VoidSliverAbilityUnstableEnergy(lp_voidSliver, lv_voidSliverRegion_UnstableEnergy);
            TimerStart(lv_timerUnstableEnergy, gv_voidSliverUnstableEnergyCooldown, false, c_timeGame);
            TimerStart(lv_timerGeneric, gv_voidSliverGenericCooldown, false, c_timeGame);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_VoidSliverAbilityDeathGripUnit_Trigger = null;
unit auto_gf_VoidSliverAbilityDeathGripUnit_lp_casterUnit;
region auto_gf_VoidSliverAbilityDeathGripUnit_lp_targetRegion;

void gf_VoidSliverAbilityDeathGripUnit (unit lp_casterUnit, region lp_targetRegion) {
    auto_gf_VoidSliverAbilityDeathGripUnit_lp_casterUnit = lp_casterUnit;
    auto_gf_VoidSliverAbilityDeathGripUnit_lp_targetRegion = lp_targetRegion;

    if (auto_gf_VoidSliverAbilityDeathGripUnit_Trigger == null) {
        auto_gf_VoidSliverAbilityDeathGripUnit_Trigger = TriggerCreate("auto_gf_VoidSliverAbilityDeathGripUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_VoidSliverAbilityDeathGripUnit_Trigger, false, false);
}

bool auto_gf_VoidSliverAbilityDeathGripUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_casterUnit = auto_gf_VoidSliverAbilityDeathGripUnit_lp_casterUnit;
    region lp_targetRegion = auto_gf_VoidSliverAbilityDeathGripUnit_lp_targetRegion;

    // Variable Declarations
    aifilter lv_allNearbyEnemiesFilter;
    unitgroup lv_allNearbyEnemies;
    unitgroup lv_targetGroup;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    unitgroup auto15915037_g;
    int auto15915037_u;
    unitgroup autoB85A28BE_g;
    int autoB85A28BE_u;

    // Variable Initialization
    lv_allNearbyEnemiesFilter = AIFilter(UnitGetOwner(lp_casterUnit));
    lv_allNearbyEnemies = UnitGroupEmpty();
    lv_targetGroup = UnitGroupEmpty();

    // Implementation
    Wait(6.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsValid(lp_casterUnit) == true)) {
        AISetFilterAlliance(lv_allNearbyEnemiesFilter, c_playerGroupEnemy);
        AISetFilterBits(lv_allNearbyEnemiesFilter, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
        AISetFilterRange(lv_allNearbyEnemiesFilter, lp_casterUnit, gv_voidSliverDeathGripRange);
        lv_allNearbyEnemies = AIGetFilterGroup(lv_allNearbyEnemiesFilter, UnitGroup(null, c_playerAny, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto15915037_g = lv_allNearbyEnemies;
        auto15915037_u = UnitGroupCount(auto15915037_g, c_unitCountAll);
        for (;; auto15915037_u -= 1) {
            lv_targetUnit = UnitGroupUnitFromEnd(auto15915037_g, auto15915037_u);
            if (lv_targetUnit == null) { break; }
            if ((UnitHasBehavior2(lv_targetUnit, "VoidTendrilDeathGripAutoCastBeamHeight") == true)) {
                UnitGroupRemove(lv_allNearbyEnemies, lv_targetUnit);
            }

        }
        if ((UnitGroupCount(lv_allNearbyEnemies, c_unitCountAlive) <= 0)) {
            return true;
        }

        while ((UnitGroupCount(lv_allNearbyEnemies, c_unitCountAlive) > 0) && (gf_UnitGroupTotalVitality(lv_targetGroup) < gv_voidSliverDeathGripVitalityGrabbed)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_allNearbyEnemies, c_unitCountAlive);
            UnitGroupAdd(lv_targetGroup, lv_targetUnit);
            UnitGroupRemove(lv_allNearbyEnemies, lv_targetUnit);
        }
        autoB85A28BE_g = lv_targetGroup;
        autoB85A28BE_u = UnitGroupCount(autoB85A28BE_g, c_unitCountAll);
        for (;; autoB85A28BE_u -= 1) {
            lv_targetUnit = UnitGroupUnitFromEnd(autoB85A28BE_g, autoB85A28BE_u);
            if (lv_targetUnit == null) { break; }
            UnitIssueOrder(lp_casterUnit, OrderTargetingUnit(AbilityCommand("CoopVoidSliverDeathGripAutoCast", 0), lv_targetUnit), c_orderQueueAddToEnd);
        }
        Wait(20.0, c_timeAI);
    }
    return true;
}

void gf_VoidSliverAbilityShockwave (unit lp_voidSliver, region lp_targetRegion) {
    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;
    int lv_targetPointTargetCount;
    int lv_possibleTargetPointTargetCount;

    // Automatic Variable Declarations
    unitgroup auto160C49C9_g;
    int auto160C49C9_u;
    unit auto160C49C9_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto160C49C9_g = lv_enemyGroup;
    auto160C49C9_u = UnitGroupCount(auto160C49C9_g, c_unitCountAll);
    for (;; auto160C49C9_u -= 1) {
        auto160C49C9_var = UnitGroupUnitFromEnd(auto160C49C9_g, auto160C49C9_u);
        if (auto160C49C9_var == null) { break; }
        if (((UnitGetType(auto160C49C9_var) == "Interceptor") || (UnitGetType(auto160C49C9_var) == "InterceptorAiur") || (UnitGetType(auto160C49C9_var) == "CarrierRepairDrone"))) {
            UnitGroupRemove(lv_enemyGroup, auto160C49C9_var);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
        UnitIssueOrder(lp_voidSliver, Order(AbilityCommand("VoidShardACShockwave", 0)), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        AISetUnitScriptControlled(lp_voidSliver, false);
    }

}

void gf_VoidSliverAbilityUnstableEnergy (unit lp_voidSliver, region lp_targetRegion) {
    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;
    int lv_targetPointTargetCount;
    int lv_possibleTargetPointTargetCount;

    // Automatic Variable Declarations
    unitgroup auto1A2E6292_g;
    int auto1A2E6292_u;
    unit auto1A2E6292_var;
    unitgroup autoEF25E030_g;
    int autoEF25E030_u;
    unit autoEF25E030_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto1A2E6292_g = lv_enemyGroup;
    auto1A2E6292_u = UnitGroupCount(auto1A2E6292_g, c_unitCountAll);
    for (;; auto1A2E6292_u -= 1) {
        auto1A2E6292_var = UnitGroupUnitFromEnd(auto1A2E6292_g, auto1A2E6292_u);
        if (auto1A2E6292_var == null) { break; }
        if (((UnitGetType(auto1A2E6292_var) == "Interceptor") || (UnitGetType(auto1A2E6292_var) == "InterceptorAiur") || (UnitGetType(auto1A2E6292_var) == "CarrierRepairDrone"))) {
            UnitGroupRemove(lv_enemyGroup, auto1A2E6292_var);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0)) {
        lv_targetPoint = UnitGetPosition(UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive));
        autoEF25E030_g = lv_enemyGroup;
        autoEF25E030_u = UnitGroupCount(autoEF25E030_g, c_unitCountAll);
        for (;; autoEF25E030_u -= 1) {
            autoEF25E030_var = UnitGroupUnitFromEnd(autoEF25E030_g, autoEF25E030_u);
            if (autoEF25E030_var == null) { break; }
            lv_possibleTargetPointTargetCount = UnitGroupCount(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(autoEF25E030_var), 4.0), 0), c_unitCountAlive);
            if ((lv_possibleTargetPointTargetCount > lv_targetPointTargetCount)) {
                lv_targetPoint = UnitGetPosition(autoEF25E030_var);
                lv_targetPointTargetCount = lv_possibleTargetPointTargetCount;
            }

        }
        UnitIssueOrder(lp_voidSliver, OrderTargetingPoint(AbilityCommand("VoidShardACUnstableEnergy", 0), lv_targetPoint), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        AISetUnitScriptControlled(lp_voidSliver, false);
    }

}

void gf_InitiateBonusObjectiveEscort (point lp_escortSpawnLocation, point lp_destinationLocation, int lp_objectiveIndex) {
    // Variable Declarations
    int lv_escortPathDisplay;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsValid(gv_currentEscortShip) == false)) {
        gf_CreateEscortUnit(lp_escortSpawnLocation);
        gv_currentEscortShip = UnitLastCreated();
    }
    else {
        while ((UnitGetType(gv_currentEscortShip) == "WarpPrismPhasing")) {
            UnitSetPropertyFixed(gv_currentEscortShip, c_unitPropShieldsPercent, 100.0);
            UnitSetPropertyFixed(gv_currentEscortShip, c_unitPropLifePercent, 100.0);
            UnitIssueOrder(gv_currentEscortShip, Order(AbilityCommand("TransportMode", 0)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
        }
        libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(gv_currentEscortShip, 1), true);
    }
    if ((lp_objectiveIndex == 1)) {
        TriggerExecute(gt_BonusEscortIntroQ, true, false);
    }
    else {
        TriggerExecute(gt_BonusEscortCreateQ, true, false);
    }
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_bonus_DestinationEvacPoint, 20.0, Color(100.00, 100.00, 0.00));
    PathCreateForUnit(PlayerGroupAll(), gv_currentEscortShip);
    PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
    PathSetColor(PathLastCreated(), c_pathLocationAll, Color(100.00, 100.00, 0.00));
    lv_escortPathDisplay = PathLastCreated();
    UnitIssueOrder(gv_currentEscortShip, OrderTargetingPoint(AbilityCommand("move", 0), lp_destinationLocation), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_currentEscortShip, true);
    Wait(40.0, c_timeGame);
    TriggerExecute(gt_BonusEscortMovingQ, true, false);
    libNtve_gf_MakeUnitInvulnerable(gv_currentEscortShip, false);
    libNtve_gf_PauseUnit(gv_currentEscortShip, false);
    gf_SendEscortUnit(gv_currentEscortShip, lp_destinationLocation, lp_objectiveIndex, lv_escortPathDisplay);
}

void gf_CreateEscortUnit (point lp_spawnPoint) {
    // Variable Declarations
    unit lv_createdShuttleUnit;
    int lv_debugIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, "WarpPrism", 0, gv_pLAYER_11_BONUSESCORT, lp_spawnPoint, 135.0);
    lv_createdShuttleUnit = UnitLastCreated();
    UnitStatusBarOverride(lv_createdShuttleUnit, c_unitStatusGroupAll);
    UnitSetPropertyFixed(lv_createdShuttleUnit, c_unitPropLifeMax, gv_bonusObjectiveHealth);
    UnitSetPropertyFixed(lv_createdShuttleUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_createdShuttleUnit, c_unitPropShieldsMax, gv_bonusObjectiveShields);
    UnitSetPropertyFixed(lv_createdShuttleUnit, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(lv_createdShuttleUnit, c_unitPropBaseMovementSpeed, gv_bonusObjectiveSpeed);
    UnitBehaviorAddPlayer(lv_createdShuttleUnit, "MapBossAttributeFlagBehavior", gv_pLAYER_11_BONUSESCORT, 1);
    UnitSetState(lv_createdShuttleUnit, c_unitStateTargetable, false);
    UnitSetState(lv_createdShuttleUnit, c_unitStateStoppable, false);
    UnitSetScale(lv_createdShuttleUnit, 200.0, 200.0, 200.0);
    libCOMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/5F18514D"), StringExternal("Param/Value/710AFB1E"), null);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lv_createdShuttleUnit), UnitTypeGetName(UnitGetType(lv_createdShuttleUnit)));
    libHots_gf_StorePingForUnit(lv_createdShuttleUnit, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), lv_createdShuttleUnit);
    UnitIssueOrder(lv_createdShuttleUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    ActorSend(libNtve_gf_MainActorofUnit(lv_createdShuttleUnit), libNtve_gf_SetOpacity(0.0, 0));
    UnitBehaviorAdd(lv_createdShuttleUnit, "SOAWarpInReinforcements", lv_createdShuttleUnit, 1);
    UnitBehaviorAdd(lv_createdShuttleUnit, "ProtossGenericWarpInOutAir", lv_createdShuttleUnit, 1);
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lv_createdShuttleUnit) == false)) {
        return ;
    }

    ActorSend(libNtve_gf_MainActorofUnit(lv_createdShuttleUnit), libNtve_gf_SetOpacity(1.0, 0));
    UnitBehaviorAdd(UnitLastCreated(), "WarpInEffect15", lv_createdShuttleUnit, 1);
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(lv_createdShuttleUnit) == false)) {
        return ;
    }

    UnitBehaviorRemove(lv_createdShuttleUnit, "SOAWarpInReinforcements", 1);
    UnitBehaviorRemove(lv_createdShuttleUnit, "ProtossGenericWarpInOutAir", 1);
    UnitBehaviorRemove(lv_createdShuttleUnit, "WarpInEffect15", 1);
}

void gf_SendEscortUnit (unit lp_escortUnit, point lp_evacPoint, int lp_bonusObjectiveIndex, int lp_pathDisplay) {
    // Variable Declarations
    int lv_escortUnitPath;
    point lv_escortUnitDestination;
    int lv_nodeIndex;
    int lv_pathIndex;
    point lv_nextPathPoint;
    fixed lv_nextMovementOrder;
    region lv_landingZone;
    unitgroup lv_enemiesInLandingZone;
    unit lv_landingZoneEnemiesIter;
    timer lv_landingTimer;

    // Automatic Variable Declarations
    point autoC018BC75_val;
    unitgroup auto9B92AD4B_g;
    int auto9B92AD4B_u;

    // Variable Initialization
    lv_escortUnitPath = lp_pathDisplay;
    lv_enemiesInLandingZone = UnitGroupEmpty();
    lv_landingTimer = TimerCreate();

    // Implementation
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        gf_ObjectiveEscortEvacShipsFailed(lp_bonusObjectiveIndex);
        TriggerExecute(gt_BonusEscortFailedQ, true, false);
        return ;
    }

    if ((lp_evacPoint == null)) {
        return ;
    }

    if ((ObjectiveGetState(gv_objectiveEscortEvacShips[lp_bonusObjectiveIndex]) != c_objectiveStateActive)) {
        return ;
    }

    autoC018BC75_val = lp_evacPoint;
    if (autoC018BC75_val == PointFromId(2067823335)) {
        lv_landingZone = RegionFromId(46);
    }
    else if (autoC018BC75_val == PointFromId(1246145202)) {
        lv_landingZone = RegionFromId(47);
    }
    else if (autoC018BC75_val == PointFromId(2028190906)) {
        lv_landingZone = RegionFromId(19);
    }
    else {
    }
    lv_escortUnitPath = lp_pathDisplay;
    lv_escortUnitDestination = lp_evacPoint;
    TimerStart(lv_landingTimer, 30.0, false, c_timeGame);
    TimerPause(lv_landingTimer, true);
    while (true) {
        if (((UnitIsValid(lp_escortUnit) == false) || (TimerGetRemaining(lv_landingTimer) <= 0.0))) {
            break;
        }
        else if ((TimerIsPaused(lv_landingTimer) == true) && (libNtve_gf_UnitInRegion(lp_escortUnit, RegionCircle(lv_escortUnitDestination, 1.0)) == true)) {
            TimerPause(lv_landingTimer, false);
        }
        lv_enemiesInLandingZone = UnitGroupAlliance(UnitGetOwner(lp_escortUnit), c_unitAllianceEnemy, lv_landingZone, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        if ((UnitGroupCount(lv_enemiesInLandingZone, c_unitCountAlive) == 0) && (libNtve_gf_UnitInRegion(lp_escortUnit, RegionCircle(lv_escortUnitDestination, 1.0)) == true)) {
            break;
        }

        gf_ObjectiveEscortEvacShipsUpdate(lp_bonusObjectiveIndex);
        if (((AIGetTime() - AILastAttack(lp_escortUnit)) > 2.0)) {
            UnitSetPropertyFixed(lp_escortUnit, c_unitPropBaseMovementSpeed, gv_bonusObjectiveSpeed);
        }
        else {
            UnitSetPropertyFixed(lp_escortUnit, c_unitPropBaseMovementSpeed, (gv_bonusObjectiveSpeed * 0.25));
        }
        if ((libNtve_gf_UnitInRegion(lp_escortUnit, RegionCircle(lv_escortUnitDestination, 1.0)) == false)) {
            UnitIssueOrder(lp_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_escortUnitDestination), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_escortUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        if ((UnitGroupCount(lv_enemiesInLandingZone, c_unitCountAlive) > 0)) {
            if ((libNtve_gf_UnitInRegion(lp_escortUnit, RegionCircle(lv_escortUnitDestination, 7.0)) == true)) {
                auto9B92AD4B_g = UnitGroupSearch(null, 1, UnitGetPosition(lp_escortUnit), 1.0, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto9B92AD4B_u = UnitGroupCount(auto9B92AD4B_g, c_unitCountAll);
                for (;; auto9B92AD4B_u -= 1) {
                    lv_landingZoneEnemiesIter = UnitGroupUnitFromEnd(auto9B92AD4B_g, auto9B92AD4B_u);
                    if (lv_landingZoneEnemiesIter == null) { break; }
                    gf_MarkEscortUnitBlocker(lv_landingZoneEnemiesIter);
                }
            }

            if ((RandomInt(0, 5) == 1) && (libNtve_gf_UnitInRegion(lp_escortUnit, lv_landingZone) == true)) {
                libNtve_gf_AICast(UnitGroupRandomUnit(lv_enemiesInLandingZone, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_escortUnit)));
            }

        }

        Wait(0.5, c_timeGame);
    }
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        PathDestroy(lv_escortUnitPath);
        gf_ObjectiveEscortEvacShipsFailed(lp_bonusObjectiveIndex);
        TriggerExecute(gt_BonusEscortFailedQ, true, false);
        return ;
    }

    PathDestroy(lv_escortUnitPath);
    while ((UnitGetType(gv_currentEscortShip) != "WarpPrismPhasing")) {
        UnitIssueOrder(lp_escortUnit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        PathDestroy(lv_escortUnitPath);
        gf_ObjectiveEscortEvacShipsFailed(lp_bonusObjectiveIndex);
        TriggerExecute(gt_BonusEscortFailedQ, true, false);
        return ;
    }

    libNtve_gf_MakeUnitInvulnerable(gv_currentEscortShip, true);
    libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1), false);
    gf_ObjectiveEscortEvacShipsComplete(lp_bonusObjectiveIndex);
    if ((libCOMI_gf_MissionObjectiveStateCheck(gv_bonusObjectives[1], libCOMI_ge_MissionObjectiveState_Completed) == true) && (libCOMI_gf_MissionObjectiveStateCheck(gv_bonusObjectives[2], libCOMI_ge_MissionObjectiveState_Completed) == true) && (libCOMI_gf_MissionObjectiveStateCheck(gv_bonusObjectives[3], libCOMI_ge_MissionObjectiveState_Completed) == true)) {
        TriggerExecute(gt_BonusEscortCompleteQ, true, false);
    }
    else {
        TriggerExecute(gt_BonusEscortStoppedQ, true, false);
    }
    gf_EvacueeCeremony(gv_bonus_DestinationEvacPoint);
}

trigger auto_gf_MarkEscortUnitBlocker_Trigger = null;
unit auto_gf_MarkEscortUnitBlocker_lp_escortUnitObstacle;

void gf_MarkEscortUnitBlocker (unit lp_escortUnitObstacle) {
    auto_gf_MarkEscortUnitBlocker_lp_escortUnitObstacle = lp_escortUnitObstacle;

    if (auto_gf_MarkEscortUnitBlocker_Trigger == null) {
        auto_gf_MarkEscortUnitBlocker_Trigger = TriggerCreate("auto_gf_MarkEscortUnitBlocker_TriggerFunc");
    }

    TriggerExecute(auto_gf_MarkEscortUnitBlocker_Trigger, false, false);
}

bool auto_gf_MarkEscortUnitBlocker_TriggerFunc (bool testConds, bool runActions) {
    unit lp_escortUnitObstacle = auto_gf_MarkEscortUnitBlocker_lp_escortUnitObstacle;

    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_ActorForUnit(lp_escortUnitObstacle, 42) != null)) {
        return true;
    }

    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossBonusObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/3A0324F7"), lp_escortUnitObstacle, "Ref_Center");
    libHots_gf_StoreActorForUnit(lp_escortUnitObstacle, 42, libNtve_gf_ActorLastCreated());
    UnitBehaviorAddPlayer(lp_escortUnitObstacle, "SuppressCloak", gv_pLAYER_11_BONUSESCORT, 1);
    libCOMI_gf_ShareVisionofUnitWithHumansCoop(lp_escortUnitObstacle, true);
    while (!(((UnitIsValid(lp_escortUnitObstacle) == false) || (UnitIsValid(gv_currentEscortShip) == false) || (libNtve_gf_UnitIsInvulnerable(gv_currentEscortShip) == true)))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagDestroy(TextTagLastCreated());
    return true;
}

void gf_EvacueeCeremony (point lp_evacShipDestination) {
    // Variable Declarations
    point lv_evacueeSpawn;
    region lv_runToLocation;
    region lv_enemySuicideArea;
    string[5] lv_validEscortTypes;
    int lv_validEscortIter;
    int lv_evacueeCount;

    // Automatic Variable Declarations
    point auto2A735F80_val;

    // Variable Initialization

    // Implementation
    auto2A735F80_val = lp_evacShipDestination;
    if (auto2A735F80_val == PointFromId(2067823335)) {
        lv_evacueeSpawn = PointFromId(41032939);
        lv_enemySuicideArea = RegionFromId(43);
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "Scientist";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "Dog";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "PrisonZealot";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "PrisonZealot";
    }
    else if (auto2A735F80_val == PointFromId(1246145202)) {
        lv_evacueeSpawn = PointFromId(1274685995);
        lv_enemySuicideArea = RegionFromId(45);
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "PrimalZergling";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "PrisonZealot";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "PreserverA";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "Scientist";
    }
    else if (auto2A735F80_val == PointFromId(2028190906)) {
        lv_evacueeSpawn = PointFromId(514879878);
        lv_enemySuicideArea = RegionFromId(44);
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "RoguePurifierSupportDroneA";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "PrisonZealot";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "Supplicant";
        lv_validEscortIter += 1;
        lv_validEscortTypes[lv_validEscortIter] = "LabBot";
    }
    else {
        return ;
    }
    while (!((UnitGetType(gv_currentEscortShip) == "WarpPrismPhasing"))) {
        Wait(1.0, c_timeGame);
    }
    lv_runToLocation = RegionCircle(UnitGetPosition(gv_currentEscortShip), 3.0);
    AISetGroupSuicide(UnitGroupAlliance(gv_pLAYER_11_BONUSESCORT, c_unitAllianceEnemy, lv_enemySuicideArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), true);
    while ((UnitIsValid(gv_currentEscortShip) == true) && (UnitGetType(gv_currentEscortShip) == "WarpPrismPhasing")) {
        if ((UnitGetPropertyFixed(gv_currentEscortShip, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            UnitSetPropertyFixed(gv_currentEscortShip, c_unitPropLifePercent, (UnitGetPropertyFixed(gv_currentEscortShip, c_unitPropLifePercent, c_unitPropCurrent) + 5.0));
        }

        if ((UnitGetPropertyFixed(gv_currentEscortShip, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0)) {
            UnitSetPropertyFixed(gv_currentEscortShip, c_unitPropShieldsPercent, (UnitGetPropertyFixed(gv_currentEscortShip, c_unitPropShieldsPercent, c_unitPropCurrent) + 5.0));
        }

        lv_evacueeCount += 1;
        libNtve_gf_CreateUnitsAtPoint2(1, lv_validEscortTypes[RandomInt(1, lv_validEscortIter)], 0, gv_pLAYER_11_BONUSESCORT, lv_evacueeSpawn);
        UnitAbilityEnable(UnitLastCreated(), "attack", false);
        gf_EvacueeWarpOut(UnitLastCreated(), RegionRandomPoint(lv_runToLocation));
        if ((lv_evacueeCount > 15)) {
            break;
        }

        Wait((RandomFixed(0.0, 5.0) + RandomFixed(0.0, 5.0)), c_timeGame);
    }
}

trigger auto_gf_EvacueeWarpOut_Trigger = null;
unit auto_gf_EvacueeWarpOut_lp_evacuee;
point auto_gf_EvacueeWarpOut_lp_warpOutLocation;

void gf_EvacueeWarpOut (unit lp_evacuee, point lp_warpOutLocation) {
    auto_gf_EvacueeWarpOut_lp_evacuee = lp_evacuee;
    auto_gf_EvacueeWarpOut_lp_warpOutLocation = lp_warpOutLocation;

    if (auto_gf_EvacueeWarpOut_Trigger == null) {
        auto_gf_EvacueeWarpOut_Trigger = TriggerCreate("auto_gf_EvacueeWarpOut_TriggerFunc");
    }

    TriggerExecute(auto_gf_EvacueeWarpOut_Trigger, false, false);
}

bool auto_gf_EvacueeWarpOut_TriggerFunc (bool testConds, bool runActions) {
    unit lp_evacuee = auto_gf_EvacueeWarpOut_lp_evacuee;
    point lp_warpOutLocation = auto_gf_EvacueeWarpOut_lp_warpOutLocation;

    // Variable Declarations
    timer lv_forceEvacTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_forceEvacTimer = TimerCreate();

    // Implementation
    UnitSetState(lp_evacuee, c_unitStateTargetable, false);
    UnitSetState(lp_evacuee, c_unitStateInvulnerable, true);
    TimerStart(lv_forceEvacTimer, 10.0, false, c_timeGame);
    while ((UnitIsValid(lp_evacuee) == true) && (libCOMI_gf_GameIsOver() == false) && (DistanceBetweenPoints(UnitGetPosition(lp_evacuee), lp_warpOutLocation) > 0.5) && (TimerGetRemaining(lv_forceEvacTimer) > 0.0)) {
        UnitIssueOrder(lp_evacuee, OrderTargetingPoint(AbilityCommand("move", 0), lp_warpOutLocation), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsValid(lp_evacuee) == true)) {
        UnitBehaviorAdd(lp_evacuee, "SOAWarpInReinforcements", lp_evacuee, 1);
        UnitBehaviorAdd(lp_evacuee, "ProtossGenericWarpInOut", lp_evacuee, 1);
        Wait(2.0, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(lp_evacuee), libNtve_gf_SetOpacity(0.0, 3.0));
        Wait(3.0, c_timeGame);
        UnitRemove(lp_evacuee);
    }

    return true;
}

string gf_TransportType (int lp_player) {
    // Automatic Variable Declarations
    string auto567CF8CC_val;

    // Implementation
    auto567CF8CC_val = PlayerRace(lp_player);
    if (auto567CF8CC_val == "Prot") {
        return "WarpPrism";
    }
    else if (auto567CF8CC_val == "Terr") {
        return "Medivac";
    }
    else if (auto567CF8CC_val == "Zerg") {
        return "Overlord";
    }
    else {
        return "MilitarizedColonistShipFlying";
    }
}

trigger auto_gf_AttackWaveatTime_Trigger = null;
fixed auto_gf_AttackWaveatTime_lp_time;
trigger auto_gf_AttackWaveatTime_lp_aIAttackWave;
bool auto_gf_AttackWaveatTime_lp_difficultyCheck;

void gf_AttackWaveatTime (fixed lp_time, trigger lp_aIAttackWave, bool lp_difficultyCheck) {
    auto_gf_AttackWaveatTime_lp_time = lp_time;
    auto_gf_AttackWaveatTime_lp_aIAttackWave = lp_aIAttackWave;
    auto_gf_AttackWaveatTime_lp_difficultyCheck = lp_difficultyCheck;

    if (auto_gf_AttackWaveatTime_Trigger == null) {
        auto_gf_AttackWaveatTime_Trigger = TriggerCreate("auto_gf_AttackWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackWaveatTime_Trigger, false, false);
}

bool auto_gf_AttackWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_AttackWaveatTime_lp_time;
    trigger lp_aIAttackWave = auto_gf_AttackWaveatTime_lp_aIAttackWave;
    bool lp_difficultyCheck = auto_gf_AttackWaveatTime_lp_difficultyCheck;

    // Variable Declarations
    fixed lv_attackWaveVariance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_difficultyCheck == false)) {
        return true;
    }

    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIAttackWave, true, false);
    }

    return true;
}

trigger auto_gf_CleanUpAttackWaveTransports_Trigger = null;
unitgroup auto_gf_CleanUpAttackWaveTransports_lp_transports;
point auto_gf_CleanUpAttackWaveTransports_lp_cleanupLocation;

void gf_CleanUpAttackWaveTransports (unitgroup lp_transports, point lp_cleanupLocation) {
    auto_gf_CleanUpAttackWaveTransports_lp_transports = lp_transports;
    auto_gf_CleanUpAttackWaveTransports_lp_cleanupLocation = lp_cleanupLocation;

    if (auto_gf_CleanUpAttackWaveTransports_Trigger == null) {
        auto_gf_CleanUpAttackWaveTransports_Trigger = TriggerCreate("auto_gf_CleanUpAttackWaveTransports_TriggerFunc");
    }

    TriggerExecute(auto_gf_CleanUpAttackWaveTransports_Trigger, false, false);
}

bool auto_gf_CleanUpAttackWaveTransports_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_transports = auto_gf_CleanUpAttackWaveTransports_lp_transports;
    point lp_cleanupLocation = auto_gf_CleanUpAttackWaveTransports_lp_cleanupLocation;

    // Variable Declarations
    unitgroup lv_transportToWatch;
    unit lv_cleanUpTransport;
    unitgroup lv_transportsToCleanup;
    fixed lv_position_X_Min;
    fixed lv_position_X_Max;
    fixed lv_position_Y_Min;
    fixed lv_position_Y_Max;
    point lv_transportPosition;
    unitgroup lv_attackWavePayload;
    unitgroup lv_badOrderUnits;

    // Automatic Variable Declarations
    unitgroup auto03C19E3D_g;
    int auto03C19E3D_u;
    point auto873E7C9A_val;
    unitgroup autoA108D81E_g;
    int autoA108D81E_u;
    unitgroup auto14FBC726_g;
    int auto14FBC726_u;
    unitgroup auto7EC4FCD9_g;
    int auto7EC4FCD9_u;

    // Variable Initialization
    lv_transportToWatch = UnitGroupEmpty();
    lv_transportsToCleanup = UnitGroupEmpty();
    lv_attackWavePayload = UnitGroupEmpty();
    lv_badOrderUnits = UnitGroupEmpty();

    // Implementation
    lv_position_X_Min = (PointGetX(RegionGetBoundsMin(RegionPlayableMap())) + 4.0);
    lv_position_Y_Min = (PointGetY(RegionGetBoundsMin(RegionPlayableMap())) + 4.0);
    lv_position_X_Max = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - 4.0);
    lv_position_Y_Max = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - 4.0);
    Wait(1.0, c_timeGame);
    while (true) {
        auto03C19E3D_g = lp_transports;
        auto03C19E3D_u = UnitGroupCount(auto03C19E3D_g, c_unitCountAll);
        for (;; auto03C19E3D_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto03C19E3D_g, auto03C19E3D_u);
            if (lv_cleanUpTransport == null) { break; }
            if ((UnitOrder(lv_cleanUpTransport, 0) != null) && (OrderGetTargetPoint(UnitOrder(lv_cleanUpTransport, 0)) != null) && (OrderGetTargetPoint(UnitOrder(lv_cleanUpTransport, 0)) == Point(0.0, 0.0))) {
                UnitGroupAdd(lv_badOrderUnits, lv_cleanUpTransport);
                auto873E7C9A_val = lp_cleanupLocation;
                if (auto873E7C9A_val == PointFromId(853460097)) {
                    libNtve_gf_AICast(lv_cleanUpTransport, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(785031012)));
                }
                else if (auto873E7C9A_val == PointFromId(463620504)) {
                    libNtve_gf_AICast(lv_cleanUpTransport, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1791218540)));
                }
                else {
                }
            }

        }
        lv_attackWavePayload = UnitGroupEmpty();
        autoA108D81E_g = lp_transports;
        autoA108D81E_u = UnitGroupCount(autoA108D81E_g, c_unitCountAll);
        for (;; autoA108D81E_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(autoA108D81E_g, autoA108D81E_u);
            if (lv_cleanUpTransport == null) { break; }
            UnitGroupAddUnitGroup(lv_attackWavePayload, UnitCargoGroup(lv_cleanUpTransport));
            if ((UnitGroupCount(lv_attackWavePayload, c_unitCountAlive) > 0)) {
                Wait(2.0, c_timeGame);
                break;
            }

        }
        if ((UnitGroupCount(lv_attackWavePayload, c_unitCountAlive) == 0)) {
            break;
        }

    }
    Wait(2.0, c_timeAI);
    UnitGroupAddUnitGroup(lv_transportToWatch, lp_transports);
    while ((libCOMI_gf_GameIsOver() == false) && ((UnitGroupCount(lv_transportToWatch, c_unitCountAlive) > 0) || (UnitGroupCount(lv_transportsToCleanup, c_unitCountAlive) > 0))) {
        auto14FBC726_g = lv_transportToWatch;
        auto14FBC726_u = UnitGroupCount(auto14FBC726_g, c_unitCountAll);
        for (;; auto14FBC726_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto14FBC726_g, auto14FBC726_u);
            if (lv_cleanUpTransport == null) { break; }
            UnitIssueOrder(lv_cleanUpTransport, OrderTargetingPoint(AbilityCommand("move", 0), lp_cleanupLocation), c_orderQueueReplace);
            lv_transportPosition = UnitGetPosition(lv_cleanUpTransport);
            if (((PointGetX(lv_transportPosition) < lv_position_X_Min) || (PointGetX(lv_transportPosition) > lv_position_X_Max) || (PointGetY(lv_transportPosition) < lv_position_Y_Min) || (PointGetY(lv_transportPosition) > lv_position_Y_Max))) {
                UnitSetHeight(lv_cleanUpTransport, 15.0, 4.0);
                UnitGroupRemove(lv_transportToWatch, lv_cleanUpTransport);
                UnitGroupAdd(lv_transportsToCleanup, lv_cleanUpTransport);
            }

        }
        auto7EC4FCD9_g = lv_transportsToCleanup;
        auto7EC4FCD9_u = UnitGroupCount(auto7EC4FCD9_g, c_unitCountAll);
        for (;; auto7EC4FCD9_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto7EC4FCD9_g, auto7EC4FCD9_u);
            if (lv_cleanUpTransport == null) { break; }
            if ((UnitGetHeight(lv_cleanUpTransport) > 14.0)) {
                UnitRemove(lv_cleanUpTransport);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_CreateWarpInEffect_Trigger = null;
unit auto_gf_CreateWarpInEffect_lp_unit;

void gf_CreateWarpInEffect (unit lp_unit) {
    auto_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_gf_CreateWarpInEffect_Trigger == null) {
        auto_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridDominatorVoid") || (UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridBehemoth") || (UnitGetType(lp_unit) == "HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "HybridWarpInEffect", "Ref_Center");
    }
    else {
        libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Center");
    }
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(5.0, c_timeAI);
    libNtve_gf_KillModel(lv_model);
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "attack", true);
    return true;
}

void gf_ObjectiveEscortEvacShipsCreate (int lp_escortObjective) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false) && (gv_objectiveEscortEvacShips[lp_escortObjective] == c_invalidObjectiveId)) {
        libCOMI_gf_CreateObjectiveCampaign(gv_bonusObjectives[lp_escortObjective]);
        gv_objectiveEscortEvacShips[lp_escortObjective] = ObjectiveLastCreated();
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }

}

void gf_ObjectiveEscortEvacShipsUpdate (int lp_escortObjective) {
    // Variable Declarations
    color lv_vitalityColor;
    fixed lv_currentVitalityPercent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vitalityColor = Color(100,100,100);

    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return ;
    }

    if ((UnitIsValid(gv_currentEscortShip) == false)) {
        libCOMI_gf_SetMissionObjectiveCustomText(gv_bonusObjectives[lp_escortObjective], StringToText(""));
        return ;
    }

    lv_currentVitalityPercent = UnitGetPropertyFixed(gv_currentEscortShip, c_unitPropVitalityPercent, c_unitPropCurrent);
    if ((lv_currentVitalityPercent <= 25.0)) {
        lv_vitalityColor = Color(100.00, 0.00, 0.00);
    }
    else if ((lv_currentVitalityPercent <= 50.0)) {
        lv_vitalityColor = Color(150*100/255,150*100/255,30*100/255);
    }
    gf_ObjectiveEscortEvacShipsCreate(lp_escortObjective);
    TextExpressionSetToken("Param/Expression/C9C24BFD", "A", TextWithColor(FixedToText(lv_currentVitalityPercent, 0), lv_vitalityColor));
    libCOMI_gf_SetMissionObjectiveCustomText(gv_bonusObjectives[lp_escortObjective], TextExpressionAssemble("Param/Expression/C9C24BFD"));
}

void gf_ObjectiveEscortEvacShipsComplete (int lp_escortObjective) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false)) {
        libCOMI_gf_SetMissionObjectiveCustomText(gv_bonusObjectives[lp_escortObjective], StringToText(""));
        gf_ObjectiveEscortEvacShipsCreate(lp_escortObjective);
        libCOMI_gf_ZS_SetMissionObjectiveState(gv_bonusObjectives[lp_escortObjective], libCOMI_ge_MissionObjectiveState_Completed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }

}

void gf_ObjectiveEscortEvacShipsFailed (int lp_escortObjective) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false)) {
        libCOMI_gf_SetMissionObjectiveCustomText(gv_bonusObjectives[lp_escortObjective], StringToText(""));
        gf_ObjectiveEscortEvacShipsCreate(lp_escortObjective);
        libCOMI_gf_ZS_SetMissionObjectiveState(gv_bonusObjectives[lp_escortObjective], libCOMI_ge_MissionObjectiveState_Failed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }

}

trigger auto_gf_InfestedBunker_Trigger = null;
unit auto_gf_InfestedBunker_lp_bunker;

void gf_InfestedBunker (unit lp_bunker) {
    auto_gf_InfestedBunker_lp_bunker = lp_bunker;

    if (auto_gf_InfestedBunker_Trigger == null) {
        auto_gf_InfestedBunker_Trigger = TriggerCreate("auto_gf_InfestedBunker_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfestedBunker_Trigger, false, false);
}

bool auto_gf_InfestedBunker_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bunker = auto_gf_InfestedBunker_lp_bunker;

    // Variable Declarations
    unitgroup lv_cargoUnits;
    actor lv_infestation;

    // Automatic Variable Declarations
    unitgroup autoDF7AB5E9_g;
    int autoDF7AB5E9_u;
    unit autoDF7AB5E9_var;

    // Variable Initialization
    lv_cargoUnits = UnitCargoGroup(lp_bunker);

    // Implementation
    libNtve_gf_CreateModelAtPoint("InfestedHomeSmall", UnitGetPosition(lp_bunker));
    lv_infestation = libNtve_gf_ActorLastCreated();
    ActorSend(lv_infestation, libNtve_gf_SetScale(0.5, 0.5, 0.5, 0.0));
    ActorSend(lv_infestation, libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
    ActorSend(lv_infestation, libNtve_gf_SetHeight(0));
    while (!((UnitIsAlive(lp_bunker) == false))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_PlayAnimation(lv_infestation, c_animNameDefault, "Death", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    autoDF7AB5E9_g = lv_cargoUnits;
    autoDF7AB5E9_u = UnitGroupCount(autoDF7AB5E9_g, c_unitCountAll);
    for (;; autoDF7AB5E9_u -= 1) {
        autoDF7AB5E9_var = UnitGroupUnitFromEnd(autoDF7AB5E9_g, autoDF7AB5E9_u);
        if (autoDF7AB5E9_var == null) { break; }
        libNtve_gf_ReplaceUnit(autoDF7AB5E9_var, "InfestedTerranCampaign", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }
    return true;
}

trigger auto_gf_MissionEventatTime_Trigger = null;
fixed auto_gf_MissionEventatTime_lp_time;
trigger auto_gf_MissionEventatTime_lp_missionEvent;

void gf_MissionEventatTime (fixed lp_time, trigger lp_missionEvent) {
    auto_gf_MissionEventatTime_lp_time = lp_time;
    auto_gf_MissionEventatTime_lp_missionEvent = lp_missionEvent;

    if (auto_gf_MissionEventatTime_Trigger == null) {
        auto_gf_MissionEventatTime_Trigger = TriggerCreate("auto_gf_MissionEventatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_MissionEventatTime_Trigger, false, false);
}

bool auto_gf_MissionEventatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_MissionEventatTime_lp_time;
    trigger lp_missionEvent = auto_gf_MissionEventatTime_lp_missionEvent;

    // Variable Declarations
    fixed lv_attackWaveVariance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEvent, true, false);
    }

    return true;
}

fixed gf_UnitGroupTotalVitality (unitgroup lp_unitGroup) {
    // Variable Declarations
    fixed lv_totalVitality;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoF5696A5B_g;
    int autoF5696A5B_u;

    // Variable Initialization

    // Implementation
    autoF5696A5B_g = lp_unitGroup;
    autoF5696A5B_u = UnitGroupCount(autoF5696A5B_g, c_unitCountAll);
    for (;; autoF5696A5B_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoF5696A5B_g, autoF5696A5B_u);
        if (lv_currentUnit == null) { break; }
        lv_totalVitality += UnitGetPropertyFixed(lv_currentUnit, c_unitPropVitality, c_unitPropCurrent);
    }
    return lv_totalVitality;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Events
//--------------------------------------------------------------------------------------------------
bool gt_MissionEvents_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AttackWaveatTime((2.8 * 60.0), gt_AttackWave01c, (libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1));
    gf_AttackWaveatTime((7.0 * 60.0), gt_AttackWave02, (libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1));
    gf_MissionEventatTime((7.0 * 60.0), gt_VoidSpawnsReinforcements01);
    gf_MissionEventatTime((7.0 * 60.0), gt_StartBonusObjectiveA);
    gf_AttackWaveatTime((8.0 * 60.0), gt_AttackWave02, (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1));
    gf_AttackWaveatTime((9.0 * 60.0), gt_AttackWave03ExpoAttack, (libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1));
    gf_AttackWaveatTime((10.0 * 60.0), gt_AttackWave03ExpoAttack, (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1));
    gf_MissionEventatTime((12.0 * 60.0), gt_VoidSpawnsReinforcements02);
    gf_AttackWaveatTime((12.5 * 60.0), gt_AttackWave04BaseAttack, (libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1));
    gf_MissionEventatTime((13.0 * 60.0), gt_StartBonusObjectiveB);
    gf_AttackWaveatTime((13.0 * 60.0), gt_AttackWave04BaseAttack, (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1));
    gf_MissionEventatTime((16.0 * 60.0), gt_StartBonusObjectiveC);
    gf_AttackWaveatTime((16.0 * 60.0), gt_AttackWave05c, (libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1));
    gf_MissionEventatTime((18.0 * 60.0), gt_VoidSpawnsReinforcements03);
    gf_AttackWaveatTime((18.0 * 60.0), gt_AttackWave05c, (libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 0, 0, 0, 0) == 1));
    gf_AttackWaveatTime((19.0 * 60.0), gt_AttackWave06c, (libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1));
    gf_AttackWaveatTime((22.0 * 60.0), gt_AttackWave05c, true);
    gf_MissionEventatTime((22.0 * 60.0), gt_VoidSpawnsReinforcements04Hard);
    gf_AttackWaveatTime((24.0 * 60.0), gt_AttackWave06c, true);
    gf_AttackWaveatTime((26.0 * 60.0), gt_AttackWave06c, (libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionEvents_Init () {
    gt_MissionEvents = TriggerCreate("gt_MissionEvents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fail XP
//--------------------------------------------------------------------------------------------------
bool gt_FailXP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3E7F55DF_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3E7F55DF_val = gf_NumberofDestroyedVoidSlivers();
    if (auto3E7F55DF_val == 1) {
        libCOMI_gf_SetMissionEffort(15.0);
    }
    else if (auto3E7F55DF_val == 2) {
        libCOMI_gf_SetMissionEffort(45.0);
    }
    else if (auto3E7F55DF_val == 3) {
        libCOMI_gf_SetMissionEffort(75.0);
    }
    else if (auto3E7F55DF_val == 4) {
        libCOMI_gf_SetMissionEffort(100.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FailXP_Init () {
    gt_FailXP = TriggerCreate("gt_FailXP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fail Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_FailTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TimerWindowCreate(gv_missionFailTimer, StringExternal("Param/Value/D9467037"), true, false);
    gv_missionFailTimerWindow = TimerWindowLastCreated();
    libCOMI_gf_SetTimerWindowDangerThreshold(180.0);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(1.0, c_timeGame);
    }
    TimerPause(gv_missionFailTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FailTimerWindow_Init () {
    gt_FailTimerWindow = TriggerCreate("gt_FailTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fail Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_FailWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_missionFailTimer) <= 180.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("FailWarningAS", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        Wait(180.0, c_timeAI);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FailWarningQ_Init () {
    gt_FailWarningQ = TriggerCreate("gt_FailWarningQ_Func");
    TriggerEnable(gt_FailWarningQ, false);
    TriggerAddEventTimePeriodic(gt_FailWarningQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fail Imminent Q
//--------------------------------------------------------------------------------------------------
bool gt_FailImminentQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_missionFailTimer) <= 60.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("FailImminentAS", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        Wait(60.0, c_timeAI);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FailImminentQ_Init () {
    gt_FailImminentQ = TriggerCreate("gt_FailImminentQ_Func");
    TriggerEnable(gt_FailImminentQ, false);
    TriggerAddEventTimePeriodic(gt_FailImminentQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidACShard Modify Health
//--------------------------------------------------------------------------------------------------
bool gt_VoidACShardModifyHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_unitLife;
    fixed lv_unitShields;
    fixed lv_totalDamage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        lv_unitLife = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent);
        lv_unitShields = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShields, c_unitPropCurrent);
        lv_totalDamage = (lv_unitLife + lv_unitShields);
        lv_totalDamage *= 0.75;
        CatalogFieldValueSet(c_gameCatalogEffect, "VoidShardACDeathGripDamageDummy", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), FixedToString(lv_totalDamage, 3));
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "VoidShardACDeathGripDamageDummy", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidACShardModifyHealth_Init () {
    gt_VoidACShardModifyHealth = TriggerCreate("gt_VoidACShardModifyHealth_Func");
    TriggerAddEventPlayerEffectUsed(gt_VoidACShardModifyHealth, c_playerAny, "VoidShardACModifyHealthDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Sliver Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidSliverDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    region lv_voidSliverRegion;
    fixed lv_voidSliverShields;

    // Automatic Variable Declarations
    int auto0DA8A3EE_val;
    const int auto3CD5D6A2_ae = gv_c_VoidSliversCount;
    const int auto3CD5D6A2_ai = 1;
    unit auto45400C5A_val;
    unitgroup autoDA02BF54_g;
    int autoDA02BF54_u;
    unit autoDA02BF54_var;
    unitgroup autoE90087A9_g;
    int autoE90087A9_u;
    unit autoE90087A9_var;
    unitgroup auto30562DD3_g;
    int auto30562DD3_u;
    unit auto30562DD3_var;
    unitgroup auto2BDDAA5C_g;
    int auto2BDDAA5C_u;
    unit auto2BDDAA5C_var;

    // Variable Initialization
    lv_voidSliverRegion = RegionCircle(UnitGetPosition(EventUnit()), 30.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_NumberofDestroyedVoidSlivers() < gv_c_VoidSliversCount)) {
        TimerStart(gv_missionFailTimer, (TimerGetRemaining(gv_missionFailTimer) + gv_sliverKilledFailTimerIncrease), false, c_timeGame);
    }
    else {
        TimerPause(gv_missionFailTimer, true);
        TimerWindowShow(gv_missionFailTimerWindow, PlayerGroupAll(), false);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    libNtve_gf_SendActorMessageToUnit(gv_amonUnit, "AnimPlay SpellA Spell,A");
    TriggerExecute(gt_FailXP, true, false);
    auto0DA8A3EE_val = gf_NumberofDestroyedVoidSlivers();
    if (auto0DA8A3EE_val == 1) {
        TriggerExecute(gt_VoidSpawnsReinforcements01, true, false);
    }
    else if (auto0DA8A3EE_val == 2) {
        TriggerExecute(gt_TurnOnRain, true, false);
        TriggerExecute(gt_VoidSpawnsReinforcements02, true, false);
    }
    else if (auto0DA8A3EE_val == 3) {
        TriggerExecute(gt_VoidSpawnsReinforcements03, true, false);
    }
    else if (auto0DA8A3EE_val == 4) {
        TriggerExecute(gt_TurnOnLightningStrikes, true, false);
        TriggerExecute(gt_VoidSpawnsReinforcements04Hard, true, false);
    }
    else {
    }
    AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, lv_voidSliverRegion, false);
    AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, lv_voidSliverRegion, false);
    AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, lv_voidSliverRegion, false);
    lv_i = 1;
    for ( ; ( (auto3CD5D6A2_ai >= 0 && lv_i <= auto3CD5D6A2_ae) || (auto3CD5D6A2_ai < 0 && lv_i >= auto3CD5D6A2_ae) ) ; lv_i += auto3CD5D6A2_ai ) {
        if ((UnitIsAlive(gv_voidSlivers[lv_i]) == true)) {
            lv_voidSliverShields = (UnitGetPropertyFixed(gv_voidSlivers[lv_i], c_unitPropShieldsMax, c_unitPropCurrent) + gv_voidSliverDifficultyIncreaseShields);
            UnitSetPropertyFixed(gv_voidSlivers[lv_i], c_unitPropShieldsMax, lv_voidSliverShields);
            UnitSetPropertyFixed(gv_voidSlivers[lv_i], c_unitPropShieldsPercent, 100.0);
        }

    }
    if ((gf_NumberofDestroyedVoidSlivers() > 2)) {
        gv_voidSliverShockwaveCooldown *= gv_voidSliverDifficultyIncreaseAbilityCooldownReductionPercent;
        gv_voidSliverUnstableEnergyCooldown *= gv_voidSliverDifficultyIncreaseAbilityCooldownReductionPercent;
        gv_voidSliverDeathGripCooldown *= gv_voidSliverDifficultyIncreaseAbilityCooldownReductionPercent;
    }

    Wait(1.0, c_timeGame);
    auto45400C5A_val = EventUnit();
    if (auto45400C5A_val == gv_voidSlivers[1]) {
        TerrainShowRegion(RegionFromId(28), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_06_VOIDFORCES, PointFromId(1255));
    }
    else if (auto45400C5A_val == gv_voidSlivers[2]) {
        TerrainShowRegion(RegionFromId(37), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_07_VOIDFORCES, PointFromId(1254));
    }
    else if (auto45400C5A_val == gv_voidSlivers[3]) {
        TerrainShowRegion(RegionFromId(38), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_07_VOIDFORCES, PointFromId(1253));
    }
    else if (auto45400C5A_val == gv_voidSlivers[4]) {
        TerrainShowRegion(RegionFromId(39), true);
        AIAttackWaveSetGatherPoint(gv_pLAYER_06_VOIDFORCES, PointFromId(1252));
    }
    else if (auto45400C5A_val == gv_voidSlivers[5]) {
        TerrainShowRegion(RegionFromId(40), true);
    }
    else {
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion("SetOpacity 0.000000 2.000000", "ShakurasBaseShield", lv_voidSliverRegion);
    Wait(0.5, c_timeGame);
    autoDA02BF54_g = UnitGroup("VoidTendrilDeathGripCrystal", c_playerAny, lv_voidSliverRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA02BF54_u = UnitGroupCount(autoDA02BF54_g, c_unitCountAll);
    for (;; autoDA02BF54_u -= 1) {
        autoDA02BF54_var = UnitGroupUnitFromEnd(autoDA02BF54_g, autoDA02BF54_u);
        if (autoDA02BF54_var == null) { break; }
        UnitKill(autoDA02BF54_var);
    }
    autoE90087A9_g = UnitGroup("VoidSliverDeathGripCrystalAC", c_playerAny, lv_voidSliverRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE90087A9_u = UnitGroupCount(autoE90087A9_g, c_unitCountAll);
    for (;; autoE90087A9_u -= 1) {
        autoE90087A9_var = UnitGroupUnitFromEnd(autoE90087A9_g, autoE90087A9_u);
        if (autoE90087A9_var == null) { break; }
        UnitKill(autoE90087A9_var);
    }
    auto30562DD3_g = UnitGroup("VoidTendrilUnstableEnergy", c_playerAny, lv_voidSliverRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30562DD3_u = UnitGroupCount(auto30562DD3_g, c_unitCountAll);
    for (;; auto30562DD3_u -= 1) {
        auto30562DD3_var = UnitGroupUnitFromEnd(auto30562DD3_g, auto30562DD3_u);
        if (auto30562DD3_var == null) { break; }
        UnitKill(auto30562DD3_var);
    }
    auto2BDDAA5C_g = UnitGroup("VoidRift", c_playerAny, lv_voidSliverRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2BDDAA5C_u = UnitGroupCount(auto2BDDAA5C_g, c_unitCountAll);
    for (;; auto2BDDAA5C_u -= 1) {
        auto2BDDAA5C_var = UnitGroupUnitFromEnd(auto2BDDAA5C_g, auto2BDDAA5C_u);
        if (auto2BDDAA5C_var == null) { break; }
        UnitKill(auto2BDDAA5C_var);
        Wait(0.125, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(false, lv_voidSliverRegion, "ShakurasBaseShield");
    TriggerExecute(gt_ObjectiveDestroyVoidSliversUpdate, true, false);
    if ((gf_NumberofDestroyedVoidSlivers() < gv_c_VoidSliversCount)) {
        TriggerExecute(gt_TransmissionVoidSliverDestroyedQ, true, false);
    }
    else {
        TriggerExecute(gt_VictoryVoidSliversDestroyedCompleted, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSliverDies_Init () {
    gt_VoidSliverDies = TriggerCreate("gt_VoidSliverDies_Func");
    TriggerAddEventUnitDied(gt_VoidSliverDies, UnitRefFromVariable("gv_voidSlivers[1]"));
    TriggerAddEventUnitDied(gt_VoidSliverDies, UnitRefFromVariable("gv_voidSlivers[2]"));
    TriggerAddEventUnitDied(gt_VoidSliverDies, UnitRefFromVariable("gv_voidSlivers[3]"));
    TriggerAddEventUnitDied(gt_VoidSliverDies, UnitRefFromVariable("gv_voidSlivers[4]"));
    TriggerAddEventUnitDied(gt_VoidSliverDies, UnitRefFromVariable("gv_voidSlivers[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Sliver Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidSliverDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto51D2C3DB_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto51D2C3DB_val = gf_NumberofDestroyedVoidSlivers();
    if (auto51D2C3DB_val == 1) {
        libCOMI_gf_SendMissionTransmission("VoidShardDestroyedFirstAS", true, -1);
    }
    else if (auto51D2C3DB_val == 2) {
        libCOMI_gf_SendMissionTransmission("VoidShardDestroyedSecondAS", true, -1);
    }
    else if (auto51D2C3DB_val == 3) {
        libCOMI_gf_SendMissionTransmission("VoidShardDestroyedThirdAS", true, -1);
    }
    else if (auto51D2C3DB_val == 4) {
        libCOMI_gf_SendMissionTransmission("VoidShardDestroyedFourthAS", true, -1);
    }
    else if (auto51D2C3DB_val == 5) {
    }
    else {
        libCOMI_gf_SendMissionTransmission("PrimaryObjectiveUpdated", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidSliverDestroyedQ_Init () {
    gt_TransmissionVoidSliverDestroyedQ = TriggerCreate("gt_TransmissionVoidSliverDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Sliver Warning Controller
//--------------------------------------------------------------------------------------------------
bool gt_VoidSliverWarningController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_unitInSliverArea;
    int lv_countUnitsNearVoidSliver;
    int lv_countSolarLancesNearVoidSliver;

    // Automatic Variable Declarations
    const int auto88A2C240_ae = gv_c_VoidSliversCount;
    const int auto88A2C240_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false) && (TriggerIsEnabled(gt_TransmissionSliverWarning4DestroyedQ) == true)) {
        lv_unitInSliverArea = false;
        lv_i = 1;
        for ( ; ( (auto88A2C240_ai >= 0 && lv_i <= auto88A2C240_ae) || (auto88A2C240_ai < 0 && lv_i >= auto88A2C240_ae) ) ; lv_i += auto88A2C240_ai ) {
            if ((UnitIsAlive(gv_voidSlivers[lv_i]) == true)) {
                lv_countUnitsNearVoidSliver = UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidSlivers[lv_i]), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                lv_countSolarLancesNearVoidSliver = UnitGroupCount(UnitGroup("SOAThermalLanceTargeter", gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_voidSlivers[lv_i]), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if (((lv_countUnitsNearVoidSliver - lv_countSolarLancesNearVoidSliver) > 0)) {
                    lv_unitInSliverArea = true;
                }

            }

        }
        if ((lv_unitInSliverArea == true)) {
            if ((TriggerIsEnabled(gt_TransmissionSliverWarning4DestroyedQ) == true) && (gf_NumberofDestroyedVoidSlivers() == 4)) {
                TriggerExecute(gt_TransmissionSliverWarning4DestroyedQ, true, false);
            }
            else if ((TriggerIsEnabled(gt_TransmissionSliverWarning3DestroyedQ) == true) && (gf_NumberofDestroyedVoidSlivers() == 3)) {
                TriggerExecute(gt_TransmissionSliverWarning3DestroyedQ, true, false);
            }
            else if ((TriggerIsEnabled(gt_TransmissionSliverWarning2DestroyedQ) == true) && (gf_NumberofDestroyedVoidSlivers() == 2)) {
                TriggerExecute(gt_TransmissionSliverWarning2DestroyedQ, true, false);
            }
            else if ((TriggerIsEnabled(gt_TransmissionSliverWarning1DestroyedQ) == true) && (gf_NumberofDestroyedVoidSlivers() == 1)) {
                TriggerExecute(gt_TransmissionSliverWarning1DestroyedQ, true, false);
            }
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSliverWarningController_Init () {
    gt_VoidSliverWarningController = TriggerCreate("gt_VoidSliverWarningController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Sliver Warning (1 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSliverWarning1DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSliverWarning1DestroyedQ_Init () {
    gt_TransmissionSliverWarning1DestroyedQ = TriggerCreate("gt_TransmissionSliverWarning1DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Sliver Warning (2 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSliverWarning2DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSliverWarning2DestroyedQ_Init () {
    gt_TransmissionSliverWarning2DestroyedQ = TriggerCreate("gt_TransmissionSliverWarning2DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Sliver Warning (3 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSliverWarning3DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSliverWarning3DestroyedQ_Init () {
    gt_TransmissionSliverWarning3DestroyedQ = TriggerCreate("gt_TransmissionSliverWarning3DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Sliver Warning (4 Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSliverWarning4DestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PShakuras02_Music_Stinger", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSliverWarning4DestroyedQ_Init () {
    gt_TransmissionSliverWarning4DestroyedQ = TriggerCreate("gt_TransmissionSliverWarning4DestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen - Void Sliver Damage Taken
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenVoidSliverDamageTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_carIndex;
    int lv_damagedTrainIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_USER)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidSliverAC"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_voidSliverRunningDamage[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromFixed(EventUnitDamageSourcePlayer(), "DamageDealtToVoidShards", gv_voidSliverRunningDamage[EventUnitDamageSourcePlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenVoidSliverDamageTaken_Init () {
    gt_ScoreScreenVoidSliverDamageTaken = TriggerCreate("gt_ScoreScreenVoidSliverDamageTaken_Func");
    TriggerAddEventUnitDamaged(gt_ScoreScreenVoidSliverDamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective A
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjectiveA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ObjectiveEscortEvacShipsCreate(1);
    gv_bonusObjectiveSpawnPt = PointFromId(1827357784);
    gv_bonus_DestinationEvacPoint = PointFromId(2067823335);
    gf_InitiateBonusObjectiveEscort(gv_bonusObjectiveSpawnPt, gv_bonus_DestinationEvacPoint, 1);
    while (!((gv_objectiveEscortEvacShips[2] != c_invalidObjectiveId) && (ObjectiveGetState(gv_objectiveEscortEvacShips[2]) == c_objectiveStateActive))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    ObjectiveShow(gv_objectiveEscortEvacShips[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjectiveA_Init () {
    gt_StartBonusObjectiveA = TriggerCreate("gt_StartBonusObjectiveA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective B
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjectiveB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((ObjectiveGetState(gv_objectiveEscortEvacShips[1]) != c_objectiveStateActive))) {
        Wait(1.0, c_timeGame);
    }
    gf_ObjectiveEscortEvacShipsCreate(2);
    if ((UnitIsAlive(gv_voidSlivers[4]) == false)) {
        gv_escortPointNorthFirst = true;
    }
    else {
        gv_escortPointNorthFirst = false;
    }
    if ((gv_escortPointNorthFirst == true)) {
        gv_bonus_DestinationEvacPoint = PointFromId(1246145202);
    }
    else {
        gv_bonus_DestinationEvacPoint = PointFromId(2028190906);
    }
    if ((UnitIsValid(gv_currentEscortShip) == true)) {
        gv_bonusObjectiveSpawnPt = UnitGetPosition(gv_currentEscortShip);
    }
    else {
        gv_bonusObjectiveSpawnPt = PointFromId(1827357784);
    }
    gf_InitiateBonusObjectiveEscort(gv_bonusObjectiveSpawnPt, gv_bonus_DestinationEvacPoint, 2);
    while (!((ObjectiveGetState(gv_objectiveEscortEvacShips[3]) == c_objectiveStateActive))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    ObjectiveShow(gv_objectiveEscortEvacShips[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjectiveB_Init () {
    gt_StartBonusObjectiveB = TriggerCreate("gt_StartBonusObjectiveB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective C
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjectiveC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((ObjectiveGetState(gv_objectiveEscortEvacShips[2]) != c_objectiveStateActive))) {
        Wait(1.0, c_timeGame);
    }
    gf_ObjectiveEscortEvacShipsCreate(3);
    if ((gv_escortPointNorthFirst == true)) {
        gv_bonus_DestinationEvacPoint = PointFromId(2028190906);
    }
    else {
        gv_bonus_DestinationEvacPoint = PointFromId(1246145202);
    }
    if ((UnitIsValid(gv_currentEscortShip) == true)) {
        gv_bonusObjectiveSpawnPt = UnitGetPosition(gv_currentEscortShip);
    }
    else {
        gv_bonusObjectiveSpawnPt = PointFromId(1827357784);
    }
    gf_InitiateBonusObjectiveEscort(gv_bonusObjectiveSpawnPt, gv_bonus_DestinationEvacPoint, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjectiveC_Init () {
    gt_StartBonusObjectiveC = TriggerCreate("gt_StartBonusObjectiveC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Escort Intro Ping EvacPoints
//--------------------------------------------------------------------------------------------------
bool gt_BonusEscortIntroPingEvacPoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(2067823335), 10.0, Color(100.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(2067823335), 3.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(PointFromId(2067823335), 3.0), 0.1, false);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1246145202), 10.0, Color(100.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(1246145202), 3.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(PointFromId(1246145202), 3.0), 0.1, false);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(2028190906), 10.0, Color(100.00, 100.00, 0.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(2028190906), 3.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(PointFromId(2028190906), 3.0), 0.1, false);
    Wait(25.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEscortIntroPingEvacPoints_Init () {
    gt_BonusEscortIntroPingEvacPoints = TriggerCreate("gt_BonusEscortIntroPingEvacPoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Escort Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusEscortIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoDC03B440_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoDC03B440_val = RandomInt(0, 2);
    if (autoDC03B440_val == 0) {
        libCOMI_gf_SendMissionTransmission("BonusIntro1AS", true, -1);
    }
    else if (autoDC03B440_val == 1) {
        libCOMI_gf_SendMissionTransmission("BonusIntro2AS", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("BonusIntro3AS", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEscortIntroQ_Init () {
    gt_BonusEscortIntroQ = TriggerCreate("gt_BonusEscortIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Escort Create Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusEscortCreateQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCreateAS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEscortCreateQ_Init () {
    gt_BonusEscortCreateQ = TriggerCreate("gt_BonusEscortCreateQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Escort Moving Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusEscortMovingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusMovingAS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerEnable(TriggerGetCurrent(), true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEscortMovingQ_Init () {
    gt_BonusEscortMovingQ = TriggerCreate("gt_BonusEscortMovingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Escort Stopped Q 
//--------------------------------------------------------------------------------------------------
bool gt_BonusEscortStoppedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusStoppedAS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerEnable(TriggerGetCurrent(), true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEscortStoppedQ_Init () {
    gt_BonusEscortStoppedQ = TriggerCreate("gt_BonusEscortStoppedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Escort Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusEscortFailedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((ObjectiveGetState(gv_objectiveEscortEvacShips[3]) == c_objectiveStateFailed)) {
        libCOMI_gf_SendMissionTransmission("BonusFailedAS", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("BonusDestroyedAS", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEscortFailedQ_Init () {
    gt_BonusEscortFailedQ = TriggerCreate("gt_BonusEscortFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Escort Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusEscortCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusComplete", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEscortCompleteQ_Init () {
    gt_BonusEscortCompleteQ = TriggerCreate("gt_BonusEscortCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Rain
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnRain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "RainEmitterLarge");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnRain_Init () {
    gt_TurnOnRain = TriggerCreate("gt_TurnOnRain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On Lightning Strikes
//--------------------------------------------------------------------------------------------------
bool gt_TurnOnLightningStrikes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "LightningBolt");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "ThunderLightning");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnOnLightningStrikes_Init () {
    gt_TurnOnLightningStrikes = TriggerCreate("gt_TurnOnLightningStrikes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9F63EC97_g;
    int auto9F63EC97_var;
    playergroup auto8A084A2B_g;
    int auto8A084A2B_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFailTimerFailed, true, false);
    TriggerExecute(gt_ObjectiveDestroyVoidSliversFailed, true, false);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/C6F74663"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(797)), c_animNameDefault, "Death", 0, c_animTimeDefault);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "RainEmitterLarge");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "LightningBolt");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "ThunderLightning");
    libNtve_gf_PauseUnit(gv_amonUnit, false);
    libNtve_gf_ShowHideUnit(gv_amonUnit, true);
    VisRevealArea(UnitGetOwner(gv_amonUnit), RegionFromId(17), 0.0, false);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoFromId(2605), 0.0);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_AmonAwake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "AC_Music_AiurSiege_FailOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_SendActorMessageToUnit(gv_amonUnit, "AnimGroupApply Work Stand,Work,Start Stand,Work,End");
    libCOMI_gf_SendMissionTransmission("DefeatAS", false, -1);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_amonUnit, OrderTargetingPoint(AbilityCommand("AmonHostDeathBeam", 0), PointFromId(2619)), c_orderQueueReplace);
    auto9F63EC97_g = libCOMI_gf_HumanPlayers();
    auto9F63EC97_var = -1;
    while (true) {
        auto9F63EC97_var = PlayerGroupNextPlayer(auto9F63EC97_g, auto9F63EC97_var);
        if (auto9F63EC97_var < 0) { break; }
        CameraApplyInfo(auto9F63EC97_var, CameraInfoFromId(319), 3.0, -1, 10, true);
    }
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_AmonShoots", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    Wait(2.0, c_timeGame);
    auto8A084A2B_g = libCOMI_gf_HumanPlayers();
    auto8A084A2B_var = -1;
    while (true) {
        auto8A084A2B_var = PlayerGroupNextPlayer(auto8A084A2B_g, auto8A084A2B_var);
        if (auto8A084A2B_var < 0) { break; }
        CameraShake(auto8A084A2B_var, "Light", "Earthquake", 0.0, 1.0, 8.0);
        CameraApplyInfo(auto8A084A2B_var, CameraInfoFromId(771), 0.0, -1, 10, true);
        CameraApplyInfo(auto8A084A2B_var, CameraInfoFromId(2661), 5.0, -1, 10, true);
    }
    Wait(2.0, c_timeGame);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventTimer(gt_DefeatPrimaryObjectiveFailed, gv_missionFailTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Void Slivers Destroyed Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryVoidSliversDestroyedCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9D5D8C20_g;
    int auto9D5D8C20_var;
    playergroup autoC0CB242C_g;
    int autoC0CB242C_var;
    playergroup auto2B06E477_g;
    int auto2B06E477_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFailTimerComplete, true, false);
    TriggerExecute(gt_ObjectiveDestroyVoidSliversComplete, true, true);
    VictoryPanelAddTrackedStatistic("DamageDealtToVoidShards");
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryAS");
    libNtve_gf_PauseUnit(gv_amonUnit, false);
    UnitSetHeight(UnitFromId(2102766350), 30.0, 0.0);
    UnitSetHeight(UnitFromId(1372570234), 30.0, 0.0);
    UnitSetHeight(UnitFromId(1916549955), 15.0, 0.0);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoFromId(2706), 0.0);
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_P02Fanfare, true, false);
    Wait(0.66, c_timeGame);
    UnitKill(gv_amonUnit);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(797)), c_animNameDefault, "Death", 0, c_animTimeDefault);
    TriggerExecute(gt_P01Fanfare, true, false);
    auto9D5D8C20_g = libCOMI_gf_HumanPlayers();
    auto9D5D8C20_var = -1;
    while (true) {
        auto9D5D8C20_var = PlayerGroupNextPlayer(auto9D5D8C20_g, auto9D5D8C20_var);
        if (auto9D5D8C20_var < 0) { break; }
        CameraShake(auto9D5D8C20_var, "Medium", "Earthquake", 0.0, 2.0, 5.0);
    }
    Wait(2.0, c_timeReal);
    autoC0CB242C_g = libCOMI_gf_HumanPlayers();
    autoC0CB242C_var = -1;
    while (true) {
        autoC0CB242C_var = PlayerGroupNextPlayer(autoC0CB242C_g, autoC0CB242C_var);
        if (autoC0CB242C_var < 0) { break; }
        CameraShake(autoC0CB242C_var, "Heavy", "Earthquake", 0.0, 2.0, 5.0);
    }
    Wait(2.0, c_timeGame);
    auto2B06E477_g = libCOMI_gf_HumanPlayers();
    auto2B06E477_var = -1;
    while (true) {
        auto2B06E477_var = PlayerGroupNextPlayer(auto2B06E477_g, auto2B06E477_var);
        if (auto2B06E477_var < 0) { break; }
        CameraShake(auto2B06E477_var, "Massive", "Earthquake", 0.0, 0.0, 3.1);
    }
    SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_White_to_Ashes", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/56377069"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryVoidSliversDestroyedCompleted_Init () {
    gt_VictoryVoidSliversDestroyedCompleted = TriggerCreate("gt_VictoryVoidSliversDestroyedCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P01 Fanfare
//--------------------------------------------------------------------------------------------------
bool gt_P01Fanfare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_fanfarePlayer;
    unit lv_fanfareSpawner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fanfarePlayer = gv_pLAYER_01_USER;
    lv_fanfareSpawner = UnitFromId(2102766350);
    if (((PlayerRace(lv_fanfarePlayer) == "Terr") || (PlayerRace(lv_fanfarePlayer) == "InfT"))) {
        while (true) {
            PlayerCreateEffectPoint(gv_pLAYER_01_USER, "HeroNukeDetonate", PointFromId(88));
            Wait(RandomFixed(3.0, 6.0), c_timeGame);
        }
    }
    else if (((PlayerRace(lv_fanfarePlayer) == "Zerg") || (PlayerRace(lv_fanfarePlayer) == "PZrg"))) {
        while ((UnitIsValid(lv_fanfareSpawner) == true) && (UnitIsValid(UnitFromId(1916549955)) == true)) {
            UnitSetPosition(lv_fanfareSpawner, PointWithOffsetPolar(UnitGetPosition(UnitFromId(1916549955)), RandomFixed(0.0, 2.0), libNtve_gf_RandomAngle()), false);
            UnitCreateEffectUnit(lv_fanfareSpawner, "ZergTowerArtilleryLaunchSwarm", UnitFromId(1916549955));
            Wait(RandomFixed(0.125, 0.25), c_timeGame);
        }
    }
    else if (true) {
        SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_SoABeam2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "Cybros_Beam");
        ActorSend(ActorFromDoodad(DoodadFromId(416)), "AnimPlay Birth Birth");
        ActorSend(ActorFromDoodad(DoodadFromId(416)), "AnimPlay Spell Stand,Work,Start 0 -1.000000 -1.000000 10.000000 AsDuration");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P01Fanfare_Init () {
    gt_P01Fanfare = TriggerCreate("gt_P01Fanfare_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P02 Fanfare
//--------------------------------------------------------------------------------------------------
bool gt_P02Fanfare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fanfarePlayer;
    int lv_fanfareSpawner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fanfareSpawner = gv_pLAYER_02_USER;
    lv_fanfarePlayer = UnitFromId(1372570234);
    if (((PlayerRace(lv_fanfareSpawner) == "Terr") || (PlayerRace(lv_fanfareSpawner) == "InfT"))) {
        while ((UnitIsValid(lv_fanfarePlayer) == true) && (UnitIsValid(UnitFromId(1916549955)) == true)) {
            UnitSetPosition(lv_fanfarePlayer, PointWithOffsetPolar(UnitGetPosition(UnitFromId(1916549955)), RandomFixed(0.0, 2.0), libNtve_gf_RandomAngle()), false);
            UnitCreateEffectUnit(lv_fanfarePlayer, "HyperionVoidCoopYamatoCannonLM", UnitFromId(1916549955));
            Wait(RandomFixed(0.25, 1.0), c_timeGame);
        }
    }
    else if (((PlayerRace(lv_fanfareSpawner) == "Zerg") || (PlayerRace(lv_fanfareSpawner) == "PZrg"))) {
        while ((UnitIsValid(lv_fanfarePlayer) == true) && (UnitIsValid(UnitFromId(1916549955)) == true)) {
            UnitSetPosition(lv_fanfarePlayer, PointWithOffsetPolar(UnitGetPosition(UnitFromId(1916549955)), RandomFixed(0.0, 2.0), libNtve_gf_RandomAngle()), false);
            UnitCreateEffectUnit(lv_fanfarePlayer, "ParasiteSporeLaunchMissile", UnitFromId(1916549955));
            Wait(RandomFixed(0.0, 0.125), c_timeGame);
        }
    }
    else if (true) {
        Wait(0.66, c_timeGame);
        SoundPlayForPlayer(SoundLink("Event_Aiur05Victory_SoABeam1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "SOA_Beam");
        ActorSend(ActorFromDoodad(DoodadFromId(2567)), "AnimPlay Birth Birth");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_P02Fanfare_Init () {
    gt_P02Fanfare = TriggerCreate("gt_P02Fanfare_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Amon Beam Controller
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAmonBeamController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_beamPathIter;
    point lv_currentPoint;
    unit lv_deathBeamTargetUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_amonDeathBeam = EventUnitCreatedUnit();
    lv_deathBeamTargetUnit = EventUnitCreatedUnit();
    lv_beamPathIter = 2;
    lv_currentPoint = PointFromId(2620);
    Wait(0.5, c_timeGame);
    while ((DistanceBetweenPoints(UnitGetPosition(lv_deathBeamTargetUnit), PointFromId(2660)) > 1) && (UnitIsAlive(lv_deathBeamTargetUnit) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_deathBeamTargetUnit), lv_currentPoint) < 1)) {
            lv_beamPathIter += 1;
            if ((lv_beamPathIter < 10)) {
                lv_currentPoint = PointFromName(("Defeat - Amon Beam 0" + IntToString(lv_beamPathIter)));
            }
            else {
                lv_currentPoint = PointFromName(("Defeat - Amon Beam " + IntToString(lv_beamPathIter)));
            }
        }

        UnitIssueOrder(lv_deathBeamTargetUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_currentPoint), c_orderQueueReplace);
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionCircle(UnitGetPosition(lv_deathBeamTargetUnit), 1.0), "OrbitalMegaDeathBeam_ImpactTrail");
        libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal PurifierBeamImpact", "OrbitalMegaDeathBeam_ImpactTrail", RegionCircle(UnitGetPosition(lv_deathBeamTargetUnit), 1.0));
        Wait(0.125, c_timeGame);
    }
    if ((UnitIsAlive(gv_amonUnit) == true)) {
        UnitIssueOrder(gv_amonUnit, Order(AbilityCommand("AmonHostDeathBeamCancel", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAmonBeamController_Init () {
    gt_DefeatAmonBeamController = TriggerCreate("gt_DefeatAmonBeamController_Func");
    TriggerAddEventUnitCreated(gt_DefeatAmonBeamController, UnitRefFromVariable("gv_amonUnit"), "AmonHostDeathBeam", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;
    point lv_rallyLocation;

    // Automatic Variable Declarations
    fixed auto9336E1DD_at;
    const int auto0B9BE98F_ae = gv_pLAYER_04_Player02Enemy;
    int auto0B9BE98F_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    if ((gv_attackWave02_AttackP1 == true)) {
        lv_attackWaveSpawnLocation = PointFromId(853460097);
        lv_rallyLocation = PointFromId(785031012);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(463620504);
        lv_rallyLocation = PointFromId(1791218540);
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_rallyLocation, true);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_Player02Enemy));
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    auto9336E1DD_at = 0;
    while (!(((UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(PointFromId(785031012), 10.0), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(PointFromId(1791218540), 10.0), 0), c_unitCountAlive) > 0))) && auto9336E1DD_at <= 30.0) {
        Wait(1.0, c_timeGame);
        auto9336E1DD_at = auto9336E1DD_at + 1.0;
    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        auto0B9BE98F_var = gv_pLAYER_03_Player01Enemy;
        for ( ; auto0B9BE98F_var <= auto0B9BE98F_ae; auto0B9BE98F_var += 1 ) {
            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto0B9BE98F_var), 0, 0, 1, 1, 0, 0), gv_hybridMinor, 0, auto0B9BE98F_var, lv_rallyLocation, 270.0);
            gf_CreateWarpInEffect(UnitLastCreated());
            UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        }
    }

    if ((gv_attackWave02_AttackP1 == true)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1162714313), false);
    }
    else {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(2080400002), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03 - Expo Attack
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03ExpoAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    fixed autoCBB7AB44_at;
    const int autoB270B58E_ae = gv_pLAYER_04_Player02Enemy;
    int autoB270B58E_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_attackWaveSpawnLocation = PointFromId(463620504);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1791218540), true);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_Player02Enemy));
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    autoCBB7AB44_at = 0;
    while (!((UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(PointFromId(1791218540), 10.0), 0), c_unitCountAlive) > 0)) && autoCBB7AB44_at <= 30.0) {
        Wait(1.0, c_timeGame);
        autoCBB7AB44_at = autoCBB7AB44_at + 1.0;
    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        autoB270B58E_var = gv_pLAYER_03_Player01Enemy;
        for ( ; autoB270B58E_var <= autoB270B58E_ae; autoB270B58E_var += 1 ) {
            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(autoB270B58E_var), 0, 0, 1, 1, 0, 0), gv_hybridMinor, 0, autoB270B58E_var, PointFromId(1791218540), 270.0);
            gf_CreateWarpInEffect(UnitLastCreated());
            UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        }
    }

    libCOMI_gf_AddAttackForceWaypoint(PointFromId(404084142), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(2108361313), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03ExpoAttack_Init () {
    gt_AttackWave03ExpoAttack = TriggerCreate("gt_AttackWave03ExpoAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04 - Base Attack
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04BaseAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    fixed auto4F4F0384_at;
    const int auto385B8959_ae = gv_pLAYER_04_Player02Enemy;
    int auto385B8959_var;
    unitgroup autoC2D83719_g;
    int autoC2D83719_u;
    unit autoC2D83719_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_attackWaveSpawnLocation = PointFromId(853460097);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(785031012), true);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_Player02Enemy));
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    auto4F4F0384_at = 0;
    while (!((UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(PointFromId(785031012), 10.0), 0), c_unitCountAlive) > 0)) && auto4F4F0384_at <= 30.0) {
        Wait(1.0, c_timeGame);
        auto4F4F0384_at = auto4F4F0384_at + 1.0;
    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        auto385B8959_var = gv_pLAYER_03_Player01Enemy;
        for ( ; auto385B8959_var <= auto385B8959_ae; auto385B8959_var += 1 ) {
            if ((auto385B8959_var == gv_pLAYER_03_Player01Enemy)) {
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto385B8959_var), 1, 1, 1, 2, 0, 0), gv_hybridMinor, 0, auto385B8959_var, PointFromId(785031012), 270.0);
            }
            else {
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto385B8959_var), 0, 0, 1, 1, 0, 0), gv_hybridMajor, 0, auto385B8959_var, PointFromId(785031012), 270.0);
            }
            autoC2D83719_g = UnitLastCreatedGroup();
            autoC2D83719_u = UnitGroupCount(autoC2D83719_g, c_unitCountAll);
            for (;; autoC2D83719_u -= 1) {
                autoC2D83719_var = UnitGroupUnitFromEnd(autoC2D83719_g, autoC2D83719_u);
                if (autoC2D83719_var == null) { break; }
                gf_CreateWarpInEffect(autoC2D83719_var);
            }
            UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        }
    }

    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04BaseAttack_Init () {
    gt_AttackWave04BaseAttack = TriggerCreate("gt_AttackWave04BaseAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05a
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05a_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;
    int lv_attackingPlayer;
    point lv_spawnLocation;
    point lv_rallyLocation;
    point lv_finalPathPoint;
    unitgroup lv_spawnedHybrid;

    // Automatic Variable Declarations
    fixed auto9B9A86C0_at;
    unitgroup auto5DB12AC3_g;
    int auto5DB12AC3_u;
    unit auto5DB12AC3_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();
    lv_spawnedHybrid = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingPlayer = gv_pLAYER_03_Player01Enemy;
    lv_attackWaveSpawnLocation = PointFromId(853460097);
    lv_rallyLocation = PointFromId(785031012);
    lv_finalPathPoint = PointFromId(1162714313);
    AIAttackWaveSetTargetPlayer(lv_attackingPlayer, libCOMI_gf_HumanPlayers());
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    libCOMI_gf_AddAttackForceWaypoint(lv_rallyLocation, true);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(lv_attackingPlayer, lv_attackingPlayer, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(lv_attackingPlayer));
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    auto9B9A86C0_at = 0;
    while (!((UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(lv_rallyLocation, 10.0), 0), c_unitCountAlive) > 0)) && auto9B9A86C0_at <= 30.0) {
        Wait(1.0, c_timeGame);
        auto9B9A86C0_at = auto9B9A86C0_at + 1.0;
    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_attackingPlayer), 1, 1, 2, 2, 0, 0), gv_hybridMinor, 0, lv_attackingPlayer, lv_rallyLocation, 270.0);
        UnitGroupAddUnitGroup(lv_spawnedHybrid, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_attackingPlayer), 0, 0, 0, 1, 0, 0), gv_hybridMajor, 0, lv_attackingPlayer, lv_rallyLocation, 270.0);
        UnitGroupAddUnitGroup(lv_spawnedHybrid, UnitLastCreatedGroup());
        auto5DB12AC3_g = lv_spawnedHybrid;
        auto5DB12AC3_u = UnitGroupCount(auto5DB12AC3_g, c_unitCountAll);
        for (;; auto5DB12AC3_u -= 1) {
            auto5DB12AC3_var = UnitGroupUnitFromEnd(auto5DB12AC3_g, auto5DB12AC3_u);
            if (auto5DB12AC3_var == null) { break; }
            gf_CreateWarpInEffect(auto5DB12AC3_var);
        }
        UnitGroupAddUnitGroup(lv_attackGroup, lv_spawnedHybrid);
    }

    libCOMI_gf_AddAttackForceWaypoint(lv_finalPathPoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05a_Init () {
    gt_AttackWave05a = TriggerCreate("gt_AttackWave05a_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;
    int lv_attackingPlayer;
    point lv_spawnLocation;
    point lv_rallyLocation;
    point lv_finalPathPoint;
    unitgroup lv_spawnedHybrid;

    // Automatic Variable Declarations
    fixed auto009F525C_at;
    unitgroup auto587873A6_g;
    int auto587873A6_u;
    unit auto587873A6_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();
    lv_spawnedHybrid = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingPlayer = gv_pLAYER_04_BULLIES;
    lv_attackWaveSpawnLocation = PointFromId(463620504);
    lv_rallyLocation = PointFromId(1791218540);
    lv_finalPathPoint = PointFromId(2080400002);
    AIAttackWaveSetTargetPlayer(lv_attackingPlayer, libCOMI_gf_HumanPlayers());
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    libCOMI_gf_AddAttackForceWaypoint(lv_rallyLocation, true);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(lv_attackingPlayer, lv_attackingPlayer, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(lv_attackingPlayer));
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    auto009F525C_at = 0;
    while (!((UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(lv_rallyLocation, 10.0), 0), c_unitCountAlive) > 0)) && auto009F525C_at <= 30.0) {
        Wait(1.0, c_timeGame);
        auto009F525C_at = auto009F525C_at + 1.0;
    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_attackingPlayer), 1, 1, 2, 2, 0, 0), gv_hybridMinor, 0, lv_attackingPlayer, lv_rallyLocation, 270.0);
        UnitGroupAddUnitGroup(lv_spawnedHybrid, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_attackingPlayer), 0, 0, 0, 1, 0, 0), gv_hybridMajor, 0, lv_attackingPlayer, lv_rallyLocation, 270.0);
        UnitGroupAddUnitGroup(lv_spawnedHybrid, UnitLastCreatedGroup());
        auto587873A6_g = lv_spawnedHybrid;
        auto587873A6_u = UnitGroupCount(auto587873A6_g, c_unitCountAll);
        for (;; auto587873A6_u -= 1) {
            auto587873A6_var = UnitGroupUnitFromEnd(auto587873A6_g, auto587873A6_u);
            if (auto587873A6_var == null) { break; }
            gf_CreateWarpInEffect(auto587873A6_var);
        }
        UnitGroupAddUnitGroup(lv_attackGroup, lv_spawnedHybrid);
    }

    libCOMI_gf_AddAttackForceWaypoint(lv_finalPathPoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05b_Init () {
    gt_AttackWave05b = TriggerCreate("gt_AttackWave05b_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Hybrid Types
//--------------------------------------------------------------------------------------------------
bool gt_SetupHybridTypes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoDF839B40_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF839B40_val = PlayerRace(gv_pLAYER_03_Player01Enemy);
    if (autoDF839B40_val == "Prot") {
        gv_hybridMajor = "HybridBehemoth";
        gv_hybridMinor = "HybridDestroyer";
    }
    else if (autoDF839B40_val == "Terr") {
        gv_hybridMajor = "HybridDominatorVoid";
        gv_hybridMinor = "HybridReaver";
    }
    else if (autoDF839B40_val == "Zerg") {
        gv_hybridMajor = "HybridDominatorVoid";
        gv_hybridMinor = "HybridNemesis";
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupHybridTypes_Init () {
    gt_SetupHybridTypes = TriggerCreate("gt_SetupHybridTypes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 01
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidSlivers[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(1), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(6), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(24), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(29), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(33), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements01_Init () {
    gt_VoidSpawnsReinforcements01 = TriggerCreate("gt_VoidSpawnsReinforcements01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 02
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidSlivers[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(3), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(14), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(25), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(30), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(34), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements02_Init () {
    gt_VoidSpawnsReinforcements02 = TriggerCreate("gt_VoidSpawnsReinforcements02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 03
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidSlivers[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(4), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(15), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(26), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(31), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(35), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements03_Init () {
    gt_VoidSpawnsReinforcements03 = TriggerCreate("gt_VoidSpawnsReinforcements03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawns Reinforcements 04 (Hard+)
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawnsReinforcements04Hard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 0, 0) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(gv_voidSlivers[1]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(5), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[2]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(20), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[3]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_07_VOIDFORCES, RegionFromId(27), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[4]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_06_VOIDFORCES, RegionFromId(32), true);
    }

    if ((UnitIsAlive(gv_voidSlivers[5]) == true)) {
        AIToggleBulliesInRegion(gv_pLAYER_05_VOIDFORCES, RegionFromId(36), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawnsReinforcements04Hard_Init () {
    gt_VoidSpawnsReinforcements04Hard = TriggerCreate("gt_VoidSpawnsReinforcements04Hard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective FailTimer Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFailTimerCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_AiurSiege_Primary02");
    gv_objectiveFailTimer = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFailTimerCreate_Init () {
    gt_ObjectiveFailTimerCreate = TriggerCreate("gt_ObjectiveFailTimerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective FailTimer Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFailTimerComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFailTimerCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_AiurSiege_Primary02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFailTimerComplete_Init () {
    gt_ObjectiveFailTimerComplete = TriggerCreate("gt_ObjectiveFailTimerComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective FailTimer Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFailTimerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveFailTimerCreate, true, false);
    TextExpressionSetToken("Param/Expression/8A311A50", "CURRENT", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_missionFailTimer))));
    libCOMI_gf_SetMissionObjectiveCustomText("AC_AiurSiege_Primary02", TextExpressionAssemble("Param/Expression/8A311A50"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFailTimerUpdate_Init () {
    gt_ObjectiveFailTimerUpdate = TriggerCreate("gt_ObjectiveFailTimerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective FailTimer Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFailTimerFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFailTimerCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_AiurSiege_Primary02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFailTimerFailed_Init () {
    gt_ObjectiveFailTimerFailed = TriggerCreate("gt_ObjectiveFailTimerFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Slivers Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidSliversCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_AiurSiege_Primary01");
    gv_objectiveDestroyVoidSlivers = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidSliversCreate_Init () {
    gt_ObjectiveDestroyVoidSliversCreate = TriggerCreate("gt_ObjectiveDestroyVoidSliversCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Slivers Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidSliversComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyVoidSliversCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_AiurSiege_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidSliversComplete_Init () {
    gt_ObjectiveDestroyVoidSliversComplete = TriggerCreate("gt_ObjectiveDestroyVoidSliversComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Slivers Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidSliversUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyVoidSliversCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_AiurSiege_Primary01", gf_NumberofDestroyedVoidSlivers());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidSliversUpdate_Init () {
    gt_ObjectiveDestroyVoidSliversUpdate = TriggerCreate("gt_ObjectiveDestroyVoidSliversUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Slivers Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidSliversFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyVoidSliversCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_AiurSiege_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidSliversFailed_Init () {
    gt_ObjectiveDestroyVoidSliversFailed = TriggerCreate("gt_ObjectiveDestroyVoidSliversFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stats For Units That Die
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStatsForUnitsThatDie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(libNtve_gf_KillingUnit()) == "VoidShard") || (UnitGetType(libNtve_gf_KillingUnit()) == "VoidTendrilUnstableEnergy")) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true)) {
        gv_victoryStat_UnitsLostToSliver[UnitGetOwner(EventUnit())] += 1;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true) && ((UnitGetOwner(EventUnit()) == gv_pLAYER_05_VOIDFORCES) || (UnitGetOwner(EventUnit()) == gv_pLAYER_06_VOIDFORCES) || (UnitGetOwner(EventUnit()) == gv_pLAYER_07_VOIDFORCES)) && (UnitGetType(EventUnit()) != "VoidShard") && (UnitGetType(EventUnit()) != "VoidRiftUnselectable")) {
        gv_victoryStat_VoidUnitsKilled[libNtve_gf_KillingPlayer()] += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStatsForUnitsThatDie_Init () {
    gt_VictoryStatsForUnitsThatDie = TriggerCreate("gt_VictoryStatsForUnitsThatDie_Func");
    TriggerAddEventUnitDied(gt_VictoryStatsForUnitsThatDie, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Entity Spawned
//--------------------------------------------------------------------------------------------------
bool gt_VoidEntitySpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_05_VOIDFORCES) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_06_VOIDFORCES) || (UnitGetOwner(EventUnitProgressUnit()) == gv_pLAYER_07_VOIDFORCES)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "VoidRiftUnselectable"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitProgressUnit(), "VoidShade", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidEntitySpawned_Init () {
    gt_VoidEntitySpawned = TriggerCreate("gt_VoidEntitySpawned_Func");
    TriggerAddEventUnitTrainProgress(gt_VoidEntitySpawned, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    TechTreeUpgradeAddLevel(gv_pLAYER_11_BONUSESCORT, "CoopNPCPlayer", 1);
    PlayerSetColorIndex(gv_pLAYER_11_BONUSESCORT, 5, true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_VOIDFORCES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_VOIDFORCES, "HeroicShieldCleanUp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_VOIDFORCES, "HeroicShieldCleanUp", 1);
    PlayerGroupAdd(gv_enemyPlayerGroup_All, gv_pLAYER_03_BULLIES);
    PlayerGroupAdd(gv_enemyPlayerGroup_All, gv_pLAYER_04_BULLIES);
    PlayerGroupAdd(gv_enemyPlayerGroup_All, gv_pLAYER_05_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup_All, gv_pLAYER_06_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup_All, gv_pLAYER_07_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup_VoidForces, gv_pLAYER_05_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup_VoidForces, gv_pLAYER_06_VOIDFORCES);
    PlayerGroupAdd(gv_enemyPlayerGroup_VoidForces, gv_pLAYER_07_VOIDFORCES);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_pLAYER_05_VOIDFORCES, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_06_VOIDFORCES, AbilityCommand("Charge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_07_VOIDFORCES, AbilityCommand("Charge", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_airPatrol;
    unitgroup lv_infestationGroup;
    int lv_iter;
    string[11] lv_infestableTerranBuildings;
    int lv_infestableIndex;
    int lv_infestableIter;

    // Automatic Variable Declarations
    unitgroup auto6C3012C6_g;
    int auto6C3012C6_u;
    unit auto6C3012C6_var;
    unitgroup auto72E2CDFE_g;
    int auto72E2CDFE_u;
    unit auto72E2CDFE_var;
    unitgroup auto1088C3DF_g;
    int auto1088C3DF_u;
    unit auto1088C3DF_var;
    unitgroup autoD6334447_g;
    int autoD6334447_u;
    unit autoD6334447_var;
    unitgroup auto170FBD7E_g;
    int auto170FBD7E_u;
    unit auto170FBD7E_var;
    unitgroup auto6CA27623_g;
    int auto6CA27623_u;
    unit auto6CA27623_var;
    playergroup auto50EEA94E_g;
    int auto50EEA94E_var;
    int auto3F8B3A84_ae;
    const int auto3F8B3A84_ai = 1;
    unitgroup autoDD99B933_g;
    int autoDD99B933_u;
    unit autoDD99B933_var;
    unitgroup auto3C12E09F_g;
    int auto3C12E09F_u;
    unit auto3C12E09F_var;
    unitgroup auto08DA3358_g;
    int auto08DA3358_u;
    unit auto08DA3358_var;

    // Variable Initialization
    lv_airPatrol = UnitGroupEmpty();
    lv_infestationGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjectives[1] = "AC_AiurSiege_Bonus01";
    gv_bonusObjectives[2] = "AC_AiurSiege_Bonus02";
    gv_bonusObjectives[3] = "AC_AiurSiege_Bonus03";
    gv_amonUnit = UnitFromId(47);
    libNtve_gf_ShowHideUnit(gv_amonUnit, false);
    gv_voidSlivers[1] = UnitFromId(19);
    gv_voidSlivers[2] = UnitFromId(23);
    gv_voidSlivers[3] = UnitFromId(46);
    gv_voidSlivers[4] = UnitFromId(40);
    gv_voidSlivers[5] = UnitFromId(26);
    auto6C3012C6_g = UnitGroup("VoidShardAC", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C3012C6_u = UnitGroupCount(auto6C3012C6_g, c_unitCountAll);
    for (;; auto6C3012C6_u -= 1) {
        auto6C3012C6_var = UnitGroupUnitFromEnd(auto6C3012C6_g, auto6C3012C6_u);
        if (auto6C3012C6_var == null) { break; }
        UnitSetInfoTip(auto6C3012C6_var, UnitTypeGetName(UnitGetType(auto6C3012C6_var)));
    }
    auto72E2CDFE_g = UnitGroup(null, gv_pLAYER_06_VOIDFORCES, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto72E2CDFE_u = UnitGroupCount(auto72E2CDFE_g, c_unitCountAll);
    for (;; auto72E2CDFE_u -= 1) {
        auto72E2CDFE_var = UnitGroupUnitFromEnd(auto72E2CDFE_g, auto72E2CDFE_u);
        if (auto72E2CDFE_var == null) { break; }
        UnitBehaviorAdd(auto72E2CDFE_var, "VoidShade", auto72E2CDFE_var, 1);
    }
    auto1088C3DF_g = UnitGroup(null, gv_pLAYER_07_VOIDFORCES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1088C3DF_u = UnitGroupCount(auto1088C3DF_g, c_unitCountAll);
    for (;; auto1088C3DF_u -= 1) {
        auto1088C3DF_var = UnitGroupUnitFromEnd(auto1088C3DF_g, auto1088C3DF_u);
        if (auto1088C3DF_var == null) { break; }
        UnitBehaviorAdd(auto1088C3DF_var, "VoidShade", auto1088C3DF_var, 1);
    }
    autoD6334447_g = UnitGroup(null, gv_pLAYER_07_VOIDFORCES, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD6334447_u = UnitGroupCount(autoD6334447_g, c_unitCountAll);
    for (;; autoD6334447_u -= 1) {
        autoD6334447_var = UnitGroupUnitFromEnd(autoD6334447_g, autoD6334447_u);
        if (autoD6334447_var == null) { break; }
        UnitBehaviorAdd(autoD6334447_var, "VoidShade", autoD6334447_var, 1);
    }
    auto170FBD7E_g = UnitGroup(null, gv_pLAYER_06_VOIDFORCES, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto170FBD7E_u = UnitGroupCount(auto170FBD7E_g, c_unitCountAll);
    for (;; auto170FBD7E_u -= 1) {
        auto170FBD7E_var = UnitGroupUnitFromEnd(auto170FBD7E_g, auto170FBD7E_u);
        if (auto170FBD7E_var == null) { break; }
        UnitBehaviorAdd(auto170FBD7E_var, "VoidShade", auto170FBD7E_var, 1);
    }
    auto6CA27623_g = UnitGroup(null, gv_pLAYER_05_VOIDFORCES, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6CA27623_u = UnitGroupCount(auto6CA27623_g, c_unitCountAll);
    for (;; auto6CA27623_u -= 1) {
        auto6CA27623_var = UnitGroupUnitFromEnd(auto6CA27623_g, auto6CA27623_u);
        if (auto6CA27623_var == null) { break; }
        UnitBehaviorAdd(auto6CA27623_var, "VoidShade", auto6CA27623_var, 1);
    }
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedArmory";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedBarracks";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedBunker";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedCC";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedEngBay";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedFactory";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedMissileTurret";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedStarport";
    lv_infestableIndex += 1;
    lv_infestableTerranBuildings[lv_infestableIndex] = "InfestedSupply";
    auto50EEA94E_g = gv_enemyPlayerGroup_All;
    auto50EEA94E_var = -1;
    while (true) {
        auto50EEA94E_var = PlayerGroupNextPlayer(auto50EEA94E_g, auto50EEA94E_var);
        if (auto50EEA94E_var < 0) { break; }
        auto3F8B3A84_ae = lv_infestableIndex;
        lv_infestableIter = 1;
        for ( ; ( (auto3F8B3A84_ai >= 0 && lv_infestableIter <= auto3F8B3A84_ae) || (auto3F8B3A84_ai < 0 && lv_infestableIter >= auto3F8B3A84_ae) ) ; lv_infestableIter += auto3F8B3A84_ai ) {
            autoDD99B933_g = UnitGroup(lv_infestableTerranBuildings[lv_infestableIter], auto50EEA94E_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDD99B933_u = UnitGroupCount(autoDD99B933_g, c_unitCountAll);
            for (;; autoDD99B933_u -= 1) {
                autoDD99B933_var = UnitGroupUnitFromEnd(autoDD99B933_g, autoDD99B933_u);
                if (autoDD99B933_var == null) { break; }
                UnitBehaviorAddPlayer(autoDD99B933_var, "ColonyInfestation", UnitGetOwner(autoDD99B933_var), 1);
                if ((lv_infestableTerranBuildings[lv_infestableIter] == "InfestedBunker")) {
                    UnitCargoCreate(autoDD99B933_var, "Marine", 4);
                    gf_InfestedBunker(autoDD99B933_var);
                }

            }
        }
    }
    auto3C12E09F_g = UnitGroup("InfestedColonistShip", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3C12E09F_u = UnitGroupCount(auto3C12E09F_g, c_unitCountAll);
    for (;; auto3C12E09F_u -= 1) {
        auto3C12E09F_var = UnitGroupUnitFromEnd(auto3C12E09F_g, auto3C12E09F_u);
        if (auto3C12E09F_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto3C12E09F_var), "SetMinimapVisibility");
    }
    UnitGroupAddUnitGroup(lv_infestationGroup, UnitGroup("InfestationSpire", gv_pLAYER_03_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_infestationGroup, UnitGroup("InfestedColonistShip", gv_pLAYER_03_BULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto08DA3358_g = lv_infestationGroup;
    auto08DA3358_u = UnitGroupCount(auto08DA3358_g, c_unitCountAll);
    for (;; auto08DA3358_u -= 1) {
        auto08DA3358_var = UnitGroupUnitFromEnd(auto08DA3358_g, auto08DA3358_u);
        if (auto08DA3358_var == null) { break; }
        UnitBehaviorAddPlayer(auto08DA3358_var, "Harmless", gv_pLAYER_03_BULLIES, 1);
    }
    UnitSetState(UnitFromId(461054071), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(1726535306), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(725290646), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(154404808), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(732891468), c_unitStateInvulnerable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto05E89B49_g;
    int auto05E89B49_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("AiurTempleJungle", 0.0);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "RainEmitterLarge");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "LightningBolt");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "ThunderLightning");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Cybros_Beam");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "SOA_Beam");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "OrbitalMegaDeathBeam_ImpactTrail");
    libCOMI_gf_ShareVisionofUnitWithHumansCoop(gv_amonUnit, true);
    auto05E89B49_g = libCOMI_gf_HumanPlayers();
    auto05E89B49_var = -1;
    while (true) {
        auto05E89B49_var = PlayerGroupNextPlayer(auto05E89B49_g, auto05E89B49_var);
        if (auto05E89B49_var < 0) { break; }
        VisExploreArea(auto05E89B49_var, RegionFromId(16), true, false);
    }
    libCOMI_gf_AutoRevealRegionCoop(RegionFromId(43), RegionFromId(43), gv_pLAYER_11_BONUSESCORT);
    libCOMI_gf_AutoRevealRegionCoop(RegionFromId(44), RegionFromId(44), gv_pLAYER_11_BONUSESCORT);
    libCOMI_gf_AutoRevealRegionCoop(RegionFromId(45), RegionFromId(45), gv_pLAYER_11_BONUSESCORT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_sliverKilledFailTimerIncrease = (5.0 * 60.0);
    TriggerExecute(gt_Init08aDifficultySettingsVoidSlivers, true, false);
    gv_bonusObjectiveSpeed = 1.75;
    gv_bonusObjectiveHealth = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 500.0, 500.0, 250.0, 250.0, 0.0, 0.0);
    gv_bonusObjectiveShields = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1500.0, 1500.0, 1250.0, 1000.0, 0.0, 0.0);
    gv_warpPrismsMax = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 2, 2, 0, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08a Difficulty Settings Void Slivers
//--------------------------------------------------------------------------------------------------
bool gt_Init08aDifficultySettingsVoidSlivers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[4] lv_unlockAbility;
    int lv_unlockTempStorage;
    int lv_unlockIndex;

    // Automatic Variable Declarations
    unitgroup auto2544B541_g;
    int auto2544B541_u;
    unit auto2544B541_var;
    const int autoEAF2CA03_n = 3;
    int autoEAF2CA03_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2544B541_g = UnitGroup("VoidSliverAC", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2544B541_u = UnitGroupCount(auto2544B541_g, c_unitCountAll);
    for (;; auto2544B541_u -= 1) {
        auto2544B541_var = UnitGroupUnitFromEnd(auto2544B541_g, auto2544B541_u);
        if (auto2544B541_var == null) { break; }
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropLifeMax, libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 500.0, 500.0, 1000.0, 1500.0, 0.0, 0.0));
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropShieldsMax, libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1500.0, 1500.0, 3000.0, 4000.0, 0.0, 0.0));
        UnitSetPropertyFixed(auto2544B541_var, c_unitPropShieldsPercent, 100.0);
    }
    gv_voidSliverGenericCooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 10.0, 10.0, 5.0, 3.0, 0.0, 0.0);
    gv_voidSliverShockwaveRange = 11.0;
    gv_voidSliverShockwaveCooldown = 14.0;
    gv_voidSliverDeathGripRange = 16.0;
    gv_voidSliverDeathGripVitalityGrabbed = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 300.0, 300.0, 600.0, 800.0, 0.0, 0.0);
    gv_voidSliverDeathGripCooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 90.0, 90.0, 75.0, 60.0, 0.0, 0.0);
    gv_voidSliverUnstableEnergyRange = 18.0;
    gv_voidSliverUnstableEnergyCooldown = 20.0;
    gv_voidSliverDifficultyIncreaseShields = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1000.0, 1000.0, 1500.0, 2000.0, 0.0, 0.0);
    gv_voidSliverDifficultyIncreaseAbilityCooldownReductionPercent = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1.0, 1.0, 0.9, 0.7, 0.0, 0.0);
    lv_unlockAbility[1] = 1;
    lv_unlockAbility[2] = 2;
    lv_unlockAbility[3] = 3;
    for (autoEAF2CA03_i = 1; autoEAF2CA03_i <= autoEAF2CA03_n; autoEAF2CA03_i += 1) {
        lv_unlockIndex = RandomInt(1, 2);
        lv_unlockTempStorage = lv_unlockAbility[3];
        lv_unlockAbility[3] = lv_unlockAbility[lv_unlockIndex];
        lv_unlockAbility[lv_unlockIndex] = lv_unlockTempStorage;
    }
    gv_voidSliver_KilledAbilityUnlock_Shockwave = lv_unlockAbility[1];
    gv_voidSliver_KilledAbilityUnlock_UnstableEnergy = lv_unlockAbility[2];
    gv_voidSliver_KilledAbilityUnlock_DeathGrip = lv_unlockAbility[3];
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08aDifficultySettingsVoidSlivers_Init () {
    gt_Init08aDifficultySettingsVoidSlivers = TriggerCreate("gt_Init08aDifficultySettingsVoidSlivers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoA93CC237_g;
    int autoA93CC237_var;
    playergroup auto74EAD80A_g;
    int auto74EAD80A_var;
    const int auto3201462C_ae = gv_c_VoidSliversCount;
    const int auto3201462C_ai = 1;
    playergroup auto2C700281_g;
    int auto2C700281_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_VOIDFORCES, libCOMI_gf_CM_CoopAIPersonality());
    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_VOIDFORCES, libCOMI_gf_CM_CoopAIPersonality());
    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_07_VOIDFORCES, libCOMI_gf_CM_CoopAIPersonality());
    TechTreeUpgradeAddLevel(gv_pLAYER_03_Player01Enemy, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_Player02Enemy, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_Player01Enemy, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_Player02Enemy, "overlordtransport", 1);
    autoA93CC237_g = gv_enemyPlayerGroup_VoidForces;
    autoA93CC237_var = -1;
    while (true) {
        autoA93CC237_var = PlayerGroupNextPlayer(autoA93CC237_g, autoA93CC237_var);
        if (autoA93CC237_var < 0) { break; }
        AICampaignStart(autoA93CC237_var);
    }
    AINearestTownBullyRebuild(gv_pLAYER_03_BULLIES, true);
    AINearestTownBullyRebuild(gv_pLAYER_04_BULLIES, true);
    AINearestTownBullyRebuild(gv_pLAYER_05_VOIDFORCES, true);
    AINearestTownBullyRebuild(gv_pLAYER_06_VOIDFORCES, true);
    AINearestTownBullyRebuild(gv_pLAYER_07_VOIDFORCES, true);
    auto74EAD80A_g = gv_enemyPlayerGroup_All;
    auto74EAD80A_var = -1;
    while (true) {
        auto74EAD80A_var = PlayerGroupNextPlayer(auto74EAD80A_g, auto74EAD80A_var);
        if (auto74EAD80A_var < 0) { break; }
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(942));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(947));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(1297));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(1298));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(1650));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(1681));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(1200));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(835));
        libNtve_gf_DeclareNextTown(auto74EAD80A_var, PointFromId(1146));
    }
    lv_i = 1;
    for ( ; ( (auto3201462C_ai >= 0 && lv_i <= auto3201462C_ae) || (auto3201462C_ai < 0 && lv_i >= auto3201462C_ae) ) ; lv_i += auto3201462C_ai ) {
        libNtve_gf_DeclareNextTown(UnitGetOwner(gv_voidSlivers[lv_i]), UnitGetPosition(gv_voidSlivers[lv_i]));
    }
    TriggerExecute(gt_SetupHybridTypes, true, false);
    auto2C700281_g = gv_enemyPlayerGroup_VoidForces;
    auto2C700281_var = -1;
    while (true) {
        auto2C700281_var = PlayerGroupNextPlayer(auto2C700281_g, auto2C700281_var);
        if (auto2C700281_var < 0) { break; }
        AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(30.0, 30.0, 20.0, 20.0), libNtve_gf_DifficultyValueFixed(35.0, 35.0, 25.0, 25.0), auto2C700281_var);
        AIReqCountAsBuiltObject(auto2C700281_var, "Nexus");
        AIReqCountAsBuiltObject(auto2C700281_var, "CommandCenter");
        AIReqCountAsBuiltObject(auto2C700281_var, "OrbitalCommand");
        AIReqCountAsBuiltObject(auto2C700281_var, "Hatchery");
        AIReqCountAsBuiltObject(auto2C700281_var, "Nuke");
        AIReqCountAsBuiltObject(auto2C700281_var, "GhostAcademy");
        AIReqCountAsBuiltObject(auto2C700281_var, "SCV");
        AIReqCountAsBuiltObject(auto2C700281_var, "Probe");
        AIReqCountAsBuiltObject(auto2C700281_var, "Drone");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sliverIter;
    int lv_playerIter;

    // Automatic Variable Declarations
    const int auto07AA8B2B_ae = gv_c_VoidSliversCount;
    const int auto07AA8B2B_ai = 1;
    const int autoFF9CBEED_ae = 5;
    const int autoFF9CBEED_ai = 1;
    playergroup auto0BF29212_g;
    int autoE8B6C7A5_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_missionFailTimer, (8.0 * 60.0), false, c_timeGame);
    lv_sliverIter = 1;
    for ( ; ( (auto07AA8B2B_ai >= 0 && lv_sliverIter <= auto07AA8B2B_ae) || (auto07AA8B2B_ai < 0 && lv_sliverIter >= auto07AA8B2B_ae) ) ; lv_sliverIter += auto07AA8B2B_ai ) {
        gf_VoidSliverAI(lv_sliverIter, gv_voidSlivers[lv_sliverIter]);
    }
    TriggerExecute(gt_VoidSliverWarningController, true, false);
    TriggerEnable(gt_FailWarningQ, true);
    TriggerEnable(gt_FailImminentQ, true);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyVoidSliversCreate, true, false);
    lv_sliverIter = 1;
    for ( ; ( (autoFF9CBEED_ai >= 0 && lv_sliverIter <= autoFF9CBEED_ae) || (autoFF9CBEED_ai < 0 && lv_sliverIter >= autoFF9CBEED_ae) ) ; lv_sliverIter += autoFF9CBEED_ai ) {
        auto0BF29212_g = libCOMI_gf_HumanPlayers();
        lv_playerIter = -1;
        while (true) {
            lv_playerIter = PlayerGroupNextPlayer(auto0BF29212_g, lv_playerIter);
            if (lv_playerIter < 0) { break; }
            VisRevealArea(lv_playerIter, RegionCircle(UnitGetPosition(gv_voidSlivers[lv_sliverIter]), 5.0), 2.0, false);
        }
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_voidSlivers[lv_sliverIter]), UnitTypeGetName(UnitGetType(gv_voidSlivers[lv_sliverIter])));
        libHots_gf_StorePingForUnit(gv_voidSlivers[lv_sliverIter], 1, PingLastCreated());
        Wait(0.125, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFailTimerCreate, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_FailTimerWindow, true, false);
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoE8B6C7A5_val = RandomInt(0, 2);
    if (autoE8B6C7A5_val == 0) {
        libCOMI_gf_SendMissionTransmission("Intro1AS", true, -1);
    }
    else if (autoE8B6C7A5_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro2AS", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3AS", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_MissionEvents, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Options Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateOptionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_numOptions;

    // Automatic Variable Declarations
    int autoC58A302C_ae;
    const int autoC58A302C_ai = 1;
    int auto8A5D2DA9_ae;
    const int auto8A5D2DA9_ai = 1;

    // Variable Initialization
    lv_numOptions = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(700, (220+(lv_numOptions*70)), c_anchorCenter, 0, 0, true);
    gv_optionsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_optionsDialog, 700, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/E7E4F0B0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_optionsDialogTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_optionsDialogTitle, "BattlenetDialogTitle", PlayerGroupAll());
    autoC58A302C_ae = (lv_numOptions-1);
    lv_i = 0;
    for ( ; ( (autoC58A302C_ai >= 0 && lv_i <= autoC58A302C_ae) || (autoC58A302C_ai < 0 && lv_i >= autoC58A302C_ae) ) ; lv_i += autoC58A302C_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 60, (120+(lv_i*70)), IntToText(lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_optionsDialogLabels[lv_i] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[0], StringExternal("Param/Value/F5A5D950"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[1], StringExternal("Param/Value/0FF54143"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[2], StringExternal("Param/Value/936AD407"), PlayerGroupAll());
    auto8A5D2DA9_ae = (lv_numOptions-1);
    lv_i = 0;
    for ( ; ( (auto8A5D2DA9_ai >= 0 && lv_i <= auto8A5D2DA9_ae) || (auto8A5D2DA9_ai < 0 && lv_i >= auto8A5D2DA9_ae) ) ; lv_i += auto8A5D2DA9_ai ) {
        DialogControlCreate(gv_optionsDialog, c_triggerControlTypePulldown);
        gv_optionsDialogMenus[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(gv_optionsDialogMenus[lv_i], PlayerGroupAll(), c_anchorTopLeft, 390, (100+(lv_i*70)));
        DialogControlAddItem(gv_optionsDialogMenus[lv_i], PlayerGroupAll(), StringExternal("Param/Value/7CE99F7A"));
    }
    DialogControlRemoveAllItems(gv_optionsDialogMenus[0], PlayerGroupAll());
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/FC0AC8C0"));
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/2A7297F3"));
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/D0B87F08"));
    DialogControlSelectItem(gv_optionsDialogMenus[0], PlayerGroupAll(), 1);
    DialogControlRemoveAllItems(gv_optionsDialogMenus[1], PlayerGroupAll());
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/C4671B16"));
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/E28BF37B"));
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/1F9AAD8F"));
    DialogControlSelectItem(gv_optionsDialogMenus[1], PlayerGroupAll(), 1);
    DialogControlRemoveAllItems(gv_optionsDialogMenus[2], PlayerGroupAll());
    DialogControlAddItem(gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/988546FA"));
    DialogControlAddItem(gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/FC0D30DE"));
    DialogControlAddItem(gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/6797A36F"));
    DialogControlSelectItem(gv_optionsDialogMenus[2], PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemButton(gv_optionsDialog, 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/7F29E814"), "");
    gv_optionsDialogAccept = DialogControlLastCreated();
    DialogSetRenderPriority(gv_optionsDialog, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateOptionsDialog_Init () {
    gt_CreateOptionsDialog = TriggerCreate("gt_CreateOptionsDialog_Func");
    TriggerAddEventMapInit(gt_CreateOptionsDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Options
//--------------------------------------------------------------------------------------------------
bool gt_OpenOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_optionsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenOptions_Init () {
    gt_OpenOptions = TriggerCreate("gt_OpenOptions_Func");
    TriggerAddEventChatMessage(gt_OpenOptions, c_playerAny, "-options", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Options
//--------------------------------------------------------------------------------------------------
bool gt_CloseOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vA;

    // Automatic Variable Declarations
    const int autoA3176871_ae = 2;
    const int autoA3176871_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsDialogAccept))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vA = 0;
    for ( ; ( (autoA3176871_ai >= 0 && lv_vA <= autoA3176871_ae) || (autoA3176871_ai < 0 && lv_vA >= autoA3176871_ae) ) ; lv_vA += autoA3176871_ai ) {
        gv_wavePattern[lv_vA] = DialogControlGetSelectedItem(gv_optionsDialogMenus[lv_vA], EventPlayer());
    }
    DialogSetVisible(gv_optionsDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseOptions_Init () {
    gt_CloseOptions = TriggerCreate("gt_CloseOptions_Func");
    TriggerAddEventDialogControl(gt_CloseOptions, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCOMI_gf_GetMissionDifficulty() == 1) || (libCOMI_gf_GetMissionDifficulty() == 2))) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    if (((gv_wavePattern[0] == 3) || ((gv_wavePattern[0] == 1) && (RandomFixed(0.0, 100.0) <= 50.0)))) {
        lv_attackWaveSpawnLocation = PointFromId(853460097);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(785031012), true);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1162714313), false);
        gv_attackWave02_AttackP1 = false;
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(463620504);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1791218540), true);
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(2080400002), false);
        gv_attackWave02_AttackP1 = true;
    }
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_Player02Enemy));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01c_Init () {
    gt_AttackWave01c = TriggerCreate("gt_AttackWave01c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05c_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_wavePattern[1] == 3) || ((gv_wavePattern[1] == 1) && (RandomInt(0, 1) == 1)))) {
        TriggerExecute(gt_AttackWave05a, true, false);
    }
    else {
        TriggerExecute(gt_AttackWave05b, true, false);
    }
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05c_Init () {
    gt_AttackWave05c = TriggerCreate("gt_AttackWave05c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;
    bool lv_attack_P1;
    point lv_attackWaveRally;

    // Automatic Variable Declarations
    fixed autoDE079180_at;
    const int auto38E47324_ae = gv_pLAYER_04_Player02Enemy;
    int auto38E47324_var;
    unitgroup auto51A32C3A_g;
    int auto51A32C3A_u;
    unit auto51A32C3A_var;

    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_wavePattern[2] == 3) || ((gv_wavePattern[2] == 1) && (RandomInt(0, 1) == 1)))) {
        lv_attack_P1 = true;
    }
    else {
        lv_attack_P1 = false;
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_Player01Enemy, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_Player02Enemy, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    if ((lv_attack_P1 == true)) {
        lv_attackWaveSpawnLocation = PointFromId(853460097);
        lv_attackWaveRally = PointFromId(785031012);
    }
    else {
        lv_attackWaveSpawnLocation = PointFromId(463620504);
        lv_attackWaveRally = PointFromId(1791218540);
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveRally, true);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_Player01Enemy, gv_pLAYER_04_Player02Enemy, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_04_Player02Enemy));
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    autoDE079180_at = 0;
    while (!(((UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(PointFromId(785031012), 10.0), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(PointFromId(1791218540), 10.0), 0), c_unitCountAlive) > 0))) && autoDE079180_at <= 30.0) {
        Wait(1.0, c_timeGame);
        autoDE079180_at = autoDE079180_at + 1.0;
    }
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        auto38E47324_var = gv_pLAYER_03_Player01Enemy;
        for ( ; auto38E47324_var <= auto38E47324_ae; auto38E47324_var += 1 ) {
            if ((auto38E47324_var == gv_pLAYER_03_Player01Enemy)) {
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto38E47324_var), 1, 1, 1, 2, 0, 0), gv_hybridMinor, 0, auto38E47324_var, lv_attackWaveRally, 270.0);
            }
            else {
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto38E47324_var), 0, 0, 1, 1, 0, 0), gv_hybridMajor, 0, auto38E47324_var, lv_attackWaveRally, 270.0);
            }
            auto51A32C3A_g = UnitLastCreatedGroup();
            auto51A32C3A_u = UnitGroupCount(auto51A32C3A_g, c_unitCountAll);
            for (;; auto51A32C3A_u -= 1) {
                auto51A32C3A_var = UnitGroupUnitFromEnd(auto51A32C3A_g, auto51A32C3A_u);
                if (auto51A32C3A_var == null) { break; }
                gf_CreateWarpInEffect(auto51A32C3A_var);
            }
            UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        }
    }

    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06c_Init () {
    gt_AttackWave06c = TriggerCreate("gt_AttackWave06c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MissionEvents_Init();
    gt_FailXP_Init();
    gt_FailTimerWindow_Init();
    gt_FailWarningQ_Init();
    gt_FailImminentQ_Init();
    gt_VoidACShardModifyHealth_Init();
    gt_VoidSliverDies_Init();
    gt_TransmissionVoidSliverDestroyedQ_Init();
    gt_VoidSliverWarningController_Init();
    gt_TransmissionSliverWarning1DestroyedQ_Init();
    gt_TransmissionSliverWarning2DestroyedQ_Init();
    gt_TransmissionSliverWarning3DestroyedQ_Init();
    gt_TransmissionSliverWarning4DestroyedQ_Init();
    gt_ScoreScreenVoidSliverDamageTaken_Init();
    gt_StartBonusObjectiveA_Init();
    gt_StartBonusObjectiveB_Init();
    gt_StartBonusObjectiveC_Init();
    gt_BonusEscortIntroPingEvacPoints_Init();
    gt_BonusEscortIntroQ_Init();
    gt_BonusEscortCreateQ_Init();
    gt_BonusEscortMovingQ_Init();
    gt_BonusEscortStoppedQ_Init();
    gt_BonusEscortFailedQ_Init();
    gt_BonusEscortCompleteQ_Init();
    gt_TurnOnRain_Init();
    gt_TurnOnLightningStrikes_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryVoidSliversDestroyedCompleted_Init();
    gt_P01Fanfare_Init();
    gt_P02Fanfare_Init();
    gt_DefeatAmonBeamController_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03ExpoAttack_Init();
    gt_AttackWave04BaseAttack_Init();
    gt_AttackWave05a_Init();
    gt_AttackWave05b_Init();
    gt_SetupHybridTypes_Init();
    gt_EnemyAttackingQ_Init();
    gt_VoidSpawnsReinforcements01_Init();
    gt_VoidSpawnsReinforcements02_Init();
    gt_VoidSpawnsReinforcements03_Init();
    gt_VoidSpawnsReinforcements04Hard_Init();
    gt_ObjectiveFailTimerCreate_Init();
    gt_ObjectiveFailTimerComplete_Init();
    gt_ObjectiveFailTimerUpdate_Init();
    gt_ObjectiveFailTimerFailed_Init();
    gt_ObjectiveDestroyVoidSliversCreate_Init();
    gt_ObjectiveDestroyVoidSliversComplete_Init();
    gt_ObjectiveDestroyVoidSliversUpdate_Init();
    gt_ObjectiveDestroyVoidSliversFailed_Init();
    gt_VictoryStatsForUnitsThatDie_Init();
    gt_VoidEntitySpawned_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init02Players_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_Init08aDifficultySettingsVoidSlivers_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
    gt_CreateOptionsDialog_Init();
    gt_OpenOptions_Init();
    gt_CloseOptions_Init();
    gt_AttackWave01c_Init();
    gt_AttackWave05c_Init();
    gt_AttackWave06c_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
