//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Mist Opportunities
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_TERRAZINE = 0;
const int gv_pLAYER_ESCORT = 6;
const int gv_wAVESLIMIT = 5;
const int gv_tERRAZINENODESMAX = 11;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_terrazineCollection;
unitgroup gv_activeHarvesters;
unit[gv_tERRAZINENODESMAX + 1] gv_terrazineNodes;
point gv_escortBotBirth;
point gv_escortDeathPoint;
int gv_botsDestroyedLimit;
int gv_botsDestroyed;
int gv_wavesCompleted;
fixed gv_escortHoldoutDuration;
int gv_escortLife;
bool gv_firstBotBool;
fixed gv_scoreScreen_HarvesterDamage;
unit[12] gv_leaderboardBots;
int gv_leaderboardBotCount;
int gv_leaderboardBotScoreFinal;
int gv_whichWhale;
timer gv_startBonusObjective1;
timer gv_whalesExpireTimer1;
int gv_whalesPing1;
unit gv_whalePrison1;
timer gv_startBonusObjective2;
timer gv_whalesExpireTimer2;
int gv_whalesPing2;
unit gv_whalePrison2;
int gv_leaderboardBonusScoreFinal;
int gv_leaderboardBonusScoreFinal2;

void InitGlobals () {
    gv_terrazineCollection = UnitFromId(13);
    gv_activeHarvesters = UnitGroupEmpty();
    gv_escortBotBirth = PointFromId(48);
    gv_startBonusObjective1 = TimerCreate();
    gv_whalesExpireTimer1 = TimerCreate();
    gv_whalesPing1 = c_invalidPingId;
    gv_whalePrison1 = UnitFromId(2006);
    gv_startBonusObjective2 = TimerCreate();
    gv_whalesExpireTimer2 = TimerCreate();
    gv_whalesPing2 = c_invalidPingId;
    gv_whalePrison2 = UnitFromId(2668);
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_EscortWaveatTime (fixed lp_time, trigger lp_escortWave);
void gf_CreateEscortUnit (point lp_parkingPoint, unit lp_destination);
void gf_SendEscortUnit (unit lp_escortUnit, unit lp_terrazineNode);
void gf_TerrazineNodeWaveStart (unit lp_terrazineNode);
void gf_BotUnderAttack (unit lp_bot);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MistOpportunitiesInitialize;
trigger gt_EscortWavesInitialize;
trigger gt_EscortWavesStart;
trigger gt_MissionProgression;
trigger gt_Escort1Node1;
trigger gt_Escort2Node23;
trigger gt_Escort3Node45;
trigger gt_Escort4Node678;
trigger gt_Escort5Node91011;
trigger gt_ObjectiveDontLetBotsDieUpdate;
trigger gt_ObjectiveCollectTerrazineCanistersUpdate;
trigger gt_EscortIsDeadIncrement;
trigger gt_ObjectiveWaveCycle1;
trigger gt_ObjectiveWaveCycle2;
trigger gt_ObjectiveWaveCycle3;
trigger gt_ObjectiveWaveCycle4;
trigger gt_ObjectiveWaveCycle5;
trigger gt_ProgresstoVictoryQ;
trigger gt_EscortHarassDropPodVOQ;
trigger gt_ScoreScreenHarvesterDamage;
trigger gt_LeaderboardBotTracker;
trigger gt_LeaderboardScoreBot;
trigger gt_LeaderboardFinalScoreBot;
trigger gt_DefeatTerrazineHarvestersDestroyed;
trigger gt_DefeatFanfareTerrazineHarvestersDestroyed;
trigger gt_VictoryCollectTerrazineCompleted;
trigger gt_VictoryFanfareCollectTerrazineCompleted;
trigger gt_SafeTheWhalesInitialize;
trigger gt_ObjectiveSavetheWhalesInitializationWhale1;
trigger gt_ObjectiveSavetheWhalesTimerUpdateWhale1;
trigger gt_ObjectiveSavetheWhalesVOWarning1Whale1;
trigger gt_ObjectiveSavetheWhalesVOWarningFinalWhale1;
trigger gt_WhaleLifeCheckWhale1;
trigger gt_WhaleTimerExpireWhale1;
trigger gt_ObjectiveSavetheWhalesInitializationWhale2;
trigger gt_ObjectiveSavetheWhalesTimerUpdateWhale2;
trigger gt_ObjectiveSavetheWhalesVOWarning1Whale2;
trigger gt_ObjectiveSavetheWhalesVOWarningFinalWhale2;
trigger gt_WhaleLifeCheckWhale2;
trigger gt_WhaleTimerExpireWhale2;
trigger gt_LeaderboardScoreWhales;
trigger gt_LeaderboardFinalScoreWhales;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_EscortWaveatTime_Trigger = null;
fixed auto_gf_EscortWaveatTime_lp_time;
trigger auto_gf_EscortWaveatTime_lp_escortWave;

void gf_EscortWaveatTime (fixed lp_time, trigger lp_escortWave) {
    auto_gf_EscortWaveatTime_lp_time = lp_time;
    auto_gf_EscortWaveatTime_lp_escortWave = lp_escortWave;

    if (auto_gf_EscortWaveatTime_Trigger == null) {
        auto_gf_EscortWaveatTime_Trigger = TriggerCreate("auto_gf_EscortWaveatTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_EscortWaveatTime_Trigger, false, false);
}

bool auto_gf_EscortWaveatTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_EscortWaveatTime_lp_time;
    trigger lp_escortWave = auto_gf_EscortWaveatTime_lp_escortWave;

    // Variable Declarations
    fixed lv_attackWaveVariance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_escortWave, true, false);
    }

    return true;
}

void gf_CreateEscortUnit (point lp_parkingPoint, unit lp_destination) {
    // Automatic Variable Declarations
    fixed autoFCD327C9_at;

    // Implementation
    UnitCreate(1, "TerrazineHarvester", 0, gv_pLAYER_ESCORT, PointFromId(48), 134.96);
    UnitGroupAdd(gv_activeHarvesters, UnitLastCreated());
    UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupAll);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_escortLife);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStoppable, false);
    libCOMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/62452B99"), null);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4D39091C"));
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_parkingPoint), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    gf_BotUnderAttack(UnitLastCreated());
    autoFCD327C9_at = 0;
    while (!((DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_parkingPoint) < 0.75)) && autoFCD327C9_at <= 3.0) {
        Wait(0.2, c_timeGame);
        autoFCD327C9_at = autoFCD327C9_at + 0.2;
    }
}

trigger auto_gf_SendEscortUnit_Trigger = null;
unit auto_gf_SendEscortUnit_lp_escortUnit;
unit auto_gf_SendEscortUnit_lp_terrazineNode;

void gf_SendEscortUnit (unit lp_escortUnit, unit lp_terrazineNode) {
    auto_gf_SendEscortUnit_lp_escortUnit = lp_escortUnit;
    auto_gf_SendEscortUnit_lp_terrazineNode = lp_terrazineNode;

    if (auto_gf_SendEscortUnit_Trigger == null) {
        auto_gf_SendEscortUnit_Trigger = TriggerCreate("auto_gf_SendEscortUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendEscortUnit_Trigger, false, false);
}

bool auto_gf_SendEscortUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_escortUnit = auto_gf_SendEscortUnit_lp_escortUnit;
    unit lp_terrazineNode = auto_gf_SendEscortUnit_lp_terrazineNode;

    // Variable Declarations
    int lv_escortBotPath;
    point lv_escortBotPosition;
    point lv_escortBotHarvestingLocation;
    int lv_nodeIndex;
    int lv_pathIndex;
    point lv_nextPathPoint;

    // Automatic Variable Declarations
    const int auto66C30146_ae = gv_tERRAZINENODESMAX;
    const int auto66C30146_ai = 1;
    fixed auto8BFDB4D1_at;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        gv_escortDeathPoint = lv_escortBotPosition;
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        TriggerExecute(gt_EscortIsDeadIncrement, true, false);
        UnitIssueOrder(lp_terrazineNode, Order(AbilityCommand("TerrazineNodeOff", 0)), c_orderQueueReplace);
        return true;
    }

    lv_nodeIndex = 1;
    for ( ; ( (auto66C30146_ai >= 0 && lv_nodeIndex <= auto66C30146_ae) || (auto66C30146_ai < 0 && lv_nodeIndex >= auto66C30146_ae) ) ; lv_nodeIndex += auto66C30146_ai ) {
        if ((gv_terrazineNodes[lv_nodeIndex] == lp_terrazineNode)) {
            break;
        }

    }
    if ((gv_terrazineNodes[lv_nodeIndex] == null)) {
        return true;
    }

    libHots_gf_StorePointForUnit(lp_escortUnit, 1, libHots_gf_PointStoredForUnit(lp_terrazineNode, 1));
    lv_escortBotPath = PathLastCreated();
    lv_escortBotHarvestingLocation = libHots_gf_PointStoredForUnit(lp_terrazineNode, 1);
    while ((UnitIsAlive(lp_escortUnit) == true) && (libNtve_gf_UnitInRegion(lp_escortUnit, RegionCircle(lv_escortBotHarvestingLocation, 1.0)) == false)) {
        lv_nextPathPoint = null;
        lv_nextPathPoint = PointFromName(("Path" + IntToString(lv_nodeIndex) + "_" + IntToString((lv_pathIndex + 1))));
        if ((lv_nextPathPoint != null)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_escortUnit), lv_nextPathPoint) <= 0.5)) {
                lv_pathIndex += 1;
                lv_nextPathPoint = PointFromName(("Path" + IntToString(lv_nodeIndex) + "_" + IntToString(lv_pathIndex)));
                if ((lv_nextPathPoint == null)) {
                    lv_nextPathPoint = lv_escortBotHarvestingLocation;
                }

            }

        }
        else {
            lv_nextPathPoint = lv_escortBotHarvestingLocation;
        }
        UnitIssueOrder(lp_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextPathPoint), c_orderQueueReplace);
        lv_escortBotPosition = UnitGetPosition(lp_escortUnit);
        Wait(0.1, c_timeGame);
    }
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        gv_escortDeathPoint = lv_escortBotPosition;
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        TriggerExecute(gt_EscortIsDeadIncrement, true, false);
        UnitIssueOrder(lp_terrazineNode, Order(AbilityCommand("TerrazineNodeOff", 0)), c_orderQueueReplace);
        return true;
    }

    UnitAbilityEnable(lp_escortUnit, "attack", false);
    UnitIssueOrder(lp_escortUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(lp_escortUnit, OrderTargetingUnit(AbilityCommand("TerrazineHarvesterExtract", 0), lp_terrazineNode), c_orderQueueAddToEnd);
    UnitAbilityEnable(lp_escortUnit, "attack", true);
    UnitBehaviorAdd(lp_escortUnit, "ProgressBar", lp_escortUnit, 1);
    UnitBehaviorSetDuration(lp_escortUnit, "ProgressBar", gv_escortHoldoutDuration);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_terrazineNode), c_animNameDefault, "Stand Angry", c_animFlagPlayForever, c_animTimeDefault);
    UnitAbilityEnable(lp_escortUnit, "move", false);
    auto8BFDB4D1_at = 0;
    while (!((UnitIsAlive(lp_escortUnit) == false)) && auto8BFDB4D1_at <= gv_escortHoldoutDuration) {
        Wait(1.0, c_timeGame);
        auto8BFDB4D1_at = auto8BFDB4D1_at + 1.0;
    }
    UnitIssueOrder(lp_terrazineNode, Order(AbilityCommand("TerrazineNodeOff", 0)), c_orderQueueAddToEnd);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_terrazineNode), c_animNameDefault, "Stand Default", c_animFlagPlayForever, c_animTimeDefault);
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        gv_escortDeathPoint = lv_escortBotPosition;
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        TriggerExecute(gt_EscortIsDeadIncrement, true, false);
        return true;
    }
    else {
        UnitAbilityEnable(lp_escortUnit, "move", true);
    }
    lv_escortBotPath = PathLastCreated();
    if ((gv_firstBotBool == true)) {
        gv_firstBotBool = false;
        libCOMI_gf_DefferedTransmission("BotReturnFirstBE", 0.0, 20.0);
    }
    else {
        libCOMI_gf_DefferedTransmission("BotReturnRepeatBE", 0.0, 60.0);
    }
    while ((UnitIsAlive(lp_escortUnit) == true) && (libNtve_gf_UnitInRegion(lp_escortUnit, RegionCircle(PointFromId(48), 0.5)) == false)) {
        lv_nextPathPoint = null;
        lv_nextPathPoint = PointFromName(("Path" + IntToString(lv_nodeIndex) + "_" + IntToString(lv_pathIndex)));
        if ((lv_nextPathPoint != null)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_escortUnit), lv_nextPathPoint) <= 0.5)) {
                lv_pathIndex -= 1;
                lv_nextPathPoint = PointFromName(("Path" + IntToString(lv_nodeIndex) + "_" + IntToString(lv_pathIndex)));
                if ((lv_nextPathPoint == null)) {
                    lv_nextPathPoint = gv_escortBotBirth;
                }

            }

        }
        else {
            lv_nextPathPoint = gv_escortBotBirth;
        }
        UnitIssueOrder(lp_escortUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextPathPoint), c_orderQueueReplace);
        lv_escortBotPosition = UnitGetPosition(lp_escortUnit);
        Wait(0.1, c_timeGame);
    }
    if ((UnitIsAlive(lp_escortUnit) == false)) {
        gv_escortDeathPoint = lv_escortBotPosition;
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
        TriggerExecute(gt_EscortIsDeadIncrement, true, false);
        UnitIssueOrder(lp_terrazineNode, Order(AbilityCommand("TerrazineNodeOff", 0)), c_orderQueueReplace);
        return true;
    }

    UnitRemove(lp_escortUnit);
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_escortUnit, 1));
    if ((gv_wavesCompleted <= 3)) {
        libCOMI_gf_DefferedTransmission("BotDeliveryBE", 0.0, 30.0);
    }

    return true;
}

trigger auto_gf_TerrazineNodeWaveStart_Trigger = null;
unit auto_gf_TerrazineNodeWaveStart_lp_terrazineNode;

void gf_TerrazineNodeWaveStart (unit lp_terrazineNode) {
    auto_gf_TerrazineNodeWaveStart_lp_terrazineNode = lp_terrazineNode;

    if (auto_gf_TerrazineNodeWaveStart_Trigger == null) {
        auto_gf_TerrazineNodeWaveStart_Trigger = TriggerCreate("auto_gf_TerrazineNodeWaveStart_TriggerFunc");
    }

    TriggerExecute(auto_gf_TerrazineNodeWaveStart_Trigger, false, false);
}

bool auto_gf_TerrazineNodeWaveStart_TriggerFunc (bool testConds, bool runActions) {
    unit lp_terrazineNode = auto_gf_TerrazineNodeWaveStart_lp_terrazineNode;

    // Variable Declarations
    revealer[16] lv_revealers;

    // Automatic Variable Declarations
    playergroup auto8664A294_g;
    int auto8664A294_var;
    playergroup autoF5E20B19_g;
    int autoF5E20B19_var;

    // Variable Initialization

    // Implementation
    UnitIssueOrder(lp_terrazineNode, Order(AbilityCommand("TerrazineNode", 0)), c_orderQueueReplace);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", UnitGetPosition(lp_terrazineNode), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 45.0);
    PingSetRotation(PingLastCreated(), 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AEC4E5B6"));
    auto8664A294_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto8664A294_var = -1;
    while (true) {
        auto8664A294_var = PlayerGroupNextPlayer(auto8664A294_g, auto8664A294_var);
        if (auto8664A294_var < 0) { break; }
        libCOMI_gf_CreateRevealerCoop(auto8664A294_var, RegionCircle(UnitGetPosition(lp_terrazineNode), 5.0));
        lv_revealers[auto8664A294_var] = VisRevealerLastCreated();
    }
    while (!((UnitGetType(lp_terrazineNode) == "TerrazineNodeOff"))) {
        Wait(1.0, c_timeGame);
    }
    autoF5E20B19_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoF5E20B19_var = -1;
    while (true) {
        autoF5E20B19_var = PlayerGroupNextPlayer(autoF5E20B19_g, autoF5E20B19_var);
        if (autoF5E20B19_var < 0) { break; }
        libCOMI_gf_DestroyRevealerCoop(lv_revealers[autoF5E20B19_var]);
    }
    return true;
}

trigger auto_gf_BotUnderAttack_Trigger = null;
unit auto_gf_BotUnderAttack_lp_bot;

void gf_BotUnderAttack (unit lp_bot) {
    auto_gf_BotUnderAttack_lp_bot = lp_bot;

    if (auto_gf_BotUnderAttack_Trigger == null) {
        auto_gf_BotUnderAttack_Trigger = TriggerCreate("auto_gf_BotUnderAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_BotUnderAttack_Trigger, false, false);
}

bool auto_gf_BotUnderAttack_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bot = auto_gf_BotUnderAttack_lp_bot;

    // Variable Declarations
    timer lv_underAttackCooldown;
    timer lv_dMatrixCooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_underAttackCooldown = TimerCreate();
    lv_dMatrixCooldown = TimerCreate();

    // Implementation
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_bot) == true)) {
        if (((AIGetTime() - AILastAttack(lp_bot)) < 2.0)) {
            if ((TimerGetRemaining(lv_underAttackCooldown) <= 0.0)) {
                libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(lp_bot, 1), false);
                libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", UnitGetPosition(lp_bot), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 15.0);
                PingSetUnit(PingLastCreated(), lp_bot);
                TimerStart(lv_underAttackCooldown, 20.0, false, c_timeGame);
                libCOMI_gf_DefferedTransmission("BotUnderAttackBE", 0.0, 15.0);
            }

        }
        else {
            libCOMI_gf_DestroyPingCoop(PingLastCreated());
            libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(lp_bot, 1), true);
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mist Opportunities - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_MistOpportunitiesInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIter;
    point lv_harvestLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EscortWavesInitialize, true, false);
    TriggerExecute(gt_SafeTheWhalesInitialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MistOpportunitiesInitialize_Init () {
    gt_MistOpportunitiesInitialize = TriggerCreate("gt_MistOpportunitiesInitialize_Func");
    TriggerAddEventGeneric(gt_MistOpportunitiesInitialize, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Waves - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_EscortWavesInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_regionIter;
    point lv_harvestLocation;

    // Automatic Variable Declarations
    playergroup auto692900FE_g;
    int auto692900FE_var;
    const int autoD1AE9D36_ae = gv_tERRAZINENODESMAX;
    const int autoD1AE9D36_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_ESCORT, "CoopNPCPlayer", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_TERRAZINE, "CoopNPCPlayer", 1);
    auto692900FE_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto692900FE_var = -1;
    while (true) {
        auto692900FE_var = PlayerGroupNextPlayer(auto692900FE_g, auto692900FE_var);
        if (auto692900FE_var < 0) { break; }
        PlayerScoreValueSetFromFixed(auto692900FE_var, "BelshirEscortHarvesterDamage", 0.0);
    }
    lv_regionIter = 1;
    for ( ; ( (autoD1AE9D36_ai >= 0 && lv_regionIter <= autoD1AE9D36_ae) || (autoD1AE9D36_ai < 0 && lv_regionIter >= autoD1AE9D36_ae) ) ; lv_regionIter += autoD1AE9D36_ai ) {
        gv_terrazineNodes[lv_regionIter] = UnitGroupUnit(UnitGroup("TerrazineNodeOff", gv_pLAYER_TERRAZINE, RegionFromName(("Terrazine Node " + IntToString(lv_regionIter))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        UnitSetState(UnitGroupUnit(UnitGroup("TerrazineNodeOff", gv_pLAYER_TERRAZINE, RegionFromName(("Terrazine Node " + IntToString(lv_regionIter))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), c_unitStateSelectable, false);
        libCOMI_gf_SetUnitInfoTextCampaign(UnitGroupUnit(UnitGroup("TerrazineNodeOff", gv_pLAYER_TERRAZINE, RegionFromName(("Terrazine Node " + IntToString(lv_regionIter))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), null, StringExternal("Param/Value/7CD11163"), null);
        lv_harvestLocation = PointFromName(("Terrazine Node Harvest Spot " + IntToString(lv_regionIter)));
        if ((DistanceBetweenPoints(UnitGetPosition(gv_terrazineNodes[lv_regionIter]), lv_harvestLocation) > 4.0)) {
            PointSet(lv_harvestLocation, PointWithOffsetPolar(UnitGetPosition(gv_terrazineNodes[lv_regionIter]), 3.8, AngleBetweenPoints(UnitGetPosition(gv_terrazineNodes[lv_regionIter]), lv_harvestLocation)));
            TextExpressionSetToken("Param/Expression/CAB14488", "A", IntToText(lv_regionIter));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/CAB14488"), true);
        }

        libHots_gf_StorePointForUnit(gv_terrazineNodes[lv_regionIter], 1, lv_harvestLocation);
    }
    libCOMI_gf_SetUnitInfoTextCampaign(gv_terrazineCollection, null, StringExternal("Param/Value/A43FFC3F"), null);
    UnitSetState(gv_terrazineCollection, c_unitStateTargetable, false);
    UnitSetState(gv_terrazineCollection, c_unitStateInvulnerable, true);
    UnitSetState(gv_terrazineCollection, c_unitStateSelectable, false);
    gv_escortLife = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1500, 1500, 1250, 1000, 0, 0);
    gv_escortHoldoutDuration = 60.0;
    gv_botsDestroyedLimit = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 3, 2, 0, 0);
    TriggerExecute(gt_EscortWavesStart, true, false);
    TriggerExecute(gt_LeaderboardScoreBot, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWavesInitialize_Init () {
    gt_EscortWavesInitialize = TriggerCreate("gt_EscortWavesInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Waves Start
//--------------------------------------------------------------------------------------------------
bool gt_EscortWavesStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE0CAA4FF_g;
    int autoE0CAA4FF_var;
    int autoF0FE8B35_val;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_AC_BelShir", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_MissionProgression, true, false);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    libCOMI_gf_ObjectiveCreate("AC_BelshirEscort_Primary01", 1, true);
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_BelshirEscort_Primary02", gv_botsDestroyedLimit);
    libCOMI_gf_ObjectiveCreate("AC_BelshirEscort_Primary02", 1, true);
    autoE0CAA4FF_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoE0CAA4FF_var = -1;
    while (true) {
        autoE0CAA4FF_var = PlayerGroupNextPlayer(autoE0CAA4FF_g, autoE0CAA4FF_var);
        if (autoE0CAA4FF_var < 0) { break; }
        VisRevealArea(autoE0CAA4FF_var, RegionFromId(25), 0.0, false);
    }
    Wait(2.0, c_timeReal);
    autoF0FE8B35_val = RandomInt(1, 3);
    if (autoF0FE8B35_val == 1) {
        libCOMI_gf_DefferedTransmission("Intro1BE", 0.0, 0.0);
    }
    else if (autoF0FE8B35_val == 2) {
        libCOMI_gf_DefferedTransmission("Intro2BE", 0.0, 0.0);
    }
    else if (autoF0FE8B35_val == 3) {
        libCOMI_gf_DefferedTransmission("Intro3BE", 0.0, 0.0);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortWavesStart_Init () {
    gt_EscortWavesStart = TriggerCreate("gt_EscortWavesStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Progression
//--------------------------------------------------------------------------------------------------
bool gt_MissionProgression_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_EscortWaveatTime((3.5 * 60.0), gt_Escort1Node1);
    gf_EscortWaveatTime((6.75 * 60.0), gt_Escort2Node23);
    TimerStart(gv_startBonusObjective1, (11.3 * 60.0), false, c_timeAI);
    gf_EscortWaveatTime((11.0 * 60.0), gt_Escort3Node45);
    gf_EscortWaveatTime((17.0 * 60.0), gt_Escort4Node678);
    TimerStart(gv_startBonusObjective2, (23.15 * 60.0), false, c_timeAI);
    gf_EscortWaveatTime((23.65 * 60.0), gt_Escort5Node91011);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionProgression_Init () {
    gt_MissionProgression = TriggerCreate("gt_MissionProgression_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort 1 - Node 1
//--------------------------------------------------------------------------------------------------
bool gt_Escort1Node1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_escortBot1;
    unitgroup lv_waveHarvesters;

    // Automatic Variable Declarations
    int autoDD7C7A5B_val;

    // Variable Initialization
    lv_waveHarvesters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DefferedTransmission("Geyser1BE", 0.0, 20.0);
    Wait(3.0, c_timeGame);
    gv_firstBotBool = true;
    gf_TerrazineNodeWaveStart(gv_terrazineNodes[1]);
    Wait(40.0, c_timeGame);
    gf_CreateEscortUnit(PointFromId(784), gv_terrazineNodes[1]);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot1 = UnitLastCreated();
    Wait(20.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotDepartFirstBE", 0.0, 20.0);
    gf_SendEscortUnit(lv_escortBot1, gv_terrazineNodes[1]);
    TriggerExecute(gt_ObjectiveWaveCycle1, true, false);
    while (!((UnitGroupCount(lv_waveHarvesters, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_wavesCompleted += 1;
    TriggerExecute(gt_ProgresstoVictoryQ, true, false);
    autoDD7C7A5B_val = gv_wavesCompleted;
    if (autoDD7C7A5B_val == 2) {
        libCOMI_gf_DefferedTransmission("ProgressFirstBE", 0.0, 30.0);
    }
    else if (autoDD7C7A5B_val == 3) {
        libCOMI_gf_DefferedTransmission("ProgressSecondBE", 0.0, 30.0);
    }
    else if (autoDD7C7A5B_val == 4) {
        libCOMI_gf_DefferedTransmission("ProgressThirdBE", 0.0, 30.0);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveCollectTerrazineCanistersUpdate, true, false);
    libCOMI_gf_SetMissionEffort(10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Escort1Node1_Init () {
    gt_Escort1Node1 = TriggerCreate("gt_Escort1Node1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort 2 - Node 2, 3
//--------------------------------------------------------------------------------------------------
bool gt_Escort2Node23_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_escortBot1;
    unit lv_escortBot2;
    unitgroup lv_waveHarvesters;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveHarvesters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DefferedTransmission("Geyser2BE", 0.0, 20.0);
    Wait(3.0, c_timeGame);
    gf_TerrazineNodeWaveStart(gv_terrazineNodes[2]);
    gf_TerrazineNodeWaveStart(gv_terrazineNodes[3]);
    Wait(40.0, c_timeGame);
    gf_CreateEscortUnit(PointFromId(783), gv_terrazineNodes[2]);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot1 = UnitLastCreated();
    gf_CreateEscortUnit(PointFromId(797), gv_terrazineNodes[3]);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot2 = UnitLastCreated();
    Wait(20.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotDepartRepeatBE", 0.0, 20.0);
    gf_SendEscortUnit(lv_escortBot1, gv_terrazineNodes[2]);
    Wait(3.0, c_timeGame);
    gf_SendEscortUnit(lv_escortBot2, gv_terrazineNodes[3]);
    TriggerExecute(gt_ObjectiveWaveCycle2, true, false);
    while (!((UnitGroupCount(lv_waveHarvesters, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_wavesCompleted += 1;
    TriggerExecute(gt_ProgresstoVictoryQ, true, false);
    TriggerExecute(gt_ObjectiveCollectTerrazineCanistersUpdate, true, false);
    libCOMI_gf_SetMissionEffort(30.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Escort2Node23_Init () {
    gt_Escort2Node23 = TriggerCreate("gt_Escort2Node23_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort 3 - Node 4, 5
//--------------------------------------------------------------------------------------------------
bool gt_Escort3Node45_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_escortBotLeft;
    unit lv_escortBotRight;
    unitgroup lv_waveHarvesters;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveHarvesters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DefferedTransmission("Geyser3BE", 0.0, 20.0);
    Wait(3.0, c_timeGame);
    gf_TerrazineNodeWaveStart(gv_terrazineNodes[4]);
    gf_TerrazineNodeWaveStart(gv_terrazineNodes[5]);
    Wait(40.0, c_timeGame);
    gf_CreateEscortUnit(PointFromId(783), gv_terrazineNodes[4]);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBotLeft = UnitLastCreated();
    gf_CreateEscortUnit(PointFromId(797), gv_terrazineNodes[5]);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBotRight = UnitLastCreated();
    Wait(20.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotDepartRepeatBE", 0.0, 20.0);
    gf_SendEscortUnit(lv_escortBotRight, gv_terrazineNodes[5]);
    Wait(2.0, c_timeGame);
    gf_SendEscortUnit(lv_escortBotLeft, gv_terrazineNodes[4]);
    TriggerExecute(gt_ObjectiveWaveCycle3, true, false);
    while (!((UnitGroupCount(lv_waveHarvesters, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_wavesCompleted += 1;
    TriggerExecute(gt_ProgresstoVictoryQ, true, false);
    TriggerExecute(gt_ObjectiveCollectTerrazineCanistersUpdate, true, false);
    libCOMI_gf_SetMissionEffort(60.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Escort3Node45_Init () {
    gt_Escort3Node45 = TriggerCreate("gt_Escort3Node45_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort 4 - Node 6, 7, 8
//--------------------------------------------------------------------------------------------------
bool gt_Escort4Node678_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_escortBot_Left;
    unit lv_escortBot_Center;
    unit lv_escortBot_Right;
    unit lv_terrazineNode_Left;
    unit lv_terrazineNode_Center;
    unit lv_terrazineNode_Right;
    unitgroup lv_waveHarvesters;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveHarvesters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_terrazineNode_Left = gv_terrazineNodes[6];
    lv_terrazineNode_Center = gv_terrazineNodes[7];
    lv_terrazineNode_Right = gv_terrazineNodes[8];
    libCOMI_gf_DefferedTransmission("Geyser4BE", 0.0, 20.0);
    Wait(3.0, c_timeGame);
    gf_TerrazineNodeWaveStart(lv_terrazineNode_Left);
    gf_TerrazineNodeWaveStart(lv_terrazineNode_Center);
    gf_TerrazineNodeWaveStart(lv_terrazineNode_Right);
    Wait(40.0, c_timeGame);
    gf_CreateEscortUnit(PointFromId(783), lv_terrazineNode_Left);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot_Left = UnitLastCreated();
    gf_CreateEscortUnit(PointFromId(784), lv_terrazineNode_Center);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot_Center = UnitLastCreated();
    gf_CreateEscortUnit(PointFromId(797), lv_terrazineNode_Right);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot_Right = UnitLastCreated();
    Wait(20.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotDepartRepeatBE", 0.0, 20.0);
    gf_SendEscortUnit(lv_escortBot_Left, lv_terrazineNode_Left);
    Wait(2.0, c_timeGame);
    gf_SendEscortUnit(lv_escortBot_Center, lv_terrazineNode_Center);
    Wait(2.0, c_timeGame);
    gf_SendEscortUnit(lv_escortBot_Right, lv_terrazineNode_Right);
    TriggerExecute(gt_ObjectiveWaveCycle4, true, false);
    while (!((UnitGroupCount(lv_waveHarvesters, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_wavesCompleted += 1;
    TriggerExecute(gt_ProgresstoVictoryQ, true, false);
    TriggerExecute(gt_ObjectiveCollectTerrazineCanistersUpdate, true, false);
    libCOMI_gf_SetMissionEffort(90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Escort4Node678_Init () {
    gt_Escort4Node678 = TriggerCreate("gt_Escort4Node678_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort 5 - Node 9, 10, 11
//--------------------------------------------------------------------------------------------------
bool gt_Escort5Node91011_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_escortBot_Left;
    unit lv_escortBot_Center;
    unit lv_escortBot_Right;
    unit lv_terrazineNode_Left;
    unit lv_terrazineNode_Center;
    unit lv_terrazineNode_Right;
    unitgroup lv_waveHarvesters;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_waveHarvesters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_terrazineNode_Left = gv_terrazineNodes[9];
    lv_terrazineNode_Center = gv_terrazineNodes[11];
    lv_terrazineNode_Right = gv_terrazineNodes[10];
    libCOMI_gf_DefferedTransmission("Geyser5BE", 0.0, 20.0);
    Wait(3.0, c_timeGame);
    gf_TerrazineNodeWaveStart(lv_terrazineNode_Left);
    gf_TerrazineNodeWaveStart(lv_terrazineNode_Right);
    gf_TerrazineNodeWaveStart(lv_terrazineNode_Center);
    Wait(40.0, c_timeGame);
    gf_CreateEscortUnit(PointFromId(783), lv_terrazineNode_Left);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot_Left = UnitLastCreated();
    gf_CreateEscortUnit(PointFromId(784), lv_terrazineNode_Center);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot_Center = UnitLastCreated();
    gf_CreateEscortUnit(PointFromId(797), lv_terrazineNode_Right);
    UnitGroupAdd(lv_waveHarvesters, UnitLastCreated());
    lv_escortBot_Right = UnitLastCreated();
    Wait(20.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotDepartRepeatBE", 0.0, 20.0);
    gf_SendEscortUnit(lv_escortBot_Right, lv_terrazineNode_Right);
    Wait(2.0, c_timeGame);
    gf_SendEscortUnit(lv_escortBot_Center, lv_terrazineNode_Center);
    Wait(2.0, c_timeGame);
    gf_SendEscortUnit(lv_escortBot_Left, lv_terrazineNode_Left);
    TriggerExecute(gt_ObjectiveWaveCycle5, true, false);
    while (!((UnitGroupCount(lv_waveHarvesters, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_wavesCompleted += 1;
    TriggerExecute(gt_ProgresstoVictoryQ, true, false);
    TriggerExecute(gt_ObjectiveCollectTerrazineCanistersUpdate, true, false);
    if ((gv_wavesCompleted >= gv_wAVESLIMIT)) {
        TransmissionClearAll();
        TriggerExecute(gt_VictoryCollectTerrazineCompleted, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Escort5Node91011_Init () {
    gt_Escort5Node91011 = TriggerCreate("gt_Escort5Node91011_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Don't Let Bots Die Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetBotsDieUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetMissionObjectiveProgress("AC_BelshirEscort_Primary02", gv_botsDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetBotsDieUpdate_Init () {
    gt_ObjectiveDontLetBotsDieUpdate = TriggerCreate("gt_ObjectiveDontLetBotsDieUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Collect Terrazine Canisters Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectTerrazineCanistersUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetMissionObjectiveProgress("AC_BelshirEscort_Primary01", gv_wavesCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectTerrazineCanistersUpdate_Init () {
    gt_ObjectiveCollectTerrazineCanistersUpdate = TriggerCreate("gt_ObjectiveCollectTerrazineCanistersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Is Dead Increment
//--------------------------------------------------------------------------------------------------
bool gt_EscortIsDeadIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_botsDestroyed += 1;
    TriggerExecute(gt_ObjectiveDontLetBotsDieUpdate, true, false);
    if ((gv_botsDestroyed < gv_botsDestroyedLimit)) {
        if (((gv_botsDestroyedLimit - gv_botsDestroyed) > 1)) {
            libCOMI_gf_DefferedTransmission("FailureFirstBE", 0.0, 30.0);
        }
        else {
            libCOMI_gf_DefferedTransmission("FailureSecondBE", 0.0, 30.0);
        }
    }

    if ((gv_botsDestroyed >= gv_botsDestroyedLimit)) {
        TriggerExecute(gt_DefeatTerrazineHarvestersDestroyed, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortIsDeadIncrement_Init () {
    gt_EscortIsDeadIncrement = TriggerCreate("gt_EscortIsDeadIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 1
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aWIndex;
    unit lv_aWTarget;
    string lv_aWSpawns;
    int lv_aWSize;
    int lv_aWTech;

    // Automatic Variable Declarations
    const int auto18445654_n = 2;
    int auto18445654_i;
    unitgroup auto2CBF6837_g;
    int auto2CBF6837_u;
    unit auto2CBF6837_var;

    // Variable Initialization
    lv_aWIndex = 1;
    lv_aWSpawns = libCOMI_gf_SpawnsRange(11, 12);
    lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(20.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotEnemyInboundBE", 5.0, 20.0);
    for (auto18445654_i = 1; auto18445654_i <= auto18445654_n; auto18445654_i += 1) {
        auto2CBF6837_g = gv_activeHarvesters;
        auto2CBF6837_u = UnitGroupCount(auto2CBF6837_g, c_unitCountAll);
        for (;; auto2CBF6837_u -= 1) {
            auto2CBF6837_var = UnitGroupUnitFromEnd(auto2CBF6837_g, auto2CBF6837_u);
            if (auto2CBF6837_var == null) { break; }
            lv_aWTarget = auto2CBF6837_var;
            libCOMI_gf_CustomAttackWave(lv_aWSpawns, lv_aWTarget, lv_aWSize, lv_aWTech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        }
        Wait(25.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle1_Init () {
    gt_ObjectiveWaveCycle1 = TriggerCreate("gt_ObjectiveWaveCycle1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_escortIndex;
    int lv_aWIndex;
    unit lv_aWTarget;
    string lv_aWSpawns;
    int lv_aWSize;
    int lv_aWTech;

    // Automatic Variable Declarations
    const int auto4E78B323_ae = 4;
    const int auto4E78B323_ai = 1;
    int autoBDE9C81F_val;

    // Variable Initialization
    lv_aWSpawns = libCOMI_gf_SpawnsRange(21, 27);
    lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotEnemyInboundBE", 5.0, 20.0);
    lv_aWIndex = 1;
    for ( ; ( (auto4E78B323_ai >= 0 && lv_aWIndex <= auto4E78B323_ae) || (auto4E78B323_ai < 0 && lv_aWIndex >= auto4E78B323_ae) ) ; lv_aWIndex += auto4E78B323_ai ) {
        if (lv_escortIndex >= UnitGroupCount(gv_activeHarvesters, c_unitCountAlive)) {
            lv_escortIndex = 1;
        }
        else {
            lv_escortIndex = lv_escortIndex + 1;
        }
        lv_aWTarget = UnitGroupUnit(gv_activeHarvesters, lv_escortIndex);
        autoBDE9C81F_val = lv_aWIndex;
        if (autoBDE9C81F_val == 1) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(21, 23);
            lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
            lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        }
        else if (autoBDE9C81F_val == 2) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(21, 23);
            lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
            lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        }
        else if (autoBDE9C81F_val == 3) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(24, 27);
            lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
            lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        }
        else if (autoBDE9C81F_val == 4) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(24, 27);
            lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
            lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
        }
        else {
        }
        libCOMI_gf_CustomAttackWave(lv_aWSpawns, lv_aWTarget, lv_aWSize, lv_aWTech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle2_Init () {
    gt_ObjectiveWaveCycle2 = TriggerCreate("gt_ObjectiveWaveCycle2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 3
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_escortIndex;
    int lv_aWIndex;
    unit lv_aWTarget;
    string lv_aWSpawns;
    int lv_aWSize;
    int lv_aWTech;

    // Automatic Variable Declarations
    const int autoEBFDF11C_ae = 6;
    const int autoEBFDF11C_ai = 1;
    int auto0EC5CA80_val;

    // Variable Initialization
    lv_aWSpawns = libCOMI_gf_SpawnsRange(31, 37);
    lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotEnemyInboundBE", 5.0, 20.0);
    lv_aWIndex = 1;
    for ( ; ( (autoEBFDF11C_ai >= 0 && lv_aWIndex <= autoEBFDF11C_ae) || (autoEBFDF11C_ai < 0 && lv_aWIndex >= autoEBFDF11C_ae) ) ; lv_aWIndex += autoEBFDF11C_ai ) {
        if (lv_escortIndex >= UnitGroupCount(gv_activeHarvesters, c_unitCountAlive)) {
            lv_escortIndex = 1;
        }
        else {
            lv_escortIndex = lv_escortIndex + 1;
        }
        lv_aWTarget = UnitGroupUnit(gv_activeHarvesters, lv_escortIndex);
        auto0EC5CA80_val = lv_aWIndex;
        if (auto0EC5CA80_val == 1) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(31, 33);
        }
        else if (auto0EC5CA80_val == 2) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(31, 33);
        }
        else if (auto0EC5CA80_val == 3) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(33, 36);
        }
        else if (auto0EC5CA80_val == 4) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(33, 36);
        }
        else if (auto0EC5CA80_val == 5) {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(33, 36);
        }
        else if (auto0EC5CA80_val == 6) {
            lv_aWSpawns = libCOMI_gf_SpawnsSingle(37);
        }
        else {
        }
        libCOMI_gf_CustomAttackWave(lv_aWSpawns, lv_aWTarget, lv_aWSize, lv_aWTech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle3_Init () {
    gt_ObjectiveWaveCycle3 = TriggerCreate("gt_ObjectiveWaveCycle3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 4
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_escortIndex;
    int lv_aWIndex;
    unit lv_aWTarget;
    string lv_aWSpawns;
    int lv_aWSize;
    int lv_aWTech;

    // Automatic Variable Declarations
    const int autoDC0098A0_ae = 6;
    const int autoDC0098A0_ai = 1;
    point autoB78892D5_val;

    // Variable Initialization
    lv_aWSpawns = libCOMI_gf_SpawnsRange(41, 47);
    lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(18.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotEnemyInboundBE", 5.0, 20.0);
    lv_aWIndex = 1;
    for ( ; ( (autoDC0098A0_ai >= 0 && lv_aWIndex <= autoDC0098A0_ae) || (autoDC0098A0_ai < 0 && lv_aWIndex >= autoDC0098A0_ae) ) ; lv_aWIndex += autoDC0098A0_ai ) {
        if (lv_escortIndex >= UnitGroupCount(gv_activeHarvesters, c_unitCountAlive)) {
            lv_escortIndex = 1;
        }
        else {
            lv_escortIndex = lv_escortIndex + 1;
        }
        lv_aWTarget = UnitGroupUnit(gv_activeHarvesters, lv_escortIndex);
        autoB78892D5_val = libHots_gf_PointStoredForUnit(lv_aWTarget, 1);
        if (autoB78892D5_val == PointFromId(2650)) {
            if ((RandomInt(1, 3) == 1)) {
                lv_aWSpawns = libCOMI_gf_SpawnsSingle(45);
                lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;
            }
            else {
                lv_aWSpawns = libCOMI_gf_SpawnsRange(46, 47);
                lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
            }
        }
        else {
            lv_aWSpawns = libCOMI_gf_SpawnsRange(41, 45);
            lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
        }
        libCOMI_gf_CustomAttackWave(lv_aWSpawns, lv_aWTarget, lv_aWSize, lv_aWTech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        if ((lv_aWIndex == 3)) {
            continue;
        }
        else {
            Wait(30.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle4_Init () {
    gt_ObjectiveWaveCycle4 = TriggerCreate("gt_ObjectiveWaveCycle4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 5
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_escortIndex;
    int lv_aWIndex;
    unit lv_aWTarget;
    string lv_aWSpawns;
    int lv_aWSize;
    int lv_aWTech;

    // Automatic Variable Declarations
    const int auto2490E01E_ae = 9;
    const int auto2490E01E_ai = 1;
    point auto26C0B08F_val;

    // Variable Initialization
    lv_aWSpawns = libCOMI_gf_SpawnsRange(51, 57);
    lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    libCOMI_gf_DefferedTransmission("BotEnemyInboundBE", 5.0, 20.0);
    lv_aWIndex = 1;
    for ( ; ( (auto2490E01E_ai >= 0 && lv_aWIndex <= auto2490E01E_ae) || (auto2490E01E_ai < 0 && lv_aWIndex >= auto2490E01E_ae) ) ; lv_aWIndex += auto2490E01E_ai ) {
        if ((lv_aWIndex > 4)) {
            lv_aWSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
            lv_aWTech = libCOMI_ge_CoopAITechLevelBuckets__5Late;
        }

        if ((lv_aWIndex > 3) && (libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2) && (ModI(lv_aWIndex, 2) == 0)) {
            lv_aWTarget = libCOMI_gf_LowestVitalityUnitfromUnitGroup(UnitGroupEmpty());
            lv_aWSpawns = libCOMI_gf_SpawnsRange(51, 57);
        }
        else {
            if (lv_escortIndex >= UnitGroupCount(gv_activeHarvesters, c_unitCountAlive)) {
                lv_escortIndex = 1;
            }
            else {
                lv_escortIndex = lv_escortIndex + 1;
            }
            lv_aWTarget = UnitGroupUnit(gv_activeHarvesters, lv_escortIndex);
            auto26C0B08F_val = libHots_gf_PointStoredForUnit(lv_aWTarget, 1);
            if (auto26C0B08F_val == PointFromId(2656)) {
                lv_aWSpawns = libCOMI_gf_SpawnsRange(51, 53);
            }
            else if (auto26C0B08F_val == PointFromId(2657)) {
                lv_aWSpawns = libCOMI_gf_SpawnsRange(53, 55);
            }
            else if (auto26C0B08F_val == PointFromId(2658)) {
                lv_aWSpawns = libCOMI_gf_SpawnsSingle(57);
            }
            else {
            }
        }
        libCOMI_gf_CustomAttackWave(lv_aWSpawns, lv_aWTarget, lv_aWSize, lv_aWTech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
        if ((lv_aWIndex <= 4)) {
            Wait(15.0, c_timeGame);
        }
        else {
            Wait(30.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle5_Init () {
    gt_ObjectiveWaveCycle5 = TriggerCreate("gt_ObjectiveWaveCycle5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Progress to Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_ProgresstoVictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF157A73B_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF157A73B_val = gv_wavesCompleted;
    if (autoF157A73B_val == 2) {
        libCOMI_gf_DefferedTransmission("ProgressFirstBE", 0.0, 30.0);
    }
    else if (autoF157A73B_val == 3) {
        libCOMI_gf_DefferedTransmission("ProgressSecondBE", 0.0, 30.0);
    }
    else if (autoF157A73B_val == 4) {
        libCOMI_gf_DefferedTransmission("ProgressThirdBE", 0.0, 30.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProgresstoVictoryQ_Init () {
    gt_ProgresstoVictoryQ = TriggerCreate("gt_ProgresstoVictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Harass Drop Pod VO Q
//--------------------------------------------------------------------------------------------------
bool gt_EscortHarassDropPodVOQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto19205CD3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto19205CD3_val = libCOMI_gf_GetPlayerRaceVO(PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1));
    if (auto19205CD3_val == "Prot") {
        libCOMI_gf_DefferedTransmission("BotWarpProtossBE", 5.0, 20.0);
    }
    else if (auto19205CD3_val == "Terr") {
        libCOMI_gf_DefferedTransmission("BotDropTerranBE", 5.0, 20.0);
    }
    else if (auto19205CD3_val == "Zerg") {
        libCOMI_gf_DefferedTransmission("BotDropZergBE", 5.0, 20.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortHarassDropPodVOQ_Init () {
    gt_EscortHarassDropPodVOQ = TriggerCreate("gt_EscortHarassDropPodVOQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreScreen - Harvester Damage
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenHarvesterDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto808BEDD7_g;
    int auto808BEDD7_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_ESCORT))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "TerrazineHarvester"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_scoreScreen_HarvesterDamage += EventUnitDamageAmount();
    auto808BEDD7_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto808BEDD7_var = -1;
    while (true) {
        auto808BEDD7_var = PlayerGroupNextPlayer(auto808BEDD7_g, auto808BEDD7_var);
        if (auto808BEDD7_var < 0) { break; }
        PlayerScoreValueSetFromFixed(auto808BEDD7_var, "BelshirEscortHarvesterDamage", gv_scoreScreen_HarvesterDamage);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenHarvesterDamage_Init () {
    gt_ScoreScreenHarvesterDamage = TriggerCreate("gt_ScoreScreenHarvesterDamage_Func");
    TriggerAddEventUnitDamaged(gt_ScoreScreenHarvesterDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Bot Tracker
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardBotTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "TerrazineHarvester"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true)) {
        gv_leaderboardBotCount += 1;
        gv_leaderboardBots[gv_leaderboardBotCount] = EventUnitCreatedUnit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardBotTracker_Init () {
    gt_LeaderboardBotTracker = TriggerCreate("gt_LeaderboardBotTracker_Func");
    TriggerAddEventUnitCreated(gt_LeaderboardBotTracker, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Score Bot
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardScoreBot_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_botObjectiveScoreMax;
    int lv_botCounter;
    fixed[12] lv_botHealth;
    fixed lv_botHealthCombined;
    int lv_botScoreBase;
    fixed lv_botScore;
    bool lv_showDebugWindow;

    // Automatic Variable Declarations
    const int auto378D09EC_ae = 11;
    const int auto378D09EC_ai = 1;

    // Variable Initialization
    lv_botObjectiveScoreMax = 100000;
    for (init_i = 0; init_i <= 11; init_i += 1) {
        lv_botHealth[init_i] = 100.0;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_showDebugWindow = GameCheatsEnabled(c_gameCheatCategoryDevelopment);
    if ((lv_showDebugWindow == true)) {
        DialogCreate(350, 250, c_anchorBottomLeft, 0, 375, true);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }

    lv_botScoreBase = (lv_botObjectiveScoreMax / 100);
    while ((libCOMI_gf_GameIsOver() == false)) {
        lv_botHealthCombined = 0.0;
        lv_botCounter = 1;
        for ( ; ( (auto378D09EC_ai >= 0 && lv_botCounter <= auto378D09EC_ae) || (auto378D09EC_ai < 0 && lv_botCounter >= auto378D09EC_ae) ) ; lv_botCounter += auto378D09EC_ai ) {
            if ((UnitIsAlive(gv_leaderboardBots[lv_botCounter]) == true)) {
                lv_botHealth[lv_botCounter] = UnitGetPropertyFixed(gv_leaderboardBots[lv_botCounter], c_unitPropLifePercent, c_unitPropCurrent);
                lv_botHealthCombined += lv_botHealth[lv_botCounter];
            }
            else {
                lv_botHealthCombined += lv_botHealth[lv_botCounter];
            }
        }
        lv_botHealthCombined = (lv_botHealthCombined / 11.0);
        lv_botScore = (IntToFixed(lv_botScoreBase) * lv_botHealthCombined);
        if ((lv_showDebugWindow == true)) {
            TextExpressionSetToken("Param/Expression/0B1DFDF7", "C", FixedToText(lv_botScore, 0));
            DialogSetTitle(DialogLastCreated(), TextExpressionAssemble("Param/Expression/0B1DFDF7"));
        }

        gv_leaderboardBotScoreFinal = FixedToInt(lv_botScore);
        Wait(0.0625, c_timeGame);
    }
    if ((lv_showDebugWindow == true)) {
        while (!((PlayerScoreValueGetAsFixed(1, "TotalMissionScore") > 0.0))) {
            Wait(1.0, c_timeGame);
        }
        TextExpressionSetToken("Param/Expression/AD96A702", "D", FixedToText(PlayerScoreValueGetAsInt(1, "TotalMissionScore"), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/AD96A702", "OriginalText", DialogGetTitle(DialogLastCreated()));
        DialogSetTitle(DialogLastCreated(), TextExpressionAssemble("Param/Expression/AD96A702"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardScoreBot_Init () {
    gt_LeaderboardScoreBot = TriggerCreate("gt_LeaderboardScoreBot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Final Score Bot
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardFinalScoreBot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto441EAAFD_g;
    int auto441EAAFD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_leaderboardBotScoreFinal = libCOMI_gf_ObjectiveFinalScoreChecker(gv_leaderboardBotScoreFinal, "AC_BelshirEscort_Primary02", 1, true);
    auto441EAAFD_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto441EAAFD_var = -1;
    while (true) {
        auto441EAAFD_var = PlayerGroupNextPlayer(auto441EAAFD_g, auto441EAAFD_var);
        if (auto441EAAFD_var < 0) { break; }
        libCOMI_gf_SetMissionScore("MSHarvestingBotLifeRemaining", gv_leaderboardBotScoreFinal, auto441EAAFD_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardFinalScoreBot_Init () {
    gt_LeaderboardFinalScoreBot = TriggerCreate("gt_LeaderboardFinalScoreBot_Func");
    TriggerAddEventGeneric(gt_LeaderboardFinalScoreBot, libCOMI_gv_COOP_MISSION_STARTED_EVENT2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Terrazine Harvesters Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTerrazineHarvestersDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MissionProgression, false);
    TriggerEnable(gt_EscortIsDeadIncrement, false);
    libCOMI_gf_ObjectiveFailed("AC_BelshirEscort_Primary01", 1, true);
    libCOMI_gf_RunMissionVictorySequence2(gt_DefeatFanfareTerrazineHarvestersDestroyed, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTerrazineHarvestersDestroyed_Init () {
    gt_DefeatTerrazineHarvestersDestroyed = TriggerCreate("gt_DefeatTerrazineHarvestersDestroyed_Func");
    TriggerAddEventChatMessage(gt_DefeatTerrazineHarvestersDestroyed, c_playerAny, "-cheatlose", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Fanfare - Terrazine Harvesters Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatFanfareTerrazineHarvestersDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SendMissionTransmission("DefeatBE", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/03FFDB51"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_escortDeathPoint, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatFanfareTerrazineHarvestersDestroyed_Init () {
    gt_DefeatFanfareTerrazineHarvestersDestroyed = TriggerCreate("gt_DefeatFanfareTerrazineHarvestersDestroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory - Collect Terrazine Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCollectTerrazineCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EscortIsDeadIncrement, false);
    TriggerEnable(gt_MissionProgression, false);
    libCOMI_gf_ObjectiveComplete("AC_BelshirEscort_Primary01", 1, true);
    libCOMI_gf_ObjectiveComplete("AC_BelshirEscort_Primary02", 1, true);
    libCOMI_gf_RunMissionVictorySequence2(gt_VictoryFanfareCollectTerrazineCompleted, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCollectTerrazineCompleted_Init () {
    gt_VictoryCollectTerrazineCompleted = TriggerCreate("gt_VictoryCollectTerrazineCompleted_Func");
    TriggerAddEventChatMessage(gt_VictoryCollectTerrazineCompleted, c_playerAny, "-cheatwin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare - Collect Terrazine Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareCollectTerrazineCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SendVictoryTransmission("VictoryBE");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/B271D53B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(48), 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareCollectTerrazineCompleted_Init () {
    gt_VictoryFanfareCollectTerrazineCompleted = TriggerCreate("gt_VictoryFanfareCollectTerrazineCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Safe The Whales - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_SafeTheWhalesInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_whalePrisonLife;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitInfoTextCampaign(gv_whalePrison1, null, StringExternal("Param/Value/7D59FA49"), null);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_whalePrison2, null, StringExternal("Param/Value/383EDDD0"), null);
    lv_whalePrisonLife = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4000, 4000, 6000, 8000, 0, 0);
    UnitSetPropertyFixed(gv_whalePrison1, c_unitPropLifeMax, lv_whalePrisonLife);
    UnitSetPropertyFixed(gv_whalePrison1, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_whalePrison2, c_unitPropLifeMax, lv_whalePrisonLife);
    UnitSetPropertyFixed(gv_whalePrison2, c_unitPropLifePercent, 100.0);
    TriggerEnable(gt_ObjectiveSavetheWhalesInitializationWhale1, true);
    TriggerEnable(gt_ObjectiveSavetheWhalesInitializationWhale2, true);
    TriggerExecute(gt_LeaderboardScoreWhales, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SafeTheWhalesInitialize_Init () {
    gt_SafeTheWhalesInitialize = TriggerCreate("gt_SafeTheWhalesInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales Initialization - Whale 1
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesInitializationWhale1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((TimerGetRemaining(gv_startBonusObjective1) <= 0.0) || libCOMI_gf_AnyAllyUnitNearby(RegionFromId(17))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_whichWhale += 1;
    libCOMI_gf_ObjectiveCreate("AC_BelshirEscort_Bonus01", 1, true);
    if ((gv_whichWhale < 2)) {
        libCOMI_gf_DefferedTransmission("BonusLocatedFirstBE", 0.0, 20.0);
    }
    else {
        libCOMI_gf_DefferedTransmission("BonusLocatedRepeatBE", 0.0, 20.0);
    }
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, PointFromId(247), StringExternal("Param/Value/FBBDA45C"));
    gv_whalesPing1 = PingLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_whalePrison1, "Signal WorkStart");
    TriggerExecute(gt_ObjectiveSavetheWhalesTimerUpdateWhale1, true, false);
    TriggerEnable(gt_WhaleLifeCheckWhale1, true);
    TriggerEnable(gt_WhaleTimerExpireWhale1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesInitializationWhale1_Init () {
    gt_ObjectiveSavetheWhalesInitializationWhale1 = TriggerCreate("gt_ObjectiveSavetheWhalesInitializationWhale1_Func");
    TriggerEnable(gt_ObjectiveSavetheWhalesInitializationWhale1, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveSavetheWhalesInitializationWhale1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales Timer Update - Whale 1
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesTimerUpdateWhale1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    TimerStart(gv_whalesExpireTimer1, 240.0, false, c_timeAI);
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarning1Whale1, true);
    while ((TimerGetRemaining(gv_whalesExpireTimer1) > 0.0) && (UnitIsAlive(gv_whalePrison1) == true)) {
        if (((AIGetTime() - AILastAttack(gv_whalePrison1)) < 3.0)) {
            TimerPause(gv_whalesExpireTimer1, true);
        }
        else {
            TimerPause(gv_whalesExpireTimer1, false);
        }
        TextExpressionSetToken("Param/Expression/275DADAB", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_whalesExpireTimer1))), Color(100.00, 100.00, 0.00)));
        libCOMI_gf_ObjectiveUpdate("AC_BelshirEscort_Bonus01", 1, TextExpressionAssemble("Param/Expression/275DADAB"));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesTimerUpdateWhale1_Init () {
    gt_ObjectiveSavetheWhalesTimerUpdateWhale1 = TriggerCreate("gt_ObjectiveSavetheWhalesTimerUpdateWhale1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales VO Warning 1 - Whale 1
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesVOWarning1Whale1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_whalesExpireTimer1) <= 150.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_whalePrison1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_DefferedTransmission("BonusExpireFirstBE", 0.0, 0.0);
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarningFinalWhale1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesVOWarning1Whale1_Init () {
    gt_ObjectiveSavetheWhalesVOWarning1Whale1 = TriggerCreate("gt_ObjectiveSavetheWhalesVOWarning1Whale1_Func");
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarning1Whale1, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveSavetheWhalesVOWarning1Whale1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales VO Warning Final - Whale 1
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesVOWarningFinalWhale1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_whalesExpireTimer1) <= 60.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_whalePrison1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_DefferedTransmission("BonusExpireRepeatBE", 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesVOWarningFinalWhale1_Init () {
    gt_ObjectiveSavetheWhalesVOWarningFinalWhale1 = TriggerCreate("gt_ObjectiveSavetheWhalesVOWarningFinalWhale1_Func");
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarningFinalWhale1, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveSavetheWhalesVOWarningFinalWhale1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whale Life Check - Whale 1
//--------------------------------------------------------------------------------------------------
bool gt_WhaleLifeCheckWhale1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_WhaleLifeCheckWhale1, false);
    TriggerEnable(gt_WhaleTimerExpireWhale1, false);
    libCOMI_gf_DestroyPingCoop(gv_whalesPing1);
    libCOMI_gf_ObjectiveComplete("AC_BelshirEscort_Bonus01", 1, true);
    libCOMI_gf_DefferedTransmission("BonusCompleteBE", 0.0, 20.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhaleLifeCheckWhale1_Init () {
    gt_WhaleLifeCheckWhale1 = TriggerCreate("gt_WhaleLifeCheckWhale1_Func");
    TriggerEnable(gt_WhaleLifeCheckWhale1, false);
    TriggerAddEventUnitDied(gt_WhaleLifeCheckWhale1, UnitRefFromVariable("gv_whalePrison1"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whale Timer Expire - Whale 1
//--------------------------------------------------------------------------------------------------
bool gt_WhaleTimerExpireWhale1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_whalePrison1) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_WhaleLifeCheckWhale1, false);
    TriggerEnable(gt_WhaleTimerExpireWhale1, false);
    libCOMI_gf_DestroyPingCoop(gv_whalesPing1);
    libCOMI_gf_ObjectiveFailed("AC_BelshirEscort_Bonus01", 1, true);
    libCOMI_gf_DefferedTransmission("BonusLostBE", 0.0, 20.0);
    UnitCreateEffectUnit(gv_whalePrison1, "COOPTerrazineTankTimeoutDeath", gv_whalePrison1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhaleTimerExpireWhale1_Init () {
    gt_WhaleTimerExpireWhale1 = TriggerCreate("gt_WhaleTimerExpireWhale1_Func");
    TriggerEnable(gt_WhaleTimerExpireWhale1, false);
    TriggerAddEventTimer(gt_WhaleTimerExpireWhale1, gv_whalesExpireTimer1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales Initialization - Whale 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesInitializationWhale2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((TimerGetRemaining(gv_startBonusObjective2) <= 0.0) || libCOMI_gf_AnyAllyUnitNearby(RegionFromId(15))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_whichWhale += 1;
    libCOMI_gf_ObjectiveCreate("AC_BelshirEscort_Bonus02", 1, true);
    if ((gv_whichWhale < 2)) {
        libCOMI_gf_DefferedTransmission("BonusLocatedFirstBE", 0.0, 20.0);
    }
    else {
        libCOMI_gf_DefferedTransmission("BonusLocatedRepeatBE", 0.0, 20.0);
    }
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, PointFromId(209), StringExternal("Param/Value/7D4ACEAA"));
    gv_whalesPing2 = PingLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_whalePrison2, "Signal WorkStart");
    TriggerExecute(gt_ObjectiveSavetheWhalesTimerUpdateWhale2, true, false);
    TriggerEnable(gt_WhaleLifeCheckWhale2, true);
    TriggerEnable(gt_WhaleTimerExpireWhale2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesInitializationWhale2_Init () {
    gt_ObjectiveSavetheWhalesInitializationWhale2 = TriggerCreate("gt_ObjectiveSavetheWhalesInitializationWhale2_Func");
    TriggerEnable(gt_ObjectiveSavetheWhalesInitializationWhale2, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveSavetheWhalesInitializationWhale2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales Timer Update - Whale 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesTimerUpdateWhale2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    TimerStart(gv_whalesExpireTimer2, 240.0, false, c_timeAI);
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarning1Whale2, true);
    while ((TimerGetRemaining(gv_whalesExpireTimer2) > 0.0) && (UnitIsAlive(gv_whalePrison2) == true)) {
        if (((AIGetTime() - AILastAttack(gv_whalePrison2)) < 3.0)) {
            TimerPause(gv_whalesExpireTimer2, true);
        }
        else {
            TimerPause(gv_whalesExpireTimer2, false);
        }
        TextExpressionSetToken("Param/Expression/588B9543", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_whalesExpireTimer2))), Color(100.00, 100.00, 0.00)));
        libCOMI_gf_ObjectiveUpdate("AC_BelshirEscort_Bonus02", 1, TextExpressionAssemble("Param/Expression/588B9543"));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesTimerUpdateWhale2_Init () {
    gt_ObjectiveSavetheWhalesTimerUpdateWhale2 = TriggerCreate("gt_ObjectiveSavetheWhalesTimerUpdateWhale2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales VO Warning 1 - Whale 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesVOWarning1Whale2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_whalesExpireTimer2) <= 150.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_whalePrison2) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_DefferedTransmission("BonusExpireFirstBE", 0.0, 0.0);
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarningFinalWhale2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesVOWarning1Whale2_Init () {
    gt_ObjectiveSavetheWhalesVOWarning1Whale2 = TriggerCreate("gt_ObjectiveSavetheWhalesVOWarning1Whale2_Func");
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarning1Whale2, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveSavetheWhalesVOWarning1Whale2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Save the Whales VO Warning Final - Whale 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSavetheWhalesVOWarningFinalWhale2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_whalesExpireTimer2) <= 60.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_whalePrison2) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_DefferedTransmission("BonusExpireRepeatBE", 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSavetheWhalesVOWarningFinalWhale2_Init () {
    gt_ObjectiveSavetheWhalesVOWarningFinalWhale2 = TriggerCreate("gt_ObjectiveSavetheWhalesVOWarningFinalWhale2_Func");
    TriggerEnable(gt_ObjectiveSavetheWhalesVOWarningFinalWhale2, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveSavetheWhalesVOWarningFinalWhale2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whale Life Check - Whale 2
//--------------------------------------------------------------------------------------------------
bool gt_WhaleLifeCheckWhale2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_WhaleLifeCheckWhale2, false);
    TriggerEnable(gt_WhaleTimerExpireWhale2, false);
    libCOMI_gf_DestroyPingCoop(gv_whalesPing2);
    libCOMI_gf_ObjectiveComplete("AC_BelshirEscort_Bonus02", 1, true);
    libCOMI_gf_DefferedTransmission("BonusCompleteBE", 0.0, 20.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhaleLifeCheckWhale2_Init () {
    gt_WhaleLifeCheckWhale2 = TriggerCreate("gt_WhaleLifeCheckWhale2_Func");
    TriggerEnable(gt_WhaleLifeCheckWhale2, false);
    TriggerAddEventUnitDied(gt_WhaleLifeCheckWhale2, UnitRefFromVariable("gv_whalePrison2"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whale Timer Expire - Whale 2
//--------------------------------------------------------------------------------------------------
bool gt_WhaleTimerExpireWhale2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_whalePrison2) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_WhaleLifeCheckWhale2, false);
    TriggerEnable(gt_WhaleTimerExpireWhale2, false);
    libCOMI_gf_DestroyPingCoop(gv_whalesPing2);
    libCOMI_gf_ObjectiveFailed("AC_BelshirEscort_Bonus02", 1, true);
    libCOMI_gf_DefferedTransmission("BonusLostBE", 0.0, 20.0);
    UnitCreateEffectUnit(gv_whalePrison2, "COOPTerrazineTankTimeoutDeath", gv_whalePrison2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhaleTimerExpireWhale2_Init () {
    gt_WhaleTimerExpireWhale2 = TriggerCreate("gt_WhaleTimerExpireWhale2_Func");
    TriggerEnable(gt_WhaleTimerExpireWhale2, false);
    TriggerAddEventTimer(gt_WhaleTimerExpireWhale2, gv_whalesExpireTimer2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Score Whales
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardScoreWhales_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bonusScoreMax1;
    int lv_bonusScoreMax2;
    int lv_bonusObjectiveParTime;
    fixed lv_bonusScore1;
    fixed lv_bonusScore2;
    bool lv_showDebugWindow;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bonusScoreMax1 = 75000;
    lv_bonusScoreMax2 = 75000;
    lv_bonusObjectiveParTime = 20;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_showDebugWindow = GameCheatsEnabled(c_gameCheatCategoryDevelopment);
    if ((lv_showDebugWindow == true)) {
        DialogCreate(350, 250, c_anchorBottomLeft, 0, 375, true);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }

    lv_bonusScore1 = lv_bonusScoreMax1;
    lv_bonusScore2 = lv_bonusScoreMax2;
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((UnitIsAlive(gv_whalePrison1) == true)) {
            lv_bonusScore1 -= libCOMI_gf_LeaderboardObjectDurationModifierValue(lv_bonusScoreMax1, lv_bonusObjectiveParTime);
        }

        if ((UnitIsAlive(gv_whalePrison2) == true)) {
            lv_bonusScore2 -= libCOMI_gf_LeaderboardObjectDurationModifierValue(lv_bonusScoreMax2, lv_bonusObjectiveParTime);
        }

        if ((lv_showDebugWindow == true)) {
            TextExpressionSetToken("Param/Expression/7C1CFE70", "A", FixedToText(lv_bonusScore1, 0));
            TextExpressionSetToken("Param/Expression/7C1CFE70", "B", FixedToText(lv_bonusScore2, 0));
            DialogSetTitle(DialogLastCreated(), TextExpressionAssemble("Param/Expression/7C1CFE70"));
        }

        gv_leaderboardBonusScoreFinal = FixedToInt(lv_bonusScore1);
        gv_leaderboardBonusScoreFinal2 = FixedToInt(lv_bonusScore2);
        Wait(0.0625, c_timeGame);
    }
    if ((lv_showDebugWindow == true)) {
        while (!((PlayerScoreValueGetAsFixed(1, "TotalMissionScore") > 0.0))) {
            Wait(1.0, c_timeGame);
        }
        TextExpressionSetToken("Param/Expression/1F73B057", "D", FixedToText(PlayerScoreValueGetAsInt(1, "TotalMissionScore"), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/1F73B057", "OriginalText", DialogGetTitle(DialogLastCreated()));
        DialogSetTitle(DialogLastCreated(), TextExpressionAssemble("Param/Expression/1F73B057"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardScoreWhales_Init () {
    gt_LeaderboardScoreWhales = TriggerCreate("gt_LeaderboardScoreWhales_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Final Score Whales
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardFinalScoreWhales_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBB731A3B_g;
    int autoBB731A3B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_leaderboardBonusScoreFinal = libCOMI_gf_ObjectiveFinalScoreChecker(gv_leaderboardBonusScoreFinal, "AC_BelshirEscort_Bonus01", 1, true);
    gv_leaderboardBonusScoreFinal2 = libCOMI_gf_ObjectiveFinalScoreChecker(gv_leaderboardBonusScoreFinal2, "AC_BelshirEscort_Bonus02", 1, true);
    autoBB731A3B_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoBB731A3B_var = -1;
    while (true) {
        autoBB731A3B_var = PlayerGroupNextPlayer(autoBB731A3B_g, autoBB731A3B_var);
        if (autoBB731A3B_var < 0) { break; }
        libCOMI_gf_SetMissionScore("MSBonusSpeed", gv_leaderboardBonusScoreFinal, autoBB731A3B_var);
        libCOMI_gf_SetMissionScore("MSBonusSpeed2", gv_leaderboardBonusScoreFinal2, autoBB731A3B_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardFinalScoreWhales_Init () {
    gt_LeaderboardFinalScoreWhales = TriggerCreate("gt_LeaderboardFinalScoreWhales_Func");
    TriggerAddEventGeneric(gt_LeaderboardFinalScoreWhales, libCOMI_gv_COOP_MISSION_STARTED_EVENT2);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MistOpportunitiesInitialize_Init();
    gt_EscortWavesInitialize_Init();
    gt_EscortWavesStart_Init();
    gt_MissionProgression_Init();
    gt_Escort1Node1_Init();
    gt_Escort2Node23_Init();
    gt_Escort3Node45_Init();
    gt_Escort4Node678_Init();
    gt_Escort5Node91011_Init();
    gt_ObjectiveDontLetBotsDieUpdate_Init();
    gt_ObjectiveCollectTerrazineCanistersUpdate_Init();
    gt_EscortIsDeadIncrement_Init();
    gt_ObjectiveWaveCycle1_Init();
    gt_ObjectiveWaveCycle2_Init();
    gt_ObjectiveWaveCycle3_Init();
    gt_ObjectiveWaveCycle4_Init();
    gt_ObjectiveWaveCycle5_Init();
    gt_ProgresstoVictoryQ_Init();
    gt_EscortHarassDropPodVOQ_Init();
    gt_ScoreScreenHarvesterDamage_Init();
    gt_LeaderboardBotTracker_Init();
    gt_LeaderboardScoreBot_Init();
    gt_LeaderboardFinalScoreBot_Init();
    gt_DefeatTerrazineHarvestersDestroyed_Init();
    gt_DefeatFanfareTerrazineHarvestersDestroyed_Init();
    gt_VictoryCollectTerrazineCompleted_Init();
    gt_VictoryFanfareCollectTerrazineCompleted_Init();
    gt_SafeTheWhalesInitialize_Init();
    gt_ObjectiveSavetheWhalesInitializationWhale1_Init();
    gt_ObjectiveSavetheWhalesTimerUpdateWhale1_Init();
    gt_ObjectiveSavetheWhalesVOWarning1Whale1_Init();
    gt_ObjectiveSavetheWhalesVOWarningFinalWhale1_Init();
    gt_WhaleLifeCheckWhale1_Init();
    gt_WhaleTimerExpireWhale1_Init();
    gt_ObjectiveSavetheWhalesInitializationWhale2_Init();
    gt_ObjectiveSavetheWhalesTimerUpdateWhale2_Init();
    gt_ObjectiveSavetheWhalesVOWarning1Whale2_Init();
    gt_ObjectiveSavetheWhalesVOWarningFinalWhale2_Init();
    gt_WhaleLifeCheckWhale2_Init();
    gt_WhaleTimerExpireWhale2_Init();
    gt_LeaderboardScoreWhales_Init();
    gt_LeaderboardFinalScoreWhales_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
