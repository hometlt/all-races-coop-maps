//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Solar Right
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
include "Lib37CC0EF2"
include "ai7C27ED3A"
include "ai0FD46E6F"
include "aiB20A6CD2"
include "ai88E6405F"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
    lib37CC0EF2_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_p_NEUTRAL = 0;
const int gv_p_HOSTILE = 15;
const int gv_p_USER1 = 1;
const int gv_p_USER2 = 2;
const int gv_p_USER3 = 12;
const int gv_p_ENEMY1 = 3;
const int gv_p_ENEMY2 = 4;
const int gv_p_ENEMY_SPECIAL = 9;
const int gv_p_ENEMY_MELEE = 10;
const int gv_p_QUADAN = 11;
const int gv_p_ELEVATORS = 8;
const int gv_p_ARCHEOLOGISTS = 5;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_SolariteNodes {
    unit lv_solariteNode;
    unitgroup lv_solariteGatherers;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_GeneratorType_Pump = 0;
const int ge_GeneratorType_Crack = 1;
string ge_GeneratorType_Ident (int lp_val);
const int ge_TruckState_None = 0;
const int ge_TruckState_Processing = 1;
const int ge_TruckState_Waiting = 2;
const int ge_TruckState_Preparing = 3;
const int ge_TruckState_Moving = 4;
const int ge_TruckState_Destroyed = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_escortTruck;
unitgroup gv_escortTrucks;
unit gv_voidPreserver;
unit gv_stoneTemplar;
string gv_hybridMajor;
string gv_hybridMinor;
region[25] gv_allyTargetSolariteRegions;
region[25] gv_enemyTargetSolariteRegions;
fixed gv_amonFreeSolariteK;
int gv_sOLARITE_GOAL;
int[4] gv_sOLARITE_WARNINGS;
int[5] gv_cHECKPOINTS_SOLARITE;
int[5] gv_cHECKPOINTS_DELAY;
int gv_sOLARITE_ALLY;
int gv_sOLARITE_ENEMY;
int gv_generatorsActive;
int gv_maxSolarite;
int gv_searchDist;
unitgroup gv_solariteGatherer;
unitgroup gv_enemyGatherers;
int gv_allyGatherersReviving;
unitgroup gv_allyGatherers;
actor[2] gv_solariteInitialhighlightactor;
int[2] gv_solariteInitialtexttag;
int[2] gv_solariteInitialping;
revealer[2] gv_solariteInitialrevealer;
actor[8] gv_solariteCrack;
actor[5] gv_solaritePump;
int gv_solariteProgressbar;
int gv_objectiveGatherSolarite;
gs_SolariteNodes[3002] gv_solariteNode;
int gv_lastSolariteNode;
int[10] gv_solaritePings;
int gv_cONVOY_CHECKPOINTS;
int gv_tRUCK_STATE;
int gv_rOAD_NEEDED;
int gv_rOAD;
int gv_truckLife;
int gv_objectiveRamseyAlive;
point gv_truckDeathPoint;
point[6][33] gv_checkpointsPoint;
int[4] gv_checkpointsObjectivemarkers;
int[4] gv_checkpointsObjectivemarkersUndergorund;
bool gv_bossIsActive;
int gv_objectiveSticksnStones;
timer gv_startBonusObjective;
timer gv_sticksExpireTimer;
int gv_sticksPing;
fixed gv_aIStoneTemplarStoneTemplarAttackDelay;
timer gv_aIStoneTemplarStoneTemplarAttackCooldown;
int gv_bossPing;
int gv_objectiveSecure;

void InitGlobals () {
    int init_i;

    gv_escortTrucks = UnitGroupEmpty();
    gv_voidPreserver = UnitFromId(1876950852);
    gv_stoneTemplar = UnitFromId(1953716634);
    gv_amonFreeSolariteK = 1.0;
    gv_sOLARITE_GOAL = 750;
    gv_maxSolarite = CatalogReferenceGetAsInt("Behavior,CarrySolarite,MaxStackCount", c_playerAny);
    gv_searchDist = CatalogReferenceGetAsInt("Effect,GatherSolariteFindNextSourceSearchArea,AreaArray[1].Radius", c_playerAny);
    gv_solariteGatherer = UnitGroupEmpty();
    gv_enemyGatherers = UnitGroupEmpty();
    gv_allyGatherers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_solariteInitialtexttag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_solariteInitialping[init_i] = c_invalidPingId;
    }
    gv_solariteProgressbar = c_invalidDialogId;
    gv_objectiveGatherSolarite = c_invalidObjectiveId;
    for (init_i = 0; init_i <= 3001; init_i += 1) {
        gv_solariteNode[init_i].lv_solariteGatherers = UnitGroupEmpty();
    }
    gv_lastSolariteNode = 1;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_solaritePings[init_i] = c_invalidPingId;
    }
    gv_cONVOY_CHECKPOINTS = 4;
    gv_tRUCK_STATE = ge_TruckState_None;
    gv_objectiveRamseyAlive = c_invalidObjectiveId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_checkpointsObjectivemarkers[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_checkpointsObjectivemarkersUndergorund[init_i] = c_invalidPingId;
    }
    gv_objectiveSticksnStones = c_invalidObjectiveId;
    gv_startBonusObjective = TimerCreate();
    gv_sticksExpireTimer = TimerCreate();
    gv_sticksPing = c_invalidPingId;
    gv_aIStoneTemplarStoneTemplarAttackDelay = 2.0;
    gv_aIStoneTemplarStoneTemplarAttackCooldown = TimerCreate();
    gv_bossPing = c_invalidPingId;
    gv_objectiveSecure = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_Ramsey (soundlink lp_sound);
point gf_DropLocation (int lp_waveIndex, int lp_firstLocation, int lp_lastLocation);
void gf_Createenemygatherer (int lp_player);
void gf_Enemygathereractivity (unit lp_worker);
void gf_Createallygatherer ();
void gf_Allygathereractivity (unit lp_worker);
void gf_GenerateSolarite (int lp_generator, int lp_amount, int lp_index);
void gf_CreateSolariteProgressBar ();
void gf_SolariteSpawnNode (point lp_point, int lp_amount);
void gf_SolariteAddtoNode (unit lp_solaritenode, int lp_amount);
void gf_EscortSendTruck (int lp_pathIndex);
void gf_EscortStartconvoycountdown (int lp_delay, text lp_text);
void gf_StoneTemplarAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01CommandersReady;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_Init09AI;
trigger gt_EnemyAttackingTransmission;
trigger gt_HarassWaveTransmission;
trigger gt_ObjectiveWaveCycle1;
trigger gt_ObjectiveWaveCycle2;
trigger gt_ObjectiveWaveCycle3;
trigger gt_ObjectiveWaveCycle4;
trigger gt_ObjectiveWaveCycle5;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03ExpoAttack;
trigger gt_AttackWave04OppositeExpoAttack;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWaveFinal;
trigger gt_SolariteGatherSolariteQ;
trigger gt_SolariteEnemyGatherersQ;
trigger gt_SolariteAllyGatherersQ;
trigger gt_SolaritePumps;
trigger gt_SolariteCracks;
trigger gt_SolariteCracksOld;
trigger gt_SolariteExplanation1Transmission;
trigger gt_SolariteExplanation2Transmission;
trigger gt_EnemyGatherersTransmission;
trigger gt_SolaritePlayers75;
trigger gt_SolaritePlayers50;
trigger gt_SolaritePlayers25;
trigger gt_SolariteAmon75;
trigger gt_SolariteAmon50;
trigger gt_SolariteAmon25;
trigger gt_MapObjectInteract;
trigger gt_GatherSolariteStoreunitgatheringsolarite;
trigger gt_GatherSolariteRemovefromunitgroupifstops;
trigger gt_GatherSolariteIssuetokeepgatheringifsolaritedies;
trigger gt_GatherSolariteIssuetokeepgatheringifsolaritedies2;
trigger gt_GatherSolariteForceReturn;
trigger gt_GatherSolariteTextTags;
trigger gt_Createenemygatherers;
trigger gt_Reviveenemygatherers;
trigger gt_Createallygatherers;
trigger gt_Reviveallygatherers;
trigger gt_SolariteCreateTutorialNodes;
trigger gt_SolariteDestroyHelperRight;
trigger gt_SolariteDestroyHelperLeft;
trigger gt_IniActors;
trigger gt_SolariteCrabs;
trigger gt_SolariteBeetle;
trigger gt_SolariteElemental;
trigger gt_SollariteCarry;
trigger gt_ObjectiveGatherSolariteCreate;
trigger gt_ObjectiveGatherSolariteComplete;
trigger gt_ObjectiveGatherSolariteUpdate;
trigger gt_ObjectiveGatherSolariteFailed;
trigger gt_SolariteTextTag;
trigger gt_ResizeSolariteCore;
trigger gt_SolaritePingCheck;
trigger gt_SolariteAmountChanged;
trigger gt_SolariteEscortTruckQ;
trigger gt_ObjectiveRamseyAliveCreate;
trigger gt_ObjectiveRamseyAliveComplete;
trigger gt_ObjectiveRamseyAliveUpdate;
trigger gt_ObjectiveRamseyAliveFailed;
trigger gt_EscortTruckTransmission;
trigger gt_TransmissionTruckPreparingQ;
trigger gt_TransmissionTruckDepartQ;
trigger gt_TransmissionTruckArriveQ;
trigger gt_TransmissionConvoyreceivesdamagefirsttimeQ;
trigger gt_TransmissionConvoyreceivesdamage75HP;
trigger gt_TransmissionConvoyreceivesdamage50HP;
trigger gt_TransmissionConvoyreceivesdamage25HP;
trigger gt_TransmissionConvoyreceivesdamage10HP;
trigger gt_EscortShowresearchfacilities;
trigger gt_EscortCreating;
trigger gt_EscortArrived;
trigger gt_EscortProcessing;
trigger gt_EscortTimerExpires;
trigger gt_EscortCheckSolariteAmount;
trigger gt_EscortPreparing;
trigger gt_ObjectiveSticksnStonesCreate;
trigger gt_ObjectiveSticksnStonesComplete;
trigger gt_ObjectiveSticksnStonesFailed;
trigger gt_ObjectiveSticksnStonesUpdate;
trigger gt_ObjectiveSticksnStonesCheck;
trigger gt_ObjectiveSticksVOStart;
trigger gt_ObjectiveSticksnStonesVOWarning;
trigger gt_ObjectiveSticksnStonesVOWarningFinal;
trigger gt_ObjectiveSticksVOFailed;
trigger gt_ObjectiveSticksVOComplete;
trigger gt_ObjectiveSticksnStonesPoke;
trigger gt_ObjectiveSticksnStonesIntialization;
trigger gt_ObjectiveSticksnStonesTimerUpdate;
trigger gt_ObjectiveSticksnStonesProgressCheck;
trigger gt_StoneLifeCheck;
trigger gt_StoneTimerExpire;
trigger gt_StoneInterceptorTooltip;
trigger gt_BossCreate;
trigger gt_ObjectiveBossUpdate;
trigger gt_ObjectiveSecureUpdate;
trigger gt_DefeatConvoyDead;
trigger gt_DefeatAmonGatheredSolarite;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_CheatSpawnSolariteNode;
trigger gt_CheatAddSolariteToNode;
trigger gt_CheatPumpAnimation;
trigger gt_CheatNoLose;
trigger gt_CheatLoadingScreen;
trigger gt_CheatStoneTemplar;
trigger gt_CheatProgressCheck;
trigger gt_CheatVictory;
trigger gt_CheatReviveEnemyGatherers;
trigger gt_CheatEscortOne;
trigger gt_CheatEscortTwo;
trigger gt_CheatEscortThree;
trigger gt_CheatEscortFour;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai7C27ED3A") { ai7C27ED3A_start(p); }
    if (cai_playerAI[p] == "ai0FD46E6F") { ai0FD46E6F_start(p); }
    if (cai_playerAI[p] == "aiB20A6CD2") { aiB20A6CD2_start(p); }
    if (cai_playerAI[p] == "ai88E6405F") { ai88E6405F_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { ai7C27ED3A_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai0FD46E6F") { ai0FD46E6F_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiB20A6CD2") { aiB20A6CD2_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai88E6405F") { ai88E6405F_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { return ai7C27ED3A_getCustomData(p); }
    if (cai_playerAI[p] == "ai0FD46E6F") { return ai0FD46E6F_getCustomData(p); }
    if (cai_playerAI[p] == "aiB20A6CD2") { return aiB20A6CD2_getCustomData(p); }
    if (cai_playerAI[p] == "ai88E6405F") { return ai88E6405F_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { return ai7C27ED3A_getLastWave(p); }
    if (cai_playerAI[p] == "ai0FD46E6F") { return ai0FD46E6F_getLastWave(p); }
    if (cai_playerAI[p] == "aiB20A6CD2") { return aiB20A6CD2_getLastWave(p); }
    if (cai_playerAI[p] == "ai88E6405F") { return ai88E6405F_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { ai7C27ED3A_waves_run(p, target); }
    if (cai_playerAI[p] == "ai0FD46E6F") { ai0FD46E6F_waves_run(p, target); }
    if (cai_playerAI[p] == "aiB20A6CD2") { aiB20A6CD2_waves_run(p, target); }
    if (cai_playerAI[p] == "ai88E6405F") { ai88E6405F_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { ai7C27ED3A_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai0FD46E6F") { ai0FD46E6F_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiB20A6CD2") { aiB20A6CD2_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai88E6405F") { ai88E6405F_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai7C27ED3A") { ai7C27ED3A_waves_stop(); }
    if (ai == "ai0FD46E6F") { ai0FD46E6F_waves_stop(); }
    if (ai == "aiB20A6CD2") { aiB20A6CD2_waves_stop(); }
    if (ai == "ai88E6405F") { ai88E6405F_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { ai7C27ED3A_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai0FD46E6F") { ai0FD46E6F_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiB20A6CD2") { aiB20A6CD2_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai88E6405F") { ai88E6405F_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { ai7C27ED3A_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai0FD46E6F") { ai0FD46E6F_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiB20A6CD2") { aiB20A6CD2_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai88E6405F") { ai88E6405F_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { return ai7C27ED3A_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai0FD46E6F") { return ai0FD46E6F_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiB20A6CD2") { return aiB20A6CD2_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai88E6405F") { return ai88E6405F_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { return ai7C27ED3A_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai0FD46E6F") { return ai0FD46E6F_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiB20A6CD2") { return aiB20A6CD2_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai88E6405F") { return ai88E6405F_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai7C27ED3A") { return ai7C27ED3A_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai0FD46E6F") { return ai0FD46E6F_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiB20A6CD2") { return aiB20A6CD2_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai88E6405F") { return ai88E6405F_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai7C27ED3A", 12);
    cai_start("ai0FD46E6F", 3);
    cai_start("aiB20A6CD2", 4);
    cai_start("ai88E6405F", 11);
    AICampaignStart(5);
    AICampaignStart(8);
    AICampaignStart(9);
    AICampaignStart(10);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    PlayerGroupAdd(target, 9);
    PlayerGroupAdd(target, 10);
    cai_waves_run(12, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 12);
    cai_waves_run(4, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 3);
    PlayerGroupAdd(target, 4);
    PlayerGroupAdd(target, 9);
    PlayerGroupAdd(target, 10);
    PlayerGroupAdd(target, 12);
    cai_waves_run(11, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------
string ge_GeneratorType_Ident (int lp_val) {
         if (lp_val == ge_GeneratorType_Pump) { return "Pump"; }
    else if (lp_val == ge_GeneratorType_Crack) { return "Crack"; }
    return null;
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_Ramsey (soundlink lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RamseyPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lp_sound, 0.0, c_transmissionDurationAdd, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
}

point gf_DropLocation (int lp_waveIndex, int lp_firstLocation, int lp_lastLocation) {
    // Variable Declarations
    int lv_waveDropIter;
    int[8] lv_possibleDropLocations;
    int lv_dropLocationCount;
    int lv_dropLocationIndex;
    int lv_testDropLocation;
    point lv_testPoint;
    int lv_tempLocalIndex;

    // Automatic Variable Declarations
    int auto50EB9343_ae;
    const int auto50EB9343_ai = 1;

    // Variable Initialization

    // Implementation
    auto50EB9343_ae = lp_lastLocation;
    lv_waveDropIter = lp_firstLocation;
    for ( ; ( (auto50EB9343_ai >= 0 && lv_waveDropIter <= auto50EB9343_ae) || (auto50EB9343_ai < 0 && lv_waveDropIter >= auto50EB9343_ae) ) ; lv_waveDropIter += auto50EB9343_ai ) {
        lv_dropLocationCount += 1;
        lv_possibleDropLocations[lv_dropLocationCount] = lv_waveDropIter;
    }
    while ((lv_dropLocationCount > 0)) {
        lv_dropLocationIndex = RandomInt(1, lv_dropLocationCount);
        lv_testDropLocation = lv_possibleDropLocations[lv_dropLocationIndex];
        lv_testPoint = PointFromName(("Wave" + IntToString(lp_waveIndex) + "_Pt" + IntToString(lv_testDropLocation)));
        if ((UnitGroupCount(UnitGroupAlliance(gv_p_ENEMY1, c_unitAllianceEnemy, RegionCircle(lv_testPoint, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupAlliance(gv_p_ENEMY2, c_unitAllianceEnemy, RegionCircle(lv_testPoint, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_tempLocalIndex = lv_possibleDropLocations[lv_dropLocationCount];
            lv_possibleDropLocations[lv_dropLocationCount] = lv_possibleDropLocations[lv_dropLocationCount];
            lv_possibleDropLocations[lv_dropLocationIndex] = lv_tempLocalIndex;
            break;
        }
        else {
            lv_dropLocationCount -= 1;
        }
    }
    if ((lv_dropLocationCount == 0)) {
        return PointFromName(("Wave" + IntToString(lp_waveIndex) + "_Pt" + IntToString(RandomInt(lp_firstLocation, lp_lastLocation))));
    }
    else {
        return PointFromName(("Wave" + IntToString(lp_waveIndex) + "_Pt" + IntToString(lv_testDropLocation)));
    }
}

trigger auto_gf_Createenemygatherer_Trigger = null;
int auto_gf_Createenemygatherer_lp_player;

void gf_Createenemygatherer (int lp_player) {
    auto_gf_Createenemygatherer_lp_player = lp_player;

    if (auto_gf_Createenemygatherer_Trigger == null) {
        auto_gf_Createenemygatherer_Trigger = TriggerCreate("auto_gf_Createenemygatherer_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createenemygatherer_Trigger, false, false);
}

bool auto_gf_Createenemygatherer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_Createenemygatherer_lp_player;

    // Variable Declarations
    unitgroup lv_bases;
    string lv_scvUnitType;
    string lv_townHallType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bases = UnitGroupEmpty();

    // Implementation
    lv_scvUnitType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Worker, lp_player);
    if ((lv_scvUnitType == "")) {
        lv_scvUnitType = "DroneFull";
    }

    lv_bases = libCOMI_gf_CoopUnitsbyCategory(libCOMI_ge_UnitCategory_StructureMain, lp_player);
    if ((UnitGroupCount(lv_bases, c_unitCountAlive) > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_scvUnitType, 0, gv_p_ENEMY_SPECIAL, UnitGetPosition(UnitGroupRandomUnit(lv_bases, c_unitCountAlive)));
        UnitAbilityAdd(UnitLastCreated(), "GatherSolarite");
        UnitAbilityAdd(UnitLastCreated(), "ReturnSolarite");
        UnitAbilityAdd(UnitLastCreated(), "ReturnSolariteDummy");
    }

    UnitGroupAdd(gv_enemyGatherers, UnitLastCreated());
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetScale(PingLastCreated(), 0.1);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8F76016E"));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    gf_Enemygathereractivity(UnitLastCreated());
    while (!(((UnitIsAlive(UnitLastCreated()) == false) || (libCOMI_gf_GameIsOver() == true) || (gv_sOLARITE_ALLY >= gv_sOLARITE_GOAL)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_Enemygathereractivity_Trigger = null;
unit auto_gf_Enemygathereractivity_lp_worker;

void gf_Enemygathereractivity (unit lp_worker) {
    auto_gf_Enemygathereractivity_lp_worker = lp_worker;

    if (auto_gf_Enemygathereractivity_Trigger == null) {
        auto_gf_Enemygathereractivity_Trigger = TriggerCreate("auto_gf_Enemygathereractivity_TriggerFunc");
    }

    TriggerExecute(auto_gf_Enemygathereractivity_Trigger, false, false);
}

bool auto_gf_Enemygathereractivity_TriggerFunc (bool testConds, bool runActions) {
    unit lp_worker = auto_gf_Enemygathereractivity_lp_worker;

    // Variable Declarations
    unit lv_targetSolariteNode;
    unitgroup lv_solariteNodes;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_solariteNodes = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_worker) == true) && (libCOMI_gf_GameIsOver() == false) && (gv_sOLARITE_ALLY < gv_sOLARITE_GOAL)) {
        lv_solariteNodes = UnitGroup("Solarite", c_playerAny, RegionFromId(92), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_targetSolariteNode = UnitGroupRandomUnit(lv_solariteNodes, c_unitCountAlive);
        UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("GatherSolarite", 0), lv_targetSolariteNode), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        while (!(((UnitOrderCount(lp_worker) == 0) || (UnitIsAlive(lp_worker) == false)))) {
            Wait(1.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lp_worker) == true) && (UnitHasBehavior2(lp_worker, "CarrySolarite") == true)) {
            UnitIssueOrder(lp_worker, Order(AbilityCommand("ReturnSolarite", 0)), c_orderQueueReplace);
        }

        Wait(1.0, c_timeGame);
        while (!(((UnitOrderCount(lp_worker) == 0) || (UnitIsAlive(lp_worker) == false)))) {
            Wait(1.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_Createallygatherer_Trigger = null;

void gf_Createallygatherer () {
    if (auto_gf_Createallygatherer_Trigger == null) {
        auto_gf_Createallygatherer_Trigger = TriggerCreate("auto_gf_Createallygatherer_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createallygatherer_Trigger, false, false);
}

bool auto_gf_Createallygatherer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_random = RandomInt(1, 3);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, gv_p_ARCHEOLOGISTS, PointFromId(1168976696));
    UnitAbilityAdd(UnitLastCreated(), "GatherSolarite");
    UnitAbilityAdd(UnitLastCreated(), "ReturnSolarite");
    UnitAbilityAdd(UnitLastCreated(), "ReturnSolariteDummy");
    UnitGroupAdd(gv_allyGatherers, UnitLastCreated());
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 97.65, 100.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetScale(PingLastCreated(), 0.1);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EDCA38B4"));
    AISetUnitScriptControlled(UnitLastCreated(), true);
    gf_Allygathereractivity(UnitLastCreated());
    while (!(((UnitIsAlive(UnitLastCreated()) == false) || (libCOMI_gf_GameIsOver() == true) || (gv_sOLARITE_ALLY >= gv_sOLARITE_GOAL)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_Allygathereractivity_Trigger = null;
unit auto_gf_Allygathereractivity_lp_worker;

void gf_Allygathereractivity (unit lp_worker) {
    auto_gf_Allygathereractivity_lp_worker = lp_worker;

    if (auto_gf_Allygathereractivity_Trigger == null) {
        auto_gf_Allygathereractivity_Trigger = TriggerCreate("auto_gf_Allygathereractivity_TriggerFunc");
    }

    TriggerExecute(auto_gf_Allygathereractivity_Trigger, false, false);
}

bool auto_gf_Allygathereractivity_TriggerFunc (bool testConds, bool runActions) {
    unit lp_worker = auto_gf_Allygathereractivity_lp_worker;

    // Variable Declarations
    unit lv_targetSolariteNode;
    unitgroup lv_solariteNodes;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_solariteNodes = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_worker) == true) && (libCOMI_gf_GameIsOver() == false) && (gv_sOLARITE_ALLY < gv_sOLARITE_GOAL)) {
        lv_solariteNodes = UnitGroup("Solarite", c_playerAny, RegionFromId(85), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_targetSolariteNode = UnitGroupRandomUnit(lv_solariteNodes, c_unitCountAlive);
        UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("GatherSolarite", 0), lv_targetSolariteNode), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        while (!(((UnitOrderCount(lp_worker) == 0) || (UnitIsAlive(lp_worker) == false)))) {
            Wait(1.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lp_worker) == true) && (UnitHasBehavior2(lp_worker, "CarrySolarite") == true)) {
            UnitIssueOrder(lp_worker, Order(AbilityCommand("ReturnSolarite", 0)), c_orderQueueReplace);
        }

        Wait(1.0, c_timeGame);
        while (!(((UnitOrderCount(lp_worker) == 0) || (UnitIsAlive(lp_worker) == false)))) {
            Wait(1.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void gf_GenerateSolarite (int lp_generator, int lp_amount, int lp_index) {
    // Variable Declarations
    int lv_amount;
    int lv_random;
    int lv_minimum;
    unitgroup lv_solarite;
    unit lv_solariteUnit;
    actor lv_actor;

    // Automatic Variable Declarations
    int auto731DCD06_val;
    unitgroup auto40DBD289_g;
    int auto40DBD289_u;
    unit auto40DBD289_var;
    int auto665B7ED2_val;
    int auto4C7EF059_val;
    int auto2B79173E_val;
    unitgroup auto087DA6FA_g;
    int auto087DA6FA_u;
    unit auto087DA6FA_var;

    // Variable Initialization
    lv_solarite = UnitGroupEmpty();

    // Implementation
    TriggerExecute(gt_IniActors, true, false);
    auto731DCD06_val = lp_generator;
    if (auto731DCD06_val == ge_GeneratorType_Pump) {
        lv_actor = gv_solaritePump[lp_index];
        ActorSend(lv_actor, "SetOpacity 1.000000");
        VisRevealArea(gv_p_USER1, RegionFromName(("SolaritePumpCheck_r" + IntToString(lp_index))), 6.0, false);
    }
    else if (auto731DCD06_val == ge_GeneratorType_Crack) {
        lv_actor = gv_solariteCrack[lp_index];
        ActorSend(lv_actor, "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromName(("SolariteCrackRevealer" + IntToString(lp_index)))), 2.0, Color(0.00, 100.00, 0.00));
        VisRevealArea(gv_p_USER1, RegionFromName(("SolariteCrackRevealer" + IntToString(lp_index))), 6.0, false);
        VisRevealArea(gv_p_USER2, RegionFromName(("SolariteCrackRevealer" + IntToString(lp_index))), 6.0, false);
    }
    else {
    }
    auto40DBD289_g = UnitGroup("Solarite", 0, RegionFromName(("Solarite" + ge_GeneratorType_Ident(lp_generator) + "Check_r" + IntToString(lp_index))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto40DBD289_u = UnitGroupCount(auto40DBD289_g, c_unitCountAll);
    for (;; auto40DBD289_u -= 1) {
        auto40DBD289_var = UnitGroupUnitFromEnd(auto40DBD289_g, auto40DBD289_u);
        if (auto40DBD289_var == null) { break; }
        UnitGroupAdd(lv_solarite, auto40DBD289_var);
        lv_solariteUnit = auto40DBD289_var;
    }
    if ((lp_amount == 0)) {
        auto665B7ED2_val = lp_generator;
        if (auto665B7ED2_val == ge_GeneratorType_Pump) {
            lv_amount = 6;
        }
        else if (auto665B7ED2_val == ge_GeneratorType_Crack) {
            lv_amount = 11;
        }
        else {
        }
    }
    else {
        lv_amount = lp_amount;
    }
    if ((UnitGroupCount(lv_solarite, c_unitCountAlive) == 1)) {
        gf_SolariteAddtoNode(lv_solariteUnit, lv_amount);
    }
    else {
        auto4C7EF059_val = lp_generator;
        if (auto4C7EF059_val == ge_GeneratorType_Pump) {
            gf_SolariteSpawnNode(PointFromName(("Solarite" + ge_GeneratorType_Ident(lp_generator) + "_p" + IntToString(lp_index))), 5);
        }
        else if (auto4C7EF059_val == ge_GeneratorType_Crack) {
            gf_SolariteSpawnNode(PointFromName(("Solarite" + ge_GeneratorType_Ident(lp_generator) + "_p" + IntToString(lp_index))), 10);
        }
        else {
        }
    }
    Wait(3.0, c_timeGame);
    auto2B79173E_val = lp_generator;
    if (auto2B79173E_val == ge_GeneratorType_Pump) {
        ActorSend(lv_actor, "SetOpacity 0.000000 1.000000");
    }
    else if (auto2B79173E_val == ge_GeneratorType_Crack) {
        ActorSend(lv_actor, "AnimBracketStop Work");
    }
    else {
    }
    auto087DA6FA_g = UnitGroup("Solarite", 0, RegionFromName(("Solarite" + ge_GeneratorType_Ident(lp_generator) + "Check_r" + IntToString(lp_index))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto087DA6FA_u = UnitGroupCount(auto087DA6FA_g, c_unitCountAll);
    for (;; auto087DA6FA_u -= 1) {
        auto087DA6FA_var = UnitGroupUnitFromEnd(auto087DA6FA_g, auto087DA6FA_u);
        if (auto087DA6FA_var == null) { break; }
        UnitGroupRemove(lv_solarite, auto087DA6FA_var);
    }
}

trigger auto_gf_CreateSolariteProgressBar_Trigger = null;

void gf_CreateSolariteProgressBar () {
    if (auto_gf_CreateSolariteProgressBar_Trigger == null) {
        auto_gf_CreateSolariteProgressBar_Trigger = TriggerCreate("auto_gf_CreateSolariteProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateSolariteProgressBar_Trigger, false, false);
}

bool auto_gf_CreateSolariteProgressBar_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_amonSize;
    int lv_playerSize;
    int lv_amongif;
    int lv_amontext;
    int lv_playersgif;
    int lv_playerstext;
    int lv_loop;
    int lv_loop2;

    // Automatic Variable Declarations
    const int auto668985B7_ae = 16;
    const int auto668985B7_ai = 1;
    const int auto6D9B7898_ae = 2;
    const int auto6D9B7898_ai = 1;
    const int auto11CFEC66_ae = 1;
    const int auto11CFEC66_ai = 0;

    // Variable Initialization
    lv_amongif = c_invalidDialogControlId;
    lv_amontext = c_invalidDialogControlId;
    lv_playersgif = c_invalidDialogControlId;
    lv_playerstext = c_invalidDialogControlId;

    // Implementation
    DialogCreate(300, 200, c_anchorTopRight, 10, 80, true);
    gv_solariteProgressbar = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTop, 0, 20, StringExternal("Param/Value/0A4A2BA1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorTopLeft, 0, 50, StringExternal("Param/Value/13573A3C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorTopRight, 0, 50, StringExternal("Param/Value/51F4935E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/94A495BC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/A74F9933"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    while (true) {
        lv_loop = 1;
        for ( ; ( (auto668985B7_ai >= 0 && lv_loop <= auto668985B7_ae) || (auto668985B7_ai < 0 && lv_loop >= auto668985B7_ae) ) ; lv_loop += auto668985B7_ai ) {
            if ((gv_bossIsActive == true)) {
                break;
            }

            if ((libCOMI_gf_GameIsOver() == true)) {
                break;
            }

            if ((lv_loop <= 12)) {
                lv_loop2 = (lv_loop + 4);
            }
            else {
                lv_loop2 = (lv_loop - 12);
            }
            lv_amonSize = MaxI(FixedToInt(((IntToFixed(gv_sOLARITE_ENEMY) / gv_sOLARITE_GOAL) * 120.0)), 1);
            lv_playerSize = MaxI(FixedToInt(((IntToFixed(gv_sOLARITE_ALLY) / gv_sOLARITE_GOAL) * 120.0)), 1);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomLeft, 0, 0, (StringExternal("Param/Value/C317869C") + IntToText(lv_loop) + StringExternal("Param/Value/C3F9DCD4") + IntToText(lv_amonSize) + StringExternal("Param/Value/6E58F7E9") + IntToText(lv_amonSize) + StringExternal("Param/Value/7E1D02E5")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_amongif = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomRight, 0, 0, (StringExternal("Param/Value/5F4E7356") + IntToText(lv_loop2) + StringExternal("Param/Value/BD7856A5") + IntToText(lv_playerSize) + StringExternal("Param/Value/2B0D98A3") + IntToText(lv_playerSize) + StringExternal("Param/Value/B5E780D4")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_playersgif = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomLeft, 0, 0, (StringExternal("Param/Value/D4AC7FDA") + IntToText(gv_sOLARITE_ENEMY) + StringExternal("Param/Value/F06B2421")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_amontext = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomRight, 0, 0, (StringExternal("Param/Value/8B16DD30") + IntToText(gv_sOLARITE_ALLY) + StringExternal("Param/Value/32872F9D")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_playerstext = DialogControlLastCreated();
            Wait(0.0, c_timeGame);
            Wait(0.0, c_timeGame);
            DialogControlDestroy(lv_amongif);
            DialogControlDestroy(lv_playersgif);
            DialogControlDestroy(lv_amontext);
            DialogControlDestroy(lv_playerstext);
        }
        lv_loop = 15;
        for ( ; ( (auto6D9B7898_ai >= 0 && lv_loop <= auto6D9B7898_ae) || (auto6D9B7898_ai < 0 && lv_loop >= auto6D9B7898_ae) ) ; lv_loop += auto6D9B7898_ai ) {
            if ((gv_bossIsActive == true)) {
                break;
            }

            if ((libCOMI_gf_GameIsOver() == true)) {
                break;
            }

            if ((lv_loop <= 12)) {
                lv_loop2 = (lv_loop + 4);
            }
            else {
                lv_loop2 = (lv_loop - 12);
            }
            lv_amonSize = MaxI(FixedToInt(((IntToFixed(gv_sOLARITE_ENEMY) / gv_sOLARITE_GOAL) * 120.0)), 1);
            lv_playerSize = MaxI(FixedToInt(((IntToFixed(gv_sOLARITE_ALLY) / gv_sOLARITE_GOAL) * 120.0)), 1);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomLeft, 0, 0, (StringExternal("Param/Value/CDEA1E1D") + IntToText(lv_loop) + StringExternal("Param/Value/9E657E36") + IntToText(lv_amonSize) + StringExternal("Param/Value/19E1E733") + IntToText(lv_amonSize) + StringExternal("Param/Value/93F8646F")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_amongif = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomRight, 0, 0, (StringExternal("Param/Value/7978545A") + IntToText(lv_loop2) + StringExternal("Param/Value/22353E29") + IntToText(lv_playerSize) + StringExternal("Param/Value/18698ABC") + IntToText(lv_playerSize) + StringExternal("Param/Value/35367E1F")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_playersgif = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomLeft, 0, 0, (StringExternal("Param/Value/519B230B") + IntToText(gv_sOLARITE_ENEMY) + StringExternal("Param/Value/2079C2BE")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_amontext = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 120, c_anchorBottomRight, 0, 0, (StringExternal("Param/Value/498C9D1D") + IntToText(gv_sOLARITE_ALLY) + StringExternal("Param/Value/FE0CFA41")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_playerstext = DialogControlLastCreated();
            Wait(0.0, c_timeGame);
            Wait(0.0, c_timeGame);
            DialogControlDestroy(lv_amongif);
            DialogControlDestroy(lv_playersgif);
            DialogControlDestroy(lv_amontext);
            DialogControlDestroy(lv_playerstext);
        }
        if ((gv_bossIsActive == true)) {
            break;
        }

        if ((libCOMI_gf_GameIsOver() == true)) {
            break;
        }

    }
    lv_loop = 100;
    for ( ; ( (auto11CFEC66_ai >= 0 && lv_loop <= auto11CFEC66_ae) || (auto11CFEC66_ai < 0 && lv_loop >= auto11CFEC66_ae) ) ; lv_loop += auto11CFEC66_ai ) {
        DialogSetTransparency(DialogLastCreated(), lv_loop);
        Wait(0.0, c_timeGame);
    }
    DialogDestroy(DialogLastCreated());
    return true;
}

void gf_SolariteSpawnNode (point lp_point, int lp_amount) {
    // Variable Declarations
    int lv_loop;
    bool lv_found;
    int lv_index;

    // Automatic Variable Declarations
    int auto4E1CE309_ae;
    const int auto4E1CE309_ai = 1;
    int auto727D0A69_ae;
    const int auto727D0A69_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Solarite", 0, 0, lp_point);
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_AcidBurst_Bubbles", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 0.0, 400.0, 0.0);
    auto4E1CE309_ae = gv_lastSolariteNode;
    lv_index = 1;
    for ( ; ( (auto4E1CE309_ai >= 0 && lv_index <= auto4E1CE309_ae) || (auto4E1CE309_ai < 0 && lv_index >= auto4E1CE309_ae) ) ; lv_index += auto4E1CE309_ai ) {
        if ((gv_solariteNode[lv_index].lv_solariteNode == null)) {
            gv_solariteNode[lv_index].lv_solariteNode = UnitLastCreated();
            lv_found = true;
            break;
        }

    }
    if ((lv_found == false) && (gv_lastSolariteNode < 3000)) {
        gv_lastSolariteNode += 1;
        gv_solariteNode[gv_lastSolariteNode].lv_solariteNode = UnitLastCreated();
    }

    auto727D0A69_ae = MaxI(1, (lp_amount - 1));
    lv_loop = 1;
    for ( ; ( (auto727D0A69_ai >= 0 && lv_loop <= auto727D0A69_ae) || (auto727D0A69_ai < 0 && lv_loop >= auto727D0A69_ae) ) ; lv_loop += auto727D0A69_ai ) {
        UnitBehaviorAdd(UnitLastCreated(), "Solarite", UnitLastCreated(), 1);
        if (((lv_loop == 5) || (lv_loop == 10) || (lv_loop == 15) || (lv_loop == 20) || (lv_loop == 25) || (lv_loop == 30) || (lv_loop == 35) || (lv_loop == 40) || (lv_loop == 45) || (lv_loop == 50) || (lv_loop == 55) || (lv_loop == 60))) {
            Wait(0.0, c_timeGame);
        }

    }
}

void gf_SolariteAddtoNode (unit lp_solaritenode, int lp_amount) {
    // Variable Declarations
    int lv_loop;
    bool lv_found;
    int lv_index;

    // Automatic Variable Declarations
    int autoB28D616A_ae;
    const int autoB28D616A_ai = 1;

    // Variable Initialization

    // Implementation
    autoB28D616A_ae = MaxI(1, (lp_amount - 1));
    lv_loop = 1;
    for ( ; ( (autoB28D616A_ai >= 0 && lv_loop <= autoB28D616A_ae) || (autoB28D616A_ai < 0 && lv_loop >= autoB28D616A_ae) ) ; lv_loop += autoB28D616A_ai ) {
        if ((UnitBehaviorCount(lp_solaritenode, "Solarite") == 30)) {
            break;
        }

        UnitBehaviorAdd(lp_solaritenode, "Solarite", lp_solaritenode, 1);
        if (((lv_loop == 5) || (lv_loop == 10) || (lv_loop == 15) || (lv_loop == 20) || (lv_loop == 25) || (lv_loop == 30) || (lv_loop == 35) || (lv_loop == 40) || (lv_loop == 45))) {
            Wait(0.0, c_timeGame);
        }

    }
}

void gf_EscortSendTruck (int lp_pathIndex) {
    // Variable Declarations
    point lv_truckPosition;
    int lv_pointIndex;
    point lv_nextPathPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_tRUCK_STATE = ge_TruckState_Moving;
    ActorSend(libNtve_gf_MainActorofUnit(gv_escortTruck), "AnimBracketStop Work");
    while ((UnitIsAlive(gv_escortTruck) == true) && (libNtve_gf_UnitInRegion(gv_escortTruck, RegionCircle(PointFromName(("ConvoyCheckpoint_" + IntToString(lp_pathIndex))), 1.0)) == false)) {
        lv_nextPathPoint = null;
        lv_nextPathPoint = PointFromName(("Convoy" + IntToString(lp_pathIndex) + "_" + IntToString((lv_pointIndex + 1))));
        if ((lv_nextPathPoint != null)) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_escortTruck), lv_nextPathPoint) <= 0.4)) {
                lv_pointIndex += 1;
                lv_nextPathPoint = PointFromName(("Convoy" + IntToString(lp_pathIndex) + "_" + IntToString(lv_pointIndex)));
                if ((lv_nextPathPoint == null)) {
                    lv_nextPathPoint = PointFromName(("ConvoyCheckpoint_" + IntToString(lp_pathIndex)));
                }

            }

        }
        else {
            lv_nextPathPoint = PointFromName(("ConvoyCheckpoint_" + IntToString(lp_pathIndex)));
        }
        UnitIssueOrder(gv_escortTruck, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextPathPoint), c_orderQueueReplace);
        lv_truckPosition = UnitGetPosition(gv_escortTruck);
        Wait(0.1, c_timeGame);
    }
    if ((UnitIsAlive(gv_escortTruck) == false)) {
        gv_truckDeathPoint = lv_truckPosition;
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_escortTruck, 1));
        return ;
    }

    TriggerExecute(gt_EscortArrived, true, false);
}

void gf_EscortStartconvoycountdown (int lp_delay, text lp_text) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TimerStart(lv_timer, lp_delay, false, c_timeGame);
    TextTagCreate((lp_text + IntToText(FixedToInt(TimerGetRemaining(lv_timer))) + StringExternal("Param/Value/A17D0230")), 16, UnitGetPosition(gv_escortTruck), 3.5, true, false, PlayerGroupAll());
    UnitBehaviorAdd(gv_escortTruck, "ProgressBar", gv_escortTruck, 1);
    UnitBehaviorSetDuration(gv_escortTruck, "ProgressBar", TimerGetRemaining(lv_timer));
    TextTagAttachToUnit(TextTagLastCreated(), gv_escortTruck, 3.0);
    libHots_gf_StoreTextTagForUnit(gv_escortTruck, 1, TextTagLastCreated());
    while ((UnitIsAlive(gv_escortTruck) == true) && (TimerGetRemaining(lv_timer) > 0.0)) {
        TextTagSetText(TextTagLastCreated(), (lp_text + IntToText(FixedToInt(TimerGetRemaining(lv_timer))) + StringExternal("Param/Value/F1505317")));
        Wait(0.5, c_timeGame);
    }
    TextTagDestroy(TextTagLastCreated());
}

void gf_StoneTemplarAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    // Variable Declarations
    unitgroup lv_threatGroup;
    point lv_targetP;
    unit lv_targetU;
    int lv_targetPlayer;
    int lv_random;
    unit lv_pickedUnit;
    int lv_range;
    int lv_minScoreIter;
    order lv_currentOrder;
    int lv_delay;

    // Automatic Variable Declarations
    unitgroup auto42E92871_g;
    int auto42E92871_u;
    const int autoA69A181C_ae = 15;
    const int autoA69A181C_ai = 3;
    const int auto84759404_ae = 0;
    const int auto84759404_ai = -1;
    const int auto5284CE3A_ae = 15;
    const int auto5284CE3A_ai = 3;
    const int auto5A31E4E9_ae = 0;
    const int auto5A31E4E9_ai = -1;
    const int autoFCC32F24_ae = 15;
    const int autoFCC32F24_ai = 3;
    const int auto8D9FB33A_ae = 0;
    const int auto8D9FB33A_ai = -1;

    // Variable Initialization
    lv_threatGroup = UnitGroupEmpty();

    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_aiUnit, RegionFromId(10)) == false)) {
        TimerStart(gv_aIStoneTemplarStoneTemplarAttackCooldown, gv_aIStoneTemplarStoneTemplarAttackDelay, false, c_timeGame);
        libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_aiUnit), 5.0, PointFromId(578167175))));
    }

    UnitGroupAddUnitGroup(lv_threatGroup, UnitGroup(null, gv_p_USER1, RegionCircle(UnitGetPosition(lp_aiUnit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_threatGroup, UnitGroup(null, gv_p_USER2, RegionCircle(UnitGetPosition(lp_aiUnit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto42E92871_g = lv_threatGroup;
    auto42E92871_u = UnitGroupCount(auto42E92871_g, c_unitCountAll);
    for (;; auto42E92871_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(auto42E92871_g, auto42E92871_u);
        if (lv_pickedUnit == null) { break; }
        if (((UnitGetType(lv_pickedUnit) == "Observer") || (UnitGetType(lv_pickedUnit) == "Overseer") || (UnitGetType(lv_pickedUnit) == "HyperionAdvancedPointDefenseDrone"))) {
            UnitGroupRemove(lv_threatGroup, lv_pickedUnit);
        }

    }
    if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0)) {
        if ((TimerGetRemaining(gv_aIStoneTemplarStoneTemplarAttackCooldown) <= 0.0)) {
            TimerStart(gv_aIStoneTemplarStoneTemplarAttackCooldown, gv_aIStoneTemplarStoneTemplarAttackDelay, false, c_timeGame);
            lv_range = 1;
            for ( ; ( (autoA69A181C_ai >= 0 && lv_range <= autoA69A181C_ae) || (autoA69A181C_ai < 0 && lv_range >= autoA69A181C_ae) ) ; lv_range += autoA69A181C_ai ) {
                lv_minScoreIter = 4;
                for ( ; ( (auto84759404_ai >= 0 && lv_minScoreIter <= auto84759404_ae) || (auto84759404_ai < 0 && lv_minScoreIter >= auto84759404_ae) ) ; lv_minScoreIter += auto84759404_ai ) {
                    lv_targetP = AIBestTargetPoint(lv_threatGroup, 1, 50, lv_minScoreIter, 3.0, UnitGetPosition(lp_aiUnit), lv_range, c_unitAttributeNone);
                    if ((lv_targetP != null)) {
                        break;
                    }

                }
                if ((lv_targetP != null)) {
                    break;
                }

            }
            lv_random = RandomInt(1, 10);
            lv_targetU = UnitGroupClosestToPoint(UnitGroupFilterRegion(lv_threatGroup, RegionCircle(lv_targetP, 3.0), 0), UnitGetPosition(lp_aiUnit));
            if ((UnitGroupCount(UnitGroup("StoneInterceptor", gv_p_QUADAN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 12) && (lv_random <= 5)) {
                libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("SpawnStoneInterceptor", 0), lv_targetP));
            }
            else {
                lv_random = RandomInt(6, 10);
                if ((lv_random <= 9)) {
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneTemplarPsiOrb", 0), lv_targetP));
                    Wait(1.5, c_timeAI);
                    TimerStart(gv_aIStoneTemplarStoneTemplarAttackCooldown, gv_aIStoneTemplarStoneTemplarAttackDelay, false, c_timeGame);
                    lv_range = 1;
                    for ( ; ( (auto5284CE3A_ai >= 0 && lv_range <= auto5284CE3A_ae) || (auto5284CE3A_ai < 0 && lv_range >= auto5284CE3A_ae) ) ; lv_range += auto5284CE3A_ai ) {
                        lv_minScoreIter = 4;
                        for ( ; ( (auto5A31E4E9_ai >= 0 && lv_minScoreIter <= auto5A31E4E9_ae) || (auto5A31E4E9_ai < 0 && lv_minScoreIter >= auto5A31E4E9_ae) ) ; lv_minScoreIter += auto5A31E4E9_ai ) {
                            lv_targetP = AIBestTargetPoint(lv_threatGroup, 1, 50, lv_minScoreIter, 3.0, UnitGetPosition(lp_aiUnit), lv_range, c_unitAttributeNone);
                            if ((lv_targetP != null)) {
                                break;
                            }

                        }
                        if ((lv_targetP != null)) {
                            break;
                        }

                    }
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneTemplarPsiOrb", 0), lv_targetP));
                    Wait(1.5, c_timeAI);
                    TimerStart(gv_aIStoneTemplarStoneTemplarAttackCooldown, gv_aIStoneTemplarStoneTemplarAttackDelay, false, c_timeGame);
                    lv_range = 1;
                    for ( ; ( (autoFCC32F24_ai >= 0 && lv_range <= autoFCC32F24_ae) || (autoFCC32F24_ai < 0 && lv_range >= autoFCC32F24_ae) ) ; lv_range += autoFCC32F24_ai ) {
                        lv_minScoreIter = 4;
                        for ( ; ( (auto8D9FB33A_ai >= 0 && lv_minScoreIter <= auto8D9FB33A_ae) || (auto8D9FB33A_ai < 0 && lv_minScoreIter >= auto8D9FB33A_ae) ) ; lv_minScoreIter += auto8D9FB33A_ai ) {
                            lv_targetP = AIBestTargetPoint(lv_threatGroup, 1, 50, lv_minScoreIter, 3.0, UnitGetPosition(lp_aiUnit), lv_range, c_unitAttributeNone);
                            if ((lv_targetP != null)) {
                                break;
                            }

                        }
                        if ((lv_targetP != null)) {
                            break;
                        }

                    }
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneTemplarPsiOrb", 0), lv_targetP));
                }
                else {
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("DelayedPsionicStorm", 0), lv_targetP));
                }
            }
        }

    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init01CommandersReady);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Commanders Ready
//--------------------------------------------------------------------------------------------------
bool gt_Init01CommandersReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_Init09AI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01CommandersReady_Init () {
    gt_Init01CommandersReady = TriggerCreate("gt_Init01CommandersReady_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_p_ARCHEOLOGISTS, "SCVRemastered", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_p_ENEMY_SPECIAL, "ProbeBlizzcon17", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_p_ENEMY_SPECIAL, "SCVBlizzcon17", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(gv_p_ENEMY_SPECIAL, "DroneBlizzcon17", true);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p_ENEMY_SPECIAL, "MiragePhaseArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p_ENEMY_SPECIAL, "TychusFirebatShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_p_ENEMY_SPECIAL, "CommanderLevel", 15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(UnitFromId(1876950852), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1876950852), true);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(1988035339), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1988035339), true);
    UnitSetState(UnitFromId(1988035339), c_unitStateSelectable, false);
    UnitIssueOrder(UnitFromId(1876950852), OrderTargetingUnit(AbilityCommand("SoulChannel", 0), UnitFromId(1988035339)), c_orderQueueReplace);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_stoneTemplar, null, StringExternal("Param/Value/9FAC8F0E"), null);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(1577868807), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1577868807), true);
    UnitSetState(UnitFromId(1577868807), c_unitStateSelectable, false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1577868807), "Destroy");
    libNtve_gf_MakeUnitUncommandable(UnitFromId(2050364610), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(2050364610), true);
    UnitSetState(UnitFromId(2050364610), c_unitStateSelectable, false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(2050364610), "Destroy");
    libNtve_gf_MakeUnitUncommandable(UnitFromId(848411715), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(848411715), true);
    UnitSetState(UnitFromId(848411715), c_unitStateSelectable, false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(848411715), "Destroy");
    libNtve_gf_MakeUnitUncommandable(UnitFromId(1045270873), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1045270873), true);
    UnitSetState(UnitFromId(1045270873), c_unitStateSelectable, false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1045270873), "Destroy");
    libNtve_gf_MakeUnitUncommandable(UnitFromId(1813176132), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1813176132), true);
    UnitSetState(UnitFromId(1813176132), c_unitStateSelectable, false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1813176132), "Destroy");
    libCOMI_gf_SetUnitInfoTextCampaign(UnitFromId(218924059), null, StringExternal("Param/Value/E3A62952"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    ActorSend(ActorFromDoodad(DoodadFromId(160540699)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(738698436)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1968319563)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(754125744)), "SetOpacity");
    libNtve_gf_MakeUnitUncommandable(UnitFromId(1369719536), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1369719536), true);
    UnitSetState(UnitFromId(1369719536), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1369719536), c_unitStateHighlightable, false);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(106), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    int lv_bonusExtraLife;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridMajor = "HybridBehemoth";
    gv_hybridMinor = "HybridDestroyer";
    gv_truckLife = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2500, 2500, 2500, 2500, 0, 0);
    lv_bonusExtraLife = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 7000, 8000, 9000, 10000, 0, 0);
    UnitSetPropertyFixed(gv_stoneTemplar, c_unitPropLifeMax, lv_bonusExtraLife);
    UnitSetPropertyFixed(gv_stoneTemplar, c_unitPropLifePercent, 100.0);
    gv_sOLARITE_GOAL = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 500, 600, 700, 750, 0, 0);
    gv_sOLARITE_WARNINGS[1] = 200;
    gv_sOLARITE_WARNINGS[2] = 400;
    gv_sOLARITE_WARNINGS[3] = 600;
    gv_cHECKPOINTS_SOLARITE[1] = 60;
    gv_cHECKPOINTS_DELAY[1] = 60;
    gv_cHECKPOINTS_SOLARITE[2] = 190;
    gv_cHECKPOINTS_DELAY[2] = 60;
    gv_cHECKPOINTS_SOLARITE[3] = 380;
    gv_cHECKPOINTS_DELAY[3] = 60;
    gv_cHECKPOINTS_SOLARITE[4] = 630;
    gv_cHECKPOINTS_DELAY[4] = 60;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 09 AI
//--------------------------------------------------------------------------------------------------
bool gt_Init09AI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_aiOption;
    int lv_missionMechanicPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_p_QUADAN);
    cai_startall();
    cai_runall();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init09AI_Init () {
    gt_Init09AI = TriggerCreate("gt_Init09AI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Transmission
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_p_USER1, gv_p_USER2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingTransmission_Init () {
    gt_EnemyAttackingTransmission = TriggerCreate("gt_EnemyAttackingTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harass Wave Transmission
//--------------------------------------------------------------------------------------------------
bool gt_HarassWaveTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(5.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("DefendReminder", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarassWaveTransmission_Init () {
    gt_HarassWaveTransmission = TriggerCreate("gt_HarassWaveTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 1
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    int lv_randomPointInt;

    // Automatic Variable Declarations
    const int auto59A42A1B_n = 2;
    int auto59A42A1B_i;
    unitgroup auto2A06463B_g;
    int auto2A06463B_u;
    unit auto2A06463B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_escortTrucks, gv_escortTruck);
    Wait(25.0, c_timeGame);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    TriggerExecute(gt_HarassWaveTransmission, true, false);
    for (auto59A42A1B_i = 1; auto59A42A1B_i <= auto59A42A1B_n; auto59A42A1B_i += 1) {
        auto2A06463B_g = gv_escortTrucks;
        auto2A06463B_u = UnitGroupCount(auto2A06463B_g, c_unitCountAll);
        for (;; auto2A06463B_u -= 1) {
            auto2A06463B_var = UnitGroupUnitFromEnd(auto2A06463B_g, auto2A06463B_u);
            if (auto2A06463B_var == null) { break; }
            lv_attackWaveSpawnLocation = gf_DropLocation(1, 1, 2);
            AIAttackWaveSetTargetUnit(gv_p_ENEMY1, auto2A06463B_var);
            AIAttackWaveSetTargetUnit(gv_p_ENEMY2, auto2A06463B_var);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
            libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        }
        Wait(27.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle1_Init () {
    gt_ObjectiveWaveCycle1 = TriggerCreate("gt_ObjectiveWaveCycle1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    int lv_randomPointInt;
    unit lv_attackTarget;
    int lv_attackWaveIndex;

    // Automatic Variable Declarations
    const int auto296D8FF8_ae = 4;
    const int auto296D8FF8_ai = 1;

    // Variable Initialization
    lv_attackTarget = gv_escortTruck;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(15.0, c_timeGame);
    TriggerExecute(gt_HarassWaveTransmission, true, false);
    lv_attackWaveIndex = 1;
    for ( ; ( (auto296D8FF8_ai >= 0 && lv_attackWaveIndex <= auto296D8FF8_ae) || (auto296D8FF8_ai < 0 && lv_attackWaveIndex >= auto296D8FF8_ae) ) ; lv_attackWaveIndex += auto296D8FF8_ai ) {
        if ((lv_attackWaveIndex < 2)) {
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
            lv_attackWaveSpawnLocation = gf_DropLocation(2, 1, 2);
        }
        else {
            if ((lv_attackWaveIndex == 4)) {
            }
            else {
                lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
            }
            lv_attackWaveSpawnLocation = gf_DropLocation(2, 3, 4);
        }
        AIAttackWaveSetTargetUnit(gv_p_ENEMY1, lv_attackTarget);
        AIAttackWaveSetTargetUnit(gv_p_ENEMY2, lv_attackTarget);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        Wait(23.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle2_Init () {
    gt_ObjectiveWaveCycle2 = TriggerCreate("gt_ObjectiveWaveCycle2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 3
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    int lv_randomPointInt;
    unit lv_attackTarget;
    int lv_attackWaveIndex;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int autoF3C8978E_ae = 6;
    const int autoF3C8978E_ai = 1;

    // Variable Initialization
    lv_attackTarget = gv_escortTruck;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    TriggerExecute(gt_HarassWaveTransmission, true, false);
    lv_attackWaveIndex = 1;
    for ( ; ( (autoF3C8978E_ai >= 0 && lv_attackWaveIndex <= autoF3C8978E_ae) || (autoF3C8978E_ai < 0 && lv_attackWaveIndex >= autoF3C8978E_ae) ) ; lv_attackWaveIndex += autoF3C8978E_ai ) {
        if ((lv_attackWaveIndex < 2)) {
            lv_attackWaveSpawnLocation = gf_DropLocation(3, 1, 3);
        }
        else {
            if ((lv_attackWaveIndex != 6)) {
                lv_attackWaveSpawnLocation = gf_DropLocation(3, 4, 6);
            }
            else {
                lv_attackWaveSpawnLocation = gf_DropLocation(3, 7, 7);
            }
        }
        AIAttackWaveSetTargetUnit(gv_p_ENEMY1, lv_attackTarget);
        AIAttackWaveSetTargetUnit(gv_p_ENEMY2, lv_attackTarget);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        Wait(25.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle3_Init () {
    gt_ObjectiveWaveCycle3 = TriggerCreate("gt_ObjectiveWaveCycle3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 4
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    int lv_randomPointInt;
    unit lv_attackTarget;
    int lv_attackWaveIndex;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    unitgroup auto328CB66B_g;
    int auto328CB66B_u;
    unit auto328CB66B_var;
    const int autoE95AD57E_ae = 6;
    const int autoE95AD57E_ai = 1;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(18.0, c_timeGame);
    auto328CB66B_g = UnitGroup("ArchaeologistsTruck", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto328CB66B_u = UnitGroupCount(auto328CB66B_g, c_unitCountAll);
    for (;; auto328CB66B_u -= 1) {
        auto328CB66B_var = UnitGroupUnitFromEnd(auto328CB66B_g, auto328CB66B_u);
        if (auto328CB66B_var == null) { break; }
        lv_attackTarget = auto328CB66B_var;
    }
    TriggerExecute(gt_HarassWaveTransmission, true, false);
    lv_attackWaveIndex = 1;
    for ( ; ( (autoE95AD57E_ai >= 0 && lv_attackWaveIndex <= autoE95AD57E_ae) || (autoE95AD57E_ai < 0 && lv_attackWaveIndex >= autoE95AD57E_ae) ) ; lv_attackWaveIndex += autoE95AD57E_ai ) {
        lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
        lv_attackWaveSpawnLocation = gf_DropLocation(4, 1, 5);
        if ((lv_attackWaveIndex < 5)) {
            lv_attackWaveSpawnLocation = gf_DropLocation(4, 5, 7);
            if ((lv_attackWaveSpawnLocation == PointFromId(2070333544))) {
                lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
            }

        }

        AIAttackWaveSetTargetUnit(gv_p_ENEMY1, lv_attackTarget);
        AIAttackWaveSetTargetUnit(gv_p_ENEMY2, lv_attackTarget);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        if ((lv_attackWaveIndex == 3)) {
            continue;
        }
        else {
            Wait(30.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle4_Init () {
    gt_ObjectiveWaveCycle4 = TriggerCreate("gt_ObjectiveWaveCycle4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Wave Cycle 5
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWaveCycle5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    int lv_randomPointInt;
    unit lv_attackTarget;
    int lv_attackWaveIndex;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    unitgroup autoDFD39575_g;
    int autoDFD39575_u;
    unit autoDFD39575_var;
    const int auto2A84F6BA_ae = 6;
    const int auto2A84F6BA_ai = 1;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoDFD39575_g = UnitGroup("ArchaeologistsTruck", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDFD39575_u = UnitGroupCount(autoDFD39575_g, c_unitCountAll);
    for (;; autoDFD39575_u -= 1) {
        autoDFD39575_var = UnitGroupUnitFromEnd(autoDFD39575_g, autoDFD39575_u);
        if (autoDFD39575_var == null) { break; }
        lv_attackTarget = autoDFD39575_var;
    }
    TriggerExecute(gt_HarassWaveTransmission, true, false);
    lv_attackWaveIndex = 1;
    for ( ; ( (auto2A84F6BA_ai >= 0 && lv_attackWaveIndex <= auto2A84F6BA_ae) || (auto2A84F6BA_ai < 0 && lv_attackWaveIndex >= auto2A84F6BA_ae) ) ; lv_attackWaveIndex += auto2A84F6BA_ai ) {
        if ((lv_attackWaveIndex <= 4)) {
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
            lv_attackWaveSpawnLocation = gf_DropLocation(5, 1, 7);
        }
        else {
            lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
            lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
            lv_attackWaveSpawnLocation = gf_DropLocation(5, 1, 7);
        }
        AIAttackWaveSetTargetUnit(gv_p_ENEMY1, lv_attackTarget);
        AIAttackWaveSetTargetUnit(gv_p_ENEMY2, lv_attackTarget);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        if ((lv_attackWaveIndex <= 4)) {
            Wait(17.0, c_timeGame);
        }
        else {
            Wait(23.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWaveCycle5_Init () {
    gt_ObjectiveWaveCycle5 = TriggerCreate("gt_ObjectiveWaveCycle5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_p_ENEMY1, PlayerStartLocation(gv_p_USER1));
    AIAttackWaveSetTargetPoint(gv_p_ENEMY2, PlayerStartLocation(gv_p_USER2));
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWaveSpawnLocation = PointFromId(550364268);
    TriggerExecute(gt_EnemyAttackingTransmission, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    if ((RandomInt(1, 2) == 1)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1842224671), false);
    }
    else {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1553002852), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_p_ENEMY1, PlayerStartLocation(gv_p_USER1));
    AIAttackWaveSetTargetPoint(gv_p_ENEMY2, PlayerStartLocation(gv_p_USER2));
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_attackWaveSpawnLocation = PointFromId(2057028916);
    TriggerExecute(gt_EnemyAttackingTransmission, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    if ((RandomInt(1, 2) == 1)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1842224671), false);
    }
    else {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1553002852), false);
    }
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03 - Expo Attack
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03ExpoAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    int lv_numberOfUnitsExpoLeft;
    int lv_numberOfUnitsExpoRight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_p_ENEMY1, PlayerStartLocation(gv_p_USER1));
    AIAttackWaveSetTargetPoint(gv_p_ENEMY2, PlayerStartLocation(gv_p_USER2));
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_attackWaveSpawnLocation = PointFromId(2057028916);
    lv_numberOfUnitsExpoLeft = UnitGroupCount(UnitGroupAlliance(gv_p_ENEMY1, c_unitAllianceEnemy, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_numberOfUnitsExpoRight = UnitGroupCount(UnitGroupAlliance(gv_p_ENEMY1, c_unitAllianceEnemy, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    TriggerExecute(gt_EnemyAttackingTransmission, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    if ((lv_numberOfUnitsExpoLeft == 0) && (lv_numberOfUnitsExpoRight == 0)) {
        if ((RandomInt(1, 2) == 1)) {
            libCOMI_gf_AddAttackForceWaypoint(PointFromId(1219032820), false);
        }
        else {
            libCOMI_gf_AddAttackForceWaypoint(PointFromId(1166528453), false);
        }
    }
    else if ((lv_numberOfUnitsExpoLeft > lv_numberOfUnitsExpoRight)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1219032820), false);
    }
    else if (true) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1166528453), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03ExpoAttack_Init () {
    gt_AttackWave03ExpoAttack = TriggerCreate("gt_AttackWave03ExpoAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04 - Opposite Expo Attack
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04OppositeExpoAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;
    int lv_numberOfUnitsExpoLeft;
    int lv_numberOfUnitsExpoRight;

    // Automatic Variable Declarations
    const int auto5D0425DE_ae = gv_p_ENEMY2;
    int auto5D0425DE_var;

    // Variable Initialization
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_p_ENEMY1, PlayerStartLocation(gv_p_USER1));
    AIAttackWaveSetTargetPoint(gv_p_ENEMY2, PlayerStartLocation(gv_p_USER2));
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_attackWaveSpawnLocation = PointFromId(550364268);
    lv_numberOfUnitsExpoLeft = UnitGroupCount(UnitGroupAlliance(gv_p_ENEMY1, c_unitAllianceEnemy, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_numberOfUnitsExpoRight = UnitGroupCount(UnitGroupAlliance(gv_p_ENEMY1, c_unitAllianceEnemy, RegionFromId(58), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    TriggerExecute(gt_EnemyAttackingTransmission, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    auto5D0425DE_var = gv_p_ENEMY1;
    for ( ; auto5D0425DE_var <= auto5D0425DE_ae; auto5D0425DE_var += 1 ) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto5D0425DE_var), 1, 1, 1, 2, 0, 0), gv_hybridMinor, 0, auto5D0425DE_var, lv_attackWaveSpawnLocation, 270.0);
        UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto5D0425DE_var), 0, 0, 1, 1, 0, 0), gv_hybridMajor, 0, auto5D0425DE_var, lv_attackWaveSpawnLocation, 270.0);
        UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    }
    if ((RandomInt(1, 2) == 1)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1219032820), false);
    }
    else {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1166528453), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04OppositeExpoAttack_Init () {
    gt_AttackWave04OppositeExpoAttack = TriggerCreate("gt_AttackWave04OppositeExpoAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_p_ENEMY1, PlayerStartLocation(gv_p_USER1));
    AIAttackWaveSetTargetPoint(gv_p_ENEMY2, PlayerStartLocation(gv_p_USER2));
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackWaveSpawnLocation = PointFromId(2057028916);
    TriggerExecute(gt_EnemyAttackingTransmission, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    const int auto3ACA86A5_ae = gv_p_ENEMY2;
    int auto3ACA86A5_var;

    // Variable Initialization
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_p_ENEMY1, PointFromId(1842224671));
    AIAttackWaveSetTargetPoint(gv_p_ENEMY2, PointFromId(1553002852));
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    lv_attackWaveSpawnLocation = PointFromId(2057028916);
    TriggerExecute(gt_EnemyAttackingTransmission, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1553002852), false);
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    auto3ACA86A5_var = gv_p_ENEMY1;
    for ( ; auto3ACA86A5_var <= auto3ACA86A5_ae; auto3ACA86A5_var += 1 ) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto3ACA86A5_var), 2, 2, 2, 2, 0, 0), gv_hybridMinor, 0, auto3ACA86A5_var, lv_attackWaveSpawnLocation, 270.0);
        UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto3ACA86A5_var), 0, 0, 1, 1, 0, 0), gv_hybridMajor, 0, auto3ACA86A5_var, lv_attackWaveSpawnLocation, 270.0);
        UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Final
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveFinal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmmount;
    int lv_techLevel;
    point lv_attackWaveSpawnLocation;
    unitgroup lv_attackGroup;
    unit lv_attackTarget;

    // Automatic Variable Declarations
    unitgroup auto2692988A_g;
    int auto2692988A_u;
    unit auto2692988A_var;
    const int auto3AD28120_ae = gv_p_ENEMY2;
    int auto3AD28120_var;

    // Variable Initialization
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2692988A_g = UnitGroup("ArchaeologistsTruck", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2692988A_u = UnitGroupCount(auto2692988A_g, c_unitCountAll);
    for (;; auto2692988A_u -= 1) {
        auto2692988A_var = UnitGroupUnitFromEnd(auto2692988A_g, auto2692988A_u);
        if (auto2692988A_var == null) { break; }
        lv_attackTarget = auto2692988A_var;
    }
    AIAttackWaveSetTargetPoint(gv_p_ENEMY1, PointFromId(1842224671));
    AIAttackWaveSetTargetPoint(gv_p_ENEMY2, PointFromId(1553002852));
    lv_resourceAmmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_attackWaveSpawnLocation = PointFromId(371201132);
    TriggerExecute(gt_EnemyAttackingTransmission, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_p_ENEMY1, gv_p_ENEMY2, lv_resourceAmmount, lv_techLevel, lv_attackWaveSpawnLocation, true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1553002852), false);
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    auto3AD28120_var = gv_p_ENEMY1;
    for ( ; auto3AD28120_var <= auto3AD28120_ae; auto3AD28120_var += 1 ) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto3AD28120_var), 0, 1, 1, 1, 0, 0), "HybridReaver", 0, auto3AD28120_var, lv_attackWaveSpawnLocation, 270.0);
        UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(auto3AD28120_var), 0, 0, 1, 1, 0, 0), "HybridDominatorVoid", 0, auto3AD28120_var, lv_attackWaveSpawnLocation, 270.0);
        UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveFinal_Init () {
    gt_AttackWaveFinal = TriggerCreate("gt_AttackWaveFinal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Gather Solarite Q
//--------------------------------------------------------------------------------------------------
bool gt_SolariteGatherSolariteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(gv_p_USER1, RegionFromId(1), 10.0, false);
    VisRevealArea(gv_p_USER2, RegionFromId(1), 10.0, false);
    TriggerExecute(gt_SolariteCreateTutorialNodes, true, false);
    gf_CreateSolariteProgressBar();
    TriggerExecute(gt_ObjectiveGatherSolariteCreate, true, false);
    TriggerEnable(gt_SolariteAmountChanged, true);
    TriggerEnable(gt_DefeatAmonGatheredSolarite, true);
    TriggerEnable(gt_SolaritePingCheck, true);
    TriggerExecute(gt_SolariteExplanation1Transmission, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_SolariteExplanation2Transmission, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteGatherSolariteQ_Init () {
    gt_SolariteGatherSolariteQ = TriggerCreate("gt_SolariteGatherSolariteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Enemy Gatherers Q
//--------------------------------------------------------------------------------------------------
bool gt_SolariteEnemyGatherersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Createenemygatherers, true, false);
    TriggerExecute(gt_EnemyGatherersTransmission, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteEnemyGatherersQ_Init () {
    gt_SolariteEnemyGatherersQ = TriggerCreate("gt_SolariteEnemyGatherersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Ally Gatherers Q
//--------------------------------------------------------------------------------------------------
bool gt_SolariteAllyGatherersQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Createallygatherers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteAllyGatherersQ_Init () {
    gt_SolariteAllyGatherersQ = TriggerCreate("gt_SolariteAllyGatherersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Pumps
//--------------------------------------------------------------------------------------------------
bool gt_SolaritePumps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minimum;
    int lv_amount;
    int lv_random;
    int lv_index;
    int lv_chance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minimum = 5;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerActiveCount(TriggerGetCurrent()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_generatorsActive == 0)) {
            gf_GenerateSolarite(ge_GeneratorType_Pump, 0, 1);
            Wait(15.0, c_timeGame);
        }

        if ((gv_generatorsActive == 1)) {
            gf_GenerateSolarite(ge_GeneratorType_Pump, 0, 1);
            Wait(19.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Pump, 0, 2);
            Wait(17.0, c_timeGame);
        }

        if ((gv_generatorsActive == 2)) {
            gf_GenerateSolarite(ge_GeneratorType_Pump, 0, 4);
            Wait(15.0, c_timeGame);
        }

        if ((gv_generatorsActive == 3)) {
            gf_GenerateSolarite(ge_GeneratorType_Pump, 0, 2);
            Wait(16.0, c_timeGame);
        }

        if ((gv_generatorsActive == 4)) {
            gf_GenerateSolarite(ge_GeneratorType_Pump, 0, 2);
            Wait(18.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Pump, 0, 3);
            Wait(17.0, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolaritePumps_Init () {
    gt_SolaritePumps = TriggerCreate("gt_SolaritePumps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Cracks
//--------------------------------------------------------------------------------------------------
bool gt_SolariteCracks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_region;
    int lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        Wait(20.0, c_timeGame);
        while (true) {
            if ((gv_generatorsActive == 0)) {
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 1);
                Wait(32.0, c_timeGame);
            }

            if ((gv_generatorsActive == 1)) {
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 1);
                Wait(30.0, c_timeGame);
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 3);
                Wait(26.0, c_timeGame);
            }

            if ((gv_generatorsActive == 2)) {
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 3);
                Wait(20.0, c_timeGame);
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 7);
                Wait(24.0, c_timeGame);
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 6);
                Wait(20.0, c_timeGame);
            }

            if ((gv_generatorsActive == 3)) {
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 5);
                Wait(20.0, c_timeGame);
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 4);
                Wait(22.0, c_timeGame);
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 2);
                Wait(25.0, c_timeGame);
            }

            if ((gv_generatorsActive == 4)) {
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 4);
                Wait(25.0, c_timeGame);
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 5);
                Wait(25.0, c_timeGame);
                gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 2);
                Wait(30.0, c_timeGame);
            }

        }
    }
    else {
        while (true) {
            Wait(RandomFixed(5.0, 30.0), c_timeGame);
            lv_amount = RandomInt(5, 15);
            lv_region = RandomInt(1, 7);
            gf_GenerateSolarite(ge_GeneratorType_Crack, lv_amount, lv_region);
            TextExpressionSetToken("Param/Expression/BC8698AA", "A", IntToText(lv_amount));
            TextExpressionSetToken("Param/Expression/BC8698AA", "B", IntToText(lv_region));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/BC8698AA"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteCracks_Init () {
    gt_SolariteCracks = TriggerCreate("gt_SolariteCracks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Cracks Old
//--------------------------------------------------------------------------------------------------
bool gt_SolariteCracksOld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minimum;
    int lv_amount;
    int lv_random;
    int lv_index;
    int lv_chance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minimum = 5;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerActiveCount(TriggerGetCurrent()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(20.0, c_timeGame);
    while (true) {
        if ((gv_generatorsActive == 0)) {
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 1);
            Wait(32.0, c_timeGame);
        }

        if ((gv_generatorsActive == 1)) {
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 1);
            Wait(30.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 3);
            Wait(26.0, c_timeGame);
        }

        if ((gv_generatorsActive == 2)) {
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 3);
            Wait(20.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 7);
            Wait(24.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 6);
            Wait(20.0, c_timeGame);
        }

        if ((gv_generatorsActive == 3)) {
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 5);
            Wait(20.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 4);
            Wait(22.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 2);
            Wait(25.0, c_timeGame);
        }

        if ((gv_generatorsActive == 4)) {
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 4);
            Wait(25.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 5);
            Wait(25.0, c_timeGame);
            gf_GenerateSolarite(ge_GeneratorType_Crack, 0, 2);
            Wait(30.0, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteCracksOld_Init () {
    gt_SolariteCracksOld = TriggerCreate("gt_SolariteCracksOld_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite Explanation 1 Transmission
//--------------------------------------------------------------------------------------------------
bool gt_SolariteExplanation1Transmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Ramsey(SoundLink("Objective1", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteExplanation1Transmission_Init () {
    gt_SolariteExplanation1Transmission = TriggerCreate("gt_SolariteExplanation1Transmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite Explanation 2 Transmission
//--------------------------------------------------------------------------------------------------
bool gt_SolariteExplanation2Transmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Ramsey(SoundLink("Objective2", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteExplanation2Transmission_Init () {
    gt_SolariteExplanation2Transmission = TriggerCreate("gt_SolariteExplanation2Transmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Gatherers Transmission
//--------------------------------------------------------------------------------------------------
bool gt_EnemyGatherersTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Ramsey(SoundLink("EnemyGathers", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyGatherersTransmission_Init () {
    gt_EnemyGatherersTransmission = TriggerCreate("gt_EnemyGatherersTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Players 75%
//--------------------------------------------------------------------------------------------------
bool gt_SolaritePlayers75_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_sOLARITE_ALLY >= gv_sOLARITE_WARNINGS[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("75Per", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolaritePlayers75_Init () {
    gt_SolaritePlayers75 = TriggerCreate("gt_SolaritePlayers75_Func");
    TriggerAddEventGeneric(gt_SolaritePlayers75, "Ally Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Players 50%
//--------------------------------------------------------------------------------------------------
bool gt_SolaritePlayers50_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_sOLARITE_ALLY >= gv_sOLARITE_WARNINGS[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("50Per", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolaritePlayers50_Init () {
    gt_SolaritePlayers50 = TriggerCreate("gt_SolaritePlayers50_Func");
    TriggerAddEventGeneric(gt_SolaritePlayers50, "Ally Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Players 25%
//--------------------------------------------------------------------------------------------------
bool gt_SolaritePlayers25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_sOLARITE_ALLY >= gv_sOLARITE_WARNINGS[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("25Per", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolaritePlayers25_Init () {
    gt_SolaritePlayers25 = TriggerCreate("gt_SolaritePlayers25_Func");
    TriggerAddEventGeneric(gt_SolaritePlayers25, "Ally Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Amon 75%
//--------------------------------------------------------------------------------------------------
bool gt_SolariteAmon75_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_sOLARITE_ENEMY >= gv_sOLARITE_WARNINGS[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("Amon75Per", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteAmon75_Init () {
    gt_SolariteAmon75 = TriggerCreate("gt_SolariteAmon75_Func");
    TriggerAddEventGeneric(gt_SolariteAmon75, "Enemy Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Amon 50%
//--------------------------------------------------------------------------------------------------
bool gt_SolariteAmon50_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_sOLARITE_ENEMY >= gv_sOLARITE_WARNINGS[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("Amon50Per", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteAmon50_Init () {
    gt_SolariteAmon50 = TriggerCreate("gt_SolariteAmon50_Func");
    TriggerAddEventGeneric(gt_SolariteAmon50, "Enemy Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Amon 25%
//--------------------------------------------------------------------------------------------------
bool gt_SolariteAmon25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_sOLARITE_ENEMY >= gv_sOLARITE_WARNINGS[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("Amon25Per", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteAmon25_Init () {
    gt_SolariteAmon25 = TriggerCreate("gt_SolariteAmon25_Func");
    TriggerAddEventGeneric(gt_SolariteAmon25, "Enemy Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapObjectInteract
//--------------------------------------------------------------------------------------------------
bool gt_MapObjectInteract_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitTargetUnit()) == "Solarite")) {
        if ((UnitAbilityExists(EventUnit(), "GatherSolarite") == false)) {
            UnitAbilityAdd(EventUnit(), "GatherSolarite");
            UnitAbilityAdd(EventUnit(), "ReturnSolarite");
            UnitAbilityAdd(EventUnit(), "ReturnSolariteDummy");
        }

        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("GatherSolarite", 0), EventUnitTargetUnit()), c_orderQueueAddToEnd);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapObjectInteract_Init () {
    gt_MapObjectInteract = TriggerCreate("gt_MapObjectInteract_Func");
    TriggerAddEventUnitAbility(gt_MapObjectInteract, null, AbilityCommand("MapObjectInteract", 0), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(gt_MapObjectInteract, null, AbilityCommand("MapObjectInteract", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather Solarite - Store unit gathering solarite
//--------------------------------------------------------------------------------------------------
bool gt_GatherSolariteStoreunitgatheringsolarite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_solariteIndex;

    // Automatic Variable Declarations
    int auto5659C38B_ae;
    const int auto5659C38B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5659C38B_ae = gv_lastSolariteNode;
    lv_solariteIndex = 1;
    for ( ; ( (auto5659C38B_ai >= 0 && lv_solariteIndex <= auto5659C38B_ae) || (auto5659C38B_ai < 0 && lv_solariteIndex >= auto5659C38B_ae) ) ; lv_solariteIndex += auto5659C38B_ai ) {
        if ((UnitGroupHasUnit(gv_solariteNode[lv_solariteIndex].lv_solariteGatherers, EventUnit()) == true) && (gv_solariteNode[lv_solariteIndex].lv_solariteNode != OrderGetTargetUnit(EventUnitOrder()))) {
            UnitGroupRemove(gv_solariteNode[lv_solariteIndex].lv_solariteGatherers, EventUnit());
            break;
        }

        if ((UnitGroupHasUnit(gv_solariteNode[lv_solariteIndex].lv_solariteGatherers, EventUnit()) == false) && (gv_solariteNode[lv_solariteIndex].lv_solariteNode == OrderGetTargetUnit(EventUnitOrder()))) {
            UnitGroupAdd(gv_solariteNode[lv_solariteIndex].lv_solariteGatherers, EventUnit());
            UnitGroupAdd(gv_solariteGatherer, EventUnit());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatherSolariteStoreunitgatheringsolarite_Init () {
    gt_GatherSolariteStoreunitgatheringsolarite = TriggerCreate("gt_GatherSolariteStoreunitgatheringsolarite_Func");
    TriggerAddEventUnitOrder(gt_GatherSolariteStoreunitgatheringsolarite, null, AbilityCommand("GatherSolarite", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather Solarite - Remove from unit group if stops
//--------------------------------------------------------------------------------------------------
bool gt_GatherSolariteRemovefromunitgroupifstops_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_solariteIndex;

    // Automatic Variable Declarations
    int auto71230EE4_ae;
    const int auto71230EE4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagWorker) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_solariteGatherer, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto71230EE4_ae = gv_lastSolariteNode;
    lv_solariteIndex = 1;
    for ( ; ( (auto71230EE4_ai >= 0 && lv_solariteIndex <= auto71230EE4_ae) || (auto71230EE4_ai < 0 && lv_solariteIndex >= auto71230EE4_ae) ) ; lv_solariteIndex += auto71230EE4_ai ) {
        if ((UnitGroupHasUnit(gv_solariteNode[lv_solariteIndex].lv_solariteGatherers, EventUnit()) == true)) {
            UnitGroupRemove(gv_solariteNode[lv_solariteIndex].lv_solariteGatherers, EventUnit());
            break;
        }

    }
    UnitGroupRemove(gv_solariteGatherer, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatherSolariteRemovefromunitgroupifstops_Init () {
    gt_GatherSolariteRemovefromunitgroupifstops = TriggerCreate("gt_GatherSolariteRemovefromunitgroupifstops_Func");
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("ReturnSolarite", 0));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("move", 2));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("stop", 0));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("DroneHarvest", 0));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("ProbeHarvest", 0));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("SCVHarvest", 0));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("DroneHarvest", 1));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("ProbeHarvest", 1));
    TriggerAddEventUnitOrder(gt_GatherSolariteRemovefromunitgroupifstops, null, AbilityCommand("SCVHarvest", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather Solarite - Issue to keep gathering if solarite dies
//--------------------------------------------------------------------------------------------------
bool gt_GatherSolariteIssuetokeepgatheringifsolaritedies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_solariteIndex;

    // Automatic Variable Declarations
    int auto4C858558_ae;
    const int auto4C858558_ai = 1;
    unitgroup auto8BC0D14A_g;
    int auto8BC0D14A_u;
    unit auto8BC0D14A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Solarite"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.4, c_timeGame);
    auto4C858558_ae = gv_lastSolariteNode;
    lv_solariteIndex = 1;
    for ( ; ( (auto4C858558_ai >= 0 && lv_solariteIndex <= auto4C858558_ae) || (auto4C858558_ai < 0 && lv_solariteIndex >= auto4C858558_ae) ) ; lv_solariteIndex += auto4C858558_ai ) {
        if ((gv_solariteNode[lv_solariteIndex].lv_solariteNode == EventUnit())) {
            gv_solariteNode[lv_solariteIndex].lv_solariteNode = null;
            auto8BC0D14A_g = gv_solariteNode[lv_solariteIndex].lv_solariteGatherers;
            auto8BC0D14A_u = UnitGroupCount(auto8BC0D14A_g, c_unitCountAll);
            for (;; auto8BC0D14A_u -= 1) {
                auto8BC0D14A_var = UnitGroupUnitFromEnd(auto8BC0D14A_g, auto8BC0D14A_u);
                if (auto8BC0D14A_var == null) { break; }
                UnitGroupRemove(gv_solariteNode[lv_solariteIndex].lv_solariteGatherers, auto8BC0D14A_var);
                if ((UnitOrderCount(auto8BC0D14A_var) == 0)) {
                    if ((UnitBehaviorCount(auto8BC0D14A_var, "CarrySolarite") < gv_maxSolarite) && (UnitGroupCount(UnitGroup("Solarite", 0, RegionCircle(EventUnitDamageSourcePoint(), gv_searchDist), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                        UnitIssueOrder(auto8BC0D14A_var, OrderTargetingUnit(AbilityCommand("GatherSolarite", 0), UnitGroupRandomUnit(UnitGroup("Solarite", 0, RegionCircle(EventUnitDamageSourcePoint(), (gv_searchDist / 2.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToFront);
                    }
                    else {
                        if ((UnitHasBehavior2(EventUnit(), "CarrySolarite") == true)) {
                            UnitIssueOrder(auto8BC0D14A_var, Order(AbilityCommand("ReturnSolarite", 0)), c_orderQueueAddToEnd);
                        }

                    }
                }

            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatherSolariteIssuetokeepgatheringifsolaritedies_Init () {
    gt_GatherSolariteIssuetokeepgatheringifsolaritedies = TriggerCreate("gt_GatherSolariteIssuetokeepgatheringifsolaritedies_Func");
    TriggerAddEventUnitDied(gt_GatherSolariteIssuetokeepgatheringifsolaritedies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather Solarite - Issue to keep gathering if solarite dies 2
//--------------------------------------------------------------------------------------------------
bool gt_GatherSolariteIssuetokeepgatheringifsolaritedies2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_solariteIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagWorker) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "CarrySolarite") == true))) {
            return false;
        }

        if (!((UnitOrderCount(EventUnit()) == 0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_solariteGatherer, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.8, c_timeGame);
    if ((UnitOrderCount(EventUnit()) == 0) && (UnitGroupHasUnit(gv_solariteGatherer, EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ReturnSolarite", 0)), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatherSolariteIssuetokeepgatheringifsolaritedies2_Init () {
    gt_GatherSolariteIssuetokeepgatheringifsolaritedies2 = TriggerCreate("gt_GatherSolariteIssuetokeepgatheringifsolaritedies2_Func");
    TriggerAddEventUnitBecomesIdle(gt_GatherSolariteIssuetokeepgatheringifsolaritedies2, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather Solarite - Force Return
//--------------------------------------------------------------------------------------------------
bool gt_GatherSolariteForceReturn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    unitgroup lv_workers;

    // Automatic Variable Declarations
    playergroup autoCD4E4D0F_g;
    unitgroup autoCD71FF58_g;
    int autoCD71FF58_u;

    // Variable Initialization
    lv_workers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoCD4E4D0F_g = PlayerGroupAlliance(c_playerGroupAlly, gv_p_ARCHEOLOGISTS);
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCD4E4D0F_g, lv_player);
        if (lv_player < 0) { break; }
        lv_workers = UnitGroup(null, lv_player, RegionCircle(UnitGetPosition(gv_escortTruck), 4.0), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCD71FF58_g = lv_workers;
        autoCD71FF58_u = UnitGroupCount(autoCD71FF58_g, c_unitCountAll);
        for (;; autoCD71FF58_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoCD71FF58_g, autoCD71FF58_u);
            if (lv_unit == null) { break; }
            if ((UnitHasBehavior2(lv_unit, "CarrySolarite") == true)) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("ReturnSolarite", 0)), c_orderQueueAddToFront);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatherSolariteForceReturn_Init () {
    gt_GatherSolariteForceReturn = TriggerCreate("gt_GatherSolariteForceReturn_Func");
    TriggerAddEventTimePeriodic(gt_GatherSolariteForceReturn, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather Solarite - Text Tags
//--------------------------------------------------------------------------------------------------
bool gt_GatherSolariteTextTags_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    if ((UnitBehaviorCount(EventUnit(), "CarrySolarite") == gv_maxSolarite)) {
        TextTagCreate((StringExternal("Param/Value/6569CDE7") + IntToText(UnitBehaviorCount(EventUnit(), "CarrySolarite")) + StringExternal("Param/Value/8CA822A4") + IntToText(gv_maxSolarite) + StringExternal("Param/Value/9CAA0249")), 12, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
        libHots_gf_StoreTextTagForUnit(EventUnit(), 1, TextTagLastCreated());
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "CarrySolarite") > 0)) {
            TextTagCreate((IntToText(UnitBehaviorCount(EventUnit(), "CarrySolarite")) + StringExternal("Param/Value/B782FB25") + IntToText(gv_maxSolarite) + StringExternal("Param/Value/06FF8EA3")), 12, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
            libHots_gf_StoreTextTagForUnit(EventUnit(), 1, TextTagLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatherSolariteTextTags_Init () {
    gt_GatherSolariteTextTags = TriggerCreate("gt_GatherSolariteTextTags_Func");
    TriggerAddEventUnitBehaviorChange(gt_GatherSolariteTextTags, null, "CarrySolarite", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create enemy gatherers
//--------------------------------------------------------------------------------------------------
bool gt_Createenemygatherers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loop;

    // Automatic Variable Declarations
    int autoF4ADAEDE_ae;
    const int autoF4ADAEDE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF4ADAEDE_ae = libNtve_gf_DifficultyValueInt(2, 5, 7, 9);
    lv_loop = 1;
    for ( ; ( (autoF4ADAEDE_ai >= 0 && lv_loop <= autoF4ADAEDE_ae) || (autoF4ADAEDE_ai < 0 && lv_loop >= autoF4ADAEDE_ae) ) ; lv_loop += autoF4ADAEDE_ai ) {
        gf_Createenemygatherer(RandomInt(3, 4));
        Wait(50.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Createenemygatherers_Init () {
    gt_Createenemygatherers = TriggerCreate("gt_Createenemygatherers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive enemy gatherers
//--------------------------------------------------------------------------------------------------
bool gt_Reviveenemygatherers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loop;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_enemyGatherers, EventUnit()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libNtve_gf_DifficultyValueFixed(100.0, 80.0, 50.0, 30.0), c_timeGame);
    gf_Createenemygatherer(RandomInt(3, 4));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reviveenemygatherers_Init () {
    gt_Reviveenemygatherers = TriggerCreate("gt_Reviveenemygatherers_Func");
    TriggerAddEventUnitDied(gt_Reviveenemygatherers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create ally gatherers
//--------------------------------------------------------------------------------------------------
bool gt_Createallygatherers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loop;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_allyGatherers, c_unitCountAlive) < libNtve_gf_DifficultyValueInt(3, 3, 3, 3)))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_allyTargetSolariteRegions[0] = RegionFromId(72);
    gv_allyTargetSolariteRegions[1] = RegionFromId(73);
    gv_allyTargetSolariteRegions[2] = RegionFromId(74);
    gv_allyTargetSolariteRegions[3] = RegionFromId(78);
    gv_allyTargetSolariteRegions[4] = RegionFromId(75);
    gv_allyTargetSolariteRegions[5] = RegionFromId(76);
    gv_allyTargetSolariteRegions[6] = RegionFromId(77);
    gv_allyTargetSolariteRegions[7] = RegionFromId(79);
    gv_allyTargetSolariteRegions[8] = RegionFromId(80);
    gv_allyTargetSolariteRegions[9] = RegionFromId(81);
    gf_Createallygatherer();
    Wait(libNtve_gf_DifficultyValueInt(25, 35, 45, 60), c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Createallygatherers_Init () {
    gt_Createallygatherers = TriggerCreate("gt_Createallygatherers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive ally gatherers
//--------------------------------------------------------------------------------------------------
bool gt_Reviveallygatherers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loop;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_allyGatherers, EventUnit()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGroupCount(gv_allyGatherers, c_unitCountAlive) + gv_allyGatherersReviving) < 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_allyGatherersReviving = (gv_allyGatherersReviving + 1);
    Wait(libNtve_gf_DifficultyValueFixed(30.0, 50.0, 80.0, 100.0), c_timeGame);
    gf_Createallygatherer();
    gv_allyGatherersReviving = (gv_allyGatherersReviving - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reviveallygatherers_Init () {
    gt_Reviveallygatherers = TriggerCreate("gt_Reviveallygatherers_Func");
    TriggerAddEventUnitDied(gt_Reviveallygatherers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Create Tutorial Nodes
//--------------------------------------------------------------------------------------------------
bool gt_SolariteCreateTutorialNodes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SolariteSpawnNode(PointFromId(446749176), 10);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_GetAlliedCommandersPlayers(), PointFromId(446749176), 270.0, "PingCircleImportant", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_solariteInitialping[0] = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CA44D71E"));
    PingSetScale(PingLastCreated(), 0.3);
    libNtve_gf_CreateActorAtPoint("BriefingUnitSelectProtossLarge", PointFromId(446749176));
    gv_solariteInitialhighlightactor[0] = libNtve_gf_ActorLastCreated();
    TextTagCreate(StringExternal("Param/Value/2E88D126"), 24, PointFromId(446749176), 3.0, true, false, libCOMI_gf_GetAlliedCommandersPlayers());
    gv_solariteInitialtexttag[0] = TextTagLastCreated();
    VisRevealerCreate(gv_p_USER1, RegionFromId(64));
    gv_solariteInitialrevealer[0] = VisRevealerLastCreated();
    TriggerExecute(gt_SolariteDestroyHelperLeft, true, false);
    gf_SolariteSpawnNode(PointFromId(1738260859), 10);
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), PointFromId(1738260859), 270.0, "PingCircleImportant", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    gv_solariteInitialping[1] = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FCB73456"));
    PingSetScale(PingLastCreated(), 0.3);
    libNtve_gf_CreateActorAtPoint("BriefingUnitSelectProtossLarge", PointFromId(1738260859));
    gv_solariteInitialhighlightactor[1] = libNtve_gf_ActorLastCreated();
    TextTagCreate(StringExternal("Param/Value/88166029"), 24, PointFromId(1738260859), 3.0, true, false, libCOMI_gf_GetAlliedCommandersPlayers());
    gv_solariteInitialtexttag[1] = TextTagLastCreated();
    VisRevealerCreate(gv_p_USER1, RegionFromId(23));
    gv_solariteInitialrevealer[1] = VisRevealerLastCreated();
    TriggerExecute(gt_SolariteDestroyHelperRight, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteCreateTutorialNodes_Init () {
    gt_SolariteCreateTutorialNodes = TriggerCreate("gt_SolariteCreateTutorialNodes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Destroy Helper Right
//--------------------------------------------------------------------------------------------------
bool gt_SolariteDestroyHelperRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoB26F890C_at;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB26F890C_at = 0;
    while (!(((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (libCOMI_gf_GameIsOver() == true))) && autoB26F890C_at <= 180.0) {
        Wait(0.5, c_timeGame);
        autoB26F890C_at = autoB26F890C_at + 0.5;
    }
    TextTagDestroy(gv_solariteInitialtexttag[1]);
    ActorSend(gv_solariteInitialhighlightactor[1], "Destroy");
    PingDestroy(gv_solariteInitialping[1]);
    VisRevealerDestroy(gv_solariteInitialrevealer[1]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteDestroyHelperRight_Init () {
    gt_SolariteDestroyHelperRight = TriggerCreate("gt_SolariteDestroyHelperRight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Destroy Helper Left
//--------------------------------------------------------------------------------------------------
bool gt_SolariteDestroyHelperLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed auto18638605_at;

    // Actions
    if (!runActions) {
        return true;
    }

    auto18638605_at = 0;
    while (!(((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (libCOMI_gf_GameIsOver() == true))) && auto18638605_at <= 180.0) {
        Wait(0.5, c_timeGame);
        auto18638605_at = auto18638605_at + 0.5;
    }
    TextTagDestroy(gv_solariteInitialtexttag[0]);
    ActorSend(gv_solariteInitialhighlightactor[0], "Destroy");
    PingDestroy(gv_solariteInitialping[0]);
    VisRevealerDestroy(gv_solariteInitialrevealer[0]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteDestroyHelperLeft_Init () {
    gt_SolariteDestroyHelperLeft = TriggerCreate("gt_SolariteDestroyHelperLeft_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: IniActors
//--------------------------------------------------------------------------------------------------
bool gt_IniActors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_solariteCrack[1] = ActorFromDoodad(DoodadFromId(906923186));
    gv_solariteCrack[2] = ActorFromDoodad(DoodadFromId(728251196));
    gv_solariteCrack[3] = ActorFromDoodad(DoodadFromId(653334850));
    gv_solariteCrack[4] = ActorFromDoodad(DoodadFromId(561471774));
    gv_solariteCrack[5] = ActorFromDoodad(DoodadFromId(1284057112));
    gv_solariteCrack[6] = ActorFromDoodad(DoodadFromId(972398353));
    gv_solariteCrack[7] = ActorFromDoodad(DoodadFromId(1881843808));
    gv_solaritePump[1] = ActorFromDoodad(DoodadFromId(160540699));
    gv_solaritePump[2] = ActorFromDoodad(DoodadFromId(1968319563));
    gv_solaritePump[3] = ActorFromDoodad(DoodadFromId(754125744));
    gv_solaritePump[4] = ActorFromDoodad(DoodadFromId(738698436));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IniActors_Init () {
    gt_IniActors = TriggerCreate("gt_IniActors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SolariteCrabs
//--------------------------------------------------------------------------------------------------
bool gt_SolariteCrabs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SolariteCrab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SolariteSpawnNode(UnitGetPosition(EventUnit()), RandomInt(4, 6));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteCrabs_Init () {
    gt_SolariteCrabs = TriggerCreate("gt_SolariteCrabs_Func");
    TriggerAddEventUnitDied(gt_SolariteCrabs, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SolariteBeetle
//--------------------------------------------------------------------------------------------------
bool gt_SolariteBeetle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SolariteBeetle"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SolariteSpawnNode(UnitGetPosition(EventUnit()), RandomInt(1, 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteBeetle_Init () {
    gt_SolariteBeetle = TriggerCreate("gt_SolariteBeetle_Func");
    TriggerAddEventUnitDied(gt_SolariteBeetle, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SolariteElemental
//--------------------------------------------------------------------------------------------------
bool gt_SolariteElemental_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SlaynElemental"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SolariteSpawnNode(UnitGetPosition(EventUnit()), 30);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteElemental_Init () {
    gt_SolariteElemental = TriggerCreate("gt_SolariteElemental_Func");
    TriggerAddEventUnitDied(gt_SolariteElemental, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SollariteCarry
//--------------------------------------------------------------------------------------------------
bool gt_SollariteCarry_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "CarrySolarite") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/E02909BE"), true);
    TriggerDebugOutput(1, IntToText(UnitBehaviorCount(EventUnit(), "CarrySolarite")), true);
    gf_SolariteSpawnNode(UnitGetPosition(EventUnit()), (UnitBehaviorCount(EventUnit(), "CarrySolarite") - RandomInt(1, (UnitBehaviorCount(EventUnit(), "CarrySolarite") - 1))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SollariteCarry_Init () {
    gt_SollariteCarry = TriggerCreate("gt_SollariteCarry_Func");
    TriggerAddEventUnitDied(gt_SollariteCarry, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Solarite - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherSolariteCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetObjectiveRequiredCountCampaign("SolarGatherGetSolarite", gv_sOLARITE_GOAL);
    libCOMI_gf_CreateObjectiveCampaign("SolarGatherGetSolarite");
    gv_objectiveGatherSolarite = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(gt_ObjectiveGatherSolariteUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherSolariteCreate_Init () {
    gt_ObjectiveGatherSolariteCreate = TriggerCreate("gt_ObjectiveGatherSolariteCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Solarite - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherSolariteComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BossCreate, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGatherSolariteCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("SolarGatherGetSolarite", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherSolariteComplete_Init () {
    gt_ObjectiveGatherSolariteComplete = TriggerCreate("gt_ObjectiveGatherSolariteComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Solarite - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherSolariteUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveGatherSolariteCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("SolarGatherGetSolarite", gv_sOLARITE_ALLY);
    TextExpressionSetToken("Param/Expression/464E39F3", "GOAL", IntToText(gv_sOLARITE_GOAL));
    TextExpressionSetToken("Param/Expression/464E39F3", "ALLY", IntToText(gv_sOLARITE_ALLY));
    TextExpressionSetToken("Param/Expression/464E39F3", "AMON", IntToText(gv_sOLARITE_ENEMY));
    ObjectiveSetName(gv_objectiveGatherSolarite, TextExpressionAssemble("Param/Expression/464E39F3"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherSolariteUpdate_Init () {
    gt_ObjectiveGatherSolariteUpdate = TriggerCreate("gt_ObjectiveGatherSolariteUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Solarite - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherSolariteFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGatherSolariteCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("SolarGatherGetSolarite", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_DefeatAmonGatheredSolarite, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherSolariteFailed_Init () {
    gt_ObjectiveGatherSolariteFailed = TriggerCreate("gt_ObjectiveGatherSolariteFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_SolariteTextTag_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libHots_gf_TextTagForUnit(EventUnit(), 1));
    if ((UnitBehaviorCount(EventUnit(), "Solarite") > 0)) {
        TextTagCreate(IntToText(UnitBehaviorCount(EventUnit(), "Solarite")), 12, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
        libHots_gf_StoreTextTagForUnit(EventUnit(), 1, TextTagLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteTextTag_Init () {
    gt_SolariteTextTag = TriggerCreate("gt_SolariteTextTag_Func");
    TriggerAddEventUnitBehaviorChange(gt_SolariteTextTag, null, "Solarite", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resize Solarite Core
//--------------------------------------------------------------------------------------------------
bool gt_ResizeSolariteCore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(67), c_actorIntersectAgainstRadiusContact, (("SetScale " + FixedToString((gv_sOLARITE_ALLY / gv_sOLARITE_GOAL), c_fixedPrecisionAny))), "Model", "IsStatus Scalable 1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResizeSolariteCore_Init () {
    gt_ResizeSolariteCore = TriggerCreate("gt_ResizeSolariteCore_Func");
    TriggerAddEventGeneric(gt_ResizeSolariteCore, "Ally Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite Ping Check
//--------------------------------------------------------------------------------------------------
bool gt_SolaritePingCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[0] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(1205054984), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9C72092B"));
            gv_solaritePings[0] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[0]);
        gv_solaritePings[0] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[1] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(1723304337), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C39921CB"));
            gv_solaritePings[1] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[1]);
        gv_solaritePings[1] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[2] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(1723868496), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8DF7A318"));
            gv_solaritePings[2] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[2]);
        gv_solaritePings[2] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[3] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(870583487), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/51DCE834"));
            gv_solaritePings[3] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[3]);
        gv_solaritePings[3] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[4] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(1296623617), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D20B699A"));
            gv_solaritePings[4] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[4]);
        gv_solaritePings[4] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[5] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(479344465), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/28EA19A6"));
            gv_solaritePings[5] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[5]);
        gv_solaritePings[5] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[6] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(854438264), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DBF8BF25"));
            gv_solaritePings[6] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[6]);
        gv_solaritePings[6] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[7] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(314785161), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/93A6202D"));
            gv_solaritePings[7] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[7]);
        gv_solaritePings[7] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[8] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(1559209364), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9410C976"));
            gv_solaritePings[8] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[8]);
        gv_solaritePings[8] = c_invalidPingId;
    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        if ((gv_solaritePings[9] == c_invalidPingId)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", PointFromId(1657521438), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.2);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1C64A333"));
            gv_solaritePings[9] = PingLastCreated();
        }

    }

    if ((UnitGroupCount(UnitGroup("Solarite", c_playerAny, RegionFromId(30), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libCOMI_gf_DestroyPingCoop(gv_solaritePings[9]);
        gv_solaritePings[9] = c_invalidPingId;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolaritePingCheck_Init () {
    gt_SolaritePingCheck = TriggerCreate("gt_SolaritePingCheck_Func");
    TriggerEnable(gt_SolaritePingCheck, false);
    TriggerAddEventTimePeriodic(gt_SolaritePingCheck, 3.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Amount Changed
//--------------------------------------------------------------------------------------------------
bool gt_SolariteAmountChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_solarite_ally;
    int lv_solarite_enemy;

    // Automatic Variable Declarations
    playergroup auto752CA050_g;
    playergroup auto1E64D85A_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto752CA050_g = libCOMI_gv_vU_Allies;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto752CA050_g, lv_player);
        if (lv_player < 0) { break; }
        lv_solarite_ally += PlayerGetPropertyInt(lv_player, c_playerPropCustom);
    }
    gv_sOLARITE_ALLY = lv_solarite_ally;
    TriggerExecute(gt_ObjectiveGatherSolariteUpdate, true, false);
    TriggerSendEvent("Ally Solarite Amount Changed");
    if ((gv_sOLARITE_ALLY >= gv_sOLARITE_GOAL)) {
        TriggerExecute(gt_ObjectiveGatherSolariteComplete, true, false);
        return true;
    }

    auto1E64D85A_g = libCOMI_gv_vU_Enemies;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1E64D85A_g, lv_player);
        if (lv_player < 0) { break; }
        lv_solarite_enemy += PlayerGetPropertyInt(lv_player, c_playerPropCustom);
    }
    gv_sOLARITE_ENEMY = lv_solarite_enemy;
    TriggerExecute(gt_ObjectiveGatherSolariteUpdate, true, false);
    TriggerSendEvent("Enemy Solarite Amount Changed");
    if ((gv_sOLARITE_ENEMY >= gv_sOLARITE_GOAL)) {
        TriggerExecute(gt_ObjectiveGatherSolariteFailed, true, false);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteAmountChanged_Init () {
    gt_SolariteAmountChanged = TriggerCreate("gt_SolariteAmountChanged_Func");
    TriggerEnable(gt_SolariteAmountChanged, false);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, 1, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, 2, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, 12, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, 13, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, 14, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, gv_p_ARCHEOLOGISTS, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, gv_p_ENEMY1, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, gv_p_ENEMY2, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, gv_p_ENEMY_MELEE, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_SolariteAmountChanged, gv_p_ENEMY_SPECIAL, c_playerPropCustom);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite - Escort Truck Q
//--------------------------------------------------------------------------------------------------
bool gt_SolariteEscortTruckQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EscortCreating, true, false);
    TriggerEnable(gt_DefeatConvoyDead, true);
    TriggerExecute(gt_ObjectiveRamseyAliveCreate, true, false);
    TriggerEnable(gt_TransmissionConvoyreceivesdamage75HP, true);
    TriggerEnable(gt_TransmissionConvoyreceivesdamage50HP, true);
    TriggerEnable(gt_TransmissionConvoyreceivesdamage25HP, true);
    TriggerEnable(gt_TransmissionConvoyreceivesdamage10HP, true);
    TriggerEnable(gt_TransmissionConvoyreceivesdamagefirsttimeQ, true);
    VisExploreArea(gv_p_USER1, RegionFromId(22), true, false);
    VisExploreArea(gv_p_USER2, RegionFromId(22), true, false);
    Wait(2.0, c_timeGame);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(22)), StringExternal("Param/Value/3562E0D5"));
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_EscortShowresearchfacilities, true, false);
    TriggerExecute(gt_EscortTruckTransmission, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SolariteEscortTruckQ_Init () {
    gt_SolariteEscortTruckQ = TriggerCreate("gt_SolariteEscortTruckQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Ramsey Alive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRamseyAliveCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("SolarGatherRamseyAlive");
    gv_objectiveRamseyAlive = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveRamseyAliveUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRamseyAliveCreate_Init () {
    gt_ObjectiveRamseyAliveCreate = TriggerCreate("gt_ObjectiveRamseyAliveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Ramsey Alive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRamseyAliveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRamseyAliveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("SolarGatherRamseyAlive", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRamseyAliveComplete_Init () {
    gt_ObjectiveRamseyAliveComplete = TriggerCreate("gt_ObjectiveRamseyAliveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Ramsey Alive - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRamseyAliveUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRamseyAliveCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("SolarGatherRamseyAlive", gv_rOAD);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRamseyAliveUpdate_Init () {
    gt_ObjectiveRamseyAliveUpdate = TriggerCreate("gt_ObjectiveRamseyAliveUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Ramsey Alive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRamseyAliveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRamseyAliveCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("SolarGatherRamseyAlive", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRamseyAliveFailed_Init () {
    gt_ObjectiveRamseyAliveFailed = TriggerCreate("gt_ObjectiveRamseyAliveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Truck Transmission
//--------------------------------------------------------------------------------------------------
bool gt_EscortTruckTransmission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Ramsey(SoundLink("Intro", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortTruckTransmission_Init () {
    gt_EscortTruckTransmission = TriggerCreate("gt_EscortTruckTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Truck Preparing Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTruckPreparingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto44F047A6_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto44F047A6_val = gv_rOAD;
    if (auto44F047A6_val == 1) {
        gf_Ramsey(SoundLink("AboutToLeave", -1));
    }
    else if (auto44F047A6_val == 2) {
        gf_Ramsey(SoundLink("AlmostLeaving1st", -1));
    }
    else if (auto44F047A6_val == 3) {
        gf_Ramsey(SoundLink("AlmostLeaving2nd", -1));
    }
    else if (auto44F047A6_val == 4) {
        gf_Ramsey(SoundLink("AlmostLeaving3rd", -1));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTruckPreparingQ_Init () {
    gt_TransmissionTruckPreparingQ = TriggerCreate("gt_TransmissionTruckPreparingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Truck Depart Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTruckDepartQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoBCB11DC0_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBCB11DC0_val = gv_rOAD;
    if (autoBCB11DC0_val == 1) {
        gf_Ramsey(SoundLink("LeaveStart", -1));
    }
    else if (autoBCB11DC0_val == 2) {
        gf_Ramsey(SoundLink("Leaving1st", -1));
    }
    else if (autoBCB11DC0_val == 3) {
        gf_Ramsey(SoundLink("Leaving2nd", -1));
    }
    else if (autoBCB11DC0_val == 4) {
        gf_Ramsey(SoundLink("Leaving3rdStop", -1));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTruckDepartQ_Init () {
    gt_TransmissionTruckDepartQ = TriggerCreate("gt_TransmissionTruckDepartQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Truck Arrive Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTruckArriveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA6D3FBF2_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA6D3FBF2_val = gv_rOAD;
    if (autoA6D3FBF2_val == 1) {
        gf_Ramsey(SoundLink("FirstStop", -1));
    }
    else if (autoA6D3FBF2_val == 2) {
        gf_Ramsey(SoundLink("SecondStop", -1));
    }
    else if (autoA6D3FBF2_val == 3) {
        gf_Ramsey(SoundLink("ThirdStop", -1));
    }
    else if (autoA6D3FBF2_val == 4) {
        if ((gv_sOLARITE_ALLY >= gv_sOLARITE_GOAL)) {
            gf_Ramsey(SoundLink("100Per", -1));
        }
        else {
            gf_Ramsey(SoundLink("ReachTempleBeforeSol", -1));
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTruckArriveQ_Init () {
    gt_TransmissionTruckArriveQ = TriggerCreate("gt_TransmissionTruckArriveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Convoy receives damage (first time) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionConvoyreceivesdamagefirsttimeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("TruckAttack", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionConvoyreceivesdamagefirsttimeQ_Init () {
    gt_TransmissionConvoyreceivesdamagefirsttimeQ = TriggerCreate("gt_TransmissionConvoyreceivesdamagefirsttimeQ_Func");
    TriggerEnable(gt_TransmissionConvoyreceivesdamagefirsttimeQ, false);
    TriggerAddEventUnitDamaged(gt_TransmissionConvoyreceivesdamagefirsttimeQ, UnitRefFromVariable("gv_escortTruck"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Convoy receives damage < 75% HP
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionConvoyreceivesdamage75HP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("TruckAttack2", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionConvoyreceivesdamage75HP_Init () {
    gt_TransmissionConvoyreceivesdamage75HP = TriggerCreate("gt_TransmissionConvoyreceivesdamage75HP_Func");
    TriggerEnable(gt_TransmissionConvoyreceivesdamage75HP, false);
    TriggerAddEventUnitDamaged(gt_TransmissionConvoyreceivesdamage75HP, UnitRefFromVariable("gv_escortTruck"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Convoy receives damage < 50% HP
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionConvoyreceivesdamage50HP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("TruckAttack3", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionConvoyreceivesdamage50HP_Init () {
    gt_TransmissionConvoyreceivesdamage50HP = TriggerCreate("gt_TransmissionConvoyreceivesdamage50HP_Func");
    TriggerEnable(gt_TransmissionConvoyreceivesdamage50HP, false);
    TriggerAddEventUnitDamaged(gt_TransmissionConvoyreceivesdamage50HP, UnitRefFromVariable("gv_escortTruck"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Convoy receives damage < 25% HP
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionConvoyreceivesdamage25HP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 25.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("TruckLow", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionConvoyreceivesdamage25HP_Init () {
    gt_TransmissionConvoyreceivesdamage25HP = TriggerCreate("gt_TransmissionConvoyreceivesdamage25HP_Func");
    TriggerEnable(gt_TransmissionConvoyreceivesdamage25HP, false);
    TriggerAddEventUnitDamaged(gt_TransmissionConvoyreceivesdamage25HP, UnitRefFromVariable("gv_escortTruck"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Convoy receives damage < 10% HP
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionConvoyreceivesdamage10HP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("TruckNearDeath", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionConvoyreceivesdamage10HP_Init () {
    gt_TransmissionConvoyreceivesdamage10HP = TriggerCreate("gt_TransmissionConvoyreceivesdamage10HP_Func");
    TriggerEnable(gt_TransmissionConvoyreceivesdamage10HP, false);
    TriggerAddEventUnitDamaged(gt_TransmissionConvoyreceivesdamage10HP, UnitRefFromVariable("gv_escortTruck"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort - Show research facilities
//--------------------------------------------------------------------------------------------------
bool gt_EscortShowresearchfacilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_checkPointIter;
    region lv_checkpoint;
    int lv_activePingsDesired;
    int lv_activePingsTotal;
    int lv_activePingsPrevious;

    // Automatic Variable Declarations
    int auto75A57002_ae;
    const int auto75A57002_ai = 1;
    const int auto96BC49E3_ae = 6;
    const int auto96BC49E3_ai = 1;
    const int autoDF9D5485_ae = 6;
    const int autoDF9D5485_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto75A57002_ae = (gv_cONVOY_CHECKPOINTS - 1);
    lv_checkPointIter = 1;
    for ( ; ( (auto75A57002_ai >= 0 && lv_checkPointIter <= auto75A57002_ae) || (auto75A57002_ai < 0 && lv_checkPointIter >= auto75A57002_ae) ) ; lv_checkPointIter += auto75A57002_ai ) {
        lv_checkpoint = RegionFromName(("Checkpoint" + IntToString(lv_checkPointIter)));
        VisExploreArea(gv_p_USER1, lv_checkpoint, true, false);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(lv_checkpoint), StringExternal("Param/Value/C665C304"));
        PingSetScale(PingLastCreated(), 0.5);
        gv_checkpointsObjectivemarkers[lv_checkPointIter] = PingLastCreated();
    }
    lv_checkPointIter = 1;
    for ( ; ( (auto96BC49E3_ai >= 0 && lv_checkPointIter <= auto96BC49E3_ae) || (auto96BC49E3_ai < 0 && lv_checkPointIter >= auto96BC49E3_ae) ) ; lv_checkPointIter += auto96BC49E3_ai ) {
        lv_checkpoint = RegionFromName(("UndegroundReveal" + IntToString(lv_checkPointIter)));
        VisExploreArea(gv_p_USER1, lv_checkpoint, true, false);
    }
    lv_checkPointIter = 1;
    for ( ; ( (autoDF9D5485_ai >= 0 && lv_checkPointIter <= autoDF9D5485_ae) || (autoDF9D5485_ai < 0 && lv_checkPointIter >= autoDF9D5485_ae) ) ; lv_checkPointIter += autoDF9D5485_ai ) {
        lv_checkpoint = RegionFromName(("UndegroundBay" + IntToString(lv_checkPointIter)));
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(lv_checkpoint), StringExternal("Param/Value/535B935E"));
        PingSetScale(PingLastCreated(), 0.5);
        gv_checkpointsObjectivemarkersUndergorund[lv_checkPointIter] = PingLastCreated();
    }
    Wait(0.7, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortShowresearchfacilities_Init () {
    gt_EscortShowresearchfacilities = TriggerCreate("gt_EscortShowresearchfacilities_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort - Creating
//--------------------------------------------------------------------------------------------------
bool gt_EscortCreating_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    fixed autoEBC697E3_at;

    // Variable Initialization
    lv_timer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "ArchaeologistsTruck", 0, gv_p_ARCHEOLOGISTS, PointFromId(1168976696), 300.0);
    gv_escortTruck = UnitLastCreated();
    UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupAll);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_truckLife);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, gv_truckLife);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    libCOMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/7C3B82CC"), null);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingDiamond", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 49.80, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.3);
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), gv_escortTruck);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6C503027"));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(126273172)), c_orderQueueReplace);
    gv_tRUCK_STATE = ge_TruckState_Moving;
    autoEBC697E3_at = 0;
    while (!((DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), PointFromId(126273172)) < 0.1)) && autoEBC697E3_at <= 3.0) {
        Wait(0.5, c_timeGame);
        autoEBC697E3_at = autoEBC697E3_at + 0.5;
    }
    TriggerExecute(gt_EscortArrived, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortCreating_Init () {
    gt_EscortCreating = TriggerCreate("gt_EscortCreating_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort - Arrived
//--------------------------------------------------------------------------------------------------
bool gt_EscortArrived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_rOAD > 0)) {
        PingDestroy(gv_checkpointsObjectivemarkers[gv_rOAD]);
        TriggerExecute(gt_TransmissionTruckArriveQ, true, false);
        TriggerExecute(gt_ObjectiveRamseyAliveUpdate, true, false);
    }

    gv_rOAD += 1;
    UnitIssueOrder(gv_escortTruck, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    ActorSend(libNtve_gf_MainActorofUnit(gv_escortTruck), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    if ((gv_rOAD <= 4)) {
        TriggerExecute(gt_EscortProcessing, true, false);
    }
    else {
        Wait(5.0, c_timeGame);
        TriggerExecute(gt_ObjectiveRamseyAliveComplete, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortArrived_Init () {
    gt_EscortArrived = TriggerCreate("gt_EscortArrived_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort - Processing
//--------------------------------------------------------------------------------------------------
bool gt_EscortProcessing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_tRUCK_STATE = ge_TruckState_Processing;
    UnitIssueOrder(gv_escortTruck, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    ActorSend(libNtve_gf_MainActorofUnit(gv_escortTruck), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(gv_cHECKPOINTS_DELAY[gv_rOAD], c_timeGame);
    gv_tRUCK_STATE = ge_TruckState_Waiting;
    TriggerEnable(gt_EscortCheckSolariteAmount, true);
    TriggerExecute(gt_EscortCheckSolariteAmount, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortProcessing_Init () {
    gt_EscortProcessing = TriggerCreate("gt_EscortProcessing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort - Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_EscortTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_escortTruck) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_rOAD_NEEDED += 1;
    if ((gv_rOAD < 4) && (gv_rOAD_NEEDED > gv_rOAD) && (gv_tRUCK_STATE == ge_TruckState_Waiting)) {
        TriggerExecute(gt_EscortPreparing, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortTimerExpires_Init () {
    gt_EscortTimerExpires = TriggerCreate("gt_EscortTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort - Check Solarite Amount
//--------------------------------------------------------------------------------------------------
bool gt_EscortCheckSolariteAmount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_escortTruck) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tRUCK_STATE == ge_TruckState_Waiting) && (gv_sOLARITE_ALLY >= gv_cHECKPOINTS_SOLARITE[gv_rOAD])) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_EscortPreparing, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortCheckSolariteAmount_Init () {
    gt_EscortCheckSolariteAmount = TriggerCreate("gt_EscortCheckSolariteAmount_Func");
    TriggerAddEventGeneric(gt_EscortCheckSolariteAmount, "Ally Solarite Amount Changed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort - Preparing
//--------------------------------------------------------------------------------------------------
bool gt_EscortPreparing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_tRUCK_STATE = ge_TruckState_Preparing;
    TriggerExecute(gt_TransmissionTruckPreparingQ, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(libNtve_gf_MainActorofUnit(gv_escortTruck), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    if ((UnitIsAlive(gv_escortTruck) == true)) {
        gf_EscortStartconvoycountdown(gv_cHECKPOINTS_DELAY[gv_rOAD], StringExternal("Param/Value/A238AE5A"));
        MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_escortTruck), 2.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_p_ARCHEOLOGISTS, false)));
        TriggerExecute(gt_TransmissionTruckDepartQ, true, false);
        gf_EscortSendTruck(gv_rOAD);
        gv_generatorsActive += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortPreparing_Init () {
    gt_EscortPreparing = TriggerCreate("gt_EscortPreparing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Sticks n' Stones - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("SolarGatherSticksnStones");
    gv_objectiveSticksnStones = ObjectiveLastCreated();
    TextExpressionSetToken("Param/Expression/57C7129F", "COLOR", StringToText("FFFFFF"));
    TextExpressionSetToken("Param/Expression/57C7129F", "TIMER", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_sticksExpireTimer))));
    TextExpressionSetToken("Param/Expression/57C7129F", "COLOR", StringToText("FFFFFF"));
    ObjectiveSetName(gv_objectiveSticksnStones, TextExpressionAssemble("Param/Expression/57C7129F"));
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesCreate_Init () {
    gt_ObjectiveSticksnStonesCreate = TriggerCreate("gt_ObjectiveSticksnStonesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Sticks n' Stones - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSticksnStonesCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("SolarGatherSticksnStones", libCOMI_ge_MissionObjectiveState_Completed);
    PlayerModifyPropertyFixed(gv_p_USER1, c_playerPropCustom, c_playerPropOperAdd, 25.0);
    PlayerModifyPropertyFixed(gv_p_USER2, c_playerPropCustom, c_playerPropOperAdd, 25.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesComplete_Init () {
    gt_ObjectiveSticksnStonesComplete = TriggerCreate("gt_ObjectiveSticksnStonesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Sticks n' Stones - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSticksnStonesCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("SolarGatherSticksnStones", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesFailed_Init () {
    gt_ObjectiveSticksnStonesFailed = TriggerCreate("gt_ObjectiveSticksnStonesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Sticks n' Stones - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSticksnStonesCreate, true, false);
    TextExpressionSetToken("Param/Expression/93379077", "COLOR", StringToText("FFFFFF"));
    TextExpressionSetToken("Param/Expression/93379077", "TIMER", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_sticksExpireTimer))));
    TextExpressionSetToken("Param/Expression/93379077", "COLOR", StringToText("FFFFFF"));
    ObjectiveSetName(gv_objectiveSticksnStones, TextExpressionAssemble("Param/Expression/93379077"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesUpdate_Init () {
    gt_ObjectiveSticksnStonesUpdate = TriggerCreate("gt_ObjectiveSticksnStonesUpdate_Func");
    TriggerAddEventChatMessage(gt_ObjectiveSticksnStonesUpdate, c_playerAny, "tupdate", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Sticks n' Stones - Check
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((TimerGetRemaining(gv_sticksExpireTimer) > 0.0)) {
        TextExpressionSetToken("Param/Expression/03726C89", "COLOR", StringToText("FFFFFF"));
        TextExpressionSetToken("Param/Expression/03726C89", "TIMER", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_sticksExpireTimer))));
        TextExpressionSetToken("Param/Expression/03726C89", "COLOR", StringToText("FFFFFF"));
        ObjectiveSetName(gv_objectiveSticksnStones, TextExpressionAssemble("Param/Expression/03726C89"));
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesCheck_Init () {
    gt_ObjectiveSticksnStonesCheck = TriggerCreate("gt_ObjectiveSticksnStonesCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks VO Start
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksVOStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Ramsey(SoundLink("BonusAlert", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksVOStart_Init () {
    gt_ObjectiveSticksVOStart = TriggerCreate("gt_ObjectiveSticksVOStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks n Stones VO Warning
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesVOWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_sticksExpireTimer) <= 120.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_stoneTemplar) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Ramsey(SoundLink("BonusRemind", -1));
    TriggerEnable(gt_ObjectiveSticksnStonesVOWarningFinal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesVOWarning_Init () {
    gt_ObjectiveSticksnStonesVOWarning = TriggerCreate("gt_ObjectiveSticksnStonesVOWarning_Func");
    TriggerEnable(gt_ObjectiveSticksnStonesVOWarning, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks n Stones VO Warning Final
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesVOWarningFinal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_sticksExpireTimer) <= 60.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_stoneTemplar) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Ramsey(SoundLink("BonusRemindLast", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesVOWarningFinal_Init () {
    gt_ObjectiveSticksnStonesVOWarningFinal = TriggerCreate("gt_ObjectiveSticksnStonesVOWarningFinal_Func");
    TriggerEnable(gt_ObjectiveSticksnStonesVOWarningFinal, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks VO Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksVOFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("BonusFailed", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksVOFailed_Init () {
    gt_ObjectiveSticksVOFailed = TriggerCreate("gt_ObjectiveSticksVOFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks VO Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksVOComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_Ramsey(SoundLink("BonusComplete", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksVOComplete_Init () {
    gt_ObjectiveSticksVOComplete = TriggerCreate("gt_ObjectiveSticksVOComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks n Stones Poke
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesPoke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_p_USER1) || (UnitGetOwner(EventUnit()) == gv_p_USER2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSticksnStonesIntialization, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesPoke_Init () {
    gt_ObjectiveSticksnStonesPoke = TriggerCreate("gt_ObjectiveSticksnStonesPoke_Func");
    TriggerAddEventUnitRegion(gt_ObjectiveSticksnStonesPoke, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks n Stones Intialization
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesIntialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ObjectiveSticksnStonesPoke, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSticksnStonesCreate, true, false);
    TriggerExecute(gt_ObjectiveSticksVOStart, true, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, PointFromId(1232439760), StringExternal("Param/Value/E81AC3D0"));
    gv_sticksPing = PingLastCreated();
    UnitBehaviorRemove(UnitFromId(1953716634), "StonedTemplar", 1);
    libNtve_gf_SetTacticalAIThink(gv_p_QUADAN, "StoneTemplar", "StoneTemplarAIThink", false);
    VisRevealArea(gv_p_USER1, RegionFromId(59), 5.0, false);
    VisRevealArea(gv_p_USER2, RegionFromId(59), 5.0, false);
    TriggerExecute(gt_ObjectiveSticksnStonesTimerUpdate, true, false);
    TriggerEnable(gt_StoneTimerExpire, true);
    TriggerEnable(gt_StoneLifeCheck, true);
    TriggerEnable(gt_ObjectiveSticksnStonesVOWarning, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesIntialization_Init () {
    gt_ObjectiveSticksnStonesIntialization = TriggerCreate("gt_ObjectiveSticksnStonesIntialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks n Stones Timer Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesTimerUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_sacredGround;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(6.0, c_timeGame);
    TimerStart(gv_sticksExpireTimer, 240.0, false, c_timeGame);
    TriggerExecute(gt_ObjectiveSticksnStonesCheck, true, false);
    while ((TimerGetRemaining(gv_sticksExpireTimer) > 0.0) && (UnitIsAlive(gv_stoneTemplar) == true)) {
        if (((GameGetMissionTime() - AILastAttack(gv_stoneTemplar)) < 3.0)) {
            TimerPause(gv_sticksExpireTimer, true);
        }
        else {
            TimerPause(gv_sticksExpireTimer, false);
        }
        TriggerExecute(gt_ObjectiveSticksnStonesUpdate, true, false);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesTimerUpdate_Init () {
    gt_ObjectiveSticksnStonesTimerUpdate = TriggerCreate("gt_ObjectiveSticksnStonesTimerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Sticks n Stones Progress Check
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSticksnStonesProgressCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSticksnStonesCreate, true, false);
    if ((TimerGetRemaining(gv_sticksExpireTimer) <= 0.0) && (UnitIsAlive(gv_stoneTemplar) == true)) {
        TriggerExecute(gt_ObjectiveSticksnStonesFailed, true, false);
        TriggerExecute(gt_ObjectiveSticksVOFailed, true, false);
        UnitBehaviorAdd(gv_stoneTemplar, "StonedTemplar", gv_stoneTemplar, 1);
        libCOMI_gf_DestroyPingCoop(gv_sticksPing);
        TriggerEnable(gt_StoneLifeCheck, false);
        TriggerEnable(gt_StoneTimerExpire, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((TimerGetRemaining(gv_sticksExpireTimer) != 0.0) && (UnitIsAlive(gv_stoneTemplar) == false)) {
        libCOMI_gf_SetMissionObjectiveProgress("SolarGatherSticksnStones", 1);
        TriggerExecute(gt_ObjectiveSticksnStonesComplete, true, false);
        TriggerExecute(gt_ObjectiveSticksVOComplete, true, false);
        libCOMI_gf_DestroyPingCoop(gv_sticksPing);
        TriggerEnable(gt_StoneLifeCheck, false);
        TriggerEnable(gt_StoneTimerExpire, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSticksnStonesProgressCheck_Init () {
    gt_ObjectiveSticksnStonesProgressCheck = TriggerCreate("gt_ObjectiveSticksnStonesProgressCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stone Life Check
//--------------------------------------------------------------------------------------------------
bool gt_StoneLifeCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSticksnStonesProgressCheck, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoneLifeCheck_Init () {
    gt_StoneLifeCheck = TriggerCreate("gt_StoneLifeCheck_Func");
    TriggerEnable(gt_StoneLifeCheck, false);
    TriggerAddEventUnitDied(gt_StoneLifeCheck, UnitRefFromVariable("gv_stoneTemplar"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stone Timer Expire
//--------------------------------------------------------------------------------------------------
bool gt_StoneTimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_stoneTemplar) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveSticksnStonesProgressCheck, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoneTimerExpire_Init () {
    gt_StoneTimerExpire = TriggerCreate("gt_StoneTimerExpire_Func");
    TriggerEnable(gt_StoneTimerExpire, false);
    TriggerAddEventTimer(gt_StoneTimerExpire, gv_sticksExpireTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stone Interceptor Tooltip
//--------------------------------------------------------------------------------------------------
bool gt_StoneInterceptorTooltip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitInfoTextCampaign(EventUnitCreatedUnit(), null, StringExternal("Param/Value/BD2540B7"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoneInterceptorTooltip_Init () {
    gt_StoneInterceptorTooltip = TriggerCreate("gt_StoneInterceptorTooltip_Func");
    TriggerAddEventUnitCreated(gt_StoneInterceptorTooltip, null, "SpawnStoneInterceptor", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Create
//--------------------------------------------------------------------------------------------------
bool gt_BossCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    ObjectiveShow(gv_objectiveSticksnStones, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveGatherSolarite, PlayerGroupAll(), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(1876950852), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1876950852), false);
    UnitKill(UnitFromId(1988035339));
    UnitAbilityRemove(gv_voidPreserver, "SoulChannel");
    ActorSend(ActorFromDoodad(DoodadFromId(1677498989)), libNtve_gf_Destroy());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_voidPreserver), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_bossPing = PingLastCreated();
    PingSetUnit(gv_bossPing, UnitLastCreated());
    PingSetTooltip(gv_bossPing, StringExternal("Param/Value/5D2DDF88"));
    libCOMI_gf_CreateObjectiveCampaign("SolarGatherSecurePassage");
    gv_objectiveSecure = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    gv_bossIsActive = true;
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_ObjectiveBossUpdate, true);
    TriggerEnable(gt_ObjectiveSecureUpdate, true);
    TriggerEnable(gt_DefeatAmonGatheredSolarite, false);
    TriggerExecute(gt_AttackWaveFinal, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossCreate_Init () {
    gt_BossCreate = TriggerCreate("gt_BossCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Boss - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBossUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_voidPreserver) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_DestroyPingCoop(gv_bossPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBossUpdate_Init () {
    gt_ObjectiveBossUpdate = TriggerCreate("gt_ObjectiveBossUpdate_Func");
    TriggerEnable(gt_ObjectiveBossUpdate, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveBossUpdate, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Secure - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSecureUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroupAlliance(gv_p_ARCHEOLOGISTS, c_unitAllianceEnemy, RegionFromId(70), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterPassive - 32)) | (1 << (c_targetFilterPowerup - 32)) | (1 << (c_targetFilterPowerupOrItem - 32)) | (1 << (c_targetFilterNeutralHostile - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_voidPreserver) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_ZS_SetMissionObjectiveState("SolarGatherSecurePassage", libCOMI_ge_MissionObjectiveState_Completed);
    TriggerEnable(gt_VictoryPrimaryObjectiveComplete, true);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSecureUpdate_Init () {
    gt_ObjectiveSecureUpdate = TriggerCreate("gt_ObjectiveSecureUpdate_Func");
    TriggerEnable(gt_ObjectiveSecureUpdate, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveSecureUpdate, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Convoy Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatConvoyDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Automatic Variable Declarations
    unitgroup autoBDA384C0_g;
    int autoBDA384C0_u;
    unit autoBDA384C0_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RamseyPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("DefeatTRUCK", -1), 0.0, c_transmissionDurationSub, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveRamseyAliveFailed, true, false);
    if ((gv_sOLARITE_ALLY < gv_sOLARITE_GOAL)) {
        TriggerExecute(gt_ObjectiveGatherSolariteFailed, true, false);
    }

    if ((UnitIsAlive(gv_stoneTemplar) == true)) {
        TriggerExecute(gt_ObjectiveSticksnStonesFailed, true, false);
    }

    Wait(2.0, c_timeReal);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_p_USER1), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/E334BB78"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_p_USER2), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FAF0C431"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    lv_cameraTarget = UnitGetPosition(EventUnit());
    Wait(2.0, c_timeReal);
    autoBDA384C0_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBDA384C0_u = UnitGroupCount(autoBDA384C0_g, c_unitCountAll);
    for (;; autoBDA384C0_u -= 1) {
        autoBDA384C0_var = UnitGroupUnitFromEnd(autoBDA384C0_g, autoBDA384C0_u);
        if (autoBDA384C0_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoBDA384C0_var, true);
    }
    CameraLockInput(gv_p_USER1, true);
    CameraLockInput(gv_p_USER2, true);
    UnitClearSelection(gv_p_USER1);
    UnitClearSelection(gv_p_USER2);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_p_USER1)) == false)) {
        CameraApplyInfo(gv_p_USER1, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_p_USER1, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_p_USER2)) == false)) {
        CameraApplyInfo(gv_p_USER2, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_p_USER2, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    Wait(4.0, c_timeReal);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(lib37CC0EF2_gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatConvoyDead_Init () {
    gt_DefeatConvoyDead = TriggerCreate("gt_DefeatConvoyDead_Func");
    TriggerEnable(gt_DefeatConvoyDead, false);
    TriggerAddEventUnitDied(gt_DefeatConvoyDead, UnitRefFromVariable("gv_escortTruck"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Amon Gathered Solarite
//--------------------------------------------------------------------------------------------------
bool gt_DefeatAmonGatheredSolarite_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RamseyPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("DefeatSOLARITE", -1), 0.0, c_transmissionDurationAdd, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveGatherSolariteFailed, true, false);
    if ((libNtve_gf_UnitInRegion(gv_escortTruck, RegionCircle(PointFromId(645653656), 1.0)) == false)) {
        TriggerExecute(gt_ObjectiveRamseyAliveFailed, true, false);
    }

    if ((UnitIsAlive(gv_stoneTemplar) == true)) {
        TriggerExecute(gt_ObjectiveSticksnStonesFailed, true, false);
    }

    Wait(2.0, c_timeReal);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/AED10423"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_p_USER1, true);
    CameraLockInput(gv_p_USER2, true);
    UnitClearSelection(gv_p_USER1);
    UnitClearSelection(gv_p_USER2);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_p_USER1, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    CameraPan(gv_p_USER2, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(lib37CC0EF2_gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatAmonGatheredSolarite_Init () {
    gt_DefeatAmonGatheredSolarite = TriggerCreate("gt_DefeatAmonGatheredSolarite_Func");
    TriggerEnable(gt_DefeatAmonGatheredSolarite, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_sOLARITE_ALLY >= gv_sOLARITE_GOAL))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_escortTruck, RegionCircle(PointFromId(645653656), 1.0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
    TriggerEnable(gt_VictoryPrimaryObjectiveComplete, false);
    TriggerAddEventTimePeriodic(gt_VictoryPrimaryObjectiveComplete, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_loop;
    actor lv_ray;

    // Automatic Variable Declarations
    const fixed autoB2B7BCD1_ae = 10.0;
    const fixed autoB2B7BCD1_ai = 0.5;
    const fixed autoA7C2D484_ae = 4.0;
    const fixed autoA7C2D484_ai = 0.01;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    UnitPauseAll(true);
    UnitClearSelection(gv_p_USER1);
    UnitClearSelection(gv_p_USER2);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    ActorSend(ActorFromDoodad(DoodadFromId(350814590)), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    CameraLockInput(gv_p_USER1, true);
    CameraLockInput(gv_p_USER2, true);
    CameraApplyInfo(gv_p_USER1, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_p_USER1, RegionGetCenter(RegionFromId(67)), 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_p_USER2, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_p_USER2, RegionGetCenter(RegionFromId(67)), 2.0, -1, 10.0, false);
    Wait(2.0, c_timeGame);
    lv_loop = 0.0;
    for ( ; ( (autoB2B7BCD1_ai >= 0 && lv_loop <= autoB2B7BCD1_ae) || (autoB2B7BCD1_ai < 0 && lv_loop >= autoB2B7BCD1_ae) ) ; lv_loop += autoB2B7BCD1_ai ) {
        libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionFromId(67), c_actorIntersectAgainstRadiusContact, (("SetHeight " + FixedToString(lv_loop, c_fixedPrecisionAny))), "Model", "IsStatus Scalable 1");
        Wait(0.0, c_timeGame);
    }
    CameraPan(gv_p_USER1, PointFromId(37847923), 2.0, -1, 10.0, false);
    CameraPan(gv_p_USER2, PointFromId(37847923), 2.0, -1, 10.0, false);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateActorAtPoint("SolariteRay", PointFromId(37847923));
    Wait(0.5, c_timeGame);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_Destroy());
    ActorSend(ActorFromDoodad(DoodadFromId(1677498989)), libNtve_gf_Destroy());
    ActorSend(lv_ray, libNtve_gf_Destroy());
    lv_loop = 2.41;
    for ( ; ( (autoA7C2D484_ai >= 0 && lv_loop <= autoA7C2D484_ae) || (autoA7C2D484_ai < 0 && lv_loop >= autoA7C2D484_ae) ) ; lv_loop += autoA7C2D484_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(824167334)), (("SetHeight " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("RamseyPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("Victory", -1), 0.0, c_transmissionDurationAdd, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    CameraApplyInfo(gv_p_USER1, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_p_USER1, PointFromId(37847923), 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_p_USER2, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_p_USER2, PointFromId(37847923), 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_p_USER1), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E3041CB4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_p_USER2), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/F9411972"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(lib37CC0EF2_gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Spawn Solarite Node
//--------------------------------------------------------------------------------------------------
bool gt_CheatSpawnSolariteNode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SolariteSpawnNode(CameraGetTarget(EventPlayer()), 10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatSpawnSolariteNode_Init () {
    gt_CheatSpawnSolariteNode = TriggerCreate("gt_CheatSpawnSolariteNode_Func");
    TriggerEnable(gt_CheatSpawnSolariteNode, false);
    TriggerAddEventChatMessage(gt_CheatSpawnSolariteNode, c_playerAny, "spawn solarite node", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Add Solarite To Node
//--------------------------------------------------------------------------------------------------
bool gt_CheatAddSolariteToNode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(UnitGroupClosestToPoint(UnitGroup("Solarite", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), CameraGetTarget(1)), "Solarite", UnitGroupClosestToPoint(UnitGroup("Solarite", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), CameraGetTarget(1)), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatAddSolariteToNode_Init () {
    gt_CheatAddSolariteToNode = TriggerCreate("gt_CheatAddSolariteToNode_Func");
    TriggerEnable(gt_CheatAddSolariteToNode, false);
    TriggerAddEventChatMessage(gt_CheatAddSolariteToNode, c_playerAny, "add solarite to node", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Pump Animation
//--------------------------------------------------------------------------------------------------
bool gt_CheatPumpAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromDoodad(DoodadFromId(160540699)), "SetOpacity");
    Wait(5.0, c_timeGame);
    ActorSend(ActorFromDoodad(DoodadFromId(160540699)), "SetOpacity 1.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatPumpAnimation_Init () {
    gt_CheatPumpAnimation = TriggerCreate("gt_CheatPumpAnimation_Func");
    TriggerEnable(gt_CheatPumpAnimation, false);
    TriggerAddEventChatMessage(gt_CheatPumpAnimation, c_playerAny, "pump animation", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - No Lose
//--------------------------------------------------------------------------------------------------
bool gt_CheatNoLose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DefeatConvoyDead, false);
    TriggerEnable(gt_DefeatAmonGatheredSolarite, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatNoLose_Init () {
    gt_CheatNoLose = TriggerCreate("gt_CheatNoLose_Func");
    TriggerEnable(gt_CheatNoLose, false);
    TriggerAddEventChatMessage(gt_CheatNoLose, c_playerAny, "no lose", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Loading Screen
//--------------------------------------------------------------------------------------------------
bool gt_CheatLoadingScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationDefault);
    VisRevealArea(1, RegionEntireMap(), 0.0, false);
    CameraApplyInfo(1, CameraInfoFromId(1388838099), 0.0, -1, 10.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatLoadingScreen_Init () {
    gt_CheatLoadingScreen = TriggerCreate("gt_CheatLoadingScreen_Func");
    TriggerEnable(gt_CheatLoadingScreen, false);
    TriggerAddEventChatMessage(gt_CheatLoadingScreen, c_playerAny, "loading", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Stone Templar
//--------------------------------------------------------------------------------------------------
bool gt_CheatStoneTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto821459D3_g;
    int auto821459D3_u;
    unit auto821459D3_var;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(UnitFromId(1953716634), "StonedTemplar", 1);
    auto821459D3_g = UnitGroup(null, gv_p_ENEMY_SPECIAL, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto821459D3_u = UnitGroupCount(auto821459D3_g, c_unitCountAll);
    for (;; auto821459D3_u -= 1) {
        auto821459D3_var = UnitGroupUnitFromEnd(auto821459D3_g, auto821459D3_u);
        if (auto821459D3_var == null) { break; }
        UnitKill(auto821459D3_var);
    }
    libNtve_gf_SetTacticalAIThink(gv_p_QUADAN, "StoneTemplar", "StoneTemplarAIThink", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatStoneTemplar_Init () {
    gt_CheatStoneTemplar = TriggerCreate("gt_CheatStoneTemplar_Func");
    TriggerEnable(gt_CheatStoneTemplar, false);
    TriggerAddEventChatMessage(gt_CheatStoneTemplar, c_playerAny, "stone templar", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Progress Check
//--------------------------------------------------------------------------------------------------
bool gt_CheatProgressCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/239718B8", "A", IntToText(gv_rOAD));
    TextExpressionSetToken("Param/Expression/239718B8", "B", IntToText(gv_rOAD_NEEDED));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/239718B8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatProgressCheck_Init () {
    gt_CheatProgressCheck = TriggerCreate("gt_CheatProgressCheck_Func");
    TriggerEnable(gt_CheatProgressCheck, false);
    TriggerAddEventChatMessage(gt_CheatProgressCheck, c_playerAny, "progress check", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Victory
//--------------------------------------------------------------------------------------------------
bool gt_CheatVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_VictoryFanfareQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatVictory_Init () {
    gt_CheatVictory = TriggerCreate("gt_CheatVictory_Func");
    TriggerEnable(gt_CheatVictory, false);
    TriggerAddEventChatMessage(gt_CheatVictory, c_playerAny, "victory", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Revive Enemy Gatherers
//--------------------------------------------------------------------------------------------------
bool gt_CheatReviveEnemyGatherers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Reviveenemygatherers, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatReviveEnemyGatherers_Init () {
    gt_CheatReviveEnemyGatherers = TriggerCreate("gt_CheatReviveEnemyGatherers_Func");
    TriggerEnable(gt_CheatReviveEnemyGatherers, false);
    TriggerAddEventChatMessage(gt_CheatReviveEnemyGatherers, c_playerAny, "revive enemy gatherers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Escort One
//--------------------------------------------------------------------------------------------------
bool gt_CheatEscortOne_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EscortSendTruck(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatEscortOne_Init () {
    gt_CheatEscortOne = TriggerCreate("gt_CheatEscortOne_Func");
    TriggerEnable(gt_CheatEscortOne, false);
    TriggerAddEventChatMessage(gt_CheatEscortOne, c_playerAny, "escort one", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Escort Two
//--------------------------------------------------------------------------------------------------
bool gt_CheatEscortTwo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EscortSendTruck(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatEscortTwo_Init () {
    gt_CheatEscortTwo = TriggerCreate("gt_CheatEscortTwo_Func");
    TriggerEnable(gt_CheatEscortTwo, false);
    TriggerAddEventChatMessage(gt_CheatEscortTwo, c_playerAny, "escort two", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Escort Three
//--------------------------------------------------------------------------------------------------
bool gt_CheatEscortThree_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EscortSendTruck(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatEscortThree_Init () {
    gt_CheatEscortThree = TriggerCreate("gt_CheatEscortThree_Func");
    TriggerEnable(gt_CheatEscortThree, false);
    TriggerAddEventChatMessage(gt_CheatEscortThree, c_playerAny, "escort three", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat - Escort Four
//--------------------------------------------------------------------------------------------------
bool gt_CheatEscortFour_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EscortSendTruck(4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatEscortFour_Init () {
    gt_CheatEscortFour = TriggerCreate("gt_CheatEscortFour_Func");
    TriggerEnable(gt_CheatEscortFour, false);
    TriggerAddEventChatMessage(gt_CheatEscortFour, c_playerAny, "escort four", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01CommandersReady_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_Init09AI_Init();
    gt_EnemyAttackingTransmission_Init();
    gt_HarassWaveTransmission_Init();
    gt_ObjectiveWaveCycle1_Init();
    gt_ObjectiveWaveCycle2_Init();
    gt_ObjectiveWaveCycle3_Init();
    gt_ObjectiveWaveCycle4_Init();
    gt_ObjectiveWaveCycle5_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03ExpoAttack_Init();
    gt_AttackWave04OppositeExpoAttack_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWaveFinal_Init();
    gt_SolariteGatherSolariteQ_Init();
    gt_SolariteEnemyGatherersQ_Init();
    gt_SolariteAllyGatherersQ_Init();
    gt_SolaritePumps_Init();
    gt_SolariteCracks_Init();
    gt_SolariteCracksOld_Init();
    gt_SolariteExplanation1Transmission_Init();
    gt_SolariteExplanation2Transmission_Init();
    gt_EnemyGatherersTransmission_Init();
    gt_SolaritePlayers75_Init();
    gt_SolaritePlayers50_Init();
    gt_SolaritePlayers25_Init();
    gt_SolariteAmon75_Init();
    gt_SolariteAmon50_Init();
    gt_SolariteAmon25_Init();
    gt_MapObjectInteract_Init();
    gt_GatherSolariteStoreunitgatheringsolarite_Init();
    gt_GatherSolariteRemovefromunitgroupifstops_Init();
    gt_GatherSolariteIssuetokeepgatheringifsolaritedies_Init();
    gt_GatherSolariteIssuetokeepgatheringifsolaritedies2_Init();
    gt_GatherSolariteForceReturn_Init();
    gt_GatherSolariteTextTags_Init();
    gt_Createenemygatherers_Init();
    gt_Reviveenemygatherers_Init();
    gt_Createallygatherers_Init();
    gt_Reviveallygatherers_Init();
    gt_SolariteCreateTutorialNodes_Init();
    gt_SolariteDestroyHelperRight_Init();
    gt_SolariteDestroyHelperLeft_Init();
    gt_IniActors_Init();
    gt_SolariteCrabs_Init();
    gt_SolariteBeetle_Init();
    gt_SolariteElemental_Init();
    gt_SollariteCarry_Init();
    gt_ObjectiveGatherSolariteCreate_Init();
    gt_ObjectiveGatherSolariteComplete_Init();
    gt_ObjectiveGatherSolariteUpdate_Init();
    gt_ObjectiveGatherSolariteFailed_Init();
    gt_SolariteTextTag_Init();
    gt_ResizeSolariteCore_Init();
    gt_SolaritePingCheck_Init();
    gt_SolariteAmountChanged_Init();
    gt_SolariteEscortTruckQ_Init();
    gt_ObjectiveRamseyAliveCreate_Init();
    gt_ObjectiveRamseyAliveComplete_Init();
    gt_ObjectiveRamseyAliveUpdate_Init();
    gt_ObjectiveRamseyAliveFailed_Init();
    gt_EscortTruckTransmission_Init();
    gt_TransmissionTruckPreparingQ_Init();
    gt_TransmissionTruckDepartQ_Init();
    gt_TransmissionTruckArriveQ_Init();
    gt_TransmissionConvoyreceivesdamagefirsttimeQ_Init();
    gt_TransmissionConvoyreceivesdamage75HP_Init();
    gt_TransmissionConvoyreceivesdamage50HP_Init();
    gt_TransmissionConvoyreceivesdamage25HP_Init();
    gt_TransmissionConvoyreceivesdamage10HP_Init();
    gt_EscortShowresearchfacilities_Init();
    gt_EscortCreating_Init();
    gt_EscortArrived_Init();
    gt_EscortProcessing_Init();
    gt_EscortTimerExpires_Init();
    gt_EscortCheckSolariteAmount_Init();
    gt_EscortPreparing_Init();
    gt_ObjectiveSticksnStonesCreate_Init();
    gt_ObjectiveSticksnStonesComplete_Init();
    gt_ObjectiveSticksnStonesFailed_Init();
    gt_ObjectiveSticksnStonesUpdate_Init();
    gt_ObjectiveSticksnStonesCheck_Init();
    gt_ObjectiveSticksVOStart_Init();
    gt_ObjectiveSticksnStonesVOWarning_Init();
    gt_ObjectiveSticksnStonesVOWarningFinal_Init();
    gt_ObjectiveSticksVOFailed_Init();
    gt_ObjectiveSticksVOComplete_Init();
    gt_ObjectiveSticksnStonesPoke_Init();
    gt_ObjectiveSticksnStonesIntialization_Init();
    gt_ObjectiveSticksnStonesTimerUpdate_Init();
    gt_ObjectiveSticksnStonesProgressCheck_Init();
    gt_StoneLifeCheck_Init();
    gt_StoneTimerExpire_Init();
    gt_StoneInterceptorTooltip_Init();
    gt_BossCreate_Init();
    gt_ObjectiveBossUpdate_Init();
    gt_ObjectiveSecureUpdate_Init();
    gt_DefeatConvoyDead_Init();
    gt_DefeatAmonGatheredSolarite_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_CheatSpawnSolariteNode_Init();
    gt_CheatAddSolariteToNode_Init();
    gt_CheatPumpAnimation_Init();
    gt_CheatNoLose_Init();
    gt_CheatLoadingScreen_Init();
    gt_CheatStoneTemplar_Init();
    gt_CheatProgressCheck_Init();
    gt_CheatVictory_Init();
    gt_CheatReviveEnemyGatherers_Init();
    gt_CheatEscortOne_Init();
    gt_CheatEscortTwo_Init();
    gt_CheatEscortThree_Init();
    gt_CheatEscortFour_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
