<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="0F40941E"/>
    </Root>
    <Element Type="CustomScript" Id="0F40941E">
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated AI Script
            // 
            // AI Name: Hybrid Wave AI
            // 
            //==================================================================================================
            include &quot;TriggerLibs/natives&quot;
            include &quot;TriggerLibs/AI&quot;
            include &quot;TriggerLibs/Computer&quot;
            //--------------------------------------------------------------------------------------------------
            // Globals
            //--------------------------------------------------------------------------------------------------
            point[17] aiF917F4D7_defGather;
            string[17] aiF917F4D7_customData;
            wave[17] aiF917F4D7_lastWave;
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave1_enabled;
            wave[17] aiF917F4D7_wave1_lastWave;
            trigger aiF917F4D7_wave1_trigger = null;
            int aiF917F4D7_wave1_runPlayer;
            playergroup aiF917F4D7_wave1_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave1_enabled[init_i] = true;
                    aiF917F4D7_wave1_lastWave[init_i] = null;
                }
                aiF917F4D7_wave1_trigger = TriggerCreate(&quot;aiF917F4D7_wave1_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave1_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave1_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave1_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave1_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave1_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave1_runPlayer;
                playergroup target = aiF917F4D7_wave1_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave1_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave01_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave1_runPlayer = p;
                aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave2_enabled;
            wave[17] aiF917F4D7_wave2_lastWave;
            trigger aiF917F4D7_wave2_trigger = null;
            int aiF917F4D7_wave2_runPlayer;
            playergroup aiF917F4D7_wave2_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave2_enabled[init_i] = true;
                    aiF917F4D7_wave2_lastWave[init_i] = null;
                }
                aiF917F4D7_wave2_trigger = TriggerCreate(&quot;aiF917F4D7_wave2_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave2_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave2_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave2_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave2_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave2_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave2_runPlayer;
                playergroup target = aiF917F4D7_wave2_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave2_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave02_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave2_runPlayer = p;
                aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave3_enabled;
            wave[17] aiF917F4D7_wave3_lastWave;
            trigger aiF917F4D7_wave3_trigger = null;
            int aiF917F4D7_wave3_runPlayer;
            playergroup aiF917F4D7_wave3_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave3_enabled[init_i] = true;
                    aiF917F4D7_wave3_lastWave[init_i] = null;
                }
                aiF917F4D7_wave3_trigger = TriggerCreate(&quot;aiF917F4D7_wave3_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave3_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave3_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave3_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave3_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave3_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave3_runPlayer;
                playergroup target = aiF917F4D7_wave3_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave3_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave03_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave3_runPlayer = p;
                aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave4_enabled;
            wave[17] aiF917F4D7_wave4_lastWave;
            trigger aiF917F4D7_wave4_trigger = null;
            int aiF917F4D7_wave4_runPlayer;
            playergroup aiF917F4D7_wave4_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave4_enabled[init_i] = true;
                    aiF917F4D7_wave4_lastWave[init_i] = null;
                }
                aiF917F4D7_wave4_trigger = TriggerCreate(&quot;aiF917F4D7_wave4_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave4_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave4_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave4_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave4_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave4_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave4_runPlayer;
                playergroup target = aiF917F4D7_wave4_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave4_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave04_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave4_runPlayer = p;
                aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave5_enabled;
            wave[17] aiF917F4D7_wave5_lastWave;
            trigger aiF917F4D7_wave5_trigger = null;
            int aiF917F4D7_wave5_runPlayer;
            playergroup aiF917F4D7_wave5_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave5_enabled[init_i] = true;
                    aiF917F4D7_wave5_lastWave[init_i] = null;
                }
                aiF917F4D7_wave5_trigger = TriggerCreate(&quot;aiF917F4D7_wave5_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave5_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave5_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave5_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave5_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave5_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave5_runPlayer;
                playergroup target = aiF917F4D7_wave5_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave5_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave05_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave5_runPlayer = p;
                aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave6_enabled;
            wave[17] aiF917F4D7_wave6_lastWave;
            trigger aiF917F4D7_wave6_trigger = null;
            int aiF917F4D7_wave6_runPlayer;
            playergroup aiF917F4D7_wave6_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave6_enabled[init_i] = true;
                    aiF917F4D7_wave6_lastWave[init_i] = null;
                }
                aiF917F4D7_wave6_trigger = TriggerCreate(&quot;aiF917F4D7_wave6_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave6_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave6_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave6_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave6_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave6_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave6_runPlayer;
                playergroup target = aiF917F4D7_wave6_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave6_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave06_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave6_runPlayer = p;
                aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave7_enabled;
            wave[17] aiF917F4D7_wave7_lastWave;
            trigger aiF917F4D7_wave7_trigger = null;
            int aiF917F4D7_wave7_runPlayer;
            playergroup aiF917F4D7_wave7_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave7_enabled[init_i] = true;
                    aiF917F4D7_wave7_lastWave[init_i] = null;
                }
                aiF917F4D7_wave7_trigger = TriggerCreate(&quot;aiF917F4D7_wave7_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave7_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave7_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave7_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave7_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave7_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave7_runPlayer;
                playergroup target = aiF917F4D7_wave7_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave7_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave07_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave7_runPlayer = p;
                aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Wrappers
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave_enable (int w, int p, bool val) {
                if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
                if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
                if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
                if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
                if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
                if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
                if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave_isEnabled (int w, int p) {
                if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
                if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
                if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
                if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
                if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
                if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
                if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave_createdWave (int w, int p) {
                if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
                if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
                if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
                if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
                if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
                if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
                if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
                if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
                if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
                if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
                if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
                if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
                if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
                if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Sequence
            //--------------------------------------------------------------------------------------------------
            trigger aiF917F4D7_waves_trigger = null;
            int aiF917F4D7_waves_runPlayer;
            playergroup aiF917F4D7_waves_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_init () {
                aiF917F4D7_waves_trigger = TriggerCreate(&quot;aiF917F4D7_waves_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_waves_runFunc (bool c, bool a) {
                int p = aiF917F4D7_waves_runPlayer;
                playergroup target = aiF917F4D7_waves_runTarget;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                aiF917F4D7_wave1_run(p, target, true);
                aiF917F4D7_wave2_run(p, target, true);
                aiF917F4D7_wave3_run(p, target, true);
                aiF917F4D7_wave4_run(p, target, true);
                aiF917F4D7_wave5_run(p, target, true);
                aiF917F4D7_wave6_run(p, target, true);
                aiF917F4D7_wave7_run(p, target, true);
                while (true) {
                    aiF917F4D7_wave7_run(p, target, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_run (int p, playergroup target) {
                aiF917F4D7_waves_runPlayer = p;
                aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_waves_trigger, false, false);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave1_enable(p, val);
                aiF917F4D7_wave2_enable(p, val);
                aiF917F4D7_wave3_enable(p, val);
                aiF917F4D7_wave4_enable(p, val);
                aiF917F4D7_wave5_enable(p, val);
                aiF917F4D7_wave6_enable(p, val);
                aiF917F4D7_wave7_enable(p, val);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_stop () {
                TriggerStop(aiF917F4D7_waves_trigger);
                TriggerStop(aiF917F4D7_wave1_trigger);
                TriggerStop(aiF917F4D7_wave2_trigger);
                TriggerStop(aiF917F4D7_wave3_trigger);
                TriggerStop(aiF917F4D7_wave4_trigger);
                TriggerStop(aiF917F4D7_wave5_trigger);
                TriggerStop(aiF917F4D7_wave6_trigger);
                TriggerStop(aiF917F4D7_wave7_trigger);
            }
            //--------------------------------------------------------------------------------------------------
            // Configuration
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_defGather[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            string aiF917F4D7_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_customData[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            // Start
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_initialized = false;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_start (int p) {
                int init_i;
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (!aiF917F4D7_initialized) {
                    aiF917F4D7_wave1_init();
                    aiF917F4D7_wave2_init();
                    aiF917F4D7_wave3_init();
                    aiF917F4D7_wave4_init();
                    aiF917F4D7_wave5_init();
                    aiF917F4D7_wave6_init();
                    aiF917F4D7_wave7_init();
                    aiF917F4D7_waves_init();
                    for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                        aiF917F4D7_defGather[init_i] = PointFromId(0);
                    }
                    aiF917F4D7_initialized = true;
                }
                AICampaignStart(p);
            }
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   RTC 2017: Armory Retaking
            // 
            //==================================================================================================
            include &quot;TriggerLibs/NativeLib&quot;
            include &quot;LibCOMI&quot;
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void InitLibs () {
                libNtve_InitLib();
                libCOMI_InitLib();
            }
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            const int gv_pLAYER_01_USER = 1;
            const int gv_pLAYER_02_USER = 2;
            const int gv_pLAYER_03_ENEMY = 3;
            const int gv_pLAYER_04_ENEMY = 4;
            const int gv_pLAYER_05ODIN = 5;
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            playergroup gv_enemyGroup;
            int gv_blackSheepWallOnOff;
            unit gv_terrazineGasTruck;
            int gv_truckandOdinPing;
            unit gv_beacon;
            bool gv_truckArrived;
            point[256] gv_odinLanePoint;
            int gv_odinLanePointTotalValue;
            unit gv_odinUnit;
            int gv_odinUnitPing;
            int gv_odinBeDestroyedCount;
            int gv_odinRebuildableTotalCount;
            fixed gv_odinBuildTime;
            unit gv_odinFactoryGate;
            point[256] gv_odinTrackPoint;
            int gv_odinTrackPointTotalValue;
            int gv_odinTrackPointNumber;
            int gv_odinTrackPhase;
            int gv_odinBreakTime;
            int[4] gv_hybridHoldingCellHitPoint;
            fixed gv_toolAnimStartTime;
            fixed gv_toolAnimEndTime;
            fixed gv_toolAnimRepairTime;
            int gv_destroyingHybridHoldingCellCount;
            unitgroup gv_hybridHoldingCellGroup;
            int[4] gv_mainObjectivePing;
            int[4] gv_bonusObjectivePing;
            unitgroup gv_bonusCrucioRoofGroup;
            unitgroup gv_bonusDetectorRoofGroup;
            unitgroup gv_bonusInfernalRoofGroup;
            point gv_attackWaveA_Wave05Path;
            int gv_objectiveEscortOdinandDestroyAllHybridHoldingCells;
            int gv_objectiveDoNotLetOdinBeDestroyed;
            int gv_objectiveRescueStalkers;
            int gv_objectiveRescueStalkers2;
            int gv_objectiveRescueStalkers3;
            int gv_objectiveWeaponryPartsPhase;
            int gv_objectiveRemainingWeaponryParts;
            void InitGlobals () {
                int init_i;
                gv_enemyGroup = PlayerGroupEmpty();
                gv_terrazineGasTruck = UnitFromId(59839973);
                gv_truckandOdinPing = c_invalidPingId;
                gv_odinLanePointTotalValue = 164;
                gv_odinUnit = UnitFromId(2130817208);
                gv_odinUnitPing = c_invalidPingId;
                gv_odinRebuildableTotalCount = 4;
                gv_odinBuildTime = 75.0;
                gv_odinFactoryGate = UnitFromId(51363464);
                gv_odinTrackPointTotalValue = 55;
                gv_odinBreakTime = 120;
                for (init_i = 0; init_i &lt;= 3; init_i += 1) {
                    gv_hybridHoldingCellHitPoint[init_i] = 1500;
                }
                gv_toolAnimStartTime = 6.0;
                gv_toolAnimEndTime = 12.0;
                gv_toolAnimRepairTime = (gv_odinBreakTime - (gv_toolAnimStartTime + (gv_toolAnimEndTime - 1.0)));
                gv_hybridHoldingCellGroup = UnitGroupEmpty();
                for (init_i = 0; init_i &lt;= 3; init_i += 1) {
                    gv_mainObjectivePing[init_i] = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 3; init_i += 1) {
                    gv_bonusObjectivePing[init_i] = c_invalidPingId;
                }
                gv_bonusCrucioRoofGroup = UnitGroupEmpty();
                gv_bonusDetectorRoofGroup = UnitGroupEmpty();
                gv_bonusInfernalRoofGroup = UnitGroupEmpty();
                gv_objectiveEscortOdinandDestroyAllHybridHoldingCells = c_invalidObjectiveId;
                gv_objectiveDoNotLetOdinBeDestroyed = c_invalidObjectiveId;
                gv_objectiveRescueStalkers = c_invalidObjectiveId;
                gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
                gv_objectiveRescueStalkers3 = c_invalidObjectiveId;
                gv_objectiveRemainingWeaponryParts = 3;
            }
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
            void gf_GiantAttentionGrabbingPing (point lp_pingLocation);
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_Init01LoadData;
            trigger gt_Init02Players;
            trigger gt_Init03LoadingComplete;
            trigger gt_Init04Technology;
            trigger gt_Init05Units;
            trigger gt_Init06MusicSound;
            trigger gt_Init07Environment;
            trigger gt_Init08Difficulties;
            trigger gt_DebugCantFail;
            trigger gt_DebugBlackSheepWall;
            trigger gt_DebugUpgradeOdinWeaponCrucio;
            trigger gt_DebugUpgradeOdinWeaponInfernal;
            trigger gt_DebugUpgradeOdinWeaponDetector;
            trigger gt_StartGameQ;
            trigger gt_MovetheTerrazineGasTruck;
            trigger gt_ArrivetheTerrazineGasTruck;
            trigger gt_ScoreScreenOdinLifeLeft;
            trigger gt_SetOdinLanePointVariable;
            trigger gt_RevealOdinLanePoint;
            trigger gt_BuildOdin;
            trigger gt_OpenGate;
            trigger gt_SetOdinTrackPointVariable;
            trigger gt_MoveOdin;
            trigger gt_ArriveandDepartOdinShelter;
            trigger gt_RemoveOdinTrackPoint01;
            trigger gt_RemoveOdinTrackPoint02;
            trigger gt_RemoveOdinTrackPoint03;
            trigger gt_RemoveOdinTrackPoint04;
            trigger gt_RemoveOdinTrackPoint05;
            trigger gt_RemoveOdinTrackPoint06;
            trigger gt_RemoveOdinTrackPoint07;
            trigger gt_RemoveOdinTrackPoint08;
            trigger gt_RemoveOdinTrackPoint09;
            trigger gt_RemoveOdinTrackPoint10;
            trigger gt_RemoveOdinTrackPoint11;
            trigger gt_RemoveOdinTrackPoint12;
            trigger gt_RemoveOdinTrackPoint13;
            trigger gt_RemoveOdinTrackPoint14;
            trigger gt_RemoveOdinTrackPoint15;
            trigger gt_RemoveOdinTrackPoint16;
            trigger gt_RemoveOdinTrackPoint17;
            trigger gt_RemoveOdinTrackPoint18;
            trigger gt_RemoveOdinTrackPoint19;
            trigger gt_RemoveOdinTrackPoint20;
            trigger gt_RemoveOdinTrackPoint21;
            trigger gt_RemoveOdinTrackPoint22;
            trigger gt_RemoveOdinTrackPoint23;
            trigger gt_RemoveOdinTrackPoint24;
            trigger gt_RemoveOdinTrackPoint25;
            trigger gt_RemoveOdinTrackPoint26;
            trigger gt_RemoveOdinTrackPoint27;
            trigger gt_RemoveOdinTrackPoint28;
            trigger gt_RemoveOdinTrackPoint29;
            trigger gt_RemoveOdinTrackPoint30;
            trigger gt_RemoveOdinTrackPoint31;
            trigger gt_RemoveOdinTrackPoint32;
            trigger gt_RemoveOdinTrackPoint33;
            trigger gt_RemoveOdinTrackPoint34;
            trigger gt_RemoveOdinTrackPoint35;
            trigger gt_RemoveOdinTrackPoint36;
            trigger gt_RemoveOdinTrackPoint37;
            trigger gt_RemoveOdinTrackPoint38;
            trigger gt_RemoveOdinTrackPoint39;
            trigger gt_RemoveOdinTrackPoint40;
            trigger gt_RemoveOdinTrackPoint41;
            trigger gt_RemoveOdinTrackPoint42;
            trigger gt_RemoveOdinTrackPoint43;
            trigger gt_RemoveOdinTrackPoint44;
            trigger gt_RemoveOdinTrackPoint45;
            trigger gt_RemoveOdinTrackPoint46;
            trigger gt_RemoveOdinTrackPoint47;
            trigger gt_RemoveOdinTrackPoint48;
            trigger gt_RemoveOdinTrackPoint49;
            trigger gt_RemoveOdinTrackPoint50;
            trigger gt_RemoveOdinTrackPoint51;
            trigger gt_RemoveOdinTrackPoint52;
            trigger gt_RemoveOdinTrackPoint53;
            trigger gt_RemoveOdinTrackPoint54;
            trigger gt_RemoveOdinTrackPoint55;
            trigger gt_UseBarrage;
            trigger gt_CalldownEliteMULE;
            trigger gt_MorphOdinWreckage;
            trigger gt_MorphOdinWreckageStartRebuild;
            trigger gt_CreateOdinRebuildTool;
            trigger gt_MorphOdinRebuildFinish;
            trigger gt_CreateMainObjectivePing;
            trigger gt_DestroyHybridHoldingCell;
            trigger gt_BonusObjectiveSpotted;
            trigger gt_CreateBonusObjective;
            trigger gt_BonusObjectiveGateControlDies;
            trigger gt_BonusObjectivePicksupCrucio;
            trigger gt_BonusObjectivePicksupInfernal;
            trigger gt_BonusObjectivePicksupDetector;
            trigger gt_BonusObjectivePicksup;
            trigger gt_ObtainWeaponryPartsCrucioShockCannon;
            trigger gt_ObtainWeaponryPartsInfernalFlamethrower;
            trigger gt_ObtainWeaponryPartsDetector;
            trigger gt_TipReadyQ;
            trigger gt_EnemyAttackingQ;
            trigger gt_AmonSendingForcestoOdinQ;
            trigger gt_TruckDepartingQ;
            trigger gt_TruckArrivingQ;
            trigger gt_OdinFinishingQ;
            trigger gt_OdinArrivingintheShelter1Q;
            trigger gt_OdinArrivingintheShelter2Q;
            trigger gt_OdinArrivingintheShelter3Q;
            trigger gt_OdinDepartingfromtheFactory0Q;
            trigger gt_OdinDepartingfromtheShelter1Q;
            trigger gt_OdinDepartingfromtheShelter2Q;
            trigger gt_OdinDepartingfromtheShelter3Q;
            trigger gt_HybridStasisCellLocated1Q;
            trigger gt_HybridStasisCellLocated2Q;
            trigger gt_HybridStasisCellLocated3Q;
            trigger gt_OdinUnderAttackQ;
            trigger gt_OdinWarning50Q;
            trigger gt_OdinWarning25Q;
            trigger gt_OdinCriticalQ;
            trigger gt_OdinRebuildingStartQ;
            trigger gt_OdinRebuildingFinishQ;
            trigger gt_OdinRebuildingStartLastQ;
            trigger gt_OdinRebuildingFinishLastQ;
            trigger gt_BonusObjectiveRevealQ;
            trigger gt_BonusObjectiveProgressCrucioQ;
            trigger gt_BonusObjectiveProgressInfernalQ;
            trigger gt_BonusObjectiveProgressDetectorQ;
            trigger gt_BonusObjectiveProgressDoorBeOpenedQ;
            trigger gt_BonusObjectiveProgressWeaponRemainingQ;
            trigger gt_BonusObjectiveCompleteAllQ;
            trigger gt_VictoryPrimaryObjectiveComplete;
            trigger gt_VictorySequence;
            trigger gt_VictoryFanfareQ;
            trigger gt_DefeatEscorttheOdinFailedOdinRebuidCountisend;
            trigger gt_Victory;
            trigger gt_Defeat;
            trigger gt_StartAI;
            trigger gt_SendForcestoOdin;
            trigger gt_SendingForcestoOdinA;
            trigger gt_SendingForcestoOdinB;
            trigger gt_SendingForcestoOdinC;
            trigger gt_SendingForcestoOdinD;
            trigger gt_AIAttackWaves;
            trigger gt_AttackWave01;
            trigger gt_AttackWave02;
            trigger gt_AttackWave03;
            trigger gt_AttackWave04;
            trigger gt_AttackWave05;
            trigger gt_AttackWave06;
            trigger gt_AttackWave07;
            trigger gt_ObjectiveEscortOdinCreate;
            trigger gt_ObjectiveEscortOdinComplete;
            trigger gt_ObjectiveEscortOdinUpdate;
            trigger gt_ObjectiveEscortOdinFailed;
            trigger gt_ObjectiveObtainWeaponryPartsCreate;
            trigger gt_ObjectiveObtainWeaponryPartsComplete;
            trigger gt_ObjectiveObtainWeaponryPartsUpdate;
            trigger gt_ObjectiveObtainWeaponryPartsFailed;
            //--------------------------------------------------------------------------------------------------
            // Custom AI Functions
            //--------------------------------------------------------------------------------------------------
            string[17] cai_playerAI;
            //--------------------------------------------------------------------------------------------------
            void InitCustomAI () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    cai_playerAI[init_i] = null;
                }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_start (string ai, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                cai_playerAI[p] = ai;
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_start(p); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_setDefGather(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            string cai_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_getCustomData(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_getLastWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_run (int p, playergroup target) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_run(p, target); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_stop (string ai) {
                if (ai == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_stop(); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_run (int w, int p, playergroup target, bool wait) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_wave_run(w, p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_enable (int w, int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_wave_enable(w, p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool cai_wave_isEnabled (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_isEnabled(w, p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup cai_wave_createdUnits (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_createdUnits(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_wave_createdWave (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_createdWave(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_startall () {
                AICampaignStart(3);
                AICampaignStart(4);
            }
            //--------------------------------------------------------------------------------------------------
            void cai_runall () {
                playergroup target = PlayerGroupEmpty();
            }
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            trigger auto_gf_RunMissionEvent_Trigger = null;
            trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
            fixed auto_gf_RunMissionEvent_lp_missionEventTime;
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
                auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
                auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
                if (auto_gf_RunMissionEvent_Trigger == null) {
                    auto_gf_RunMissionEvent_Trigger = TriggerCreate(&quot;auto_gf_RunMissionEvent_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
            }
            bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
                fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
                // Implementation
                while (!((GameGetMissionTime() &gt;= lp_missionEventTime))) {
                    Wait(0.5, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_missionEventTrigger, true, false);
                }
                return true;
            }
            trigger auto_gf_GiantAttentionGrabbingPing_Trigger = null;
            point auto_gf_GiantAttentionGrabbingPing_lp_pingLocation;
            void gf_GiantAttentionGrabbingPing (point lp_pingLocation) {
                auto_gf_GiantAttentionGrabbingPing_lp_pingLocation = lp_pingLocation;
                if (auto_gf_GiantAttentionGrabbingPing_Trigger == null) {
                    auto_gf_GiantAttentionGrabbingPing_Trigger = TriggerCreate(&quot;auto_gf_GiantAttentionGrabbingPing_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_GiantAttentionGrabbingPing_Trigger, false, false);
            }
            bool auto_gf_GiantAttentionGrabbingPing_TriggerFunc (bool testConds, bool runActions) {
                point lp_pingLocation = auto_gf_GiantAttentionGrabbingPing_lp_pingLocation;
                int autoD49330BE_ae;
                int autoD49330BE_ai;
                // Variable Declarations
                int lv_scaleIter;
                fixed lv_pingScale;
                int lv_SpiningShrinkingPing;
                // Variable Initialization
                lv_SpiningShrinkingPing = c_invalidPingId;
                // Implementation
                libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_pingLocation, 270.0, &quot;PingObjective&quot;, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
                lv_SpiningShrinkingPing = PingLastCreated();
                PingSetScale(lv_SpiningShrinkingPing, 3.0);
                autoD49330BE_ae = 20;
                autoD49330BE_ai = -1;
                lv_scaleIter = 40;
                for ( ; ( (autoD49330BE_ai &gt;= 0 &amp;&amp; lv_scaleIter &lt;= autoD49330BE_ae) || (autoD49330BE_ai &lt;= 0 &amp;&amp; lv_scaleIter &gt;= autoD49330BE_ae) ) ; lv_scaleIter += autoD49330BE_ai ) {
                    lv_pingScale = (lv_scaleIter * 0.1);
                    PingSetScale(lv_SpiningShrinkingPing, lv_pingScale);
                    PingSetRotation(lv_SpiningShrinkingPing, (360 - (ModF(lv_scaleIter, 10.0) * 36)));
                    Wait(0.1, c_timeReal);
                }
                libCOMI_gf_DestroyPingCoop(lv_SpiningShrinkingPing);
                return true;
            }
            trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
            trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
            fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
                auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
                auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
                if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
                    auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate(&quot;auto_gf_RunAttackWaveatMissionTime_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
            }
            bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
                fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
                // Implementation
                while (!((lp_time &lt;= GameGetMissionTime()))) {
                    Wait(0.3, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_attackWave, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 01 Load Data
            //--------------------------------------------------------------------------------------------------
            bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_LoadCoopMission(&quot;COOP_Placeholder&quot;, gt_Init03LoadingComplete);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init01LoadData_Init () {
                gt_Init01LoadData = TriggerCreate(&quot;gt_Init01LoadData_Func&quot;);
                TriggerAddEventMapInit(gt_Init01LoadData);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 02 Players
            //--------------------------------------------------------------------------------------------------
            bool gt_Init02Players_Func (bool testConds, bool runActions) {
                if (!runActions) {
                    return true;
                }
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 66);
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 108);
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 105);
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 122);
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 122);
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 97);
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 114);
                PlayerModifyPropertyInt(gv_pLAYER_05ODIN, c_playerPropTerrazine, c_playerPropOperAdd, 100);
                AISetDifficulty(gv_pLAYER_03_ENEMY, c_diffRepairDamage, false);
                AISetDifficulty(gv_pLAYER_04_ENEMY, c_diffRepairDamage, false);
                AISetDifficulty(gv_pLAYER_03_ENEMY, c_diffFleeWorkers, false);
                AISetDifficulty(gv_pLAYER_04_ENEMY, c_diffFleeWorkers, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init02Players_Init () {
                gt_Init02Players = TriggerCreate(&quot;gt_Init02Players_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 03 Loading Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_Init02Players, true, false);
                TriggerExecute(gt_Init04Technology, true, false);
                TriggerExecute(gt_Init05Units, true, false);
                TriggerExecute(gt_Init06MusicSound, true, false);
                TriggerExecute(gt_Init07Environment, true, false);
                TriggerExecute(gt_Init08Difficulties, true, false);
                TriggerExecute(gt_StartAI, true, false);
                TriggerExecute(gt_StartGameQ, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init03LoadingComplete_Init () {
                gt_Init03LoadingComplete = TriggerCreate(&quot;gt_Init03LoadingComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 04 Technology
            //--------------------------------------------------------------------------------------------------
            bool gt_Init04Technology_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init04Technology_Init () {
                gt_Init04Technology = TriggerCreate(&quot;gt_Init04Technology_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 05 Units
            //--------------------------------------------------------------------------------------------------
            bool gt_Init05Units_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_gateControlGroupLocal;
                unitgroup lv_rocksSmallGroupLocal;
                unitgroup lv_rocksBigGroupLocal;
                unitgroup lv_gateGroupLocal;
                // Variable Initialization
                lv_gateControlGroupLocal = UnitGroupEmpty();
                lv_rocksSmallGroupLocal = UnitGroupEmpty();
                lv_rocksBigGroupLocal = UnitGroupEmpty();
                lv_gateGroupLocal = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_AttachModelToUnit(UnitFromId(59839973), &quot;NovaTerrazineCanister&quot;, &quot;Ref_Hardpoint&quot;);
                libNtve_gf_SendActorMessageToUnit(UnitFromId(59839973), &quot;Signal ArtifactLoaded&quot;);
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(323036060));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(2126767531));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(2143720393));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(1283566047));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(1977657910));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(1668052510));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(1833535691));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(601796437));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(979813431));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(1105100934));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(25400878));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(1542725487));
                UnitGroupAdd(gv_bonusCrucioRoofGroup, UnitFromId(328715646));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1332025467));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1450273801));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1017870742));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1538991637));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1368923941));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1834391360));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(2133770672));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1563214041));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(268396307));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(1886492819));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(477542389));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(546438071));
                UnitGroupAdd(gv_bonusDetectorRoofGroup, UnitFromId(2102023615));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(814091778));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(105184614));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(1022216016));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(1256834638));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(667466509));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(1066331359));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(1699068365));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(2053603441));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(907140736));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(307351377));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(935622126));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(278656481));
                UnitGroupAdd(gv_bonusInfernalRoofGroup, UnitFromId(1050735520));
                UnitGroupAdd(lv_rocksSmallGroupLocal, UnitFromId(1538944140));
                UnitGroupAdd(lv_rocksSmallGroupLocal, UnitFromId(378341203));
                UnitGroupAdd(lv_rocksSmallGroupLocal, UnitFromId(2060833635));
                UnitGroupAdd(lv_rocksSmallGroupLocal, UnitFromId(277049212));
            
                UnitGroupAdd(lv_gateControlGroupLocal, UnitFromId(208664152));
                UnitGroupAdd(lv_gateControlGroupLocal, UnitFromId(1505844463));
                UnitGroupAdd(lv_gateControlGroupLocal, UnitFromId(825880432));
                UnitGroupLoopBegin(lv_gateControlGroupLocal);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetInfoTip(UnitGroupLoopCurrent(), StringExternal(&quot;Param/Value/B734DB54&quot;));
                    libNtve_gf_AttachModelToUnit(UnitGroupLoopCurrent(), &quot;BriefingUnitSelectLargeRed&quot;, &quot;Ref_Origin&quot;);
                }
                UnitGroupLoopEnd();
                UnitGroupAdd(gv_hybridHoldingCellGroup, UnitFromId(685744180));
                UnitGroupAdd(gv_hybridHoldingCellGroup, UnitFromId(1850759431));
                UnitGroupAdd(gv_hybridHoldingCellGroup, UnitFromId(1651552205));
                UnitGroupLoopBegin(gv_hybridHoldingCellGroup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetInfoTip(UnitGroupLoopCurrent(), StringExternal(&quot;Param/Value/AA3A1911&quot;));
                }
                UnitGroupLoopEnd();
                UnitGroupAdd(lv_gateGroupLocal, UnitFromId(1581150218));
                UnitGroupAdd(lv_gateGroupLocal, UnitFromId(821976728));
                UnitGroupAdd(lv_gateGroupLocal, UnitFromId(267342209));
                UnitGroupLoopBegin(lv_gateGroupLocal);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
                    UnitSetInfoTip(UnitGroupLoopCurrent(), StringExternal(&quot;Param/Value/ABA4EDC0&quot;));
                }
                UnitGroupLoopEnd();
                UnitSetInfoTip(UnitFromId(814085852), StringExternal(&quot;Param/Value/EA63808B&quot;));
                UnitSetInfoTip(UnitFromId(1897148770), StringExternal(&quot;Param/Value/3EF5E2E0&quot;));
                UnitSetInfoTip(UnitFromId(535646867), StringExternal(&quot;Param/Value/EFFAAD15&quot;));
                libNtve_gf_ShowHideUnit(gv_odinUnit, false);
                libNtve_gf_ShowHideUnit(gv_terrazineGasTruck, false);
                UnitSetState(gv_odinUnit, c_unitStateTargetable, false);
                UnitSetState(gv_terrazineGasTruck, c_unitStateTargetable, false);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1096505812)), c_animNameDefault, &quot;Stand Work End&quot;, c_animFlagNonLooping, c_animTimeDefault);
                libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(UnitFromId(1096505812)), c_animNameDefault, 524287.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init05Units_Init () {
                gt_Init05Units = TriggerCreate(&quot;gt_Init05Units_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 06 Music/Sound
            //--------------------------------------------------------------------------------------------------
            bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init06MusicSound_Init () {
                gt_Init06MusicSound = TriggerCreate(&quot;gt_Init06MusicSound_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 07 Environment
            //--------------------------------------------------------------------------------------------------
            bool gt_Init07Environment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(10), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(10), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init07Environment_Init () {
                gt_Init07Environment = TriggerCreate(&quot;gt_Init07Environment_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 08 Difficulties
            //--------------------------------------------------------------------------------------------------
            bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_odinMainObjectiveLifeLocal;
                fixed lv_bonusObjectiveLifeLocal;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
                    UnitRemove(UnitFromId(211));
                    gv_odinRebuildableTotalCount -= 1;
                }
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
                    UnitRemove(UnitFromId(134));
                }
                lv_odinMainObjectiveLifeLocal = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 4000.0, 4000.0, 3000.0, 3000.0, 2000.0, 2000.0);
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;OdinMKII&quot;, &quot;LifeMax&quot;, gv_pLAYER_05ODIN, FixedToString(lv_odinMainObjectiveLifeLocal, c_fixedPrecisionAny));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;OdinMKII&quot;, &quot;LifeStart&quot;, gv_pLAYER_05ODIN, FixedToString(lv_odinMainObjectiveLifeLocal, c_fixedPrecisionAny));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;OdinMKIIWreckage&quot;, &quot;LifeMax&quot;, gv_pLAYER_05ODIN, FixedToString(lv_odinMainObjectiveLifeLocal, c_fixedPrecisionAny));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;OdinMKIIWreckage&quot;, &quot;LifeStart&quot;, gv_pLAYER_05ODIN, FixedToString(lv_odinMainObjectiveLifeLocal, c_fixedPrecisionAny));
                lv_bonusObjectiveLifeLocal = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 3000.0, 3500.0, 4000.0, 4500.0, 6500.0, 6500.0);
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;KorhalGateControl&quot;, &quot;LifeMax&quot;, gv_pLAYER_03_ENEMY, FixedToString(lv_bonusObjectiveLifeLocal, c_fixedPrecisionAny));
                CatalogFieldValueSet(c_gameCatalogUnit, &quot;KorhalGateControl&quot;, &quot;LifeStart&quot;, gv_pLAYER_03_ENEMY, FixedToString(lv_bonusObjectiveLifeLocal, c_fixedPrecisionAny));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init08Difficulties_Init () {
                gt_Init08Difficulties = TriggerCreate(&quot;gt_Init08Difficulties_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Can&apos;t Fail
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugCantFail_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerModifyPropertyFixed(gv_pLAYER_01_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                PlayerModifyPropertyFixed(gv_pLAYER_02_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                TriggerEnable(gt_DefeatEscorttheOdinFailedOdinRebuidCountisend, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DebugCantFail_Init () {
                gt_DebugCantFail = TriggerCreate(&quot;gt_DebugCantFail_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugCantFail, c_playerAny, &quot;cantfail&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Black Sheep Wall
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugBlackSheepWall_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_blackSheepWallOnOff == 0)) {
                    gv_blackSheepWallOnOff = 1;
                    VisRevealArea(gv_pLAYER_01_USER, RegionPlayableMap(), 20.0, false);
                    VisRevealArea(gv_pLAYER_02_USER, RegionPlayableMap(), 20.0, false);
                    Wait(20.0, c_timeGame);
                    gv_blackSheepWallOnOff = 0;
                }
                if ((gv_blackSheepWallOnOff == 1)) {
                    gv_blackSheepWallOnOff = 0;
                    VisRevealArea(gv_pLAYER_01_USER, RegionPlayableMap(), 0.0, false);
                    VisRevealArea(gv_pLAYER_02_USER, RegionPlayableMap(), 0.0, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DebugBlackSheepWall_Init () {
                gt_DebugBlackSheepWall = TriggerCreate(&quot;gt_DebugBlackSheepWall_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugBlackSheepWall, c_playerAny, &quot;black sheep wall&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Upgrade Odin Weapon Crucio
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugUpgradeOdinWeaponCrucio_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObtainWeaponryPartsCrucioShockCannon, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DebugUpgradeOdinWeaponCrucio_Init () {
                gt_DebugUpgradeOdinWeaponCrucio = TriggerCreate(&quot;gt_DebugUpgradeOdinWeaponCrucio_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugUpgradeOdinWeaponCrucio, c_playerAny, &quot;upgrade1&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Upgrade Odin Weapon Infernal
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugUpgradeOdinWeaponInfernal_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObtainWeaponryPartsInfernalFlamethrower, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DebugUpgradeOdinWeaponInfernal_Init () {
                gt_DebugUpgradeOdinWeaponInfernal = TriggerCreate(&quot;gt_DebugUpgradeOdinWeaponInfernal_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugUpgradeOdinWeaponInfernal, c_playerAny, &quot;upgrade2&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Upgrade Odin Weapon Detector
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugUpgradeOdinWeaponDetector_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObtainWeaponryPartsDetector, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DebugUpgradeOdinWeaponDetector_Init () {
                gt_DebugUpgradeOdinWeaponDetector = TriggerCreate(&quot;gt_DebugUpgradeOdinWeaponDetector_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugUpgradeOdinWeaponDetector, c_playerAny, &quot;upgrade3&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Game Q
            //--------------------------------------------------------------------------------------------------
            bool gt_StartGameQ_Func (bool testConds, bool runActions) {
                // Variable Declarations
                region lv_enemyBase;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_SetOdinTrackPointVariable, true, false);
                TriggerExecute(gt_SetOdinLanePointVariable, true, false);
                TriggerExecute(gt_TipReadyQ, true, false);
                Wait(5.0, c_timeReal);
                TriggerQueueEnter();
                TriggerExecute(gt_ObjectiveEscortOdinCreate, true, true);
                Wait(2.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/1A6919EE&quot;), StringExternal(&quot;Param/Value/AE6A71C3&quot;), 9.15, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/37267ADB&quot;), StringExternal(&quot;Param/Value/C1EBE175&quot;), 12.89, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_terrazineGasTruck), StringExternal(&quot;Param/Value/8C68711D&quot;));
                PingSetUnit(PingLastCreated(), UnitFromId(59839973));
                gv_truckandOdinPing = PingLastCreated();
                libNtve_gf_ShowHideUnit(gv_terrazineGasTruck, true);
                UnitIssueOrder(gv_terrazineGasTruck, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(700646170)), c_orderQueueReplace);
                Wait(94.0, c_timeGame);
                TriggerExecute(gt_TruckDepartingQ, true, false);
                Wait(12.0, c_timeGame);
                TriggerExecute(gt_MovetheTerrazineGasTruck, true, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartGameQ_Init () {
                gt_StartGameQ = TriggerCreate(&quot;gt_StartGameQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Move the TerrazineGasTruck
            //--------------------------------------------------------------------------------------------------
            bool gt_MovetheTerrazineGasTruck_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitIssueOrder(gv_terrazineGasTruck, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(520337154)), c_orderQueueReplace);
                UnitIssueOrder(gv_terrazineGasTruck, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(2035894075)), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_terrazineGasTruck, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(625274819)), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_terrazineGasTruck, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(474627812)), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_terrazineGasTruck, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MovetheTerrazineGasTruck_Init () {
                gt_MovetheTerrazineGasTruck = TriggerCreate(&quot;gt_MovetheTerrazineGasTruck_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Arrive the TerrazineGasTruck
            //--------------------------------------------------------------------------------------------------
            bool gt_ArrivetheTerrazineGasTruck_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_TruckArrivingQ, true, false);
                Wait(5.5, c_timeGame);
                TriggerExecute(gt_BuildOdin, true, false);
                Wait(2.0, c_timeGame);
                PingDestroy(gv_truckandOdinPing);
                UnitRemove(EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ArrivetheTerrazineGasTruck_Init () {
                gt_ArrivetheTerrazineGasTruck = TriggerCreate(&quot;gt_ArrivetheTerrazineGasTruck_Func&quot;);
                TriggerAddEventUnitRegion(gt_ArrivetheTerrazineGasTruck, UnitRefFromVariable(&quot;gv_terrazineGasTruck&quot;), RegionFromId(11), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Score Screen - Odin Life Left
            //--------------------------------------------------------------------------------------------------
            bool gt_ScoreScreenOdinLifeLeft_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, &quot;ShakurasTempleLife&quot;, UnitGetPropertyFixed(gv_odinUnit, c_unitPropLife, c_unitPropCurrent));
                PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, &quot;ShakurasTempleLife&quot;, UnitGetPropertyFixed(gv_odinUnit, c_unitPropLife, c_unitPropCurrent));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ScoreScreenOdinLifeLeft_Init () {
                gt_ScoreScreenOdinLifeLeft = TriggerCreate(&quot;gt_ScoreScreenOdinLifeLeft_Func&quot;);
                TriggerAddEventUnitDamaged(gt_ScoreScreenOdinLifeLeft, UnitRefFromVariable(&quot;gv_odinUnit&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set OdinLanePointVariable
            //--------------------------------------------------------------------------------------------------
            bool gt_SetOdinLanePointVariable_Func (bool testConds, bool runActions) {
                int autoEA836563_ae;
                int autoEA836563_ai;
                // Variable Declarations
                int lv_iLocal;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoEA836563_ae = (gv_odinLanePointTotalValue - 1);
                autoEA836563_ai = 1;
                lv_iLocal = 0;
                for ( ; ( (autoEA836563_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= autoEA836563_ae) || (autoEA836563_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= autoEA836563_ae) ) ; lv_iLocal += autoEA836563_ai ) {
                    if ((lv_iLocal &lt; 9)) {
                        gv_odinLanePoint[lv_iLocal] = PointFromName((&quot;Lane00&quot; + IntToString((lv_iLocal + 1))));
                    }
                    else {
                        if ((lv_iLocal &lt; 99)) {
                            gv_odinLanePoint[lv_iLocal] = PointFromName((&quot;Lane0&quot; + IntToString((lv_iLocal + 1))));
                        }
                        else {
                            gv_odinLanePoint[lv_iLocal] = PointFromName((&quot;Lane&quot; + IntToString((lv_iLocal + 1))));
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetOdinLanePointVariable_Init () {
                gt_SetOdinLanePointVariable = TriggerCreate(&quot;gt_SetOdinLanePointVariable_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reveal OdinLanePoint
            //--------------------------------------------------------------------------------------------------
            bool gt_RevealOdinLanePoint_Func (bool testConds, bool runActions) {
                int auto9E58DE81_val;
                int autoE2B3A9B1_ae;
                int autoE2B3A9B1_ai;
                int auto08510F01_ae;
                int auto08510F01_ai;
                int auto25094467_ae;
                int auto25094467_ai;
                // Variable Declarations
                int lv_iLocal;
                int lv_currentPingPointLocal;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                auto9E58DE81_val = gv_odinTrackPhase;
                if (auto9E58DE81_val == 1) {
                    lv_currentPingPointLocal = 0;
                    autoE2B3A9B1_ae = 55;
                    autoE2B3A9B1_ai = 1;
                    lv_iLocal = (lv_currentPingPointLocal + 1);
                    for ( ; ( (autoE2B3A9B1_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= autoE2B3A9B1_ae) || (autoE2B3A9B1_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= autoE2B3A9B1_ae) ) ; lv_iLocal += autoE2B3A9B1_ai ) {
                        if ((DistanceBetweenPoints(gv_odinLanePoint[lv_currentPingPointLocal], gv_odinLanePoint[lv_iLocal]) &gt; 5.0)) {
                            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_odinLanePoint[lv_currentPingPointLocal], 10.0), true, false);
                            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_odinLanePoint[lv_currentPingPointLocal], 10.0), true, false);
                            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingArrow&quot;, gv_odinLanePoint[lv_currentPingPointLocal], ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
                            PingSetScale(PingLastCreated(), 0.65);
                            lv_currentPingPointLocal = lv_iLocal;
                            Wait(0.1, c_timeGame);
                        }
                    }
                }
                else if (auto9E58DE81_val == 2) {
                    lv_currentPingPointLocal = 56;
                    auto08510F01_ae = 119;
                    auto08510F01_ai = 1;
                    lv_iLocal = (lv_currentPingPointLocal + 1);
                    for ( ; ( (auto08510F01_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= auto08510F01_ae) || (auto08510F01_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= auto08510F01_ae) ) ; lv_iLocal += auto08510F01_ai ) {
                        if ((DistanceBetweenPoints(gv_odinLanePoint[lv_currentPingPointLocal], gv_odinLanePoint[lv_iLocal]) &gt; 5.0)) {
                            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_odinLanePoint[lv_currentPingPointLocal], 10.0), true, false);
                            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_odinLanePoint[lv_currentPingPointLocal], 10.0), true, false);
                            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingArrow&quot;, gv_odinLanePoint[lv_currentPingPointLocal], ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
                            PingSetScale(PingLastCreated(), 0.65);
                            lv_currentPingPointLocal = lv_iLocal;
                            Wait(0.1, c_timeGame);
                        }
                    }
                }
                else if (auto9E58DE81_val == 3) {
                    lv_currentPingPointLocal = 120;
                    auto25094467_ae = 163;
                    auto25094467_ai = 1;
                    lv_iLocal = (lv_currentPingPointLocal + 1);
                    for ( ; ( (auto25094467_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= auto25094467_ae) || (auto25094467_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= auto25094467_ae) ) ; lv_iLocal += auto25094467_ai ) {
                        if ((DistanceBetweenPoints(gv_odinLanePoint[lv_currentPingPointLocal], gv_odinLanePoint[lv_iLocal]) &gt; 5.0)) {
                            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_odinLanePoint[lv_currentPingPointLocal], 10.0), true, false);
                            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_odinLanePoint[lv_currentPingPointLocal], 10.0), true, false);
                            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingArrow&quot;, gv_odinLanePoint[lv_currentPingPointLocal], ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
                            PingSetScale(PingLastCreated(), 0.65);
                            lv_currentPingPointLocal = lv_iLocal;
                            Wait(0.1, c_timeGame);
                        }
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RevealOdinLanePoint_Init () {
                gt_RevealOdinLanePoint = TriggerCreate(&quot;gt_RevealOdinLanePoint_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Build Odin
            //--------------------------------------------------------------------------------------------------
            bool gt_BuildOdin_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1096505812)), StringExternal(&quot;Param/Value/4FD3027C&quot;));
                PingSetUnit(PingLastCreated(), gv_odinUnit);
                gv_odinUnitPing = PingLastCreated();
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLife, 1.0);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLifeRegen, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, &quot;OdinMKII&quot;, &quot;LifeMax&quot;, gv_pLAYER_05ODIN) / gv_odinBuildTime));
                libCOMI_gf_DisplaySingularBossBarVoidCampaign(&quot;Assets\\Textures\\wireframe-terran-odin.dds&quot;, StringExternal(&quot;Param/Value/9E02F0FF&quot;), 100);
                libCOMI_gf_SetSingularBossBarBossVoidCampaign(gv_odinUnit, true);
                libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(UnitFromId(1096505812)), c_animNameDefault, gv_odinBuildTime);
                Wait((gv_odinBuildTime - 2.0), c_timeGame);
                libNtve_gf_ShowHideUnit(gv_odinUnit, true);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLifeRegen, 0.0);
                RegionAttachToUnit(RegionFromId(15), gv_odinUnit, Point(0.0, 0.0));
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2130817208)), c_animNameDefault, &quot;Stand Work&quot;, c_animFlagNonLooping, c_animTimeDefault);
                libCOMI_gf_DisplaySingularBossBarVoidCampaign(&quot;Assets\\Textures\\wireframe-terran-odin.dds&quot;, UnitGetName(gv_odinUnit), 100);
                libCOMI_gf_SetSingularBossBarBossVoidCampaign(gv_odinUnit, true);
                PingDestroy(gv_odinUnitPing);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_odinUnit), StringExternal(&quot;Param/Value/5BFBBFBF&quot;));
                PingSetUnit(PingLastCreated(), gv_odinUnit);
                gv_odinUnitPing = PingLastCreated();
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_OdinFinishingQ, true, false);
                Wait(7.76, c_timeGame);
                TriggerExecute(gt_MoveOdin, true, false);
                TriggerExecute(gt_CreateMainObjectivePing, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BuildOdin_Init () {
                gt_BuildOdin = TriggerCreate(&quot;gt_BuildOdin_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Open Gate
            //--------------------------------------------------------------------------------------------------
            bool gt_OpenGate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitIssueOrder(gv_odinFactoryGate, Order(AbilityCommand(&quot;HybridDoorsWideRightLowered&quot;, 0)), c_orderQueueReplace);
                Wait(7.5, c_timeGame);
                UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[2]), c_orderQueueAddToEnd);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OpenGate_Init () {
                gt_OpenGate = TriggerCreate(&quot;gt_OpenGate_Func&quot;);
                TriggerAddEventUnitRegion(gt_OpenGate, UnitRefFromVariable(&quot;gv_odinUnit&quot;), RegionFromId(12), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set OdinTrackPointVariable
            //--------------------------------------------------------------------------------------------------
            bool gt_SetOdinTrackPointVariable_Func (bool testConds, bool runActions) {
                int autoFB36571C_ae;
                int autoFB36571C_ai;
                // Variable Declarations
                int lv_iLocal;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoFB36571C_ae = (gv_odinTrackPointTotalValue - 1);
                autoFB36571C_ai = 1;
                lv_iLocal = 0;
                for ( ; ( (autoFB36571C_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= autoFB36571C_ae) || (autoFB36571C_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= autoFB36571C_ae) ) ; lv_iLocal += autoFB36571C_ai ) {
                    if ((lv_iLocal &lt; 9)) {
                        gv_odinTrackPoint[lv_iLocal] = PointFromName((&quot;OdinTrack0&quot; + IntToString((lv_iLocal + 1))));
                    }
                    else {
                        gv_odinTrackPoint[lv_iLocal] = PointFromName((&quot;OdinTrack&quot; + IntToString((lv_iLocal + 1))));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetOdinTrackPointVariable_Init () {
                gt_SetOdinTrackPointVariable = TriggerCreate(&quot;gt_SetOdinTrackPointVariable_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Move Odin
            //--------------------------------------------------------------------------------------------------
            bool gt_MoveOdin_Func (bool testConds, bool runActions) {
                int auto9BBE35E7_val;
                int auto100D090D_ae;
                int auto100D090D_ai;
                // Variable Declarations
                int lv_iLocal;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto9BBE35E7_val = gv_odinTrackPhase;
                if (auto9BBE35E7_val == 0) {
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_odinTrackPoint[0]), c_orderQueueReplace);
                    Wait(90.0, c_timeGame);
                    TriggerExecute(gt_OdinDepartingfromtheFactory0Q, true, false);
                    PingSetModel(gv_odinUnitPing, &quot;PingCircle&quot;);
                    PingSetScale(gv_odinUnitPing, 0.6);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), gv_odinTrackPoint[1]), c_orderQueueAddToEnd);
                }
                else if (auto9BBE35E7_val == 1) {
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[3]), c_orderQueueReplace);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[4]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[5]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[6]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[7]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[8]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[9]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[10]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[11]), c_orderQueueAddToEnd);
                    if ((gv_hybridHoldingCellHitPoint[0] &gt; 0)) {
                        UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;OdinMKIIBarrage&quot;, 0), PointFromId(122324506)), c_orderQueueAddToEnd);
                    }
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[12]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[13]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[14]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[15]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[16]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[17]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[18]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[19]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[20]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                }
                else if (auto9BBE35E7_val == 2) {
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[21]), c_orderQueueReplace);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[22]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[23]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[24]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[25]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[26]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[27]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[28]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[29]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[30]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[31]), c_orderQueueAddToEnd);
                    if ((gv_hybridHoldingCellHitPoint[1] &gt; 0)) {
                        UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;OdinMKIIBarrage&quot;, 0), PointFromId(704592618)), c_orderQueueAddToEnd);
                    }
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[32]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[33]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[34]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[35]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[36]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[37]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[38]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[39]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[40]), c_orderQueueAddToEnd);
                    UnitIssueOrder(gv_odinUnit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                }
                else if (auto9BBE35E7_val == 3) {
                    UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[41]), c_orderQueueReplace);
                    auto100D090D_ae = 54;
                    auto100D090D_ai = 1;
                    lv_iLocal = (41 + 1);
                    for ( ; ( (auto100D090D_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= auto100D090D_ae) || (auto100D090D_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= auto100D090D_ae) ) ; lv_iLocal += auto100D090D_ai ) {
                        UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), gv_odinTrackPoint[lv_iLocal]), c_orderQueueAddToEnd);
                    }
                    if ((gv_hybridHoldingCellHitPoint[2] &gt; 0)) {
                        UnitIssueOrder(gv_odinUnit, OrderTargetingPoint(AbilityCommand(&quot;OdinMKIIBarrage&quot;, 0), PointFromId(582132430)), c_orderQueueAddToEnd);
                    }
                    UnitIssueOrder(gv_odinUnit, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueAddToEnd);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MoveOdin_Init () {
                gt_MoveOdin = TriggerCreate(&quot;gt_MoveOdin_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Arrive and Depart Odin Shelter
            //--------------------------------------------------------------------------------------------------
            bool gt_ArriveandDepartOdinShelter_Func (bool testConds, bool runActions) {
                region auto4C69796B_val;
                // Variable Declarations
                fixed lv_afterAttakWaveTimeLocal;
                // Variable Initialization
                lv_afterAttakWaveTimeLocal = 90.0;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                auto4C69796B_val = EventUnitRegion();
                if (auto4C69796B_val == RegionFromId(16)) {
                    TriggerExecute(gt_OdinArrivingintheShelter1Q, true, false);
                    TriggerExecute(gt_CalldownEliteMULE, true, false);
                    Wait(gv_odinBreakTime, c_timeGame);
                    TriggerEnable(gt_OdinUnderAttackQ, true);
                    TriggerEnable(gt_OdinWarning50Q, true);
                    TriggerEnable(gt_OdinWarning25Q, true);
                    TriggerEnable(gt_OdinCriticalQ, true);
                    TriggerExecute(gt_OdinDepartingfromtheShelter1Q, true, false);
                }
                else if (auto4C69796B_val == RegionFromId(17)) {
                    TriggerExecute(gt_OdinArrivingintheShelter2Q, true, false);
                    TriggerExecute(gt_CalldownEliteMULE, true, false);
                    Wait((gv_odinBreakTime - lv_afterAttakWaveTimeLocal), c_timeGame);
                    TriggerExecute(gt_SendForcestoOdin, true, false);
                    Wait(lv_afterAttakWaveTimeLocal, c_timeGame);
                    TriggerExecute(gt_OdinDepartingfromtheShelter2Q, true, false);
                }
                else if (auto4C69796B_val == RegionFromId(1)) {
                    TriggerExecute(gt_OdinArrivingintheShelter3Q, true, false);
                    TriggerExecute(gt_CalldownEliteMULE, true, false);
                    Wait((gv_odinBreakTime - lv_afterAttakWaveTimeLocal), c_timeGame);
                    TriggerExecute(gt_SendForcestoOdin, true, false);
                    Wait(lv_afterAttakWaveTimeLocal, c_timeGame);
                    TriggerExecute(gt_OdinDepartingfromtheShelter3Q, true, false);
                }
                else {
                }
                gv_odinTrackPhase += 1;
                TriggerExecute(gt_MoveOdin, true, false);
                TriggerExecute(gt_RevealOdinLanePoint, true, false);
                Wait(180.0, c_timeGame);
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ArriveandDepartOdinShelter_Init () {
                gt_ArriveandDepartOdinShelter = TriggerCreate(&quot;gt_ArriveandDepartOdinShelter_Func&quot;);
                TriggerAddEventUnitRegion(gt_ArriveandDepartOdinShelter, UnitRefFromVariable(&quot;gv_odinUnit&quot;), RegionFromId(16), true);
                TriggerAddEventUnitRegion(gt_ArriveandDepartOdinShelter, UnitRefFromVariable(&quot;gv_odinUnit&quot;), RegionFromId(17), true);
                TriggerAddEventUnitRegion(gt_ArriveandDepartOdinShelter, UnitRefFromVariable(&quot;gv_odinUnit&quot;), RegionFromId(1), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 01
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint01_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint02, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint01_Init () {
                gt_RemoveOdinTrackPoint01 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint01_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint01, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(2079032336), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 02
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint02_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint03, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint02_Init () {
                gt_RemoveOdinTrackPoint02 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint02_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint02, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint02, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1167624059), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 03
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint03_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint04, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint03_Init () {
                gt_RemoveOdinTrackPoint03 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint03_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint03, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint03, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1735842393), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 04
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint04_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint05, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint04_Init () {
                gt_RemoveOdinTrackPoint04 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint04_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint04, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint04, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1119979491), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 05
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint05_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint06, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint05_Init () {
                gt_RemoveOdinTrackPoint05 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint05_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint05, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint05, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1392687453), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 06
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint06_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint07, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint06_Init () {
                gt_RemoveOdinTrackPoint06 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint06_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint06, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint06, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(170458851), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 07
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint07_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint08, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint07_Init () {
                gt_RemoveOdinTrackPoint07 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint07_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint07, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint07, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(185655986), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 08
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint08_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint09, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint08_Init () {
                gt_RemoveOdinTrackPoint08 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint08_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint08, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint08, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(181897567), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 09
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint09_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint10, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint09_Init () {
                gt_RemoveOdinTrackPoint09 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint09_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint09, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint09, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1263760875), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 10
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint10_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint11, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint10_Init () {
                gt_RemoveOdinTrackPoint10 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint10_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint10, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint10, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1768040321), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 11
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint11_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint12, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint11_Init () {
                gt_RemoveOdinTrackPoint11 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint11_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint11, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint11, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1148973906), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 12
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint12_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint13, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint12_Init () {
                gt_RemoveOdinTrackPoint12 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint12_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint12, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint12, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(989741266), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 13
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint13_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint14, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint13_Init () {
                gt_RemoveOdinTrackPoint13 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint13_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint13, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint13, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(236609228), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 14
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint14_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint15, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint14_Init () {
                gt_RemoveOdinTrackPoint14 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint14_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint14, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint14, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1524037801), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 15
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint15_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint16, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint15_Init () {
                gt_RemoveOdinTrackPoint15 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint15_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint15, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint15, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(395387193), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 16
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint16_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint17, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint16_Init () {
                gt_RemoveOdinTrackPoint16 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint16_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint16, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint16, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1888029689), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 17
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint17_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint18, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint17_Init () {
                gt_RemoveOdinTrackPoint17 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint17_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint17, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint17, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1524961693), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 18
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint18_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint19, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint18_Init () {
                gt_RemoveOdinTrackPoint18 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint18_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint18, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint18, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1857932083), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 19
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint19_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint20, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint19_Init () {
                gt_RemoveOdinTrackPoint19 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint19_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint19, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint19, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(988527253), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 20
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint20_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint21, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint20_Init () {
                gt_RemoveOdinTrackPoint20 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint20_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint20, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint20, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(2025201174), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 21
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint21_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint22, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint21_Init () {
                gt_RemoveOdinTrackPoint21 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint21_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint21, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint21, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(776665495), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 22
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint22_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint23, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint22_Init () {
                gt_RemoveOdinTrackPoint22 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint22_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint22, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint22, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1660349016), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 23
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint23_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint24, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint23_Init () {
                gt_RemoveOdinTrackPoint23 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint23_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint23, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint23, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1043551640), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 24
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint24_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint25, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint24_Init () {
                gt_RemoveOdinTrackPoint24 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint24_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint24, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint24, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(964047791), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 25
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint25_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint26, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint25_Init () {
                gt_RemoveOdinTrackPoint25 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint25_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint25, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint25, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(891384341), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 26
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint26_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint27, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint26_Init () {
                gt_RemoveOdinTrackPoint26 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint26_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint26, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint26, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(558822272), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 27
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint27_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint28, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint27_Init () {
                gt_RemoveOdinTrackPoint27 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint27_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint27, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint27, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1077343255), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 28
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint28_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint29, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint28_Init () {
                gt_RemoveOdinTrackPoint28 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint28_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint28, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint28, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1054772882), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 29
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint29_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint30, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint29_Init () {
                gt_RemoveOdinTrackPoint29 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint29_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint29, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint29, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1501768612), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 30
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint30_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint31, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint30_Init () {
                gt_RemoveOdinTrackPoint30 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint30_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint30, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint30, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1929221194), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 31
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint31_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint32, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint31_Init () {
                gt_RemoveOdinTrackPoint31 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint31_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint31, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint31, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1763297717), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 32
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint32_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint33, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint32_Init () {
                gt_RemoveOdinTrackPoint32 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint32_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint32, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint32, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(546766347), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 33
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint33_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint34, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint33_Init () {
                gt_RemoveOdinTrackPoint33 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint33_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint33, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint33, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1271648929), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 34
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint34_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint35, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint34_Init () {
                gt_RemoveOdinTrackPoint34 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint34_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint34, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint34, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1146793393), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 35
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint35_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint36, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint35_Init () {
                gt_RemoveOdinTrackPoint35 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint35_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint35, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint35, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(2051474817), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 36
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint36_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint37, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint36_Init () {
                gt_RemoveOdinTrackPoint36 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint36_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint36, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint36, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1395815221), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 37
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint37_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint38, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint37_Init () {
                gt_RemoveOdinTrackPoint37 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint37_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint37, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint37, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(2067261612), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 38
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint38_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint39, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint38_Init () {
                gt_RemoveOdinTrackPoint38 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint38_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint38, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint38, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(933357416), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 39
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint39_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint40, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint39_Init () {
                gt_RemoveOdinTrackPoint39 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint39_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint39, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint39, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1938467947), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 40
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint40_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint41, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint40_Init () {
                gt_RemoveOdinTrackPoint40 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint40_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint40, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint40, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(640083296), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 41
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint41_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint42, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint41_Init () {
                gt_RemoveOdinTrackPoint41 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint41_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint41, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint41, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(67182269), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 42
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint42_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint43, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint42_Init () {
                gt_RemoveOdinTrackPoint42 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint42_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint42, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint42, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1900342088), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 43
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint43_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint44, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint43_Init () {
                gt_RemoveOdinTrackPoint43 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint43_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint43, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint43, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1759335543), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 44
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint44_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint45, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint44_Init () {
                gt_RemoveOdinTrackPoint44 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint44_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint44, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint44, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(86223359), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 45
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint45_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint46, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint45_Init () {
                gt_RemoveOdinTrackPoint45 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint45_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint45, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint45, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1134076570), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 46
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint46_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint47, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint46_Init () {
                gt_RemoveOdinTrackPoint46 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint46_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint46, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint46, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1550723527), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 47
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint47_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint48, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint47_Init () {
                gt_RemoveOdinTrackPoint47 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint47_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint47, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint47, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(2128619830), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 48
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint48_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint49, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint48_Init () {
                gt_RemoveOdinTrackPoint48 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint48_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint48, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint48, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1686871855), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 49
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint49_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint50, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint49_Init () {
                gt_RemoveOdinTrackPoint49 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint49_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint49, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint49, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(558250810), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 50
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint50_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint51, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint50_Init () {
                gt_RemoveOdinTrackPoint50 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint50_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint50, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint50, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1199815909), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 51
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint51_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint52, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint51_Init () {
                gt_RemoveOdinTrackPoint51 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint51_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint51, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint51, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(360905833), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 52
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint52_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint53, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint52_Init () {
                gt_RemoveOdinTrackPoint52 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint52_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint52, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint52, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(1872987896), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 53
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint53_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint54, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint53_Init () {
                gt_RemoveOdinTrackPoint53 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint53_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint53, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint53, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(561786563), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 54
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint54_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                TriggerEnable(gt_RemoveOdinTrackPoint55, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint54_Init () {
                gt_RemoveOdinTrackPoint54 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint54_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint54, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint54, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(174171564), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove OdinTrackPoint 55
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveOdinTrackPoint55_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                gv_odinTrackPoint[gv_odinTrackPointNumber] = null;
                gv_odinTrackPointNumber += 1;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveOdinTrackPoint55_Init () {
                gt_RemoveOdinTrackPoint55 = TriggerCreate(&quot;gt_RemoveOdinTrackPoint55_Func&quot;);
                TriggerEnable(gt_RemoveOdinTrackPoint55, false);
                TriggerAddEventUnitRangePoint(gt_RemoveOdinTrackPoint55, UnitRefFromVariable(&quot;gv_odinUnit&quot;), PointFromId(42063048), 0.3, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Use Barrage
            //--------------------------------------------------------------------------------------------------
            bool gt_UseBarrage_Func (bool testConds, bool runActions) {
                int auto0B761BEC_val;
                int auto41B79B76_ae;
                int auto41B79B76_ai;
                int auto1208608A_ae;
                int auto1208608A_ai;
                int auto0CF69615_ae;
                int auto0CF69615_ai;
                // Variable Declarations
                int lv_iLocal;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(gv_odinUnit, c_unitStateInvulnerable, true);
                Wait(2.0, c_timeGame);
                auto0B761BEC_val = gv_odinTrackPhase;
                if (auto0B761BEC_val == 1) {
                    auto41B79B76_ae = 12;
                    auto41B79B76_ai = 1;
                    lv_iLocal = 1;
                    for ( ; ( (auto41B79B76_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= auto41B79B76_ae) || (auto41B79B76_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= auto41B79B76_ae) ) ; lv_iLocal += auto41B79B76_ai ) {
                        UnitSetPropertyFixed(UnitFromId(685744180), c_unitPropLife, (gv_hybridHoldingCellHitPoint[0] - 125));
                        gv_hybridHoldingCellHitPoint[0] -= 125;
                        Wait(0.4, c_timeGame);
                    }
                }
                else if (auto0B761BEC_val == 2) {
                    auto1208608A_ae = 12;
                    auto1208608A_ai = 1;
                    lv_iLocal = 1;
                    for ( ; ( (auto1208608A_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= auto1208608A_ae) || (auto1208608A_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= auto1208608A_ae) ) ; lv_iLocal += auto1208608A_ai ) {
                        UnitSetPropertyFixed(UnitFromId(1850759431), c_unitPropLife, (gv_hybridHoldingCellHitPoint[1] - 125));
                        gv_hybridHoldingCellHitPoint[1] -= 125;
                        Wait(0.4, c_timeGame);
                    }
                }
                else if (auto0B761BEC_val == 3) {
                    auto0CF69615_ae = 12;
                    auto0CF69615_ai = 1;
                    lv_iLocal = 1;
                    for ( ; ( (auto0CF69615_ai &gt;= 0 &amp;&amp; lv_iLocal &lt;= auto0CF69615_ae) || (auto0CF69615_ai &lt;= 0 &amp;&amp; lv_iLocal &gt;= auto0CF69615_ae) ) ; lv_iLocal += auto0CF69615_ai ) {
                        UnitSetPropertyFixed(UnitFromId(1651552205), c_unitPropLife, (gv_hybridHoldingCellHitPoint[2] - 125));
                        gv_hybridHoldingCellHitPoint[2] -= 125;
                        Wait(0.4, c_timeGame);
                    }
                }
                else {
                }
                Wait(1.6, c_timeGame);
                UnitSetState(gv_odinUnit, c_unitStateInvulnerable, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UseBarrage_Init () {
                gt_UseBarrage = TriggerCreate(&quot;gt_UseBarrage_Func&quot;);
                TriggerAddEventUnitAbility(gt_UseBarrage, UnitRefFromVariable(&quot;gv_odinUnit&quot;), AbilityCommand(&quot;OdinMKIIBarrage&quot;, 0), c_unitAbilStageExecute, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Calldown Elite MULE
            //--------------------------------------------------------------------------------------------------
            bool gt_CalldownEliteMULE_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_callDownIntervalValueLocal;
                fixed lv_callDownPointValueLocal;
                unit lv_standardUnitPointLocal;
                // Variable Initialization
                lv_callDownIntervalValueLocal = 0.8;
                lv_callDownPointValueLocal = 3.0;
                lv_standardUnitPointLocal = gv_odinUnit;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(9.0, c_timeGame);
                if ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
                }
                else if ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt; 100.0) &amp;&amp; ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &gt;= 75.0))) {
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal))), c_orderQueueReplace);
                }
                else if ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt; 75.0) &amp;&amp; ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &gt;= 50.0))) {
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal))), c_orderQueueReplace);
                    Wait(lv_callDownIntervalValueLocal, c_timeGame);
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) - lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal))), c_orderQueueReplace);
                }
                else if ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt; 50.0) &amp;&amp; ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &gt;= 25.0))) {
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal))), c_orderQueueReplace);
                    Wait(lv_callDownIntervalValueLocal, c_timeGame);
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) - lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal))), c_orderQueueReplace);
                    Wait(lv_callDownIntervalValueLocal, c_timeGame);
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) - lv_callDownPointValueLocal))), c_orderQueueReplace);
                }
                else if ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt; 25.0) &amp;&amp; ((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &gt;= 0.0))) {
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal))), c_orderQueueReplace);
                    Wait(lv_callDownIntervalValueLocal, c_timeGame);
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) - lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal))), c_orderQueueReplace);
                    Wait(lv_callDownIntervalValueLocal, c_timeGame);
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) + lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) - lv_callDownPointValueLocal))), c_orderQueueReplace);
                    Wait(lv_callDownIntervalValueLocal, c_timeGame);
                    UnitIssueOrder(UnitFromId(417246722), OrderTargetingPoint(AbilityCommand(&quot;CalldownMULE2&quot;, 0), Point((PointGetX(UnitGetPosition(lv_standardUnitPointLocal)) - lv_callDownPointValueLocal), (PointGetY(UnitGetPosition(lv_standardUnitPointLocal)) - lv_callDownPointValueLocal))), c_orderQueueReplace);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CalldownEliteMULE_Init () {
                gt_CalldownEliteMULE = TriggerCreate(&quot;gt_CalldownEliteMULE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Morph Odin Wreckage 
            //--------------------------------------------------------------------------------------------------
            bool gt_MorphOdinWreckage_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(gv_odinUnit, c_unitStateInvulnerable, true);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLife, 100.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MorphOdinWreckage_Init () {
                gt_MorphOdinWreckage = TriggerCreate(&quot;gt_MorphOdinWreckage_Func&quot;);
                TriggerAddEventUnitAbility(gt_MorphOdinWreckage, UnitRefFromVariable(&quot;gv_odinUnit&quot;), AbilityCommand(&quot;OdinMKIIWreckage&quot;, 0), c_unitAbilStageExecute, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Morph Odin Wreckage Start Rebuild
            //--------------------------------------------------------------------------------------------------
            bool gt_MorphOdinWreckageStartRebuild_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetState(gv_odinUnit, c_unitStateInvulnerable, true);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLife, 100.0);
                PingSetModel(gv_odinUnitPing, &quot;PingWarning&quot;);
                PingSetScale(gv_odinUnitPing, 1.2);
                PingSetTooltip(PingLastCreated(), StringExternal(&quot;Param/Value/0B7E9DF8&quot;));
                PingSetColor(gv_odinUnitPing, Color(100.00, 0.00, 0.00));
                gv_odinBeDestroyedCount += 1;
                TriggerExecute(gt_ObjectiveEscortOdinUpdate, true, false);
                if ((gv_odinBeDestroyedCount == gv_odinRebuildableTotalCount)) {
                    libCOMI_gf_ShowHideSingularBossBarVoidCampaign(false);
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_DefeatEscorttheOdinFailedOdinRebuidCountisend, true, false);
                }
                else {
                    libCOMI_gf_DisplaySingularBossBarVoidCampaign(&quot;Assets\\Textures\\wireframe-terran-odin.dds&quot;, UnitGetName(gv_odinUnit), 100);
                    libCOMI_gf_SetSingularBossBarBossVoidCampaign(gv_odinUnit, true);
                    if ((gv_odinBeDestroyedCount == (gv_odinRebuildableTotalCount - 1))) {
                        TriggerExecute(gt_OdinRebuildingStartLastQ, true, false);
                    }
                    else {
                        TriggerExecute(gt_OdinRebuildingStartQ, true, false);
                    }
                    Wait(8.0, c_timeGame);
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;OdinReborn&quot;, 0)), c_orderQueueReplace);
                    TriggerExecute(gt_CreateOdinRebuildTool, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MorphOdinWreckageStartRebuild_Init () {
                gt_MorphOdinWreckageStartRebuild = TriggerCreate(&quot;gt_MorphOdinWreckageStartRebuild_Func&quot;);
                TriggerAddEventUnitAbility(gt_MorphOdinWreckageStartRebuild, UnitRefFromVariable(&quot;gv_odinUnit&quot;), AbilityCommand(&quot;OdinMKIIWreckage&quot;, 0), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create OdinRebuildTool
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateOdinRebuildTool_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_odinRebuildToolUnitLocal;
                actor lv_odinHealEffectLocal;
                fixed lv_rebuildStartTimeLocal;
                fixed lv_rebuildTimeLocal;
                fixed lv_rebuildEndTimeLocal;
                // Variable Initialization
                lv_rebuildStartTimeLocal = 2.0;
                lv_rebuildTimeLocal = 54.0;
                lv_rebuildEndTimeLocal = 4.0;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;OdinRebuildTool&quot;, c_unitCreateIgnorePlacement, 1, UnitGetPosition(gv_odinUnit), UnitGetFacing(gv_odinUnit));
                lv_odinRebuildToolUnitLocal = UnitLastCreated();
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_odinRebuildToolUnitLocal), c_animNameDefault, &quot;Stand Morph Start&quot;, c_animFlagNonLooping, c_animTimeDefault);
                libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(lv_odinRebuildToolUnitLocal), c_animNameDefault, lv_rebuildStartTimeLocal);
                Wait(lv_rebuildStartTimeLocal, c_timeGame);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLifeRegen, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, &quot;OdinMKIIWreckage&quot;, &quot;LifeMax&quot;, gv_pLAYER_05ODIN) / lv_rebuildTimeLocal));
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_odinRebuildToolUnitLocal), c_animNameDefault, &quot;Stand Morph&quot;, c_animFlagNonLooping, c_animTimeDefault);
                libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(lv_odinRebuildToolUnitLocal), c_animNameDefault, lv_rebuildTimeLocal);
                libNtve_gf_AttachActorToUnit(gv_odinUnit, &quot;OdinHealModel&quot;, &quot;Ref_Center&quot;);
                lv_odinHealEffectLocal = libNtve_gf_ActorLastCreated();
                Wait(lv_rebuildTimeLocal, c_timeGame);
                libNtve_gf_KillModel(lv_odinHealEffectLocal);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLifeRegen, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_odinRebuildToolUnitLocal), c_animNameDefault, &quot;Stand Work End&quot;, c_animFlagNonLooping, c_animTimeDefault);
                libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(lv_odinRebuildToolUnitLocal), c_animNameDefault, lv_rebuildEndTimeLocal);
                Wait(lv_rebuildEndTimeLocal, c_timeGame);
                UnitRemove(lv_odinRebuildToolUnitLocal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateOdinRebuildTool_Init () {
                gt_CreateOdinRebuildTool = TriggerCreate(&quot;gt_CreateOdinRebuildTool_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Morph Odin Rebuild Finish
            //--------------------------------------------------------------------------------------------------
            bool gt_MorphOdinRebuildFinish_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, 100.0);
                UnitSetState(gv_odinUnit, c_unitStateInvulnerable, false);
                PingSetModel(gv_odinUnitPing, &quot;PingCircle&quot;);
                PingSetScale(gv_odinUnitPing, 0.6);
                PingSetTooltip(PingLastCreated(), StringExternal(&quot;Param/Value/0BF17F70&quot;));
                PingSetColor(gv_odinUnitPing, Color(100.00, 100.00, 100.00));
                TriggerEnable(gt_OdinUnderAttackQ, true);
                TriggerEnable(gt_OdinWarning50Q, true);
                TriggerEnable(gt_OdinWarning25Q, true);
                TriggerEnable(gt_OdinCriticalQ, true);
                libCOMI_gf_DisplaySingularBossBarVoidCampaign(&quot;Assets\\Textures\\wireframe-terran-odin.dds&quot;, UnitGetName(gv_odinUnit), 100);
                libCOMI_gf_SetSingularBossBarBossVoidCampaign(gv_odinUnit, true);
                if ((gv_odinBeDestroyedCount == (gv_odinRebuildableTotalCount - 1))) {
                    TriggerExecute(gt_OdinRebuildingFinishLastQ, true, false);
                }
                else {
                    TriggerExecute(gt_OdinRebuildingFinishQ, true, false);
                }
                TriggerExecute(gt_MoveOdin, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MorphOdinRebuildFinish_Init () {
                gt_MorphOdinRebuildFinish = TriggerCreate(&quot;gt_MorphOdinRebuildFinish_Func&quot;);
                TriggerAddEventUnitAbility(gt_MorphOdinRebuildFinish, UnitRefFromVariable(&quot;gv_odinUnit&quot;), AbilityCommand(&quot;OdinReborn&quot;, 0), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Main Objective Ping
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateMainObjectivePing_Func (bool testConds, bool runActions) {
                int auto89681287_val;
                // Conditions
                if (testConds) {
                    if (!((gv_destroyingHybridHoldingCellCount &lt;= 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto89681287_val = gv_destroyingHybridHoldingCellCount;
                if (auto89681287_val == 0) {
                    TriggerExecute(gt_HybridStasisCellLocated1Q, true, false);
                    Wait(4.67, c_timeGame);
                    gf_GiantAttentionGrabbingPing(UnitGetPosition(UnitGroupUnit(gv_hybridHoldingCellGroup, 1)));
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_hybridHoldingCellGroup, 1)), StringExternal(&quot;Param/Value/A0CBC5DE&quot;));
                    gv_mainObjectivePing[0] = PingLastCreated();
                }
                else if (auto89681287_val == 1) {
                    TriggerExecute(gt_HybridStasisCellLocated2Q, true, false);
                    Wait(6.26, c_timeGame);
                    gf_GiantAttentionGrabbingPing(UnitGetPosition(UnitGroupUnit(gv_hybridHoldingCellGroup, 2)));
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_hybridHoldingCellGroup, 2)), StringExternal(&quot;Param/Value/3D9382F6&quot;));
                    gv_mainObjectivePing[1] = PingLastCreated();
                }
                else if (auto89681287_val == 2) {
                    TriggerExecute(gt_HybridStasisCellLocated3Q, true, false);
                    Wait(6.75, c_timeGame);
                    gf_GiantAttentionGrabbingPing(UnitGetPosition(UnitGroupUnit(gv_hybridHoldingCellGroup, 3)));
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_hybridHoldingCellGroup, 3)), StringExternal(&quot;Param/Value/8E3C9649&quot;));
                    gv_mainObjectivePing[2] = PingLastCreated();
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateMainObjectivePing_Init () {
                gt_CreateMainObjectivePing = TriggerCreate(&quot;gt_CreateMainObjectivePing_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Hybrid Holding Cell
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyHybridHoldingCell_Func (bool testConds, bool runActions) {
                unit auto1BAE8014_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                PingDestroy(gv_mainObjectivePing[gv_destroyingHybridHoldingCellCount]);
                gv_destroyingHybridHoldingCellCount += 1;
                TriggerExecute(gt_ObjectiveEscortOdinUpdate, true, false);
                TriggerExecute(gt_CreateMainObjectivePing, true, false);
                auto1BAE8014_val = EventUnit();
                if (auto1BAE8014_val == UnitGroupUnit(gv_hybridHoldingCellGroup, 1)) {
                }
                else if (auto1BAE8014_val == UnitGroupUnit(gv_hybridHoldingCellGroup, 2)) {
                }
                else if (auto1BAE8014_val == UnitGroupUnit(gv_hybridHoldingCellGroup, 3)) {
                    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyHybridHoldingCell_Init () {
                gt_DestroyHybridHoldingCell = TriggerCreate(&quot;gt_DestroyHybridHoldingCell_Func&quot;);
                TriggerAddEventUnitDied(gt_DestroyHybridHoldingCell, UnitRefFromUnit(UnitFromId(1850759431)));
                TriggerAddEventUnitDied(gt_DestroyHybridHoldingCell, UnitRefFromUnit(UnitFromId(1651552205)));
                TriggerAddEventUnitDied(gt_DestroyHybridHoldingCell, UnitRefFromUnit(UnitFromId(685744180)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Spotted
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveSpotted_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!(((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true) || (EventUnit() == UnitFromId(2130817208))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_CreateBonusObjective, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveSpotted_Init () {
                gt_BonusObjectiveSpotted = TriggerCreate(&quot;gt_BonusObjectiveSpotted_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(1581150218)), 15.0, true);
                TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(821976728)), 15.0, true);
                TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(267342209)), 15.0, true);
                TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(208664152)), 15.0, true);
                TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(1505844463)), 15.0, true);
                TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(825880432)), 15.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Bonus Objective
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateBonusObjective_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_BonusObjectiveRevealQ, true, false);
                TriggerExecute(gt_ObjectiveObtainWeaponryPartsCreate, true, false);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(814085852)), StringExternal(&quot;Param/Value/2C64FB60&quot;));
                gv_bonusObjectivePing[0] = PingLastCreated();
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(535646867)), StringExternal(&quot;Param/Value/0C12E3C2&quot;));
                gv_bonusObjectivePing[1] = PingLastCreated();
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(1897148770)), StringExternal(&quot;Param/Value/B3B40096&quot;));
                gv_bonusObjectivePing[2] = PingLastCreated();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateBonusObjective_Init () {
                gt_CreateBonusObjective = TriggerCreate(&quot;gt_CreateBonusObjective_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Gate Control Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveGateControlDies_Func (bool testConds, bool runActions) {
                unit autoF6A76E9B_val;
                // Variable Declarations
                int lv_iLocal;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_BonusObjectiveProgressDoorBeOpenedQ, true, false);
                autoF6A76E9B_val = EventUnit();
                if (autoF6A76E9B_val == UnitFromId(208664152)) {
                    UnitIssueOrder(UnitFromId(1581150218), Order(AbilityCommand(&quot;DestructibleGateDiagonalULBRLowered&quot;, 0)), c_orderQueueReplace);
                    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(8), 12.0, false);
                    Wait(2.0, c_timeGame);
                    UnitRemove(UnitFromId(225845592));
                    UnitGroupLoopBegin(gv_bonusCrucioRoofGroup);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    Wait(4.0, c_timeGame);
                    libNtve_gf_AttachModelToUnit(UnitFromId(814085852), &quot;BriefingUnitSelect&quot;, &quot;Ref_Origin&quot;);
                    TriggerEnable(gt_BonusObjectivePicksupCrucio, true);
                }
                else if (autoF6A76E9B_val == UnitFromId(825880432)) {
                    UnitIssueOrder(UnitFromId(267342209), Order(AbilityCommand(&quot;DestructibleGateDiagonalULBRLowered&quot;, 0)), c_orderQueueReplace);
                    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(5), 12.0, false);
                    Wait(2.0, c_timeGame);
                    UnitRemove(UnitFromId(1015584490));
                    UnitGroupLoopBegin(gv_bonusInfernalRoofGroup);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    Wait(4.0, c_timeGame);
                    libNtve_gf_AttachModelToUnit(UnitFromId(535646867), &quot;BriefingUnitSelect&quot;, &quot;Ref_Origin&quot;);
                    TriggerEnable(gt_BonusObjectivePicksupInfernal, true);
                }
                else if (autoF6A76E9B_val == UnitFromId(1505844463)) {
                    UnitIssueOrder(UnitFromId(821976728), Order(AbilityCommand(&quot;DestructibleGateDiagonalULBRLowered&quot;, 0)), c_orderQueueReplace);
                    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(6), 12.0, false);
                    Wait(2.0, c_timeGame);
                    UnitRemove(UnitFromId(420307458));
                    UnitGroupLoopBegin(gv_bonusDetectorRoofGroup);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    Wait(4.0, c_timeGame);
                    libNtve_gf_AttachModelToUnit(UnitFromId(1897148770), &quot;BriefingUnitSelect&quot;, &quot;Ref_Origin&quot;);
                    TriggerEnable(gt_BonusObjectivePicksupDetector, true);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveGateControlDies_Init () {
                gt_BonusObjectiveGateControlDies = TriggerCreate(&quot;gt_BonusObjectiveGateControlDies_Func&quot;);
                TriggerAddEventUnitDied(gt_BonusObjectiveGateControlDies, UnitRefFromUnit(UnitFromId(208664152)));
                TriggerAddEventUnitDied(gt_BonusObjectiveGateControlDies, UnitRefFromUnit(UnitFromId(1505844463)));
                TriggerAddEventUnitDied(gt_BonusObjectiveGateControlDies, UnitRefFromUnit(UnitFromId(825880432)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Picks up - Crucio
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectivePicksupCrucio_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitKill(UnitFromId(814085852));
                PingDestroy(gv_bonusObjectivePing[0]);
                gv_objectiveWeaponryPartsPhase = 0;
                gv_objectiveRemainingWeaponryParts -= 1;
                TriggerExecute(gt_ObtainWeaponryPartsCrucioShockCannon, true, false);
                TriggerExecute(gt_BonusObjectivePicksup, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectivePicksupCrucio_Init () {
                gt_BonusObjectivePicksupCrucio = TriggerCreate(&quot;gt_BonusObjectivePicksupCrucio_Func&quot;);
                TriggerEnable(gt_BonusObjectivePicksupCrucio, false);
                TriggerAddEventUnitRegion(gt_BonusObjectivePicksupCrucio, null, RegionFromId(9), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Picks up - Infernal
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectivePicksupInfernal_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitKill(UnitFromId(535646867));
                PingDestroy(gv_bonusObjectivePing[1]);
                gv_objectiveWeaponryPartsPhase = 1;
                gv_objectiveRemainingWeaponryParts -= 1;
                TriggerExecute(gt_ObtainWeaponryPartsInfernalFlamethrower, true, false);
                TriggerExecute(gt_BonusObjectivePicksup, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectivePicksupInfernal_Init () {
                gt_BonusObjectivePicksupInfernal = TriggerCreate(&quot;gt_BonusObjectivePicksupInfernal_Func&quot;);
                TriggerEnable(gt_BonusObjectivePicksupInfernal, false);
                TriggerAddEventUnitRegion(gt_BonusObjectivePicksupInfernal, null, RegionFromId(2), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Picks up - Detector
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectivePicksupDetector_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                UnitKill(UnitFromId(1897148770));
                PingDestroy(gv_bonusObjectivePing[2]);
                gv_objectiveWeaponryPartsPhase = 2;
                gv_objectiveRemainingWeaponryParts -= 1;
                TriggerExecute(gt_ObtainWeaponryPartsDetector, true, false);
                TriggerExecute(gt_BonusObjectivePicksup, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectivePicksupDetector_Init () {
                gt_BonusObjectivePicksupDetector = TriggerCreate(&quot;gt_BonusObjectivePicksupDetector_Func&quot;);
                TriggerEnable(gt_BonusObjectivePicksupDetector, false);
                TriggerAddEventUnitRegion(gt_BonusObjectivePicksupDetector, null, RegionFromId(7), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Picks up
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectivePicksup_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveObtainWeaponryPartsUpdate, true, false);
                TriggerExecute(gt_ObjectiveObtainWeaponryPartsComplete, true, false);
                if ((gv_objectiveRemainingWeaponryParts == 0)) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerEnable(gt_BonusObjectiveProgressWeaponRemainingQ, false);
                    TriggerEnable(gt_BonusObjectiveProgressDoorBeOpenedQ, false);
                    TriggerExecute(gt_BonusObjectiveCompleteAllQ, true, false);
                }
                else {
                    TriggerExecute(gt_BonusObjectiveProgressWeaponRemainingQ, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectivePicksup_Init () {
                gt_BonusObjectivePicksup = TriggerCreate(&quot;gt_BonusObjectivePicksup_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Obtain Weaponry Parts - Crucio Shock Cannon
            //--------------------------------------------------------------------------------------------------
            bool gt_ObtainWeaponryPartsCrucioShockCannon_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_BonusObjectiveProgressCrucioQ, true, false);
                libNtve_gf_SetUpgradeLevelForPlayer(1, &quot;OdinSiegedUpgradeForBox&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, &quot;OdinSiegedUpgradeForBox&quot;, 1);
                Wait(4.67, c_timeGame);
                libNtve_gf_SetUpgradeLevelForPlayer(1, &quot;OdinSiegedUpgrade&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, &quot;OdinSiegedUpgrade&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObtainWeaponryPartsCrucioShockCannon_Init () {
                gt_ObtainWeaponryPartsCrucioShockCannon = TriggerCreate(&quot;gt_ObtainWeaponryPartsCrucioShockCannon_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Obtain Weaponry Parts - Infernal Flamethrower
            //--------------------------------------------------------------------------------------------------
            bool gt_ObtainWeaponryPartsInfernalFlamethrower_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_BonusObjectiveProgressInfernalQ, true, false);
                libNtve_gf_SetUpgradeLevelForPlayer(1, &quot;OdinInfernalFlameUpgradeForBox&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, &quot;OdinInfernalFlameUpgradeForBox&quot;, 1);
                Wait(4.67, c_timeGame);
                libNtve_gf_SetUpgradeLevelForPlayer(1, &quot;OdinInfernalFlameUpgrade&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, &quot;OdinInfernalFlameUpgrade&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObtainWeaponryPartsInfernalFlamethrower_Init () {
                gt_ObtainWeaponryPartsInfernalFlamethrower = TriggerCreate(&quot;gt_ObtainWeaponryPartsInfernalFlamethrower_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Obtain Weaponry Parts - Detector
            //--------------------------------------------------------------------------------------------------
            bool gt_ObtainWeaponryPartsDetector_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_BonusObjectiveProgressDetectorQ, true, false);
                libNtve_gf_SetUpgradeLevelForPlayer(1, &quot;OdinDetectorUpgradeForBox&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, &quot;OdinDetectorUpgradeForBox&quot;, 1);
                Wait(4.67, c_timeGame);
                libNtve_gf_SetUpgradeLevelForPlayer(1, &quot;OdinDetectorUpgrade&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, &quot;OdinDetectorUpgrade&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObtainWeaponryPartsDetector_Init () {
                gt_ObtainWeaponryPartsDetector = TriggerCreate(&quot;gt_ObtainWeaponryPartsDetector_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tip Ready Q
            //--------------------------------------------------------------------------------------------------
            bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                libCOMI_gf_DisplayMissionTip();
                Wait(libCOMI_gv_campaignHintDelay, c_timeReal);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TipReadyQ_Init () {
                gt_TipReadyQ = TriggerCreate(&quot;gt_TipReadyQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Attacking Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                Wait(20.0, c_timeAI);
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAttackingQ_Init () {
                gt_EnemyAttackingQ = TriggerCreate(&quot;gt_EnemyAttackingQ_Func&quot;);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Amon Sending Forces to Odin Q
            //--------------------------------------------------------------------------------------------------
            bool gt_AmonSendingForcestoOdinQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/E1464D45&quot;), StringExternal(&quot;Param/Value/0550989E&quot;), 7.4, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AmonSendingForcestoOdinQ_Init () {
                gt_AmonSendingForcestoOdinQ = TriggerCreate(&quot;gt_AmonSendingForcestoOdinQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Truck Departing Q
            //--------------------------------------------------------------------------------------------------
            bool gt_TruckDepartingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/830379D9&quot;), StringExternal(&quot;Param/Value/D62446A9&quot;), 9.9, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TruckDepartingQ_Init () {
                gt_TruckDepartingQ = TriggerCreate(&quot;gt_TruckDepartingQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Truck Arriving Q
            //--------------------------------------------------------------------------------------------------
            bool gt_TruckArrivingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/F3106FE4&quot;), StringExternal(&quot;Param/Value/215892BC&quot;), 5.5, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TruckArrivingQ_Init () {
                gt_TruckArrivingQ = TriggerCreate(&quot;gt_TruckArrivingQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Finishing Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinFinishingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/8804B77E&quot;), StringExternal(&quot;Param/Value/06601B52&quot;), 7.76, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinFinishingQ_Init () {
                gt_OdinFinishingQ = TriggerCreate(&quot;gt_OdinFinishingQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Arriving in the Shelter 1 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinArrivingintheShelter1Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/0FEADB28&quot;), StringExternal(&quot;Param/Value/A5C45F19&quot;), 7.9, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinArrivingintheShelter1Q_Init () {
                gt_OdinArrivingintheShelter1Q = TriggerCreate(&quot;gt_OdinArrivingintheShelter1Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Arriving in the Shelter 2 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinArrivingintheShelter2Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/A72D59C2&quot;), StringExternal(&quot;Param/Value/530F9F07&quot;), 8.12, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinArrivingintheShelter2Q_Init () {
                gt_OdinArrivingintheShelter2Q = TriggerCreate(&quot;gt_OdinArrivingintheShelter2Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Arriving in the Shelter 3 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinArrivingintheShelter3Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/8FD7D80D&quot;), StringExternal(&quot;Param/Value/862D3D57&quot;), 8.41, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinArrivingintheShelter3Q_Init () {
                gt_OdinArrivingintheShelter3Q = TriggerCreate(&quot;gt_OdinArrivingintheShelter3Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Departing from the Factory 0 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinDepartingfromtheFactory0Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/71E9721C&quot;), StringExternal(&quot;Param/Value/966BE967&quot;), 7.3, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinDepartingfromtheFactory0Q_Init () {
                gt_OdinDepartingfromtheFactory0Q = TriggerCreate(&quot;gt_OdinDepartingfromtheFactory0Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Departing from the Shelter 1 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinDepartingfromtheShelter1Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/2803C960&quot;), StringExternal(&quot;Param/Value/3C9F4F8D&quot;), 7.3, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinDepartingfromtheShelter1Q_Init () {
                gt_OdinDepartingfromtheShelter1Q = TriggerCreate(&quot;gt_OdinDepartingfromtheShelter1Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Departing from the Shelter 2 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinDepartingfromtheShelter2Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/D9D967B1&quot;), StringExternal(&quot;Param/Value/D1008F18&quot;), 5.51, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinDepartingfromtheShelter2Q_Init () {
                gt_OdinDepartingfromtheShelter2Q = TriggerCreate(&quot;gt_OdinDepartingfromtheShelter2Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Departing from the Shelter 3 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinDepartingfromtheShelter3Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/C778BE30&quot;), StringExternal(&quot;Param/Value/E1AAD593&quot;), 6.15, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinDepartingfromtheShelter3Q_Init () {
                gt_OdinDepartingfromtheShelter3Q = TriggerCreate(&quot;gt_OdinDepartingfromtheShelter3Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Stasis Cell Located 1 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStasisCellLocated1Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/5B23C065&quot;), StringExternal(&quot;Param/Value/41A33550&quot;), 4.67, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStasisCellLocated1Q_Init () {
                gt_HybridStasisCellLocated1Q = TriggerCreate(&quot;gt_HybridStasisCellLocated1Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Stasis Cell Located 2 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStasisCellLocated2Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/C7AFC34A&quot;), StringExternal(&quot;Param/Value/7398955C&quot;), 6.26, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStasisCellLocated2Q_Init () {
                gt_HybridStasisCellLocated2Q = TriggerCreate(&quot;gt_HybridStasisCellLocated2Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hybrid Stasis Cell Located 3 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_HybridStasisCellLocated3Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/8EF7D9DF&quot;), StringExternal(&quot;Param/Value/A7E5BB45&quot;), 6.75, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HybridStasisCellLocated3Q_Init () {
                gt_HybridStasisCellLocated3Q = TriggerCreate(&quot;gt_HybridStasisCellLocated3Q_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Under Attack Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinUnderAttackQ_Func (bool testConds, bool runActions) {
                int auto42EED971_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 75.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                auto42EED971_val = RandomInt(1, 3);
                if (auto42EED971_val == 1) {
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/09979FAC&quot;), StringExternal(&quot;Param/Value/A9A62AA3&quot;), 3.54, c_transmissionDurationAdd, true, c_maxPlayers, false);
                }
                else if (auto42EED971_val == 2) {
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/7399A654&quot;), StringExternal(&quot;Param/Value/322B165B&quot;), 3.48, c_transmissionDurationAdd, true, c_maxPlayers, false);
                }
                else {
                }
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinUnderAttackQ_Init () {
                gt_OdinUnderAttackQ = TriggerCreate(&quot;gt_OdinUnderAttackQ_Func&quot;);
                TriggerEnable(gt_OdinUnderAttackQ, false);
                TriggerAddEventUnitAttacked2(gt_OdinUnderAttackQ, UnitRefFromVariable(&quot;gv_odinUnit&quot;), null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Warning 50 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinWarning50Q_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 50.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/FC7633AD&quot;), StringExternal(&quot;Param/Value/835272D4&quot;), 7.13, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinWarning50Q_Init () {
                gt_OdinWarning50Q = TriggerCreate(&quot;gt_OdinWarning50Q_Func&quot;);
                TriggerEnable(gt_OdinWarning50Q, false);
                TriggerAddEventUnitAttacked2(gt_OdinWarning50Q, UnitRefFromVariable(&quot;gv_odinUnit&quot;), null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Warning 25 Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinWarning25Q_Func (bool testConds, bool runActions) {
                int auto4D89C84A_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 25.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                auto4D89C84A_val = RandomInt(1, 2);
                if (auto4D89C84A_val == 1) {
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/5A11A7C3&quot;), StringExternal(&quot;Param/Value/B9BE6453&quot;), 5.56, c_transmissionDurationAdd, true, c_maxPlayers, false);
                }
                else if (auto4D89C84A_val == 2) {
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/64882DE0&quot;), StringExternal(&quot;Param/Value/D0628550&quot;), 4.75, c_transmissionDurationAdd, true, c_maxPlayers, false);
                }
                else {
                }
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinWarning25Q_Init () {
                gt_OdinWarning25Q = TriggerCreate(&quot;gt_OdinWarning25Q_Func&quot;);
                TriggerEnable(gt_OdinWarning25Q, false);
                TriggerAddEventUnitAttacked2(gt_OdinWarning25Q, UnitRefFromVariable(&quot;gv_odinUnit&quot;), null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Critical Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinCriticalQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((UnitGetPropertyFixed(gv_odinUnit, c_unitPropLifePercent, c_unitPropCurrent) &lt;= 10.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/4CF51CB0&quot;), StringExternal(&quot;Param/Value/C310B7B9&quot;), 5.5, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinCriticalQ_Init () {
                gt_OdinCriticalQ = TriggerCreate(&quot;gt_OdinCriticalQ_Func&quot;);
                TriggerEnable(gt_OdinCriticalQ, false);
                TriggerAddEventUnitAttacked2(gt_OdinCriticalQ, UnitRefFromVariable(&quot;gv_odinUnit&quot;), null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Rebuilding Start Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinRebuildingStartQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/63B1357D&quot;), StringExternal(&quot;Param/Value/424FFC9C&quot;), 7.32, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinRebuildingStartQ_Init () {
                gt_OdinRebuildingStartQ = TriggerCreate(&quot;gt_OdinRebuildingStartQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Rebuilding Finish Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinRebuildingFinishQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/2913AB42&quot;), StringExternal(&quot;Param/Value/61EC80C2&quot;), 6.35, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinRebuildingFinishQ_Init () {
                gt_OdinRebuildingFinishQ = TriggerCreate(&quot;gt_OdinRebuildingFinishQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Rebuilding Start - Last Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinRebuildingStartLastQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/D57D0DA2&quot;), StringExternal(&quot;Param/Value/B06D5015&quot;), 7.9, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinRebuildingStartLastQ_Init () {
                gt_OdinRebuildingStartLastQ = TriggerCreate(&quot;gt_OdinRebuildingStartLastQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Odin Rebuilding Finish - Last Q
            //--------------------------------------------------------------------------------------------------
            bool gt_OdinRebuildingFinishLastQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/AD2D3294&quot;), StringExternal(&quot;Param/Value/6B459199&quot;), 5.32, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OdinRebuildingFinishLastQ_Init () {
                gt_OdinRebuildingFinishLastQ = TriggerCreate(&quot;gt_OdinRebuildingFinishLastQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Reveal Q
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveRevealQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/CFAFFAEC&quot;), StringExternal(&quot;Param/Value/CB0CCD74&quot;), 10.1, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveRevealQ_Init () {
                gt_BonusObjectiveRevealQ = TriggerCreate(&quot;gt_BonusObjectiveRevealQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Progress - Crucio Q
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveProgressCrucioQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/D149D012&quot;), StringExternal(&quot;Param/Value/59E19DF2&quot;), 6.5, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveProgressCrucioQ_Init () {
                gt_BonusObjectiveProgressCrucioQ = TriggerCreate(&quot;gt_BonusObjectiveProgressCrucioQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Progress - Infernal Q
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveProgressInfernalQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/B3162F7E&quot;), StringExternal(&quot;Param/Value/928D564A&quot;), 6.7, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveProgressInfernalQ_Init () {
                gt_BonusObjectiveProgressInfernalQ = TriggerCreate(&quot;gt_BonusObjectiveProgressInfernalQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Progress - Detector Q
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveProgressDetectorQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/FD113422&quot;), StringExternal(&quot;Param/Value/1789FA04&quot;), 10.6, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveProgressDetectorQ_Init () {
                gt_BonusObjectiveProgressDetectorQ = TriggerCreate(&quot;gt_BonusObjectiveProgressDetectorQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Progress - Door Be Opened Q
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveProgressDoorBeOpenedQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/C7F6090D&quot;), StringExternal(&quot;Param/Value/392B8393&quot;), 6.4, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveProgressDoorBeOpenedQ_Init () {
                gt_BonusObjectiveProgressDoorBeOpenedQ = TriggerCreate(&quot;gt_BonusObjectiveProgressDoorBeOpenedQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Progress - Weapon Remaining Q
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveProgressWeaponRemainingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/440E79E8&quot;), StringExternal(&quot;Param/Value/F90A1124&quot;), 7.86, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveProgressWeaponRemainingQ_Init () {
                gt_BonusObjectiveProgressWeaponRemainingQ = TriggerCreate(&quot;gt_BonusObjectiveProgressWeaponRemainingQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bonus Objective Complete - All Q
            //--------------------------------------------------------------------------------------------------
            bool gt_BonusObjectiveCompleteAllQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/D3E32B40&quot;), StringExternal(&quot;Param/Value/4C0946A9&quot;), 5.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BonusObjectiveCompleteAllQ_Init () {
                gt_BonusObjectiveCompleteAllQ = TriggerCreate(&quot;gt_BonusObjectiveCompleteAllQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Primary Objective Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_VictorySequence, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryPrimaryObjectiveComplete_Init () {
                gt_VictoryPrimaryObjectiveComplete = TriggerCreate(&quot;gt_VictoryPrimaryObjectiveComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Sequence
            //--------------------------------------------------------------------------------------------------
            bool gt_VictorySequence_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
                Wait(2.0, c_timeReal);
                TriggerExecute(gt_ObjectiveEscortOdinComplete, true, false);
                Wait(3.0, c_timeReal);
                libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictorySequence_Init () {
                gt_VictorySequence = TriggerCreate(&quot;gt_VictorySequence_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Fanfare Q
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionClearAll();
                TriggerQueueEnter();
                libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/AE62AC16&quot;), StringExternal(&quot;Param/Value/499716AE&quot;), 10.15, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                UnitPauseAll(true);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(15)), 2.0, -1, 10.0, false);
                CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionFromId(15)), 2.0, -1, 10.0, false);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2130817208)), c_animNameDefault, &quot;Stand Victory&quot;, c_animFlagNonLooping, c_animTimeDefault);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/684A78B4&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/E5C8709E&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_WaitForMissionTransmission();
                Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Victory, true, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryFanfareQ_Init () {
                gt_VictoryFanfareQ = TriggerCreate(&quot;gt_VictoryFanfareQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Escort the Odin Failed - OdinRebuidCount is end
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatEscorttheOdinFailedOdinRebuidCountisend_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TriggerExecute(gt_ObjectiveEscortOdinFailed, true, false);
                Wait(2.0, c_timeGame);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1485451984), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;UI_TransmissionStart&quot;, -1), StringExternal(&quot;Param/Value/8A6F1E76&quot;), StringExternal(&quot;Param/Value/BBF8A43B&quot;), 8.3, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/8892FF00&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                Wait(2.0, c_timeGame);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(15)), 1.5, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionFromId(15)), 1.5, -1, 10.0, false);
                UnitKill(gv_odinUnit);
                libCOMI_gf_WaitForMissionTransmission();
                Wait(4.0, c_timeGame);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatEscorttheOdinFailedOdinRebuidCountisend_Init () {
                gt_DefeatEscorttheOdinFailedOdinRebuidCountisend = TriggerCreate(&quot;gt_DefeatEscorttheOdinFailedOdinRebuidCountisend_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Victory_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverVictory);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Victory_Init () {
                gt_Victory = TriggerCreate(&quot;gt_Victory_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_Defeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Defeat_Init () {
                gt_Defeat = TriggerCreate(&quot;gt_Defeat_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start AI
            //--------------------------------------------------------------------------------------------------
            bool gt_StartAI_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_AIAttackWaves, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartAI_Init () {
                gt_StartAI = TriggerCreate(&quot;gt_StartAI_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Send Forces to Odin
            //--------------------------------------------------------------------------------------------------
            bool gt_SendForcestoOdin_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_AmonSendingForcestoOdinQ, true, false);
                TriggerExecute(gt_SendingForcestoOdinA, true, false);
                TriggerExecute(gt_SendingForcestoOdinB, true, false);
                TriggerExecute(gt_SendingForcestoOdinC, true, false);
                TriggerExecute(gt_SendingForcestoOdinD, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SendForcestoOdin_Init () {
                gt_SendForcestoOdin = TriggerCreate(&quot;gt_SendForcestoOdin_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sending Forces to Odin A
            //--------------------------------------------------------------------------------------------------
            bool gt_SendingForcestoOdinA_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((GameGetMissionTime() &lt; (11.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                }
                else if ((GameGetMissionTime() &gt;= (11.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (14.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else if ((GameGetMissionTime() &gt;= (14.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (17.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                }
                else if ((GameGetMissionTime() &gt;= (17.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (20.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                }
                else if ((GameGetMissionTime() &gt;= (20.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                }
                if ((gv_odinTrackPhase == 1)) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(17)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(17)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(12559069), true);
                    Wait(7.0, c_timeGame);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(741894537), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(741894537), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(651032605), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(1)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(1)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(78089003), true);
                    Wait(7.0, c_timeGame);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1266518697), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SendingForcestoOdinA_Init () {
                gt_SendingForcestoOdinA = TriggerCreate(&quot;gt_SendingForcestoOdinA_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sending Forces to Odin B
            //--------------------------------------------------------------------------------------------------
            bool gt_SendingForcestoOdinB_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((GameGetMissionTime() &lt; (11.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                }
                else if ((GameGetMissionTime() &gt;= (11.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (14.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else if ((GameGetMissionTime() &gt;= (14.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (17.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                }
                else if ((GameGetMissionTime() &gt;= (17.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (20.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                }
                else if ((GameGetMissionTime() &gt;= (20.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                }
                if ((gv_odinTrackPhase == 1)) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(17)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(17)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(78089003), true);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1266518697), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1273717062), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(1)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(1)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1942212717), true);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1530336784), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1266518697), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SendingForcestoOdinB_Init () {
                gt_SendingForcestoOdinB = TriggerCreate(&quot;gt_SendingForcestoOdinB_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sending Forces to Odin C
            //--------------------------------------------------------------------------------------------------
            bool gt_SendingForcestoOdinC_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((GameGetMissionTime() &lt; (11.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                }
                else if ((GameGetMissionTime() &gt;= (11.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (14.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                }
                else if ((GameGetMissionTime() &gt;= (14.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (17.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                }
                else if ((GameGetMissionTime() &gt;= (17.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (20.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else if ((GameGetMissionTime() &gt;= (20.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                }
                if ((gv_odinTrackPhase == 1)) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(17)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(17)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(12559069), true);
                    Wait(7.0, c_timeGame);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(741894537), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(741894537), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(651032605), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(1)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(1)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(78089003), true);
                    Wait(7.0, c_timeGame);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1266518697), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SendingForcestoOdinC_Init () {
                gt_SendingForcestoOdinC = TriggerCreate(&quot;gt_SendingForcestoOdinC_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sending Forces to Odin D
            //--------------------------------------------------------------------------------------------------
            bool gt_SendingForcestoOdinD_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((GameGetMissionTime() &lt; (11.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                }
                else if ((GameGetMissionTime() &gt;= (11.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (14.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                }
                else if ((GameGetMissionTime() &gt;= (14.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (17.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                }
                else if ((GameGetMissionTime() &gt;= (17.0 * 60.0)) &amp;&amp; ((GameGetMissionTime() &lt; (20.0 * 60.0)))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
                else if ((GameGetMissionTime() &gt;= (20.0 * 60.0))) {
                    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                }
                if ((gv_odinTrackPhase == 1)) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(17)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(17)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(78089003), true);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1266518697), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1273717062), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, RegionGetCenter(RegionFromId(1)));
                    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, RegionGetCenter(RegionFromId(1)));
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1942212717), true);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1530336784), false);
                    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1266518697), false);
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SendingForcestoOdinD_Init () {
                gt_SendingForcestoOdinD = TriggerCreate(&quot;gt_SendingForcestoOdinD_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: AI Attack Waves
            //--------------------------------------------------------------------------------------------------
            bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.7 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.5 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (23.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (26.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (29.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (32.0 * 60.0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIAttackWaves_Init () {
                gt_AIAttackWaves = TriggerCreate(&quot;gt_AIAttackWaves_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 01
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave01_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(716811249), true);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1273717062), false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave01_Init () {
                gt_AttackWave01 = TriggerCreate(&quot;gt_AttackWave01_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 02
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave02_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(716811249), true);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1273717062), false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave02_Init () {
                gt_AttackWave02 = TriggerCreate(&quot;gt_AttackWave02_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 03
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave03_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_numberOfStructures_ExpLeft;
                int lv_numberOfStructures_ExpRight;
                point lv_attackPathWaypoint;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(3), UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                }
                PlayerGroupLoopEnd();
                if ((((lv_numberOfStructures_ExpLeft == 0) &amp;&amp; (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft &gt; 0) &amp;&amp; (lv_numberOfStructures_ExpRight &gt; 0)))) {
                    if ((RandomInt(0, 100) &lt; 50)) {
                        lv_attackPathWaypoint = PointFromId(367);
                    }
                    else {
                        lv_attackPathWaypoint = PointFromId(358);
                    }
                }
                else {
                    if ((lv_numberOfStructures_ExpLeft &gt; lv_numberOfStructures_ExpRight)) {
                        lv_attackPathWaypoint = PointFromId(367);
                    }
                    else {
                        lv_attackPathWaypoint = PointFromId(358);
                    }
                }
                if ((lv_attackPathWaypoint == PointFromId(367))) {
                    gv_attackWaveA_Wave05Path = PointFromId(358);
                }
                else {
                    gv_attackWaveA_Wave05Path = PointFromId(367);
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(716811249), true);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1210584689), false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave03_Init () {
                gt_AttackWave03 = TriggerCreate(&quot;gt_AttackWave03_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 04
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave04_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_attackingAI;
                int lv_defendingPlayer;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1467063747), true);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(651032605), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1210584689), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(623356986), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1580817750), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(524540445), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1829472213), false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave04_Init () {
                gt_AttackWave04 = TriggerCreate(&quot;gt_AttackWave04_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 05
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave05_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_numberOfStructures_ExpLeft;
                int lv_numberOfStructures_ExpRight;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(734606829), true);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1339889241), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1273717062), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1210584689), false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave05_Init () {
                gt_AttackWave05 = TriggerCreate(&quot;gt_AttackWave05_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 06
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave06_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(78089003), true);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1588340927), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(734606829), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1043470317), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(741894537), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1467063747), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(651032605), false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave06_Init () {
                gt_AttackWave06 = TriggerCreate(&quot;gt_AttackWave06_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 07
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave07_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1942212717), true);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1530336784), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(716811249), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1588340927), false);
                libCOMI_gf_AddAttackForceWaypoint(PointFromId(1273717062), false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave07_Init () {
                gt_AttackWave07 = TriggerCreate(&quot;gt_AttackWave07_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Escort Odin - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortOdinCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Odin_Primary01&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;AC_Odin_Primary01&quot;, 3);
                gv_objectiveEscortOdinandDestroyAllHybridHoldingCells = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 10);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Odin_Primary02&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;AC_Odin_Primary02&quot;, gv_odinRebuildableTotalCount);
                gv_objectiveDoNotLetOdinBeDestroyed = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 9);
                TriggerExecute(gt_ObjectiveEscortOdinUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortOdinCreate_Init () {
                gt_ObjectiveEscortOdinCreate = TriggerCreate(&quot;gt_ObjectiveEscortOdinCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Escort Odin - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortOdinComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveEscortOdinCreate, true, false);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;AC_Odin_Primary01&quot;, libCOMI_ge_MissionObjectiveState_Completed);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;AC_Odin_Primary02&quot;, libCOMI_ge_MissionObjectiveState_Completed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortOdinComplete_Init () {
                gt_ObjectiveEscortOdinComplete = TriggerCreate(&quot;gt_ObjectiveEscortOdinComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Escort Odin - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortOdinUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveEscortOdinCreate, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Odin_Primary01&quot;, gv_destroyingHybridHoldingCellCount);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Odin_Primary02&quot;, gv_odinBeDestroyedCount);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortOdinUpdate_Init () {
                gt_ObjectiveEscortOdinUpdate = TriggerCreate(&quot;gt_ObjectiveEscortOdinUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Escort Odin - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortOdinFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveEscortOdinCreate, true, false);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;AC_Odin_Primary01&quot;, libCOMI_ge_MissionObjectiveState_Failed);
                libCOMI_gf_ZS_SetMissionObjectiveState(&quot;AC_Odin_Primary02&quot;, libCOMI_ge_MissionObjectiveState_Failed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortOdinFailed_Init () {
                gt_ObjectiveEscortOdinFailed = TriggerCreate(&quot;gt_ObjectiveEscortOdinFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Obtain Weaponry Parts - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveObtainWeaponryPartsCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Odin_Bonus01&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;AC_Odin_Bonus01&quot;, 1);
                gv_objectiveRescueStalkers = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 7);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Odin_Bonus02&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;AC_Odin_Bonus02&quot;, 1);
                gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 6);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                libCOMI_gf_CreateObjectiveCampaign(&quot;AC_Odin_Bonus03&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;AC_Odin_Bonus03&quot;, 1);
                gv_objectiveRescueStalkers3 = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 5);
                TriggerExecute(gt_ObjectiveObtainWeaponryPartsUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveObtainWeaponryPartsCreate_Init () {
                gt_ObjectiveObtainWeaponryPartsCreate = TriggerCreate(&quot;gt_ObjectiveObtainWeaponryPartsCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Obtain Weaponry Parts - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveObtainWeaponryPartsComplete_Func (bool testConds, bool runActions) {
                int auto5AA412DD_val;
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveObtainWeaponryPartsCreate, true, false);
                auto5AA412DD_val = gv_objectiveWeaponryPartsPhase;
                if (auto5AA412DD_val == 0) {
                    libCOMI_gf_ZS_SetMissionObjectiveState(&quot;AC_Odin_Bonus01&quot;, libCOMI_ge_MissionObjectiveState_Completed);
                }
                else if (auto5AA412DD_val == 1) {
                    libCOMI_gf_ZS_SetMissionObjectiveState(&quot;AC_Odin_Bonus02&quot;, libCOMI_ge_MissionObjectiveState_Completed);
                }
                else if (auto5AA412DD_val == 2) {
                    libCOMI_gf_ZS_SetMissionObjectiveState(&quot;AC_Odin_Bonus03&quot;, libCOMI_ge_MissionObjectiveState_Completed);
                }
                else {
                }
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveObtainWeaponryPartsComplete_Init () {
                gt_ObjectiveObtainWeaponryPartsComplete = TriggerCreate(&quot;gt_ObjectiveObtainWeaponryPartsComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Obtain Weaponry Parts - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveObtainWeaponryPartsUpdate_Func (bool testConds, bool runActions) {
                int auto832B1B13_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveObtainWeaponryPartsCreate, true, false);
                auto832B1B13_val = gv_objectiveWeaponryPartsPhase;
                if (auto832B1B13_val == 0) {
                    libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Odin_Bonus01&quot;, 1);
                }
                else if (auto832B1B13_val == 1) {
                    libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Odin_Bonus02&quot;, 1);
                }
                else if (auto832B1B13_val == 2) {
                    libCOMI_gf_SetMissionObjectiveProgress(&quot;AC_Odin_Bonus03&quot;, 1);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveObtainWeaponryPartsUpdate_Init () {
                gt_ObjectiveObtainWeaponryPartsUpdate = TriggerCreate(&quot;gt_ObjectiveObtainWeaponryPartsUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Obtain Weaponry Parts - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveObtainWeaponryPartsFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
                    Wait(1.0, c_timeGame);
                }
                TriggerExecute(gt_ObjectiveObtainWeaponryPartsCreate, true, false);
                ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateFailed);
                ObjectiveSetState(gv_objectiveRescueStalkers2, c_objectiveStateFailed);
                ObjectiveSetState(gv_objectiveRescueStalkers3, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveObtainWeaponryPartsFailed_Init () {
                gt_ObjectiveObtainWeaponryPartsFailed = TriggerCreate(&quot;gt_ObjectiveObtainWeaponryPartsFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void InitTriggers () {
                gt_Init01LoadData_Init();
                gt_Init02Players_Init();
                gt_Init03LoadingComplete_Init();
                gt_Init04Technology_Init();
                gt_Init05Units_Init();
                gt_Init06MusicSound_Init();
                gt_Init07Environment_Init();
                gt_Init08Difficulties_Init();
                gt_DebugCantFail_Init();
                gt_DebugBlackSheepWall_Init();
                gt_DebugUpgradeOdinWeaponCrucio_Init();
                gt_DebugUpgradeOdinWeaponInfernal_Init();
                gt_DebugUpgradeOdinWeaponDetector_Init();
                gt_StartGameQ_Init();
                gt_MovetheTerrazineGasTruck_Init();
                gt_ArrivetheTerrazineGasTruck_Init();
                gt_ScoreScreenOdinLifeLeft_Init();
                gt_SetOdinLanePointVariable_Init();
                gt_RevealOdinLanePoint_Init();
                gt_BuildOdin_Init();
                gt_OpenGate_Init();
                gt_SetOdinTrackPointVariable_Init();
                gt_MoveOdin_Init();
                gt_ArriveandDepartOdinShelter_Init();
                gt_RemoveOdinTrackPoint01_Init();
                gt_RemoveOdinTrackPoint02_Init();
                gt_RemoveOdinTrackPoint03_Init();
                gt_RemoveOdinTrackPoint04_Init();
                gt_RemoveOdinTrackPoint05_Init();
                gt_RemoveOdinTrackPoint06_Init();
                gt_RemoveOdinTrackPoint07_Init();
                gt_RemoveOdinTrackPoint08_Init();
                gt_RemoveOdinTrackPoint09_Init();
                gt_RemoveOdinTrackPoint10_Init();
                gt_RemoveOdinTrackPoint11_Init();
                gt_RemoveOdinTrackPoint12_Init();
                gt_RemoveOdinTrackPoint13_Init();
                gt_RemoveOdinTrackPoint14_Init();
                gt_RemoveOdinTrackPoint15_Init();
                gt_RemoveOdinTrackPoint16_Init();
                gt_RemoveOdinTrackPoint17_Init();
                gt_RemoveOdinTrackPoint18_Init();
                gt_RemoveOdinTrackPoint19_Init();
                gt_RemoveOdinTrackPoint20_Init();
                gt_RemoveOdinTrackPoint21_Init();
                gt_RemoveOdinTrackPoint22_Init();
                gt_RemoveOdinTrackPoint23_Init();
                gt_RemoveOdinTrackPoint24_Init();
                gt_RemoveOdinTrackPoint25_Init();
                gt_RemoveOdinTrackPoint26_Init();
                gt_RemoveOdinTrackPoint27_Init();
                gt_RemoveOdinTrackPoint28_Init();
                gt_RemoveOdinTrackPoint29_Init();
                gt_RemoveOdinTrackPoint30_Init();
                gt_RemoveOdinTrackPoint31_Init();
                gt_RemoveOdinTrackPoint32_Init();
                gt_RemoveOdinTrackPoint33_Init();
                gt_RemoveOdinTrackPoint34_Init();
                gt_RemoveOdinTrackPoint35_Init();
                gt_RemoveOdinTrackPoint36_Init();
                gt_RemoveOdinTrackPoint37_Init();
                gt_RemoveOdinTrackPoint38_Init();
                gt_RemoveOdinTrackPoint39_Init();
                gt_RemoveOdinTrackPoint40_Init();
                gt_RemoveOdinTrackPoint41_Init();
                gt_RemoveOdinTrackPoint42_Init();
                gt_RemoveOdinTrackPoint43_Init();
                gt_RemoveOdinTrackPoint44_Init();
                gt_RemoveOdinTrackPoint45_Init();
                gt_RemoveOdinTrackPoint46_Init();
                gt_RemoveOdinTrackPoint47_Init();
                gt_RemoveOdinTrackPoint48_Init();
                gt_RemoveOdinTrackPoint49_Init();
                gt_RemoveOdinTrackPoint50_Init();
                gt_RemoveOdinTrackPoint51_Init();
                gt_RemoveOdinTrackPoint52_Init();
                gt_RemoveOdinTrackPoint53_Init();
                gt_RemoveOdinTrackPoint54_Init();
                gt_RemoveOdinTrackPoint55_Init();
                gt_UseBarrage_Init();
                gt_CalldownEliteMULE_Init();
                gt_MorphOdinWreckage_Init();
                gt_MorphOdinWreckageStartRebuild_Init();
                gt_CreateOdinRebuildTool_Init();
                gt_MorphOdinRebuildFinish_Init();
                gt_CreateMainObjectivePing_Init();
                gt_DestroyHybridHoldingCell_Init();
                gt_BonusObjectiveSpotted_Init();
                gt_CreateBonusObjective_Init();
                gt_BonusObjectiveGateControlDies_Init();
                gt_BonusObjectivePicksupCrucio_Init();
                gt_BonusObjectivePicksupInfernal_Init();
                gt_BonusObjectivePicksupDetector_Init();
                gt_BonusObjectivePicksup_Init();
                gt_ObtainWeaponryPartsCrucioShockCannon_Init();
                gt_ObtainWeaponryPartsInfernalFlamethrower_Init();
                gt_ObtainWeaponryPartsDetector_Init();
                gt_TipReadyQ_Init();
                gt_EnemyAttackingQ_Init();
                gt_AmonSendingForcestoOdinQ_Init();
                gt_TruckDepartingQ_Init();
                gt_TruckArrivingQ_Init();
                gt_OdinFinishingQ_Init();
                gt_OdinArrivingintheShelter1Q_Init();
                gt_OdinArrivingintheShelter2Q_Init();
                gt_OdinArrivingintheShelter3Q_Init();
                gt_OdinDepartingfromtheFactory0Q_Init();
                gt_OdinDepartingfromtheShelter1Q_Init();
                gt_OdinDepartingfromtheShelter2Q_Init();
                gt_OdinDepartingfromtheShelter3Q_Init();
                gt_HybridStasisCellLocated1Q_Init();
                gt_HybridStasisCellLocated2Q_Init();
                gt_HybridStasisCellLocated3Q_Init();
                gt_OdinUnderAttackQ_Init();
                gt_OdinWarning50Q_Init();
                gt_OdinWarning25Q_Init();
                gt_OdinCriticalQ_Init();
                gt_OdinRebuildingStartQ_Init();
                gt_OdinRebuildingFinishQ_Init();
                gt_OdinRebuildingStartLastQ_Init();
                gt_OdinRebuildingFinishLastQ_Init();
                gt_BonusObjectiveRevealQ_Init();
                gt_BonusObjectiveProgressCrucioQ_Init();
                gt_BonusObjectiveProgressInfernalQ_Init();
                gt_BonusObjectiveProgressDetectorQ_Init();
                gt_BonusObjectiveProgressDoorBeOpenedQ_Init();
                gt_BonusObjectiveProgressWeaponRemainingQ_Init();
                gt_BonusObjectiveCompleteAllQ_Init();
                gt_VictoryPrimaryObjectiveComplete_Init();
                gt_VictorySequence_Init();
                gt_VictoryFanfareQ_Init();
                gt_DefeatEscorttheOdinFailedOdinRebuidCountisend_Init();
                gt_Victory_Init();
                gt_Defeat_Init();
                gt_StartAI_Init();
                gt_SendForcestoOdin_Init();
                gt_SendingForcestoOdinA_Init();
                gt_SendingForcestoOdinB_Init();
                gt_SendingForcestoOdinC_Init();
                gt_SendingForcestoOdinD_Init();
                gt_AIAttackWaves_Init();
                gt_AttackWave01_Init();
                gt_AttackWave02_Init();
                gt_AttackWave03_Init();
                gt_AttackWave04_Init();
                gt_AttackWave05_Init();
                gt_AttackWave06_Init();
                gt_AttackWave07_Init();
                gt_ObjectiveEscortOdinCreate_Init();
                gt_ObjectiveEscortOdinComplete_Init();
                gt_ObjectiveEscortOdinUpdate_Init();
                gt_ObjectiveEscortOdinFailed_Init();
                gt_ObjectiveObtainWeaponryPartsCreate_Init();
                gt_ObjectiveObtainWeaponryPartsComplete_Init();
                gt_ObjectiveObtainWeaponryPartsUpdate_Init();
                gt_ObjectiveObtainWeaponryPartsFailed_Init();
            }
            //--------------------------------------------------------------------------------------------------
            // Map Initialization
            //--------------------------------------------------------------------------------------------------
            void run () {
                InitLibs();
                InitGlobals();
                InitCustomAI();
                InitTriggers();
            }
        </ScriptCode>
        <InitFunc>run</InitFunc>
    </Element>
</TriggerData>