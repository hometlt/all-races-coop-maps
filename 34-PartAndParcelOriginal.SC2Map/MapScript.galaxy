//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Part and Parcel Original
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Hybrid Wave AI
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }
    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave2_enabled;
wave[17] aiF917F4D7_wave2_lastWave;
trigger aiF917F4D7_wave2_trigger = null;
int aiF917F4D7_wave2_runPlayer;
playergroup aiF917F4D7_wave2_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave2_enabled[init_i] = true;
        aiF917F4D7_wave2_lastWave[init_i] = null;
    }
    aiF917F4D7_wave2_trigger = TriggerCreate("aiF917F4D7_wave2_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave2_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave2_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave2_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave2_runPlayer;
    playergroup target = aiF917F4D7_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave2_runPlayer = p;
    aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave3_enabled;
wave[17] aiF917F4D7_wave3_lastWave;
trigger aiF917F4D7_wave3_trigger = null;
int aiF917F4D7_wave3_runPlayer;
playergroup aiF917F4D7_wave3_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave3_enabled[init_i] = true;
        aiF917F4D7_wave3_lastWave[init_i] = null;
    }
    aiF917F4D7_wave3_trigger = TriggerCreate("aiF917F4D7_wave3_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave3_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave3_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave3_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave3_runPlayer;
    playergroup target = aiF917F4D7_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave3_runPlayer = p;
    aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave4_enabled;
wave[17] aiF917F4D7_wave4_lastWave;
trigger aiF917F4D7_wave4_trigger = null;
int aiF917F4D7_wave4_runPlayer;
playergroup aiF917F4D7_wave4_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave4_enabled[init_i] = true;
        aiF917F4D7_wave4_lastWave[init_i] = null;
    }
    aiF917F4D7_wave4_trigger = TriggerCreate("aiF917F4D7_wave4_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave4_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave4_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave4_runPlayer;
    playergroup target = aiF917F4D7_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave4_runPlayer = p;
    aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave5_enabled;
wave[17] aiF917F4D7_wave5_lastWave;
trigger aiF917F4D7_wave5_trigger = null;
int aiF917F4D7_wave5_runPlayer;
playergroup aiF917F4D7_wave5_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave5_enabled[init_i] = true;
        aiF917F4D7_wave5_lastWave[init_i] = null;
    }
    aiF917F4D7_wave5_trigger = TriggerCreate("aiF917F4D7_wave5_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave5_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave5_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave5_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave5_runPlayer;
    playergroup target = aiF917F4D7_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave5_runPlayer = p;
    aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave6_enabled;
wave[17] aiF917F4D7_wave6_lastWave;
trigger aiF917F4D7_wave6_trigger = null;
int aiF917F4D7_wave6_runPlayer;
playergroup aiF917F4D7_wave6_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave6_enabled[init_i] = true;
        aiF917F4D7_wave6_lastWave[init_i] = null;
    }
    aiF917F4D7_wave6_trigger = TriggerCreate("aiF917F4D7_wave6_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave6_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave6_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave6_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave6_runPlayer;
    playergroup target = aiF917F4D7_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave6_runPlayer = p;
    aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave7_enabled;
wave[17] aiF917F4D7_wave7_lastWave;
trigger aiF917F4D7_wave7_trigger = null;
int aiF917F4D7_wave7_runPlayer;
playergroup aiF917F4D7_wave7_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave7_enabled[init_i] = true;
        aiF917F4D7_wave7_lastWave[init_i] = null;
    }
    aiF917F4D7_wave7_trigger = TriggerCreate("aiF917F4D7_wave7_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave7_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave7_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave7_runPlayer;
    playergroup target = aiF917F4D7_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave7_runPlayer = p;
    aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
    if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
    if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
    if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
    if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
    if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
    if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
    if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
    if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
    if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
    if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
    if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    return null;
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
    if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
    if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
    if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
    if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
    if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
    if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
    if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
    if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
    if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
    if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
    if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;
    if (p < 0 || p >= 16) {
        return false;
    }
    aiF917F4D7_wave1_run(p, target, true);
    aiF917F4D7_wave2_run(p, target, true);
    aiF917F4D7_wave3_run(p, target, true);
    aiF917F4D7_wave4_run(p, target, true);
    aiF917F4D7_wave5_run(p, target, true);
    aiF917F4D7_wave6_run(p, target, true);
    aiF917F4D7_wave7_run(p, target, true);
    while (true) {
        aiF917F4D7_wave7_run(p, target, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enable(p, val);
    aiF917F4D7_wave2_enable(p, val);
    aiF917F4D7_wave3_enable(p, val);
    aiF917F4D7_wave4_enable(p, val);
    aiF917F4D7_wave5_enable(p, val);
    aiF917F4D7_wave6_enable(p, val);
    aiF917F4D7_wave7_enable(p, val);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);
    TriggerStop(aiF917F4D7_wave1_trigger);
    TriggerStop(aiF917F4D7_wave2_trigger);
    TriggerStop(aiF917F4D7_wave3_trigger);
    TriggerStop(aiF917F4D7_wave4_trigger);
    TriggerStop(aiF917F4D7_wave5_trigger);
    TriggerStop(aiF917F4D7_wave6_trigger);
    TriggerStop(aiF917F4D7_wave7_trigger);
}
//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}
//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;
    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_wave2_init();
        aiF917F4D7_wave3_init();
        aiF917F4D7_wave4_init();
        aiF917F4D7_wave5_init();
        aiF917F4D7_wave6_init();
        aiF917F4D7_wave7_init();
        aiF917F4D7_waves_init();
        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(0);
        }
        aiF917F4D7_initialized = true;
    }
    AICampaignStart(p);
}
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Part and Parcel
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library: Great Train Robbery Library
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
// Library: Great Train Robbery Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;
void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }
    lib1_InitLib_completed = true;
    lib1_InitLibraries();
}
//--------------------------------------------------------------------------------------------------
// Library: UmojaArmory
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib2_ge_PRESET_Tunnel_Top = 0;
const int lib2_ge_PRESET_Tunnel_Middle = 1;
const int lib2_ge_PRESET_Tunnel_Bottom = 2;
// Constants



int lib2_gv_pLAYER_01_USER = 1;
int lib2_gv_pLAYER_02_USER = 2;
const int lib2_gv_pLAYER_03_ENEMY = 9;
const int lib2_gv_pLAYER_04_ENEMY = 10;
const int lib2_gv_pLAYER_05_ARCHANGEL = 11;
const int lib2_gv_pLAYER_06_SPECIMEN = 6;




const fixed lib2_gv_tRAIN_CAR_SEPERATION = 0.1;
const fixed lib2_gv_tRAIN_RADIUS = 1.75;
// Structures
struct lib2_gs_RECORD_TrainEscort {
    unit lv_escort;
    string lv_unitType;
    int lv_escortCar;
    fixed lv_polarRadius;
    fixed lv_polarAngle;
    point lv_waitPosition;
};
struct lib2_gs_RECORD_Train {
    unit[16] lv_trainCars;
    int lv_numberOfCars;
    int lv_lastCar;
    int lv_tunnel;
    int lv_spawnWave;
    fixed lv_maxLife;
    fixed lv_speedMultiplier;
    lib2_gs_RECORD_TrainEscort[32] lv_escorts;
    int lv_numberOfEscorts;
    wave lv_escortWave;
    bool lv_trainAlive;
};
// Variable Declarations
unit[4] lib2_gv_bossBeacons;
region[4] lib2_gv_bossRevealerRegions;
playergroup lib2_gv_enemyGroup;
unit lib2_gv_archangel;
unit[4] lib2_gv_bosses;
revealer lib2_gv_bossRevealer;
unit[4] lib2_gv_frontGates;
unit[3] lib2_gv_backGates;
point[4] lib2_gv_archangelDestinations;
int lib2_gv_partsOnMapCount;
int lib2_gv_partsOnMapDialog;
int lib2_gv_archangelPartsCompletions;
int lib2_gv_archangelPartsCount;
int lib2_gv_archangelPartsRequired;
unitfilter lib2_gv_partsFilter;
int[6] lib2_gv_partsRegionPings;
int[4] lib2_gv_bossPings;
int lib2_gv_bossesSlain;
int lib2_gv_bossesRequired;
timer lib2_gv_timerPreventBossAwaken;
timer lib2_gv_timerBossEngagedHidden;
int lib2_gv_timerWindowPreventBossAwaken;
fixed lib2_gv_segmentTime;
fixed lib2_gv_rolloverTime;
lib2_gs_RECORD_Train[16] lib2_gv_trainList;
int lib2_gv_numberOfTrains;
point[256] lib2_gv_trainPath;
int lib2_gv_currentWave;
unit lib2_gv_trainCarToAnimate;
fixed lib2_gv_trainCarToAnimateBreakPoint;
unit lib2_gv_trainCarToPing;
int lib2_gv_trainsSpawned;
int lib2_gv_numberOfTrainPathPoints;
bool lib2_gv_firstTrainSpawned;
int lib2_gv_trainToBeEscorted;
unitgroup lib2_gv_activeTrain;
unitgroup lib2_gv_escortWave;
timer lib2_gv_nextTrainTimer;
bool lib2_gv_earlyStartTrainTimer;
bool lib2_gv_trainSpawnReady;
trigger[4] lib2_gv_beaconTriggers;
int lib2_gv_archangelDestinationPing;
bool lib2_gv_vO_parts_onethird_firsttime_played;
bool lib2_gv_vO_parts_onethird_blocked;
bool lib2_gv_vO_parts_twothirds_blocked;
bool lib2_gv_vO_archangel_breaching_blocked;
bool lib2_gv_vO_proximity_warning_blocked;
bool lib2_gv_vO_timer_warning_half_blocked;
bool lib2_gv_vO_timer_warning_34_blocked;
bool lib2_gv_vO_cloaked_units_warning_blocked;
point lib2_gv_victoryCompletePan;
point lib2_gv_attackWaveA_Wave05Path;
region[3][11] lib2_gv_attackSpawn;
int lib2_gv_objectiveGatherArchangelParts;
int lib2_gv_objectiveDestroyBosses;
int lib2_gv_objectivePreventBossAwaken;
int lib2_gv_objectiveFollowArchangel;
// Function Declarations
void lib2_gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void lib2_gf_AddParts (int lp_quantity, point lp_location);
void lib2_gf_CreateTrain (int lp_numberOfCars, fixed lp_maxLife, fixed lp_speedMultiplier, int lp_spawnWave);
void lib2_gf_AddEscorttoTrain (string lp_unitType, int lp_escortCar, fixed lp_polarRadius, fixed lp_polarAngle);
void lib2_gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint);
void lib2_gf_ActivatePingforTrainCar (unit lp_trainCar);
point lib2_gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex);
void lib2_gf_SiegeGate (int lp_gateIndex);
void lib2_gf_CalTransmission (string lp_conversationLine);
point lib2_gf_AttackWaveSpawn ();
void lib2_gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
// Trigger Declarations
trigger lib2_gt_Init01LoadData;
trigger lib2_gt_Init02Players;
trigger lib2_gt_Init03LoadingComplete;
trigger lib2_gt_Init04Technology;
trigger lib2_gt_Init05Units;
trigger lib2_gt_Init06MusicSound;
trigger lib2_gt_Init07Environment;
trigger lib2_gt_Init08Difficulties;
trigger lib2_gt_PartCounterRoundup;
trigger lib2_gt_PartCounterDisplay;
trigger lib2_gt_OpenPens;
trigger lib2_gt_MakePartsNeutral;
trigger lib2_gt__1Part;
trigger lib2_gt__3Parts;
trigger lib2_gt__5Parts;
trigger lib2_gt_PartsComplete;
trigger lib2_gt_ShowandUpdatePartRegionMarkers;
trigger lib2_gt_HidePartsRegionPings;
trigger lib2_gt_ShowPartsRegionPings;
trigger lib2_gt_DestroySmallBuildingObjectiveMarkers;
trigger lib2_gt_NextBossRevealPing;
trigger lib2_gt_InitializeBossTimer;
trigger lib2_gt_PauseBossTimer;
trigger lib2_gt_UnpauseBossTimer;
trigger lib2_gt_AddtoBossTimer;
trigger lib2_gt_BossEngageTimerStart;
trigger lib2_gt_BossEngageTimerEnd;
trigger lib2_gt_InitializeTrainPath;
trigger lib2_gt_InitializeTrainandEscort;
trigger lib2_gt_TrainEscorts1weakescorts;
trigger lib2_gt_TrainEscorts2moderateescorts;
trigger lib2_gt_TrainEscorts3heavyescorts;
trigger lib2_gt_SpawnTrains;
trigger lib2_gt_SpawnEscorts;
trigger lib2_gt_TrainMovement;
trigger lib2_gt_TrainDeathQ;
trigger lib2_gt_TrainDespawn;
trigger lib2_gt_EscortEndPointWait;
trigger lib2_gt_EscortDespawn;
trigger lib2_gt_TrainCarDamageAnimationController;
trigger lib2_gt_TrainCarPingController;
trigger lib2_gt_StartTrainSpawnTimer;
trigger lib2_gt_TrainSpawnEvent;
trigger lib2_gt_RevealTrainPath;
trigger lib2_gt_ArchangelBeacon1;
trigger lib2_gt_ArchangelBeacon2;
trigger lib2_gt_ArchangelBeacon3;
trigger lib2_gt_TakeoffDummyHeight;
trigger lib2_gt_LandingDummyHeight;
trigger lib2_gt_ArchangelReturntoRepair;
trigger lib2_gt_ArchangelLanding;
trigger lib2_gt_ArchangelLaunchSequence;
trigger lib2_gt_ArchangelDestinationPing;
trigger lib2_gt_ArchangelSiegePingTrail;
trigger lib2_gt_InitializeGates;
trigger lib2_gt_StartGameQ;
trigger lib2_gt_DebrisMeteorFX;
trigger lib2_gt_ResetArchangel;
trigger lib2_gt_BossDeath1;
trigger lib2_gt_BossDeath2;
trigger lib2_gt_BossDeath3;
trigger lib2_gt_CM_VOEnemyCloakedSpotted;
trigger lib2_gt_EnemyAttackingQ;
trigger lib2_gt_VOUpdateArchangelParts;
trigger lib2_gt_VOQArchangelCombatDeath;
trigger lib2_gt_VOQTimerHalfway;
trigger lib2_gt_VOQTimer34ths;
trigger lib2_gt_VOQArchangelRepaired;
trigger lib2_gt_VOQArchangelBreaching;
trigger lib2_gt_VOQArchangelLaunching;
trigger lib2_gt_VOQDefeatRouted;
trigger lib2_gt_VOQDefeatTimer;
trigger lib2_gt_VOQVictory;
trigger lib2_gt_VOQProximityWarning;
trigger lib2_gt_VOQObjectiveUpdated;
trigger lib2_gt_VOResetBlockingFlags;
trigger lib2_gt_DefeatPrimaryObjectiveFailed;
trigger lib2_gt_VictoryPrimaryObjectiveComplete;
trigger lib2_gt_VictorySequence;
trigger lib2_gt_VictoryFanfareQ;
trigger lib2_gt_Victory;
trigger lib2_gt_Defeat;
trigger lib2_gt_StartAI;
trigger lib2_gt_SetupAttackWaveSpawn;
trigger lib2_gt_AIAttackWaves;
trigger lib2_gt_AttackWave01;
trigger lib2_gt_AttackWave02;
trigger lib2_gt_AttackWave03;
trigger lib2_gt_AttackWave04;
trigger lib2_gt_AttackWave05;
trigger lib2_gt_AttackWave06;
trigger lib2_gt_AttackWave07;
trigger lib2_gt_AttackWave08;
trigger lib2_gt_ObjectiveGatherArchangelPartsReset;
trigger lib2_gt_ObjectiveGatherArchangelPartsCreate;
trigger lib2_gt_ObjectiveGatherArchangelPartsUpdate;
trigger lib2_gt_ObjectiveGatherArchangelPartsComplete;
trigger lib2_gt_ObjectiveDestroyBossesCreate;
trigger lib2_gt_ObjectiveDestroyBossesUpdate;
trigger lib2_gt_ObjectiveDestroyBossesComplete;
trigger lib2_gt_ObjectiveDestroyBossesFailed;
trigger lib2_gt_ObjectivePreventBossAwakenHide;
trigger lib2_gt_ObjectivePreventBossAwakenShow;
trigger lib2_gt_ObjectivePreventBossAwakenCreate;
trigger lib2_gt_ObjectivePreventBossAwakenUpdate;
trigger lib2_gt_ObjectivePreventBossAwakenFailed;
trigger lib2_gt_ObjectivePreventBossAwakenComplete;
trigger lib2_gt_ObjectiveFollowArchangelCreate;
trigger lib2_gt_ObjectiveFollowArchangelComplete;
trigger lib2_gt_ObjectiveFollowArchangelShow;
// Library Initialization
void lib2_InitVariables ();
//--------------------------------------------------------------------------------------------------
// Library: UmojaArmory
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib2_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libCOMI_InitVariables();
    libCOMI_InitVariables();
    libCOMI_InitVariables();
}
// Variable Initialization
bool lib2_InitVariables_completed = false;
void lib2_InitVariables () {
    int init_i;
    int init_i1;
    if (lib2_InitVariables_completed) {
        return;
    }
    lib2_InitVariables_completed = true;
    lib2_gv_enemyGroup = PlayerGroupEmpty();
    lib2_gv_archangel = UnitFromId(54234680);
    lib2_gv_partsOnMapDialog = c_invalidDialogId;
    lib2_gv_archangelPartsRequired = 80;
    lib2_gv_partsFilter = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterUser1), 0, 0, 0);
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lib2_gv_partsRegionPings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib2_gv_bossPings[init_i] = c_invalidPingId;
    }
    lib2_gv_bossesRequired = 3;
    lib2_gv_timerPreventBossAwaken = TimerCreate();
    lib2_gv_timerBossEngagedHidden = TimerCreate();
    lib2_gv_timerWindowPreventBossAwaken = c_timerWindowNone;
    lib2_gv_segmentTime = ((8.0 * 60.0));
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib2_gv_trainList[init_i].lv_numberOfCars = 5;
        lib2_gv_trainList[init_i].lv_tunnel = lib2_ge_PRESET_Tunnel_Top;
        lib2_gv_trainList[init_i].lv_spawnWave = 1;
        lib2_gv_trainList[init_i].lv_maxLife = 7500.0;
        lib2_gv_trainList[init_i].lv_speedMultiplier = 1.0;
        for (init_i1 = 0; init_i1 <= 31; init_i1 += 1) {
            lib2_gv_trainList[init_i].lv_escorts[init_i1].lv_unitType = "Marine";
        }
    }
    for (init_i = 0; init_i <= 255; init_i += 1) {
        lib2_gv_trainPath[init_i] = PointFromId(239);
    }
    lib2_gv_currentWave = 1;
    lib2_gv_activeTrain = UnitGroupEmpty();
    lib2_gv_escortWave = UnitGroupEmpty();
    lib2_gv_nextTrainTimer = TimerCreate();
    lib2_gv_archangelDestinationPing = c_invalidPingId;
    lib2_gv_victoryCompletePan = PointFromId(1280159135);
    lib2_gv_objectiveGatherArchangelParts = c_invalidObjectiveId;
    lib2_gv_objectiveDestroyBosses = c_invalidObjectiveId;
    lib2_gv_objectivePreventBossAwaken = c_invalidObjectiveId;
    lib2_gv_objectiveFollowArchangel = c_invalidObjectiveId;
}
// Presets
// Functions
trigger auto_lib2_gf_RunMissionEvent_Trigger = null;
trigger auto_lib2_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_lib2_gf_RunMissionEvent_lp_missionEventTime;
void lib2_gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_lib2_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_lib2_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
    if (auto_lib2_gf_RunMissionEvent_Trigger == null) {
        auto_lib2_gf_RunMissionEvent_Trigger = TriggerCreate("auto_lib2_gf_RunMissionEvent_TriggerFunc");
    }
    TriggerExecute(auto_lib2_gf_RunMissionEvent_Trigger, false, false);
}
bool auto_lib2_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_lib2_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_lib2_gf_RunMissionEvent_lp_missionEventTime;
    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }
    return true;
}
void lib2_gf_AddParts (int lp_quantity, point lp_location) {
    // Variable Declarations
    text lv_partlabel;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_partlabel = StringExternal("Param/Value/lib_2_B0D2459F");
    // Implementation
    if ((lp_quantity > 1)) {
        lv_partlabel = StringExternal("Param/Value/lib_2_7A4041B1");
    }
    lib2_gv_archangelPartsCount = (lib2_gv_archangelPartsCount + lp_quantity);
    TextExpressionSetToken("Param/Expression/lib_2_4178E934", "A", StringExternal("Param/Value/lib_2_89FD6658"));
    TextExpressionSetToken("Param/Expression/lib_2_4178E934", "B", IntToText(lp_quantity));
    TextExpressionSetToken("Param/Expression/lib_2_4178E934", "C", lv_partlabel);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_2_4178E934"), 28, lp_location, 1.0, true, false, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsUpdate, true, true);
    TriggerExecute(lib2_gt_VOUpdateArchangelParts, true, false);
    if ((lib2_gv_archangelPartsCount >= lib2_gv_archangelPartsRequired)) {
        lib2_gv_archangelPartsCount = (lib2_gv_archangelPartsCount - lib2_gv_archangelPartsRequired);
    }
}
void lib2_gf_CreateTrain (int lp_numberOfCars, fixed lp_maxLife, fixed lp_speedMultiplier, int lp_spawnWave) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_numberOfTrains += 1;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_numberOfCars = lp_numberOfCars;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_spawnWave = lp_spawnWave;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_maxLife = lp_maxLife;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_speedMultiplier = lp_speedMultiplier;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_numberOfEscorts = 0;
}
void lib2_gf_AddEscorttoTrain (string lp_unitType, int lp_escortCar, fixed lp_polarRadius, fixed lp_polarAngle) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_numberOfEscorts += 1;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_escorts[lib2_gv_trainList[lib2_gv_numberOfTrains].lv_numberOfEscorts].lv_unitType = lp_unitType;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_escorts[lib2_gv_trainList[lib2_gv_numberOfTrains].lv_numberOfEscorts].lv_escortCar = lp_escortCar;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_escorts[lib2_gv_trainList[lib2_gv_numberOfTrains].lv_numberOfEscorts].lv_polarRadius = lp_polarRadius;
    lib2_gv_trainList[lib2_gv_numberOfTrains].lv_escorts[lib2_gv_trainList[lib2_gv_numberOfTrains].lv_numberOfEscorts].lv_polarAngle = lp_polarAngle;
}
void lib2_gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_trainCarToAnimate = lp_trainCar;
    lib2_gv_trainCarToAnimateBreakPoint = lp_breakPoint;
    TriggerExecute(lib2_gt_TrainCarDamageAnimationController, true, false);
}
void lib2_gf_ActivatePingforTrainCar (unit lp_trainCar) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_trainCarToPing = lp_trainCar;
    TriggerExecute(lib2_gt_TrainCarPingController, true, false);
}
point lib2_gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex) {
    // Variable Declarations
    fixed lv_seperationDistance;
    int lv_i;
    point lv_currentPoint;
    int lv_currentTarget;
    fixed lv_distanceRemaining;
    // Automatic Variable Declarations
    int auto4394D22A_ae;
    const int auto4394D22A_ai = 1;
    // Variable Initialization
    // Implementation
    lv_seperationDistance = (lib2_gv_tRAIN_CAR_SEPERATION + (2.0 * lib2_gv_tRAIN_RADIUS));
    lv_currentPoint = lib2_gv_trainPath[lp_pathIndex];
    lv_currentTarget = (lp_pathIndex + 1);
    if ((lp_trainCar <= 1)) {
        return lib2_gv_trainPath[lp_pathIndex];
    }
    auto4394D22A_ae = lp_trainCar;
    lv_i = 2;
    for ( ; ( (auto4394D22A_ai >= 0 && lv_i <= auto4394D22A_ae) || (auto4394D22A_ai < 0 && lv_i >= auto4394D22A_ae) ) ; lv_i += auto4394D22A_ai ) {
        lv_distanceRemaining = lv_seperationDistance;
        if ((lv_seperationDistance <= DistanceBetweenPoints(lv_currentPoint, lib2_gv_trainPath[(lv_currentTarget - 1)]))) {
            lv_currentPoint = PointWithOffsetPolar(lv_currentPoint, lv_seperationDistance, AngleBetweenPoints(lv_currentPoint, lib2_gv_trainPath[(lv_currentTarget - 1)]));
        }
        else {
            while (true) {
                lv_distanceRemaining = (lv_distanceRemaining - DistanceBetweenPoints(lv_currentPoint, lib2_gv_trainPath[(lv_currentTarget - 1)]));
                lv_currentTarget -= 1;
                if ((lv_currentTarget < 1)) {
                    return lib2_gv_trainPath[lp_pathIndex];
                }
                if ((lv_distanceRemaining <= DistanceBetweenPoints(lib2_gv_trainPath[lv_currentTarget], lib2_gv_trainPath[(lv_currentTarget - 1)]))) {
                    lv_currentPoint = PointWithOffsetPolar(lib2_gv_trainPath[lv_currentTarget], lv_distanceRemaining, AngleBetweenPoints(lib2_gv_trainPath[lv_currentTarget], lib2_gv_trainPath[(lv_currentTarget - 1)]));
                    break;
                }
            }
        }
    }
    PointSetFacing(lv_currentPoint, AngleBetweenPoints(lv_currentPoint, lib2_gv_trainPath[lv_currentTarget]));
    return lv_currentPoint;
}
void lib2_gf_SiegeGate (int lp_gateIndex) {
    // Variable Declarations
    region lv_revealerRegion;
    unit lv_frontGate;
    point lv_destination;
    unit lv_boss;
    unit lv_dummy;
    // Automatic Variable Declarations
    fixed autoBA056385_at;
    // Variable Initialization
    lv_revealerRegion = lib2_gv_bossRevealerRegions[lp_gateIndex];
    lv_frontGate = lib2_gv_frontGates[lp_gateIndex];
    lv_destination = lib2_gv_archangelDestinations[lp_gateIndex];
    lv_boss = lib2_gv_bosses[lp_gateIndex];
    // Implementation
    TriggerExecute(lib2_gt_PauseBossTimer, true, false);
    UnitSetPropertyFixed(lib2_gv_archangel, c_unitPropLifePercent, 100.0);
    UnitBehaviorRemove(lib2_gv_archangel, "ArchangelIncapacitated", 1);
    TriggerEnable(lib2_gt_ResetArchangel, true);
    libNtve_gf_ShowHideUnit(lib2_gv_bossBeacons[lp_gateIndex], false);
    UnitBehaviorRemove(lv_frontGate, "GateBehavior", 1);
    libNtve_gf_MakeUnitInvulnerable(lv_frontGate, false);
    libNtve_gf_MakeUnitInvulnerable(lib2_gv_bosses[lp_gateIndex], false);
    UnitCreate(1, "ArchangelTakeoffDummy", 0, lib2_gv_pLAYER_05_ARCHANGEL, UnitGetPosition(lib2_gv_archangel), UnitGetFacing(lib2_gv_archangel));
    lv_dummy = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lib2_gv_archangel, false);
    Wait(4.0, c_timeGame);
    UnitRemove(lv_dummy);
    libNtve_gf_ShowHideUnit(lib2_gv_archangel, true);
    UnitIssueOrder(lib2_gv_archangel, OrderTargetingPoint(AbilityCommand("ArchangelSkySlam", 0), lv_destination), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(lib2_gv_archangel, RegionCircle(lv_destination, 2.0)) == true))) {
        Wait(0.5, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(lib2_gv_archangelDestinationPing);
    Wait(1.5, c_timeGame);
    UnitIssueOrder(lib2_gv_archangel, OrderTargetingUnit(AbilityCommand("attack", 0), lv_frontGate), c_orderQueueReplace);
    VisRevealerCreate(lib2_gv_pLAYER_05_ARCHANGEL, lv_revealerRegion);
    autoBA056385_at = 0;
    while (!(((UnitHasBehavior2(lib2_gv_archangel, "ArchangelIncapacitated") == true) || (UnitIsAlive(lv_frontGate) == false))) && autoBA056385_at <= 75.0) {
        Wait(0.5, c_timeGame);
        autoBA056385_at = autoBA056385_at + 0.5;
    }
    if ((UnitIsAlive(lv_frontGate) == true)) {
        UnitKill(lv_frontGate);
        TriggerExecute(lib2_gt_VOQArchangelCombatDeath, false, false);
    }
    while ((UnitHasBehavior2(lib2_gv_archangel, "ArchangelIncapacitated") == false) && (UnitIsAlive(lv_boss) == true)) {
        TriggerExecute(lib2_gt_VOQArchangelBreaching, true, false);
        UnitIssueOrder(lib2_gv_archangel, OrderTargetingUnit(AbilityCommand("attack", 0), lv_boss), c_orderQueueReplace);
        Wait(0.5, c_timeReal);
        if ((UnitHasBehavior2(lib2_gv_archangel, "ArchangelIncapacitated") == true)) {
            TriggerExecute(lib2_gt_VOQArchangelCombatDeath, false, false);
        }
    }
}
void lib2_gf_CalTransmission (string lp_conversationLine) {
    // Variable Declarations
    int lv_portrait;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    // Implementation
    PortraitCreate(0, 0, c_anchorLeft, 237, 360, "CalPortrait", "", "Talk", true, true);
    lv_portrait = PortraitLastCreated();
    libCOMI_gf_SendMissionTransmission(lp_conversationLine, true, -1);
    PortraitDestroy(lv_portrait);
}
point lib2_gf_AttackWaveSpawn () {
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;
    // Automatic Variable Declarations
    const int auto5D51B0EC_ae = 10;
    const int auto5D51B0EC_ai = 1;
    // Variable Initialization
    // Implementation
    lv_mapSide = RandomInt(lib2_gv_pLAYER_01_USER, lib2_gv_pLAYER_02_USER);
    lv_spawnLocationIter = 1;
    for ( ; ( (auto5D51B0EC_ai >= 0 && lv_spawnLocationIter <= auto5D51B0EC_ae) || (auto5D51B0EC_ai < 0 && lv_spawnLocationIter >= auto5D51B0EC_ae) ) ; lv_spawnLocationIter += auto5D51B0EC_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(lib2_gv_pLAYER_01_USER, c_unitAllianceEnemy, lib2_gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return RegionGetCenter(lib2_gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
        }
    }
    return RegionGetCenter(RegionFromId(20));
}
trigger auto_lib2_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_lib2_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_lib2_gf_RunAttackWaveatMissionTime_lp_time;
void lib2_gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_lib2_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_lib2_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
    if (auto_lib2_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_lib2_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_lib2_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }
    TriggerExecute(auto_lib2_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}
bool auto_lib2_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_lib2_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_lib2_gf_RunAttackWaveatMissionTime_lp_time;
    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }
    return true;
}
// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", lib2_gt_Init03LoadingComplete);
    
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init01LoadData_Init () {
    lib2_gt_Init01LoadData = TriggerCreate("lib2_gt_Init01LoadData_Func");
    TriggerAddEventMapInit(lib2_gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init02Players_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }
    lib2_gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    lib2_gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init02Players_Init () {
    lib2_gt_Init02Players = TriggerCreate("lib2_gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_Init02Players, true, false);
    TriggerExecute(lib2_gt_Init04Technology, true, false);
    TriggerExecute(lib2_gt_Init05Units, true, false);
    TriggerExecute(lib2_gt_Init06MusicSound, true, false);
    TriggerExecute(lib2_gt_Init07Environment, true, false);
    TriggerExecute(lib2_gt_Init08Difficulties, true, false);
    TriggerExecute(lib2_gt_StartAI, true, false);
    TriggerExecute(lib2_gt_StartGameQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init03LoadingComplete_Init () {
    lib2_gt_Init03LoadingComplete = TriggerCreate("lib2_gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init04Technology_Init () {
    lib2_gt_Init04Technology = TriggerCreate("lib2_gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tempUnitGroup;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_bosses[0] = UnitFromId(418900889);
    lib2_gv_bosses[1] = UnitFromId(1161517213);
    lib2_gv_bosses[2] = UnitFromId(769296723);
    lib2_gv_archangelDestinations[0] = PointFromId(157527688);
    lib2_gv_archangelDestinations[1] = PointFromId(831947139);
    lib2_gv_archangelDestinations[2] = PointFromId(2108914139);
    lib2_gv_frontGates[0] = UnitFromId(1707837632);
    lib2_gv_frontGates[1] = UnitFromId(129897158);
    lib2_gv_frontGates[2] = UnitFromId(38490175);
    lib2_gv_backGates[0] = UnitFromId(1439530926);
    lib2_gv_backGates[1] = UnitFromId(123420970);
    lib2_gv_bossBeacons[0] = UnitFromId(1534314237);
    lib2_gv_bossBeacons[1] = UnitFromId(1218682444);
    lib2_gv_bossBeacons[2] = UnitFromId(979013575);
    lib2_gv_beaconTriggers[0] = lib2_gt_ArchangelBeacon1;
    lib2_gv_beaconTriggers[1] = lib2_gt_ArchangelBeacon2;
    lib2_gv_beaconTriggers[2] = lib2_gt_ArchangelBeacon3;
    libNtve_gf_MakeUnitInvulnerable(lib2_gv_bosses[0], true);
    libNtve_gf_MakeUnitInvulnerable(lib2_gv_bosses[1], true);
    libNtve_gf_MakeUnitInvulnerable(lib2_gv_bosses[2], true);
    UnitSetPropertyFixed(lib2_gv_bosses[0], c_unitPropLifeMax, 6500.0);
    UnitSetPropertyFixed(lib2_gv_bosses[0], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lib2_gv_bosses[1], c_unitPropLifeMax, 7500.0);
    UnitSetPropertyFixed(lib2_gv_bosses[1], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lib2_gv_bosses[2], c_unitPropLifeMax, 9000.0);
    UnitSetPropertyFixed(lib2_gv_bosses[2], c_unitPropLifePercent, 100.0);
    libNtve_gf_ShowHideUnit(lib2_gv_bossBeacons[0], false);
    libNtve_gf_ShowHideUnit(lib2_gv_bossBeacons[1], false);
    libNtve_gf_ShowHideUnit(lib2_gv_bossBeacons[2], false);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 0, 0), false, lib2_gv_pLAYER_03_ENEMY);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 0, 0), false, lib2_gv_pLAYER_04_ENEMY);
    UnitBehaviorAdd(UnitFromId(1707837632), "GateBehavior", UnitFromId(1707837632), 1);
    UnitBehaviorAdd(UnitFromId(1439530926), "GateBehavior", UnitFromId(1439530926), 1);
    UnitBehaviorAdd(UnitFromId(129897158), "GateBehavior", UnitFromId(129897158), 1);
    UnitBehaviorAdd(UnitFromId(38490175), "GateBehavior", UnitFromId(38490175), 1);
    UnitBehaviorAdd(UnitFromId(123420970), "GateBehavior", UnitFromId(123420970), 1);
    lib2_gv_bossRevealerRegions[0] = RegionFromId(5);
    lib2_gv_bossRevealerRegions[1] = RegionFromId(6);
    lib2_gv_bossRevealerRegions[2] = RegionFromId(7);
    UnitBehaviorAdd(lib2_gv_archangel, "ArchangelIncapacitated", UnitFromId(54234680), 1);
    TriggerExecute(lib2_gt_InitializeGates, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init05Units_Init () {
    lib2_gt_Init05Units = TriggerCreate("lib2_gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init06MusicSound_Init () {
    lib2_gt_Init06MusicSound = TriggerCreate("lib2_gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    GameTimeOfDaySet("08:00:00");
    VisExploreArea(lib2_gv_pLAYER_01_USER, RegionFromId(49), true, false);
    VisExploreArea(lib2_gv_pLAYER_02_USER, RegionFromId(49), true, false);
    VisExploreArea(lib2_gv_pLAYER_01_USER, RegionFromId(11), true, false);
    VisExploreArea(lib2_gv_pLAYER_02_USER, RegionFromId(11), true, false);
    VisExploreArea(lib2_gv_pLAYER_01_USER, RegionFromId(12), true, false);
    VisExploreArea(lib2_gv_pLAYER_02_USER, RegionFromId(12), true, false);
    libCOMI_gf_AutoRevealRegionCoop(RegionFromId(3), RegionFromId(4), 1);
    libCOMI_gf_AutoRevealRegionCoop(RegionFromId(3), RegionFromId(4), 2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init07Environment_Init () {
    lib2_gt_Init07Environment = TriggerCreate("lib2_gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    // Automatic Variable Declarations
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lib2_gv_pLAYER_01_USER) == 4)) {
        UnitRemove(UnitFromId(1440408252));
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lib2_gv_pLAYER_02_USER) == 4)) {
        UnitRemove(UnitFromId(613539717));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Init08Difficulties_Init () {
    lib2_gt_Init08Difficulties = TriggerCreate("lib2_gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Part Counter Roundup
//--------------------------------------------------------------------------------------------------
bool lib2_gt_PartCounterRoundup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;
    unit lv_picked;
    // Automatic Variable Declarations
    unitgroup auto3A20C786_g;
    int auto3A20C786_u;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto3A20C786_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A20C786_u = UnitGroupCount(auto3A20C786_g, c_unitCountAll);
    for (;; auto3A20C786_u -= 1) {
        lv_picked = UnitGroupUnitFromEnd(auto3A20C786_g, auto3A20C786_u);
        if (lv_picked == null) { break; }
        if ((UnitHasBehavior2(lv_picked, "Scrappable") == true)) {
            lv_count = (lv_count + 1);
        }
        if ((UnitHasBehavior2(lv_picked, "Scrappable2") == true)) {
            lv_count = (lv_count + 3);
        }
        if ((UnitHasBehavior2(lv_picked, "Scrappable3") == true)) {
            lv_count = (lv_count + 5);
        }
    }
    lib2_gv_partsOnMapCount = lv_count;
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_PartCounterRoundup_Init () {
    lib2_gt_PartCounterRoundup = TriggerCreate("lib2_gt_PartCounterRoundup_Func");
    TriggerEnable(lib2_gt_PartCounterRoundup, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Part Counter Display
//--------------------------------------------------------------------------------------------------
bool lib2_gt_PartCounterDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(200, 200, c_anchorTopRight, 0, 0, true);
    lib2_gv_partsOnMapDialog = DialogLastCreated();
    TriggerExecute(lib2_gt_PartCounterRoundup, true, true);
    TextExpressionSetToken("Param/Expression/lib_2_D2895951", "A", StringExternal("Param/Value/lib_2_91A902A8"));
    TextExpressionSetToken("Param/Expression/lib_2_D2895951", "B", IntToText(lib2_gv_partsOnMapCount));
    DialogSetTitle(DialogLastCreated(), TextExpressionAssemble("Param/Expression/lib_2_D2895951"));
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_PartCounterDisplay_Init () {
    lib2_gt_PartCounterDisplay = TriggerCreate("lib2_gt_PartCounterDisplay_Func");
    TriggerEnable(lib2_gt_PartCounterDisplay, false);
    TriggerAddEventMapInit(lib2_gt_PartCounterDisplay);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open Pens
//--------------------------------------------------------------------------------------------------
bool lib2_gt_OpenPens_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_specimengroup;
    unit lv_specimen;
    soundlink lv_soundlink;
    // Automatic Variable Declarations
    unitgroup auto46849821_g;
    int auto46849821_u;
    // Variable Initialization
    lv_specimengroup = UnitGroup(null, lib2_gv_pLAYER_06_SPECIMEN, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_soundlink = SoundLink("EditorDefaultSound", -1);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(UnitFromId(1588192705), Order(AbilityCommand("UmojanLabLabGate00LeftLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(902729853), Order(AbilityCommand("UmojanLabLabGate00LeftLowered", 0)), c_orderQueueReplace);
    if ((libNtve_gf_UnitGroupIsDead(lv_specimengroup) == true)) {
        return true;
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_RescueUnit(UnitFromId(302799369), 1, true);
    libNtve_gf_RescueUnit(UnitFromId(842733020), 2, true);
    libNtve_gf_RescueUnit(UnitFromId(271830880), 1, true);
    libNtve_gf_RescueUnit(UnitFromId(473420171), 2, true);
    auto46849821_g = lv_specimengroup;
    auto46849821_u = UnitGroupCount(auto46849821_g, c_unitCountAll);
    for (;; auto46849821_u -= 1) {
        lv_specimen = UnitGroupUnitFromEnd(auto46849821_g, auto46849821_u);
        if (lv_specimen == null) { break; }
        UnitIssueOrder(lv_specimen, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_specimen), 8.0, 315.0)), c_orderQueueReplace);
    }
    lv_specimen = UnitGroupRandomUnit(lv_specimengroup, c_unitCountAlive);
    SoundPlayAtPointForPlayer(SoundLink("Infestor_Yes", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), RegionGetCenter(RegionFromId(3)), 0.0, 100.0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_OpenPens_Init () {
    lib2_gt_OpenPens = TriggerCreate("lib2_gt_OpenPens_Func");
    TriggerAddEventUnitDied(lib2_gt_OpenPens, UnitRefFromUnit(UnitFromId(1116923841)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Make Parts Neutral
//--------------------------------------------------------------------------------------------------
bool lib2_gt_MakePartsNeutral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "PartsPickup3") || (UnitGetType(EventUnitCreatedUnit()) == "PartsPickup") || (UnitGetType(EventUnitCreatedUnit()) == "PartsPickup2")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetOwner(EventUnitCreatedUnit(), 1, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_MakePartsNeutral_Init () {
    lib2_gt_MakePartsNeutral = TriggerCreate("lib2_gt_MakePartsNeutral_Func");
    TriggerAddEventUnitCreated(lib2_gt_MakePartsNeutral, null, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: +1 Part
//--------------------------------------------------------------------------------------------------
bool lib2_gt__1Part_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gf_AddParts(1, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt__1Part_Init () {
    lib2_gt__1Part = TriggerCreate("lib2_gt__1Part_Func");
    TriggerAddEventPlayerEffectUsed(lib2_gt__1Part, c_playerAny, "PartsPickupSet3");
}
//--------------------------------------------------------------------------------------------------
// Trigger: +3 Parts
//--------------------------------------------------------------------------------------------------
bool lib2_gt__3Parts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gf_AddParts(3, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt__3Parts_Init () {
    lib2_gt__3Parts = TriggerCreate("lib2_gt__3Parts_Func");
    TriggerAddEventPlayerEffectUsed(lib2_gt__3Parts, c_playerAny, "PartsPickupSet");
}
//--------------------------------------------------------------------------------------------------
// Trigger: +5 Parts
//--------------------------------------------------------------------------------------------------
bool lib2_gt__5Parts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gf_AddParts(5, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt__5Parts_Init () {
    lib2_gt__5Parts = TriggerCreate("lib2_gt__5Parts_Func");
    TriggerAddEventPlayerEffectUsed(lib2_gt__5Parts, c_playerAny, "PartsPickupSet2");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Parts Complete
//--------------------------------------------------------------------------------------------------
bool lib2_gt_PartsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_archangelPartsCount = (lib2_gv_archangelPartsCount - lib2_gv_archangelPartsRequired);
    TimerPause(lib2_gv_nextTrainTimer, true);
    TriggerExecute(lib2_gt_ArchangelLaunchSequence, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_PartsComplete_Init () {
    lib2_gt_PartsComplete = TriggerCreate("lib2_gt_PartsComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show and Update Part Region Markers
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ShowandUpdatePartRegionMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_baseIter;
    region lv_partsRegion;
    int lv_activePingsDesired;
    int lv_activePingsTotal;
    int lv_activePingsPrevious;
    unitgroup lv_partsBuildingsTargets;
    unit lv_tempUnit;
    // Automatic Variable Declarations
    const int auto5ADB8A46_ae = 5;
    const int auto5ADB8A46_ai = 1;
    const int autoFAA9B5E5_ae = 5;
    const int autoFAA9B5E5_ai = 1;
    unitgroup auto11D54E34_g;
    int auto11D54E34_u;
    unit auto11D54E34_var;
    unitgroup auto764A5318_g;
    int auto764A5318_u;
    unit auto764A5318_var;
    // Variable Initialization
    lv_partsBuildingsTargets = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    lv_activePingsDesired = 2;
    while ((libCOMI_gf_GameIsOver() == false)) {
        lv_activePingsTotal = 0;
        lv_baseIter = 1;
        for ( ; ( (auto5ADB8A46_ai >= 0 && lv_baseIter <= auto5ADB8A46_ae) || (auto5ADB8A46_ai < 0 && lv_baseIter >= auto5ADB8A46_ae) ) ; lv_baseIter += auto5ADB8A46_ai ) {
            if ((lib2_gv_partsRegionPings[lv_baseIter] != c_invalidPingId)) {
                lv_activePingsTotal += 1;
            }
        }
        lv_baseIter = 1;
        for ( ; ( (autoFAA9B5E5_ai >= 0 && lv_baseIter <= autoFAA9B5E5_ae) || (autoFAA9B5E5_ai < 0 && lv_baseIter >= autoFAA9B5E5_ae) ) ; lv_baseIter += autoFAA9B5E5_ai ) {
            lv_partsRegion = RegionFromName(("Parts Area " + IntToString(lv_baseIter)));
            lv_partsBuildingsTargets = UnitGroup(null, lib2_gv_pLAYER_03_ENEMY, lv_partsRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto11D54E34_g = lv_partsBuildingsTargets;
            auto11D54E34_u = UnitGroupCount(auto11D54E34_g, c_unitCountAll);
            for (;; auto11D54E34_u -= 1) {
                auto11D54E34_var = UnitGroupUnitFromEnd(auto11D54E34_g, auto11D54E34_u);
                if (auto11D54E34_var == null) { break; }
                if ((UnitHasBehavior2(auto11D54E34_var, "Scrappable") == false) && (UnitHasBehavior2(auto11D54E34_var, "Scrappable2") == false) && (UnitHasBehavior2(auto11D54E34_var, "Scrappable3") == false)) {
                    UnitGroupRemove(lv_partsBuildingsTargets, auto11D54E34_var);
                }
            }
            if ((lib2_gv_partsRegionPings[lv_baseIter] == c_invalidPingId)) {
                if (((lv_activePingsTotal < lv_activePingsDesired) || (UnitGroupCount(UnitGroupAlliance(lib2_gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, lv_partsRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) && (UnitGroupCount(lv_partsBuildingsTargets, c_unitCountAlive) >= 4)) {
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(lv_partsRegion), StringExternal("Param/Value/lib_2_8AB0DD22"));
                    lib2_gv_partsRegionPings[lv_baseIter] = PingLastCreated();
                    lv_activePingsTotal += 1;
                }
            }
            if ((UnitGroupCount(lv_partsBuildingsTargets, c_unitCountAlive) < 4)) {
                libCOMI_gf_DestroyPingCoop(lib2_gv_partsRegionPings[lv_baseIter]);
                lib2_gv_partsRegionPings[lv_baseIter] = c_invalidPingId;
                auto764A5318_g = lv_partsBuildingsTargets;
                auto764A5318_u = UnitGroupCount(auto764A5318_g, c_unitCountAll);
                for (;; auto764A5318_u -= 1) {
                    auto764A5318_var = UnitGroupUnitFromEnd(auto764A5318_g, auto764A5318_u);
                    if (auto764A5318_var == null) { break; }
                    if ((libHots_gf_PingStoredForUnit(auto764A5318_var, 1) == c_invalidPingId)) {
                        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(auto764A5318_var), StringExternal("Param/Value/lib_2_40941B35"));
                        PingSetUnit(PingLastCreated(), auto764A5318_var);
                        libHots_gf_StorePingForUnit(auto764A5318_var, 1, PingLastCreated());
                        PingSetScale(PingLastCreated(), 0.6);
                    }
                }
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ShowandUpdatePartRegionMarkers_Init () {
    lib2_gt_ShowandUpdatePartRegionMarkers = TriggerCreate("lib2_gt_ShowandUpdatePartRegionMarkers_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hide Parts Region Pings
//--------------------------------------------------------------------------------------------------
bool lib2_gt_HidePartsRegionPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Automatic Variable Declarations
    const int autoA055BE26_ae = 5;
    const int autoA055BE26_ai = 1;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_i = 0;
    for ( ; ( (autoA055BE26_ai >= 0 && lv_i <= autoA055BE26_ae) || (autoA055BE26_ai < 0 && lv_i >= autoA055BE26_ae) ) ; lv_i += autoA055BE26_ai ) {
        libCOMI_gf_ShowHidePingCoop(lib2_gv_partsRegionPings[lv_i], false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_HidePartsRegionPings_Init () {
    lib2_gt_HidePartsRegionPings = TriggerCreate("lib2_gt_HidePartsRegionPings_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show Parts Region Pings
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ShowPartsRegionPings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Automatic Variable Declarations
    const int auto8E6FB5A6_ae = 5;
    const int auto8E6FB5A6_ai = 1;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_i = 0;
    for ( ; ( (auto8E6FB5A6_ai >= 0 && lv_i <= auto8E6FB5A6_ae) || (auto8E6FB5A6_ai < 0 && lv_i >= auto8E6FB5A6_ae) ) ; lv_i += auto8E6FB5A6_ai ) {
        libCOMI_gf_ShowHidePingCoop(lib2_gv_partsRegionPings[lv_i], true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ShowPartsRegionPings_Init () {
    lib2_gt_ShowPartsRegionPings = TriggerCreate("lib2_gt_ShowPartsRegionPings_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Small Building Objective Markers
//--------------------------------------------------------------------------------------------------
bool lib2_gt_DestroySmallBuildingObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_DestroySmallBuildingObjectiveMarkers_Init () {
    lib2_gt_DestroySmallBuildingObjectiveMarkers = TriggerCreate("lib2_gt_DestroySmallBuildingObjectiveMarkers_Func");
    TriggerAddEventUnitDied(lib2_gt_DestroySmallBuildingObjectiveMarkers, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Next Boss Reveal Ping
//--------------------------------------------------------------------------------------------------
bool lib2_gt_NextBossRevealPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(lib2_gv_bosses[lib2_gv_bossesSlain]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    lib2_gv_bossPings[lib2_gv_bossesSlain] = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_2_C6214680"));
    libCOMI_gf_ShareVisionofUnitWithHumansCoop(lib2_gv_bosses[lib2_gv_bossesSlain], true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_NextBossRevealPing_Init () {
    lib2_gt_NextBossRevealPing = TriggerCreate("lib2_gt_NextBossRevealPing_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Boss Timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_InitializeBossTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TimerStart(lib2_gv_timerPreventBossAwaken, (13.0 * 60.0), false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(lib2_gv_timerPreventBossAwaken, StringExternal("Param/Value/lib_2_F5324783"), true, false);
    lib2_gv_timerWindowPreventBossAwaken = TimerWindowLastCreated();
    Wait(4.0, c_timeGame);
    TriggerEnable(lib2_gt_VOQTimerHalfway, true);
    TriggerEnable(lib2_gt_VOQTimer34ths, true);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lib2_gt_ObjectivePreventBossAwakenUpdate, true, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_InitializeBossTimer_Init () {
    lib2_gt_InitializeBossTimer = TriggerCreate("lib2_gt_InitializeBossTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Pause Boss Timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_PauseBossTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TimerPause(lib2_gv_timerPreventBossAwaken, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_PauseBossTimer_Init () {
    lib2_gt_PauseBossTimer = TriggerCreate("lib2_gt_PauseBossTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unpause Boss Timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_UnpauseBossTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TimerPause(lib2_gv_timerPreventBossAwaken, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_UnpauseBossTimer_Init () {
    lib2_gt_UnpauseBossTimer = TriggerCreate("lib2_gt_UnpauseBossTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Add to Boss Timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AddtoBossTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_newtime;
    // Automatic Variable Declarations
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_rolloverTime = TimerGetRemaining(lib2_gv_timerPreventBossAwaken);
    lv_newtime = MinF((lib2_gv_segmentTime + lib2_gv_rolloverTime), (15.0 * 60.0));
    TimerStart(lib2_gv_timerPreventBossAwaken, lv_newtime, false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AddtoBossTimer_Init () {
    lib2_gt_AddtoBossTimer = TriggerCreate("lib2_gt_AddtoBossTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Engage Timer Start
//--------------------------------------------------------------------------------------------------
bool lib2_gt_BossEngageTimerStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_PauseBossTimer, true, false);
    TimerStart(lib2_gv_timerBossEngagedHidden, 7.0, false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_BossEngageTimerStart_Init () {
    lib2_gt_BossEngageTimerStart = TriggerCreate("lib2_gt_BossEngageTimerStart_Func");
    TriggerAddEventUnitDamaged(lib2_gt_BossEngageTimerStart, UnitRefFromVariable("lib2_gv_bosses[lib2_gv_bossesSlain]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Engage Timer End
//--------------------------------------------------------------------------------------------------
bool lib2_gt_BossEngageTimerEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lib2_gv_archangel, "ArchangelIncapacitated") == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_UnpauseBossTimer, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_BossEngageTimerEnd_Init () {
    lib2_gt_BossEngageTimerEnd = TriggerCreate("lib2_gt_BossEngageTimerEnd_Func");
    TriggerAddEventTimer(lib2_gt_BossEngageTimerEnd, lib2_gv_timerBossEngagedHidden);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Train Path
//--------------------------------------------------------------------------------------------------
bool lib2_gt_InitializeTrainPath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Automatic Variable Declarations
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_trainPath[0] = PointFromId(2130904744);
    lv_i = 1;
    lib2_gv_trainPath[lv_i] = PointFromId(1583149277);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(573405627);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1768581881);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(436687760);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(244573500);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(2058332382);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1205565467);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(332198364);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(425395158);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(859846520);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(675610517);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(502360796);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1096419929);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(835466218);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(274025401);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1745085338);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1224340628);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(452291371);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1128852418);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1537665752);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(766033382);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1842324921);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1581709174);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1838301127);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(2022548768);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(966383058);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(2076612324);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1313622824);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(634349654);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(1252362222);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(304123206);
    lv_i = (lv_i + 1);
    lib2_gv_trainPath[lv_i] = PointFromId(660168162);
    lib2_gv_numberOfTrainPathPoints = lv_i;
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_InitializeTrainPath_Init () {
    lib2_gt_InitializeTrainPath = TriggerCreate("lib2_gt_InitializeTrainPath_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Train and Escort
//--------------------------------------------------------------------------------------------------
bool lib2_gt_InitializeTrainandEscort_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_trainMaxLife;
    fixed lv_trainSpeed;
    fixed lv_trainSpeedBoosted;
    // Automatic Variable Declarations
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_trainMaxLife = libCOMI_gf_DifficultyValueInt2(2, 1750, 2000, 2500, 3250, 3250, 3250);
    lv_trainSpeed = libNtve_gf_DifficultyValueFixed(0.75, 0.75, 0.75, 0.75);
    lv_trainSpeedBoosted = libNtve_gf_DifficultyValueFixed(1.35, 1.35, 1.4, 1.45);
    lib2_gf_CreateTrain(5, ((lv_trainMaxLife * 1.0)), ((lv_trainSpeed * 0.8)), 1);
    TriggerExecute(lib2_gt_TrainEscorts1weakescorts, true, false);
    lib2_gf_CreateTrain(5, (lv_trainMaxLife * 1.2), lv_trainSpeed, 2);
    TriggerExecute(lib2_gt_TrainEscorts2moderateescorts, true, false);
    lib2_gf_CreateTrain(5, (lv_trainMaxLife * 1.5), (lv_trainSpeed), 3);
    TriggerExecute(lib2_gt_TrainEscorts3heavyescorts, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_InitializeTrainandEscort_Init () {
    lib2_gt_InitializeTrainandEscort = TriggerCreate("lib2_gt_InitializeTrainandEscort_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 1 - weak escorts
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainEscorts1weakescorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Stalker", 2, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Stalker", 2, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Phoenix", 2, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Stalker", 3, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Sentry", 3, 3.0, 270.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainEscorts1weakescorts_Init () {
    lib2_gt_TrainEscorts1weakescorts = TriggerCreate("lib2_gt_TrainEscorts1weakescorts_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 2 - moderate escorts
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainEscorts2moderateescorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Stalker", 2, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Stalker", 2, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Immortal", 2, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Immortal", 2, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("VoidRay", 3, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("VoidRay", 3, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("HighTemplar", 4, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Zealot", 4, 3.0, 90.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainEscorts2moderateescorts_Init () {
    lib2_gt_TrainEscorts2moderateescorts = TriggerCreate("lib2_gt_TrainEscorts2moderateescorts_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Escorts 3 - heavy escorts
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainEscorts3heavyescorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gf_AddEscorttoTrain("Archon", 1, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Zealot", 1, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Archon", 1, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Stalker", 2, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Stalker", 2, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Sentry", 2, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Sentry", 2, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Stalker", 3, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Colossus", 3, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("VoidRay", 3, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("VoidRay", 3, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("HybridDominator", 4, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Zealot", 4, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("Zealot", 5, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Zealot", 5, 3.0, 90.0);
    lib2_gf_AddEscorttoTrain("HybridNemesis", 5, 3.0, 270.0);
    lib2_gf_AddEscorttoTrain("Tempest", 5, 3.0, 90.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainEscorts3heavyescorts_Init () {
    lib2_gt_TrainEscorts3heavyescorts = TriggerCreate("lib2_gt_TrainEscorts3heavyescorts_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Trains
//--------------------------------------------------------------------------------------------------
bool lib2_gt_SpawnTrains_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[16] lv_trainsToSpawn;
    int lv_numberOfTrainsToSpawn;
    int lv_i;
    int lv_currentCar;
    bool lv_carsRemain;
    point lv_spawnLocation;
    string lv_trainCarType;
    int lv_initialCustomValue;
    // Automatic Variable Declarations
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_activeTrain = UnitGroupEmpty();
    lib2_gv_trainList[lib2_gv_currentWave].lv_trainAlive = true;
    Wait(3.0, c_timeGame);
    while (true) {
        lv_currentCar += 1;
        lv_carsRemain = false;
        if ((lib2_gv_trainList[lib2_gv_currentWave].lv_numberOfCars >= lv_currentCar) && ((lv_currentCar == 1) || (UnitIsAlive(lib2_gv_trainList[lib2_gv_currentWave].lv_trainCars[1]) == true))) {
            lv_carsRemain = true;
            lv_spawnLocation = PointFromId(2130904744);
            if ((lv_currentCar == 1)) {
                lv_trainCarType = "TarsonisEngine";
            }
            else {
                if ((lib2_gv_trainList[lib2_gv_currentWave].lv_numberOfCars == lv_currentCar)) {
                    lv_trainCarType = "Caboose";
                }
                else {
                    lv_trainCarType = "FreightCar";
                }
            }
            libNtve_gf_CreateUnitsAtPoint2(1, lv_trainCarType, 0, 4, PointFromId(2130904744));
            lib2_gv_trainList[lib2_gv_currentWave].lv_trainCars[lv_currentCar] = UnitLastCreated();
            UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lv_initialCustomValue));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (UnitTypeGetProperty("TarsonisEngine", c_unitPropMovementSpeed) * lib2_gv_trainList[lib2_gv_currentWave].lv_speedMultiplier));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lib2_gv_trainList[lib2_gv_currentWave].lv_maxLife);
            libCOMI_gf_ShareVisionofUnitWithHumansCoop(UnitLastCreated(), true);
            UnitGroupAdd(lib2_gv_activeTrain, UnitLastCreated());
            if ((UnitGetType(lib2_gv_trainList[lib2_gv_currentWave].lv_trainCars[lv_currentCar]) != "TarsonisEngineFast") && (UnitGetType(lib2_gv_trainList[lib2_gv_currentWave].lv_trainCars[lv_currentCar]) != "TarsonisEngine")) {
                ActorLookAtStart(libNtve_gf_MainActorofUnit(lib2_gv_trainList[lib2_gv_currentWave].lv_trainCars[lv_currentCar]), "Chest", 100, 0.0, libNtve_gf_MainActorofUnit(lib2_gv_trainList[lib2_gv_currentWave].lv_trainCars[(lv_currentCar - 1)]));
            }
            UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/lib_2_9C0B7458"), StringToText(""), StringToText(""));
            lib2_gf_PlayDamagedAnimationsforTrainCar(UnitLastCreated(), ((100.0 / (IntToFixed(lib2_gv_trainList[lib2_gv_currentWave].lv_numberOfCars) + 1.0)) * IntToFixed(lv_currentCar)));
            if (((lv_trainCarType == "TarsonisEngine") || (lv_trainCarType == "TarsonisEngineFast"))) {
                lib2_gf_ActivatePingforTrainCar(UnitLastCreated());
                lib2_gv_trainToBeEscorted = lib2_gv_currentWave;
                TriggerExecute(lib2_gt_SpawnEscorts, true, false);
            }
            if ((lib2_gv_trainList[lib2_gv_currentWave].lv_numberOfCars == lv_currentCar)) {
                lib2_gv_trainList[lib2_gv_currentWave].lv_lastCar = lv_currentCar;
            }
        }
        if ((lv_carsRemain == false)) {
            return true;
        }
        Wait(((lib2_gv_tRAIN_CAR_SEPERATION + (lib2_gv_tRAIN_RADIUS * 2.0)) / (UnitTypeGetProperty("TarsonisEngine", c_unitPropMovementSpeed) * lib2_gv_trainList[lib2_gv_currentWave].lv_speedMultiplier)), c_timeGame);
        if ((lv_trainCarType == "TarsonisEngine")) {
            Wait(0.4, c_timeGame);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_SpawnTrains_Init () {
    lib2_gt_SpawnTrains = TriggerCreate("lib2_gt_SpawnTrains_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Escorts
//--------------------------------------------------------------------------------------------------
bool lib2_gt_SpawnEscorts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_groundSpawnPoint1;
    point lv_groundSpawnPoint2;
    point lv_airSpawnPoint;
    int lv_trainIndex;
    int lv_i;
    point lv_escortSpawnPoint;
    int lv_escortPlayer;
    unitgroup lv_escortGroup;
    int lv_escortCount;
    unitgroup lv_tempGroupGround1;
    unitgroup lv_tempGroupGround2;
    unitgroup lv_tempGroupAir;
    // Automatic Variable Declarations
    const int autoF06575A6_ae = 1;
    const int autoF06575A6_ai = -1;
    int autoDECCFAB8_ae;
    const int autoDECCFAB8_ai = 1;
    int autoFE34643C_ae;
    const int autoFE34643C_ai = 1;
    int auto430C2DA2_ae;
    const int auto430C2DA2_ai = 1;
    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();
    lv_tempGroupGround1 = UnitGroupEmpty();
    lv_tempGroupGround2 = UnitGroupEmpty();
    lv_tempGroupAir = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_escortWave = UnitGroupEmpty();
    lv_trainIndex = lib2_gv_currentWave;
    lv_groundSpawnPoint1 = PointFromId(845590318);
    lv_groundSpawnPoint2 = PointFromId(171285644);
    lv_airSpawnPoint = PointFromId(834765420);
    lv_escortPlayer = 4;
    lv_i = lib2_gv_trainList[lv_trainIndex].lv_numberOfEscorts;
    for ( ; ( (autoF06575A6_ai >= 0 && lv_i <= autoF06575A6_ae) || (autoF06575A6_ai < 0 && lv_i >= autoF06575A6_ae) ) ; lv_i += autoF06575A6_ai ) {
        lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition = lib2_gf_ExpectedPositionofTrainCar(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escortCar, 5);
        if ((libNtve_gf_UnitMoverExists(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_unitType, "Fly") == true)) {
            libNtve_gf_CreateUnitsAtPoint2(1, lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_unitType, 0, lv_escortPlayer, PointFromId(146159346));
            UnitGroupAdd(lv_tempGroupAir, UnitLastCreated());
        }
        else {
            if ((ModI(lv_i, 2) == 0)) {
                libNtve_gf_CreateUnitsAtPoint2(1, lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_unitType, 0, lv_escortPlayer, PointFromId(146159346));
                UnitGroupAdd(lv_tempGroupGround1, UnitLastCreated());
            }
            else {
                libNtve_gf_CreateUnitsAtPoint2(1, lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_unitType, 0, lv_escortPlayer, PointFromId(146159346));
                UnitGroupAdd(lv_tempGroupGround2, UnitLastCreated());
            }
        }
        UnitGroupAdd(lib2_gv_escortWave, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort = UnitLastCreated();
        AISetUnitScriptControlled(UnitLastCreated(), true);
    }
    Wait(5.0, c_timeGame);
    libCOMI_gf_DropPodWarpInUnitGroup(lv_tempGroupGround1, lv_groundSpawnPoint1);
    libCOMI_gf_DropPodWarpInUnitGroup(lv_tempGroupGround2, lv_groundSpawnPoint2);
    libCOMI_gf_DropPodWarpInUnitGroup(lv_tempGroupAir, lv_airSpawnPoint);
    while (true) {
        Wait(1.0, c_timeAI);
        autoDECCFAB8_ae = lib2_gv_trainList[lv_trainIndex].lv_numberOfEscorts;
        lv_i = 1;
        for ( ; ( (autoDECCFAB8_ai >= 0 && lv_i <= autoDECCFAB8_ae) || (autoDECCFAB8_ai < 0 && lv_i >= autoDECCFAB8_ae) ) ; lv_i += autoDECCFAB8_ai ) {
            UnitIssueOrder(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition, lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarRadius, (PointGetFacing(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_waitPosition) + lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle))), c_orderQueueReplace);
        }
        if ((UnitIsAlive(lib2_gv_trainList[lv_trainIndex].lv_trainCars[1]) == false)) {
            return true;
        }
        if ((RegionContainsPoint(RegionCircle(lib2_gv_trainList[lv_trainIndex].lv_escorts[1].lv_waitPosition, 2.0), UnitGetPosition(lib2_gv_trainList[lv_trainIndex].lv_trainCars[1])) == true)) {
            autoFE34643C_ae = lib2_gv_trainList[lv_trainIndex].lv_numberOfCars;
            lv_i = 1;
            for ( ; ( (autoFE34643C_ai >= 0 && lv_i <= autoFE34643C_ae) || (autoFE34643C_ai < 0 && lv_i >= autoFE34643C_ae) ) ; lv_i += autoFE34643C_ai ) {
                UnitGroupAdd(lv_escortGroup, lib2_gv_trainList[lv_trainIndex].lv_trainCars[lv_i]);
            }
            AIAttackWaveSetTargetEscort(lv_escortPlayer, lv_escortGroup, 0);
            auto430C2DA2_ae = lib2_gv_trainList[lv_trainIndex].lv_numberOfEscorts;
            lv_i = 1;
            for ( ; ( (auto430C2DA2_ai >= 0 && lv_i <= auto430C2DA2_ae) || (auto430C2DA2_ai < 0 && lv_i >= auto430C2DA2_ae) ) ; lv_i += auto430C2DA2_ai ) {
                if ((UnitIsAlive(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
                    AISetUnitScriptControlled(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, false);
                    AIAttackWaveAddEscortUnit(lv_escortPlayer, lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, lib2_gv_trainList[lv_trainIndex].lv_trainCars[lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escortCar], lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarRadius, lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle);
                    lv_escortCount += 1;
                }
            }
            if ((lv_escortCount > 0)) {
                AIAttackWaveSend(4, 0, false);
                lib2_gv_trainList[lv_trainIndex].lv_escortWave = WaveLastCreated();
            }
            return true;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_SpawnEscorts_Init () {
    lib2_gt_SpawnEscorts = TriggerCreate("lib2_gt_SpawnEscorts_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Movement
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    unitgroup lv_trainCars;
    // Automatic Variable Declarations
    unitgroup auto467936F9_g;
    int auto467936F9_u;
    unit auto467936F9_var;
    unitgroup auto16B93B55_g;
    int auto16B93B55_u;
    unit auto16B93B55_var;
    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    auto467936F9_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto467936F9_u = UnitGroupCount(auto467936F9_g, c_unitCountAll);
    for (;; auto467936F9_u -= 1) {
        auto467936F9_var = UnitGroupUnitFromEnd(auto467936F9_g, auto467936F9_u);
        if (auto467936F9_var == null) { break; }
        if (((UnitGetType(auto467936F9_var) == "Caboose") || (UnitGetType(auto467936F9_var) == "FreightCar") || (UnitGetType(auto467936F9_var) == "TarsonisEngine") || (UnitGetType(auto467936F9_var) == "TarsonisEngineFast"))) {
            UnitGroupAdd(lv_trainCars, auto467936F9_var);
        }
    }
    auto16B93B55_g = lv_trainCars;
    auto16B93B55_u = UnitGroupCount(auto16B93B55_g, c_unitCountAll);
    for (;; auto16B93B55_u -= 1) {
        auto16B93B55_var = UnitGroupUnitFromEnd(auto16B93B55_g, auto16B93B55_u);
        if (auto16B93B55_var == null) { break; }
        if ((RegionContainsPoint(RegionCircle(lib2_gv_trainPath[FixedToInt(UnitGetCustomValue(auto16B93B55_var, 0))], 0.5), UnitGetPosition(auto16B93B55_var)) == true)) {
            if ((FixedToInt(UnitGetCustomValue(auto16B93B55_var, 0)) < 255)) {
                UnitSetCustomValue(auto16B93B55_var, 0, (UnitGetCustomValue(auto16B93B55_var, 0) + 1.0));
            }
        }
        UnitIssueOrder(auto16B93B55_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto16B93B55_var), 1.0, AngleBetweenPoints(UnitGetPosition(auto16B93B55_var), lib2_gv_trainPath[FixedToInt(UnitGetCustomValue(auto16B93B55_var, 0))]))), c_orderQueueReplace);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainMovement_Init () {
    lib2_gt_TrainMovement = TriggerCreate("lib2_gt_TrainMovement_Func");
    TriggerAddEventTimePeriodic(lib2_gt_TrainMovement, 0.25, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Death Q
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainDeathQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_a;
    int lv_b;
    point lv_textPoint;
    bool lv_trainIndexFound;
    int lv_trainMidPoint;
    // Automatic Variable Declarations
    int autoC0B52219_ae;
    const int autoC0B52219_ai = 1;
    int autoAEF2D8F1_ae;
    const int autoAEF2D8F1_ai = 1;
    const int auto8A6FA4D7_n = 4;
    int auto8A6FA4D7_i;
    const int autoC5991890_n = 5;
    int autoC5991890_i;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Caboose") || (UnitGetType(EventUnit()) == "FreightCar") || (UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoC0B52219_ae = lib2_gv_numberOfTrains;
    lv_a = 1;
    for ( ; ( (autoC0B52219_ai >= 0 && lv_a <= autoC0B52219_ae) || (autoC0B52219_ai < 0 && lv_a >= autoC0B52219_ae) ) ; lv_a += autoC0B52219_ai ) {
        autoAEF2D8F1_ae = lib2_gv_trainList[lv_a].lv_numberOfCars;
        lv_b = 1;
        for ( ; ( (autoAEF2D8F1_ai >= 0 && lv_b <= autoAEF2D8F1_ae) || (autoAEF2D8F1_ai < 0 && lv_b >= autoAEF2D8F1_ae) ) ; lv_b += autoAEF2D8F1_ai ) {
            if ((lib2_gv_trainList[lv_a].lv_trainCars[lv_b] == EventUnit())) {
                lv_trainIndex = lv_a;
                lv_trainIndexFound = true;
                break;
            }
        }
        if ((lv_trainIndexFound == true)) {
            break;
        }
    }
    if ((lv_trainIndexFound == false)) {
        return true;
    }
    if ((lib2_gv_trainList[lv_trainIndex].lv_trainAlive == false)) {
        return true;
    }
    for (auto8A6FA4D7_i = 1; auto8A6FA4D7_i <= auto8A6FA4D7_n; auto8A6FA4D7_i += 1) {
        UnitCreate(1, "PartsPickup", 0, lib2_gv_pLAYER_05_ARCHANGEL, RegionRandomPoint(RegionCircle(UnitGetPosition(lib2_gv_trainList[lv_trainIndex].lv_trainCars[RandomInt(1, lib2_gv_trainList[lv_trainIndex].lv_lastCar)]), 2.0)), RandomFixed(0.0, 360.0));
    }
    for (autoC5991890_i = 1; autoC5991890_i <= autoC5991890_n; autoC5991890_i += 1) {
        UnitCreate(1, "PartsPickup3", 0, lib2_gv_pLAYER_05_ARCHANGEL, RegionRandomPoint(RegionCircle(UnitGetPosition(lib2_gv_trainList[lv_trainIndex].lv_trainCars[RandomInt(1, lib2_gv_trainList[lv_trainIndex].lv_lastCar)]), 2.0)), RandomFixed(0.0, 360.0));
    }
    lib2_gv_trainList[lv_trainIndex].lv_trainAlive = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainDeathQ_Init () {
    lib2_gt_TrainDeathQ = TriggerCreate("lib2_gt_TrainDeathQ_Func");
    TriggerAddEventUnitDied(lib2_gt_TrainDeathQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_i;
    // Automatic Variable Declarations
    int autoBBA49912_ae;
    const int autoBBA49912_ai = 1;
    int auto2A793829_ae;
    const int auto2A793829_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 4))) {
            return false;
        }
        if (!(((UnitGetType(EventUnit()) == "Caboose") || (UnitGetType(EventUnit()) == "FreightCar") || (UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoBBA49912_ae = lib2_gv_numberOfTrains;
    lv_i = 1;
    for ( ; ( (autoBBA49912_ai >= 0 && lv_i <= autoBBA49912_ae) || (autoBBA49912_ai < 0 && lv_i >= autoBBA49912_ae) ) ; lv_i += autoBBA49912_ai ) {
        if ((lib2_gv_trainList[lv_i].lv_trainCars[1] == EventUnit())) {
            lv_trainIndex = lv_i;
            break;
        }
    }
    if ((UnitGetType(EventUnit()) == "Caboose")) {
        lib2_gv_trainList[lv_trainIndex].lv_trainAlive = false;
        lib2_gv_activeTrain = UnitGroupEmpty();
        TriggerExecute(lib2_gt_EscortDespawn, true, false);
    }
    UnitBehaviorRemove(EventUnit(), "ConjoinedTrainCar", 1);
    UnitRemove(EventUnit());
    if ((lv_trainIndex > 0)) {
        auto2A793829_ae = lib2_gv_trainList[lv_trainIndex].lv_lastCar;
        lv_i = 2;
        for ( ; ( (auto2A793829_ai >= 0 && lv_i <= auto2A793829_ae) || (auto2A793829_ai < 0 && lv_i >= auto2A793829_ae) ) ; lv_i += auto2A793829_ai ) {
            lib2_gv_trainList[lv_trainIndex].lv_trainCars[(lv_i - 1)] = lib2_gv_trainList[lv_trainIndex].lv_trainCars[lv_i];
        }
        lib2_gv_trainList[lv_trainIndex].lv_lastCar -= 1;
        if ((UnitGroupFilter(null, 4, lib2_gv_activeTrain, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == null)) {
            lib2_gv_trainList[lv_trainIndex].lv_trainAlive = false;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainDespawn_Init () {
    lib2_gt_TrainDespawn = TriggerCreate("lib2_gt_TrainDespawn_Func");
    TriggerAddEventUnitRegion(lib2_gt_TrainDespawn, null, RegionFromId(22), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Escort EndPoint Wait
//--------------------------------------------------------------------------------------------------
bool lib2_gt_EscortEndPointWait_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    unitgroup lv_escortGroup;
    int lv_i;
    fixed lv_waitAngle;
    unitgroup lv_tempTrainGroup;
    point lv_exitPoint;
    // Automatic Variable Declarations
    int auto46F752B2_ae;
    const int auto46F752B2_ai = 1;
    int auto94F711AE_ae;
    const int auto94F711AE_ai = 1;
    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();
    lv_tempTrainGroup = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 4))) {
            return false;
        }
        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto46F752B2_ae = lib2_gv_numberOfTrains;
    lv_i = 1;
    for ( ; ( (auto46F752B2_ai >= 0 && lv_i <= auto46F752B2_ae) || (auto46F752B2_ai < 0 && lv_i >= auto46F752B2_ae) ) ; lv_i += auto46F752B2_ai ) {
        if ((lib2_gv_trainList[lv_i].lv_trainCars[1] == EventUnit())) {
            lv_trainIndex = lv_i;
            break;
        }
    }
    AIWaveDelete(lib2_gv_trainList[lv_trainIndex].lv_escortWave);
    auto94F711AE_ae = lib2_gv_trainList[lv_trainIndex].lv_numberOfEscorts;
    lv_i = 1;
    for ( ; ( (auto94F711AE_ai >= 0 && lv_i <= auto94F711AE_ae) || (auto94F711AE_ai < 0 && lv_i >= auto94F711AE_ae) ) ; lv_i += auto94F711AE_ai ) {
        if ((UnitIsAlive(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
            UnitGroupAdd(lv_escortGroup, lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort);
            if ((ModF(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) >= 20.0) && (ModF(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) <= 160.0)) {
                UnitIssueOrder(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lib2_gv_trainList[lv_trainIndex].lv_trainCars[lib2_gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(lib2_gv_trainList[lv_trainIndex].lv_trainCars[lib2_gv_trainList[lv_trainIndex].lv_lastCar]) + 90.0))), c_orderQueueReplace);
            }
            else {
                if ((ModF(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) >= 200.0) && (ModF(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) <= 340.0)) {
                    UnitIssueOrder(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lib2_gv_trainList[lv_trainIndex].lv_trainCars[lib2_gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(lib2_gv_trainList[lv_trainIndex].lv_trainCars[lib2_gv_trainList[lv_trainIndex].lv_lastCar]) + 270.0))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lib2_gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lib2_gv_trainList[lv_trainIndex].lv_trainCars[lib2_gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(lib2_gv_trainList[lv_trainIndex].lv_trainCars[lib2_gv_trainList[lv_trainIndex].lv_lastCar]) + 180.0))), c_orderQueueReplace);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_EscortEndPointWait_Init () {
    lib2_gt_EscortEndPointWait = TriggerCreate("lib2_gt_EscortEndPointWait_Func");
    TriggerAddEventUnitRegion(lib2_gt_EscortEndPointWait, null, RegionFromId(22), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Escort Despawn
//--------------------------------------------------------------------------------------------------
bool lib2_gt_EscortDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    unitgroup lv_escortGroup;
    int lv_i;
    fixed lv_waitAngle;
    unitgroup lv_tempTrainGroup;
    point lv_exitPoint;
    // Automatic Variable Declarations
    int autoDF97EE27_ae;
    const int autoDF97EE27_ai = 1;
    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();
    lv_tempTrainGroup = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    while (true) {
        if ((UnitGroupCount(lib2_gv_escortWave, c_unitCountAlive) > 0)) {
            autoDF97EE27_ae = UnitGroupCount(lib2_gv_escortWave, c_unitCountAlive);
            lv_i = 1;
            for ( ; ( (autoDF97EE27_ai >= 0 && lv_i <= autoDF97EE27_ae) || (autoDF97EE27_ai < 0 && lv_i >= autoDF97EE27_ae) ) ; lv_i += autoDF97EE27_ai ) {
                UnitRemove(UnitGroupUnit(lib2_gv_escortWave, lv_i));
            }
        }
        else {
            return true;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_EscortDespawn_Init () {
    lib2_gt_EscortDespawn = TriggerCreate("lib2_gt_EscortDespawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Car Damage Animation Controller
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainCarDamageAnimationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainCarToAnimate_LOCAL;
    fixed lv_trainCarToAnimateBreakPoint_LOCAL;
    // Automatic Variable Declarations
    int autoB2B762C2_val;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_trainCarToAnimate_LOCAL = lib2_gv_trainCarToAnimate;
    lv_trainCarToAnimateBreakPoint_LOCAL = lib2_gv_trainCarToAnimateBreakPoint;
    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }
        if ((UnitGetPropertyFixed(lv_trainCarToAnimate_LOCAL, c_unitPropLifePercent, c_unitPropCurrent) <= lv_trainCarToAnimateBreakPoint_LOCAL)) {
            return true;
        }
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("SiegeTank_Explode", -1), PlayerGroupAll(), lv_trainCarToAnimate_LOCAL, 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }
        autoB2B762C2_val = RandomInt(1, 4);
        if (autoB2B762C2_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.167, c_timeGame);
        }
        else if (autoB2B762C2_val == 2) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 01", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.333, c_timeGame);
        }
        else if (autoB2B762C2_val == 3) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 02", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(2.0, c_timeGame);
        }
        else if (autoB2B762C2_val == 4) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 03", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.5, c_timeGame);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainCarDamageAnimationController_Init () {
    lib2_gt_TrainCarDamageAnimationController = TriggerCreate("lib2_gt_TrainCarDamageAnimationController_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Car Ping Controller
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainCarPingController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainCarToPing_LOCAL;
    int lv_trainPing;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_trainPing = c_invalidPingId;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_trainCarToPing_LOCAL = lib2_gv_trainCarToPing;
    libNtve_gf_CreatePingFacingAngle(libCOMI_gf_HumanPlayers(), "PingSimple", UnitGetPosition(lv_trainCarToPing_LOCAL), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_trainPing = PingLastCreated();
    PingSetUnit(lv_trainPing, lib2_gv_trainCarToPing);
    PingSetScale(lv_trainPing, 0.7);
    PingSetTooltip(lv_trainPing, StringExternal("Param/Value/lib_2_F3E61CDD"));
    while (!((UnitIsAlive(lv_trainCarToPing_LOCAL) == false))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_trainPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainCarPingController_Init () {
    lib2_gt_TrainCarPingController = TriggerCreate("lib2_gt_TrainCarPingController_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Train Spawn Timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_StartTrainSpawnTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    if ((TimerGetRemaining(lib2_gv_nextTrainTimer) > 0.0)) {
        TimerStart(lib2_gv_nextTrainTimer, 90.0, false, c_timeGame);
        TimerPause(lib2_gv_nextTrainTimer, false);
        lib2_gv_earlyStartTrainTimer = true;
    }
    else {
        if ((lib2_gv_firstTrainSpawned == false)) {
            TimerStart(lib2_gv_nextTrainTimer, 450.0, false, c_timeGame);
            lib2_gv_trainSpawnReady = true;
        }
        else {
            TimerStart(lib2_gv_nextTrainTimer, 180.0, false, c_timeGame);
            lib2_gv_trainSpawnReady = true;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_StartTrainSpawnTimer_Init () {
    lib2_gt_StartTrainSpawnTimer = TriggerCreate("lib2_gt_StartTrainSpawnTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawn Event
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TrainSpawnEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(lib2_gv_nextTrainTimer) <= 0.0))) {
            return false;
        }
        if (!((lib2_gv_trainSpawnReady == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_trainSpawnReady = false;
    if ((lib2_gv_firstTrainSpawned == false)) {
        lib2_gv_firstTrainSpawned = true;
        lib2_gv_currentWave = 1;
        TriggerQueueEnter();
        lib2_gf_CalTransmission("TrainsFirstTimeUA");
        TriggerExecute(lib2_gt_RevealTrainPath, true, true);
        TriggerQueueExit();
    }
    else {
        lib2_gv_currentWave += 1;
        TriggerQueueEnter();
        lib2_gf_CalTransmission("TrainsRepeatUA");
        TriggerQueueExit();
    }
    Wait(20.0, c_timeGame);
    TriggerExecute(lib2_gt_SpawnTrains, true, false);
    if ((lib2_gv_earlyStartTrainTimer == true)) {
        TriggerExecute(lib2_gt_StartTrainSpawnTimer, true, false);
        lib2_gv_earlyStartTrainTimer = false;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TrainSpawnEvent_Init () {
    lib2_gt_TrainSpawnEvent = TriggerCreate("lib2_gt_TrainSpawnEvent_Func");
    TriggerAddEventTimePeriodic(lib2_gt_TrainSpawnEvent, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Train Path
//--------------------------------------------------------------------------------------------------
bool lib2_gt_RevealTrainPath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_currentPingPoint;
    // Automatic Variable Declarations
    const int auto87BDBEB1_ae = 31;
    const int auto87BDBEB1_ai = 1;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_currentPingPoint = 0;
    lv_i = 1;
    for ( ; ( (auto87BDBEB1_ai >= 0 && lv_i <= auto87BDBEB1_ae) || (auto87BDBEB1_ai < 0 && lv_i >= auto87BDBEB1_ae) ) ; lv_i += auto87BDBEB1_ai ) {
        if ((DistanceBetweenPoints(lib2_gv_trainPath[lv_currentPingPoint], lib2_gv_trainPath[lv_i]) > 4.0)) {
            lv_currentPingPoint = lv_i;
            VisExploreArea(lib2_gv_pLAYER_01_USER, RegionCircle(lib2_gv_trainPath[lv_currentPingPoint], 12.0), true, false);
            VisExploreArea(lib2_gv_pLAYER_02_USER, RegionCircle(lib2_gv_trainPath[lv_currentPingPoint], 12.0), true, false);
            PingCreate(PlayerGroupAll(), "PingArrow", lib2_gv_trainPath[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 20.0);
            PingSetScale(PingLastCreated(), 0.75);
            Wait(0.1, c_timeReal);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_RevealTrainPath_Init () {
    lib2_gt_RevealTrainPath = TriggerCreate("lib2_gt_RevealTrainPath_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Beacon 1
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelBeacon1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_VOQArchangelLaunching, false, false);
    lib2_gf_SiegeGate(lib2_gv_bossesSlain);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelBeacon1_Init () {
    lib2_gt_ArchangelBeacon1 = TriggerCreate("lib2_gt_ArchangelBeacon1_Func");
    TriggerEnable(lib2_gt_ArchangelBeacon1, false);
    TriggerAddEventUnitRegion(lib2_gt_ArchangelBeacon1, null, RegionFromId(30), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Beacon 2
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelBeacon2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_VOQArchangelLaunching, false, false);
    lib2_gf_SiegeGate(lib2_gv_bossesSlain);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelBeacon2_Init () {
    lib2_gt_ArchangelBeacon2 = TriggerCreate("lib2_gt_ArchangelBeacon2_Func");
    TriggerEnable(lib2_gt_ArchangelBeacon2, false);
    TriggerAddEventUnitRegion(lib2_gt_ArchangelBeacon2, null, RegionFromId(31), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Beacon 3
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelBeacon3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_VOQArchangelLaunching, false, false);
    lib2_gf_SiegeGate(lib2_gv_bossesSlain);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelBeacon3_Init () {
    lib2_gt_ArchangelBeacon3 = TriggerCreate("lib2_gt_ArchangelBeacon3_Func");
    TriggerEnable(lib2_gt_ArchangelBeacon3, false);
    TriggerAddEventUnitRegion(lib2_gt_ArchangelBeacon3, null, RegionFromId(32), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Takeoff Dummy Height
//--------------------------------------------------------------------------------------------------
bool lib2_gt_TakeoffDummyHeight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ArchangelTakeoffDummy"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetHeight(EventUnitCreatedUnit(), 20.0, 4.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_TakeoffDummyHeight_Init () {
    lib2_gt_TakeoffDummyHeight = TriggerCreate("lib2_gt_TakeoffDummyHeight_Func");
    TriggerAddEventUnitCreated(lib2_gt_TakeoffDummyHeight, null, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Landing Dummy Height
//--------------------------------------------------------------------------------------------------
bool lib2_gt_LandingDummyHeight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ArchangelLandingDummy"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetHeight(EventUnitCreatedUnit(), 20.0, 0.0);
    UnitSetHeight(EventUnitCreatedUnit(), 0.0, 2.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_LandingDummyHeight_Init () {
    lib2_gt_LandingDummyHeight = TriggerCreate("lib2_gt_LandingDummyHeight_Func");
    TriggerAddEventUnitCreated(lib2_gt_LandingDummyHeight, null, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Return to Repair
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelReturntoRepair_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dummy;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(lib2_gv_archangel, RegionCircle(PointFromId(252424480), 2.0)) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitCreate(1, "ArchangelTakeoffDummy", 0, lib2_gv_pLAYER_05_ARCHANGEL, UnitGetPosition(lib2_gv_archangel), UnitGetFacing(lib2_gv_archangel));
    lv_dummy = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lib2_gv_archangel, false);
    Wait(4.0, c_timeGame);
    UnitSetPosition(lib2_gv_archangel, PointFromId(252424480), false);
    UnitRemove(lv_dummy);
    UnitSetFacing(lib2_gv_archangel, 45.0, 0.0);
    UnitCreate(1, "ArchangelLandingDummy", 0, lib2_gv_pLAYER_05_ARCHANGEL, UnitGetPosition(lib2_gv_archangel), UnitGetFacing(lib2_gv_archangel));
    lv_dummy = UnitLastCreated();
    Wait(3.0, c_timeGame);
    UnitRemove(lv_dummy);
    UnitBehaviorAdd(lib2_gv_archangel, "ArchangelIncapacitated", lib2_gv_archangel, 1);
    libNtve_gf_ShowHideUnit(lib2_gv_archangel, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelReturntoRepair_Init () {
    lib2_gt_ArchangelReturntoRepair = TriggerCreate("lib2_gt_ArchangelReturntoRepair_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Landing
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelLanding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetHeight(EventUnit(), 20.0, 0.0);
    UnitSetHeight(EventUnit(), 0.0, 0.5);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelLanding_Init () {
    lib2_gt_ArchangelLanding = TriggerCreate("lib2_gt_ArchangelLanding_Func");
    TriggerAddEventUnitAbility(lib2_gt_ArchangelLanding, null, AbilityCommand("ArchangelSkySlam", 0), c_unitAbilStageExecute, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Launch Sequence
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelLaunchSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_VOQArchangelRepaired, true, true);
    PingSetTooltip(lib2_gv_bossPings[lib2_gv_bossesSlain], StringExternal("Param/Value/lib_2_8577F1DB"));
    PingSetScale(lib2_gv_bossPings[lib2_gv_bossesSlain], 1.0);
    TriggerExecute(lib2_gt_HidePartsRegionPings, true, true);
    if ((lib2_gv_bossesSlain == 0)) {
        TriggerExecute(lib2_gt_ObjectiveFollowArchangelCreate, true, false);
    }
    else {
        TriggerExecute(lib2_gt_ObjectiveFollowArchangelShow, true, false);
    }
    TriggerExecute(lib2_gt_ArchangelDestinationPing, true, true);
    TriggerExecute(lib2_gt_ArchangelSiegePingTrail, true, false);
    libNtve_gf_ShowHideUnit(lib2_gv_bossBeacons[lib2_gv_bossesSlain], true);
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/lib_2_2C484068"), lib2_gv_bossBeacons[lib2_gv_bossesSlain], "Ref_Center");
    libCOMI_gf_ShareVisionofUnitWithHumansCoop(lib2_gv_bossBeacons[lib2_gv_bossesSlain], true);
    VisRevealArea(lib2_gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lib2_gv_bossBeacons[lib2_gv_bossesSlain]), 3.0), 0.01, false);
    VisRevealArea(lib2_gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lib2_gv_bossBeacons[lib2_gv_bossesSlain]), 3.0), 0.01, false);
    TriggerEnable(lib2_gv_beaconTriggers[lib2_gv_bossesSlain], true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelLaunchSequence_Init () {
    lib2_gt_ArchangelLaunchSequence = TriggerCreate("lib2_gt_ArchangelLaunchSequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Destination Ping
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelDestinationPing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lib2_gv_bossBeacons[lib2_gv_bossesSlain]), StringExternal("Param/Value/lib_2_63A1800D"));
    lib2_gv_archangelDestinationPing = PingLastCreated();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelDestinationPing_Init () {
    lib2_gt_ArchangelDestinationPing = TriggerCreate("lib2_gt_ArchangelDestinationPing_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Siege Ping Trail
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ArchangelSiegePingTrail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_landingPoint;
    point lv_siegePoint;
    fixed lv_i;
    // Automatic Variable Declarations
    const fixed auto949AA4BC_ae = 4.0;
    const fixed auto949AA4BC_ai = 1.0;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_landingPoint = lib2_gv_archangelDestinations[lib2_gv_bossesSlain];
    lv_siegePoint = UnitGetPosition(lib2_gv_bosses[lib2_gv_bossesSlain]);
    while ((UnitIsAlive(lib2_gv_frontGates[lib2_gv_bossesSlain]) == true)) {
        lv_i = 1.0;
        for ( ; ( (auto949AA4BC_ai >= 0 && lv_i <= auto949AA4BC_ae) || (auto949AA4BC_ai < 0 && lv_i >= auto949AA4BC_ae) ) ; lv_i += auto949AA4BC_ai ) {
            libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), PointInterpolate(lv_landingPoint, lv_siegePoint, (lv_i / 4.0)), 45.0, "PingArrow", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 5.0);
            PingSetScale(PingLastCreated(), 0.6);
            Wait(0.1, c_timeGame);
        }
        Wait(7.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ArchangelSiegePingTrail_Init () {
    lib2_gt_ArchangelSiegePingTrail = TriggerCreate("lib2_gt_ArchangelSiegePingTrail_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Gates
//--------------------------------------------------------------------------------------------------
bool lib2_gt_InitializeGates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gate;
    // Automatic Variable Declarations
    unitgroup autoD7BC2F87_g;
    int autoD7BC2F87_u;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    autoD7BC2F87_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7BC2F87_u = UnitGroupCount(autoD7BC2F87_g, c_unitCountAll);
    for (;; autoD7BC2F87_u -= 1) {
        lv_gate = UnitGroupUnitFromEnd(autoD7BC2F87_g, autoD7BC2F87_u);
        if (lv_gate == null) { break; }
        if ((UnitGetType(lv_gate) == "FortressGate45GateHugeWest")) {
            libNtve_gf_MakeUnitInvulnerable(lv_gate, true);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_InitializeGates_Init () {
    lib2_gt_InitializeGates = TriggerCreate("lib2_gt_InitializeGates_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool lib2_gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    // Automatic Variable Declarations
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesCreate, true, true);
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsCreate, true, true);
    TriggerExecute(lib2_gt_InitializeBossTimer, true, false);
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenCreate, true, true);
    TriggerExecute(lib2_gt_InitializeTrainPath, true, false);
    TriggerExecute(lib2_gt_InitializeTrainandEscort, true, false);
    TriggerExecute(lib2_gt_StartTrainSpawnTimer, true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    Wait(2.0, c_timeGame);
    if ((RandomInt(0, 100) <= 50)) {
        lib2_gf_CalTransmission("Intro1UA");
    }
    else {
        lib2_gf_CalTransmission("Intro2UA");
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    VisRevealArea(1, RegionCircle(UnitGetPosition(UnitFromId(2103109240)), 3.0), 60.0, false);
    VisRevealArea(2, RegionCircle(UnitGetPosition(UnitFromId(2103109240)), 3.0), 60.0, false);
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/lib_2_886B11F7"), UnitFromId(2103109240), "Ref_Center");
    TriggerExecute(lib2_gt_NextBossRevealPing, true, true);
    TriggerExecute(lib2_gt_ShowandUpdatePartRegionMarkers, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_StartGameQ_Init () {
    lib2_gt_StartGameQ = TriggerCreate("lib2_gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Debris Meteor FX
//--------------------------------------------------------------------------------------------------
bool lib2_gt_DebrisMeteorFX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    // Automatic Variable Declarations
    playergroup auto6D983905_g;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto6D983905_g = libCOMI_gf_HumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto6D983905_g, lv_player);
        if (lv_player < 0) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), CameraGetTarget(lv_player)) <= 8.0)) {
            CameraShake(lv_player, "Light", "Shake", 0.0, 0.1, 1.65);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_DebrisMeteorFX_Init () {
    lib2_gt_DebrisMeteorFX = TriggerCreate("lib2_gt_DebrisMeteorFX_Func");
    TriggerAddEventUnitAbility(lib2_gt_DebrisMeteorFX, null, AbilityCommand("DebrisMeteor", 0), c_abilEffectStageCast, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Archangel
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ResetArchangel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_ArchangelReturntoRepair, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ResetArchangel_Init () {
    lib2_gt_ResetArchangel = TriggerCreate("lib2_gt_ResetArchangel_Func");
    TriggerEnable(lib2_gt_ResetArchangel, false);
    TriggerAddEventUnitBehaviorChange(lib2_gt_ResetArchangel, UnitRefFromVariable("lib2_gv_archangel"), "ArchangelIncapacitated", c_unitBehaviorChangeCreate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Death 1
//--------------------------------------------------------------------------------------------------
bool lib2_gt_BossDeath1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_ResetArchangel, false, false);
    PingDestroy(lib2_gv_bossPings[lib2_gv_bossesSlain]);
    lib2_gv_bossesSlain = (lib2_gv_bossesSlain + 1);
    UnitIssueOrder(UnitFromId(1439530926), Order(AbilityCommand("DefensiveWall45GateHugeWestLowered", 0)), c_orderQueueReplace);
    TriggerExecute(lib2_gt_AddtoBossTimer, true, false);
    TriggerExecute(lib2_gt_UnpauseBossTimer, true, false);
    TriggerExecute(lib2_gt_ShowPartsRegionPings, true, true);
    TriggerExecute(lib2_gt_ResetArchangel, true, false);
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsReset, true, false);
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesUpdate, true, false);
    TriggerExecute(lib2_gt_ObjectiveFollowArchangelComplete, true, false);
    TriggerExecute(lib2_gt_StartTrainSpawnTimer, true, false);
    if ((UnitHasBehavior2(lib2_gv_archangel, "ArchangelIncapacitated") == false)) {
        TriggerQueueEnter();
        libCOMI_gf_SendMissionTransmission("PrimaryObjectiveDestroyed", true, lib2_gv_pLAYER_02_USER);
        lib2_gf_CalTransmission("Boss1KilledArchangelUpUA");
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libCOMI_gf_SendMissionTransmission("PrimaryObjectiveDestroyed", true, lib2_gv_pLAYER_02_USER);
        lib2_gf_CalTransmission("Boss1KilledArchangelDownUA");
        TriggerQueueExit();
    }
    TriggerExecute(lib2_gt_NextBossRevealPing, true, false);
    TriggerExecute(lib2_gt_VOResetBlockingFlags, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_BossDeath1_Init () {
    lib2_gt_BossDeath1 = TriggerCreate("lib2_gt_BossDeath1_Func");
    TriggerAddEventUnitDied(lib2_gt_BossDeath1, UnitRefFromVariable("lib2_gv_bosses[0]"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Death 2
//--------------------------------------------------------------------------------------------------
bool lib2_gt_BossDeath2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    PingDestroy(lib2_gv_bossPings[lib2_gv_bossesSlain]);
    lib2_gv_bossesSlain = (lib2_gv_bossesSlain + 1);
    UnitIssueOrder(UnitFromId(123420970), Order(AbilityCommand("DefensiveWall45GateHugeWestLowered", 0)), c_orderQueueReplace);
    TriggerExecute(lib2_gt_AddtoBossTimer, true, false);
    TriggerExecute(lib2_gt_UnpauseBossTimer, true, false);
    TriggerExecute(lib2_gt_ResetArchangel, true, false);
    TriggerExecute(lib2_gt_ShowPartsRegionPings, true, true);
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsReset, true, false);
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesUpdate, true, false);
    TriggerExecute(lib2_gt_ObjectiveFollowArchangelComplete, true, false);
    TriggerExecute(lib2_gt_StartTrainSpawnTimer, true, false);
    TriggerQueueEnter();
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveDestroyed", true, lib2_gv_pLAYER_01_USER);
    lib2_gf_CalTransmission("Boss2KilledUA");
    TriggerQueueExit();
    TriggerExecute(lib2_gt_NextBossRevealPing, true, false);
    TriggerExecute(lib2_gt_VOResetBlockingFlags, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_BossDeath2_Init () {
    lib2_gt_BossDeath2 = TriggerCreate("lib2_gt_BossDeath2_Func");
    TriggerAddEventUnitDied(lib2_gt_BossDeath2, UnitRefFromVariable("lib2_gv_bosses[1]"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Death 3
//--------------------------------------------------------------------------------------------------
bool lib2_gt_BossDeath3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    PingDestroy(lib2_gv_bossPings[lib2_gv_bossesSlain]);
    lib2_gv_bossesSlain = (lib2_gv_bossesSlain + 1);
    ObjectiveSetState(lib2_gv_objectiveFollowArchangel, c_objectiveStateCompleted);
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesComplete, true, true);
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenComplete, true, true);
    TriggerExecute(lib2_gt_VictoryPrimaryObjectiveComplete, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_BossDeath3_Init () {
    lib2_gt_BossDeath3 = TriggerCreate("lib2_gt_BossDeath3_Func");
    TriggerAddEventUnitDied(lib2_gt_BossDeath3, UnitRefFromVariable("lib2_gv_bosses[2]"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemyCloakedSpotted
//--------------------------------------------------------------------------------------------------
bool lib2_gt_CM_VOEnemyCloakedSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_userPlayer;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((lib2_gv_vO_cloaked_units_warning_blocked == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitFilterMatch(EventUnitTarget(), EventPlayer(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) || (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnitTarget())) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false) || (TriggerQueueIsEmpty() == false))) {
        return true;
    }
    lv_userPlayer = EventPlayer();
    TriggerEnable(TriggerGetCurrent(), false);
    lib2_gv_vO_cloaked_units_warning_blocked = true;
    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDetectPing", UnitGetPosition(EventUnitTarget()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 10.0, 270.0);
    libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, lv_userPlayer);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_CM_VOEnemyCloakedSpotted_Init () {
    lib2_gt_CM_VOEnemyCloakedSpotted = TriggerCreate("lib2_gt_CM_VOEnemyCloakedSpotted_Func");
    TriggerEnable(lib2_gt_CM_VOEnemyCloakedSpotted, false);
    TriggerAddEventUnitAttacked2(lib2_gt_CM_VOEnemyCloakedSpotted, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool lib2_gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(lib2_gv_pLAYER_01_USER, lib2_gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_EnemyAttackingQ_Init () {
    lib2_gt_EnemyAttackingQ = TriggerCreate("lib2_gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(lib2_gt_EnemyAttackingQ, lib2_gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(lib2_gt_EnemyAttackingQ, lib2_gv_pLAYER_04_ENEMY);
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Update Archangel Parts
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOUpdateArchangelParts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lib2_gv_archangelPartsCount >= lib2_gv_archangelPartsRequired)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    if (((lib2_gv_vO_parts_twothirds_blocked == false) && (lib2_gv_archangelPartsCount >= 54))) {
        lib2_gv_vO_parts_twothirds_blocked = true;
        lib2_gv_vO_parts_onethird_blocked = true;
        TriggerQueueEnter();
        lib2_gf_CalTransmission("Parts23rdsUA");
        TriggerQueueExit();
        return true;
    }
    if (((lib2_gv_vO_parts_onethird_blocked == false) && (lib2_gv_archangelPartsCount >= 27) && (lib2_gv_vO_parts_onethird_firsttime_played == false))) {
        lib2_gv_vO_parts_onethird_blocked = true;
        lib2_gv_vO_parts_onethird_firsttime_played = true;
        TriggerQueueEnter();
        lib2_gf_CalTransmission("Parts13rdFirstTimeUA");
        TriggerQueueExit();
    }
    if (((lib2_gv_vO_parts_onethird_blocked == false) && (lib2_gv_archangelPartsCount >= 27) && (lib2_gv_vO_parts_onethird_firsttime_played == true))) {
        lib2_gv_vO_parts_onethird_blocked = true;
        TriggerQueueEnter();
        lib2_gf_CalTransmission("Parts13rdRepeatUA");
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOUpdateArchangelParts_Init () {
    lib2_gt_VOUpdateArchangelParts = TriggerCreate("lib2_gt_VOUpdateArchangelParts_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Archangel Combat Death
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQArchangelCombatDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    lib2_gf_CalTransmission("ArchangelKilledUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQArchangelCombatDeath_Init () {
    lib2_gt_VOQArchangelCombatDeath = TriggerCreate("lib2_gt_VOQArchangelCombatDeath_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Timer Halfway
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQTimerHalfway_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TimerGetRemaining(lib2_gv_timerPreventBossAwaken) <= 300.0) && (lib2_gv_vO_timer_warning_half_blocked == false)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_vO_timer_warning_half_blocked = true;
    TriggerQueueEnter();
    lib2_gf_CalTransmission("HalfTimerUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQTimerHalfway_Init () {
    lib2_gt_VOQTimerHalfway = TriggerCreate("lib2_gt_VOQTimerHalfway_Func");
    TriggerEnable(lib2_gt_VOQTimerHalfway, false);
    TriggerAddEventTimePeriodic(lib2_gt_VOQTimerHalfway, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Timer 3/4ths
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQTimer34ths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TimerGetRemaining(lib2_gv_timerPreventBossAwaken) <= 150.0) && (lib2_gv_vO_timer_warning_34_blocked == false)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_vO_timer_warning_34_blocked = true;
    if ((UnitHasBehavior2(lib2_gv_archangel, "ArchangelIncapacitated") == false)) {
        TriggerQueueEnter();
        lib2_gf_CalTransmission("Timer34sDepletedUA");
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        lib2_gf_CalTransmission("Timer34sDepletedArchangelDiedUA");
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQTimer34ths_Init () {
    lib2_gt_VOQTimer34ths = TriggerCreate("lib2_gt_VOQTimer34ths_Func");
    TriggerEnable(lib2_gt_VOQTimer34ths, false);
    TriggerAddEventTimePeriodic(lib2_gt_VOQTimer34ths, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Archangel Repaired
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQArchangelRepaired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_vO_parts_onethird_blocked = true;
    lib2_gv_vO_parts_twothirds_blocked = true;
    TriggerQueueEnter();
    lib2_gf_CalTransmission("ArchangelRepairedUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQArchangelRepaired_Init () {
    lib2_gt_VOQArchangelRepaired = TriggerCreate("lib2_gt_VOQArchangelRepaired_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Archangel Breaching
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQArchangelBreaching_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib2_gv_vO_archangel_breaching_blocked == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_vO_archangel_breaching_blocked = true;
    TriggerQueueEnter();
    lib2_gf_CalTransmission("ArchangelBreachingUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQArchangelBreaching_Init () {
    lib2_gt_VOQArchangelBreaching = TriggerCreate("lib2_gt_VOQArchangelBreaching_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Archangel Launching
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQArchangelLaunching_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_vO_proximity_warning_blocked = true;
    TriggerQueueEnter();
    lib2_gf_CalTransmission("ArchangelLaunchUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQArchangelLaunching_Init () {
    lib2_gt_VOQArchangelLaunching = TriggerCreate("lib2_gt_VOQArchangelLaunching_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Defeat Routed
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQDefeatRouted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    lib2_gf_CalTransmission("DefeatBaseDestroyedUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQDefeatRouted_Init () {
    lib2_gt_VOQDefeatRouted = TriggerCreate("lib2_gt_VOQDefeatRouted_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Defeat Timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQDefeatTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    lib2_gf_CalTransmission("DefeatTimerExpiredUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQDefeatTimer_Init () {
    lib2_gt_VOQDefeatTimer = TriggerCreate("lib2_gt_VOQDefeatTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Victory
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQVictory_Init () {
    lib2_gt_VOQVictory = TriggerCreate("lib2_gt_VOQVictory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Proximity Warning
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQProximityWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib2_gv_archangelPartsCount < lib2_gv_archangelPartsRequired) && (lib2_gv_vO_proximity_warning_blocked == false)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_vO_proximity_warning_blocked = true;
    TriggerQueueEnter();
    lib2_gf_CalTransmission("NearShardWarningUA");
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQProximityWarning_Init () {
    lib2_gt_VOQProximityWarning = TriggerCreate("lib2_gt_VOQProximityWarning_Func");
    TriggerAddEventUnitStartedAttack2(lib2_gt_VOQProximityWarning, UnitRefFromUnit(UnitFromId(418900889)), null);
    TriggerAddEventUnitStartedAttack2(lib2_gt_VOQProximityWarning, UnitRefFromUnit(UnitFromId(1161517213)), null);
    TriggerAddEventUnitStartedAttack2(lib2_gt_VOQProximityWarning, UnitRefFromUnit(UnitFromId(769296723)), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Q Objective Updated
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOQObjectiveUpdated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOQObjectiveUpdated_Init () {
    lib2_gt_VOQObjectiveUpdated = TriggerCreate("lib2_gt_VOQObjectiveUpdated_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: VO Reset Blocking Flags
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VOResetBlockingFlags_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gv_vO_parts_onethird_blocked = false;
    lib2_gv_vO_parts_twothirds_blocked = false;
    lib2_gv_vO_archangel_breaching_blocked = false;
    lib2_gv_vO_proximity_warning_blocked = false;
    lib2_gv_vO_timer_warning_34_blocked = false;
    TriggerEnable(lib2_gt_VOUpdateArchangelParts, true);
    TriggerExecute(lib2_gt_VOQObjectiveUpdated, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VOResetBlockingFlags_Init () {
    lib2_gt_VOResetBlockingFlags = TriggerCreate("lib2_gt_VOResetBlockingFlags_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool lib2_gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueuePause(false);
    TriggerExecute(lib2_gt_VOQDefeatTimer, true, false);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/lib_2_DE79766A"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(lib2_gv_pLAYER_01_USER, true);
    CameraLockInput(lib2_gv_pLAYER_02_USER, true);
    UnitClearSelection(lib2_gv_pLAYER_01_USER);
    UnitClearSelection(lib2_gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(lib2_gv_pLAYER_01_USER, UnitGetPosition(lib2_gv_bosses[lib2_gv_bossesSlain]), 1.5, -1, 10.0, false);
    CameraPan(lib2_gv_pLAYER_02_USER, UnitGetPosition(lib2_gv_bosses[lib2_gv_bossesSlain]), 1.5, -1, 10.0, false);
    UISetCursorVisible(PlayerGroupAll(), true);
    Wait(5.0, c_timeGame);
    TriggerExecute(lib2_gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_DefeatPrimaryObjectiveFailed_Init () {
    lib2_gt_DefeatPrimaryObjectiveFailed = TriggerCreate("lib2_gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventTimer(lib2_gt_DefeatPrimaryObjectiveFailed, lib2_gv_timerPreventBossAwaken);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_VictorySequence, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VictoryPrimaryObjectiveComplete_Init () {
    lib2_gt_VictoryPrimaryObjectiveComplete = TriggerCreate("lib2_gt_VictoryPrimaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(lib2_gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VictorySequence_Init () {
    lib2_gt_VictorySequence = TriggerCreate("lib2_gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool lib2_gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    UnitPauseAll(true);
    CameraLockInput(lib2_gv_pLAYER_01_USER, true);
    CameraLockInput(lib2_gv_pLAYER_02_USER, true);
    UnitClearSelection(lib2_gv_pLAYER_01_USER);
    UnitClearSelection(lib2_gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(lib2_gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(lib2_gv_pLAYER_01_USER, lib2_gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(lib2_gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(lib2_gv_pLAYER_02_USER, lib2_gv_victoryCompletePan, 2.0, -1, 10.0, false);
    lib2_gf_CalTransmission("VictoryUA");
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lib2_gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/lib_2_EB8AE765"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lib2_gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/lib_2_5A732BAD"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    UISetCursorVisible(PlayerGroupAll(), true);
    GameOver(1, c_gameOverVictory, true, true);
    GameOver(2, c_gameOverVictory, true, true);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_VictoryFanfareQ_Init () {
    lib2_gt_VictoryFanfareQ = TriggerCreate("lib2_gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Victory_Init () {
    lib2_gt_Victory = TriggerCreate("lib2_gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool lib2_gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_Defeat_Init () {
    lib2_gt_Defeat = TriggerCreate("lib2_gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool lib2_gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(lib2_gt_AIAttackWaves, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_StartAI_Init () {
    lib2_gt_StartAI = TriggerCreate("lib2_gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool lib2_gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;
    // Automatic Variable Declarations
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(10);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(8);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(9);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(13);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(14);
    lv_spawnLocationIter = 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(15);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(17);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(16);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(18);
    lv_spawnLocationIter += 1;
    lib2_gv_attackSpawn[lib2_gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(19);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_SetupAttackWaveSpawn_Init () {
    lib2_gt_SetupAttackWaveSpawn = TriggerCreate("lib2_gt_SetupAttackWaveSpawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_looptime;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_looptime = 24.0;
    // Actions
    if (!runActions) {
        return true;
    }
    lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave01, (3.5 * 60.0));
    lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave02, (6.0 * 60.0));
    lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave03, (9.0 * 60.0));
    lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave04, (12.0 * 60.0));
    lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave05, (15.0 * 60.0));
    lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave06, (18.0 * 60.0));
    lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave07, (21.0 * 60.0));
    while ((lv_looptime <= 45.5)) {
        lib2_gf_RunAttackWaveatMissionTime(lib2_gt_AttackWave07, (lv_looptime * 60.0));
        lv_looptime = (lv_looptime + 3.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AIAttackWaves_Init () {
    lib2_gt_AIAttackWaves = TriggerCreate("lib2_gt_AIAttackWaves_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(lib2_gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(lib2_gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(lib2_gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(lib2_gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave01_Init () {
    lib2_gt_AttackWave01 = TriggerCreate("lib2_gt_AttackWave01_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave02_Init () {
    lib2_gt_AttackWave02 = TriggerCreate("lib2_gt_AttackWave02_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Automatic Variable Declarations
    playergroup auto37CDD8AA_g;
    int auto37CDD8AA_var;
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    auto37CDD8AA_g = libCOMI_gf_HumanPlayers();
    auto37CDD8AA_var = -1;
    while (true) {
        auto37CDD8AA_var = PlayerGroupNextPlayer(auto37CDD8AA_g, auto37CDD8AA_var);
        if (auto37CDD8AA_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, auto37CDD8AA_var, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, auto37CDD8AA_var, RegionFromId(2), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(367))) {
        lib2_gv_attackWaveA_Wave05Path = PointFromId(358);
    }
    else {
        lib2_gv_attackWaveA_Wave05Path = PointFromId(367);
    }
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave03_Init () {
    lib2_gt_AttackWave03 = TriggerCreate("lib2_gt_AttackWave03_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave04_Init () {
    lib2_gt_AttackWave04 = TriggerCreate("lib2_gt_AttackWave04_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackPathWaypoint = lib2_gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave05_Init () {
    lib2_gt_AttackWave05 = TriggerCreate("lib2_gt_AttackWave05_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave06_Init () {
    lib2_gt_AttackWave06 = TriggerCreate("lib2_gt_AttackWave06_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave07_Init () {
    lib2_gt_AttackWave07 = TriggerCreate("lib2_gt_AttackWave07_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 08
//--------------------------------------------------------------------------------------------------
bool lib2_gt_AttackWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(lib2_gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib2_gv_pLAYER_03_ENEMY, lib2_gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lib2_gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_AttackWave08_Init () {
    lib2_gt_AttackWave08 = TriggerCreate("lib2_gt_AttackWave08_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Reset
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveGatherArchangelPartsReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    ObjectiveDestroy(lib2_gv_objectiveGatherArchangelParts);
    TriggerEnable(lib2_gt_ObjectiveGatherArchangelPartsCreate, true);
    TriggerEnable(lib2_gt_ObjectiveGatherArchangelPartsComplete, true);
    TriggerEnable(lib2_gt_ObjectiveGatherArchangelPartsUpdate, true);
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsCreate, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveGatherArchangelPartsReset_Init () {
    lib2_gt_ObjectiveGatherArchangelPartsReset = TriggerCreate("lib2_gt_ObjectiveGatherArchangelPartsReset_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Create
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveGatherArchangelPartsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary22");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary22", lib2_gv_archangelPartsRequired);
    lib2_gv_objectiveGatherArchangelParts = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 9);
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsUpdate, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveGatherArchangelPartsCreate_Init () {
    lib2_gt_ObjectiveGatherArchangelPartsCreate = TriggerCreate("lib2_gt_ObjectiveGatherArchangelPartsCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Update
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveGatherArchangelPartsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary22", lib2_gv_archangelPartsCount);
    TextExpressionSetToken("Param/Expression/lib_2_B442D475", "PartCount", IntToText(lib2_gv_archangelPartsCount));
    TextExpressionSetToken("Param/Expression/lib_2_B442D475", "PartsRequired", IntToText(lib2_gv_archangelPartsRequired));
    ObjectiveSetName(lib2_gv_objectiveGatherArchangelParts, TextExpressionAssemble("Param/Expression/lib_2_B442D475"));
    if ((lib2_gv_archangelPartsCount >= lib2_gv_archangelPartsRequired)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsComplete, true, false);
        return true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveGatherArchangelPartsUpdate_Init () {
    lib2_gt_ObjectiveGatherArchangelPartsUpdate = TriggerCreate("lib2_gt_ObjectiveGatherArchangelPartsUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Complete
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveGatherArchangelPartsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_ObjectiveGatherArchangelPartsCreate, true, false);
    TriggerEnable(lib2_gt_ObjectiveGatherArchangelPartsUpdate, false);
    ObjectiveSetState(lib2_gv_objectiveGatherArchangelParts, c_objectiveStateCompleted);
    TriggerExecute(lib2_gt_PartsComplete, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveGatherArchangelPartsComplete_Init () {
    lib2_gt_ObjectiveGatherArchangelPartsComplete = TriggerCreate("lib2_gt_ObjectiveGatherArchangelPartsComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Create
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveDestroyBossesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary2");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary2", lib2_gv_bossesRequired);
    lib2_gv_objectiveDestroyBosses = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesUpdate, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveDestroyBossesCreate_Init () {
    lib2_gt_ObjectiveDestroyBossesCreate = TriggerCreate("lib2_gt_ObjectiveDestroyBossesCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Update
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveDestroyBossesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary2", lib2_gv_bossesSlain);
    TextExpressionSetToken("Param/Expression/lib_2_4DAE87A1", "BossCount", IntToText(lib2_gv_bossesSlain));
    TextExpressionSetToken("Param/Expression/lib_2_4DAE87A1", "BossesRequired", IntToText(lib2_gv_bossesRequired));
    ObjectiveSetName(lib2_gv_objectiveDestroyBosses, TextExpressionAssemble("Param/Expression/lib_2_4DAE87A1"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveDestroyBossesUpdate_Init () {
    lib2_gt_ObjectiveDestroyBossesUpdate = TriggerCreate("lib2_gt_ObjectiveDestroyBossesUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Complete
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveDestroyBossesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenCreate, true, false);
    ObjectiveSetState(lib2_gv_objectivePreventBossAwaken, c_objectiveStateCompleted);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveDestroyBossesComplete_Init () {
    lib2_gt_ObjectiveDestroyBossesComplete = TriggerCreate("lib2_gt_ObjectiveDestroyBossesComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Failed
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveDestroyBossesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_ObjectiveDestroyBossesCreate, true, false);
    ObjectiveSetState(lib2_gv_objectiveDestroyBosses, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveDestroyBossesFailed_Init () {
    lib2_gt_ObjectiveDestroyBossesFailed = TriggerCreate("lib2_gt_ObjectiveDestroyBossesFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Hide
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectivePreventBossAwakenHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenCreate, true, false);
    ObjectiveShow(lib2_gv_objectivePreventBossAwaken, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectivePreventBossAwakenHide_Init () {
    lib2_gt_ObjectivePreventBossAwakenHide = TriggerCreate("lib2_gt_ObjectivePreventBossAwakenHide_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Show
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectivePreventBossAwakenShow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenCreate, true, false);
    ObjectiveShow(lib2_gv_objectivePreventBossAwaken, PlayerGroupAll(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectivePreventBossAwakenShow_Init () {
    lib2_gt_ObjectivePreventBossAwakenShow = TriggerCreate("lib2_gt_ObjectivePreventBossAwakenShow_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Create
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectivePreventBossAwakenCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary222");
    lib2_gv_objectivePreventBossAwaken = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectivePreventBossAwakenCreate_Init () {
    lib2_gt_ObjectivePreventBossAwakenCreate = TriggerCreate("lib2_gt_ObjectivePreventBossAwakenCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Update
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectivePreventBossAwakenUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenCreate, true, false);
    TextExpressionSetToken("Param/Expression/lib_2_D5A0FE36", "timerRemaining", libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(lib2_gv_timerPreventBossAwaken))));
    ObjectiveSetName(lib2_gv_objectivePreventBossAwaken, TextExpressionAssemble("Param/Expression/lib_2_D5A0FE36"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectivePreventBossAwakenUpdate_Init () {
    lib2_gt_ObjectivePreventBossAwakenUpdate = TriggerCreate("lib2_gt_ObjectivePreventBossAwakenUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Failed
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectivePreventBossAwakenFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenCreate, true, false);
    ObjectiveSetState(lib2_gv_objectivePreventBossAwaken, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectivePreventBossAwakenFailed_Init () {
    lib2_gt_ObjectivePreventBossAwakenFailed = TriggerCreate("lib2_gt_ObjectivePreventBossAwakenFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Complete
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectivePreventBossAwakenComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib2_gt_ObjectivePreventBossAwakenCreate, true, false);
    ObjectiveSetState(lib2_gv_objectivePreventBossAwaken, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectivePreventBossAwakenComplete_Init () {
    lib2_gt_ObjectivePreventBossAwakenComplete = TriggerCreate("lib2_gt_ObjectivePreventBossAwakenComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Follow Archangel - Create
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveFollowArchangelCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_CreateObjectiveCampaign("FollowtheArchangel");
    lib2_gv_objectiveFollowArchangel = ObjectiveLastCreated();
    ObjectiveSetName(lib2_gv_objectiveFollowArchangel, StringExternal("Param/Value/lib_2_3173C474"));
    ObjectiveSetPriority(ObjectiveLastCreated(), 7);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveFollowArchangelCreate_Init () {
    lib2_gt_ObjectiveFollowArchangelCreate = TriggerCreate("lib2_gt_ObjectiveFollowArchangelCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Follow Archangel - Complete
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveFollowArchangelComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    ObjectiveSetState(lib2_gv_objectiveFollowArchangel, c_objectiveStateCompleted);
    Wait(6.0, c_timeGame);
    ObjectiveShow(lib2_gv_objectiveFollowArchangel, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveFollowArchangelComplete_Init () {
    lib2_gt_ObjectiveFollowArchangelComplete = TriggerCreate("lib2_gt_ObjectiveFollowArchangelComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Follow Archangel - Show
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ObjectiveFollowArchangelShow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }
    ObjectiveSetState(lib2_gv_objectiveFollowArchangel, c_objectiveStateActive);
    ObjectiveShow(lib2_gv_objectiveFollowArchangel, PlayerGroupAll(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib2_gt_ObjectiveFollowArchangelShow_Init () {
    lib2_gt_ObjectiveFollowArchangelShow = TriggerCreate("lib2_gt_ObjectiveFollowArchangelShow_Func");
}
void lib2_InitTriggers () {
    lib2_gt_Init01LoadData_Init();
    lib2_gt_Init02Players_Init();
    lib2_gt_Init03LoadingComplete_Init();
    lib2_gt_Init04Technology_Init();
    lib2_gt_Init05Units_Init();
    lib2_gt_Init06MusicSound_Init();
    lib2_gt_Init07Environment_Init();
    lib2_gt_Init08Difficulties_Init();
    lib2_gt_PartCounterRoundup_Init();
    lib2_gt_PartCounterDisplay_Init();
    lib2_gt_OpenPens_Init();
    lib2_gt_MakePartsNeutral_Init();
    lib2_gt__1Part_Init();
    lib2_gt__3Parts_Init();
    lib2_gt__5Parts_Init();
    lib2_gt_PartsComplete_Init();
    lib2_gt_ShowandUpdatePartRegionMarkers_Init();
    lib2_gt_HidePartsRegionPings_Init();
    lib2_gt_ShowPartsRegionPings_Init();
    lib2_gt_DestroySmallBuildingObjectiveMarkers_Init();
    lib2_gt_NextBossRevealPing_Init();
    lib2_gt_InitializeBossTimer_Init();
    lib2_gt_PauseBossTimer_Init();
    lib2_gt_UnpauseBossTimer_Init();
    lib2_gt_AddtoBossTimer_Init();
    lib2_gt_BossEngageTimerStart_Init();
    lib2_gt_BossEngageTimerEnd_Init();
    lib2_gt_InitializeTrainPath_Init();
    lib2_gt_InitializeTrainandEscort_Init();
    lib2_gt_TrainEscorts1weakescorts_Init();
    lib2_gt_TrainEscorts2moderateescorts_Init();
    lib2_gt_TrainEscorts3heavyescorts_Init();
    lib2_gt_SpawnTrains_Init();
    lib2_gt_SpawnEscorts_Init();
    lib2_gt_TrainMovement_Init();
    lib2_gt_TrainDeathQ_Init();
    lib2_gt_TrainDespawn_Init();
    lib2_gt_EscortEndPointWait_Init();
    lib2_gt_EscortDespawn_Init();
    lib2_gt_TrainCarDamageAnimationController_Init();
    lib2_gt_TrainCarPingController_Init();
    lib2_gt_StartTrainSpawnTimer_Init();
    lib2_gt_TrainSpawnEvent_Init();
    lib2_gt_RevealTrainPath_Init();
    lib2_gt_ArchangelBeacon1_Init();
    lib2_gt_ArchangelBeacon2_Init();
    lib2_gt_ArchangelBeacon3_Init();
    lib2_gt_TakeoffDummyHeight_Init();
    lib2_gt_LandingDummyHeight_Init();
    lib2_gt_ArchangelReturntoRepair_Init();
    lib2_gt_ArchangelLanding_Init();
    lib2_gt_ArchangelLaunchSequence_Init();
    lib2_gt_ArchangelDestinationPing_Init();
    lib2_gt_ArchangelSiegePingTrail_Init();
    lib2_gt_InitializeGates_Init();
    lib2_gt_StartGameQ_Init();
    lib2_gt_DebrisMeteorFX_Init();
    lib2_gt_ResetArchangel_Init();
    lib2_gt_BossDeath1_Init();
    lib2_gt_BossDeath2_Init();
    lib2_gt_BossDeath3_Init();
    lib2_gt_CM_VOEnemyCloakedSpotted_Init();
    lib2_gt_EnemyAttackingQ_Init();
    lib2_gt_VOUpdateArchangelParts_Init();
    lib2_gt_VOQArchangelCombatDeath_Init();
    lib2_gt_VOQTimerHalfway_Init();
    lib2_gt_VOQTimer34ths_Init();
    lib2_gt_VOQArchangelRepaired_Init();
    lib2_gt_VOQArchangelBreaching_Init();
    lib2_gt_VOQArchangelLaunching_Init();
    lib2_gt_VOQDefeatRouted_Init();
    lib2_gt_VOQDefeatTimer_Init();
    lib2_gt_VOQVictory_Init();
    lib2_gt_VOQProximityWarning_Init();
    lib2_gt_VOQObjectiveUpdated_Init();
    lib2_gt_VOResetBlockingFlags_Init();
    lib2_gt_DefeatPrimaryObjectiveFailed_Init();
    lib2_gt_VictoryPrimaryObjectiveComplete_Init();
    lib2_gt_VictorySequence_Init();
    lib2_gt_VictoryFanfareQ_Init();
    lib2_gt_Victory_Init();
    lib2_gt_Defeat_Init();
    lib2_gt_StartAI_Init();
    lib2_gt_SetupAttackWaveSpawn_Init();
    lib2_gt_AIAttackWaves_Init();
    lib2_gt_AttackWave01_Init();
    lib2_gt_AttackWave02_Init();
    lib2_gt_AttackWave03_Init();
    lib2_gt_AttackWave04_Init();
    lib2_gt_AttackWave05_Init();
    lib2_gt_AttackWave06_Init();
    lib2_gt_AttackWave07_Init();
    lib2_gt_AttackWave08_Init();
    lib2_gt_ObjectiveGatherArchangelPartsReset_Init();
    lib2_gt_ObjectiveGatherArchangelPartsCreate_Init();
    lib2_gt_ObjectiveGatherArchangelPartsUpdate_Init();
    lib2_gt_ObjectiveGatherArchangelPartsComplete_Init();
    lib2_gt_ObjectiveDestroyBossesCreate_Init();
    lib2_gt_ObjectiveDestroyBossesUpdate_Init();
    lib2_gt_ObjectiveDestroyBossesComplete_Init();
    lib2_gt_ObjectiveDestroyBossesFailed_Init();
    lib2_gt_ObjectivePreventBossAwakenHide_Init();
    lib2_gt_ObjectivePreventBossAwakenShow_Init();
    lib2_gt_ObjectivePreventBossAwakenCreate_Init();
    lib2_gt_ObjectivePreventBossAwakenUpdate_Init();
    lib2_gt_ObjectivePreventBossAwakenFailed_Init();
    lib2_gt_ObjectivePreventBossAwakenComplete_Init();
    lib2_gt_ObjectiveFollowArchangelCreate_Init();
    lib2_gt_ObjectiveFollowArchangelComplete_Init();
    lib2_gt_ObjectiveFollowArchangelShow_Init();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_InitLib_completed = false;
void lib2_InitLib () {
    if (lib2_InitLib_completed) {
        return;
    }
    lib2_InitLib_completed = true;
    lib2_InitLibraries();
    lib2_InitVariables();
    lib2_InitTriggers();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
    lib1_InitLib();
    lib2_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitCustomAI();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
