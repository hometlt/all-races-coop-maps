//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Essence-o-Mania
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
//
// Generated Map Script
//
// Name:   RTC 2017: Essence-o-Mania
//
//===========de=======================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 3;
const int gv_pLAYER_04_ENEMY = 4;
const int gv_pLAYER_05_DEHAKA = 5;
const int gv_pLAYER_06_PRIMALS = 6;
const int gv_pLAYER_07_PACKS = 7;
const fixed gv_obj_EXECUTION_DURATION = 300.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_ExCoopScoreScreen {
    int lv_button_Leave;
    int lv_image_Commander;
    int lv_image_StatsHeader;
    int lv_label_CommonGameResult;
    int lv_label_CommonMapName;
    int lv_label_StatCommander1;
    int lv_label_StatCommander2;
    int lv_label_StatNameBreakdown;
    int lv_label_StatPlayer1;
    int lv_label_StatPlayer2;
    int lv_label_ScoreName01;
    int lv_label_ScoreName02;
    int lv_label_ScoreName03;
    int lv_label_ScoreName04;
    int lv_label_ScoreName05;
    int lv_label_ScoreName06;
    int lv_label_ScoreName07;
    int lv_label_ScoreName08;
    int lv_label_ScoreName09;
    int lv_label_ScoreName10;
    int lv_label_ScoreName11;
    int lv_label_ScoreName12;
    int lv_label_ScoreName13;
    int[3] lv_label_ScoreValue01;
    int[3] lv_label_ScoreValue02;
    int[3] lv_label_ScoreValue03;
    int[3] lv_label_ScoreValue04;
    int[3] lv_label_ScoreValue05;
    int[3] lv_label_ScoreValue06;
    int[3] lv_label_ScoreValue07;
    int[3] lv_label_ScoreValue08;
    int[3] lv_label_ScoreValue09;
    int[3] lv_label_ScoreValue10;
    int[3] lv_label_ScoreValue11;
    int[3] lv_label_ScoreValue12;
    int[3] lv_label_ScoreValue13;
};
//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_CampaignTransmissionPortraitOptioins_LeavePortraitVisibleAfter = 0;
const int ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter = 1;
const int ge_CampaignTransmissionPortraitOptioins_DontShowPortrait = 2;
const int ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior = 0;
const int ge_CampaignTransmissionCueSoundOptions_PlayCueSound = 1;
const int ge_CampaignTransmissionCueSoundOptions_DontPlayCueSound = 2;
const int ge_CampaignTransmissionOptions_ChatBubble = 0;
const int ge_ExTransmissionPortraitOptioins_LeavePortraitVisibleAfter = 0;
const int ge_ExTransmissionPortraitOptioins_HidePortraitAfter = 1;
const int ge_ExTransmissionPortraitOptioins_DontShowPortrait = 2;
const int ge_ExTransmissionCueSoundOptions_DefaultCueSoundBehavior = 0;
const int ge_ExTransmissionCueSoundOptions_PlayCueSound = 1;
const int ge_ExTransmissionCueSoundOptions_DontPlayCueSound = 2;
const int ge_CoopDrainRitualTarget_PA_Zorgg = 0;
const int ge_CoopDrainRitualTarget_PA_Gorrox = 1;
const int ge_CoopDrainRitualTarget_PA_RazSha = 2;
const int ge_CoopDrainRitualTarget_PA_Naraxus = 3;
const int ge_CoopDrainRitualTarget_PA_Varookh = 4;
const int ge_CoopAnomalyAlignment_AA_Positive = 0;
const int ge_CoopAnomalyAlignment_AA_Negative = 1;
const int ge_ExCoopScoreScreenResult_Victory = 0;
const int ge_ExCoopScoreScreenResult_Defeat = 1;
const int ge_CoopAIAttackWaveHybridTier_HybridTierNormal = 0;
const int ge_CoopAIAttackWaveHybridTier_HybridTierMedium = 1;
const int ge_CoopAIAttackWaveHybridTier_HybridTierWide = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_cOOP_DIFFICULTY;
bool gv_cOOP_TEST_MODE;
int gv_zS_SendTransmissionCampaignIndex;
int gv_zS_SendTransmissionCampaignPortrait;
unit gv_zS_SendTransmissionCampaignSpeaker;
trigger gv_zS_SendTransmissionCampaignTrigger;
int gv_zS_SendTransmissionCampaignPlayingTick;
bool gv_zS_SendTransmissionCampaignChatBubbleOn;
int gv_cM_SendTransmissionCampaignIndex;
int gv_cM_SendTransmissionCampaignPortrait;
unit gv_cM_SendTransmissionCampaignSpeaker;
trigger gv_cM_SendTransmissionCampaignTrigger;
int gv_cM_SendTransmissionCampaignPlayingTick;
bool gv_cM_SendTransmissionCampaignChatBubbleOn;
unit gv_dEHAKA_UNIT;
int gv_dEHAKA_PING;
playergroup gv_eNEMY_PLAYERS;
int gv_eNEMY_DROP_PLAYER;
int gv_obj_INDEX;
bool gv_g_Dehaka_OnTheBase;
bool gv_g_Dehaka_BurrowChargeCast;
bool gv_g_Dehaka_BurrowChargeFast;
fixed gv_g_Dehaka_BurrowChargeAngle;
bool gv_g_Dehaka_PreparingForBattle;
unitgroup gv_g_Dehaka_QueueObjectGroup;
unit[5] gv_dR_uPA;
unit[5] gv_dR_uVD;
point[5] gv_dR_pPA;
point[5] gv_dR_pVD;
region[5] gv_dR_rPA;
int[5] gv_dR_Ping;
text[5] gv_dR_PingTooltip;
point[5] gv_dR_DehakaAssaultPoint;
timer[5] gv_dR_RunExecutionTimer;
unit[5] gv_dR_Essence;
bool[5] gv_dR_EssenceCollected;
bool[5] gv_dR_ExecutionRun;
bool[5] gv_dR_ExecutionCompleted;
int gv_dR_EssencesAmount;
bool gv_g_ExecutionStageNext;
fixed gv_g_ExecutionStageReduction;
unit gv_g_ExecutionStageTarget;
timer gv_g_ExecutionStageTimer;
int gv_g_ExecutionStageWindow;
unit gv_g_PAUnitTransfer;
unitgroup gv_g_PAZorggPrimalZerglingsGroup;
int gv_g_PAGorroxCrashingChargeAmount;
bool gv_g_PAGorroxCrashingChargeInProgress;
bool gv_g_PAGorroxBarrageInProgress;
bool gv_g_PARazShaLavaInProgress;
bool gv_g_PARazShaFireBreathInProgress;
unitgroup gv_g_PARazShaAshWormGroup;
int gv_g_PANaraxusCreeperIndex;
unitgroup gv_g_PANaraxusCreeperGroup;
unitgroup gv_g_PANaraxusAmonForce;
unitgroup gv_g_PAVarookhTwilightEnergyGroup;
unitgroup gv_g_PAVarookhAmonForce;
unitgroup gv_g_AnomaliesGroup;
unitgroup gv_g_AnomaliesGroupInactive;
int[2] gv_g_AnomaliesAlignmentTries;
unitgroup gv_g_AnomaliesAmonForce;
int gv_g_AnomaliesMaxSpawnPoints;
int gv_g_OmoshPing;
unit gv_g_OmoshEssence;
unitgroup gv_g_OmoshAmonForce;
unit gv_oMOSH_UNIT;
unit gv_tFO_BOSS;
unit gv_tFO_DOME;
unit gv_tFO_DRAINING_WIND;
bool gv_g_TFORemoveFloatingCorruption;
unitgroup gv_g_TFOCorruptionPillars;
timer gv_g_TFODefeatTimer;
int gv_g_TFOPing;
bool gv_g_TFOShake;
bool gv_g_TFOSpawnPrimals;
bool gv_g_TFOTransitionPhase;
unitgroup gv_g_TFOAmonForce;
gs_ExCoopScoreScreen gv_scoreScreenContent;
int gv_g_ScoreScreenDialog;
int[3] gv_g_ScoreValue_DamageDealtToZorgg;
int[3] gv_g_ScoreValue_DamageDealtToGorrox;
int[3] gv_g_ScoreValue_DamageDealtToRazSha;
int[3] gv_g_ScoreValue_DamageDealtToNaraxus;
int[3] gv_g_ScoreValue_DamageDealtToVarookh;
int[3] gv_g_ScoreValue_DamageDealtToOmosh;
int[3] gv_g_ScoreValue_DamageDealtToTFO;
int[3] gv_g_ScoreValue_AnomaliesDepleted;
int[3] gv_g_ScoreValue_ComArtanisDamageAbsorbed;
int[3] gv_g_ScoreValue_ComArtanisDamageDealt;
int[3] gv_g_ScoreValue_ComRaynorMedicHeal;
int[3] gv_g_ScoreValue_ComRaynorDamageDealt;
int[3] gv_g_ScoreValue_ComKerriganDamageDealt;
point gv_g_DefeatUICameraPan;
text gv_g_DefeatUIMessage;
string gv_g_DefeatTransmission;
point gv_g_VictoryUICameraPan;
point gv_victoryCompletePan;
point gv_coopAI_ExpansionAP;
point gv_coopAI_ExpansionAPNext;
point gv_coopAI_SpawnPoint;
point gv_coopAI_TargetPoint;
fixed gv_coopAI_MinuteDuration;
region[3][6] gv_coopAI_AttackSpawn;
unitgroup gv_coopAI_ActiveCoopAttackForce;
int gv_coopAI_AttackWaveRepeatCounter;
int gv_objective_Primary01;
int gv_objective_Primary01_EssencesCollected;
int gv_objective_Primary02;
int gv_objective_Primary02_EssencesDrained;
int gv_objective_Primary03;
int gv_objective_Primary04;
int gv_objective_Primary05;
int gv_objective_Optional;
int gv_objective_Optional_AnomaliesDeactivated;
void InitGlobals () {
    int init_i;
    int init_i1;
    gv_cOOP_DIFFICULTY = 2;
    gv_zS_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    gv_zS_SendTransmissionCampaignPlayingTick = 3;
    gv_zS_SendTransmissionCampaignChatBubbleOn = true;
    gv_cM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    gv_cM_SendTransmissionCampaignPlayingTick = 3;
    gv_cM_SendTransmissionCampaignChatBubbleOn = true;
    gv_dEHAKA_UNIT = UnitFromId(1065609297);
    gv_dEHAKA_PING = c_invalidPingId;
    gv_eNEMY_PLAYERS = PlayerGroupEmpty();
    gv_eNEMY_DROP_PLAYER = RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY);
    gv_g_Dehaka_BurrowChargeAngle = 45.0;
    gv_g_Dehaka_QueueObjectGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_dR_Ping[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_dR_RunExecutionTimer[init_i] = TimerCreate();
    }
    gv_g_ExecutionStageTimer = TimerCreate();
    gv_g_ExecutionStageWindow = c_timerWindowNone;
    gv_g_PAZorggPrimalZerglingsGroup = UnitGroupEmpty();
    gv_g_PARazShaAshWormGroup = UnitGroupEmpty();
    gv_g_PANaraxusCreeperGroup = UnitGroupEmpty();
    gv_g_PANaraxusAmonForce = UnitGroupEmpty();
    gv_g_PAVarookhTwilightEnergyGroup = UnitGroupEmpty();
    gv_g_PAVarookhAmonForce = UnitGroupEmpty();
    gv_g_AnomaliesGroup = UnitGroupEmpty();
    gv_g_AnomaliesGroupInactive = UnitGroupEmpty();
    gv_g_AnomaliesAmonForce = UnitGroupEmpty();
    gv_g_AnomaliesMaxSpawnPoints = 15;
    gv_g_OmoshPing = c_invalidPingId;
    gv_g_OmoshAmonForce = UnitGroupEmpty();
    gv_oMOSH_UNIT = UnitFromId(1653574577);
    gv_tFO_BOSS = UnitFromId(897503434);
    gv_tFO_DOME = UnitFromId(1697657365);
    gv_g_TFOCorruptionPillars = UnitGroupEmpty();
    gv_g_TFODefeatTimer = TimerCreate();
    gv_g_TFOPing = c_invalidPingId;
    gv_g_TFOAmonForce = UnitGroupEmpty();
    gv_scoreScreenContent.lv_button_Leave = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_image_Commander = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_image_StatsHeader = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_CommonGameResult = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_CommonMapName = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_StatCommander1 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_StatCommander2 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_StatNameBreakdown = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_StatPlayer1 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_StatPlayer2 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName01 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName02 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName03 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName04 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName05 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName06 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName07 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName08 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName09 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName10 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName11 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName12 = c_invalidDialogControlId;
    gv_scoreScreenContent.lv_label_ScoreName13 = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue01[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue02[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue03[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue04[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue05[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue06[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue07[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue08[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue09[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue10[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue11[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue12[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_scoreScreenContent.lv_label_ScoreValue13[init_i1] = c_invalidDialogControlId;
    }
    gv_g_ScoreScreenDialog = c_invalidDialogId;
    gv_g_VictoryUICameraPan = PointFromId(1745232074);
    gv_coopAI_TargetPoint = PointFromId(1329582864);
    gv_coopAI_MinuteDuration = 60.0;
    gv_coopAI_ActiveCoopAttackForce = UnitGroupEmpty();
    gv_objective_Primary01 = c_invalidObjectiveId;
    gv_objective_Primary02 = c_invalidObjectiveId;
    gv_objective_Primary03 = c_invalidObjectiveId;
    gv_objective_Primary04 = c_invalidObjectiveId;
    gv_objective_Primary05 = c_invalidObjectiveId;
    gv_objective_Optional = c_invalidObjectiveId;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_DisplayCampaignMessage (text lp_message);
void gf_ExSetCoopDifficultyLevel (int lp_difficultyLevel);
int gf_ExGetCoopDifficultyLevel ();
int gf_ExGetCoopDifficultyValueInteger (int lp_casual, int lp_normal, int lp_hard, int lp_brutal);
text gf_ExGetCoopDifficultyValueText (text lp_casual, text lp_normal, text lp_hard, text lp_brutal);
fixed gf_ExGetCoopDifficultyValueReal (fixed lp_casual, fixed lp_normal, fixed lp_hard, fixed lp_brutal);
int gf_ExGetCoopDifficultyHybridTier (int lp_normal, int lp_hard, int lp_brutal);
void gf_ExCreateminimappingattachedonunit (unit lp_pingUnit, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration, bool lp_pingVisibility);
void gf_ExCreateminimappingattachedatpoint (point lp_pingPoint, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration);
int gf_ExSetminimappingattachedonunit (unit lp_pingUnit, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration, bool lp_pingVisibility);
int gf_ExSetminimappingattachedatpoint (point lp_pingPoint, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration);
void gf_ExRotateObjectivePings ();
void gf_ExCoopTestMode (bool lp_flag);
bool gf_ExCoopIsOnTestMode ();
void gf_ZS_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor);
void gf_ZS_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex);
void gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor);
void gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex);
void gf_ExSendTransmissionFromDehaka (string lp_message, bool lp_waitUntilDone);
bool gf_ExDehakaIsOnAttack ();
bool gf_ExDehakaIsOnBurrowCharge ();
bool gf_ExDehakaFreeToTalkOnTheBase ();
bool gf_ExDehakaIsOnTheBase ();
bool gf_ExDehakaFreeToTalk ();
void gf_ExDehakaOrderBurrowCharge (point lp_targetPoint, bool lp_fastBurrow);
void gf_ExDehakaSetBriefingState (bool lp_briefingState);
void gf_ExDehakaOrderAttack (unit lp_targetUnit);
void gf_ExDehakaAddTargetIntoQueue (unit lp_qTarget);
void gf_ExDehakaEssenceFT (text lp_essenceName);
void gf_ExSetDrainRitualIDForUnit (unit lp_darkRitualUnit, int lp_darkRitualID);
int gf_ExGetDrainRitualIDFromUnit (unit lp_drainRitualUnit);
int gf_ExGetDrainRitualIDFromTimer (timer lp_drainRitualTimer);
void gf_ExDrainRitualFlashPing (int lp_objectiveIndex, color lp_pingColor, text lp_pingTooltip);
string gf_ExGetEssenceBonusToDehaka (int lp_objectiveIndex);
string gf_ExGetEssenceBonusToAmon (int lp_objectiveIndex);
void gf_ExStartDrainRitual (int lp_objectiveIndex);
void gf_ExStartExecutionRitual (int lp_objectiveIndex);
void gf_ExPAAshWormRetreat (unit lp_ashWorm);
void gf_ExAIDropAmonForcesNearAnomaly (point lp_dropPoint);
void gf_ExOmoshActivationCheck ();
void gf_ExOmoshMinimapPath (point lp_targetPoint);
void gf_ExOmoshMoveToPoint (bool lp_firstAppearance);
void gf_ExTFOGrantProtection (unit lp_voidDevourer);
void gf_ExTFOCorruptionPillarCreateMarker ();
void gf_ExCoopScoreScreenInitialize ();
void gf_ExCoopScoreScreenDisplay (int lp_gameResult);
void gf_ExAIShowDropPing (point lp_dropPoint);
void gf_ExAISendDrop (unitgroup lp_dropGroup, point lp_dropPoint, bool lp_pingNotification);
void gf_ExAIRunAttackWaveAtTime (trigger lp_attackWave, fixed lp_time);
fixed gf_ExAIGetVarianceNext (fixed lp_varianceTotal);
point gf_ExAIGetSpawnPoint ();
point gf_ExAIGetExpansionPoint ();
void gf_ExAISetAttackWave (fixed lp_time, trigger lp_aIAttackWave);
void gf_ExAIAddHybridTierToAttackWave (int lp_hybridTier, int lp_amount, point lp_dropPoint);
void gf_ExAIProtossFakeWarpIn (unit lp_protossUnit);
void gf_ExAIDispatchTrashForce (unitgroup lp_trashForce);
void gf_ExAIRegAttackWave (unitgroup lp_coopAttackForce);
bool gf_ExAINoActiveAttackWaves ();
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ZS_SendTransmissionCampaignTick;
trigger gt_ExSendTransmissionCoopTick;
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_InitMutators;
trigger gt_StartGameQ;
trigger gt_TipReadyQ;
trigger gt_SetSLAlert;
trigger gt_DehakaFirstAppearance;
trigger gt_DehakaMend;
trigger gt_DehakaGenerateSpawns;
trigger gt_DehakaSpawnsGuard;
trigger gt_DehakaBurrowCharge;
trigger gt_DehakaGoesHome;
trigger gt_DehakaDies;
trigger gt_TrDehakaAboutAvatarsQ;
trigger gt_TrDehakaExecutionQ;
trigger gt_TrDehakaZorggHitQ;
trigger gt_TrDehakaGorroxHitQ;
trigger gt_TrDehakaRazShaLavaQ;
trigger gt_TrDehakaNaraxusHitQ;
trigger gt_TrDehakaVarookhHitQ;
trigger gt_TrDehakaOmoshHitQ;
trigger gt_TrDehakaAmonsDropPAQ;
trigger gt_TrDehakaAmonsDropBonusQ;
trigger gt_TrDehakaBonusProgressQ;
trigger gt_TrDehakaLowLifeQ;
trigger gt_TrDehakaStrangeRitualQ;
trigger gt_TrDehakaDrainingWindQ;
trigger gt_ExecutionStageTimerCreate;
trigger gt_ExecutionStageTimerRun;
trigger gt_ExecutionStageTimerDestroy;
trigger gt_DrainRitualsInit;
trigger gt_ObjectUnitDies;
trigger gt_DPrimalAvatar;
trigger gt_DVoidDevourer;
trigger gt_DrainRitualMissedQ;
trigger gt_AddObjectIntoQueue;
trigger gt_SetQTEssenceQ;
trigger gt_QTEFeastRitualStart;
trigger gt_QTEFeastRitualEnd;
trigger gt_SetQTPrimalAvatarQ;
trigger gt_RunExecutionStage;
trigger gt_ShowExecutionTip;
trigger gt_DestructableArch1;
trigger gt_DestructableArch2;
trigger gt_DestructableArch3;
trigger gt_DestructableArch4;
trigger gt_PABossBar;
trigger gt_PAGetBack;
trigger gt_PARandomAttack;
trigger gt_PAHint;
trigger gt_PAZorggQuake;
trigger gt_PAZorggQuakeIndicator;
trigger gt_PAZorggPrimalFrenzy;
trigger gt_PAZorggMyPackA;
trigger gt_PAZorggMyPackB;
trigger gt_PAZorggDies;
trigger gt_PAGorroxCrashingCharge;
trigger gt_PAGorroxCrashingChargeIndicator;
trigger gt_PAGorroxArmorOverload;
trigger gt_PAGorroxBarrage;
trigger gt_PAGorroxRockPower;
trigger gt_PAGorroxDies;
trigger gt_PARazShaAshWormsSpawn;
trigger gt_PARazShaAshWormsRetreat;
trigger gt_PARazShaCataclysm;
trigger gt_PARazShaCataclysmLava;
trigger gt_PARazShaCataclysmDehaka;
trigger gt_PARazShaFireBreath;
trigger gt_PARazShaLivingFlame;
trigger gt_PARazShaDies;
trigger gt_PANaraxusAcidVormit;
trigger gt_PANaraxusCreepersStart;
trigger gt_PANaraxusCreepersInit;
trigger gt_PANaraxusCreepersSpawn;
trigger gt_PANaraxusCreepersMove;
trigger gt_PANaraxusMultipleAttack;
trigger gt_PANaraxusAmonsDrop;
trigger gt_PANaraxusDies;
trigger gt_PAVarookhMindExplosion;
trigger gt_PAVarookhTwilightStrike;
trigger gt_PAVarookhTwilightEnergySpawn;
trigger gt_PAVarookhAmonsDrop;
trigger gt_PAVarookhDies;
trigger gt_AnomaliesEventInitQ;
trigger gt_BAnomaliesHint;
trigger gt_BSpawnAnomalies;
trigger gt_BMarkAnomalies;
trigger gt_BAnomalyInterraction;
trigger gt_BAnomalyCounter;
trigger gt_BCallAmonForces;
trigger gt_BWorkersBuff;
trigger gt_AnomaliesEventStop;
trigger gt_OmoshEventInit;
trigger gt_OmoshEventStartQ;
trigger gt_OmoshBlinksAround;
trigger gt_OmoshCallsDehakaFightQ;
trigger gt_DehakaHuntingOmosh;
trigger gt_OmoshGetBack;
trigger gt_OmoshRandomAttack;
trigger gt_OmoshTornado;
trigger gt_OmoshParasiticBomb;
trigger gt_OmoshAmonsDrop;
trigger gt_OmoshAmonsDropQ;
trigger gt_OmoshDiesQ;
trigger gt_OmoshEssence;
trigger gt_OmoshEventEnd;
trigger gt_TFOFloatingCorruption;
trigger gt_TFOEventInitQ;
trigger gt_TFOGrantProtectionRitual;
trigger gt_TFOUpdateTimer;
trigger gt_TFOHalfTimeExpiredQ;
trigger gt_TFODehakaStartAssault;
trigger gt_TFOCorruptionPillarsMarkerNormal;
trigger gt_TFOCorruptionPillarsMarkerNerfed;
trigger gt_TFOCorruptionPillarSpawn;
trigger gt_TFOCorruptionPillarTip;
trigger gt_TFODehakaAttackPillars;
trigger gt_TFODrainingWindSpawn;
trigger gt_TFODrainingWindClear;
trigger gt_TFOPeriodicShake;
trigger gt_TFOProtectionFallsQ;
trigger gt_TFOSpawnPrimals;
trigger gt_TFOSpawnPrimalsBonus;
trigger gt_TFOVoidStrike;
trigger gt_TFOTransitionPhase;
trigger gt_TFOLightningBreathQ;
trigger gt_TFOLightningBreathShake;
trigger gt_TFOAmonsDrop;
trigger gt_TFOHealLifeBonus;
trigger gt_TFOLastBossDies;
trigger gt_TrEnemyAttackingQ;
trigger gt_TrHybridDetectedQ;
trigger gt_MHeroesFromTheStorm;
trigger gt_ScoreDamageDone;
trigger gt_ScoreCArtanisAbsorb;
trigger gt_ScoreCArtanisSOADamage;
trigger gt_ScoreCRaynorMedicHeal;
trigger gt_ScoreCRaynorHyperionDamage;
trigger gt_ScoreCKerriganResources;
trigger gt_ScoreCKerriganDamage;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_DefeatFinalQuake;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_StartAI;
trigger gt_AIRemoveTransports;
trigger gt_AISetResources;
trigger gt_AttackWaveSpawn;
trigger gt_AttackWavesList;
trigger gt_AttackWave01aHARD;
trigger gt_AttackWave01bHARD;
trigger gt_AttackWave01cNORMAL;
trigger gt_AttackWave02;
trigger gt_AttackWave03EXP;
trigger gt_AttackWave04aH;
trigger gt_AttackWave04b;
trigger gt_AttackWave05EXP;
trigger gt_AttackWave06aH;
trigger gt_AttackWave06b;
trigger gt_AttackWave07EXPH;
trigger gt_CreatePrimaryObjectivesP1;
trigger gt_CreatePrimaryObjectivesP2;
trigger gt_CreateOptionalObjective;
trigger gt_ObjectivePrimary01Create;
trigger gt_ObjectivePrimary01Update;
trigger gt_ObjectivePrimary01Complete;
trigger gt_ObjectivePrimary01Failed;
trigger gt_ObjectivePrimary02Create;
trigger gt_ObjectivePrimary02Update;
trigger gt_ObjectivePrimary02Complete;
trigger gt_ObjectivePrimary02Failed;
trigger gt_ObjectivePrimary03Create;
trigger gt_ObjectivePrimary03Update;
trigger gt_ObjectivePrimary03Complete;
trigger gt_ObjectivePrimary03Failed;
trigger gt_ObjectivePrimary04Create;
trigger gt_ObjectivePrimary04Update;
trigger gt_ObjectivePrimary04Complete;
trigger gt_ObjectivePrimary04Failed;
trigger gt_ObjectivePrimary05Create;
trigger gt_ObjectivePrimary05Complete;
trigger gt_ObjectiveOptionalCreate;
trigger gt_ObjectiveOptionalUpdate;
trigger gt_ObjectiveOptionalComplete;
//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_DisplayCampaignMessage (text lp_message) {
    // Implementation
    TextExpressionSetToken("Param/Expression/ED489DEC", "A", lp_message);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/ED489DEC"));
    SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
}
void gf_ExSetCoopDifficultyLevel (int lp_difficultyLevel) {
    // Implementation
    PlayerSetDifficulty(gv_pLAYER_03_ENEMY, lp_difficultyLevel);
    PlayerSetDifficulty(gv_pLAYER_04_ENEMY, lp_difficultyLevel);
    gv_cOOP_DIFFICULTY = lp_difficultyLevel;
}
int gf_ExGetCoopDifficultyLevel () {
    // Implementation
    return gv_cOOP_DIFFICULTY;
}
int gf_ExGetCoopDifficultyValueInteger (int lp_casual, int lp_normal, int lp_hard, int lp_brutal) {
    int auto1258611E_val;
    // Implementation
    auto1258611E_val = gv_cOOP_DIFFICULTY;
    if (auto1258611E_val == 1) {
        return lp_casual;
    }
    else if (auto1258611E_val == 2) {
        return lp_normal;
    }
    else if (auto1258611E_val == 3) {
        return lp_hard;
    }
    else if (auto1258611E_val == 4) {
        return lp_brutal;
    }
    else {
    }
    return lp_normal;
}
text gf_ExGetCoopDifficultyValueText (text lp_casual, text lp_normal, text lp_hard, text lp_brutal) {
    int auto6C36B54A_val;
    // Implementation
    auto6C36B54A_val = gv_cOOP_DIFFICULTY;
    if (auto6C36B54A_val == 1) {
        return lp_casual;
    }
    else if (auto6C36B54A_val == 2) {
        return lp_normal;
    }
    else if (auto6C36B54A_val == 3) {
        return lp_hard;
    }
    else if (auto6C36B54A_val == 4) {
        return lp_brutal;
    }
    else {
    }
    return lp_normal;
}
fixed gf_ExGetCoopDifficultyValueReal (fixed lp_casual, fixed lp_normal, fixed lp_hard, fixed lp_brutal) {
    int auto8DA04D20_val;
    // Implementation
    auto8DA04D20_val = gv_cOOP_DIFFICULTY;
    if (auto8DA04D20_val == 1) {
        return lp_casual;
    }
    else if (auto8DA04D20_val == 2) {
        return lp_normal;
    }
    else if (auto8DA04D20_val == 3) {
        return lp_hard;
    }
    else if (auto8DA04D20_val == 4) {
        return lp_brutal;
    }
    else {
    }
    return lp_normal;
}
int gf_ExGetCoopDifficultyHybridTier (int lp_normal, int lp_hard, int lp_brutal) {
    int auto7C116454_val;
    // Implementation
    auto7C116454_val = gv_cOOP_DIFFICULTY;
    if (auto7C116454_val == 2) {
        return lp_normal;
    }
    else if (auto7C116454_val == 3) {
        return lp_hard;
    }
    else if (auto7C116454_val == 4) {
        return lp_brutal;
    }
    else {
    }
    return lp_normal;
}
trigger auto_gf_ExCreateminimappingattachedonunit_Trigger = null;
unit auto_gf_ExCreateminimappingattachedonunit_lp_pingUnit;
string auto_gf_ExCreateminimappingattachedonunit_lp_pingModel;
text auto_gf_ExCreateminimappingattachedonunit_lp_pingTooltip;
color auto_gf_ExCreateminimappingattachedonunit_lp_pingColor;
fixed auto_gf_ExCreateminimappingattachedonunit_lp_pingScale;
fixed auto_gf_ExCreateminimappingattachedonunit_lp_pingDuration;
bool auto_gf_ExCreateminimappingattachedonunit_lp_pingVisibility;
void gf_ExCreateminimappingattachedonunit (unit lp_pingUnit, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration, bool lp_pingVisibility) {
    auto_gf_ExCreateminimappingattachedonunit_lp_pingUnit = lp_pingUnit;
    auto_gf_ExCreateminimappingattachedonunit_lp_pingModel = lp_pingModel;
    auto_gf_ExCreateminimappingattachedonunit_lp_pingTooltip = lp_pingTooltip;
    auto_gf_ExCreateminimappingattachedonunit_lp_pingColor = lp_pingColor;
    auto_gf_ExCreateminimappingattachedonunit_lp_pingScale = lp_pingScale;
    auto_gf_ExCreateminimappingattachedonunit_lp_pingDuration = lp_pingDuration;
    auto_gf_ExCreateminimappingattachedonunit_lp_pingVisibility = lp_pingVisibility;
    if (auto_gf_ExCreateminimappingattachedonunit_Trigger == null) {
        auto_gf_ExCreateminimappingattachedonunit_Trigger = TriggerCreate("auto_gf_ExCreateminimappingattachedonunit_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExCreateminimappingattachedonunit_Trigger, false, false);
}
bool auto_gf_ExCreateminimappingattachedonunit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pingUnit = auto_gf_ExCreateminimappingattachedonunit_lp_pingUnit;
    string lp_pingModel = auto_gf_ExCreateminimappingattachedonunit_lp_pingModel;
    text lp_pingTooltip = auto_gf_ExCreateminimappingattachedonunit_lp_pingTooltip;
    color lp_pingColor = auto_gf_ExCreateminimappingattachedonunit_lp_pingColor;
    fixed lp_pingScale = auto_gf_ExCreateminimappingattachedonunit_lp_pingScale;
    fixed lp_pingDuration = auto_gf_ExCreateminimappingattachedonunit_lp_pingDuration;
    bool lp_pingVisibility = auto_gf_ExCreateminimappingattachedonunit_lp_pingVisibility;
    // Variable Declarations
    int lv_newPing;
    // Variable Initialization
    lv_newPing = c_invalidPingId;
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lp_pingModel, UnitGetPosition(lp_pingUnit), lp_pingColor, lp_pingDuration, 270.0);
    lv_newPing = PingLastCreated();
    PingSetUnit(lv_newPing, lp_pingUnit);
    PingSetTooltip(lv_newPing, lp_pingTooltip);
    PingSetUseUnitVisibility(lv_newPing, (lp_pingVisibility == false));
    PingSetScale(lv_newPing, lp_pingScale);
    return true;
}
void gf_ExCreateminimappingattachedatpoint (point lp_pingPoint, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration) {
    // Variable Declarations
    int lv_newPing;
    // Variable Initialization
    lv_newPing = c_invalidPingId;
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lp_pingModel, lp_pingPoint, lp_pingColor, lp_pingDuration, 270.0);
    lv_newPing = PingLastCreated();
    PingSetTooltip(lv_newPing, lp_pingTooltip);
    PingSetScale(lv_newPing, lp_pingScale);
}
int gf_ExSetminimappingattachedonunit (unit lp_pingUnit, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration, bool lp_pingVisibility) {
    // Variable Declarations
    int lv_newPing;
    // Variable Initialization
    lv_newPing = c_invalidPingId;
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lp_pingModel, UnitGetPosition(lp_pingUnit), lp_pingColor, lp_pingDuration, 270.0);
    lv_newPing = PingLastCreated();
    PingSetUnit(lv_newPing, lp_pingUnit);
    PingSetTooltip(lv_newPing, lp_pingTooltip);
    PingSetScale(lv_newPing, lp_pingScale);
    PingSetUseUnitVisibility(lv_newPing, (lp_pingVisibility == false));
    return lv_newPing;
}
int gf_ExSetminimappingattachedatpoint (point lp_pingPoint, string lp_pingModel, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale, fixed lp_pingDuration) {
    // Variable Declarations
    int lv_newPing;
    // Variable Initialization
    lv_newPing = c_invalidPingId;
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lp_pingModel, lp_pingPoint, lp_pingColor, lp_pingDuration, 270.0);
    lv_newPing = PingLastCreated();
    PingSetTooltip(lv_newPing, lp_pingTooltip);
    PingSetScale(lv_newPing, lp_pingScale);
    return lv_newPing;
}
trigger auto_gf_ExRotateObjectivePings_Trigger = null;
void gf_ExRotateObjectivePings () {
    if (auto_gf_ExRotateObjectivePings_Trigger == null) {
        auto_gf_ExRotateObjectivePings_Trigger = TriggerCreate("auto_gf_ExRotateObjectivePings_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExRotateObjectivePings_Trigger, false, false);
}
bool auto_gf_ExRotateObjectivePings_TriggerFunc (bool testConds, bool runActions) {
    int auto44FBBE7D_ae;
    int auto44FBBE7D_ai;
    // Variable Declarations
    fixed lv_angle;
    int lv_rotationIter;
    // Variable Initialization
    // Implementation
    auto44FBBE7D_ae = 20;
    auto44FBBE7D_ai = -1;
    lv_rotationIter = 40;
    for ( ; ( (auto44FBBE7D_ai >= 0 && lv_rotationIter <= auto44FBBE7D_ae) || (auto44FBBE7D_ai <= 0 && lv_rotationIter >= auto44FBBE7D_ae) ) ; lv_rotationIter += auto44FBBE7D_ai ) {
        lv_angle = (360 - (ModF(lv_rotationIter, 10.0) * 36));
        PingSetRotation(gv_dR_Ping[ge_CoopDrainRitualTarget_PA_Zorgg], lv_angle);
        PingSetRotation(gv_dR_Ping[ge_CoopDrainRitualTarget_PA_Gorrox], lv_angle);
        PingSetRotation(gv_dR_Ping[ge_CoopDrainRitualTarget_PA_RazSha], lv_angle);
        PingSetRotation(gv_dR_Ping[ge_CoopDrainRitualTarget_PA_Naraxus], lv_angle);
        PingSetRotation(gv_dR_Ping[ge_CoopDrainRitualTarget_PA_Varookh], lv_angle);
        Wait(0.1, c_timeReal);
    }
    return true;
}
trigger auto_gf_ExCoopTestMode_Trigger = null;
bool auto_gf_ExCoopTestMode_lp_flag;
void gf_ExCoopTestMode (bool lp_flag) {
    auto_gf_ExCoopTestMode_lp_flag = lp_flag;
    if (auto_gf_ExCoopTestMode_Trigger == null) {
        auto_gf_ExCoopTestMode_Trigger = TriggerCreate("auto_gf_ExCoopTestMode_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExCoopTestMode_Trigger, false, false);
}
bool auto_gf_ExCoopTestMode_TriggerFunc (bool testConds, bool runActions) {
    bool lp_flag = auto_gf_ExCoopTestMode_lp_flag;
    // Implementation
    gv_cOOP_TEST_MODE = lp_flag;
    if ((gv_cOOP_TEST_MODE == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/839A89EE"));
        AISetGroupScriptControlled(UnitGroup(null, gv_pLAYER_02_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false);
        PlayerSetDifficulty(gv_pLAYER_02_USER, 6);
        AIMeleeStart(gv_pLAYER_02_USER);
        Wait(3.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        GameSetSpeedValue(c_gameSpeedFaster);
        GameSetSpeedLocked(true);
    }
    return true;
}
bool gf_ExCoopIsOnTestMode () {
    // Implementation
    return gv_cOOP_TEST_MODE;
}
void gf_ZS_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;
    // Implementation
    if ((lp_sound == null)) {
        return ;
    }
    gv_zS_SendTransmissionCampaignIndex += 1;
    lv_localIndex = gv_zS_SendTransmissionCampaignIndex;
    lv_oldSpeaker = gv_zS_SendTransmissionCampaignSpeaker;
    gv_zS_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = gv_zS_SendTransmissionCampaignTrigger;
    gv_zS_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != ge_CampaignTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libCOMI_gf_PlayerInCinematicModeCampaign() == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == ge_CampaignTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == ge_CampaignTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libCOMI_gf_PlayerInCinematicModeCampaign() == false) && (lv_portrait != c_invalidPortraitId) && ((PortraitVisible(gv_zS_SendTransmissionCampaignPortrait, gv_pLAYER_01_USER) == false) || (PortraitVisible(gv_zS_SendTransmissionCampaignPortrait, gv_pLAYER_02_USER) == false))))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    gv_zS_SendTransmissionCampaignPortrait = lv_portrait;
    if ((gv_zS_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(gv_zS_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }
    gv_zS_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((UnitGetOwner(EventUnit()) == 1)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
                }
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
            lv_source = TransmissionSourceFromModel(lp_model);
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((gv_zS_SendTransmissionCampaignChatBubbleOn == true)) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }
        if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", UnitGetPosition(lp_unit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }
    }
    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        gf_ZS_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
    else {
        gf_ZS_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
}
trigger auto_gf_ZS_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon;
actor auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing;
int auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping;
int auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex;
void gf_ZS_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex) {
    auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing = lp_talkRing;
    auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;
    if (auto_gf_ZS_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_gf_ZS_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_gf_ZS_SendTransmissionCampaignCleanUp_TriggerFunc");
    }
    TriggerExecute(auto_gf_ZS_SendTransmissionCampaignCleanUp_Trigger, false, false);
}
bool auto_gf_ZS_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon;
    actor lp_talkRing = auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing;
    int lp_ping = auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex;
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }
    Wait(0.75, c_timeReal);
    if ((lp_localIndex != gv_zS_SendTransmissionCampaignIndex)) {
        if ((gv_zS_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }
        return true;
    }
    gv_zS_SendTransmissionCampaignIndex = 0;
    gv_zS_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(gt_ZS_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == ge_CampaignTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }
    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }
    if ((lp_talkRing != null)) {
        libNtve_gf_KillModel(lp_talkRing);
    }
    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }
    return true;
}
void gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;
    // Implementation
    if ((lp_sound == null)) {
        return ;
    }
    gv_cM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = gv_cM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = gv_cM_SendTransmissionCampaignSpeaker;
    gv_cM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = gv_cM_SendTransmissionCampaignTrigger;
    gv_cM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != ge_ExTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libCOMI_gf_PlayerInCinematicModeCampaign() == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == ge_ExTransmissionCueSoundOptions_PlayCueSound) || ((lv_portrait != c_invalidPortraitId) && (libCOMI_gf_PlayerInCinematicModeCampaign() == false) && (lp_cueSoundOption == ge_ExTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (PortraitVisible(gv_cM_SendTransmissionCampaignPortrait, gv_pLAYER_01_USER) == false) && (PortraitVisible(gv_cM_SendTransmissionCampaignPortrait, gv_pLAYER_02_USER) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    gv_cM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((gv_cM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(gv_cM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }
    gv_cM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((PlayerType(UnitGetOwner(lp_unit)) == c_playerTypeUser)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((gv_cM_SendTransmissionCampaignChatBubbleOn == true)) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }
        if (((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lp_unit, gv_pLAYER_02_USER) == true))) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }
    }
    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        gf_CM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
    else {
        gf_CM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
}
trigger auto_gf_CM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
int auto_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;
void gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex) {
    auto_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_gf_CM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;
    if (auto_gf_CM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_gf_CM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }
    TriggerExecute(auto_gf_CM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}
bool auto_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    int lp_ping = auto_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }
    Wait(0.75, c_timeReal);
    if ((lp_localIndex != gv_cM_SendTransmissionCampaignIndex)) {
        if ((gv_cM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == ge_ExTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }
        return true;
    }
    gv_cM_SendTransmissionCampaignIndex = 0;
    gv_cM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(gt_ExSendTransmissionCoopTick, true, false);
    if ((lp_keepPortraitVisible == ge_ExTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }
    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }
    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }
    return true;
}
void gf_ExSendTransmissionFromDehaka (string lp_message, bool lp_waitUntilDone) {
    // Implementation
    if ((UnitIsAlive(gv_dEHAKA_UNIT) == true)) {
        gf_CM_SendTransmissionCampaignInternal(true, gv_dEHAKA_UNIT, "DehakaPortrait", SoundLink("30SecondSilence", -1), StringExternal("Param/Value/952E0E89"), StringToText(lp_message), c_transmissionDurationSet, (3.0 + (0.0675 * IntToFixed(StringLength(lp_message)))), lp_waitUntilDone, ge_ExTransmissionPortraitOptioins_HidePortraitAfter, ge_ExTransmissionCueSoundOptions_DefaultCueSoundBehavior, "DehakaPortrait");
    }
}
bool gf_ExDehakaIsOnAttack () {
    // Implementation
    UnitGroupLoopBegin(UnitGroupFromId(3));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ExOrderAttackPA") == true)) {
            return true;
        }
    }
    UnitGroupLoopEnd();
    if (((UnitHasBehavior2(gv_oMOSH_UNIT, "ExOrderAttackPA") == true) || (UnitHasBehavior2(gv_tFO_BOSS, "ExOrderAttackPA") == true))) {
        return true;
    }
    return false;
}
bool gf_ExDehakaIsOnBurrowCharge () {
    // Implementation
    return gv_g_Dehaka_BurrowChargeCast;
}
bool gf_ExDehakaFreeToTalkOnTheBase () {
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false) && (gv_g_Dehaka_OnTheBase == true)) {
        return true;
    }
    return false;
}
bool gf_ExDehakaIsOnTheBase () {
    // Implementation
    return gv_g_Dehaka_OnTheBase;
}
bool gf_ExDehakaFreeToTalk () {
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false)) {
        return true;
    }
    return false;
}
trigger auto_gf_ExDehakaOrderBurrowCharge_Trigger = null;
point auto_gf_ExDehakaOrderBurrowCharge_lp_targetPoint;
bool auto_gf_ExDehakaOrderBurrowCharge_lp_fastBurrow;
void gf_ExDehakaOrderBurrowCharge (point lp_targetPoint, bool lp_fastBurrow) {
    auto_gf_ExDehakaOrderBurrowCharge_lp_targetPoint = lp_targetPoint;
    auto_gf_ExDehakaOrderBurrowCharge_lp_fastBurrow = lp_fastBurrow;
    if (auto_gf_ExDehakaOrderBurrowCharge_Trigger == null) {
        auto_gf_ExDehakaOrderBurrowCharge_Trigger = TriggerCreate("auto_gf_ExDehakaOrderBurrowCharge_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExDehakaOrderBurrowCharge_Trigger, false, false);
}
bool auto_gf_ExDehakaOrderBurrowCharge_TriggerFunc (bool testConds, bool runActions) {
    point lp_targetPoint = auto_gf_ExDehakaOrderBurrowCharge_lp_targetPoint;
    bool lp_fastBurrow = auto_gf_ExDehakaOrderBurrowCharge_lp_fastBurrow;
    point autoDE0A2FF4_val;
    // Variable Declarations
    point lv_tPoint;
    // Variable Initialization
    // Implementation
    if ((gv_g_Dehaka_OnTheBase == true) && (lp_targetPoint == PointFromId(114906119))) {
        return true;
    }
    autoDE0A2FF4_val = lp_targetPoint;
    if (autoDE0A2FF4_val == PointFromId(114906119)) {
        gv_g_Dehaka_BurrowChargeAngle = 45.0;
    }
    else if (autoDE0A2FF4_val == PointFromId(1370157264)) {
        gv_g_Dehaka_BurrowChargeAngle = 45.0;
    }
    else if (autoDE0A2FF4_val == PointFromId(478095773)) {
        gv_g_Dehaka_BurrowChargeAngle = 135.0;
    }
    else if (autoDE0A2FF4_val == PointFromId(1251360379)) {
        gv_g_Dehaka_BurrowChargeAngle = 315.0;
    }
    else if (autoDE0A2FF4_val == PointFromId(1491982523)) {
        gv_g_Dehaka_BurrowChargeAngle = 90.0;
    }
    else if (autoDE0A2FF4_val == PointFromId(1241616900)) {
        gv_g_Dehaka_BurrowChargeAngle = 45.0;
    }
    else if (autoDE0A2FF4_val == PointFromId(317722574)) {
        gv_g_Dehaka_BurrowChargeAngle = 45.0;
    }
    else if (autoDE0A2FF4_val == PointFromId(1271157716)) {
        gv_g_Dehaka_BurrowChargeAngle = 45.0;
    }
    else {
    }
    gv_g_Dehaka_OnTheBase = (lp_targetPoint == PointFromId(114906119));
    if ((gv_g_Dehaka_OnTheBase == true)) {
        UnitBehaviorAdd(gv_dEHAKA_UNIT, "ExOrderDehakaAtHome", gv_dEHAKA_UNIT, 1);
        // if ((GameAttributeGameValue("[bnet:local/0.0/357569]4") == "0001")) {
            libNtve_gf_SendActorMessageToUnit(gv_dEHAKA_UNIT, "HaloStop");
        // }
    }
    else {
        UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExOrderDehakaAtHome", c_unitBehaviorCountAll);
        // if ((GameAttributeGameValue("[bnet:local/0.0/357569]4") == "0001")) {
            libNtve_gf_SendActorMessageToUnit(gv_dEHAKA_UNIT, "HaloStart");
            libNtve_gf_SendActorMessageToUnit(gv_dEHAKA_UNIT, "HaloSetColor 31,1,201");
        // }
    }
    while ((gf_ExDehakaIsOnBurrowCharge() == false)) {
        gv_g_Dehaka_BurrowChargeFast = lp_fastBurrow;
        UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingPoint(AbilityCommand("ExBurrowCharge", 0), lp_targetPoint), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gf_ExDehakaSetBriefingState (bool lp_briefingState) {
    // Implementation
    if ((lp_briefingState == true)) {
        UnitBehaviorAdd(gv_dEHAKA_UNIT, "ExOrderBriefing", gv_dEHAKA_UNIT, 1);
    }
    else {
        UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExOrderBriefing", 1);
    }
}
void gf_ExDehakaOrderAttack (unit lp_targetUnit) {
    // Implementation
    if ((UnitGetType(lp_targetUnit) == "ExTFOCorruptionPillar")) {
        UnitBehaviorAdd(gv_dEHAKA_UNIT, "ExOrderAttackTFO", lp_targetUnit, 1);
    }
    else {
        if ((UnitGroupHasUnit(UnitGroupFromId(3), lp_targetUnit) == true)) {
            UnitBehaviorAdd(lp_targetUnit, "ExOrderAttackPA", gv_dEHAKA_UNIT, 1);
            libCOMI_gf_ShareVisionofUnitCoop(lp_targetUnit, true, gv_pLAYER_05_DEHAKA);
        }
        else {
            if ((lp_targetUnit == gv_tFO_BOSS)) {
                UnitBehaviorAdd(lp_targetUnit, "ExOrderAttackPA", gv_dEHAKA_UNIT, 1);
            }
        }
    }
}
void gf_ExDehakaAddTargetIntoQueue (unit lp_qTarget) {
    // Implementation
    UnitGroupAdd(gv_g_Dehaka_QueueObjectGroup, lp_qTarget);
    TriggerExecute(gt_AddObjectIntoQueue, true, false);
}
void gf_ExDehakaEssenceFT (text lp_essenceName) {
    // Variable Declarations
    int lv_floatingTextTag;
    // Variable Initialization
    lv_floatingTextTag = c_textTagNone;
    // Implementation
    TextTagCreate((StringExternal("Param/Value/B3CE3150") + lp_essenceName + StringExternal("Param/Value/20175176")), 1, UnitGetPosition(gv_dEHAKA_UNIT), 1.0, true, false, libCOMI_gf_HumanPlayers());
    lv_floatingTextTag = TextTagLastCreated();
    TextTagSetVelocity(lv_floatingTextTag, 1.0, 90.0);
    TextTagSetTime(lv_floatingTextTag, c_textTagTimeDuration, 3.0);
}
void gf_ExSetDrainRitualIDForUnit (unit lp_darkRitualUnit, int lp_darkRitualID) {
    // Implementation
    UnitSetCustomValue(lp_darkRitualUnit, 0, (IntToFixed(lp_darkRitualID) + 1.0));
}
int gf_ExGetDrainRitualIDFromUnit (unit lp_drainRitualUnit) {
    // Implementation
    return (FixedToInt(UnitGetCustomValue(lp_drainRitualUnit, 0)) - 1);
}
int gf_ExGetDrainRitualIDFromTimer (timer lp_drainRitualTimer) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    // Implementation
    while ((lv_index <= 4)) {
        if ((lp_drainRitualTimer == gv_dR_RunExecutionTimer[lv_index])) {
            break;
        }
        lv_index += 1;
    }
    return lv_index;
}
void gf_ExDrainRitualFlashPing (int lp_objectiveIndex, color lp_pingColor, text lp_pingTooltip) {
    // Implementation
    PingDestroy(gv_dR_Ping[lp_objectiveIndex]);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, gv_dR_pPA[lp_objectiveIndex], lp_pingTooltip);
    gv_dR_Ping[lp_objectiveIndex] = PingLastCreated();
    PingSetColor(gv_dR_Ping[lp_objectiveIndex], lp_pingColor);
}
string gf_ExGetEssenceBonusToDehaka (int lp_objectiveIndex) {
    int auto74D6E873_val;
    // Implementation
    auto74D6E873_val = lp_objectiveIndex;
    if (auto74D6E873_val == ge_CoopDrainRitualTarget_PA_Zorgg) {
        gf_ExDehakaEssenceFT(StringExternal("Param/Value/44866C2B"));
        return "ExEssenceOfStrength";
    }
    else if (auto74D6E873_val == ge_CoopDrainRitualTarget_PA_Gorrox) {
        gf_ExDehakaEssenceFT(StringExternal("Param/Value/7DFC509B"));
        return "ExEssenceOfVitality";
    }
    else if (auto74D6E873_val == ge_CoopDrainRitualTarget_PA_RazSha) {
        gf_ExDehakaEssenceFT(StringExternal("Param/Value/DA07D8C4"));
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_DEHAKA, "ExDehakaChampionOverRazSha", 1);
        return "ExEssenceOfMastery";
    }
    else if (auto74D6E873_val == ge_CoopDrainRitualTarget_PA_Naraxus) {
        gf_ExDehakaEssenceFT(StringExternal("Param/Value/82AB7B7A"));
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_05_DEHAKA, "ExDehakaChampionOverNaraxus", 1);
        return "ExEssenceOfVersality";
    }
    else if (auto74D6E873_val == ge_CoopDrainRitualTarget_PA_Varookh) {
        gf_ExDehakaEssenceFT(StringExternal("Param/Value/21BD011C"));
        return "ExEssenceOfImmunity";
    }
    else {
    }
    return null;
}
string gf_ExGetEssenceBonusToAmon (int lp_objectiveIndex) {
    int auto3F3D8EEA_val;
    // Implementation
    auto3F3D8EEA_val = lp_objectiveIndex;
    if (auto3F3D8EEA_val == ge_CoopDrainRitualTarget_PA_Zorgg) {
        return "ExEssenceOfStrengthAmon";
    }
    else if (auto3F3D8EEA_val == ge_CoopDrainRitualTarget_PA_Gorrox) {
        return "ExEssenceOfVitalityAmon";
    }
    else if (auto3F3D8EEA_val == ge_CoopDrainRitualTarget_PA_RazSha) {
        TriggerEnable(gt_TFOHealLifeBonus, true);
        return "ExEssenceOfMasteryAmon";
    }
    else if (auto3F3D8EEA_val == ge_CoopDrainRitualTarget_PA_Naraxus) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_PRIMALS, "ExDehakaChampionOverNaraxusAmon", 1);
        return "ExEssenceOfVersalityAmon";
    }
    else if (auto3F3D8EEA_val == ge_CoopDrainRitualTarget_PA_Varookh) {
        return "ExEssenceOfImmunityAmon";
    }
    else {
    }
    return null;
}
trigger auto_gf_ExStartDrainRitual_Trigger = null;
int auto_gf_ExStartDrainRitual_lp_objectiveIndex;
void gf_ExStartDrainRitual (int lp_objectiveIndex) {
    auto_gf_ExStartDrainRitual_lp_objectiveIndex = lp_objectiveIndex;
    if (auto_gf_ExStartDrainRitual_Trigger == null) {
        auto_gf_ExStartDrainRitual_Trigger = TriggerCreate("auto_gf_ExStartDrainRitual_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExStartDrainRitual_Trigger, false, false);
}
bool auto_gf_ExStartDrainRitual_TriggerFunc (bool testConds, bool runActions) {
    int lp_objectiveIndex = auto_gf_ExStartDrainRitual_lp_objectiveIndex;
    // Implementation
    gf_ExSetDrainRitualIDForUnit(gv_dR_uPA[lp_objectiveIndex], lp_objectiveIndex);
    gf_ExSetDrainRitualIDForUnit(gv_dR_uVD[lp_objectiveIndex], lp_objectiveIndex);
    while (true) {
        if ((UnitIsAlive(gv_dR_uPA[lp_objectiveIndex]) == true) && (UnitIsAlive(gv_dR_uVD[lp_objectiveIndex]) == true)) {
            if ((UnitHasBehavior2(gv_dR_uPA[lp_objectiveIndex], "ExVoidDevourerDrain") == true) && (UnitHasBehavior2(gv_dR_uVD[lp_objectiveIndex], "ExVoidDevourerDrainChanneling") == true)) {
                if ((DistanceBetweenPoints(UnitGetPosition(gv_dR_uPA[lp_objectiveIndex]), gv_dR_pPA[lp_objectiveIndex]) >= 0.5)) {
                    UnitSetPosition(gv_dR_uPA[lp_objectiveIndex], gv_dR_pPA[lp_objectiveIndex], true);
                }
                if ((DistanceBetweenPoints(UnitGetPosition(gv_dR_uVD[lp_objectiveIndex]), gv_dR_pVD[lp_objectiveIndex]) >= 0.5)) {
                    UnitSetPosition(gv_dR_uVD[lp_objectiveIndex], gv_dR_pVD[lp_objectiveIndex], true);
                }
            }
            else {
                UnitIssueOrder(gv_dR_uVD[lp_objectiveIndex], OrderTargetingUnit(AbilityCommand("ExVoidDevourerDrain", 0), gv_dR_uPA[lp_objectiveIndex]), c_orderQueueReplace);
            }
        }
        else {
            break;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}
trigger auto_gf_ExStartExecutionRitual_Trigger = null;
int auto_gf_ExStartExecutionRitual_lp_objectiveIndex;
void gf_ExStartExecutionRitual (int lp_objectiveIndex) {
    auto_gf_ExStartExecutionRitual_lp_objectiveIndex = lp_objectiveIndex;
    if (auto_gf_ExStartExecutionRitual_Trigger == null) {
        auto_gf_ExStartExecutionRitual_Trigger = TriggerCreate("auto_gf_ExStartExecutionRitual_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExStartExecutionRitual_Trigger, false, false);
}
bool auto_gf_ExStartExecutionRitual_TriggerFunc (bool testConds, bool runActions) {
    int lp_objectiveIndex = auto_gf_ExStartExecutionRitual_lp_objectiveIndex;
    // Variable Declarations
    fixed lv_executionDuration;
    // Variable Initialization
    lv_executionDuration = gv_obj_EXECUTION_DURATION;
    // Implementation
    while ((UnitIsAlive(gv_dR_uVD[lp_objectiveIndex]) == true) && (UnitIsAlive(gv_dR_uPA[lp_objectiveIndex]) == true)) {
        if ((lv_executionDuration >= 0.0)) {
            libCOMI_gf_SetUnitProgressBarProgress(gv_dR_uVD[lp_objectiveIndex], FixedToInt(lv_executionDuration));
            libCOMI_gf_SetUnitProgressBarProgress2(gv_dR_uVD[lp_objectiveIndex], FixedToInt(lv_executionDuration));
            PingSetTooltip(gv_dR_Ping[lp_objectiveIndex], (gv_dR_PingTooltip[lp_objectiveIndex] + StringExternal("Param/Value/E1EE05F5") + IntToText(FixedToInt(lv_executionDuration)) + StringExternal("Param/Value/0156CA92")));
            lv_executionDuration -= 1.0;
        }
        else {
            gv_dR_ExecutionCompleted[lp_objectiveIndex] = true;
            UnitBehaviorAdd(gv_dR_uVD[lp_objectiveIndex], "ExAmonsCover", gv_dR_uVD[lp_objectiveIndex], 1);
            libCOMI_gf_ShowHideUnitProgressBar(gv_dR_uVD[lp_objectiveIndex], false);
            UnitKill(gv_dR_uPA[lp_objectiveIndex]);
            Wait(2.0, c_timeGame);
            UnitIssueOrder(gv_dR_uVD[lp_objectiveIndex], Order(AbilityCommand("ExVoidDevourerEscape", 0)), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
trigger auto_gf_ExPAAshWormRetreat_Trigger = null;
unit auto_gf_ExPAAshWormRetreat_lp_ashWorm;
void gf_ExPAAshWormRetreat (unit lp_ashWorm) {
    auto_gf_ExPAAshWormRetreat_lp_ashWorm = lp_ashWorm;
    if (auto_gf_ExPAAshWormRetreat_Trigger == null) {
        auto_gf_ExPAAshWormRetreat_Trigger = TriggerCreate("auto_gf_ExPAAshWormRetreat_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExPAAshWormRetreat_Trigger, false, false);
}
bool auto_gf_ExPAAshWormRetreat_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ashWorm = auto_gf_ExPAAshWormRetreat_lp_ashWorm;
    // Implementation
    libNtve_gf_MakeUnitInvulnerable(lp_ashWorm, true);
    UnitIssueOrder(lp_ashWorm, OrderTargetingPoint(AbilityCommand("AshWormBurrowMove", 0), PointFromId(1472781613)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitRemove(lp_ashWorm);
    return true;
}
void gf_ExAIDropAmonForcesNearAnomaly (point lp_dropPoint) {
    string autoC29F1A42_val;
    // Variable Declarations
    int lv_aiPlayer;
    unitgroup lv_dropGroup;
    // Variable Initialization
    lv_aiPlayer = gv_eNEMY_DROP_PLAYER;
    lv_dropGroup = UnitGroupEmpty();
    // Implementation
    if ((gf_ExGetCoopDifficultyLevel() != 1)) {
        autoC29F1A42_val = PlayerRace(lv_aiPlayer);
        if (autoC29F1A42_val == "Prot") {
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, 2, 3, RandomInt(3, 4)), "Zealot", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, RandomInt(0, 1), RandomInt(0, 1), RandomInt(1, 2)), "Stalker", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
        }
        else if (autoC29F1A42_val == "Terr") {
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, 3, 4, RandomInt(4, 5)), "Marine", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, RandomInt(0, 1), RandomInt(1, 2), RandomInt(2, 3)), "Marauder", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, RandomInt(0, 1), RandomInt(0, 1), RandomInt(1, 2)), "Medic", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
        }
        else if (autoC29F1A42_val == "Zerg") {
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, 4, 5, RandomInt(5, 6)), "Zergling", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, RandomInt(0, 1), RandomInt(0, 1), RandomInt(1, 2)), "Hydralisk", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
            UnitCreate(gf_ExGetCoopDifficultyValueInteger(0, RandomInt(0, 1), RandomInt(0, 1), RandomInt(1, 2)), "Roach", c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), 270.0);
            UnitGroupAddUnitGroup(lv_dropGroup, UnitLastCreatedGroup());
        }
        else {
        }
        if ((UnitGroupCount(lv_dropGroup, c_unitCountAlive) > 0)) {
            UnitGroupAddUnitGroup(gv_g_AnomaliesAmonForce, lv_dropGroup);
            gf_ExAISendDrop(lv_dropGroup, lp_dropPoint, true);
        }
    }
}
void gf_ExOmoshActivationCheck () {
    // Implementation
    if ((gv_objective_Primary01_EssencesCollected == 4) && (gv_objective_Primary02_EssencesDrained == 1)) {
        TriggerExecute(gt_ObjectivePrimary02Complete, true, false);
        TriggerExecute(gt_OmoshEventInit, true, false);
    }
}
trigger auto_gf_ExOmoshMinimapPath_Trigger = null;
point auto_gf_ExOmoshMinimapPath_lp_targetPoint;
void gf_ExOmoshMinimapPath (point lp_targetPoint) {
    auto_gf_ExOmoshMinimapPath_lp_targetPoint = lp_targetPoint;
    if (auto_gf_ExOmoshMinimapPath_Trigger == null) {
        auto_gf_ExOmoshMinimapPath_Trigger = TriggerCreate("auto_gf_ExOmoshMinimapPath_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExOmoshMinimapPath_Trigger, false, false);
}
bool auto_gf_ExOmoshMinimapPath_TriggerFunc (bool testConds, bool runActions) {
    point lp_targetPoint = auto_gf_ExOmoshMinimapPath_lp_targetPoint;
    int init_i;
    int auto72C24EBD_ae;
    int auto72C24EBD_ai;
    fixed autoA457CAEE_at;
    int auto4F7A0795_ae;
    int auto4F7A0795_ai;
    // Variable Declarations
    int lv_tempPing;
    fixed lv_distanceBetweenPoints;
    int lv_distanceBetweenChunks;
    point lv_pathStart;
    int[32] lv_pathPings;
    fixed lv_pathPingDistance;
    fixed lv_pathPingDelay;
    fixed lv_pathPingLifetime;
    int lv_i;
    // Variable Initialization
    lv_tempPing = c_invalidPingId;
    lv_pathStart = UnitGetPosition(gv_oMOSH_UNIT);
    for (init_i = 0; init_i <= 31; init_i += 1) {
        lv_pathPings[init_i] = c_invalidPingId;
    }
    lv_pathPingDistance = 12.0;
    lv_pathPingDelay = 0.1;
    lv_pathPingLifetime = 3.0;
    // Implementation
    while ((DistanceBetweenPoints(UnitGetPosition(gv_oMOSH_UNIT), lp_targetPoint) > 1.0)) {
        lv_distanceBetweenPoints = DistanceBetweenPoints(lv_pathStart, lp_targetPoint);
        lv_distanceBetweenChunks = FixedToInt((lv_distanceBetweenPoints / lv_pathPingDistance));
        auto72C24EBD_ae = lv_distanceBetweenChunks;
        auto72C24EBD_ai = 1;
        lv_i = 1;
        for ( ; ( (auto72C24EBD_ai >= 0 && lv_i <= auto72C24EBD_ae) || (auto72C24EBD_ai <= 0 && lv_i >= auto72C24EBD_ae) ) ; lv_i += auto72C24EBD_ai ) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", libNtve_gf_PointOffsetTowardsPoint(lv_pathStart, (lv_pathPingDistance * IntToFixed(lv_i)), lp_targetPoint), Color(100.00, 0.00, 0.00), lv_pathPingLifetime, AngleBetweenPoints(lv_pathStart, lp_targetPoint));
            lv_tempPing = PingLastCreated();
            PingSetTooltip(lv_tempPing, StringExternal("Param/Value/6DA35864"));
            PingSetScale(lv_tempPing, 0.33);
            PingSetUseUnitVisibility(lv_tempPing, false);
            lv_pathPings[lv_i] = lv_tempPing;
            Wait(lv_pathPingDelay, c_timeReal);
            if ((UnitIsAlive(gv_oMOSH_UNIT) != true)) {
                break;
            }
        }
        autoA457CAEE_at = 0;
        while (!((DistanceBetweenPoints(UnitGetPosition(gv_oMOSH_UNIT), lp_targetPoint) <= 1.0)) && autoA457CAEE_at <= lv_pathPingLifetime) {
            Wait(1.0, c_timeGame);
            autoA457CAEE_at = autoA457CAEE_at + 1.0;
        }
    }
    auto4F7A0795_ae = 31;
    auto4F7A0795_ai = 1;
    lv_i = 0;
    for ( ; ( (auto4F7A0795_ai >= 0 && lv_i <= auto4F7A0795_ae) || (auto4F7A0795_ai <= 0 && lv_i >= auto4F7A0795_ae) ) ; lv_i += auto4F7A0795_ai ) {
        PingDestroy(lv_pathPings[lv_i]);
    }
    return true;
}
trigger auto_gf_ExOmoshMoveToPoint_Trigger = null;
bool auto_gf_ExOmoshMoveToPoint_lp_firstAppearance;
void gf_ExOmoshMoveToPoint (bool lp_firstAppearance) {
    auto_gf_ExOmoshMoveToPoint_lp_firstAppearance = lp_firstAppearance;
    if (auto_gf_ExOmoshMoveToPoint_Trigger == null) {
        auto_gf_ExOmoshMoveToPoint_Trigger = TriggerCreate("auto_gf_ExOmoshMoveToPoint_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExOmoshMoveToPoint_Trigger, false, false);
}
bool auto_gf_ExOmoshMoveToPoint_TriggerFunc (bool testConds, bool runActions) {
    bool lp_firstAppearance = auto_gf_ExOmoshMoveToPoint_lp_firstAppearance;
    // Variable Declarations
    point lv_launchPoint;
    int lv_wayIndex;
    // Variable Initialization
    lv_launchPoint = libHots_gf_PointStoredForUnit(gv_oMOSH_UNIT, 1);
    lv_wayIndex = RandomInt(0, 4);
    // Implementation
    UnitBehaviorAdd(gv_oMOSH_UNIT, "ExOmoshMove", gv_oMOSH_UNIT, 1);
    lv_wayIndex = RandomInt(0, 4);
    if ((lv_launchPoint == gv_dR_pPA[lv_wayIndex])) {
        lv_wayIndex = 0;
        while ((lv_launchPoint == gv_dR_pPA[lv_wayIndex])) {
            lv_wayIndex += 1;
        }
    }
    libHots_gf_StorePointForUnit(gv_oMOSH_UNIT, 1, gv_dR_pPA[lv_wayIndex]);
    gf_ExSetDrainRitualIDForUnit(gv_oMOSH_UNIT, lv_wayIndex);
    if ((lp_firstAppearance == false)) {
        PingDestroy(gv_g_OmoshPing);
        gf_ExOmoshMinimapPath(gv_dR_pPA[lv_wayIndex]);
        UnitSetHeight(gv_oMOSH_UNIT, 15.0, 2.0);
        Wait(1.0, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_oMOSH_UNIT, "SetOpacity 0.000000 1.000000 ExOmoshOpacity");
        Wait(2.0, c_timeGame);
    }
    else {
        UnitSetHeight(gv_oMOSH_UNIT, 15.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(gv_oMOSH_UNIT, "SetOpacity 0.000000 0.000000 ExOmoshOpacity");
    }
    UnitSetPosition(gv_oMOSH_UNIT, gv_dR_pPA[lv_wayIndex], false);
    UnitSetFacing(gv_oMOSH_UNIT, AngleBetweenPoints(gv_dR_pPA[lv_wayIndex], gv_dR_pVD[lv_wayIndex]), 0.0);
    UnitSetHeight(gv_oMOSH_UNIT, UnitGetPropertyFixed(gv_oMOSH_UNIT, c_unitPropHeight, c_unitPropNormal), 3.0);
    libNtve_gf_SendActorMessageToUnit(gv_oMOSH_UNIT, "ClearOpacity 1.000000 ExOmoshOpacity");
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, gv_dR_pPA[lv_wayIndex], StringExternal("Param/Value/DCC39434"));
    gv_g_OmoshPing = PingLastCreated();
    PingSetColor(gv_g_OmoshPing, Color(100.00, 0.00, 0.00));
    Wait(3.0, c_timeGame);
    UnitBehaviorRemove(gv_oMOSH_UNIT, "ExOmoshMove", c_unitBehaviorCountAll);
    return true;
}
trigger auto_gf_ExTFOGrantProtection_Trigger = null;
unit auto_gf_ExTFOGrantProtection_lp_voidDevourer;
void gf_ExTFOGrantProtection (unit lp_voidDevourer) {
    auto_gf_ExTFOGrantProtection_lp_voidDevourer = lp_voidDevourer;
    if (auto_gf_ExTFOGrantProtection_Trigger == null) {
        auto_gf_ExTFOGrantProtection_Trigger = TriggerCreate("auto_gf_ExTFOGrantProtection_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExTFOGrantProtection_Trigger, false, false);
}
bool auto_gf_ExTFOGrantProtection_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidDevourer = auto_gf_ExTFOGrantProtection_lp_voidDevourer;
    // Variable Declarations
    point lv_castPosition;
    // Variable Initialization
    lv_castPosition = UnitGetPosition(lp_voidDevourer);
    // Implementation
    libCOMI_gf_DisplayUnitProgressBar(lp_voidDevourer, StringExternal("Param/Value/28284C1A"), 0, 100);
    libCOMI_gf_ShowHideUnitProgressBar(lp_voidDevourer, false);
    while (true) {
        if ((gv_tFO_DOME != null) && (UnitIsAlive(gv_tFO_DOME) == true) && (UnitIsAlive(lp_voidDevourer) == true)) {
            if ((UnitHasBehavior2(lp_voidDevourer, "ExVoidDevourerGrantProtection") == true) && (UnitHasBehavior2(lp_voidDevourer, "ExVoidDevourerGrantProtectionChanneling") == true)) {
                if ((DistanceBetweenPoints(lv_castPosition, UnitGetPosition(gv_tFO_DOME)) >= 0.5)) {
                    UnitSetPosition(lp_voidDevourer, lv_castPosition, true);
                }
            }
            else {
                UnitIssueOrder(lp_voidDevourer, OrderTargetingUnit(AbilityCommand("ExVoidDevourerGrantProtection", 0), gv_tFO_DOME), c_orderQueueReplace);
            }
        }
        else {
            break;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}
void gf_ExTFOCorruptionPillarCreateMarker () {
    // Implementation
    if ((UnitGroupCount(gv_g_TFOCorruptionPillars, c_unitCountAlive) <= 3)) {
        UnitCreateEffectPoint(gv_tFO_BOSS, "ExTFOCorruptionPillarMarker", RegionRandomPoint(RegionFromId(33)));
    }
}
void gf_ExCoopScoreScreenInitialize () {
    // Variable Declarations
    int lv_height;
    int lv_width;
    int lv_exWidth;
    int lv_offsetX;
    int lv_offsetY;
    int lv_exOffsetX;
    int lv_exOffsetY;
    int lv_scoreStep;
    // Variable Initialization
    lv_height = 50;
    lv_width = 300;
    lv_exWidth = 230;
    lv_offsetX = 104;
    lv_offsetY = 190;
    lv_scoreStep = 16;
    // Implementation
    DialogCreate(5, 5, c_anchorCenter, 0, 0, true);
    gv_g_ScoreScreenDialog = DialogLastCreated();
    DialogSetFullscreen(gv_g_ScoreScreenDialog, true);
    DialogSetImage(gv_g_ScoreScreenDialog, "Assets\\Textures\\ui_ingame_blackmask.dds");
    libNtve_gf_CreateDialogItemImage(gv_g_ScoreScreenDialog, 5, 5, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_vignette.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_g_ScoreScreenDialog, 1024, 1200, c_anchorBottomRight, 0, 0, StringToText(""), "Assets\\Textures\\ui_loading_coop_hero_kerrigan.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_scoreScreenContent.lv_image_Commander = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_g_ScoreScreenDialog, 1000, 30, c_anchorTopLeft, lv_offsetX, (lv_offsetY - 50), StringToText(""), "Assets\\Textures\\ui_void_armyupgrade_loreline_highlight.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.4);
    lv_height = 50;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, 700, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/DC5DBE01"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_CommonGameResult = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_CommonGameResult, "Coop_ScoreScreen_GameResult", PlayerGroupAll());
    lv_offsetY += (lv_height + 20);
    lv_height = 18;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, 700, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, GameMapName(), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_CommonMapName = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_CommonMapName, "Coop_ScoreScreen_MapName", PlayerGroupAll());
    lv_offsetY += (lv_height + 20);
    lv_height = 80;
    libNtve_gf_CreateDialogItemImage(gv_g_ScoreScreenDialog, 772, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_nextinfo_bg_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_scoreScreenContent.lv_image_StatsHeader = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/CEEC387F"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Coop_ScoreScreen_StatNameBreakdown", PlayerGroupAll());
    lv_exOffsetX += (lv_offsetX + lv_width);
    lv_exOffsetY += (lv_offsetY + 20);
    lv_height = 20;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_exOffsetY, StringExternal("Param/Value/1F41BE42"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_StatCommander1 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander1, "ExCoopScoreScreenCommanderNameRaynor", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, 18, c_anchorTopLeft, lv_exOffsetX, (lv_exOffsetY + (lv_height + 4)), StringExternal("Param/Value/0DF3BF8E"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_StatPlayer1 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatPlayer1, "ExCoopScoreScreenPlayerName", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_exOffsetY, StringExternal("Param/Value/A7F85128"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_StatCommander2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander2, "ExCoopScoreScreenCommanderNameKerrigan", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, 18, c_anchorTopLeft, lv_exOffsetX, (lv_exOffsetY + (lv_height + 4)), StringExternal("Param/Value/28B24161"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_StatPlayer2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatPlayer2, "ExCoopScoreScreenPlayerName", PlayerGroupAll());
    lv_offsetY = ((DialogControlGetOffsetY(gv_scoreScreenContent.lv_image_StatsHeader, 0) + DialogControlGetHeight(gv_scoreScreenContent.lv_image_StatsHeader, 0)) + 20);
    lv_height = 18;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/CDCC17E1"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName01 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName01, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/CFB83546"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue01[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue01[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/2338CF0E"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue01[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue01[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9F1317C3"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName02 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName02, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/28E51BF9"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue02[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue02[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/A167A646"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue02[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue02[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/06D66AD6"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName03 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName03, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/63126105"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue03[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue03[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/3C528739"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue03[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue03[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F600EF3F"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName04 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName04, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/6D33D7A9"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue04[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue04[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/21D67ACC"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue04[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue04[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7E71F9AA"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName05 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName05, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/445A55F9"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue05[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue05[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/3FD754F3"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue05[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue05[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/042D7A7A"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName06 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName06, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/1525E6DD"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue06[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue06[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/2B22ED39"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue06[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue06[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/ABF71CB5"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName07 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName07, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/088F0843"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue07[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue07[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/BF850727"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue07[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue07[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/ED7DABC6"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName08 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName08, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/655C5580"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue08[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue08[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/CB6B6FEA"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue08[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue08[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/23CDF508"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName09 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName09, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/5483F534"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue09[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue09[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/F4DF05E3"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue09[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue09[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/467D37B1"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName10 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName10, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/C1DEEFBD"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue10[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue10[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/41ACED70"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue10[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue10[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_width, lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F1F427D1"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName11 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName11, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/7663F68C"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue11[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue11[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/E48E8E1C"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue11[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue11[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, (lv_width + 10), lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0BD385CE"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName12 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName12, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/1DD544A6"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue12[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue12[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/FE2C0014"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue12[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue12[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + lv_scoreStep);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, (lv_width + 10), lv_height, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D9A40B5B"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreName13 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreName13, "Coop_ScoreScreen_StatSource", PlayerGroupAll());
    lv_exOffsetX = (lv_offsetX + lv_width);
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/5BAE17EF"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue13[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue13[1], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_exOffsetX += lv_exWidth;
    libNtve_gf_CreateDialogItemLabel(gv_g_ScoreScreenDialog, lv_exWidth, lv_height, c_anchorTopLeft, lv_exOffsetX, lv_offsetY, StringExternal("Param/Value/137D0985"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_scoreScreenContent.lv_label_ScoreValue13[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_ScoreValue13[2], "ExCoopScoreScreenStatValue", PlayerGroupAll());
    lv_offsetY += (lv_height + 30);
    lv_height = 54;
    DialogControlCreate(gv_g_ScoreScreenDialog, c_triggerControlTypeButton);
    gv_scoreScreenContent.lv_button_Leave = DialogControlLastCreated();
    DialogControlSetSize(gv_scoreScreenContent.lv_button_Leave, PlayerGroupAll(), 232, lv_height);
    libNtve_gf_SetDialogItemImageType(gv_scoreScreenContent.lv_button_Leave, c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_scoreScreenContent.lv_button_Leave, "Assets\\Textures\\ui_battlenet_glue_bluedropdownbutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_scoreScreenContent.lv_button_Leave, "Assets\\Textures\\ui_battlenet_glue_bluedropdownmenubutton_normaloverpressedover.dds", PlayerGroupAll());
    DialogControlSetPosition(gv_scoreScreenContent.lv_button_Leave, PlayerGroupAll(), c_anchorTopLeft, lv_offsetX, lv_offsetY);
    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_button_Leave, StringExternal("Param/Value/75F17DF8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_button_Leave, "ExCoopScoreScreenButton", PlayerGroupAll());
    DialogControlSetEnabled(gv_scoreScreenContent.lv_button_Leave, PlayerGroupAll(), false);
    lv_offsetY += (lv_height + 30);
    libNtve_gf_CreateDialogItemImage(gv_g_ScoreScreenDialog, 1000, 30, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringToText(""), "Assets\\Textures\\ui_void_armyupgrade_loreline_highlight.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.4);
    DialogSetVisible(gv_g_ScoreScreenDialog, PlayerGroupAll(), false);
}
trigger auto_gf_ExCoopScoreScreenDisplay_Trigger = null;
int auto_gf_ExCoopScoreScreenDisplay_lp_gameResult;
void gf_ExCoopScoreScreenDisplay (int lp_gameResult) {
    auto_gf_ExCoopScoreScreenDisplay_lp_gameResult = lp_gameResult;
    if (auto_gf_ExCoopScoreScreenDisplay_Trigger == null) {
        auto_gf_ExCoopScoreScreenDisplay_Trigger = TriggerCreate("auto_gf_ExCoopScoreScreenDisplay_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExCoopScoreScreenDisplay_Trigger, false, false);
}
bool auto_gf_ExCoopScoreScreenDisplay_TriggerFunc (bool testConds, bool runActions) {
    int lp_gameResult = auto_gf_ExCoopScoreScreenDisplay_lp_gameResult;
    string autoFC63429A_val;
    string auto14DA56EA_val;
    string auto7AA2B390_val;
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = gv_pLAYER_01_USER;
    // Implementation
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    SoundPlayForPlayer(SoundLink("UI_Unlock", -1), c_maxPlayers, PlayerGroupAll(), 110.0, 0.0);
    libCOMI_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryMusic, PlayerGroupAll());
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryOther, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUI, false);
    if ((lp_gameResult == ge_ExCoopScoreScreenResult_Defeat)) {
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_CommonGameResult, StringExternal("Param/Value/B406B4EC"), PlayerGroupAll());
        TriggerEnable(gt_Defeat, true);
    }
    else {
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_CommonGameResult, StringExternal("Param/Value/F646BB02"), PlayerGroupAll());
        TriggerEnable(gt_Victory, true);
    }
    while ((lv_index <= gv_pLAYER_02_USER)) {
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_CommonMapName, (StringExternal("Param/Value/F39B03A6") + StringExternal("Param/Value/E6125B17") + gf_ExGetCoopDifficultyValueText(StringExternal("Param/Value/693D2ABE"), StringExternal("Param/Value/960899AD"), StringExternal("Param/Value/FC6CB1F0"), StringExternal("Param/Value/150BADC5")) + StringExternal("Param/Value/989D9BFD")), PlayerGroupAll());
        autoFC63429A_val = PlayerCommander(lv_index);
        if (autoFC63429A_val == "Artanis") {
            libNtve_gf_SetDialogItemImage(gv_scoreScreenContent.lv_image_Commander, "Assets\\Textures\\ui_score_screen_hero_artanis_right.dds", PlayerGroupSingle(lv_index));
        }
        else if (autoFC63429A_val == "Kerrigan") {
            libNtve_gf_SetDialogItemImage(gv_scoreScreenContent.lv_image_Commander, "Assets\\Textures\\ui_score_screen_hero_kerrigan_right.dds", PlayerGroupSingle(lv_index));
        }
        else {
            libNtve_gf_SetDialogItemImage(gv_scoreScreenContent.lv_image_Commander, "Assets\\Textures\\ui_score_screen_hero_raynor_right.dds", PlayerGroupSingle(lv_index));
        }
        if ((lv_index == gv_pLAYER_01_USER)) {
            libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_StatCommander1, StringToText((PlayerCommander(lv_index))), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_StatPlayer1, TextWithColor(PlayerName(lv_index), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false))), PlayerGroupAll());
            auto7AA2B390_val = PlayerCommander(lv_index);
            if (auto7AA2B390_val == "Artanis") {
                libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander1, "ExCoopScoreScreenCommanderNameArtanis", PlayerGroupAll());
                if ((RandomInt(0, 1) == 0)) {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[1], IntToText(PlayerScoreValueGetAsInt(1, "ArtanisShieldAbsorb")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[2], IntToText(PlayerScoreValueGetAsInt(2, "ArtanisShieldAbsorb")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName12, StringExternal("Param/Value/0F517C1D"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[1], IntToText(PlayerScoreValueGetAsInt(1, "ArtanisSoADamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[2], IntToText(PlayerScoreValueGetAsInt(2, "ArtanisSoADamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName12, StringExternal("Param/Value/6539E3E9"), PlayerGroupAll());
                }
            }
            else if (auto7AA2B390_val == "Kerrigan") {
                libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander1, "ExCoopScoreScreenCommanderNameKerrigan", PlayerGroupAll());
                if ((RandomInt(0, 1) == 0)) {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[1], IntToText(PlayerScoreValueGetAsInt(1, "KerriganAssimilationResources")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[2], IntToText(PlayerScoreValueGetAsInt(2, "KerriganAssimilationResources")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName12, StringExternal("Param/Value/AFF78661"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[1], IntToText(PlayerScoreValueGetAsInt(1, "KerriganDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[2], IntToText(PlayerScoreValueGetAsInt(2, "KerriganDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName12, StringExternal("Param/Value/5022D3D4"), PlayerGroupAll());
                }
            }
            else {
                libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander1, "ExCoopScoreScreenCommanderNameRaynor", PlayerGroupAll());
                if ((RandomInt(0, 1) == 0)) {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[1], IntToText(PlayerScoreValueGetAsInt(1, "RaynorHyperionDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[2], IntToText(PlayerScoreValueGetAsInt(2, "RaynorHyperionDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName12, StringExternal("Param/Value/4BAFF9BC"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[1], IntToText(PlayerScoreValueGetAsInt(1, "RaynorMedicHealing")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue12[2], IntToText(PlayerScoreValueGetAsInt(2, "RaynorMedicHealing")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName12, StringExternal("Param/Value/64A8706C"), PlayerGroupAll());
                }
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_StatCommander2, StringToText((PlayerCommander(lv_index))), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_StatPlayer2, TextWithColor(PlayerName(lv_index), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false))), PlayerGroupAll());
            auto14DA56EA_val = PlayerCommander(lv_index);
            if (auto14DA56EA_val == "Artanis") {
                libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander2, "ExCoopScoreScreenCommanderNameArtanis", PlayerGroupAll());
                if ((RandomInt(0, 1) == 0)) {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[1], IntToText(PlayerScoreValueGetAsInt(1, "ArtanisShieldAbsorb")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[2], IntToText(PlayerScoreValueGetAsInt(2, "ArtanisShieldAbsorb")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName13, StringExternal("Param/Value/1B0B5604"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[1], IntToText(PlayerScoreValueGetAsInt(1, "ArtanisSoADamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[2], IntToText(PlayerScoreValueGetAsInt(2, "ArtanisSoADamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName13, StringExternal("Param/Value/E5ADD954"), PlayerGroupAll());
                }
            }
            else if (auto14DA56EA_val == "Kerrigan") {
                libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander2, "ExCoopScoreScreenCommanderNameKerrigan", PlayerGroupAll());
                if ((RandomInt(0, 1) == 0)) {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[1], IntToText(PlayerScoreValueGetAsInt(1, "KerriganAssimilationResources")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[2], IntToText(PlayerScoreValueGetAsInt(2, "KerriganAssimilationResources")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName13, StringExternal("Param/Value/07680DA1"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[1], IntToText(PlayerScoreValueGetAsInt(1, "KerriganDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[2], IntToText(PlayerScoreValueGetAsInt(2, "KerriganDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName13, StringExternal("Param/Value/E37E4C76"), PlayerGroupAll());
                }
            }
            else {
                libNtve_gf_SetDialogItemStyle(gv_scoreScreenContent.lv_label_StatCommander2, "ExCoopScoreScreenCommanderNameRaynor", PlayerGroupAll());
                if ((RandomInt(0, 1) == 0)) {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[1], IntToText(PlayerScoreValueGetAsInt(1, "RaynorHyperionDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[2], IntToText(PlayerScoreValueGetAsInt(2, "RaynorHyperionDamage")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName13, StringExternal("Param/Value/0A6A9475"), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[1], IntToText(PlayerScoreValueGetAsInt(1, "RaynorMedicHealing")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue13[2], IntToText(PlayerScoreValueGetAsInt(2, "RaynorMedicHealing")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreName13, StringExternal("Param/Value/0CADA208"), PlayerGroupAll());
                }
            }
        }
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue01[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "UnitsStructuresKilled")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue02[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "UnitsProduced")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue03[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ResourcesGathered")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue04[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreDamageDealtToZorgg")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue05[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreDamageDealtToGorrox")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue06[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreDamageDealtToRazSha")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue07[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreDamageDealtToNaraxus")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue08[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreDamageDealtToVarookh")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue09[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreDamageDealtToOmosh")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue10[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreDamageDealtToTFO")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_scoreScreenContent.lv_label_ScoreValue11[lv_index], IntToText(PlayerScoreValueGetAsInt(lv_index, "ExCoopScoreAnomaliesDepleted")), PlayerGroupAll());
        lv_index += 1;
    }
    DialogSetVisible(gv_g_ScoreScreenDialog, PlayerGroupAll(), true);
    Wait(5.0, c_timeGame);
    DialogControlSetEnabled(gv_scoreScreenContent.lv_button_Leave, PlayerGroupAll(), true);
    return true;
}
void gf_ExAIShowDropPing (point lp_dropPoint) {
    // Implementation
    gf_ExCreateminimappingattachedatpoint(lp_dropPoint, "PingWarning", StringExternal("Param/Value/733147CF"), Color(100.00, 0.00, 0.00), 0.6, SoundLengthSync(SoundLink("UI_PingAdvanced_Danger", -1)));
    SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Danger", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
}
void gf_ExAISendDrop (unitgroup lp_dropGroup, point lp_dropPoint, bool lp_pingNotification) {
    unitgroup auto85271623_g;
    int auto85271623_u;
    unitgroup auto280550F7_g;
    int auto280550F7_u;
    int auto23371073_ae;
    int auto23371073_ai;
    unitgroup auto61830942_g;
    int auto61830942_u;
    // Variable Declarations
    string lv_aiRace;
    unitgroup lv_dropGroup;
    unit lv_p_WarpUnit;
    point lv_p_OriginLoc;
    unit lv_tZ_DropGroupUnit;
    int lv_tZ_DropGroupIter;
    unitgroup lv_tZ_AirGroup;
    // Variable Initialization
    lv_aiRace = PlayerRace(gv_eNEMY_DROP_PLAYER);
    lv_dropGroup = UnitGroupEmpty();
    lv_tZ_AirGroup = UnitGroupEmpty();
    // Implementation
    if ((lp_pingNotification == true)) {
        gf_ExAIShowDropPing(lp_dropPoint);
    }
    if ((lv_aiRace == "Prot")) {
        lv_p_OriginLoc = UnitGroupCenterOfGroup(lp_dropGroup);
        auto61830942_g = lp_dropGroup;
        auto61830942_u = 1;
        for ( ; auto61830942_u <= UnitGroupCount(auto61830942_g, c_unitCountAll) ; auto61830942_u += BoolToInt(lv_p_WarpUnit == UnitGroupUnit(auto61830942_g, auto61830942_u)) ) {
            lv_p_WarpUnit = UnitGroupUnit(auto61830942_g, auto61830942_u);
            gf_ExAIProtossFakeWarpIn(lv_p_WarpUnit);
            UnitSetPosition(lv_p_WarpUnit, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropPoint, DistanceBetweenPoints(lv_p_OriginLoc, UnitGetPosition(lv_p_WarpUnit)), DistanceBetweenPoints(lv_p_OriginLoc, UnitGetPosition(lv_p_WarpUnit))), false);
        }
    }
    else {
        auto85271623_g = lp_dropGroup;
        auto85271623_u = 1;
        for ( ; auto85271623_u <= UnitGroupCount(auto85271623_g, c_unitCountAll) ; auto85271623_u += BoolToInt(lv_tZ_DropGroupUnit == UnitGroupUnit(auto85271623_g, auto85271623_u)) ) {
            lv_tZ_DropGroupUnit = UnitGroupUnit(auto85271623_g, auto85271623_u);
            if ((UnitFilterMatch(lv_tZ_DropGroupUnit, gv_pLAYER_01_USER, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitGroupRemove(lp_dropGroup, lv_tZ_DropGroupUnit);
                UnitGroupAdd(lv_tZ_AirGroup, lv_tZ_DropGroupUnit);
            }
        }
        auto280550F7_g = lv_tZ_AirGroup;
        auto280550F7_u = 1;
        for ( ; auto280550F7_u <= UnitGroupCount(auto280550F7_g, c_unitCountAll) ; auto280550F7_u += BoolToInt(lv_tZ_DropGroupUnit == UnitGroupUnit(auto280550F7_g, auto280550F7_u)) ) {
            lv_tZ_DropGroupUnit = UnitGroupUnit(auto280550F7_g, auto280550F7_u);
            UnitSetPosition(lv_tZ_DropGroupUnit, lp_dropPoint, false);
            UnitSetHeight(lv_tZ_DropGroupUnit, 16.0, 0.0);
            UnitSetHeight(lv_tZ_DropGroupUnit, UnitTypeGetProperty(UnitGetType(lv_tZ_DropGroupUnit), c_unitPropHeight), 3.0);
        }
        auto23371073_ae = UnitGroupCount(lp_dropGroup, c_unitCountAlive);
        auto23371073_ai = 1;
        lv_tZ_DropGroupIter = 1;
        for ( ; ( (auto23371073_ai >= 0 && lv_tZ_DropGroupIter <= auto23371073_ae) || (auto23371073_ai <= 0 && lv_tZ_DropGroupIter >= auto23371073_ae) ) ; lv_tZ_DropGroupIter += auto23371073_ai ) {
            lv_tZ_DropGroupUnit = UnitGroupUnit(lp_dropGroup, lv_tZ_DropGroupIter);
            UnitGroupAdd(lv_dropGroup, lv_tZ_DropGroupUnit);
            if (((UnitGroupCount(lv_dropGroup, c_unitCountAlive) >= 4) || (lv_tZ_DropGroupIter >= UnitGroupCount(lp_dropGroup, c_unitCountAlive)))) {
                if ((lv_aiRace == "Terr")) {
                    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropPoint, 0.0, 4.0), lv_dropGroup, false, gv_eNEMY_DROP_PLAYER);
                }
                else {
                    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropPoint, 0.0, 3.0), lv_dropGroup, false, gv_eNEMY_DROP_PLAYER);
                }
                lv_dropGroup = UnitGroupEmpty();
            }
        }
    }
}
trigger auto_gf_ExAIRunAttackWaveAtTime_Trigger = null;
trigger auto_gf_ExAIRunAttackWaveAtTime_lp_attackWave;
fixed auto_gf_ExAIRunAttackWaveAtTime_lp_time;
void gf_ExAIRunAttackWaveAtTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_ExAIRunAttackWaveAtTime_lp_attackWave = lp_attackWave;
    auto_gf_ExAIRunAttackWaveAtTime_lp_time = lp_time;
    if (auto_gf_ExAIRunAttackWaveAtTime_Trigger == null) {
        auto_gf_ExAIRunAttackWaveAtTime_Trigger = TriggerCreate("auto_gf_ExAIRunAttackWaveAtTime_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExAIRunAttackWaveAtTime_Trigger, false, false);
}
bool auto_gf_ExAIRunAttackWaveAtTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_ExAIRunAttackWaveAtTime_lp_attackWave;
    fixed lp_time = auto_gf_ExAIRunAttackWaveAtTime_lp_time;
    // Implementation
    while (!((libCOMI_gf_GameIsOver() == false) && (lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    TriggerExecute(lp_attackWave, true, false);
    return true;
}
fixed gf_ExAIGetVarianceNext (fixed lp_varianceTotal) {
    // Implementation
    if ((lp_varianceTotal > 0.0)) {
        return RandomFixed(-0.1, 0.0);
    }
    else {
        return RandomFixed(0.0, 0.1);
    }
}
point gf_ExAIGetSpawnPoint () {
    int autoA208A26A_ae;
    int autoA208A26A_ai;
    // Variable Declarations
    int lv_spawnSide;
    int lv_spawnVariation;
    // Variable Initialization
    // Implementation
    lv_spawnSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    autoA208A26A_ae = 5;
    autoA208A26A_ai = 1;
    lv_spawnVariation = 1;
    for ( ; ( (autoA208A26A_ai >= 0 && lv_spawnVariation <= autoA208A26A_ae) || (autoA208A26A_ai <= 0 && lv_spawnVariation >= autoA208A26A_ae) ) ; lv_spawnVariation += autoA208A26A_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_coopAI_AttackSpawn[lv_spawnSide][lv_spawnVariation], UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return libCOMI_gf_CM_NearbyGroundPathablePoint(RegionGetCenter(gv_coopAI_AttackSpawn[lv_spawnSide][lv_spawnVariation]), 0.0, 2.0);
        }
    }
    return RegionGetCenter(RegionFromId(9));
}
point gf_ExAIGetExpansionPoint () {
    // Variable Declarations
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_tempExpWaypoint;
    bool lv_bothPlayersGotExp;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(21), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(22), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    PlayerGroupLoopEnd();
    if ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)) {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_tempExpWaypoint = PointFromId(367);
        }
        else if ((lv_numberOfStructures_ExpRight > lv_numberOfStructures_ExpLeft)) {
            lv_tempExpWaypoint = PointFromId(358);
        }
        else if ((lv_numberOfStructures_ExpRight == lv_numberOfStructures_ExpLeft)) {
            if ((RandomInt(0, 100) < 50)) {
                lv_tempExpWaypoint = PointFromId(367);
            }
            else {
                lv_tempExpWaypoint = PointFromId(358);
            }
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > 0)) {
            lv_tempExpWaypoint = PointFromId(367);
        }
        else if ((lv_numberOfStructures_ExpRight > 0)) {
            lv_tempExpWaypoint = PointFromId(358);
        }
        else if ((lv_numberOfStructures_ExpRight == 0) && (lv_numberOfStructures_ExpRight == 0)) {
            return PointFromId(684576395);
        }
    }
    if ((gv_coopAI_ExpansionAPNext == null)) {
        if ((lv_tempExpWaypoint == PointFromId(367))) {
            gv_coopAI_ExpansionAPNext = PointFromId(358);
        }
        else {
            gv_coopAI_ExpansionAPNext = PointFromId(367);
        }
    }
    else {
        if ((gv_coopAI_ExpansionAPNext == PointFromId(367))) {
            lv_tempExpWaypoint = PointFromId(358);
            gv_coopAI_ExpansionAPNext = PointFromId(358);
        }
        else {
            lv_tempExpWaypoint = PointFromId(367);
            gv_coopAI_ExpansionAPNext = PointFromId(367);
        }
    }
    return lv_tempExpWaypoint;
}
void gf_ExAISetAttackWave (fixed lp_time, trigger lp_aIAttackWave) {
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_aIAttackWave, true, false);
    }
}
void gf_ExAIAddHybridTierToAttackWave (int lp_hybridTier, int lp_amount, point lp_dropPoint) {
    int auto7B1B2114_val;
    int auto6118F445_val;
    // Variable Declarations
    int lv_tierIndex;
    int lv_counter;
    string lv_hybridType;
    unitgroup lv_dropGroup;
    unitgroup lv_spreadGroup;
    unitgroup lv_airHybrids;
    unit lv_hybrid;
    int lv_aiPlayer;
    // Variable Initialization
    lv_counter = 1;
    lv_dropGroup = UnitGroupEmpty();
    lv_spreadGroup = UnitGroupEmpty();
    lv_airHybrids = UnitGroupEmpty();
    lv_aiPlayer = gv_eNEMY_DROP_PLAYER;
    // Implementation
    if ((lp_amount > 0) && (gf_ExGetCoopDifficultyLevel() != 1)) {
        auto7B1B2114_val = lp_hybridTier;
        if (auto7B1B2114_val == ge_CoopAIAttackWaveHybridTier_HybridTierNormal) {
            lv_tierIndex = 2;
        }
        else if (auto7B1B2114_val == ge_CoopAIAttackWaveHybridTier_HybridTierMedium) {
            lv_tierIndex = 3;
        }
        else if (auto7B1B2114_val == ge_CoopAIAttackWaveHybridTier_HybridTierWide) {
            lv_tierIndex = 5;
        }
        else {
        }
        while ((lv_counter <= lp_amount)) {
            auto6118F445_val = RandomInt(0, lv_tierIndex);
            if (auto6118F445_val == 0) {
                lv_hybridType = "HybridReaver";
            }
            else if (auto6118F445_val == 1) {
                lv_hybridType = "HybridDestroyer";
            }
            else if (auto6118F445_val == 2) {
                lv_hybridType = "HybridNemesis";
            }
            else if (auto6118F445_val == 3) {
                lv_hybridType = "Hybrid";
            }
            else if (auto6118F445_val == 4) {
                lv_hybridType = "HybridDominatorVoid";
            }
            else if (auto6118F445_val == 5) {
                lv_hybridType = "HybridBehemoth";
            }
            else {
            }
            UnitCreate(1, lv_hybridType, c_unitCreateIgnorePlacement, lv_aiPlayer, PointFromId(939162549), libNtve_gf_RandomAngle());
            if ((lv_hybridType == "HybridNemesis")) {
                UnitGroupAdd(lv_airHybrids, UnitLastCreated());
            }
            else {
                UnitGroupAdd(lv_dropGroup, UnitLastCreated());
            }
            lv_counter += 1;
        }
        if ((UnitGroupCount(lv_dropGroup, c_unitCountAlive) > 0)) {
            libNtve_gf_CreateActorAtPoint("HybridWarpInEffect", lp_dropPoint);
            UnitGroupLoopBegin(lv_dropGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_hybrid = UnitGroupLoopCurrent();
                libNtve_gf_SendActorMessageToUnit(lv_hybrid, "SetOpacity 0.000000 0.000000 ExHybridWarpInOpacity");
                libNtve_gf_SendActorMessageToUnit(lv_hybrid, "ClearOpacity 2.000000 ExHybridWarpInOpacity");
                UnitSetPosition(lv_hybrid, lp_dropPoint, false);
            }
            UnitGroupLoopEnd();
        }
        if ((UnitGroupCount(lv_airHybrids, c_unitCountAlive) > 0)) {
            UnitGroupLoopBegin(lv_airHybrids);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_hybrid = UnitGroupLoopCurrent();
                UnitSetHeight(lv_hybrid, 16.0, 0.0);
                UnitSetHeight(lv_hybrid, UnitGetPropertyFixed(lv_hybrid, c_unitPropHeight, c_unitPropNormal), 3.0);
                UnitSetPosition(lv_hybrid, lp_dropPoint, false);
            }
            UnitGroupLoopEnd();
        }
        UnitGroupAddUnitGroup(lv_dropGroup, lv_airHybrids);
        TriggerExecute(gt_TrHybridDetectedQ, true, false);
        AISetGroupNotUsableInWaves(lv_dropGroup, false);
        UnitGroupLoopBegin(lv_dropGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            AIAttackWaveUseUnit(lv_aiPlayer, UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
}
trigger auto_gf_ExAIProtossFakeWarpIn_Trigger = null;
unit auto_gf_ExAIProtossFakeWarpIn_lp_protossUnit;
void gf_ExAIProtossFakeWarpIn (unit lp_protossUnit) {
    auto_gf_ExAIProtossFakeWarpIn_lp_protossUnit = lp_protossUnit;
    if (auto_gf_ExAIProtossFakeWarpIn_Trigger == null) {
        auto_gf_ExAIProtossFakeWarpIn_Trigger = TriggerCreate("auto_gf_ExAIProtossFakeWarpIn_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExAIProtossFakeWarpIn_Trigger, false, false);
}
bool auto_gf_ExAIProtossFakeWarpIn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_protossUnit = auto_gf_ExAIProtossFakeWarpIn_lp_protossUnit;
    // Implementation
    UnitAbilityEnable(lp_protossUnit, "attack", false);
    UnitAbilityEnable(lp_protossUnit, "move", false);
    ActorSend(libNtve_gf_MainActorofUnit(lp_protossUnit), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(lp_protossUnit), libNtve_gf_SetOpacity(1.0, 2.0));
    UnitBehaviorAdd(lp_protossUnit, "ProtossGenericWarpInOut", lp_protossUnit, 1);
    Wait(2.0, c_timeAI);
    UnitBehaviorRemove(lp_protossUnit, "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(lp_protossUnit), libNtve_gf_SetOpacity(1.0, 0.0));
    UnitAbilityEnable(lp_protossUnit, "attack", true);
    UnitAbilityEnable(lp_protossUnit, "move", true);
    return true;
}
trigger auto_gf_ExAIDispatchTrashForce_Trigger = null;
unitgroup auto_gf_ExAIDispatchTrashForce_lp_trashForce;
void gf_ExAIDispatchTrashForce (unitgroup lp_trashForce) {
    auto_gf_ExAIDispatchTrashForce_lp_trashForce = lp_trashForce;
    if (auto_gf_ExAIDispatchTrashForce_Trigger == null) {
        auto_gf_ExAIDispatchTrashForce_Trigger = TriggerCreate("auto_gf_ExAIDispatchTrashForce_TriggerFunc");
    }
    TriggerExecute(auto_gf_ExAIDispatchTrashForce_Trigger, false, false);
}
bool auto_gf_ExAIDispatchTrashForce_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_trashForce = auto_gf_ExAIDispatchTrashForce_lp_trashForce;
    // Implementation
    if ((UnitGroupCount(lp_trashForce, c_unitCountAlive) >= 3)) {
        Wait(10.0, c_timeGame);
        while (!((gf_ExAINoActiveAttackWaves() == true))) {
            Wait(1.0, c_timeGame);
        }
        if ((libNtve_gf_UnitGroupIsDead(lp_trashForce) == false)) {
            AISetGroupNotUsableInWaves(lp_trashForce, false);
            UnitGroupLoopBegin(lp_trashForce);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                AIAttackWaveUseUnit(gv_eNEMY_DROP_PLAYER, UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            AIAttackWaveSend(gv_eNEMY_DROP_PLAYER, 0, true);
            gf_ExAIRegAttackWave(lp_trashForce);
        }
    }
    return true;
}
void gf_ExAIRegAttackWave (unitgroup lp_coopAttackForce) {
    // Implementation
    UnitGroupAddUnitGroup(gv_coopAI_ActiveCoopAttackForce, lp_coopAttackForce);
}
bool gf_ExAINoActiveAttackWaves () {
    // Implementation
    return libNtve_gf_UnitGroupIsDead(gv_coopAI_ActiveCoopAttackForce);
}
//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool gt_ZS_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((gv_zS_SendTransmissionCampaignIndex == 0) && (gv_zS_SendTransmissionCampaignPlayingTick > 0)) {
            gv_zS_SendTransmissionCampaignPlayingTick -= 1;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gt_ZS_SendTransmissionCampaignTick_Init () {
    gt_ZS_SendTransmissionCampaignTick = TriggerCreate("gt_ZS_SendTransmissionCampaignTick_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: ExSendTransmissionCoopTick
//--------------------------------------------------------------------------------------------------
bool gt_ExSendTransmissionCoopTick_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((gv_cM_SendTransmissionCampaignIndex == 0) && (gv_cM_SendTransmissionCampaignPlayingTick > 0)) {
            gv_cM_SendTransmissionCampaignPlayingTick -= 1;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gt_ExSendTransmissionCoopTick_Init () {
    gt_ExSendTransmissionCoopTick = TriggerCreate("gt_ExSendTransmissionCoopTick_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ExCoopScoreScreenInitialize();
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }
    return true;
}
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_InitMutators, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    return true;
}
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_packUnit;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    AISetUnitScriptControlled(gv_dEHAKA_UNIT, true);
    TriggerExecute(gt_DrainRitualsInit, true, false);
    TriggerExecute(gt_TFOGrantProtectionRitual, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_07_PACKS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_packUnit = UnitGroupLoopCurrent();
        libNtve_gf_MakeUnitInvulnerable(lv_packUnit, true);
        UnitSetState(lv_packUnit, c_unitStateFidget, false);
        UnitSetState(lv_packUnit, c_unitStateSelectable, false);
        UnitSetState(lv_packUnit, c_unitStateTargetable, false);
        libNtve_gf_PauseUnit(lv_packUnit, true);
    }
    UnitGroupLoopEnd();
    AISetUnitScriptControlled(gv_oMOSH_UNIT, true);
    libNtve_gf_PauseUnit(gv_oMOSH_UNIT, true);
    return true;
}
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZZerus01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arch;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    GameTimeOfDaySet("09:00:00");
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(16), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(16), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(10), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(3), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(10), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(3), true, false);
    UnitGroupLoopBegin(UnitGroup("ZerusDestructibleArch", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_arch = UnitGroupLoopCurrent();
        libNtve_gf_MakeUnitInvulnerable(lv_arch, true);
        UnitSetState(lv_arch, c_unitStateHighlightable, false);
        UnitSetState(lv_arch, c_unitStateCursorable, false);
        UnitSetState(lv_arch, c_unitStateTargetable, false);
        UnitSetState(lv_arch, c_unitStateTooltipable, false);
        UnitSetState(lv_arch, c_unitStateSelectable, false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "GroundCracks");
    return true;
}
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    string auto688BF8BA_val;
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    //todo
    gf_ExSetCoopDifficultyLevel(4);
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg], c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(7000.0, 8500.0, 10000.0, 11500.0));
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox], c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(15000.0, 20000.0, 22500.0, 25000.0));
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(15000.0, 20000.0, 22500.0, 25000.0));
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus], c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(25000.0, 40000.0, 42500.0, 45000.0));
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh], c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(25000.0, 40000.0, 42500.0, 45000.0));
    UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_oMOSH_UNIT, c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(20000.0, 25000.0, 27500.0, 30000.0));
    UnitSetPropertyFixed(gv_oMOSH_UNIT, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_tFO_BOSS, c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(50000.0, 80000.0, 90000.0, 100000.0));
    UnitSetPropertyFixed(gv_tFO_BOSS, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(5000.0, 3500.0, 3000.0, 2500.0));
    UnitSetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropLifePercent, 100.0);
    return true;
}
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SetSLAlert, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_DehakaFirstAppearance, false, true);
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_CreatePrimaryObjectivesP1, true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("I feel the presence of the strongest creatures. But they are assaulted. I need to collect their essences before the enemy!", true);
    if (((PlayerCommander(gv_pLAYER_01_USER) == "Kerrigan") || (PlayerCommander(gv_pLAYER_02_USER) == "Kerrigan"))) {
        gf_ExSendTransmissionFromDehaka("Difficulties are expected. Any support is invaluable. Especially from you... Kerrigan.", true);
    }
    else {
        if (((PlayerStatus(gv_pLAYER_01_USER) == c_playerStatusLeft) || (PlayerStatus(gv_pLAYER_02_USER) == c_playerStatusLeft))) {
            gf_ExSendTransmissionFromDehaka("Difficulties are expected. Any support is invaluable.", true);
        }
        else {
            gf_ExSendTransmissionFromDehaka("Difficulties are expected. Any support is invaluable. Good to get both of you.", true);
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_ExecutionStageTimerCreate, true, false);
    TriggerExecute(gt_ExecutionStageTimerRun, true, false);
    TriggerExecute(gt_TrDehakaAboutAvatarsQ, true, false);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    TriggerExecute(gt_TipReadyQ, true, false);
    TriggerExecute(gt_CreateOptionalObjective, true, false);
    return true;
}
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_DisplayMissionTip();
    Wait(libCOMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set SL Alert
//--------------------------------------------------------------------------------------------------
bool gt_SetSLAlert_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3FC38A27"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/286ED0BB"), null, PlayerStartLocation(gv_pLAYER_02_USER));
    return true;
}
void gt_SetSLAlert_Init () {
    gt_SetSLAlert = TriggerCreate("gt_SetSLAlert_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka First Appearance
//--------------------------------------------------------------------------------------------------
bool gt_DehakaFirstAppearance_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ExDehakaOrderBurrowCharge(PointFromId(114906119), true);
    Wait(2.2, c_timeGame);
    gv_dEHAKA_PING = gf_ExSetminimappingattachedonunit(gv_dEHAKA_UNIT, "PingCircle", StringExternal("Param/Value/1FF274B8"), Color(100.00, 100.00, 50.20), 0.38, 0.0, true);
    return true;
}
void gt_DehakaFirstAppearance_Init () {
    gt_DehakaFirstAppearance = TriggerCreate("gt_DehakaFirstAppearance_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Mend
//--------------------------------------------------------------------------------------------------
bool gt_DehakaMend_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == gv_dEHAKA_UNIT))) {
            return false;
        }
        if (!((gf_ExDehakaIsOnBurrowCharge() == false))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_dEHAKA_UNIT, Order(AbilityCommand("DehakaHeal", 0)), c_orderQueueReplace);
    Wait(12.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_DehakaMend_Init () {
    gt_DehakaMend = TriggerCreate("gt_DehakaMend_Func");
    TriggerAddEventUnitProperty(gt_DehakaMend, null, c_unitPropLife);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Generate Spawns
//--------------------------------------------------------------------------------------------------
bool gt_DehakaGenerateSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == gv_dEHAKA_UNIT))) {
            return false;
        }
        if (!((gf_ExDehakaIsOnBurrowCharge() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_attacker = EventUnitDamageSourceUnit();
    if (((UnitGroupHasUnit(UnitGroupFromId(3), lv_attacker) == true) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_DEHAKA, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_dEHAKA_UNIT), 5.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 5) || (lv_attacker == gv_oMOSH_UNIT) || (lv_attacker == gv_tFO_BOSS))) {
        UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingPoint(AbilityCommand("DehakaMirrorImage", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_attacker), 3.0))), c_orderQueueReplace);
        Wait(50.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_DehakaGenerateSpawns_Init () {
    gt_DehakaGenerateSpawns = TriggerCreate("gt_DehakaGenerateSpawns_Func");
    TriggerAddEventUnitDamaged(gt_DehakaGenerateSpawns, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Spawns Guard
//--------------------------------------------------------------------------------------------------
bool gt_DehakaSpawnsGuard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_generatedSpwan;
    // Variable Initialization
    lv_generatedSpwan = EventUnit();
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetOwner(lv_generatedSpwan) == gv_pLAYER_05_DEHAKA))) {
            return false;
        }
        if (!((UnitGetType(lv_generatedSpwan) == "DehakaMirrorImage"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(lv_generatedSpwan, "ExOrderAttackOther", gv_dEHAKA_UNIT, 1);
    return true;
}
void gt_DehakaSpawnsGuard_Init () {
    gt_DehakaSpawnsGuard = TriggerCreate("gt_DehakaSpawnsGuard_Func");
    TriggerAddEventUnitRegion(gt_DehakaSpawnsGuard, null, RegionEntireMap(), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Burrow Charge
//--------------------------------------------------------------------------------------------------
bool gt_DehakaBurrowCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    // Variable Initialization
    lv_targetPoint = EventUnitTargetPoint();
    // Actions
    if (!runActions) {
        return true;
    }
    gv_g_Dehaka_BurrowChargeCast = true;
    UnitIssueOrder(gv_dEHAKA_UNIT, Order(AbilityCommand("BurrowDehakaDown", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(gv_dEHAKA_UNIT) == true)) {
        UnitBehaviorAdd(gv_dEHAKA_UNIT, "ExDehakaBurrowCharge", gv_dEHAKA_UNIT, 1);
        libNtve_gf_SendActorMessageToUnit(gv_dEHAKA_UNIT, "SetOpacity 0.000000 2.000000 DehakaBurrowCharge");
        PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitSelect(gv_dEHAKA_UNIT, PlayerGroupLoopCurrent(), false);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lv_targetPoint, 4.0), 8.0, false);
        }
        PlayerGroupLoopEnd();
        if ((gv_dEHAKA_PING != c_invalidPingId)) {
            PingSetColor(gv_dEHAKA_PING, Color(50.20, 50.20, 50.20));
            PingSetTooltip(gv_dEHAKA_PING, StringExternal("Param/Value/CE379986"));
        }
        if ((gv_g_Dehaka_BurrowChargeFast == true)) {
            UnitCreateEffectPoint(gv_dEHAKA_UNIT, "ExDehakaBurrowChargePersistentFast", lv_targetPoint);
        }
        else {
            UnitCreateEffectPoint(gv_dEHAKA_UNIT, "ExDehakaBurrowChargePersistentNormal", lv_targetPoint);
        }
        Wait(2.0, c_timeGame);
        libNtve_gf_ShowHideUnit(gv_dEHAKA_UNIT, false);
        UnitSetPosition(gv_dEHAKA_UNIT, lv_targetPoint, false);
        Wait((5.0 * IntToFixed(BoolToInt((gv_g_Dehaka_BurrowChargeFast == false)))), c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_dEHAKA_UNIT, "SetOpacity 1.000000 1.000000 DehakaBurrowCharge");
        libNtve_gf_ShowHideUnit(gv_dEHAKA_UNIT, true);
        Wait(1.0, c_timeGame);
        if ((gv_dEHAKA_PING != c_invalidPingId)) {
            PingSetColor(gv_dEHAKA_PING, Color(100.00, 100.00, 50.20));
            PingSetTooltip(gv_dEHAKA_PING, StringExternal("Param/Value/63F32D68"));
        }
        UnitIssueOrder(gv_dEHAKA_UNIT, Order(AbilityCommand("BurrowDehakaUp", 0)), c_orderQueueReplace);
        UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExDehakaBurrowCharge", c_unitBehaviorCountAll);
        UnitSetFacing(gv_dEHAKA_UNIT, gv_g_Dehaka_BurrowChargeAngle, 1.0);
    }
    gv_g_Dehaka_BurrowChargeCast = false;
    return true;
}
void gt_DehakaBurrowCharge_Init () {
    gt_DehakaBurrowCharge = TriggerCreate("gt_DehakaBurrowCharge_Func");
    TriggerAddEventUnitAbility(gt_DehakaBurrowCharge, null, AbilityCommand("ExBurrowCharge", 0), c_abilEffectStageCast, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Goes Home
//--------------------------------------------------------------------------------------------------
bool gt_DehakaGoesHome_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupFromId(3), c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitIsAlive(gv_dEHAKA_UNIT) == true)) {
            if ((UnitGroupCount(gv_g_Dehaka_QueueObjectGroup, c_unitCountAlive) == 0) && (gf_ExDehakaIsOnBurrowCharge() == false) && (gf_ExDehakaIsOnAttack() == false)) {
                UIAlertClear(gv_pLAYER_01_USER);
                UIAlertClear(gv_pLAYER_02_USER);
                if ((ObjectiveGetState(gv_objective_Primary01) != c_objectiveStateCompleted) && (ObjectiveGetState(gv_objective_Primary02) != c_objectiveStateFailed)) {
                    UnitGroupLoopBegin(UnitGroup("DehakaMirrorImage", gv_pLAYER_05_DEHAKA, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ExOrderAttackOther", c_unitBehaviorCountAll);
                    }
                    UnitGroupLoopEnd();
                    gf_ExDehakaOrderBurrowCharge(PointFromId(114906119), false);
                    TriggerExecute(gt_SetSLAlert, true, false);
                    TriggerEnable(TriggerGetCurrent(), true);
                }
                else {
                    if ((ObjectiveGetState(gv_objective_Primary02) == c_objectiveStateFailed)) {
                        gf_ExDehakaOrderBurrowCharge(PointFromId(1149902838), true);
                    }
                }
                break;
            }
        }
        else {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gt_DehakaGoesHome_Init () {
    gt_DehakaGoesHome = TriggerCreate("gt_DehakaGoesHome_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Dies
//--------------------------------------------------------------------------------------------------
bool gt_DehakaDies_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_DestroyPingCoop(gv_dEHAKA_PING);
    TriggerExecute(gt_ObjectivePrimary03Update, true, false);
    return true;
}
void gt_DehakaDies_Init () {
    gt_DehakaDies = TriggerCreate("gt_DehakaDies_Func");
    TriggerAddEventUnitDied(gt_DehakaDies, UnitRefFromVariable("gv_dEHAKA_UNIT"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka About Avatars Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaAboutAvatarsQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(35.0, c_timeGame);
    while (!((gf_ExDehakaFreeToTalkOnTheBase() == true) && (gf_ExAINoActiveAttackWaves() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("These primals has been lurked before. How could I missed them? I must change it. Only I am the Pack Leader!", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_PAHint, true, false);
    TriggerQueueExit();
    return true;
}
void gt_TrDehakaAboutAvatarsQ_Init () {
    gt_TrDehakaAboutAvatarsQ = TriggerCreate("gt_TrDehakaAboutAvatarsQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Execution Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaExecutionQ_Func (bool testConds, bool runActions) {
    int auto508761AA_val;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto508761AA_val = RandomInt(1, 3);
    if (auto508761AA_val == 1) {
        gf_ExSendTransmissionFromDehaka("Bring that Devourer to death! Involve me into a fight!", true);
    }
    else if (auto508761AA_val == 2) {
        gf_ExSendTransmissionFromDehaka("Do not let to execute that Avatar! Prove your strength!", true);
    }
    else if (auto508761AA_val == 3) {
        gf_ExSendTransmissionFromDehaka("This Devourer is vulnerable. Ready to kill?", true);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ShowExecutionTip, true, false);
    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_TrDehakaExecutionQ_Init () {
    gt_TrDehakaExecutionQ = TriggerCreate("gt_TrDehakaExecutionQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Zorgg Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaZorggHitQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg]) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_ExSendTransmissionFromDehaka("It deals a huge damage. Must keep a distance!", true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
void gt_TrDehakaZorggHitQ_Init () {
    gt_TrDehakaZorggHitQ = TriggerCreate("gt_TrDehakaZorggHitQ_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrDehakaZorggHitQ, gv_pLAYER_06_PRIMALS, "ExPAQuakeSearchDamage");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Gorrox Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaGorroxHitQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_ExSendTransmissionFromDehaka("It steals ours armor that makes him stronger, but us too weak!", true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
void gt_TrDehakaGorroxHitQ_Init () {
    gt_TrDehakaGorroxHitQ = TriggerCreate("gt_TrDehakaGorroxHitQ_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrDehakaGorroxHitQ, gv_pLAYER_06_PRIMALS, "ExPAArmorOverloadABTarget");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Raz'Sha Lava Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaRazShaLavaQ_Func (bool testConds, bool runActions) {
    int autoC9E7D8F4_val;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((gv_g_PARazShaLavaInProgress == false)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        autoC9E7D8F4_val = RandomInt(1, 2);
        if (autoC9E7D8F4_val == 1) {
            gf_ExSendTransmissionFromDehaka("It calls lava.", true);
        }
        else if (autoC9E7D8F4_val == 2) {
            gf_ExSendTransmissionFromDehaka("Lava is rising.", true);
        }
        else {
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
void gt_TrDehakaRazShaLavaQ_Init () {
    gt_TrDehakaRazShaLavaQ = TriggerCreate("gt_TrDehakaRazShaLavaQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Naraxus Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaNaraxusHitQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_ExSendTransmissionFromDehaka("Acid is on the ground. Stay away.", true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
void gt_TrDehakaNaraxusHitQ_Init () {
    gt_TrDehakaNaraxusHitQ = TriggerCreate("gt_TrDehakaNaraxusHitQ_Func");
    TriggerAddEventUnitAbility(gt_TrDehakaNaraxusHitQ, null, AbilityCommand("SlivanPuke", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Varookh Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaVarookhHitQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_ExSendTransmissionFromDehaka("Improbably! This Avatar can control your mind.", true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
void gt_TrDehakaVarookhHitQ_Init () {
    gt_TrDehakaVarookhHitQ = TriggerCreate("gt_TrDehakaVarookhHitQ_Func");
    TriggerAddEventUnitAbility(gt_TrDehakaVarookhHitQ, null, AbilityCommand("ExVarookhMindExplosion", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Omosh Hit Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaOmoshHitQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tornado;
    // Variable Initialization
    lv_tornado = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetOwner(lv_tornado) == gv_pLAYER_06_PRIMALS))) {
            return false;
        }
        if (!((UnitGetType(lv_tornado) == "MutatorTornado"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(gv_oMOSH_UNIT) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_ExSendTransmissionFromDehaka("This Avatar is pulling away our forces!", true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
void gt_TrDehakaOmoshHitQ_Init () {
    gt_TrDehakaOmoshHitQ = TriggerCreate("gt_TrDehakaOmoshHitQ_Func");
    TriggerAddEventUnitRegion(gt_TrDehakaOmoshHitQ, null, RegionEntireMap(), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Amon's Drop PA Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaAmonsDropPAQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((PlayerRace(gv_pLAYER_03_ENEMY) == "Prot") && (PlayerRace(gv_pLAYER_04_ENEMY) == "Prot")) {
        libCOMI_gf_SendMissionTransmission("EnemyWarningWarpIn", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    }
    else {
        libCOMI_gf_SendMissionTransmission("EnemyWarningDropPods", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    }
    gf_ExSendTransmissionFromDehaka("Amon is trying to stop us.", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
void gt_TrDehakaAmonsDropPAQ_Init () {
    gt_TrDehakaAmonsDropPAQ = TriggerCreate("gt_TrDehakaAmonsDropPAQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Amon's Drop Bonus Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaAmonsDropBonusQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((PlayerRace(gv_pLAYER_03_ENEMY) == "Prot") && (PlayerRace(gv_pLAYER_04_ENEMY) == "Prot")) {
        libCOMI_gf_SendMissionTransmission("EnemyWarningWarpIn", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    }
    else {
        libCOMI_gf_SendMissionTransmission("EnemyWarningDropPods", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    }
    gf_ExSendTransmissionFromDehaka("The enemy can disturb your workers. Must defend them!", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
void gt_TrDehakaAmonsDropBonusQ_Init () {
    gt_TrDehakaAmonsDropBonusQ = TriggerCreate("gt_TrDehakaAmonsDropBonusQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Bonus Progress Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaBonusProgressQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_objective_Optional_AnomaliesDeactivated == 1)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_ExSendTransmissionFromDehaka("That anomaly changed your weak minion. Influence can be different.", true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if ((gv_objective_Optional_AnomaliesDeactivated >= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        if ((gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Negative] == gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Positive])) {
            gv_g_AnomaliesAlignmentTries[RandomInt(0, 1)] += 1;
        }
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        if ((gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Negative] > gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Positive])) {
            gf_ExSendTransmissionFromDehaka("These anomalies carries nothing good for Zerus. Amon's tricks. Evade it.", true);
        }
        else if ((gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Negative] < gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Positive])) {
            gf_ExSendTransmissionFromDehaka("These anomalies can carry some good influence, but they can not evolve me.", true);
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
void gt_TrDehakaBonusProgressQ_Init () {
    gt_TrDehakaBonusProgressQ = TriggerCreate("gt_TrDehakaBonusProgressQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Low Life Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaLowLifeQ_Func (bool testConds, bool runActions) {
    int autoBD3DB6A1_val;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoBD3DB6A1_val = RandomInt(1, 3);
    if (autoBD3DB6A1_val == 1) {
        gf_ExSendTransmissionFromDehaka("I am seriously injured. Bring more support to me!", true);
    }
    else if (autoBD3DB6A1_val == 2) {
        gf_ExSendTransmissionFromDehaka("So many wounds. Can not Mend it so fast.", true);
    }
    else if (autoBD3DB6A1_val == 3) {
        gf_ExSendTransmissionFromDehaka("My life is to low. This can not last so long.", true);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_TrDehakaLowLifeQ_Init () {
    gt_TrDehakaLowLifeQ = TriggerCreate("gt_TrDehakaLowLifeQ_Func");
    TriggerAddEventUnitDamaged(gt_TrDehakaLowLifeQ, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Strange Ritual Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaStrangeRitualQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitOwner;
    // Variable Initialization
    lv_unitOwner = UnitGetOwner(EventUnit());
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!(((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_unitOwner) == true) || (lv_unitOwner == gv_pLAYER_05_DEHAKA)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gf_ExCreateminimappingattachedatpoint(UnitGetPosition(gv_tFO_BOSS), "ExPingQuestion", StringExternal("Param/Value/78DA91AA"), Color(100.00, 0.00, 0.00), 0.83, 10.0);
    libCOMI_gf_ShareVisionofUnitCoop(gv_tFO_DOME, true, gv_pLAYER_05_DEHAKA);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("More powerful presence is there. I can feel it, but I can not collect it.", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
void gt_TrDehakaStrangeRitualQ_Init () {
    gt_TrDehakaStrangeRitualQ = TriggerCreate("gt_TrDehakaStrangeRitualQ_Func");
    TriggerAddEventUnitRegion(gt_TrDehakaStrangeRitualQ, null, RegionFromId(13), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Dehaka Draining Wind Q
//--------------------------------------------------------------------------------------------------
bool gt_TrDehakaDrainingWindQ_Func (bool testConds, bool runActions) {
    int autoC39C3FAB_val;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(UnitGroupFromId(6), EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoC39C3FAB_val = RandomInt(1, 3);
    if (autoC39C3FAB_val == 1) {
        gf_ExSendTransmissionFromDehaka("Must attack that vulnerable Devourer!", true);
    }
    else if (autoC39C3FAB_val == 2) {
        gf_ExSendTransmissionFromDehaka("This Devourer is vulnerable. Attack him!", true);
    }
    else if (autoC39C3FAB_val == 3) {
        gf_ExSendTransmissionFromDehaka("That Devourer is attackable. Kill him!", true);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    if ((UnitIsAlive(gv_tFO_DOME) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_TrDehakaDrainingWindQ_Init () {
    gt_TrDehakaDrainingWindQ = TriggerCreate("gt_TrDehakaDrainingWindQ_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrDehakaDrainingWindQ, c_playerAny, "ExTFODrainingWindABTarget");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Execution Stage Timer Create
//--------------------------------------------------------------------------------------------------
bool gt_ExecutionStageTimerCreate_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_TimerWindowCreate(gv_g_ExecutionStageTimer, StringExternal("Param/Value/39C9BD66"), true, false);
    gv_g_ExecutionStageWindow = TimerWindowLastCreated();
    TimerWindowSetFormat(gv_g_ExecutionStageWindow, StringToText("<mintotal/>:<sec2/>"));
    return true;
}
void gt_ExecutionStageTimerCreate_Init () {
    gt_ExecutionStageTimerCreate = TriggerCreate("gt_ExecutionStageTimerCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Execution Stage Timer Run
//--------------------------------------------------------------------------------------------------
bool gt_ExecutionStageTimerRun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeLineA;
    fixed lv_timeLineB;
    fixed lv_timeLineC;
    bool lv_next;
    // Variable Initialization
    lv_timeLineA = (2.5 * 60.0);
    lv_timeLineB = ((gv_obj_EXECUTION_DURATION + (1.5 * 60.0)) - gv_g_ExecutionStageReduction);
    lv_timeLineC = ((gv_obj_EXECUTION_DURATION + (1.0 * 60.0)) - gv_g_ExecutionStageReduction);
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Zorgg] == false)) {
        TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Zorgg], lv_timeLineA, false, c_timeGame);
    }
    else {
        lv_next = true;
        if ((gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Gorrox] == false) && (gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_RazSha] == false)) {
            if ((RandomFixed(0.0, 100.0) < 50.0)) {
                TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Gorrox], lv_timeLineB, false, c_timeGame);
            }
            else {
                TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_RazSha], lv_timeLineB, false, c_timeGame);
            }
        }
        else {
            if ((gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Gorrox] == true) && (gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_RazSha] == false)) {
                TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_RazSha], lv_timeLineB, false, c_timeGame);
            }
            else {
                if ((gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Gorrox] == false) && (gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_RazSha] == true)) {
                    TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Gorrox], lv_timeLineB, false, c_timeGame);
                }
                else {
                    if ((gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Naraxus] == false) && (gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Varookh] == false)) {
                        if ((RandomFixed(0.0, 100.0) < 50.0)) {
                            TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Naraxus], lv_timeLineC, false, c_timeGame);
                        }
                        else {
                            TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Varookh], lv_timeLineC, false, c_timeGame);
                        }
                    }
                    else {
                        if ((gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Naraxus] == true) && (gv_dR_ExecutionRun[ge_CoopDrainRitualTarget_PA_Varookh] == false)) {
                            TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Varookh], lv_timeLineC, false, c_timeGame);
                        }
                        else {
                            TimerStart(gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Naraxus], lv_timeLineC, false, c_timeGame);
                        }
                    }
                }
            }
        }
    }
    gv_g_ExecutionStageTimer = TimerLastStarted();
    libCOMI_gf_SetTimerForTimerWindowCampaign(gv_g_ExecutionStageWindow, gv_g_ExecutionStageTimer);
    if ((lv_next == true)) {
        while (!((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(gv_g_ExecutionStageTarget) == false))) {
            Wait(1.0, c_timeGame);
        }
        Wait(5.0, c_timeGame);
        if ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(UnitGroupFromId(3), c_unitCountAlive) > 0)) {
            TimerWindowShow(gv_g_ExecutionStageWindow, PlayerGroupAll(), true);
        }
    }
    return true;
}
void gt_ExecutionStageTimerRun_Init () {
    gt_ExecutionStageTimerRun = TriggerCreate("gt_ExecutionStageTimerRun_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Execution Stage Timer Destroy
//--------------------------------------------------------------------------------------------------
bool gt_ExecutionStageTimerDestroy_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ExecutionStageTimerRun, false);
    TimerWindowShow(gv_g_ExecutionStageWindow, PlayerGroupAll(), false);
    TimerWindowDestroy(gv_g_ExecutionStageWindow);
    return true;
}
void gt_ExecutionStageTimerDestroy_Init () {
    gt_ExecutionStageTimerDestroy = TriggerCreate("gt_ExecutionStageTimerDestroy_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Drain Rituals Init
//--------------------------------------------------------------------------------------------------
bool gt_DrainRitualsInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_dR_uPA[lv_index] = UnitFromId(1468785713);
    gv_dR_uVD[lv_index] = UnitFromId(1549344199);
    gv_dR_pPA[lv_index] = UnitGetPosition(gv_dR_uPA[lv_index]);
    gv_dR_pVD[lv_index] = UnitGetPosition(gv_dR_uVD[lv_index]);
    gv_dR_rPA[lv_index] = RegionFromId(11);
    gv_dR_DehakaAssaultPoint[lv_index] = PointFromId(1370157264);
    AISetUnitScriptControlled(gv_dR_uPA[lv_index], true);
    AISetUnitScriptControlled(gv_dR_uVD[lv_index], true);
    libCOMI_gf_DisplayUnitProgressBar(gv_dR_uVD[lv_index], StringExternal("Param/Value/FC6D07B2"), 0, FixedToInt(gv_obj_EXECUTION_DURATION));
    libCOMI_gf_ShowHideUnitProgressBar(gv_dR_uVD[lv_index], false);
    gf_ExStartDrainRitual(lv_index);
    lv_index += 1;
    gv_dR_uPA[lv_index] = UnitFromId(315233290);
    gv_dR_uVD[lv_index] = UnitFromId(1713323226);
    gv_dR_pPA[lv_index] = UnitGetPosition(gv_dR_uPA[lv_index]);
    gv_dR_pVD[lv_index] = UnitGetPosition(gv_dR_uVD[lv_index]);
    gv_dR_rPA[lv_index] = RegionFromId(12);
    gv_dR_DehakaAssaultPoint[lv_index] = PointFromId(478095773);
    AISetUnitScriptControlled(gv_dR_uPA[lv_index], true);
    AISetUnitScriptControlled(gv_dR_uVD[lv_index], true);
    libCOMI_gf_DisplayUnitProgressBar(gv_dR_uVD[lv_index], StringExternal("Param/Value/96AEF52B"), 0, FixedToInt(gv_obj_EXECUTION_DURATION));
    libCOMI_gf_ShowHideUnitProgressBar(gv_dR_uVD[lv_index], false);
    gf_ExStartDrainRitual(lv_index);
    lv_index += 1;
    gv_dR_uPA[lv_index] = UnitFromId(360695164);
    gv_dR_uVD[lv_index] = UnitFromId(1290235999);
    gv_dR_pPA[lv_index] = UnitGetPosition(gv_dR_uPA[lv_index]);
    gv_dR_pVD[lv_index] = UnitGetPosition(gv_dR_uVD[lv_index]);
    gv_dR_rPA[lv_index] = RegionFromId(19);
    gv_dR_DehakaAssaultPoint[lv_index] = PointFromId(1251360379);
    AISetUnitScriptControlled(gv_dR_uPA[lv_index], true);
    AISetUnitScriptControlled(gv_dR_uVD[lv_index], true);
    libCOMI_gf_DisplayUnitProgressBar(gv_dR_uVD[lv_index], StringExternal("Param/Value/01436AC0"), 0, FixedToInt(gv_obj_EXECUTION_DURATION));
    libCOMI_gf_ShowHideUnitProgressBar(gv_dR_uVD[lv_index], false);
    gf_ExStartDrainRitual(lv_index);
    lv_index += 1;
    gv_dR_uPA[lv_index] = UnitFromId(862211628);
    gv_dR_uVD[lv_index] = UnitFromId(1638958719);
    gv_dR_pPA[lv_index] = UnitGetPosition(gv_dR_uPA[lv_index]);
    gv_dR_pVD[lv_index] = UnitGetPosition(gv_dR_uVD[lv_index]);
    gv_dR_rPA[lv_index] = RegionFromId(2);
    gv_dR_DehakaAssaultPoint[lv_index] = PointFromId(1491982523);
    AISetUnitScriptControlled(gv_dR_uPA[lv_index], true);
    AISetUnitScriptControlled(gv_dR_uVD[lv_index], true);
    libCOMI_gf_DisplayUnitProgressBar(gv_dR_uVD[lv_index], StringExternal("Param/Value/AD01AC30"), 0, FixedToInt(gv_obj_EXECUTION_DURATION));
    libCOMI_gf_ShowHideUnitProgressBar(gv_dR_uVD[lv_index], false);
    gf_ExStartDrainRitual(lv_index);
    lv_index += 1;
    gv_dR_uPA[lv_index] = UnitFromId(965947056);
    gv_dR_uVD[lv_index] = UnitFromId(1760662808);
    gv_dR_pPA[lv_index] = UnitGetPosition(gv_dR_uPA[lv_index]);
    gv_dR_pVD[lv_index] = UnitGetPosition(gv_dR_uVD[lv_index]);
    gv_dR_rPA[lv_index] = RegionFromId(6);
    gv_dR_DehakaAssaultPoint[lv_index] = PointFromId(1241616900);
    AISetUnitScriptControlled(gv_dR_uPA[lv_index], true);
    AISetUnitScriptControlled(gv_dR_uVD[lv_index], true);
    libCOMI_gf_DisplayUnitProgressBar(gv_dR_uVD[lv_index], StringExternal("Param/Value/2C50BD37"), 0, FixedToInt(gv_obj_EXECUTION_DURATION));
    libCOMI_gf_ShowHideUnitProgressBar(gv_dR_uVD[lv_index], false);
    gf_ExStartDrainRitual(lv_index);
    return true;
}
void gt_DrainRitualsInit_Init () {
    gt_DrainRitualsInit = TriggerCreate("gt_DrainRitualsInit_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Object Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_ObjectUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_objectUnit;
    // Variable Initialization
    lv_objectUnit = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!(((UnitGroupHasUnit(UnitGroupFromId(3), lv_objectUnit) == true) || (UnitGroupHasUnit(UnitGroupFromId(4), lv_objectUnit) == true)))) {
            return false;
        }
        if (!((UnitIsAlive(gv_dEHAKA_UNIT) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_obj_INDEX = gf_ExGetDrainRitualIDFromUnit(lv_objectUnit);
    if ((UnitGroupHasUnit(UnitGroupFromId(3), lv_objectUnit) == true)) {
        TriggerExecute(gt_DPrimalAvatar, true, false);
    }
    else if ((UnitGroupHasUnit(UnitGroupFromId(4), lv_objectUnit) == true)) {
        TriggerExecute(gt_DVoidDevourer, true, false);
    }
    return true;
}
void gt_ObjectUnitDies_Init () {
    gt_ObjectUnitDies = TriggerCreate("gt_ObjectUnitDies_Func");
    TriggerAddEventUnitDied(gt_ObjectUnitDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: >D Primal Avatar
//--------------------------------------------------------------------------------------------------
bool gt_DPrimalAvatar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = gv_obj_INDEX;
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_dR_EssenceCollected[lv_index] == false)) {
        if ((UnitIsAlive(gv_dR_uVD[lv_index]) == false)) {
            UnitCreate(1, "ExEssence", c_unitCreateIgnorePlacement, gv_pLAYER_05_DEHAKA, UnitGetPosition(gv_dR_uPA[lv_index]), 270.0);
            gv_dR_Essence[lv_index] = UnitLastCreated();
            UnitSetHeight(gv_dR_Essence[lv_index], 2.0, 5.0);
            gf_ExDrainRitualFlashPing(lv_index, Color(0.00, 100.00, 0.00), (StringExternal("Param/Value/FC3563CB") + UnitGetName(gv_dR_uPA[lv_index])));
            gf_ExSetDrainRitualIDForUnit(gv_dR_Essence[lv_index], lv_index);
            gf_ExDehakaAddTargetIntoQueue(gv_dR_Essence[lv_index]);
        }
        else {
            PingDestroy(gv_dR_Ping[lv_index]);
            gf_ExCreateminimappingattachedatpoint(gv_dR_pPA[lv_index], "PingWarning", null, Color(100.00, 0.00, 0.00), 0.6, SoundLengthSync(SoundLink("UI_PingAdvanced_Danger", -1)));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Danger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UnitBehaviorAdd(gv_tFO_BOSS, gf_ExGetEssenceBonusToAmon(lv_index), gv_tFO_BOSS, 1);
            TriggerExecute(gt_ObjectivePrimary02Update, true, false);
        }
    }
    return true;
}
void gt_DPrimalAvatar_Init () {
    gt_DPrimalAvatar = TriggerCreate("gt_DPrimalAvatar_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: >D Void Devourer
//--------------------------------------------------------------------------------------------------
bool gt_DVoidDevourer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    fixed lv_newDuration;
    // Variable Initialization
    lv_index = gv_obj_INDEX;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_dR_ExecutionCompleted[lv_index] == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PingSetTooltip(gv_dR_Ping[lv_index], gv_dR_PingTooltip[lv_index]);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), gv_dR_rPA[lv_index], true, false);
    }
    PlayerGroupLoopEnd();
    gf_ExDehakaAddTargetIntoQueue(gv_dR_uPA[lv_index]);
    return true;
}
void gt_DVoidDevourer_Init () {
    gt_DVoidDevourer = TriggerCreate("gt_DVoidDevourer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Drain Ritual Missed Q
//--------------------------------------------------------------------------------------------------
bool gt_DrainRitualMissedQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("This is unacceptable. You are to slow, Commanders! You must change!", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
void gt_DrainRitualMissedQ_Init () {
    gt_DrainRitualMissedQ = TriggerCreate("gt_DrainRitualMissedQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Add Object Into Queue
//--------------------------------------------------------------------------------------------------
bool gt_AddObjectIntoQueue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_objectUnit;
    unitgroup lv_groupOfEssences;
    unitgroup lv_groupOfPrimalAvatars;
    // Variable Initialization
    lv_groupOfEssences = UnitGroupEmpty();
    lv_groupOfPrimalAvatars = UnitGroupEmpty();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitGroupCount(gv_g_Dehaka_QueueObjectGroup, c_unitCountAlive) > 0)) {
            if ((TriggerIsEnabled(gt_SetQTEssenceQ) == false) && (TriggerIsEnabled(gt_QTEFeastRitualStart) == false) && (TriggerIsEnabled(gt_QTEFeastRitualEnd) == false)) {
                TriggerEnable(gt_SetQTEssenceQ, true);
                TriggerEnable(gt_QTEFeastRitualStart, true);
                TriggerEnable(gt_QTEFeastRitualEnd, true);
            }
            else {
                if ((TriggerIsEnabled(gt_SetQTEssenceQ) == true) && (TriggerIsEnabled(gt_QTEFeastRitualStart) == true) && (TriggerIsEnabled(gt_QTEFeastRitualEnd) == true) && (TriggerIsEnabled(gt_SetQTPrimalAvatarQ) == false)) {
                    TriggerEnable(gt_SetQTPrimalAvatarQ, true);
                }
            }
            if ((gf_ExDehakaIsOnAttack() == false) && (gf_ExDehakaIsOnBurrowCharge() == false) && (gv_g_Dehaka_PreparingForBattle == false)) {
                lv_groupOfEssences = UnitGroupFilter("ExEssence", c_playerAny, gv_g_Dehaka_QueueObjectGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                gv_dR_EssencesAmount = UnitGroupCount(lv_groupOfEssences, c_unitCountAlive);
                if ((gv_dR_EssencesAmount > 0)) {
                    gv_obj_INDEX = gf_ExGetDrainRitualIDFromUnit(UnitGroupClosestToPoint(lv_groupOfEssences, UnitGetPosition(gv_dEHAKA_UNIT)));
                    TriggerExecute(gt_SetQTEssenceQ, true, false);
                }
                else {
                    gv_obj_INDEX = gf_ExGetDrainRitualIDFromUnit(UnitGroupClosestToPoint(gv_g_Dehaka_QueueObjectGroup, UnitGetPosition(gv_dEHAKA_UNIT)));
                    TriggerExecute(gt_SetQTPrimalAvatarQ, true, false);
                }
            }
        }
        else {
            TriggerExecute(gt_DehakaGoesHome, true, false);
            TriggerEnable(TriggerGetCurrent(), true);
            break;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gt_AddObjectIntoQueue_Init () {
    gt_AddObjectIntoQueue = TriggerCreate("gt_AddObjectIntoQueue_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set QT Essence Q
//--------------------------------------------------------------------------------------------------
bool gt_SetQTEssenceQ_Func (bool testConds, bool runActions) {
    int autoBDA23F98_val;
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = gv_obj_INDEX;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if (((DistanceBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), UnitGetPosition(gv_dR_Essence[lv_index])) / (0.01 + UnitGetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropMovementSpeed, c_unitPropCurrent))) >= 15.0)) {
        gf_ExDehakaOrderBurrowCharge(RegionRandomPoint(gv_dR_rPA[lv_index]), false);
    }
    else {
        UnitSetFacing(gv_dEHAKA_UNIT, AngleBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), UnitGetPosition(gv_dR_Essence[lv_index])), 1.0);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExDehakaSetBriefingState(true);
    autoBDA23F98_val = RandomInt(1, 5);
    if (autoBDA23F98_val == 1) {
        gf_ExSendTransmissionFromDehaka("Flawless victory. Now your essence is mine.", true);
    }
    else if (autoBDA23F98_val == 2) {
        gf_ExSendTransmissionFromDehaka("I kill, I take essence, I change.", true);
    }
    else if (autoBDA23F98_val == 3) {
        gf_ExSendTransmissionFromDehaka("Time to collect has come.", true);
    }
    else if (autoBDA23F98_val == 4) {
        gf_ExSendTransmissionFromDehaka("More essences are more survival.", true);
    }
    else if (autoBDA23F98_val == 5) {
        gf_ExSendTransmissionFromDehaka("Only the strongest survive!", true);
    }
    else {
    }
    gf_ExDehakaSetBriefingState(false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    gv_obj_INDEX = lv_index;
    TriggerExecute(gt_QTEFeastRitualStart, true, false);
    return true;
}
void gt_SetQTEssenceQ_Init () {
    gt_SetQTEssenceQ = TriggerCreate("gt_SetQTEssenceQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: >QT E Feast Ritual Start
//--------------------------------------------------------------------------------------------------
bool gt_QTEFeastRitualStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = gv_obj_INDEX;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitIsAlive(gv_dEHAKA_UNIT) == true) && (gv_dR_EssenceCollected[lv_index] == false)) {
            if ((UnitHasBehavior2(gv_dEHAKA_UNIT, "ExDehakaFeastOfSurvivalChanneling") == false)) {
                UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingUnit(AbilityCommand("ExFeastOfSurvival", 0), gv_dR_Essence[lv_index]), c_orderQueueReplace);
            }
            if ((UnitHasBehavior2(gv_dEHAKA_UNIT, "ExDehakaFeastOfSurvivalDone") == true)) {
                gv_dR_EssenceCollected[lv_index] = true;
                UnitSetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropLifePercent, 100.0);
                UnitBehaviorAdd(gv_dEHAKA_UNIT, gf_ExGetEssenceBonusToDehaka(lv_index), gv_dEHAKA_UNIT, 1);
                UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExDehakaFeastOfSurvivalDone", c_unitBehaviorCountAll);
                PingDestroy(gv_dR_Ping[lv_index]);
                TriggerExecute(gt_QTEFeastRitualEnd, true, false);
            }
        }
        else {
            break;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}
void gt_QTEFeastRitualStart_Init () {
    gt_QTEFeastRitualStart = TriggerCreate("gt_QTEFeastRitualStart_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: >QT E Feast Ritual End
//--------------------------------------------------------------------------------------------------
bool gt_QTEFeastRitualEnd_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary01Update, true, false);
    return true;
}
void gt_QTEFeastRitualEnd_Init () {
    gt_QTEFeastRitualEnd = TriggerCreate("gt_QTEFeastRitualEnd_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set QT Primal Avatar Q
//--------------------------------------------------------------------------------------------------
bool gt_SetQTPrimalAvatarQ_Func (bool testConds, bool runActions) {
    int autoB8EA7F0C_val;
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = gv_obj_INDEX;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_g_Dehaka_PreparingForBattle = true;
    gv_g_PAUnitTransfer = gv_dR_uPA[lv_index];
    TriggerExecute(gt_PABossBar, true, false);
    gf_ExDehakaOrderBurrowCharge(gv_dR_DehakaAssaultPoint[lv_index], false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoB8EA7F0C_val = RandomInt(1, 3);
    if (autoB8EA7F0C_val == 1) {
        gf_ExSendTransmissionFromDehaka("Going to challenge this.", true);
    }
    else if (autoB8EA7F0C_val == 2) {
        gf_ExSendTransmissionFromDehaka("Time to kill. Time to change.", true);
    }
    else if (autoB8EA7F0C_val == 3) {
        gf_ExSendTransmissionFromDehaka("The true zerg goes hunting.", true);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    gf_ExDehakaOrderAttack(gv_dR_uPA[lv_index]);
    gv_g_Dehaka_PreparingForBattle = false;
    return true;
}
void gt_SetQTPrimalAvatarQ_Init () {
    gt_SetQTPrimalAvatarQ = TriggerCreate("gt_SetQTPrimalAvatarQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Run Execution Stage
//--------------------------------------------------------------------------------------------------
bool gt_RunExecutionStage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = gf_ExGetDrainRitualIDFromTimer(EventTimer());
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitIsAlive(gv_dR_uPA[lv_index]) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TimerWindowShow(gv_g_ExecutionStageWindow, PlayerGroupAll(), false);
    UnitBehaviorRemove(gv_dR_uVD[lv_index], "ExAmonsCover", c_unitBehaviorCountAll);
    UnitBehaviorAdd(gv_dR_uPA[lv_index], "ExVoidDevourerExecution", gv_dR_uVD[lv_index], 1);
    libCOMI_gf_ShareVisionofUnitCoop(gv_dR_uVD[lv_index], true, gv_pLAYER_05_DEHAKA);
    gf_ExDrainRitualFlashPing(lv_index, Color(100.00, 0.00, 0.00), StringToText(""));
    ActorScopeSend(ActorScopeFromUnit(gv_dR_uVD[lv_index]), "Signal ExecutionStart");
    libCOMI_gf_CreateAlertAtUnitCampaign("Trigger", StringExternal("Param/Value/78A61970"), null, gv_dR_uVD[lv_index]);
    libCOMI_gf_SetUnitProgressBarProgress2(gv_dR_uVD[lv_index], FixedToInt(gv_obj_EXECUTION_DURATION));
    libCOMI_gf_ShowHideUnitProgressBar(gv_dR_uVD[lv_index], true);
    gf_ExStartExecutionRitual(lv_index);
    TriggerExecute(gt_TrDehakaExecutionQ, true, false);
    if ((UnitGroupCount(UnitGroupFromId(3), c_unitCountAlive) > 1)) {
        gv_dR_ExecutionRun[lv_index] = true;
        gv_g_ExecutionStageTarget = gv_dR_uPA[lv_index];
        gv_g_ExecutionStageReduction += 12.5;
        TriggerExecute(gt_ExecutionStageTimerRun, true, false);
    }
    else {
        TriggerExecute(gt_ExecutionStageTimerDestroy, true, false);
    }
    return true;
}
void gt_RunExecutionStage_Init () {
    gt_RunExecutionStage = TriggerCreate("gt_RunExecutionStage_Func");
    TriggerAddEventTimer(gt_RunExecutionStage, gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Zorgg]);
    TriggerAddEventTimer(gt_RunExecutionStage, gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Gorrox]);
    TriggerAddEventTimer(gt_RunExecutionStage, gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_RazSha]);
    TriggerAddEventTimer(gt_RunExecutionStage, gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Naraxus]);
    TriggerAddEventTimer(gt_RunExecutionStage, gv_dR_RunExecutionTimer[ge_CoopDrainRitualTarget_PA_Varookh]);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show Execution Tip
//--------------------------------------------------------------------------------------------------
bool gt_ShowExecutionTip_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gf_DisplayCampaignMessage(StringExternal("Param/Value/51B2FFBE"));
    return true;
}
void gt_ShowExecutionTip_Init () {
    gt_ShowExecutionTip = TriggerCreate("gt_ShowExecutionTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Destructable Arch 1
//--------------------------------------------------------------------------------------------------
bool gt_DestructableArch1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    unit lv_arch;
    region lv_damageArea;
    // Variable Initialization
    lv_tempUnit = EventUnit();
    lv_arch = UnitFromId(1571042524);
    lv_damageArea = EventUnitRegion();
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(lv_tempUnit)) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitFilterMatch(lv_tempUnit, 0, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        UnitKill(lv_arch);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), 0.0);
        }
        UnitGroupLoopEnd();
    }
    else {
        Wait(RandomFixed(2.0, 4.0), c_timeGame);
        UnitKill(lv_arch);
    }
    Wait(1.1, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), RandomFixed(10.0, 20.0));
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_DestructableArch1_Init () {
    gt_DestructableArch1 = TriggerCreate("gt_DestructableArch1_Func");
    TriggerAddEventUnitRegion(gt_DestructableArch1, null, RegionFromId(14), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Destructable Arch 2
//--------------------------------------------------------------------------------------------------
bool gt_DestructableArch2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    unit lv_arch;
    region lv_damageArea;
    // Variable Initialization
    lv_tempUnit = EventUnit();
    lv_arch = UnitFromId(2054903835);
    lv_damageArea = EventUnitRegion();
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(lv_tempUnit)) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitFilterMatch(lv_tempUnit, 0, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        UnitKill(lv_arch);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), 0.0);
        }
        UnitGroupLoopEnd();
    }
    else {
        Wait(RandomFixed(2.0, 4.0), c_timeGame);
        UnitKill(lv_arch);
    }
    Wait(1.1, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), RandomFixed(10.0, 20.0));
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_DestructableArch2_Init () {
    gt_DestructableArch2 = TriggerCreate("gt_DestructableArch2_Func");
    TriggerAddEventUnitRegion(gt_DestructableArch2, null, RegionFromId(26), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Destructable Arch 3
//--------------------------------------------------------------------------------------------------
bool gt_DestructableArch3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    unit lv_arch;
    region lv_damageArea;
    // Variable Initialization
    lv_tempUnit = EventUnit();
    lv_arch = UnitFromId(1867022711);
    lv_damageArea = EventUnitRegion();
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(lv_tempUnit)) == true))) {
            return false;
        }
        if (!((UnitFilterMatch(lv_tempUnit, 0, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(lv_arch);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), 0.0);
    }
    UnitGroupLoopEnd();
    Wait(1.1, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), RandomFixed(10.0, 20.0));
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_DestructableArch3_Init () {
    gt_DestructableArch3 = TriggerCreate("gt_DestructableArch3_Func");
    TriggerAddEventUnitRegion(gt_DestructableArch3, null, RegionFromId(29), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Destructable Arch 4
//--------------------------------------------------------------------------------------------------
bool gt_DestructableArch4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    unit lv_arch;
    region lv_damageArea;
    // Variable Initialization
    lv_tempUnit = EventUnit();
    lv_arch = UnitFromId(213281708);
    lv_damageArea = EventUnitRegion();
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(lv_tempUnit)) == true))) {
            return false;
        }
        if (!((UnitFilterMatch(lv_tempUnit, 0, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(lv_arch);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), 0.0);
    }
    UnitGroupLoopEnd();
    Wait(1.1, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_damageArea, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(lv_arch, "ExArchDamage", UnitGroupLoopCurrent(), RandomFixed(10.0, 20.0));
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_DestructableArch4_Init () {
    gt_DestructableArch4 = TriggerCreate("gt_DestructableArch4_Func");
    TriggerAddEventUnitRegion(gt_DestructableArch4, null, RegionFromId(37), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_PABossBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    fixed lv_lifePercent;
    // Variable Initialization
    lv_primalAvatar = gv_g_PAUnitTransfer;
    lv_lifePercent = UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent);
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\btn-boss-zurvan.dds", UnitGetName(lv_primalAvatar), FixedToInt(UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent)));
    libCOMI_gf_SetSingularBossBarBossVoidCampaign(lv_primalAvatar, true);
    libCOMI_gf_SetSingularBossBarStyle(libCOMI_ge_SingularBossBarStyle_BossEnemy);
    libCOMI_gf_ShowHideSingularBossBarVoidCampaign(true);
    while (true) {
        if ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_primalAvatar) == true)) {
            libCOMI_gf_RefreshSingularBossBarVoidCampaign();
        }
        else {
            libCOMI_gf_ShowHideSingularBossBarVoidCampaign(false);
            break;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}
void gt_PABossBar_Init () {
    gt_PABossBar = TriggerCreate("gt_PABossBar_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Get Back
//--------------------------------------------------------------------------------------------------
bool gt_PAGetBack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    int lv_index;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroupFromId(3), lv_primalAvatar) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_index = gf_ExGetDrainRitualIDFromUnit(lv_primalAvatar);
    UnitIssueOrder(gv_dR_uPA[lv_index], OrderTargetingPoint(AbilityCommand("move", 0), gv_dR_pPA[lv_index]), c_orderQueueReplace);
    return true;
}
void gt_PAGetBack_Init () {
    gt_PAGetBack = TriggerCreate("gt_PAGetBack_Func");
    TriggerAddEventUnitRegion(gt_PAGetBack, null, RegionFromId(11), false);
    TriggerAddEventUnitRegion(gt_PAGetBack, null, RegionFromId(12), false);
    TriggerAddEventUnitRegion(gt_PAGetBack, null, RegionFromId(19), false);
    TriggerAddEventUnitRegion(gt_PAGetBack, null, RegionFromId(2), false);
    TriggerAddEventUnitRegion(gt_PAGetBack, null, RegionFromId(6), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Random Attack
//--------------------------------------------------------------------------------------------------
bool gt_PARandomAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroupFromId(3), lv_primalAvatar) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]) && (gv_g_PAGorroxCrashingChargeInProgress == true)) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, gv_dR_rPA[gf_ExGetDrainRitualIDFromUnit(lv_primalAvatar)], UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_PARandomAttack_Init () {
    gt_PARandomAttack = TriggerCreate("gt_PARandomAttack_Func");
    TriggerAddEventUnitDamaged(gt_PARandomAttack, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Hint
//--------------------------------------------------------------------------------------------------
bool gt_PAHint_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gf_DisplayCampaignMessage(StringExternal("Param/Value/3D5016AA"));
    gf_ExRotateObjectivePings();
    return true;
}
void gt_PAHint_Init () {
    gt_PAHint = TriggerCreate("gt_PAHint_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Zorgg Quake
//--------------------------------------------------------------------------------------------------
bool gt_PAZorggQuake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!(((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 5.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 3) || (DistanceBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), UnitGetPosition(lv_primalAvatar)) <= 5.0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, Order(AbilityCommand("ExPAQake", 0)), c_orderQueueReplace);
    Wait(gf_ExGetCoopDifficultyValueReal(25.0, RandomFixed(15.0, 17.0), RandomFixed(15.0, 17.0), RandomFixed(13.0, 15.0)), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAZorggQuake_Init () {
    gt_PAZorggQuake = TriggerCreate("gt_PAZorggQuake_Func");
    TriggerAddEventUnitDamaged(gt_PAZorggQuake, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Zorgg Quake Indicator
//--------------------------------------------------------------------------------------------------
bool gt_PAZorggQuakeIndicator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_quakeIndicator;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_AttachActorToUnit(EventUnit(), "ExPAQuakeWarningSplat", "Ref_Origin");
    lv_quakeIndicator = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    ActorSend(lv_quakeIndicator, "Destroy");
    return true;
}
void gt_PAZorggQuakeIndicator_Init () {
    gt_PAZorggQuakeIndicator = TriggerCreate("gt_PAZorggQuakeIndicator_Func");
    TriggerAddEventUnitAbility(gt_PAZorggQuakeIndicator, null, AbilityCommand("ExPAQake", 0), c_abilEffectStageCast, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Zorgg Primal Frenzy
//--------------------------------------------------------------------------------------------------
bool gt_PAZorggPrimalFrenzy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 85.0))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, Order(AbilityCommand("ExPAPrimalFrenzy", 0)), c_orderQueueReplace);
    Wait(RandomFixed(20.0, 25.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAZorggPrimalFrenzy_Init () {
    gt_PAZorggPrimalFrenzy = TriggerCreate("gt_PAZorggPrimalFrenzy_Func");
    TriggerAddEventUnitDamaged(gt_PAZorggPrimalFrenzy, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Zorgg My Pack A
//--------------------------------------------------------------------------------------------------
bool gt_PAZorggMyPackA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAdd(lv_primalAvatar, "ExPAMyPack", lv_primalAvatar, 1);
    TriggerEnable(gt_PAZorggMyPackB, true);
    return true;
}
void gt_PAZorggMyPackA_Init () {
    gt_PAZorggMyPackA = TriggerCreate("gt_PAZorggMyPackA_Func");
    TriggerAddEventUnitDamaged(gt_PAZorggMyPackA, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Zorgg My Pack B
//--------------------------------------------------------------------------------------------------
bool gt_PAZorggMyPackB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    unit lv_minion;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg]))) {
            return false;
        }
        if (!((UnitGroupCount(gv_g_PAZorggPrimalZerglingsGroup, c_unitCountAlive) <= gf_ExGetCoopDifficultyValueInteger(0, 4, 6, 8)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "PrimalZerglingBurrowed", c_unitCreateIgnorePlacement, gv_pLAYER_06_PRIMALS, RegionRandomPoint(RegionFromName(("PA - Zorgg Minions " + IntToString(RandomInt(1, 4))))), gv_dR_pPA[ge_CoopDrainRitualTarget_PA_Zorgg]);
    lv_minion = UnitLastCreated();
    UnitGroupAdd(gv_g_PAZorggPrimalZerglingsGroup, lv_minion);
    UnitIssueOrder(lv_minion, Order(AbilityCommand("BurrowPrimalZerglingUp", 0)), c_orderQueueReplace);
    UnitBehaviorAdd(lv_minion, "ExOrderAttackOther", gv_dEHAKA_UNIT, 1);
    Wait(gf_ExGetCoopDifficultyValueReal(0.0, RandomFixed(3.0, 4.0), RandomFixed(3.0, 4.0), RandomFixed(2.0, 3.0)), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAZorggMyPackB_Init () {
    gt_PAZorggMyPackB = TriggerCreate("gt_PAZorggMyPackB_Func");
    TriggerEnable(gt_PAZorggMyPackB, false);
    TriggerAddEventUnitDamaged(gt_PAZorggMyPackB, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Zorgg Dies
//--------------------------------------------------------------------------------------------------
bool gt_PAZorggDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minion;
    // Variable Initialization
    if (testConds) {
        if (!((EventUnit() == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PAZorggQuake, false);
    TriggerEnable(gt_PAZorggQuakeIndicator, false);
    TriggerEnable(gt_PAZorggPrimalFrenzy, false);
    TriggerEnable(gt_PAZorggMyPackA, false);
    TriggerEnable(gt_PAZorggMyPackB, false);
    UnitGroupLoopBegin(gv_g_PAZorggPrimalZerglingsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_minion = UnitGroupLoopCurrent();
        UnitBehaviorRemove(lv_minion, "ExOrderAttackOther", c_unitBehaviorCountAll);
        UnitIssueOrder(lv_minion, Order(AbilityCommand("BurrowPrimalZerglingDown", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(gv_g_PAZorggPrimalZerglingsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_PAZorggDies_Init () {
    gt_PAZorggDies = TriggerCreate("gt_PAZorggDies_Func");
    TriggerAddEventUnitDied(gt_PAZorggDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Gorrox Crashing Charge
//--------------------------------------------------------------------------------------------------
bool gt_PAGorroxCrashingCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    point[3] lv_chargePoint;
    point lv_previousPoint;
    int lv_i;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 93.0))) {
            return false;
        }
        if (!((gv_g_PAGorroxCrashingChargeInProgress == false))) {
            return false;
        }
        if (!((gv_g_PAGorroxBarrageInProgress == false))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_g_PAGorroxCrashingChargeInProgress = true;
    lv_chargePoint[0] = PointFromId(585284581);
    lv_chargePoint[1] = PointFromId(1355527424);
    lv_chargePoint[2] = PointFromId(1619434150);
    lv_previousPoint = lv_chargePoint[RandomInt(0, 2)];
    while (true) {
        if ((UnitIsAlive(lv_primalAvatar) == true) && (gv_g_PAGorroxCrashingChargeAmount <= 3)) {
            lv_i = RandomInt(0, 2);
            if ((DistanceBetweenPoints(UnitGetPosition(lv_primalAvatar), lv_chargePoint[lv_i]) > 2.2) && (lv_chargePoint[lv_i] != lv_previousPoint)) {
                lv_previousPoint = lv_chargePoint[lv_i];
                gv_g_PAGorroxCrashingChargeAmount += 1;
                UnitBehaviorAdd(lv_primalAvatar, "ExPACrashingCharge", lv_primalAvatar, 1);
                UnitIssueOrder(lv_primalAvatar, OrderTargetingPoint(AbilityCommand("ExPACrashingCharge", 0), lv_chargePoint[lv_i]), c_orderQueueAddToEnd);
            }
            else {
                UnitBehaviorRemove(lv_primalAvatar, "ExPACrashingCharge", 1);
            }
        }
        else {
            gv_g_PAGorroxCrashingChargeAmount = 0;
            gv_g_PAGorroxCrashingChargeInProgress = false;
            UnitBehaviorRemove(lv_primalAvatar, "ExPACrashingCharge", 1);
            UnitIssueOrder(lv_primalAvatar, OrderTargetingPoint(AbilityCommand("attack", 0), gv_dR_pPA[ge_CoopDrainRitualTarget_PA_Gorrox]), c_orderQueueAddToEnd);
            break;
        }
        Wait(1.5, c_timeGame);
    }
    Wait(RandomFixed(12.0, 15.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAGorroxCrashingCharge_Init () {
    gt_PAGorroxCrashingCharge = TriggerCreate("gt_PAGorroxCrashingCharge_Func");
    TriggerAddEventUnitDamaged(gt_PAGorroxCrashingCharge, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Gorrox Crashing Charge Indicator
//--------------------------------------------------------------------------------------------------
bool gt_PAGorroxCrashingChargeIndicator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_chargeIndicator;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_AttachActorToUnit(EventUnit(), "KraithCrashingChargeIndicator4", "Ref_Origin");
    lv_chargeIndicator = libNtve_gf_ActorLastCreated();
    ActorSend(lv_chargeIndicator, "SetTintColor 255,0,0");
    Wait(1.8, c_timeGame);
    ActorSend(lv_chargeIndicator, "Destroy");
    return true;
}
void gt_PAGorroxCrashingChargeIndicator_Init () {
    gt_PAGorroxCrashingChargeIndicator = TriggerCreate("gt_PAGorroxCrashingChargeIndicator_Func");
    TriggerAddEventUnitAbility(gt_PAGorroxCrashingChargeIndicator, null, AbilityCommand("ExPACrashingCharge", 0), c_abilEffectStagePrep, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Gorrox Armor Overload
//--------------------------------------------------------------------------------------------------
bool gt_PAGorroxArmorOverload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
        if (!((gv_g_PAGorroxCrashingChargeInProgress == false))) {
            return false;
        }
        if (!((gv_g_PAGorroxBarrageInProgress == false))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 8.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, Order(AbilityCommand("ExPAArmorOverload", 0)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAGorroxArmorOverload_Init () {
    gt_PAGorroxArmorOverload = TriggerCreate("gt_PAGorroxArmorOverload_Func");
    TriggerAddEventUnitDamaged(gt_PAGorroxArmorOverload, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Gorrox Barrage
//--------------------------------------------------------------------------------------------------
bool gt_PAGorroxBarrage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0))) {
            return false;
        }
        if (!((gv_g_PAGorroxCrashingChargeInProgress == false))) {
            return false;
        }
        if (!((gv_g_PAGorroxBarrageInProgress == false))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 12.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 5))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_g_PAGorroxBarrageInProgress = true;
    UnitIssueOrder(lv_primalAvatar, Order(AbilityCommand("ExPABarrage", 0)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    gv_g_PAGorroxBarrageInProgress = false;
    Wait(7.5, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAGorroxBarrage_Init () {
    gt_PAGorroxBarrage = TriggerCreate("gt_PAGorroxBarrage_Func");
    TriggerAddEventUnitDamaged(gt_PAGorroxBarrage, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Gorrox Rock Power
//--------------------------------------------------------------------------------------------------
bool gt_PAGorroxRockPower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 87.5))) {
            return false;
        }
        if (!((gv_g_PAGorroxCrashingChargeInProgress == false))) {
            return false;
        }
        if (!((gv_g_PAGorroxBarrageInProgress == false))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("ExPARockPowerCast", -1), c_maxPlayers, PlayerGroupAll(), 110.0, 0.0);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShake(PlayerGroupLoopCurrent(), "Light", "Earthquake", 0.5, 0.5, 1.2);
    }
    PlayerGroupLoopEnd();
    UnitBehaviorAdd(lv_primalAvatar, "ExPARockPower", lv_primalAvatar, 1);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_PRIMALS, "ExPARockPower", 1);
    Wait(gf_ExGetCoopDifficultyValueReal(0.0, 15.0, 17.5, 20.0), c_timeGame);
    UnitBehaviorRemove(lv_primalAvatar, "ExPARockPower", c_unitBehaviorCountAll);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_06_PRIMALS, "ExPARockPower", 0);
    Wait(12.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAGorroxRockPower_Init () {
    gt_PAGorroxRockPower = TriggerCreate("gt_PAGorroxRockPower_Func");
    TriggerAddEventUnitDamaged(gt_PAGorroxRockPower, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Gorrox Dies
//--------------------------------------------------------------------------------------------------
bool gt_PAGorroxDies_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventUnit() == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PAGorroxCrashingCharge, false);
    TriggerEnable(gt_PAGorroxCrashingChargeIndicator, false);
    TriggerEnable(gt_PAGorroxArmorOverload, false);
    TriggerEnable(gt_PAGorroxBarrage, false);
    TriggerEnable(gt_PAGorroxRockPower, false);
    return true;
}
void gt_PAGorroxDies_Init () {
    gt_PAGorroxDies = TriggerCreate("gt_PAGorroxDies_Func");
    TriggerAddEventUnitDied(gt_PAGorroxDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Ash Worms Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaAshWormsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    unit lv_ashWormUnit;
    point lv_ashWormTarget;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= gf_ExGetCoopDifficultyValueInteger(70, 80, 80, 85)))) {
            return false;
        }
        if (!((UnitGroupCount(gv_g_PARazShaAshWormGroup, c_unitCountAlive) <= gf_ExGetCoopDifficultyValueInteger(1, 2, 3, 3)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "AshWorm", c_unitCreateIgnorePlacement, gv_pLAYER_06_PRIMALS, PointFromId(1472781613));
    lv_ashWormUnit = UnitLastCreated();
    UnitGroupAdd(gv_g_PARazShaAshWormGroup, lv_ashWormUnit);
    UnitBehaviorAdd(lv_ashWormUnit, "ExAshWormUnkillable", lv_ashWormUnit, 1);
    UnitSetPropertyFixed(lv_ashWormUnit, c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(1000.0, 1500.0, 1750.0, 2000.0));
    UnitSetPropertyFixed(lv_ashWormUnit, c_unitPropLifePercent, 100.0);
    lv_ashWormTarget = RegionRandomPoint(RegionFromId(31));
    UnitIssueOrder(lv_ashWormUnit, OrderTargetingPoint(AbilityCommand("AshWormBurrowMove", 0), lv_ashWormTarget), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    UnitCreateEffectPoint(lv_ashWormUnit, "ExAshWormDeepTunnelSearch", lv_ashWormTarget);
    Wait(gf_ExGetCoopDifficultyValueReal(30.0, RandomFixed(20.0, 25.0), RandomFixed(20.0, 25.0), 20.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PARazShaAshWormsSpawn_Init () {
    gt_PARazShaAshWormsSpawn = TriggerCreate("gt_PARazShaAshWormsSpawn_Func");
    TriggerAddEventUnitDamaged(gt_PARazShaAshWormsSpawn, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Ash Worms Retreat
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaAshWormsRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ashWorm;
    // Variable Initialization
    lv_ashWorm = EventUnit();
    if (testConds) {
        if (!((UnitGetType(lv_ashWorm) == "AshWorm"))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_ashWorm, c_unitPropLifePercent, c_unitPropCurrent) <= 15.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ExPAAshWormRetreat(lv_ashWorm);
    return true;
}
void gt_PARazShaAshWormsRetreat_Init () {
    gt_PARazShaAshWormsRetreat = TriggerCreate("gt_PARazShaAshWormsRetreat_Func");
    TriggerAddEventUnitDamaged(gt_PARazShaAshWormsRetreat, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Cataclysm
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaCataclysm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha]))) {
            return false;
        }
        if (!((TriggerIsEnabled(gt_PARazShaCataclysmLava) == true))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 65.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShake(PlayerGroupLoopCurrent(), "Light", "Tremor", 1.0, 0.5, 6.0);
    }
    PlayerGroupLoopEnd();
    SoundPlayForPlayer(SoundLink("AC_BurningTide_Quake_Event", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_TrDehakaRazShaLavaQ, true, false);
    gv_g_PARazShaLavaInProgress = true;
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        UnitCreateEffectPoint(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], "ExRazShaCataclysmGeyserCPStart", PointFromId(367301381));
        UnitCreateEffectPoint(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], "ExRazShaCataclysmGeyserCPStart", PointFromId(1064920113));
        UnitCreateEffectPoint(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], "ExRazShaCataclysmGeyserCPStart", PointFromId(241907102));
        UnitCreateEffectPoint(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], "ExRazShaCataclysmGeyserCPStart", PointFromId(1421855987));
        UnitCreateEffectPoint(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], "ExRazShaCataclysmGeyserCPStart", PointFromId(157407845));
        UnitCreateEffectPoint(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], "ExRazShaCataclysmGeyserCPStart", PointFromId(1312666264));
    }
    Wait(2.0, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("TUILavaRising", -1), c_maxPlayers, PlayerGroupAll(), lv_primalAvatar, 1.0, 120.0, 0.0);
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        UnitBehaviorAdd(lv_primalAvatar, "ExRazShaLavaBath", lv_primalAvatar, 1);
        WaterSetState("exZerusLavaDynamic|Alternate Setting", 1.0, c_wtcLinear);
        Wait(0.2, c_timeGame);
        SoundPlayOnUnitForPlayer(SoundLink("AC_Lava_Quake_Bubbling", -1), c_maxPlayers, PlayerGroupAll(), lv_primalAvatar, 1.0, 120.0, 0.0);
        TriggerExecute(gt_PARazShaCataclysmLava, true, false);
        Wait(10.0, c_timeGame);
        WaterSetState("exZerusLavaDynamic|[Default]", 2.5, c_wtcLinear);
        UnitBehaviorRemove(lv_primalAvatar, "ExRazShaLavaBath", c_unitBehaviorCountAll);
    }
    Wait(1.5, c_timeGame);
    gv_g_PARazShaLavaInProgress = false;
    Wait(30.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PARazShaCataclysm_Init () {
    gt_PARazShaCataclysm = TriggerCreate("gt_PARazShaCataclysm_Func");
    TriggerAddEventUnitDamaged(gt_PARazShaCataclysm, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Cataclysm Lava
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaCataclysmLava_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lavaUnit;
    // Variable Initialization
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((gv_g_PARazShaLavaInProgress == true)) {
            UnitSetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], c_unitPropLife, (UnitGetPropertyFixed(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], c_unitPropLife, c_unitPropCurrent) + gf_ExGetCoopDifficultyValueReal(30.0, 50.0, 55.0, 60.0)));
            UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceAnyExcludeSelf, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_lavaUnit = UnitGroupLoopCurrent();
                if ((CliffLevel(UnitGetPosition(lv_lavaUnit)) == CliffLevel(UnitGetPosition(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha])))) {
                    UnitBehaviorAdd(lv_lavaUnit, "ExPACataclysmBurningGround", gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha], 1);
                    if ((lv_lavaUnit == gv_dEHAKA_UNIT) && (TriggerIsEnabled(gt_PARazShaCataclysmDehaka) == true)) {
                        UnitBehaviorAdd(gv_dEHAKA_UNIT, "ExOrderMoveOutFromLavaA", gv_dEHAKA_UNIT, 1);
                        TriggerExecute(gt_PARazShaCataclysmDehaka, true, false);
                    }
                }
            }
            UnitGroupLoopEnd();
        }
        else {
            TriggerEnable(TriggerGetCurrent(), true);
            break;
        }
        Wait(0.4, c_timeGame);
    }
    return true;
}
void gt_PARazShaCataclysmLava_Init () {
    gt_PARazShaCataclysmLava = TriggerCreate("gt_PARazShaCataclysmLava_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Cataclysm Dehaka
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaCataclysmDehaka_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((gv_g_PARazShaLavaInProgress == true) && (UnitIsAlive(gv_dEHAKA_UNIT) == true)) {
            if ((libNtve_gf_UnitInRegion(gv_dEHAKA_UNIT, RegionFromId(24)) == false) && (UnitHasBehavior2(gv_dEHAKA_UNIT, "ExOrderMoveOutFromLavaB") == false)) {
                UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
            }
            else {
                if ((UnitHasBehavior2(gv_dEHAKA_UNIT, "ExOrderMoveOutFromLavaB") == true)) {
                    if ((libNtve_gf_UnitInRegion(gv_dEHAKA_UNIT, RegionFromId(24)) == false)) {
                        UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitGetFacing(gv_dEHAKA_UNIT) != 315.0) && (UnitOrderCount(gv_dEHAKA_UNIT) == 0)) {
                            UnitSetFacing(gv_dEHAKA_UNIT, 315.0, 1.0);
                        }
                    }
                    if ((UnitHasBehavior2(gv_dEHAKA_UNIT, "ExPACataclysmBurningGround") == true)) {
                        UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExOrderMoveOutFromLavaB", c_unitBehaviorCountAll);
                    }
                }
                else {
                    UnitBehaviorAdd(gv_dEHAKA_UNIT, "ExOrderMoveOutFromLavaB", gv_dEHAKA_UNIT, 1);
                }
            }
        }
        else {
            UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExOrderMoveOutFromLavaA", c_unitBehaviorCountAll);
            UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExOrderMoveOutFromLavaB", c_unitBehaviorCountAll);
            TriggerEnable(gt_TrDehakaRazShaLavaQ, true);
            TriggerEnable(TriggerGetCurrent(), true);
            break;
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}
void gt_PARazShaCataclysmDehaka_Init () {
    gt_PARazShaCataclysmDehaka = TriggerCreate("gt_PARazShaCataclysmDehaka_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Fire Breath
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaFireBreath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    unit lv_tempTarget;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    lv_tempTarget = UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 10.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
        if (!((gv_g_PARazShaLavaInProgress == false))) {
            return false;
        }
        if (!((gv_g_PARazShaFireBreathInProgress == false))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!((lv_tempTarget != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_g_PARazShaFireBreathInProgress = true;
    UnitIssueOrder(lv_primalAvatar, OrderTargetingPoint(AbilityCommand("ExPAFirebreath", 0), UnitGetPosition(lv_tempTarget)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    gv_g_PARazShaFireBreathInProgress = false;
    Wait(gf_ExGetCoopDifficultyValueReal(20.0, RandomFixed(10.0, 12.0), RandomFixed(10.0, 12.0), 10.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PARazShaFireBreath_Init () {
    gt_PARazShaFireBreath = TriggerCreate("gt_PARazShaFireBreath_Func");
    TriggerAddEventUnitDamaged(gt_PARazShaFireBreath, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Living Flame
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaLivingFlame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    unit lv_tempTarget;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    lv_tempTarget = UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 20.0), UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 93.0))) {
            return false;
        }
        if (!((gv_g_PARazShaFireBreathInProgress == false))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!((lv_tempTarget != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, OrderTargetingUnit(AbilityCommand("ExRazShaLivingFlame", 0), lv_tempTarget), c_orderQueueReplace);
    Wait(RandomFixed(10.0, 12.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PARazShaLivingFlame_Init () {
    gt_PARazShaLivingFlame = TriggerCreate("gt_PARazShaLivingFlame_Func");
    TriggerAddEventUnitDamaged(gt_PARazShaLivingFlame, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Raz'Sha Dies
//--------------------------------------------------------------------------------------------------
bool gt_PARazShaDies_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventUnit() == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PARazShaAshWormsSpawn, false);
    TriggerEnable(gt_PARazShaAshWormsRetreat, false);
    TriggerEnable(gt_PARazShaCataclysm, false);
    TriggerEnable(gt_PARazShaCataclysmDehaka, false);
    TriggerEnable(gt_TrDehakaRazShaLavaQ, false);
    TriggerEnable(gt_PARazShaFireBreath, false);
    TriggerEnable(gt_PARazShaLivingFlame, false);
    UnitGroupLoopBegin(gv_g_PARazShaAshWormGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_ExPAAshWormRetreat(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_PARazShaDies_Init () {
    gt_PARazShaDies = TriggerCreate("gt_PARazShaDies_Func");
    TriggerAddEventUnitDied(gt_PARazShaDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Acid Vormit
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusAcidVormit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    unitgroup lv_acidGroup;
    unit lv_tempUnit;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    lv_acidGroup = UnitGroupEmpty();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, gv_dR_rPA[ge_CoopDrainRitualTarget_PA_Naraxus], UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_tempUnit = UnitGroupLoopCurrent();
        if ((UnitHasBehavior2(lv_tempUnit, "PukePuddleSlow") == false)) {
            UnitGroupAdd(lv_acidGroup, lv_tempUnit);
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_acidGroup, c_unitCountAlive) > 0)) {
        UnitIssueOrder(lv_primalAvatar, OrderTargetingPoint(AbilityCommand("SlivanPuke", 0), UnitGetPosition(UnitGroupRandomUnit(lv_acidGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    Wait(RandomFixed(7.0, 10.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PANaraxusAcidVormit_Init () {
    gt_PANaraxusAcidVormit = TriggerCreate("gt_PANaraxusAcidVormit_Func");
    TriggerAddEventUnitDamaged(gt_PANaraxusAcidVormit, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Creepers Start
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusCreepersStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 80.0))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorAdd(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus], "ExPAGenerateCreepers", gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus], 1);
    TriggerEnable(gt_PANaraxusCreepersInit, true);
    TriggerEnable(gt_PANaraxusCreepersSpawn, true);
    TriggerExecute(gt_PANaraxusCreepersMove, true, false);
    return true;
}
void gt_PANaraxusCreepersStart_Init () {
    gt_PANaraxusCreepersStart = TriggerCreate("gt_PANaraxusCreepersStart_Func");
    TriggerAddEventUnitDamaged(gt_PANaraxusCreepersStart, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Creepers Init
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusCreepersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creeper;
    // Variable Initialization
    lv_creeper = EventUnit();
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetOwner(lv_creeper) == gv_pLAYER_06_PRIMALS))) {
            return false;
        }
        if (!((UnitGetType(lv_creeper) == "SlivanCreep"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_g_PANaraxusCreeperGroup, lv_creeper);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_creeper, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_dR_rPA[ge_CoopDrainRitualTarget_PA_Naraxus])), c_orderQueueReplace);
    return true;
}
void gt_PANaraxusCreepersInit_Init () {
    gt_PANaraxusCreepersInit = TriggerCreate("gt_PANaraxusCreepersInit_Func");
    TriggerEnable(gt_PANaraxusCreepersInit, false);
    TriggerAddEventUnitRegion(gt_PANaraxusCreepersInit, null, RegionFromId(2), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Creepers Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusCreepersSpawn_Func (bool testConds, bool runActions) {
    int auto3454D919_val;
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_g_PANaraxusCreeperIndex += 1;
    if ((gv_g_PANaraxusCreeperIndex >= 12)) {
        gv_g_PANaraxusCreeperIndex = 0;
    }
    auto3454D919_val = gv_g_PANaraxusCreeperIndex;
    if (auto3454D919_val == 0) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn00", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 1) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn01", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 2) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn02", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 3) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn03", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 4) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn04", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 5) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn05", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 6) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn06", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 7) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn07", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 8) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn08", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 9) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn09", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 10) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn10", lv_primalAvatar, 1);
    }
    else if (auto3454D919_val == 11) {
        UnitBehaviorAdd(lv_primalAvatar, "SlivanCreepSpawn11", lv_primalAvatar, 1);
    }
    else {
    }
    Wait(gf_ExGetCoopDifficultyValueReal(RandomFixed(2.0, 2.4), RandomFixed(1.6, 2.0), RandomFixed(1.3, 1.7), RandomFixed(1.3, 1.5)), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PANaraxusCreepersSpawn_Init () {
    gt_PANaraxusCreepersSpawn = TriggerCreate("gt_PANaraxusCreepersSpawn_Func");
    TriggerEnable(gt_PANaraxusCreepersSpawn, false);
    TriggerAddEventUnitDamaged(gt_PANaraxusCreepersSpawn, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Creepers Move
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusCreepersMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creeper;
    unitgroup lv_enemiesOfNaraxus;
    region lv_creeperBoomRegion;
    // Variable Initialization
    lv_enemiesOfNaraxus = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        Wait(1.0, c_timeGame);
        UnitGroupAddUnitGroup(lv_enemiesOfNaraxus, UnitGroup(null, gv_pLAYER_01_USER, gv_dR_rPA[ge_CoopDrainRitualTarget_PA_Naraxus], UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_enemiesOfNaraxus, UnitGroup(null, gv_pLAYER_02_USER, gv_dR_rPA[ge_CoopDrainRitualTarget_PA_Naraxus], UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitIsAlive(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]) == true)) {
            UnitGroupLoopBegin(gv_g_PANaraxusCreeperGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_creeper = UnitGroupLoopCurrent();
                if ((UnitGroupCount(lv_enemiesOfNaraxus, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lv_creeper, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_creeper), lv_enemiesOfNaraxus))), c_orderQueueReplace);
                    libNtve_gf_SendActorMessageToUnit(lv_creeper, "Signal Aggro");
                    if ((UnitHasBehavior(lv_creeper, "SlivanCreepBoom") == false)) {
                        lv_creeperBoomRegion = RegionCircle(UnitGetPosition(lv_creeper), 3.0);
                        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, lv_creeperBoomRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, lv_creeperBoomRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_05_DEHAKA, lv_creeperBoomRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
                            UnitBehaviorAdd(lv_creeper, "SlivanCreepBoom", lv_creeper, 1);
                        }
                    }
                }
                else {
                    if ((RandomInt(1, 8) == 1)) {
                        UnitIssueOrder(lv_creeper, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_dR_rPA[ge_CoopDrainRitualTarget_PA_Naraxus])), c_orderQueueReplace);
                    }
                }
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(gv_g_PANaraxusCreeperGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_creeper = UnitGroupLoopCurrent();
                libNtve_gf_SendActorMessageToUnit(lv_creeper, "Signal Aggro");
                if ((UnitHasBehavior(lv_creeper, "SlivanCreepBoom") == false)) {
                    UnitBehaviorAdd(lv_creeper, "SlivanCreepBoom", lv_creeper, 1);
                }
            }
            UnitGroupLoopEnd();
            UnitGroupClear(gv_g_PANaraxusAmonForce);
            break;
        }
    }
    return true;
}
void gt_PANaraxusCreepersMove_Init () {
    gt_PANaraxusCreepersMove = TriggerCreate("gt_PANaraxusCreepersMove_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Multiple Attack
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusMultipleAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    unitgroup lv_tempGroup;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    lv_tempGroup = UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 20.0), UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0))) {
            return false;
        }
        if (!((UnitGroupCount(lv_tempGroup, c_unitCountAlive) >= 5))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, OrderTargetingUnit(AbilityCommand("ExPAMultipleAttack", 0), UnitGroupRandomUnit(lv_tempGroup, c_unitCountAlive)), c_orderQueueReplace);
    Wait(RandomFixed(8.0, 10.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PANaraxusMultipleAttack_Init () {
    gt_PANaraxusMultipleAttack = TriggerCreate("gt_PANaraxusMultipleAttack_Func");
    TriggerAddEventUnitDamaged(gt_PANaraxusMultipleAttack, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Amon's Drop
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusAmonsDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    point lv_dropPoint;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 65.0))) {
            return false;
        }
        if (!((UnitGroupCount(gv_g_PANaraxusAmonForce, c_unitCountAlive) <= gf_ExGetCoopDifficultyValueInteger(0, 5, 7, 10)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_dropPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]), 6.0));
    TriggerExecute(gt_TrDehakaAmonsDropPAQ, true, false);
    gf_ExAIShowDropPing(lv_dropPoint);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_DROP_PLAYER, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_dropPoint, true);
    UnitGroupAddUnitGroup(gv_g_PANaraxusAmonForce, libCOMI_gf_LastCreatedCoopAttackForce());
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_g_PANaraxusAmonForce);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ExOrderAttackOther", lv_primalAvatar, 1);
    }
    UnitGroupLoopEnd();
    Wait(20.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PANaraxusAmonsDrop_Init () {
    gt_PANaraxusAmonsDrop = TriggerCreate("gt_PANaraxusAmonsDrop_Func");
    TriggerAddEventUnitDamaged(gt_PANaraxusAmonsDrop, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Naraxus Dies
//--------------------------------------------------------------------------------------------------
bool gt_PANaraxusDies_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventUnit() == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PANaraxusAcidVormit, false);
    TriggerEnable(gt_PANaraxusCreepersStart, false);
    TriggerEnable(gt_PANaraxusCreepersInit, false);
    TriggerEnable(gt_PANaraxusCreepersSpawn, false);
    TriggerEnable(gt_PANaraxusCreepersMove, false);
    TriggerEnable(gt_PANaraxusAmonsDrop, false);
    gf_ExAIDispatchTrashForce(gv_g_PANaraxusAmonForce);
    return true;
}
void gt_PANaraxusDies_Init () {
    gt_PANaraxusDies = TriggerCreate("gt_PANaraxusDies_Func");
    TriggerAddEventUnitDied(gt_PANaraxusDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Varookh Mind Explosion
//--------------------------------------------------------------------------------------------------
bool gt_PAVarookhMindExplosion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 98.0))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, OrderTargetingUnit(AbilityCommand("ExVarookhMindExplosion", 0), UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    Wait(RandomFixed(6.0, 8.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAVarookhMindExplosion_Init () {
    gt_PAVarookhMindExplosion = TriggerCreate("gt_PAVarookhMindExplosion_Func");
    TriggerAddEventUnitDamaged(gt_PAVarookhMindExplosion, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Varookh Twilight Strike
//--------------------------------------------------------------------------------------------------
bool gt_PAVarookhTwilightStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_primalAvatar, "ExPrimalAvatarAwakening") == false))) {
            return false;
        }
        if (!((UnitGroupCount(gv_g_PAVarookhTwilightEnergyGroup, c_unitCountAlive) < gf_ExGetCoopDifficultyValueInteger(3, 5, 5, 6)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, OrderTargetingPoint(AbilityCommand("ExPATwilightStrike", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
    Wait(gf_ExGetCoopDifficultyValueReal(25.0, 17.0, 17.0, 15.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAVarookhTwilightStrike_Init () {
    gt_PAVarookhTwilightStrike = TriggerCreate("gt_PAVarookhTwilightStrike_Func");
    TriggerAddEventUnitDamaged(gt_PAVarookhTwilightStrike, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Varookh Twilight Energy Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PAVarookhTwilightEnergySpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_twilightEnergy;
    // Variable Initialization
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ExPATwilightEnergy", c_unitCreateIgnorePlacement, gv_pLAYER_06_PRIMALS, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_twilightEnergy = UnitLastCreated();
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_twilightEnergy, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_dR_rPA[ge_CoopDrainRitualTarget_PA_Varookh])), c_orderQueueReplace);
    UnitGroupAdd(gv_g_PAVarookhTwilightEnergyGroup, lv_twilightEnergy);
    return true;
}
void gt_PAVarookhTwilightEnergySpawn_Init () {
    gt_PAVarookhTwilightEnergySpawn = TriggerCreate("gt_PAVarookhTwilightEnergySpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_PAVarookhTwilightEnergySpawn, c_playerAny, "VoidThrasherLightningAoECreatePersistent");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Varookh Amon's Drop
//--------------------------------------------------------------------------------------------------
bool gt_PAVarookhAmonsDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    point lv_dropPoint;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 65.0))) {
            return false;
        }
        if (!((UnitGroupCount(gv_g_PAVarookhAmonForce, c_unitCountAlive) <= gf_ExGetCoopDifficultyValueInteger(0, 5, 7, 10)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_dropPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]), 6.0));
    TriggerExecute(gt_TrDehakaAmonsDropPAQ, true, false);
    gf_ExAIShowDropPing(lv_dropPoint);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_DROP_PLAYER, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_dropPoint, true);
    UnitGroupAddUnitGroup(gv_g_PAVarookhAmonForce, libCOMI_gf_LastCreatedCoopAttackForce());
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_g_PAVarookhAmonForce);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ExOrderAttackOther", lv_primalAvatar, 1);
    }
    UnitGroupLoopEnd();
    Wait(20.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_PAVarookhAmonsDrop_Init () {
    gt_PAVarookhAmonsDrop = TriggerCreate("gt_PAVarookhAmonsDrop_Func");
    TriggerAddEventUnitDamaged(gt_PAVarookhAmonsDrop, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PA Varookh Dies
//--------------------------------------------------------------------------------------------------
bool gt_PAVarookhDies_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventUnit() == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PAVarookhMindExplosion, false);
    TriggerEnable(gt_PAVarookhTwilightStrike, false);
    TriggerEnable(gt_PAVarookhTwilightEnergySpawn, false);
    TriggerEnable(gt_PAVarookhAmonsDrop, false);
    UnitGroupLoopBegin(gv_g_PAVarookhTwilightEnergyGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_ExAIDispatchTrashForce(gv_g_PAVarookhAmonForce);
    return true;
}
void gt_PAVarookhDies_Init () {
    gt_PAVarookhDies = TriggerCreate("gt_PAVarookhDies_Func");
    TriggerAddEventUnitDied(gt_PAVarookhDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Anomalies Event Init Q
//--------------------------------------------------------------------------------------------------
bool gt_AnomaliesEventInitQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(50.0, 60.0), c_timeGame);
    while (!((gf_ExDehakaFreeToTalkOnTheBase() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveOptionalCreate, true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("Something is hidden. Can it bring evolve? Find it!", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_BAnomaliesHint, true, false);
    TriggerExecute(gt_BSpawnAnomalies, true, false);
    TriggerExecute(gt_BMarkAnomalies, true, false);
    TriggerEnable(gt_BAnomalyInterraction, true);
    TriggerEnable(gt_BAnomalyCounter, true);
    TriggerEnable(gt_BCallAmonForces, true);
    TriggerEnable(gt_BWorkersBuff, true);
    TriggerQueueExit();
    return true;
}
void gt_AnomaliesEventInitQ_Init () {
    gt_AnomaliesEventInitQ = TriggerCreate("gt_AnomaliesEventInitQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: B Anomalies Hint
//--------------------------------------------------------------------------------------------------
bool gt_BAnomaliesHint_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gf_DisplayCampaignMessage(StringExternal("Param/Value/A836A405"));
    return true;
}
void gt_BAnomaliesHint_Init () {
    gt_BAnomaliesHint = TriggerCreate("gt_BAnomaliesHint_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: B Spawn Anomalies
//--------------------------------------------------------------------------------------------------
bool gt_BSpawnAnomalies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexAnomaly;
    unit lv_anomaly;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while ((lv_index <= 3)) {
        UnitCreate(1, "ExAnomaly", c_unitCreateIgnorePlacement, 0, PointFromName(("Anomaly " + IntToString(RandomInt(lv_indexAnomaly, (lv_indexAnomaly + 3))))), 270.0);
        lv_anomaly = UnitLastCreated();
        lv_indexAnomaly = (lv_indexAnomaly + 4);
        gf_ExCreateminimappingattachedonunit(lv_anomaly, "PingTriangle", StringExternal("Param/Value/A295E368"), Color(100.00, 100.00, 50.20), 0.33, 0.0, false);
        UnitGroupAdd(gv_g_AnomaliesGroup, lv_anomaly);
        lv_index += 1;
    }
    return true;
}
void gt_BSpawnAnomalies_Init () {
    gt_BSpawnAnomalies = TriggerCreate("gt_BSpawnAnomalies_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: B Mark Anomalies
//--------------------------------------------------------------------------------------------------
bool gt_BMarkAnomalies_Func (bool testConds, bool runActions) {
    int auto2A5E8F67_ae;
    int auto2A5E8F67_ai;
    // Variable Declarations
    int lv_index;
    fixed lv_duration;
    int lv_totalAnomalies;
    // Variable Initialization
    lv_duration = 15.0;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(500.0, c_timeGame);
    if ((ObjectiveGetState(gv_objective_Optional) != c_objectiveStateCompleted)) {
        lv_totalAnomalies = UnitGroupCount(gv_g_AnomaliesGroup, c_unitCountAlive);
        if ((lv_totalAnomalies > 1)) {
            gf_DisplayCampaignMessage(StringExternal("Param/Value/FEBA5361"));
        }
        else {
            gf_DisplayCampaignMessage(StringExternal("Param/Value/9D875F46"));
        }
        auto2A5E8F67_ae = lv_totalAnomalies;
        auto2A5E8F67_ai = 1;
        lv_index = 1;
        for ( ; ( (auto2A5E8F67_ai >= 0 && lv_index <= auto2A5E8F67_ae) || (auto2A5E8F67_ai <= 0 && lv_index >= auto2A5E8F67_ae) ) ; lv_index += auto2A5E8F67_ai ) {
            gf_ExCreateminimappingattachedonunit(UnitGroupUnit(gv_g_AnomaliesGroup, lv_index), "PingSimple", StringExternal("Param/Value/9BF7D555"), Color(100.00, 100.00, 50.20), 0.45, lv_duration, true);
            lv_duration += 0.25;
        }
    }
    return true;
}
void gt_BMarkAnomalies_Init () {
    gt_BMarkAnomalies = TriggerCreate("gt_BMarkAnomalies_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: B Anomaly Interraction
//--------------------------------------------------------------------------------------------------
bool gt_BAnomalyInterraction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    unit lv_anomaly;
    int lv_player;
    // Variable Initialization
    lv_worker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_anomaly = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_worker);
    if (testConds) {
        if (!((UnitGetType(lv_anomaly) == "ExAnomaly"))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_anomaly, "ExBonusInteractionWithWorker") == false))) {
            return false;
        }
        if (!((UnitFilterMatch(lv_worker, lv_player, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterBuried), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterStunned - 32)))) == true))) {
            return false;
        }
        if (!((UnitHasBehavior2(lv_worker, "ExBonusGatheringInformationTrigger") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(lv_worker, "ExBonusGatheringInformationTrigger", lv_anomaly, 1);
    while (true) {
        if ((lv_worker != null) && (lv_anomaly != null) && (UnitIsAlive(lv_worker) == true) && (UnitIsAlive(lv_anomaly) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_worker), UnitGetPosition(lv_anomaly)) <= 2.0) && (UnitFilterMatch(lv_anomaly, lv_player, UnitFilter((1 << c_targetFilterVisible), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitFilterMatch(lv_worker, lv_player, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterBuried), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterStunned - 32)))) == true) && (UnitGetOwner(lv_worker) == lv_player)) {
            UnitBehaviorAdd(lv_anomaly, "ExBonusInteractionWithWorker", lv_worker, 1);
        }
        else {
            UnitBehaviorRemove(lv_worker, "ExBonusGatheringInformationTrigger", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_anomaly, "ExBonusInteractionWithWorker", c_unitBehaviorCountAll);
            break;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}
void gt_BAnomalyInterraction_Init () {
    gt_BAnomalyInterraction = TriggerCreate("gt_BAnomalyInterraction_Func");
    TriggerEnable(gt_BAnomalyInterraction, false);
    TriggerAddEventPlayerEffectUsed(gt_BAnomalyInterraction, c_playerAny, "ExBonusAnomalyABTargetTrigger");
}
//--------------------------------------------------------------------------------------------------
// Trigger: B Anomaly Counter
//--------------------------------------------------------------------------------------------------
bool gt_BAnomalyCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_workerUnit;
    int lv_workerOwner;
    string lv_anomalyBuff;
    // Variable Initialization
    lv_workerUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_workerOwner = UnitGetOwner(lv_workerUnit);
    lv_anomalyBuff = ("ExBonusAnomalyBlessing" + IntToString(RandomInt(0, 6)));
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitBehaviorAdd(lv_workerUnit, (lv_anomalyBuff), lv_workerUnit, 1);
    if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_anomalyBuff, "Alignment", c_playerAny) == 2)) {
        gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Negative] += 1;
    }
    else {
        gv_g_AnomaliesAlignmentTries[ge_CoopAnomalyAlignment_AA_Positive] += 1;
    }
    gv_g_ScoreValue_AnomaliesDepleted[lv_workerOwner] += 1;
    PlayerScoreValueSetFromInt(lv_workerOwner, "ExCoopScoreAnomaliesDepleted", gv_g_ScoreValue_AnomaliesDepleted[lv_workerOwner]);
    TriggerExecute(gt_ObjectiveOptionalUpdate, true, false);
    return true;
}
void gt_BAnomalyCounter_Init () {
    gt_BAnomalyCounter = TriggerCreate("gt_BAnomalyCounter_Func");
    TriggerEnable(gt_BAnomalyCounter, false);
    TriggerAddEventPlayerEffectUsed(gt_BAnomalyCounter, c_playerAny, "ExBonusAnomalyCounterTrigger");
}
//--------------------------------------------------------------------------------------------------
// Trigger: B Call Amon Forces
//--------------------------------------------------------------------------------------------------
bool gt_BCallAmonForces_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_ExGetCoopDifficultyLevel() != 1) && (RandomFixed(0.0, 100.0) < gf_ExGetCoopDifficultyValueReal(0.0, 30.0, 35.0, 40.0))) {
        gf_ExAIDropAmonForcesNearAnomaly(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 1.25, 360.0));
        TriggerExecute(gt_TrDehakaAmonsDropBonusQ, true, false);
    }
    Wait(90.0, c_timeGame);
    if ((ObjectiveGetState(gv_objective_Optional) != c_objectiveStateCompleted)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_BCallAmonForces_Init () {
    gt_BCallAmonForces = TriggerCreate("gt_BCallAmonForces_Func");
    TriggerEnable(gt_BCallAmonForces, false);
    TriggerAddEventPlayerEffectUsed(gt_BCallAmonForces, c_playerAny, "ExBonusAnomalyCallAmon");
}
//--------------------------------------------------------------------------------------------------
// Trigger: B Workers Buff
//--------------------------------------------------------------------------------------------------
bool gt_BWorkersBuff_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((ObjectiveGetState(gv_objective_Optional) != c_objectiveStateCompleted))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_05_DEHAKA, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ExBonusInSearchOfAnomalies", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_BWorkersBuff_Init () {
    gt_BWorkersBuff = TriggerCreate("gt_BWorkersBuff_Func");
    TriggerEnable(gt_BWorkersBuff, false);
    TriggerAddEventTimePeriodic(gt_BWorkersBuff, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Anomalies Event Stop
//--------------------------------------------------------------------------------------------------
bool gt_AnomaliesEventStop_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BAnomalyInterraction, false);
    TriggerEnable(gt_BAnomalyCounter, false);
    TriggerEnable(gt_BCallAmonForces, false);
    TriggerEnable(gt_BWorkersBuff, false);
    UnitGroupLoopBegin(gv_g_AnomaliesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_ExAIDispatchTrashForce(gv_g_AnomaliesAmonForce);
    return true;
}
void gt_AnomaliesEventStop_Init () {
    gt_AnomaliesEventStop = TriggerCreate("gt_AnomaliesEventStop_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Event Init
//--------------------------------------------------------------------------------------------------
bool gt_OmoshEventInit_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_ExDehakaOrderBurrowCharge(PointFromId(114906119), false);
    while (!((gf_ExDehakaFreeToTalkOnTheBase() == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_OmoshEventStartQ, true, false);
    return true;
}
void gt_OmoshEventInit_Init () {
    gt_OmoshEventInit = TriggerCreate("gt_OmoshEventInit_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Event Start Q
//--------------------------------------------------------------------------------------------------
bool gt_OmoshEventStartQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideUnit(gv_oMOSH_UNIT, true);
    libNtve_gf_PauseUnit(gv_oMOSH_UNIT, false);
    gf_ExOmoshMoveToPoint(true);
    gv_g_PAUnitTransfer = gv_oMOSH_UNIT;
    TriggerExecute(gt_PABossBar, true, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("Must kill this flying Avatar. His essence is so rare.", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerEnable(gt_OmoshBlinksAround, true);
    TriggerEnable(gt_OmoshGetBack, true);
    TriggerQueueExit();
    return true;
}
void gt_OmoshEventStartQ_Init () {
    gt_OmoshEventStartQ = TriggerCreate("gt_OmoshEventStartQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Blinks Around
//--------------------------------------------------------------------------------------------------
bool gt_OmoshBlinksAround_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitIsAlive(gv_oMOSH_UNIT) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ExOmoshMoveToPoint(false);
    TriggerExecute(gt_OmoshCallsDehakaFightQ, true, false);
    return true;
}
void gt_OmoshBlinksAround_Init () {
    gt_OmoshBlinksAround = TriggerCreate("gt_OmoshBlinksAround_Func");
    TriggerEnable(gt_OmoshBlinksAround, false);
    TriggerAddEventTimePeriodic(gt_OmoshBlinksAround, 70.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Calls Dehaka Fight Q
//--------------------------------------------------------------------------------------------------
bool gt_OmoshCallsDehakaFightQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("<Roar> Nowhere place to hide from Dehaka!", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerEnable(gt_DehakaHuntingOmosh, true);
    TriggerQueueExit();
    return true;
}
void gt_OmoshCallsDehakaFightQ_Init () {
    gt_OmoshCallsDehakaFightQ = TriggerCreate("gt_OmoshCallsDehakaFightQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Hunting Omosh
//--------------------------------------------------------------------------------------------------
bool gt_DehakaHuntingOmosh_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitIsAlive(gv_oMOSH_UNIT) == true))) {
            return false;
        }
        if (!((gf_ExDehakaIsOnBurrowCharge() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((DistanceBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), UnitGetPosition(gv_oMOSH_UNIT)) / (0.01 + UnitGetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropMovementSpeed, c_unitPropCurrent))) >= 15.0)) {
        UnitBehaviorRemove(gv_oMOSH_UNIT, "ExOrderAttackPA", c_unitBehaviorCountAll);
        gf_ExDehakaOrderBurrowCharge(PointWithOffsetPolar(UnitGetPosition(gv_oMOSH_UNIT), 1.0, 360.0), false);
    }
    else {
        if (true) {
            UnitBehaviorAdd(gv_oMOSH_UNIT, "ExOrderAttackPA", gv_dEHAKA_UNIT, 1);
        }
    }
    return true;
}
void gt_DehakaHuntingOmosh_Init () {
    gt_DehakaHuntingOmosh = TriggerCreate("gt_DehakaHuntingOmosh_Func");
    TriggerEnable(gt_DehakaHuntingOmosh, false);
    TriggerAddEventTimePeriodic(gt_DehakaHuntingOmosh, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Get Back
//--------------------------------------------------------------------------------------------------
bool gt_OmoshGetBack_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventUnit() == gv_oMOSH_UNIT))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(gv_oMOSH_UNIT, OrderTargetingPoint(AbilityCommand("move", 0), gv_dR_pPA[gf_ExGetDrainRitualIDFromUnit(gv_oMOSH_UNIT)]), c_orderQueueReplace);
    return true;
}
void gt_OmoshGetBack_Init () {
    gt_OmoshGetBack = TriggerCreate("gt_OmoshGetBack_Func");
    TriggerEnable(gt_OmoshGetBack, false);
    TriggerAddEventUnitRegion(gt_OmoshGetBack, null, RegionFromId(11), false);
    TriggerAddEventUnitRegion(gt_OmoshGetBack, null, RegionFromId(12), false);
    TriggerAddEventUnitRegion(gt_OmoshGetBack, null, RegionFromId(19), false);
    TriggerAddEventUnitRegion(gt_OmoshGetBack, null, RegionFromId(2), false);
    TriggerAddEventUnitRegion(gt_OmoshGetBack, null, RegionFromId(6), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Random Attack
//--------------------------------------------------------------------------------------------------
bool gt_OmoshRandomAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((lv_primalAvatar == gv_oMOSH_UNIT))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, gv_dR_rPA[gf_ExGetDrainRitualIDFromUnit(lv_primalAvatar)], UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    Wait(12.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_OmoshRandomAttack_Init () {
    gt_OmoshRandomAttack = TriggerCreate("gt_OmoshRandomAttack_Func");
    TriggerAddEventUnitDamaged(gt_OmoshRandomAttack, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Tornado
//--------------------------------------------------------------------------------------------------
bool gt_OmoshTornado_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    unit lv_tornado;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_oMOSH_UNIT))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "MutatorTornado", c_unitCreateIgnorePlacement, gv_pLAYER_06_PRIMALS, UnitGetPosition(gv_oMOSH_UNIT), UnitGetFacing(gv_oMOSH_UNIT));
    lv_tornado = UnitLastCreated();
    UnitIssueOrder(lv_tornado, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_tornado), 5.0, UnitGetFacing(gv_oMOSH_UNIT))), c_orderQueueReplace);
    UnitBehaviorAdd(lv_tornado, "ExPATornadoTimedLife", lv_tornado, 1);
    Wait(RandomFixed(8.0, 10.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_OmoshTornado_Init () {
    gt_OmoshTornado = TriggerCreate("gt_OmoshTornado_Func");
    TriggerAddEventUnitDamaged(gt_OmoshTornado, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Parasitic Bomb
//--------------------------------------------------------------------------------------------------
bool gt_OmoshParasiticBomb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_oMOSH_UNIT))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(lv_primalAvatar, OrderTargetingUnit(AbilityCommand("ExPAParasiticBomb", 0), UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_primalAvatar), 10.0), UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    Wait(RandomFixed(10.0, 15.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_OmoshParasiticBomb_Init () {
    gt_OmoshParasiticBomb = TriggerCreate("gt_OmoshParasiticBomb_Func");
    TriggerAddEventUnitDamaged(gt_OmoshParasiticBomb, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Amon's Drop
//--------------------------------------------------------------------------------------------------
bool gt_OmoshAmonsDrop_Func (bool testConds, bool runActions) {
    int auto2F2F4ECC_val;
    // Variable Declarations
    unit lv_primalAvatar;
    point lv_dropPoint;
    int lv_techLevel;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_oMOSH_UNIT))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= gf_ExGetCoopDifficultyValueReal(0.0, 40.0, 50.0, 60.0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_OmoshAmonsDropQ, true, false);
    lv_dropPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_oMOSH_UNIT), 3.0));
    gf_ExAIShowDropPing(lv_dropPoint);
    auto2F2F4ECC_val = RandomInt(1, 3);
    if (auto2F2F4ECC_val == 1) {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto2F2F4ECC_val == 2) {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (auto2F2F4ECC_val == 3) {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else {
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_DROP_PLAYER, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, lv_techLevel, lv_dropPoint, true);
    UnitGroupAddUnitGroup(gv_g_OmoshAmonForce, libCOMI_gf_LastCreatedCoopAttackForce());
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_g_OmoshAmonForce);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ExOrderAttackOther", lv_primalAvatar, 1);
    }
    UnitGroupLoopEnd();
    Wait(17.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_OmoshAmonsDrop_Init () {
    gt_OmoshAmonsDrop = TriggerCreate("gt_OmoshAmonsDrop_Func");
    TriggerAddEventUnitDamaged(gt_OmoshAmonsDrop, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Amon's Drop Q
//--------------------------------------------------------------------------------------------------
bool gt_OmoshAmonsDropQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((PlayerRace(gv_pLAYER_03_ENEMY) == "Prot") && (PlayerRace(gv_pLAYER_04_ENEMY) == "Prot")) {
        libCOMI_gf_SendMissionTransmission("EnemyWarningWarpIn", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    }
    else {
        libCOMI_gf_SendMissionTransmission("EnemyWarningDropPods", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
void gt_OmoshAmonsDropQ_Init () {
    gt_OmoshAmonsDropQ = TriggerCreate("gt_OmoshAmonsDropQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_OmoshDiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_omoshEssence;
    int lv_currentIndex;
    // Variable Initialization
    lv_omoshEssence = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == gv_oMOSH_UNIT))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_OmoshBlinksAround, false);
    TriggerEnable(gt_DehakaHuntingOmosh, false);
    TriggerEnable(gt_OmoshGetBack, false);
    TriggerEnable(gt_OmoshRandomAttack, false);
    TriggerEnable(gt_OmoshTornado, false);
    TriggerEnable(gt_OmoshParasiticBomb, false);
    TriggerEnable(gt_OmoshAmonsDrop, false);
    gf_ExAIDispatchTrashForce(gv_g_OmoshAmonForce);
    PingDestroy(gv_g_OmoshPing);
    lv_currentIndex = gf_ExGetDrainRitualIDFromUnit(gv_oMOSH_UNIT);
    UnitCreate(1, "ExEssence", c_unitCreateIgnorePlacement, gv_pLAYER_05_DEHAKA, UnitGetPosition(gv_oMOSH_UNIT), 270.0);
    gv_g_OmoshEssence = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_g_OmoshEssence, "SetTintColor 255,100,100");
    UnitSetHeight(gv_g_OmoshEssence, UnitGetPropertyFixed(gv_oMOSH_UNIT, c_unitPropHeight, c_unitPropNormal), 0.0);
    UnitSetHeight(gv_g_OmoshEssence, 2.0, 5.0);
    gf_ExDrainRitualFlashPing(lv_currentIndex, Color(0.00, 100.00, 0.00), StringExternal("Param/Value/1AB7DA9B"));
    gv_g_OmoshPing = gv_dR_Ping[lv_currentIndex];
    UnitSetFacing(gv_dEHAKA_UNIT, AngleBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), UnitGetPosition(gv_g_OmoshEssence)), 1.0);
    TriggerQueueEnter();
    gf_ExDehakaSetBriefingState(true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("<Gruntling> So delicious.", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    gf_ExDehakaSetBriefingState(false);
    TriggerExecute(gt_OmoshEssence, true, false);
    TriggerQueueExit();
    return true;
}
void gt_OmoshDiesQ_Init () {
    gt_OmoshDiesQ = TriggerCreate("gt_OmoshDiesQ_Func");
    TriggerAddEventUnitDied(gt_OmoshDiesQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Essence
//--------------------------------------------------------------------------------------------------
bool gt_OmoshEssence_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitIsAlive(gv_dEHAKA_UNIT) == true)) {
            if ((UnitHasBehavior2(gv_dEHAKA_UNIT, "ExDehakaFeastOfSurvivalChanneling") == false)) {
                if (((DistanceBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), UnitGetPosition(gv_g_OmoshEssence)) / (0.01 + UnitGetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropMovementSpeed, c_unitPropCurrent))) >= 15.0)) {
                    gf_ExDehakaOrderBurrowCharge(PointWithOffsetPolar(UnitGetPosition(gv_g_OmoshEssence), 3.0, 360.0), false);
                }
                else {
                    UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingUnit(AbilityCommand("ExFeastOfSurvival", 0), gv_g_OmoshEssence), c_orderQueueReplace);
                }
            }
            if ((UnitHasBehavior2(gv_dEHAKA_UNIT, "ExDehakaFeastOfSurvivalDone") == true)) {
                UnitSetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropLifePercent, 100.0);
                UnitBehaviorAdd(gv_dEHAKA_UNIT, "ExEssenceOfSwiftness", gv_dEHAKA_UNIT, 1);
                UnitBehaviorRemove(gv_dEHAKA_UNIT, "ExDehakaFeastOfSurvivalDone", c_unitBehaviorCountAll);
                gf_ExDehakaEssenceFT(StringExternal("Param/Value/9B104B67"));
                PingDestroy(gv_g_OmoshPing);
                TriggerExecute(gt_OmoshEventEnd, true, false);
            }
        }
        else {
            break;
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}
void gt_OmoshEssence_Init () {
    gt_OmoshEssence = TriggerCreate("gt_OmoshEssence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Omosh Event End
//--------------------------------------------------------------------------------------------------
bool gt_OmoshEventEnd_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary01Update, true, false);
    return true;
}
void gt_OmoshEventEnd_Init () {
    gt_OmoshEventEnd = TriggerCreate("gt_OmoshEventEnd_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Floating Corruption
//--------------------------------------------------------------------------------------------------
bool gt_TFOFloatingCorruption_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempUnit;
    // Variable Initialization
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_g_TFORemoveFloatingCorruption == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitGroupLoopBegin(UnitGroup("ExTFOFloatingCorruption", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
        UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_06_PRIMALS, c_unitAllianceEnemy, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_tempUnit = UnitGroupLoopCurrent();
            UnitBehaviorAdd(lv_tempUnit, "ExTFOFloatingCorruption", gv_tFO_BOSS, 1);
            UnitDamage(gv_tFO_BOSS, "ExTFOFloatingCorruptionDamage", lv_tempUnit, (UnitGetPropertyFixed(lv_tempUnit, c_unitPropLifeMax, c_unitPropCurrent) / 25.0));
        }
        UnitGroupLoopEnd();
    }
    return true;
}
void gt_TFOFloatingCorruption_Init () {
    gt_TFOFloatingCorruption = TriggerCreate("gt_TFOFloatingCorruption_Func");
    TriggerAddEventTimePeriodic(gt_TFOFloatingCorruption, 0.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Event Init Q
//--------------------------------------------------------------------------------------------------
bool gt_TFOEventInitQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fogDuration;
    // Variable Initialization
    lv_fogDuration = 100.0;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TrDehakaStrangeRitualQ, false);
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_dEHAKA_UNIT) == true)) {
        FogSetColor(Color(100.00, 21.18, 21.18));
        FogSetStartHeight(-9.0);
        FogSetDensityOverTime(0.012, lv_fogDuration);
        FogSetStartHeightOverTime(-4.0, lv_fogDuration);
        SoundPlayForPlayer(SoundLink("Zerus03_earthquake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraShake(PlayerGroupLoopCurrent(), "Light", "Earthquake", 1.5, 1.0, SoundLengthSync(SoundLink("Zerus03_earthquake", -1)));
        }
        PlayerGroupLoopEnd();
    }
    else {
        return true;
    }
    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(gv_dEHAKA_UNIT) == true)) {
        TriggerQueueEnter();
        TriggerExecute(gt_CreatePrimaryObjectivesP2, true, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_ExSendTransmissionFromDehaka("The end of Zerus is coming. We must interrupt it!", true);
        gf_ExSendTransmissionFromDehaka("Consume and evolve. Kill or be killed!", true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        gv_g_TFORemoveFloatingCorruption = true;
        TriggerExecute(gt_TFODehakaStartAssault, true, false);
        TriggerExecute(gt_TFOHalfTimeExpiredQ, true, false);
        TriggerEnable(gt_TFOPeriodicShake, true);
        TriggerEnable(gt_TFOProtectionFallsQ, true);
        TriggerEnable(gt_TFOLastBossDies, true);
        TriggerQueueExit();
    }
    return true;
}
void gt_TFOEventInitQ_Init () {
    gt_TFOEventInitQ = TriggerCreate("gt_TFOEventInitQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Grant Protection Ritual
//--------------------------------------------------------------------------------------------------
bool gt_TFOGrantProtectionRitual_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidDevourer;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroupFromId(6));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_voidDevourer = UnitGroupLoopCurrent();
        AISetUnitScriptControlled(lv_voidDevourer, true);
        gf_ExTFOGrantProtection(lv_voidDevourer);
    }
    UnitGroupLoopEnd();
    return true;
}
void gt_TFOGrantProtectionRitual_Init () {
    gt_TFOGrantProtectionRitual = TriggerCreate("gt_TFOGrantProtectionRitual_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Update Timer
//--------------------------------------------------------------------------------------------------
bool gt_TFOUpdateTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((ObjectiveGetState(gv_objective_Primary04) != c_objectiveStateCompleted) && (libCOMI_gf_GameIsOver() == false)) {
            TriggerExecute(gt_ObjectivePrimary04Update, true, false);
        }
        else {
            break;
        }
        Wait(0.5, c_timeAI);
    }
    return true;
}
void gt_TFOUpdateTimer_Init () {
    gt_TFOUpdateTimer = TriggerCreate("gt_TFOUpdateTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Half Time Expired Q
//--------------------------------------------------------------------------------------------------
bool gt_TFOHalfTimeExpiredQ_Func (bool testConds, bool runActions) {
    int auto3FE6D087_val;
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((TimerGetRemaining(gv_g_TFODefeatTimer) <= gf_ExGetCoopDifficultyValueReal(180.0, 150.0, 140.0, 120.0)) && (gv_g_TFOShake == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto3FE6D087_val = RandomInt(1, 2);
    if (auto3FE6D087_val == 1) {
        gf_ExSendTransmissionFromDehaka("It destructs Zerus! Must involve all your minions!", true);
    }
    else if (auto3FE6D087_val == 2) {
        gf_ExSendTransmissionFromDehaka("Zerus is crashing! Must act faster... or die!", true);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
void gt_TFOHalfTimeExpiredQ_Init () {
    gt_TFOHalfTimeExpiredQ = TriggerCreate("gt_TFOHalfTimeExpiredQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Dehaka Start Assault
//--------------------------------------------------------------------------------------------------
bool gt_TFODehakaStartAssault_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if (((DistanceBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), PointFromId(317722574)) / (0.01 + UnitGetPropertyFixed(gv_dEHAKA_UNIT, c_unitPropMovementSpeed, c_unitPropCurrent))) >= 15.0)) {
            if ((gf_ExDehakaIsOnBurrowCharge() == false)) {
                gf_ExDehakaOrderBurrowCharge(PointFromId(317722574), false);
            }
        }
        else {
            UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1271157716)), c_orderQueueReplace);
            TriggerEnable(gt_TFOCorruptionPillarsMarkerNormal, true);
            TriggerEnable(gt_TFOCorruptionPillarTip, true);
            TriggerEnable(gt_TFODrainingWindSpawn, true);
            TriggerEnable(gt_TFODrainingWindClear, true);
            TriggerExecute(gt_TFODehakaAttackPillars, true, false);
            break;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gt_TFODehakaStartAssault_Init () {
    gt_TFODehakaStartAssault = TriggerCreate("gt_TFODehakaStartAssault_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Corruption Pillars Marker (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_TFOCorruptionPillarsMarkerNormal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corruptionPillar;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitIsAlive(gv_tFO_DOME) == true)) {
        gf_ExTFOCorruptionPillarCreateMarker();
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}
void gt_TFOCorruptionPillarsMarkerNormal_Init () {
    gt_TFOCorruptionPillarsMarkerNormal = TriggerCreate("gt_TFOCorruptionPillarsMarkerNormal_Func");
    TriggerEnable(gt_TFOCorruptionPillarsMarkerNormal, false);
    TriggerAddEventTimePeriodic(gt_TFOCorruptionPillarsMarkerNormal, 15.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Corruption Pillars Marker (Nerfed)
//--------------------------------------------------------------------------------------------------
bool gt_TFOCorruptionPillarsMarkerNerfed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corruptionPillar;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitIsAlive(gv_tFO_BOSS) == true)) {
        gf_ExTFOCorruptionPillarCreateMarker();
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}
void gt_TFOCorruptionPillarsMarkerNerfed_Init () {
    gt_TFOCorruptionPillarsMarkerNerfed = TriggerCreate("gt_TFOCorruptionPillarsMarkerNerfed_Func");
    TriggerEnable(gt_TFOCorruptionPillarsMarkerNerfed, false);
    TriggerAddEventTimePeriodic(gt_TFOCorruptionPillarsMarkerNerfed, 40.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Corruption Pillar Spawn
//--------------------------------------------------------------------------------------------------
bool gt_TFOCorruptionPillarSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corruptionPillar;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ExTFOCorruptionPillar", c_unitCreateIgnorePlacement, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_corruptionPillar = UnitLastCreated();
    UnitSetPropertyFixed(lv_corruptionPillar, c_unitPropLifeMax, gf_ExGetCoopDifficultyValueReal(1000.0, 1500.0, 1750.0, 2000.0));
    UnitSetPropertyFixed(lv_corruptionPillar, c_unitPropLife, gf_ExGetCoopDifficultyValueReal(1000.0, 1500.0, 1750.0, 2000.0));
    UnitGroupAdd(gv_g_TFOCorruptionPillars, lv_corruptionPillar);
    libNtve_gf_MakeUnitInvulnerable(lv_corruptionPillar, true);
    libNtve_gf_SendActorMessageToUnit(lv_corruptionPillar, "SetOpacity 0.000000 0.000000 ExCorruptionPillarOpacity");
    libNtve_gf_SendActorMessageToUnit(lv_corruptionPillar, "ClearOpacity 1.000000 ExCorruptionPillarOpacity");
    UnitSetHeight(lv_corruptionPillar, 20.0, 0.0);
    UnitSetHeight(lv_corruptionPillar, 0.0, 2.0);
    Wait(2.0, c_timeGame);
    UnitCreateEffectPoint(lv_corruptionPillar, "ExTFOCorruptionPillarLandingSearch", UnitGetPosition(lv_corruptionPillar));
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShake(PlayerGroupLoopCurrent(), "Light", "Tremor", 0.2, 0.5, 1.0);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_MakeUnitInvulnerable(lv_corruptionPillar, false);
    return true;
}
void gt_TFOCorruptionPillarSpawn_Init () {
    gt_TFOCorruptionPillarSpawn = TriggerCreate("gt_TFOCorruptionPillarSpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_TFOCorruptionPillarSpawn, c_playerAny, "ExTFOCorruptionPillarSpawn");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Corruption Pillar Tip
//--------------------------------------------------------------------------------------------------
bool gt_TFOCorruptionPillarTip_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "ExTFOCorruptionPillar"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gf_DisplayCampaignMessage(StringExternal("Param/Value/D62051B3"));
    return true;
}
void gt_TFOCorruptionPillarTip_Init () {
    gt_TFOCorruptionPillarTip = TriggerCreate("gt_TFOCorruptionPillarTip_Func");
    TriggerEnable(gt_TFOCorruptionPillarTip, false);
    TriggerAddEventUnitRegion(gt_TFOCorruptionPillarTip, null, RegionEntireMap(), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Dehaka Attack Pillars
//--------------------------------------------------------------------------------------------------
bool gt_TFODehakaAttackPillars_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corruptionPillars;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((UnitIsAlive(gv_tFO_DOME) == true)) {
            lv_corruptionPillars = UnitGroupCount(gv_g_TFOCorruptionPillars, c_unitCountAlive);
            if ((lv_corruptionPillars > 0) && (lv_corruptionPillars < 2) && (gf_ExDehakaIsOnAttack() == false)) {
                gf_ExDehakaOrderAttack(UnitGroupRandomUnit(gv_g_TFOCorruptionPillars, c_unitCountAlive));
            }
            else {
                if ((lv_corruptionPillars == 0) && (gf_ExDehakaIsOnAttack() == false)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), PointFromId(835992251)) >= 0.5)) {
                        UnitIssueOrder(gv_dEHAKA_UNIT, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(835992251)), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitGetFacing(gv_dEHAKA_UNIT) != 45.0) && (UnitOrderCount(gv_dEHAKA_UNIT) == 0)) {
                            UnitSetFacing(gv_dEHAKA_UNIT, 45.0, 1.0);
                        }
                    }
                }
            }
        }
        else {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gt_TFODehakaAttackPillars_Init () {
    gt_TFODehakaAttackPillars = TriggerCreate("gt_TFODehakaAttackPillars_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Draining Wind Spawn
//--------------------------------------------------------------------------------------------------
bool gt_TFODrainingWindSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corruptionPillar;
    unit lv_drainingWind;
    point lv_targetPoint;
    unit lv_targetUnit;
    // Variable Initialization
    lv_corruptionPillar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetType(lv_corruptionPillar) == "ExTFOCorruptionPillar"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ExTFODrainingWind", c_unitCreateIgnorePlacement, gv_pLAYER_06_PRIMALS, UnitGetPosition(lv_corruptionPillar));
    lv_drainingWind = UnitLastCreated();
    if ((UnitGroupCount(UnitGroupFromId(6), c_unitCountAlive) > 0)) {
        lv_targetUnit = UnitGroupClosestToPoint(UnitGroupFromId(6), UnitGetPosition(lv_drainingWind));
    }
    else {
        lv_targetUnit = gv_tFO_BOSS;
    }
    lv_targetPoint = UnitGetPosition(lv_targetUnit);
    UnitIssueOrder(lv_drainingWind, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_targetPoint, 20.0, AngleBetweenPoints(UnitGetPosition(lv_drainingWind), lv_targetPoint))), c_orderQueueReplace);
    return true;
}
void gt_TFODrainingWindSpawn_Init () {
    gt_TFODrainingWindSpawn = TriggerCreate("gt_TFODrainingWindSpawn_Func");
    TriggerEnable(gt_TFODrainingWindSpawn, false);
    TriggerAddEventUnitDied(gt_TFODrainingWindSpawn, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Draining Wind Clear
//--------------------------------------------------------------------------------------------------
bool gt_TFODrainingWindClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drainingWind;
    // Variable Initialization
    lv_drainingWind = EventUnit();
    if (testConds) {
        if (!((UnitGetType(lv_drainingWind) == "ExTFODrainingWind"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SendActorMessageToUnit(lv_drainingWind, "SetOpacity 0.000000 1.000000");
    Wait(1.0, c_timeGame);
    UnitRemove(lv_drainingWind);
    return true;
}
void gt_TFODrainingWindClear_Init () {
    gt_TFODrainingWindClear = TriggerCreate("gt_TFODrainingWindClear_Func");
    TriggerEnable(gt_TFODrainingWindClear, false);
    TriggerAddEventUnitRegion(gt_TFODrainingWindClear, null, RegionFromId(35), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Periodic Shake
//--------------------------------------------------------------------------------------------------
bool gt_TFOPeriodicShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_shakeDuration;
    // Variable Initialization
    lv_shakeDuration = SoundLengthSync(SoundLink("PAiur03_Event_Space02_CameraQuake", -1));
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_g_TFOShake = true;
    SoundPlayForPlayer(SoundLink("PAiur03_Event_Space02_CameraQuake", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShake(PlayerGroupLoopCurrent(), "Light", "Earthquake", 2.0, 2.0, lv_shakeDuration);
    }
    PlayerGroupLoopEnd();
    Wait(lv_shakeDuration, c_timeGame);
    gv_g_TFOShake = false;
    return true;
}
void gt_TFOPeriodicShake_Init () {
    gt_TFOPeriodicShake = TriggerCreate("gt_TFOPeriodicShake_Func");
    TriggerEnable(gt_TFOPeriodicShake, false);
    TriggerAddEventTimePeriodic(gt_TFOPeriodicShake, RandomInt(60, 70), c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Protection Falls Q
//--------------------------------------------------------------------------------------------------
bool gt_TFOProtectionFallsQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(UnitGroupFromId(6), EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupFromId(6), c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary04Complete, true, false);
    TriggerEnable(gt_TFOPeriodicShake, false);
    TriggerEnable(gt_TFOCorruptionPillarsMarkerNormal, false);
    TriggerEnable(gt_TFOCorruptionPillarsMarkerNerfed, true);
    TriggerEnable(gt_TFOTransitionPhase, true);
    TriggerEnable(gt_TFOSpawnPrimals, true);
    TriggerEnable(gt_TFOSpawnPrimalsBonus, true);
    TriggerEnable(gt_TFOVoidStrike, true);
    libNtve_gf_StopTimer(gv_g_TFODefeatTimer);
    UnitKill(gv_tFO_DOME);
    UnitBehaviorRemove(gv_tFO_BOSS, "ExTFOTheCrushing", c_unitBehaviorCountAll);
    PingDestroy(gv_g_TFOPing);
    gv_g_TFOPing = gf_ExSetminimappingattachedatpoint(UnitGetPosition(gv_tFO_BOSS), "PingBoss", StringExternal("Param/Value/3F6E6E52"), Color(100.00, 0.00, 0.00), 0.6, 0.0);
    gv_g_PAUnitTransfer = gv_tFO_BOSS;
    TriggerExecute(gt_PABossBar, true, false);
    gf_ExDehakaOrderAttack(gv_tFO_BOSS);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_ExSendTransmissionFromDehaka("This creature has unprotected! Bring it down!", true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
void gt_TFOProtectionFallsQ_Init () {
    gt_TFOProtectionFallsQ = TriggerCreate("gt_TFOProtectionFallsQ_Func");
    TriggerEnable(gt_TFOProtectionFallsQ, false);
    TriggerAddEventUnitDied(gt_TFOProtectionFallsQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Spawn Primals
//--------------------------------------------------------------------------------------------------
bool gt_TFOSpawnPrimals_Func (bool testConds, bool runActions) {
    int auto697B659E_val;
    // Variable Declarations
    unit lv_primalAvatar;
    int lv_spawnCounter;
    int lv_spawnChance;
    int lv_ultralisksLock;
    abilcmd lv_ability;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    lv_spawnCounter = gf_ExGetCoopDifficultyValueInteger(7, 9, 12, 15);
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_tFO_BOSS))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= 98.0))) {
            return false;
        }
        if (!((gv_g_TFOTransitionPhase == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_spawnCounter += (BoolToInt(UnitHasBehavior2(gv_tFO_BOSS, "ExEssenceOfVersalityAmon")) * lv_spawnCounter);
    gv_g_TFOSpawnPrimals = true;
    while ((lv_spawnCounter >= 1)) {
        lv_spawnChance = RandomInt(0, 100);
        if (((lv_spawnChance >= 0) && (lv_spawnChance <= 40))) {
            lv_ability = AbilityCommand("ExTFOSpawnPrimalZergling", 0);
        }
        else if (((lv_spawnChance >= 41) && (lv_spawnChance <= 70))) {
            lv_ability = AbilityCommand("ExTFOSpawnPrimalHydralisk", 0);
        }
        else if (((lv_spawnChance >= 71) && (lv_spawnChance <= 85))) {
            lv_ability = AbilityCommand("ExTFOSpawnRavasaur", 0);
        }
        else if (((lv_spawnChance >= 86) && (lv_spawnChance <= 100))) {
            if ((lv_ultralisksLock <= gf_ExGetCoopDifficultyValueInteger(2, 3, 3, 4))) {
                lv_ability = AbilityCommand("ExTFOSpawnPrimalUltralisk", 0);
                lv_ultralisksLock += 1;
            }
            else {
                auto697B659E_val = RandomInt(0, 2);
                if (auto697B659E_val == 0) {
                    lv_ability = AbilityCommand("ExTFOSpawnPrimalZergling", 0);
                }
                else if (auto697B659E_val == 1) {
                    lv_ability = AbilityCommand("ExTFOSpawnPrimalHydralisk", 0);
                }
                else if (auto697B659E_val == 2) {
                    lv_ability = AbilityCommand("ExTFOSpawnRavasaur", 0);
                }
                else {
                }
            }
        }
        UnitIssueOrder(lv_primalAvatar, OrderTargetingPoint(lv_ability, RegionRandomPoint(RegionFromId(34))), c_orderQueueReplace);
        lv_spawnCounter -= 1;
        Wait(0.2, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    gv_g_TFOSpawnPrimals = false;
    Wait(RandomFixed(15.0, 17.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true) && (gv_g_TFOTransitionPhase == false)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_TFOSpawnPrimals_Init () {
    gt_TFOSpawnPrimals = TriggerCreate("gt_TFOSpawnPrimals_Func");
    TriggerEnable(gt_TFOSpawnPrimals, false);
    TriggerAddEventUnitDamaged(gt_TFOSpawnPrimals, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Spawn Primals Bonus
//--------------------------------------------------------------------------------------------------
bool gt_TFOSpawnPrimalsBonus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalSpawnUnit;
    string lv_primalSpawnType;
    // Variable Initialization
    lv_primalSpawnUnit = EventUnit();
    lv_primalSpawnType = UnitGetType(lv_primalSpawnUnit);
    if (testConds) {
        if (!(((lv_primalSpawnType == "PrimalZergling") || (lv_primalSpawnType == "PrimalHydralisk") || (lv_primalSpawnType == "Ravasaur") || (lv_primalSpawnType == "PrimalUltralisk")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitHasBehavior2(gv_tFO_BOSS, "ExEssenceOfStrengthAmon") == true)) {
        UnitBehaviorAdd(lv_primalSpawnUnit, "ExEssenceOfStrengthAmonMinion", lv_primalSpawnUnit, 1);
    }
    else if ((UnitHasBehavior2(gv_tFO_BOSS, "ExEssenceOfVitalityAmon") == true)) {
        UnitBehaviorAdd(lv_primalSpawnUnit, "ExEssenceOfVitalityAmonMinion", lv_primalSpawnUnit, 1);
    }
    else if ((UnitHasBehavior2(gv_tFO_BOSS, "ExEssenceOfMasteryAmon") == true)) {
        UnitBehaviorAdd(lv_primalSpawnUnit, "ExEssenceOfMasteryAmonMinion", lv_primalSpawnUnit, 1);
    }
    else if ((UnitHasBehavior2(gv_tFO_BOSS, "ExEssenceOfVersalityAmon") == true)) {
        UnitBehaviorAdd(lv_primalSpawnUnit, "ExEssenceOfVersalityAmonMinion", lv_primalSpawnUnit, 1);
    }
    else if ((UnitHasBehavior2(gv_tFO_BOSS, "ExEssenceOfImmunityAmon") == true)) {
        UnitBehaviorAdd(lv_primalSpawnUnit, "ExEssenceOfImmunityAmonMinion", lv_primalSpawnUnit, 1);
    }
    return true;
}
void gt_TFOSpawnPrimalsBonus_Init () {
    gt_TFOSpawnPrimalsBonus = TriggerCreate("gt_TFOSpawnPrimalsBonus_Func");
    TriggerEnable(gt_TFOSpawnPrimalsBonus, false);
    TriggerAddEventUnitRegion(gt_TFOSpawnPrimalsBonus, null, RegionEntireMap(), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Void Strike
//--------------------------------------------------------------------------------------------------
bool gt_TFOVoidStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[2] lv_voidCaster;
    unit lv_primalAvatar;
    point lv_tempPoint;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_tFO_BOSS))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= gf_ExGetCoopDifficultyValueReal(0.0, 70.0, 75.0, 80.0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_tempPoint = PointFromName(("TFO Void Strike " + IntToString(RandomInt(1, 5))));
    libNtve_gf_CreateUnitsAtPoint2(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_06_PRIMALS, lv_tempPoint);
    lv_voidCaster[0] = UnitLastCreated();
    UnitSetHeight(lv_voidCaster[0], 15.0, 0.0);
    UnitCreateEffectPoint(lv_voidCaster[0], "VoidShardACVoidZoneCP", lv_tempPoint);
    libNtve_gf_MakeUnitInvulnerable(lv_voidCaster[0], true);
    UnitSetState(lv_voidCaster[0], c_unitStateHighlightable, false);
    UnitSetState(lv_voidCaster[0], c_unitStateCursorable, false);
    UnitSetState(lv_voidCaster[0], c_unitStateTargetable, false);
    UnitSetState(lv_voidCaster[0], c_unitStateTooltipable, false);
    UnitSetState(lv_voidCaster[0], c_unitStateSelectable, false);
    lv_tempPoint = PointFromName(("TFO Void Strike " + IntToString(RandomInt(6, 10))));
    libNtve_gf_CreateUnitsAtPoint2(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_06_PRIMALS, lv_tempPoint);
    lv_voidCaster[1] = UnitLastCreated();
    UnitSetHeight(lv_voidCaster[1], 15.0, 0.0);
    UnitCreateEffectPoint(lv_voidCaster[1], "VoidShardACVoidZoneCP", lv_tempPoint);
    libNtve_gf_MakeUnitInvulnerable(lv_voidCaster[1], true);
    UnitSetState(lv_voidCaster[1], c_unitStateHighlightable, false);
    UnitSetState(lv_voidCaster[1], c_unitStateCursorable, false);
    UnitSetState(lv_voidCaster[1], c_unitStateTargetable, false);
    UnitSetState(lv_voidCaster[1], c_unitStateTooltipable, false);
    UnitSetState(lv_voidCaster[1], c_unitStateSelectable, false);
    Wait(5.0, c_timeGame);
    UnitRemove(lv_voidCaster[0]);
    UnitRemove(lv_voidCaster[1]);
    Wait(RandomFixed(10.0, 12.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_TFOVoidStrike_Init () {
    gt_TFOVoidStrike = TriggerCreate("gt_TFOVoidStrike_Func");
    TriggerEnable(gt_TFOVoidStrike, false);
    TriggerAddEventUnitDamaged(gt_TFOVoidStrike, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Transition Phase
//--------------------------------------------------------------------------------------------------
bool gt_TFOTransitionPhase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_tFO_BOSS))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= gf_ExGetCoopDifficultyValueReal(15.0, 50.0, 55.0, 60.0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_g_TFOSpawnPrimals == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_g_TFOTransitionPhase = true;
    TriggerEnable(gt_TFOSpawnPrimals, false);
    libNtve_gf_SendActorMessageToUnit(gv_tFO_BOSS, "Signal Transition");
    Wait(6.0, c_timeGame);
    if ((gf_ExGetCoopDifficultyLevel() != 1)) {
        TriggerEnable(gt_TFOLightningBreathQ, true);
        TriggerEnable(gt_TFOLightningBreathShake, true);
        TriggerEnable(gt_TFOAmonsDrop, true);
    }
    return true;
}
void gt_TFOTransitionPhase_Init () {
    gt_TFOTransitionPhase = TriggerCreate("gt_TFOTransitionPhase_Func");
    TriggerEnable(gt_TFOTransitionPhase, false);
    TriggerAddEventUnitDamaged(gt_TFOTransitionPhase, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Lightning Breath Q
//--------------------------------------------------------------------------------------------------
bool gt_TFOLightningBreathQ_Func (bool testConds, bool runActions) {
    int autoA417D761_val;
    // Variable Declarations
    unit lv_primalAvatar;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_tFO_BOSS))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gf_ExDehakaFreeToTalk() == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    libNtve_gf_SendActorMessageToUnit(gv_tFO_BOSS, "Signal LightningBreath");
    UnitIssueOrder(lv_primalAvatar, OrderTargetingPoint(AbilityCommand("ExTFOLightningBreath", 0), PointWithOffsetPolar(UnitGetPosition(gv_tFO_BOSS), 5.0, UnitGetFacing(gv_tFO_BOSS))), c_orderQueueReplace);
    if ((RandomFixed(0.0, 100.0) < 50.0) && (DistanceBetweenPoints(UnitGetPosition(gv_dEHAKA_UNIT), UnitGetPosition(gv_tFO_BOSS)) <= 10.0) && (UnitFilterMatch(gv_dEHAKA_UNIT, gv_pLAYER_06_PRIMALS, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32)) | (1 << (c_targetFilterSilenced - 32)))) == true)) {
        gf_ExDehakaOrderBurrowCharge(PointFromId(1271157716), true);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoA417D761_val = RandomInt(1, 2);
    if (autoA417D761_val == 1) {
        gf_ExSendTransmissionFromDehaka("Deep breath! Dodge it!", true);
    }
    else if (autoA417D761_val == 2) {
        gf_ExSendTransmissionFromDehaka("Breath! Evade it or die!", true);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(RandomFixed(17.0, 20.0), c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_TFOLightningBreathQ_Init () {
    gt_TFOLightningBreathQ = TriggerCreate("gt_TFOLightningBreathQ_Func");
    TriggerEnable(gt_TFOLightningBreathQ, false);
    TriggerAddEventUnitDamaged(gt_TFOLightningBreathQ, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Lightning Breath Shake
//--------------------------------------------------------------------------------------------------
bool gt_TFOLightningBreathShake_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Purifier_PrePlanetCrackerEnergySwirl", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeAI);
    SoundStop(SoundLastPlayed(), true);
    if ((UnitIsAlive(gv_tFO_BOSS) == true)) {
        PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraShake(PlayerGroupLoopCurrent(), "Medium", "Earthquake", 0.25, 0.5, 2.0);
        }
        PlayerGroupLoopEnd();
    }
    return true;
}
void gt_TFOLightningBreathShake_Init () {
    gt_TFOLightningBreathShake = TriggerCreate("gt_TFOLightningBreathShake_Func");
    TriggerEnable(gt_TFOLightningBreathShake, false);
    TriggerAddEventUnitAbility(gt_TFOLightningBreathShake, null, AbilityCommand("ExTFOLightningBreath", 0), c_abilEffectStagePrep, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Amon's Drop
//--------------------------------------------------------------------------------------------------
bool gt_TFOAmonsDrop_Func (bool testConds, bool runActions) {
    int auto1386DE59_val;
    // Variable Declarations
    unit lv_primalAvatar;
    point lv_dropPoint;
    int lv_techLevel;
    // Variable Initialization
    lv_primalAvatar = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((lv_primalAvatar == gv_tFO_BOSS))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((UnitGetPropertyFixed(lv_primalAvatar, c_unitPropLifePercent, c_unitPropCurrent) <= gf_ExGetCoopDifficultyValueReal(0.0, 40.0, 45.0, 50.0)))) {
            return false;
        }
        if (!((UnitGroupCount(gv_g_TFOAmonForce, c_unitCountAlive) <= gf_ExGetCoopDifficultyValueInteger(0, 5, 7, 10)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_dropPoint = PointFromName(("TFO Amon Drop " + IntToString(RandomInt(1, 4))));
    gf_ExAIShowDropPing(lv_dropPoint);
    auto1386DE59_val = RandomInt(1, 3);
    if (auto1386DE59_val == 1) {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto1386DE59_val == 2) {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (auto1386DE59_val == 3) {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else {
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_DROP_PLAYER, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, lv_techLevel, lv_dropPoint, true);
    UnitGroupAddUnitGroup(gv_g_TFOAmonForce, libCOMI_gf_LastCreatedCoopAttackForce());
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_g_TFOAmonForce);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "ExOrderAttackOther", gv_dEHAKA_UNIT, 1);
    }
    UnitGroupLoopEnd();
    Wait(15.0, c_timeGame);
    if ((UnitIsAlive(lv_primalAvatar) == true)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
void gt_TFOAmonsDrop_Init () {
    gt_TFOAmonsDrop = TriggerCreate("gt_TFOAmonsDrop_Func");
    TriggerEnable(gt_TFOAmonsDrop, false);
    TriggerAddEventUnitDamaged(gt_TFOAmonsDrop, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Heal Life Bonus
//--------------------------------------------------------------------------------------------------
bool gt_TFOHealLifeBonus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_victim;
    // Variable Initialization
    lv_victim = EventUnit();
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libNtve_gf_KillingUnit() == gv_tFO_BOSS))) {
            return false;
        }
        if (!((UnitFilterMatch(lv_victim, gv_pLAYER_06_PRIMALS, UnitFilter((1 << c_targetFilterBiological), 0, 0, (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_victim), gv_pLAYER_06_PRIMALS, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPropertyFixed(gv_tFO_BOSS, c_unitPropLife, (UnitGetPropertyFixed(gv_tFO_BOSS, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lv_victim, c_unitPropLifeMax, c_unitPropCurrent)));
    return true;
}
void gt_TFOHealLifeBonus_Init () {
    gt_TFOHealLifeBonus = TriggerCreate("gt_TFOHealLifeBonus_Func");
    TriggerEnable(gt_TFOHealLifeBonus, false);
    TriggerAddEventUnitDied(gt_TFOHealLifeBonus, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: TFO Last Boss Dies
//--------------------------------------------------------------------------------------------------
bool gt_TFOLastBossDies_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventUnit() == gv_tFO_BOSS))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerModifyPropertyFixed(gv_pLAYER_05_DEHAKA, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
    TriggerExecute(gt_ObjectivePrimary05Complete, true, false);
    PingDestroy(gv_g_TFOPing);
    libCOMI_gf_ShowHideSingularBossBarVoidCampaign(false);
    while (true) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_PRIMALS, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_g_TFOCorruptionPillars);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gt_TFOLastBossDies_Init () {
    gt_TFOLastBossDies = TriggerCreate("gt_TFOLastBossDies_Func");
    TriggerEnable(gt_TFOLastBossDies, false);
    TriggerAddEventUnitDied(gt_TFOLastBossDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_TrEnemyAttackingQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false))) {
            return false;
        }
        if (!((TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_TrEnemyAttackingQ_Init () {
    gt_TrEnemyAttackingQ = TriggerCreate("gt_TrEnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_TrEnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_TrEnemyAttackingQ, gv_pLAYER_04_ENEMY);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tr Hybrid Detected Q
//--------------------------------------------------------------------------------------------------
bool gt_TrHybridDetectedQ_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false))) {
            return false;
        }
        if (!((TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
void gt_TrHybridDetectedQ_Init () {
    gt_TrHybridDetectedQ = TriggerCreate("gt_TrHybridDetectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score - Damage Done
//--------------------------------------------------------------------------------------------------
bool gt_ScoreDamageDone_Func (bool testConds, bool runActions) {
    unit auto7C338196_val;
    // Variable Declarations
    unit lv_targetDamage;
    int lv_sourceOwner;
    // Variable Initialization
    lv_targetDamage = EventUnit();
    lv_sourceOwner = UnitGetOwner(EventUnitDamageSourceUnit());
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_sourceOwner) == true))) {
            return false;
        }
        if (!((DialogIsVisible(gv_g_ScoreScreenDialog, lv_sourceOwner) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto7C338196_val = lv_targetDamage;
    if (auto7C338196_val == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Zorgg]) {
        gv_g_ScoreValue_DamageDealtToZorgg[lv_sourceOwner] += FixedToInt(EventUnitDamageAmount());
        PlayerScoreValueSetFromInt(lv_sourceOwner, "ExCoopScoreDamageDealtToZorgg", gv_g_ScoreValue_DamageDealtToZorgg[lv_sourceOwner]);
    }
    else if (auto7C338196_val == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Gorrox]) {
        gv_g_ScoreValue_DamageDealtToGorrox[lv_sourceOwner] += FixedToInt(EventUnitDamageAmount());
        PlayerScoreValueSetFromInt(lv_sourceOwner, "ExCoopScoreDamageDealtToGorrox", gv_g_ScoreValue_DamageDealtToGorrox[lv_sourceOwner]);
    }
    else if (auto7C338196_val == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_RazSha]) {
        gv_g_ScoreValue_DamageDealtToRazSha[lv_sourceOwner] += FixedToInt(EventUnitDamageAmount());
        PlayerScoreValueSetFromInt(lv_sourceOwner, "ExCoopScoreDamageDealtToRazSha", gv_g_ScoreValue_DamageDealtToRazSha[lv_sourceOwner]);
    }
    else if (auto7C338196_val == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Naraxus]) {
        gv_g_ScoreValue_DamageDealtToNaraxus[lv_sourceOwner] += FixedToInt(EventUnitDamageAmount());
        PlayerScoreValueSetFromInt(lv_sourceOwner, "ExCoopScoreDamageDealtToNaraxus", gv_g_ScoreValue_DamageDealtToNaraxus[lv_sourceOwner]);
    }
    else if (auto7C338196_val == gv_dR_uPA[ge_CoopDrainRitualTarget_PA_Varookh]) {
        gv_g_ScoreValue_DamageDealtToVarookh[lv_sourceOwner] += FixedToInt(EventUnitDamageAmount());
        PlayerScoreValueSetFromInt(lv_sourceOwner, "ExCoopScoreDamageDealtToVarookh", gv_g_ScoreValue_DamageDealtToVarookh[lv_sourceOwner]);
    }
    else if (auto7C338196_val == gv_oMOSH_UNIT) {
        gv_g_ScoreValue_DamageDealtToOmosh[lv_sourceOwner] += FixedToInt(EventUnitDamageAmount());
        PlayerScoreValueSetFromInt(lv_sourceOwner, "ExCoopScoreDamageDealtToOmosh", gv_g_ScoreValue_DamageDealtToOmosh[lv_sourceOwner]);
    }
    else if (auto7C338196_val == gv_tFO_BOSS) {
        gv_g_ScoreValue_DamageDealtToTFO[lv_sourceOwner] += FixedToInt(EventUnitDamageAmount());
        PlayerScoreValueSetFromInt(lv_sourceOwner, "ExCoopScoreDamageDealtToTFO", gv_g_ScoreValue_DamageDealtToTFO[lv_sourceOwner]);
    }
    else {
    }
    return true;
}
void gt_ScoreDamageDone_Init () {
    gt_ScoreDamageDone = TriggerCreate("gt_ScoreDamageDone_Func");
    TriggerAddEventUnitDamaged(gt_ScoreDamageDone, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Score - C Artanis Absorb
//--------------------------------------------------------------------------------------------------
bool gt_ScoreCArtanisAbsorb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = UnitGetOwner(EventUnit());
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_index) == true))) {
            return false;
        }
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), lv_index, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_g_ScoreValue_ComArtanisDamageAbsorbed[lv_index] += FixedToInt(EventUnitDamageAbsorbed());
    PlayerScoreValueSetFromInt(lv_index, "ArtanisShieldAbsorb", gv_g_ScoreValue_ComArtanisDamageAbsorbed[lv_index]);
    return true;
}
void gt_ScoreCArtanisAbsorb_Init () {
    gt_ScoreCArtanisAbsorb = TriggerCreate("gt_ScoreCArtanisAbsorb_Func");
    TriggerAddEventUnitDamageAbsorbed(gt_ScoreCArtanisAbsorb, null, "SOASuperShield");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Score - C Artanis SOA Damage
//--------------------------------------------------------------------------------------------------
bool gt_ScoreCArtanisSOADamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    lv_index = EventUnitDamageSourcePlayer();
    // Actions
    if (!runActions) {
        return true;
    }
    gv_g_ScoreValue_ComArtanisDamageDealt[lv_index] += FixedToInt(EventUnitDamageAmount());
    PlayerScoreValueSetFromInt(lv_index, "ArtanisSoADamage", gv_g_ScoreValue_ComArtanisDamageDealt[lv_index]);
    return true;
}
void gt_ScoreCArtanisSOADamage_Init () {
    gt_ScoreCArtanisSOADamage = TriggerCreate("gt_ScoreCArtanisSOADamage_Func");
    TriggerAddEventUnitDamaged(gt_ScoreCArtanisSOADamage, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAOrbitalStrikeDamage");
    TriggerAddEventUnitDamaged(gt_ScoreCArtanisSOADamage, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAStrafeAttackDamage");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Score - C Raynor Medic Heal
//--------------------------------------------------------------------------------------------------
bool gt_ScoreCRaynorMedicHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_healingPlayer;
    int lv_healedPlayer;
    // Variable Initialization
    lv_healingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_healedPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_healingPlayer) == true))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_healedPlayer) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_g_ScoreValue_ComRaynorMedicHeal[lv_healedPlayer] += FixedToInt(9.0);
    PlayerScoreValueSetFromInt(lv_healedPlayer, "RaynorMedicHealing", gv_g_ScoreValue_ComRaynorMedicHeal[lv_healedPlayer]);
    return true;
}
void gt_ScoreCRaynorMedicHeal_Init () {
    gt_ScoreCRaynorMedicHeal = TriggerCreate("gt_ScoreCRaynorMedicHeal_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScoreCRaynorMedicHeal, c_playerAny, "heal");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Score - C Raynor Hyperion Damage
//--------------------------------------------------------------------------------------------------
bool gt_ScoreCRaynorHyperionDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hyperionUnit;
    int lv_hyperionOwner;
    // Variable Initialization
    lv_hyperionUnit = EventUnitDamageSourceUnit();
    lv_hyperionOwner = EventUnitDamageSourcePlayer();
    if (testConds) {
        if (!((lv_hyperionUnit != null))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_hyperionOwner) == true))) {
            return false;
        }
        if (!((UnitGetType(lv_hyperionUnit) == "HyperionVoidCoop"))) {
            return false;
        }
        if (!((libNtve_gf_PlayerIsEnemy(lv_hyperionOwner, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_g_ScoreValue_ComRaynorDamageDealt[lv_hyperionOwner] += FixedToInt(EventUnitDamageAmount());
    PlayerScoreValueSetFromInt(lv_hyperionOwner, "RaynorHyperionDamage", gv_g_ScoreValue_ComRaynorDamageDealt[lv_hyperionOwner]);
    return true;
}
void gt_ScoreCRaynorHyperionDamage_Init () {
    gt_ScoreCRaynorHyperionDamage = TriggerCreate("gt_ScoreCRaynorHyperionDamage_Func");
    TriggerAddEventUnitDamaged(gt_ScoreCRaynorHyperionDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Score - C Kerrigan Resources
//--------------------------------------------------------------------------------------------------
bool gt_ScoreCKerriganResources_Func (bool testConds, bool runActions) {
    string auto0C0F54C2_val;
    // Variable Declarations
    int lv_triggerPlayer;
    // Variable Initialization
    lv_triggerPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin);
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_triggerPlayer) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto0C0F54C2_val = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    if (auto0C0F54C2_val == "KerriganVoidCoopEconDropLT1") {
        PlayerScoreValueSetFromInt(lv_triggerPlayer, "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(lv_triggerPlayer, "KerriganAssimilationResources")+5));
    }
    else if (auto0C0F54C2_val == "KerriganVoidCoopEconDrop1") {
        PlayerScoreValueSetFromInt(lv_triggerPlayer, "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(lv_triggerPlayer, "KerriganAssimilationResources")+10));
    }
    else if (auto0C0F54C2_val == "KerriganVoidCoopEconDrop2") {
        PlayerScoreValueSetFromInt(lv_triggerPlayer, "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(lv_triggerPlayer, "KerriganAssimilationResources")+15));
    }
    else if (auto0C0F54C2_val == "KerriganVoidCoopEconDrop3") {
        PlayerScoreValueSetFromInt(lv_triggerPlayer, "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(lv_triggerPlayer, "KerriganAssimilationResources")+30));
    }
    else if (auto0C0F54C2_val == "KerriganVoidCoopEconDrop4") {
        PlayerScoreValueSetFromInt(lv_triggerPlayer, "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(lv_triggerPlayer, "KerriganAssimilationResources")+60));
    }
    else if (auto0C0F54C2_val == "KerriganVoidCoopEconDrop5") {
        PlayerScoreValueSetFromInt(lv_triggerPlayer, "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(lv_triggerPlayer, "KerriganAssimilationResources")+75));
    }
    else {
    }
    return true;
}
void gt_ScoreCKerriganResources_Init () {
    gt_ScoreCKerriganResources = TriggerCreate("gt_ScoreCKerriganResources_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScoreCKerriganResources, 1, "VoidPickupRemoveDelay");
    TriggerAddEventPlayerEffectUsed(gt_ScoreCKerriganResources, 2, "VoidPickupRemoveDelay");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Score - C Kerrigan Damage
//--------------------------------------------------------------------------------------------------
bool gt_ScoreCKerriganDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kerriganUnit;
    int lv_kerriganOwner;
    // Variable Initialization
    lv_kerriganUnit = EventUnitDamageSourceUnit();
    lv_kerriganOwner = EventUnitDamageSourcePlayer();
    if (testConds) {
        if (!((lv_kerriganUnit != null))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_kerriganOwner) == true))) {
            return false;
        }
        if (!((UnitGetType(lv_kerriganUnit) == "K5Kerrigan"))) {
            return false;
        }
        if (!((libNtve_gf_PlayerIsEnemy(lv_kerriganOwner, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_g_ScoreValue_ComKerriganDamageDealt[lv_kerriganOwner] += FixedToInt(EventUnitDamageAmount());
    PlayerScoreValueSetFromInt(lv_kerriganOwner, "KerriganDamage", gv_g_ScoreValue_ComKerriganDamageDealt[lv_kerriganOwner]);
    return true;
}
void gt_ScoreCKerriganDamage_Init () {
    gt_ScoreCKerriganDamage = TriggerCreate("gt_ScoreCKerriganDamage_Func");
    TriggerAddEventUnitDamaged(gt_ScoreCKerriganDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, gv_g_DefeatUIMessage, libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitPauseAll(true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_index = PlayerGroupLoopCurrent();
        UnitClearSelection(lv_index);
        CameraLockInput(lv_index, true);
        CameraPan(lv_index, gv_g_DefeatUICameraPan, 1.5, -1, 10.0, false);
    }
    PlayerGroupLoopEnd();
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    Wait(7.0, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    gf_ExCoopScoreScreenDisplay(ge_ExCoopScoreScreenResult_Defeat);
    return true;
}
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Final Quake
//--------------------------------------------------------------------------------------------------
bool gt_DefeatFinalQuake_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.5, c_timeGame);
    FogSetStartHeightOverTime(3.0, 7.0);
    SoundPlayForPlayer(SoundLink("AC_BurningTide_Quake_Event", -1), c_maxPlayers, PlayerGroupAll(), 110.0, 0.0);
    CinematicFade(true, 15.0, c_fadeStyleNormal, Color(100.00, 0.00, 0.00), 30.0, false);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShake(PlayerGroupLoopCurrent(), "Medium", "Earthquake", 2.0, 2.0, 20.0);
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "GroundCracks");
    SoundPlayForPlayer(SoundLink("Quake_GroundRip", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    return true;
}
void gt_DefeatFinalQuake_Init () {
    gt_DefeatFinalQuake = TriggerCreate("gt_DefeatFinalQuake_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectivePrimary01Complete, true, false);
    TriggerExecute(gt_ObjectivePrimary02Complete, true, false);
    TriggerExecute(gt_ObjectivePrimary03Complete, true, false);
    TriggerExecute(gt_ObjectivePrimary04Complete, true, false);
    TriggerExecute(gt_ObjectivePrimary05Complete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    gf_ExSendTransmissionFromDehaka("My task has completed. Now I can return into the Nexus. What about you, Commanders?", false);
    UnitPauseAll(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_dEHAKA_UNIT, false);
    UnitIssueOrder(gv_dEHAKA_UNIT, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetFacing(gv_dEHAKA_UNIT, 270.0, 1.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_PauseUnit(gv_dEHAKA_UNIT, true);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_index = PlayerGroupLoopCurrent();
        CameraLockInput(lv_index, true);
        UnitClearSelection(lv_index);
        CameraApplyInfo(lv_index, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(lv_index, UnitGetPosition(gv_dEHAKA_UNIT), 2.0, -1, 10.0, false);
    }
    PlayerGroupLoopEnd();
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(10.0, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    gf_ExCoopScoreScreenDisplay(ge_ExCoopScoreScreenResult_Victory);
    TriggerQueueExit();
    return true;
}
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventDialogControl() == gv_scoreScreenContent.lv_button_Leave))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    GameOver(EventPlayer(), c_gameOverVictory, true, true);
    return true;
}
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
    TriggerEnable(gt_Victory, false);
    TriggerAddEventDialogControl(gt_Victory, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventDialogControl() == gv_scoreScreenContent.lv_button_Leave))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    GameOver(EventPlayer(), c_gameOverDefeat, true, true);
    return true;
}
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
    TriggerEnable(gt_Defeat, false);
    TriggerAddEventDialogControl(gt_Defeat, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blindUnit;
    string lv_blindUnitType;
    int lv_aIPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_eNEMY_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_aIPlayer = PlayerGroupLoopCurrent();
        AISetDifficulty(lv_aIPlayer, c_diffAutoLoadBunkers, true);
        AISetDifficulty(lv_aIPlayer, c_diffAllowTransportGather, false);
        AISetDifficulty(lv_aIPlayer, c_diffNormalVision, false);
        AITransportSetPanic(lv_aIPlayer, 0.05);
        AITransportSetReturn(lv_aIPlayer, RegionGetCenter(RegionFromId(32)));
        AIToggleBulliesInRegion(lv_aIPlayer, RegionEntireMap(), false);
        AIToggleBulliesInRegion(lv_aIPlayer, RegionFromId(17), true);
        AIToggleBulliesInRegion(lv_aIPlayer, RegionFromId(5), true);
        AIToggleBulliesInRegion(lv_aIPlayer, RegionFromId(20), true);
        AIToggleBulliesInRegion(lv_aIPlayer, RegionFromId(30), true);
        AISetBullyRebuildDelay(99.0, 100.0, lv_aIPlayer);
        UnitGroupLoopBegin(UnitGroup(null, lv_aIPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_blindUnit = UnitGroupLoopCurrent();
            lv_blindUnitType = UnitGetType(lv_blindUnit);
            if (((lv_blindUnitType == "WarpPrismPhasing") || (lv_blindUnitType == "WarpPrism") || (lv_blindUnitType == "Observer") || (lv_blindUnitType == "PlanetaryFortress") || (lv_blindUnitType == "ScienceVessel") || (lv_blindUnitType == "Medivac") || (lv_blindUnitType == "Overlord") || (lv_blindUnitType == "Overseer") || (lv_blindUnitType == "CreepTumorUsed"))) {
                AISetUnitScriptControlled(lv_blindUnit, true);
            }
            else {
                if (((lv_blindUnitType == "HybridReaver") || (lv_blindUnitType == "HybridDestroyer") || (lv_blindUnitType == "HybridNemesis") || (lv_blindUnitType == "Hybrid") || (lv_blindUnitType == "HybridDominatorVoid") || (lv_blindUnitType == "HybridBehemoth"))) {
                    AISetUnitNotUsableInWaves(lv_blindUnit, true);
                }
            }
        }
        UnitGroupLoopEnd();
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_AttackWaveSpawn, true, false);
    TriggerExecute(gt_AttackWavesList, true, false);
    return true;
}
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Remove Transports
//--------------------------------------------------------------------------------------------------
bool gt_AIRemoveTransports_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transport;
    // Variable Initialization
    lv_transport = EventUnit();
    if (testConds) {
        if (!(((UnitGetOwner(lv_transport) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(lv_transport) == gv_pLAYER_04_ENEMY)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    AISetUnitNotUsableInWaves(lv_transport, true);
    AISetUnitScriptControlled(lv_transport, true);
    UnitSetHeight(lv_transport, 16.0, 3.0);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_transport);
    return true;
}
void gt_AIRemoveTransports_Init () {
    gt_AIRemoveTransports = TriggerCreate("gt_AIRemoveTransports_Func");
    TriggerAddEventUnitRegion(gt_AIRemoveTransports, null, RegionFromId(32), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI Set Resources
//--------------------------------------------------------------------------------------------------
bool gt_AISetResources_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_eNEMY_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 10000);
    }
    PlayerGroupLoopEnd();
    return true;
}
void gt_AISetResources_Init () {
    gt_AISetResources = TriggerCreate("gt_AISetResources_Func");
    TriggerAddEventTimePeriodic(gt_AISetResources, 10.0, c_timeAI);
}
//--------------------------------------------------------------------------------------------------
// Trigger: >Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(17);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(17);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(17);
    lv_spawnLocationIter = 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(20);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(30);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(20);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(30);
    lv_spawnLocationIter += 1;
    gv_coopAI_AttackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(20);
    return true;
}
void gt_AttackWaveSpawn_Init () {
    gt_AttackWaveSpawn = TriggerCreate("gt_AttackWaveSpawn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: >Attack Waves List
//--------------------------------------------------------------------------------------------------
bool gt_AttackWavesList_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_varianceTotal;
    fixed lv_varianceNext;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ExAISetAttackWave((2.0 * gv_coopAI_MinuteDuration), gt_AttackWave01aHARD);
    gf_ExAISetAttackWave((3.0 * gv_coopAI_MinuteDuration), gt_AttackWave01bHARD);
    lv_varianceNext = RandomFixed(-0.1, 0.1);
    gf_ExAISetAttackWave(((4.0 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave01cNORMAL);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_ExAIGetVarianceNext(lv_varianceTotal);
    gf_ExAISetAttackWave(((6.0 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave02);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_ExAIGetVarianceNext(lv_varianceTotal);
    gf_ExAISetAttackWave(((8.5 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave03EXP);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_ExAIGetVarianceNext(lv_varianceTotal);
    gf_ExAISetAttackWave(((11.0 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave04aH);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_ExAIGetVarianceNext(lv_varianceTotal);
    gf_ExAISetAttackWave(((14.0 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave04b);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_ExAIGetVarianceNext(lv_varianceTotal);
    gf_ExAISetAttackWave(((17.0 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave05EXP);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_ExAIGetVarianceNext(lv_varianceTotal);
    gf_ExAISetAttackWave(((20.0 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave06aH);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_ExAIGetVarianceNext(lv_varianceTotal);
    gf_ExAISetAttackWave(((23.0 + lv_varianceNext) * gv_coopAI_MinuteDuration), gt_AttackWave06b);
    lv_varianceTotal += lv_varianceNext;
    while (!((GameGetMissionTime() >= (26.0 * gv_coopAI_MinuteDuration)))) {
        Wait(1.0, c_timeGame);
    }
    while (((libCOMI_gf_GameIsOver() == false) || (gf_ExCoopIsOnTestMode() == true))) {
        Wait((RandomFixed(3.0, 3.3) * gv_coopAI_MinuteDuration), c_timeAI);
        TriggerExecute(gt_AttackWave07EXPH, true, false);
    }
    return true;
}
void gt_AttackWavesList_Init () {
    gt_AttackWavesList = TriggerCreate("gt_AttackWavesList_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01a (HARD+)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01aHARD_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AC42E263"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, gf_ExAIGetSpawnPoint(), true);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave01aHARD_Init () {
    gt_AttackWave01aHARD = TriggerCreate("gt_AttackWave01aHARD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01b (HARD+)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01bHARD_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
        if (!((gf_ExGetCoopDifficultyLevel() != 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1C0CA270"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_ENEMY, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, gf_ExAIGetSpawnPoint(), true);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave01bHARD_Init () {
    gt_AttackWave01bHARD = TriggerCreate("gt_AttackWave01bHARD_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01c (NORMAL+)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01cNORMAL_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gf_ExGetCoopDifficultyLevel() != 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C2BCE63A"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, gf_ExAIGetSpawnPoint(), true);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave01cNORMAL_Init () {
    gt_AttackWave01cNORMAL = TriggerCreate("gt_AttackWave01cNORMAL_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/79E5B038"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, gf_ExAIGetSpawnPoint(), true);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03 (EXP)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03EXP_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C80F6806"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, gf_ExAIGetSpawnPoint(), true);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    if ((gf_ExGetCoopDifficultyLevel() != 1)) {
        libCOMI_gf_AddAttackForceWaypoint(gf_ExAIGetExpansionPoint(), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave03EXP_Init () {
    gt_AttackWave03EXP = TriggerCreate("gt_AttackWave03EXP_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04a (H)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04aH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    // Variable Initialization
    lv_spawnPoint = gf_ExAIGetSpawnPoint();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/690460E1"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_spawnPoint, true);
    gf_ExAIAddHybridTierToAttackWave(ge_CoopAIAttackWaveHybridTier_HybridTierNormal, 1, lv_spawnPoint);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave04aH_Init () {
    gt_AttackWave04aH = TriggerCreate("gt_AttackWave04aH_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04b_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1B37220B"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, gf_ExAIGetSpawnPoint(), true);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave04b_Init () {
    gt_AttackWave04b = TriggerCreate("gt_AttackWave04b_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05 (EXP)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05EXP_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D035E0EC"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, gf_ExAIGetSpawnPoint(), true);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    if ((gf_ExGetCoopDifficultyLevel() != 1)) {
        libCOMI_gf_AddAttackForceWaypoint(gf_ExAIGetExpansionPoint(), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave05EXP_Init () {
    gt_AttackWave05EXP = TriggerCreate("gt_AttackWave05EXP_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06a (H)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06aH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    // Variable Initialization
    lv_spawnPoint = gf_ExAIGetSpawnPoint();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CF30F147"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_spawnPoint, true);
    gf_ExAIAddHybridTierToAttackWave(ge_CoopAIAttackWaveHybridTier_HybridTierNormal, gf_ExGetCoopDifficultyValueInteger(0, 1, 2, 2), lv_spawnPoint);
    gf_ExAIRegAttackWave(libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
void gt_AttackWave06aH_Init () {
    gt_AttackWave06aH = TriggerCreate("gt_AttackWave06aH_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_wideCoopForce;
    // Variable Initialization
    lv_wideCoopForce = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8EA0673B"));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, gf_ExAIGetSpawnPoint(), true);
    UnitGroupAddUnitGroup(lv_wideCoopForce, libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__1Early, gf_ExAIGetSpawnPoint(), true);
    UnitGroupAddUnitGroup(lv_wideCoopForce, libCOMI_gf_LastCreatedCoopAttackForce());
    gf_ExAIRegAttackWave(lv_wideCoopForce);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_wideCoopForce, 0, true);
    return true;
}
void gt_AttackWave06b_Init () {
    gt_AttackWave06b = TriggerCreate("gt_AttackWave06b_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07 (EXP/H)
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07EXPH_Func (bool testConds, bool runActions) {
    int auto75091A3E_val;
    // Variable Declarations
    point lv_spawnPoint;
    int lv_resourceBucket;
    int lv_techBucket;
    unitgroup lv_wideCoopForce;
    // Variable Initialization
    lv_spawnPoint = gf_ExAIGetSpawnPoint();
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_wideCoopForce = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gf_ExCoopIsOnTestMode() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/3267FBC6") + IntToText(gv_coopAI_AttackWaveRepeatCounter) + StringExternal("Param/Value/98AFF8A1")));
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1329582864));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1329582864));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, lv_spawnPoint, true);
    UnitGroupAddUnitGroup(lv_wideCoopForce, libCOMI_gf_LastCreatedCoopAttackForce());
    auto75091A3E_val = gv_coopAI_AttackWaveRepeatCounter;
    if (auto75091A3E_val == 0) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_spawnPoint, true);
    }
    else if (auto75091A3E_val == 1) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lv_spawnPoint, true);
    }
    else if (auto75091A3E_val == 2) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_spawnPoint, true);
    }
    else if (auto75091A3E_val == 3) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets__5Late, lv_spawnPoint, true);
    }
    else if (auto75091A3E_val == 4) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_spawnPoint, true);
    }
    else if (auto75091A3E_val == 5) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_spawnPoint, true);
        UnitGroupAddUnitGroup(lv_wideCoopForce, libCOMI_gf_LastCreatedCoopAttackForce());
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_spawnPoint, true);
    }
    else if (auto75091A3E_val == 6) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_spawnPoint, true);
        UnitGroupAddUnitGroup(lv_wideCoopForce, libCOMI_gf_LastCreatedCoopAttackForce());
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_spawnPoint, true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_spawnPoint, true);
        UnitGroupAddUnitGroup(lv_wideCoopForce, libCOMI_gf_LastCreatedCoopAttackForce());
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lv_spawnPoint, true);
    }
    UnitGroupAddUnitGroup(lv_wideCoopForce, libCOMI_gf_LastCreatedCoopAttackForce());
    if ((RandomFixed(0.0, 100.0) < 30.0)) {
        gf_ExAIAddHybridTierToAttackWave(gf_ExGetCoopDifficultyHybridTier(ge_CoopAIAttackWaveHybridTier_HybridTierMedium, ge_CoopAIAttackWaveHybridTier_HybridTierWide, ge_CoopAIAttackWaveHybridTier_HybridTierWide), gf_ExGetCoopDifficultyValueInteger(0, RandomInt(1, 2), RandomInt(1, 2), RandomInt(2, 3)), lv_spawnPoint);
    }
    gf_ExAIRegAttackWave(lv_wideCoopForce);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(749889616), false);
    if ((RandomFixed(0.0, 100.0) < 50.0) && (gf_ExGetCoopDifficultyLevel() != 1)) {
        libCOMI_gf_AddAttackForceWaypoint(gf_ExAIGetExpansionPoint(), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_wideCoopForce, 0, true);
    gv_coopAI_AttackWaveRepeatCounter += 1;
    return true;
}
void gt_AttackWave07EXPH_Init () {
    gt_AttackWave07EXPH = TriggerCreate("gt_AttackWave07EXPH_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Primary Objectives P1
//--------------------------------------------------------------------------------------------------
bool gt_CreatePrimaryObjectivesP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    // Variable Initialization
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(4), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(15), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(18), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(1), true, false);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(7), true, false);
    }
    PlayerGroupLoopEnd();
    while ((lv_index <= 4)) {
        gv_dR_PingTooltip[lv_index] = (UnitGetName(gv_dR_uPA[lv_index]) + StringExternal("Param/Value/1B230ADF"));
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, gv_dR_pPA[lv_index], (gv_dR_PingTooltip[lv_index] + StringExternal("Param/Value/A87587E9")));
        gv_dR_Ping[lv_index] = PingLastCreated();
        PingSetColor(gv_dR_Ping[lv_index], Color(75.29, 75.29, 75.29));
        lv_index += 1;
    }
    TriggerExecute(gt_ObjectivePrimary01Create, true, true);
    TriggerExecute(gt_ObjectivePrimary02Create, true, true);
    TriggerExecute(gt_ObjectivePrimary03Create, true, true);
    return true;
}
void gt_CreatePrimaryObjectivesP1_Init () {
    gt_CreatePrimaryObjectivesP1 = TriggerCreate("gt_CreatePrimaryObjectivesP1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Primary Objectives P2
//--------------------------------------------------------------------------------------------------
bool gt_CreatePrimaryObjectivesP2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveShow(gv_objective_Primary01, PlayerGroupAll(), false);
    ObjectiveShow(gv_objective_Primary02, PlayerGroupAll(), false);
    libCOMI_gf_ShareVisionofUnitCoop(gv_tFO_BOSS, true, gv_pLAYER_05_DEHAKA);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_tFO_BOSS), StringExternal("Param/Value/F6904477"));
    gv_g_TFOPing = PingLastCreated();
    PingSetColor(gv_g_TFOPing, Color(100.00, 0.00, 0.00));
    Wait(0.0625, c_timeGame);
    TriggerExecute(gt_ObjectivePrimary04Create, true, true);
    TriggerExecute(gt_ObjectivePrimary05Create, true, true);
    TimerStart(gv_g_TFODefeatTimer, gf_ExGetCoopDifficultyValueReal(360.0, 300.0, 280.0, 240.0), false, c_timeGame);
    TriggerExecute(gt_TFOUpdateTimer, true, false);
    return true;
}
void gt_CreatePrimaryObjectivesP2_Init () {
    gt_CreatePrimaryObjectivesP2 = TriggerCreate("gt_CreatePrimaryObjectivesP2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Optional Objective
//--------------------------------------------------------------------------------------------------
bool gt_CreateOptionalObjective_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(UnitGroupFromId(3), EventUnit()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AnomaliesEventInitQ, true, false);
    return true;
}
void gt_CreateOptionalObjective_Init () {
    gt_CreateOptionalObjective = TriggerCreate("gt_CreateOptionalObjective_Func");
    TriggerAddEventUnitDied(gt_CreateOptionalObjective, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 01) Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary01Create_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ExObjectivePrimary01");
    gv_objective_Primary01 = ObjectiveLastCreated();
    libCOMI_gf_SetMissionObjectiveProgress("ExObjectivePrimary01", gv_objective_Primary01_EssencesCollected);
    ObjectiveSetPriority(gv_objective_Primary01, 10);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary01Create_Init () {
    gt_ObjectivePrimary01Create = TriggerCreate("gt_ObjectivePrimary01Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 01) Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary01Update_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectivePrimary01Create, true, false);
    gv_objective_Primary01_EssencesCollected += 1;
    libCOMI_gf_SetMissionObjectiveProgress("ExObjectivePrimary01", gv_objective_Primary01_EssencesCollected);
    if ((gv_objective_Primary01_EssencesCollected < 5)) {
        gf_ExOmoshActivationCheck();
    }
    else {
        if ((gv_objective_Primary01_EssencesCollected >= 5)) {
            TriggerExecute(gt_ObjectivePrimary01Complete, true, false);
            TriggerExecute(gt_ObjectivePrimary02Complete, true, false);
            TriggerExecute(gt_TFOEventInitQ, true, false);
        }
    }
    return true;
}
void gt_ObjectivePrimary01Update_Init () {
    gt_ObjectivePrimary01Update = TriggerCreate("gt_ObjectivePrimary01Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 01) Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary01Complete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary01Complete, true, false);
    ObjectiveSetState(gv_objective_Primary01, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary01Complete_Init () {
    gt_ObjectivePrimary01Complete = TriggerCreate("gt_ObjectivePrimary01Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 01) Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary01Failed_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary01Failed, true, false);
    ObjectiveSetState(gv_objective_Primary01, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary01Failed_Init () {
    gt_ObjectivePrimary01Failed = TriggerCreate("gt_ObjectivePrimary01Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 02) Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary02Create_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ExObjectivePrimary02");
    gv_objective_Primary02 = ObjectiveLastCreated();
    libCOMI_gf_SetMissionObjectiveProgress("ExObjectivePrimary02", gv_objective_Primary02_EssencesDrained);
    ObjectiveSetPriority(gv_objective_Primary02, 8);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary02Create_Init () {
    gt_ObjectivePrimary02Create = TriggerCreate("gt_ObjectivePrimary02Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 02) Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary02Update_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectivePrimary02Create, true, false);
    gv_objective_Primary02_EssencesDrained += 1;
    libCOMI_gf_SetMissionObjectiveProgress("ExObjectivePrimary02", gv_objective_Primary02_EssencesDrained);
    if ((gv_objective_Primary02_EssencesDrained < 2)) {
        TriggerExecute(gt_DrainRitualMissedQ, true, false);
        gf_ExOmoshActivationCheck();
    }
    else {
        gv_g_DefeatUICameraPan = gv_dR_pPA[gv_obj_INDEX];
        gv_g_DefeatUIMessage = StringExternal("Param/Value/120524EB");
        TriggerExecute(gt_ObjectivePrimary02Failed, true, false);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeGame);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }
    return true;
}
void gt_ObjectivePrimary02Update_Init () {
    gt_ObjectivePrimary02Update = TriggerCreate("gt_ObjectivePrimary02Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 02) Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary02Complete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary02Complete, true, false);
    ObjectiveSetState(gv_objective_Primary02, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary02Complete_Init () {
    gt_ObjectivePrimary02Complete = TriggerCreate("gt_ObjectivePrimary02Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 02) Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary02Failed_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary02Failed, true, false);
    ObjectiveSetState(gv_objective_Primary02, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary02Failed_Init () {
    gt_ObjectivePrimary02Failed = TriggerCreate("gt_ObjectivePrimary02Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 03) Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary03Create_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ExObjectivePrimary03");
    gv_objective_Primary03 = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_Primary03, 6);
    return true;
}
void gt_ObjectivePrimary03Create_Init () {
    gt_ObjectivePrimary03Create = TriggerCreate("gt_ObjectivePrimary03Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 03) Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary03Update_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary03Create, true, false);
    gv_g_DefeatUICameraPan = UnitGetPosition(gv_dEHAKA_UNIT);
    gv_g_DefeatUIMessage = StringExternal("Param/Value/EDAF496B");
    TriggerExecute(gt_ObjectivePrimary03Failed, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeGame);
    TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    return true;
}
void gt_ObjectivePrimary03Update_Init () {
    gt_ObjectivePrimary03Update = TriggerCreate("gt_ObjectivePrimary03Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 03) Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary03Complete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary03Create, true, false);
    ObjectiveSetState(gv_objective_Primary03, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary03Complete_Init () {
    gt_ObjectivePrimary03Complete = TriggerCreate("gt_ObjectivePrimary03Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 03) Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary03Failed_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary03Create, true, false);
    ObjectiveSetState(gv_objective_Primary03, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary03Failed_Init () {
    gt_ObjectivePrimary03Failed = TriggerCreate("gt_ObjectivePrimary03Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 04) Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary04Create_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetMissionObjectiveCustomText("ExObjectivePrimary04", StringToText(""));
    libCOMI_gf_CreateObjectiveCampaign("ExObjectivePrimary04");
    gv_objective_Primary04 = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_Primary04, 12);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary04Create_Init () {
    gt_ObjectivePrimary04Create = TriggerCreate("gt_ObjectivePrimary04Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 04) Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary04Update_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectivePrimary04Create, true, false);
    if ((TimerGetRemaining(gv_g_TFODefeatTimer) > 0.0)) {
        TextExpressionSetToken("Param/Expression/F6ED497C", "timer", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_g_TFODefeatTimer))));
        libCOMI_gf_SetMissionObjectiveCustomText("ExObjectivePrimary04", TextExpressionAssemble("Param/Expression/F6ED497C"));
    }
    else {
        libCOMI_gf_SetMissionObjectiveCustomText("ExObjectivePrimary04", TextExpressionAssemble("Param/Expression/04ED2B5B"));
        gv_g_DefeatUICameraPan = PointFromId(1745232074);
        gv_g_DefeatUIMessage = StringExternal("Param/Value/9AF20DCE");
        TriggerExecute(gt_DefeatFinalQuake, false, false);
        TriggerExecute(gt_ObjectivePrimary04Failed, true, false);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeGame);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }
    return true;
}
void gt_ObjectivePrimary04Update_Init () {
    gt_ObjectivePrimary04Update = TriggerCreate("gt_ObjectivePrimary04Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 04) Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary04Complete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary04Complete, true, false);
    ObjectiveSetState(gv_objective_Primary04, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary04Complete_Init () {
    gt_ObjectivePrimary04Complete = TriggerCreate("gt_ObjectivePrimary04Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 04) Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary04Failed_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary04Failed, true, false);
    ObjectiveSetState(gv_objective_Primary04, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary04Failed_Init () {
    gt_ObjectivePrimary04Failed = TriggerCreate("gt_ObjectivePrimary04Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 05) Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary05Create_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ExObjectivePrimary05");
    gv_objective_Primary05 = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_Primary05, 11);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectivePrimary05Create_Init () {
    gt_ObjectivePrimary05Create = TriggerCreate("gt_ObjectivePrimary05Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Primary 05) Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePrimary05Complete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePrimary05Complete, true, false);
    ObjectiveSetState(gv_objective_Primary05, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    return true;
}
void gt_ObjectivePrimary05Complete_Init () {
    gt_ObjectivePrimary05Complete = TriggerCreate("gt_ObjectivePrimary05Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Optional) Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOptionalCreate_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ExObjectiveOptional");
    gv_objective_Optional = ObjectiveLastCreated();
    libCOMI_gf_SetMissionObjectiveProgress("ExObjectiveOptional", gv_objective_Optional_AnomaliesDeactivated);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectiveOptionalCreate_Init () {
    gt_ObjectiveOptionalCreate = TriggerCreate("gt_ObjectiveOptionalCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Optional) Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOptionalUpdate_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((gv_objective_Optional_AnomaliesDeactivated < 10))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveOptionalCreate, true, false);
    gv_objective_Optional_AnomaliesDeactivated += 1;
    libCOMI_gf_SetMissionObjectiveProgress("ExObjectiveOptional", gv_objective_Optional_AnomaliesDeactivated);
    TriggerExecute(gt_TrDehakaBonusProgressQ, true, false);
    if ((gv_objective_Optional_AnomaliesDeactivated >= 4)) {
        TriggerExecute(gt_AnomaliesEventStop, true, false);
        TriggerExecute(gt_ObjectiveOptionalComplete, true, false);
    }
    return true;
}
void gt_ObjectiveOptionalUpdate_Init () {
    gt_ObjectiveOptionalUpdate = TriggerCreate("gt_ObjectiveOptionalUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective (Optional) Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOptionalComplete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveOptionalCreate, true, false);
    ObjectiveSetState(gv_objective_Optional, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
void gt_ObjectiveOptionalComplete_Init () {
    gt_ObjectiveOptionalComplete = TriggerCreate("gt_ObjectiveOptionalComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ZS_SendTransmissionCampaignTick_Init();
    gt_ExSendTransmissionCoopTick_Init();
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartGameQ_Init();
    gt_TipReadyQ_Init();
    gt_SetSLAlert_Init();
    gt_DehakaFirstAppearance_Init();
    gt_DehakaMend_Init();
    gt_DehakaGenerateSpawns_Init();
    gt_DehakaSpawnsGuard_Init();
    gt_DehakaBurrowCharge_Init();
    gt_DehakaGoesHome_Init();
    gt_DehakaDies_Init();
    gt_TrDehakaAboutAvatarsQ_Init();
    gt_TrDehakaExecutionQ_Init();
    gt_TrDehakaZorggHitQ_Init();
    gt_TrDehakaGorroxHitQ_Init();
    gt_TrDehakaRazShaLavaQ_Init();
    gt_TrDehakaNaraxusHitQ_Init();
    gt_TrDehakaVarookhHitQ_Init();
    gt_TrDehakaOmoshHitQ_Init();
    gt_TrDehakaAmonsDropPAQ_Init();
    gt_TrDehakaAmonsDropBonusQ_Init();
    gt_TrDehakaBonusProgressQ_Init();
    gt_TrDehakaLowLifeQ_Init();
    gt_TrDehakaStrangeRitualQ_Init();
    gt_TrDehakaDrainingWindQ_Init();
    gt_ExecutionStageTimerCreate_Init();
    gt_ExecutionStageTimerRun_Init();
    gt_ExecutionStageTimerDestroy_Init();
    gt_DrainRitualsInit_Init();
    gt_ObjectUnitDies_Init();
    gt_DPrimalAvatar_Init();
    gt_DVoidDevourer_Init();
    gt_DrainRitualMissedQ_Init();
    gt_AddObjectIntoQueue_Init();
    gt_SetQTEssenceQ_Init();
    gt_QTEFeastRitualStart_Init();
    gt_QTEFeastRitualEnd_Init();
    gt_SetQTPrimalAvatarQ_Init();
    gt_RunExecutionStage_Init();
    gt_ShowExecutionTip_Init();
    gt_DestructableArch1_Init();
    gt_DestructableArch2_Init();
    gt_DestructableArch3_Init();
    gt_DestructableArch4_Init();
    gt_PABossBar_Init();
    gt_PAGetBack_Init();
    gt_PARandomAttack_Init();
    gt_PAHint_Init();
    gt_PAZorggQuake_Init();
    gt_PAZorggQuakeIndicator_Init();
    gt_PAZorggPrimalFrenzy_Init();
    gt_PAZorggMyPackA_Init();
    gt_PAZorggMyPackB_Init();
    gt_PAZorggDies_Init();
    gt_PAGorroxCrashingCharge_Init();
    gt_PAGorroxCrashingChargeIndicator_Init();
    gt_PAGorroxArmorOverload_Init();
    gt_PAGorroxBarrage_Init();
    gt_PAGorroxRockPower_Init();
    gt_PAGorroxDies_Init();
    gt_PARazShaAshWormsSpawn_Init();
    gt_PARazShaAshWormsRetreat_Init();
    gt_PARazShaCataclysm_Init();
    gt_PARazShaCataclysmLava_Init();
    gt_PARazShaCataclysmDehaka_Init();
    gt_PARazShaFireBreath_Init();
    gt_PARazShaLivingFlame_Init();
    gt_PARazShaDies_Init();
    gt_PANaraxusAcidVormit_Init();
    gt_PANaraxusCreepersStart_Init();
    gt_PANaraxusCreepersInit_Init();
    gt_PANaraxusCreepersSpawn_Init();
    gt_PANaraxusCreepersMove_Init();
    gt_PANaraxusMultipleAttack_Init();
    gt_PANaraxusAmonsDrop_Init();
    gt_PANaraxusDies_Init();
    gt_PAVarookhMindExplosion_Init();
    gt_PAVarookhTwilightStrike_Init();
    gt_PAVarookhTwilightEnergySpawn_Init();
    gt_PAVarookhAmonsDrop_Init();
    gt_PAVarookhDies_Init();
    gt_AnomaliesEventInitQ_Init();
    gt_BAnomaliesHint_Init();
    gt_BSpawnAnomalies_Init();
    gt_BMarkAnomalies_Init();
    gt_BAnomalyInterraction_Init();
    gt_BAnomalyCounter_Init();
    gt_BCallAmonForces_Init();
    gt_BWorkersBuff_Init();
    gt_AnomaliesEventStop_Init();
    gt_OmoshEventInit_Init();
    gt_OmoshEventStartQ_Init();
    gt_OmoshBlinksAround_Init();
    gt_OmoshCallsDehakaFightQ_Init();
    gt_DehakaHuntingOmosh_Init();
    gt_OmoshGetBack_Init();
    gt_OmoshRandomAttack_Init();
    gt_OmoshTornado_Init();
    gt_OmoshParasiticBomb_Init();
    gt_OmoshAmonsDrop_Init();
    gt_OmoshAmonsDropQ_Init();
    gt_OmoshDiesQ_Init();
    gt_OmoshEssence_Init();
    gt_OmoshEventEnd_Init();
    gt_TFOFloatingCorruption_Init();
    gt_TFOEventInitQ_Init();
    gt_TFOGrantProtectionRitual_Init();
    gt_TFOUpdateTimer_Init();
    gt_TFOHalfTimeExpiredQ_Init();
    gt_TFODehakaStartAssault_Init();
    gt_TFOCorruptionPillarsMarkerNormal_Init();
    gt_TFOCorruptionPillarsMarkerNerfed_Init();
    gt_TFOCorruptionPillarSpawn_Init();
    gt_TFOCorruptionPillarTip_Init();
    gt_TFODehakaAttackPillars_Init();
    gt_TFODrainingWindSpawn_Init();
    gt_TFODrainingWindClear_Init();
    gt_TFOPeriodicShake_Init();
    gt_TFOProtectionFallsQ_Init();
    gt_TFOSpawnPrimals_Init();
    gt_TFOSpawnPrimalsBonus_Init();
    gt_TFOVoidStrike_Init();
    gt_TFOTransitionPhase_Init();
    gt_TFOLightningBreathQ_Init();
    gt_TFOLightningBreathShake_Init();
    gt_TFOAmonsDrop_Init();
    gt_TFOHealLifeBonus_Init();
    gt_TFOLastBossDies_Init();
    gt_TrEnemyAttackingQ_Init();
    gt_TrHybridDetectedQ_Init();
    gt_ScoreDamageDone_Init();
    gt_ScoreCArtanisAbsorb_Init();
    gt_ScoreCArtanisSOADamage_Init();
    gt_ScoreCRaynorMedicHeal_Init();
    gt_ScoreCRaynorHyperionDamage_Init();
    gt_ScoreCKerriganResources_Init();
    gt_ScoreCKerriganDamage_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_DefeatFinalQuake_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_StartAI_Init();
    gt_AIRemoveTransports_Init();
    gt_AISetResources_Init();
    gt_AttackWaveSpawn_Init();
    gt_AttackWavesList_Init();
    gt_AttackWave01aHARD_Init();
    gt_AttackWave01bHARD_Init();
    gt_AttackWave01cNORMAL_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03EXP_Init();
    gt_AttackWave04aH_Init();
    gt_AttackWave04b_Init();
    gt_AttackWave05EXP_Init();
    gt_AttackWave06aH_Init();
    gt_AttackWave06b_Init();
    gt_AttackWave07EXPH_Init();
    gt_CreatePrimaryObjectivesP1_Init();
    gt_CreatePrimaryObjectivesP2_Init();
    gt_CreateOptionalObjective_Init();
    gt_ObjectivePrimary01Create_Init();
    gt_ObjectivePrimary01Update_Init();
    gt_ObjectivePrimary01Complete_Init();
    gt_ObjectivePrimary01Failed_Init();
    gt_ObjectivePrimary02Create_Init();
    gt_ObjectivePrimary02Update_Init();
    gt_ObjectivePrimary02Complete_Init();
    gt_ObjectivePrimary02Failed_Init();
    gt_ObjectivePrimary03Create_Init();
    gt_ObjectivePrimary03Update_Init();
    gt_ObjectivePrimary03Complete_Init();
    gt_ObjectivePrimary03Failed_Init();
    gt_ObjectivePrimary04Create_Init();
    gt_ObjectivePrimary04Update_Init();
    gt_ObjectivePrimary04Complete_Init();
    gt_ObjectivePrimary04Failed_Init();
    gt_ObjectivePrimary05Create_Init();
    gt_ObjectivePrimary05Complete_Init();
    gt_ObjectiveOptionalCreate_Init();
    gt_ObjectiveOptionalUpdate_Init();
    gt_ObjectiveOptionalComplete_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
