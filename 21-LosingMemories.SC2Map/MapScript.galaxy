//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Losing Memories
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC 2017: Losing Memories
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER = 1;
int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 10;
const int gv_pLAYER_04_ENEMY = 11;
const int gv_pLAYER_05_INVADER = 12;
const int gv_pLAYER_06_THRASHER = 6;
const int gv_pLAYER_07_DEFENDERS = 7;
const int gv_pLAYER_08_DEFENDERS = 8;
const int gv_pLAYER_09_ALYSAARS = 9;
const int gv_c_AttackWaveBaseIndex = 10;
const int gv_c_DropWaveIndex = 1;
const int gv_c_ThrasherCountTotal = 17;
//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_BonusObjectiveCrystalsPings {
    unit lv_unit;
    int lv_ping;
    revealer lv_revealer;
    revealer lv_revealer2;
};
struct gs_EasterEgg {
    point lv_point;
    int lv_indexL;
    point lv_pointL;
    int lv_indexR;
    point lv_pointR;
    int lv_indexU;
    point lv_pointU;
    int lv_indexD;
    point lv_pointD;
    unit lv_expectedUnit;
    unit lv_currentUnit;
    bool lv_empty;
};
//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_AIAttackWaveType_AttackWave = 0;
const int ge_AIAttackWaveType_AirDropWave = 1;
const int ge_AIVoidThrasherLevel_Level01 = 0;
const int ge_AIVoidThrasherLevel_Level02 = 1;
const int ge_AIVoidThrasherLevel_Level03 = 2;
const int ge_AIVoidThrasherLevel_Level04 = 3;
const int ge_UntitledPreset001_VoidThrasher_TargetedBombard = 0;
const int ge_UntitledPreset001_VoidThrasher_LightningBreath = 1;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_battlenet;
unit gv_warpConduit;
playergroup gv_hUMAN_PLAYERS;
string[19] gv_pLAYER_RACE;
unitgroup gv_roadGroupPlayers;
unitgroup gv_roadGroupEnemies;
playergroup gv_enemyGroup;
bool gv_gameHasBegun;
unitgroup gv_alysaars;
bool gv_alysaarsFieldOn;
int[4][4] gv_automatonsCounterDialog;
unitgroup gv_automatonsEnemysharevision;
unitgroup gv_bonusObjectiveGatherers;
unit gv_bonusObjectiveAlysaar;
gs_BonusObjectiveCrystalsPings[17] gv_bonusObjectiveCrystalmarkers;
timer gv_bonusObjectiveDurationTimer;
fixed gv_bonusObjectiveDuration;
int gv_bonusObjectiveTarget;
int gv_bonusObjectiveAvailable;
int gv_bonusObjectiveChalicePing;
bool gv_bonusObjectiveWaitingforreturn;
int[4] gv_warpConduitLifeDialog;
bool[4] gv_easterEggPlayerActive;
int gv_easterEggPlayer;
unitgroup gv_easterEggExtraunits;
gs_EasterEgg[19] gv_easterEgg;
gs_EasterEgg gv_easterEggAvailable;
int gv_aIAttackWaveRandom;
timer gv_aIAttackWaveFinaldelay;
playergroup gv_aIAttackWavePlayers;
unitgroup gv_aIAttackWaveHybrid;
string gv_aIAttackWaveHybridMajor;
string gv_aIAttackWaveHybridMinor;
int gv_aIAttackWaveIndex;
point[13][9] gv_aIAttackWavesRoutes;
string gv_aIDropAttackTransportType;
fixed gv_aIDropAttackTransportCargoCapacity;
playergroup gv_aIDropAttackDroppingPlayers;
string gv_aIDropAttackTerranTransportType;
timer[4] gv_aIStoneCenturionStoneCenturionAttackCooldown;
fixed[4] gv_aIStoneCenturionStoneCenturionAttackDelay;
unit gv_thrasherUnit;
fixed gv_voidThrasher_ShieldsIncrease;
fixed gv_voidThrasher_LifeIncrease;
fixed gv_thrasherAttackCooldown_Bombardment;
fixed gv_thrasherAttackCooldown_LightningBreath;
string gv_c_ThrasherUnitType;
unitgroup gv_p06Wave;
int gv_aIVoidThrasherNumber;
bool gv_aIVoidThrasherAlive;
timer[3] gv_thrasherAttackCooldown;
int gv_transmissionVoidThrasherAttackingLoop;
int gv_transmissionPlayerattacksbaseloop;
point gv_victoryCompletePan;
int gv_objectiveReachthewallofknowledge;
int gv_objectiveTheWarpConduitmustsurvive;
int gv_objectiveGatherKhaydarinCrystals;
void InitGlobals () {
    int init_i;
    int init_j;
    gv_battlenet = true;
    gv_warpConduit = UnitFromId(1314688197);
    gv_hUMAN_PLAYERS = PlayerGroupEmpty();
    gv_roadGroupPlayers = UnitGroup(null, gv_pLAYER_07_DEFENDERS, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_roadGroupEnemies = UnitGroup(null, gv_pLAYER_08_DEFENDERS, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gv_enemyGroup = PlayerGroupEmpty();
    gv_alysaars = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_automatonsCounterDialog[init_i][init_j] = c_invalidDialogId;
        }
    }
    gv_automatonsEnemysharevision = UnitGroupEmpty();
    gv_bonusObjectiveGatherers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_bonusObjectiveCrystalmarkers[init_i].lv_ping = c_invalidPingId;
    }
    gv_bonusObjectiveDurationTimer = TimerCreate();
    gv_bonusObjectiveDuration = 600.0;
    gv_bonusObjectiveTarget = 200;
    gv_bonusObjectiveChalicePing = c_invalidPingId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_warpConduitLifeDialog[init_i] = c_invalidDialogId;
    }
    gv_easterEggExtraunits = UnitGroupEmpty();
    gv_aIAttackWaveFinaldelay = TimerCreate();
    gv_aIAttackWavePlayers = PlayerGroupEmpty();
    gv_aIAttackWaveHybrid = UnitGroupEmpty();
    gv_aIDropAttackDroppingPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_aIStoneCenturionStoneCenturionAttackCooldown[init_i] = TimerCreate();
    }
    gv_thrasherAttackCooldown_LightningBreath = 10.0;
    gv_c_ThrasherUnitType = "VoidThrasher";
    gv_p06Wave = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_thrasherAttackCooldown[init_i] = TimerCreate();
    }
    gv_victoryCompletePan = UnitGetPosition(UnitFromId(1314688197));
    gv_objectiveReachthewallofknowledge = c_invalidObjectiveId;
    gv_objectiveTheWarpConduitmustsurvive = c_invalidObjectiveId;
    gv_objectiveGatherKhaydarinCrystals = c_invalidObjectiveId;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show);
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_EasterEggDefine (int lp_number, int lp_down, int lp_left, int lp_right, int lp_up, unit lp_placedUnit, unit lp_expectedUnit, bool lp_empty);
void gf_AIAttackWaveSendatTime (fixed lp_time, trigger lp_aIAttackWave);
void gf_AIAttackWaveSend (unitgroup lp_attackWave, int lp_route, playergroup lp_attackingPlayers);
void gf_AIAttackWaveAssignPing (wave lp_wave, int lp_wavePlayer);
int gf_AIAttackWaveGetIndex ();
void gf_AIAttackWaveNextIndex ();
fixed gf_AIAttackWaveGetVarianceNext (fixed lp_varianceTotal);
void gf_AIAttackWavesSetRoutes ();
void gf_AIDropAttackSendWave (unitgroup lp_attackWave, int lp_route);
void gf_AIDropAttackRemoveEmptyTransports (unit lp_transport);
void gf_StoneCenturionAIThinkP7 (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup);
void gf_StoneCenturionAIThinkP8 (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup);
void gf_AIVoidThrasherCreate (unit lp_voidRift, int lp_thrasherLevel);
timer gf_GetVoidThrasherAttackCooldown (unit lp_thrasher, int lp_thrasherAttack);
void gf_VoidThrasherAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup);
void gf_AIInvadersDisablescriptcontrol (unit lp_unit, point lp_point);
int gf_bonusObjectiveTargetSum();
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
void gt_Init02Players();
void gt_AIStart();
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartGame;
trigger gt_IntroductionWallofKnowledgeQ;
trigger gt_IntroductionRoadsQ;
trigger gt_AlysaarsCreate;
trigger gt_AlysaarsReacheffect;
trigger gt_AlysaarsMakeReturn;
trigger gt_AlysaarsFieldKill;
trigger gt_AlysaarsMakeWarpOut;
trigger gt_AutomatonsCounter;
trigger gt_AutomatonsCounterEnemy;
trigger gt_AutomatonsPingRoad;
trigger gt_AutomatonsPingRoadEnemy;
trigger gt_AutomatonsEnemysharevision;
trigger gt_AutomatonsAlmostDone;
trigger gt_AutomatonsActivateenemyStoneCenturion;
trigger gt_AutomatonsPingedunitdies;
trigger gt_BonusObjectiveActivate;
trigger gt_BonusObjectivePingswhenreturning;
trigger gt_BonusObjectivePingswhengathering;
trigger gt_BonusObjectiveRemovefromgroup;
trigger gt_BonusObjectiveReturniftheunitisinthezone;
trigger gt_BonusObjectiveHelper;
trigger gt_BonusObjectiveRemovePing;
trigger gt_BonusObjectiveReturnanimation;
trigger gt_BonusObjectiveUpdate;
trigger gt_BonusObjectiveEnd;
trigger gt_WarpConduitDamageResponse;
trigger gt_EasterEggNotAllowed;
trigger gt_EasterEggInit;
trigger gt_EasterEggMoveblock;
trigger gt_EasterEggEnd;
trigger gt_EasterEggDeselectBlock;
trigger gt_AIAttackWaveRunA;
trigger gt_AIAttackWaveRunAFinal;
trigger gt_AIAttackWave01325A;
trigger gt_AIAttackWave0255A;
trigger gt_AIAttackWave038A;
trigger gt_AIAttackWave0411A;
trigger gt_AIAttackWave0515A;
trigger gt_AIAttackWave06185A;
trigger gt_AIAttackWaveAfterClearance01A;
trigger gt_AIAttackWaveAfterClearance02A;
trigger gt_AIAttackWaveVoidThrasherWave;
trigger gt_AIVoidThrasherAttackWave;
trigger gt_AIVoidThrasherMissiles;
trigger gt_AIVoidThrasherExtraBreathAttacks;
trigger gt_AIInvadersStarthostilities;
trigger gt_AIInvadersUnitRevive;
trigger gt_AIInvadersGotoyourside;
trigger gt_AIDefendersReturntotheline;
trigger gt_TransmissionEnemyAttackingQ;
trigger gt_TransmissionHybridDetectedQ;
trigger gt_TransmissionIntroduction1;
trigger gt_TransmissionIntroduction2;
trigger gt_TransmissionIntroduction3;
trigger gt_TransmissionIntroduction4;
trigger gt_TransmissionStartfightingQ;
trigger gt_TransmissionLevel1ClearedQ;
trigger gt_TransmissionLevel2ClearedQ;
trigger gt_TransmissionLastForcesHighlightQ;
trigger gt_TransmissionStonelotEncounterQ;
trigger gt_TransmissionAllautomatonskilledQ;
trigger gt_TransmissionFirstAlysaarwarpsoutQ;
trigger gt_TransmissionLastAlysaarQ;
trigger gt_TransmissionEnemystartsfightingQ;
trigger gt_TransmissionEnemybeatsfirstgroupQ;
trigger gt_TransmissionEnemyreacheshighgroundQ;
trigger gt_TransmissionEnemyfightsStonelotQ;
trigger gt_TransmissionWarpConduitdamagedQ;
trigger gt_TransmissionWarpConduitdamaged50Q;
trigger gt_TransmissionWarpConduitdamaged25Q;
trigger gt_TransmissionWarpConduitdamaged10Q;
trigger gt_TransmissionWarpConduitdamaged5Q;
trigger gt_TransmissionVoidThrasherAppearsQ;
trigger gt_TransmissionVoidThrasherAttackingQ;
trigger gt_TransmissionVoidThrasherDeathQ;
trigger gt_TransmissionPlayerattacksbaseQ;
trigger gt_TransmissionSideobjectiveactivatesQ;
trigger gt_TransmissionSideobjectivereminder1Q;
trigger gt_TransmissionSideobjectivereminder2Q;
trigger gt_TransmissionSideobjectiveWorkerdiesQ;
trigger gt_TransmissionSideobjectivecompletedQ;
trigger gt_TransmissionSideobjectivefailedQ;
trigger gt_TransmissionVictory1;
trigger gt_TransmissionVictory2RaynorVariant;
trigger gt_TransmissionDefeatEnemyreachesfirst;
trigger gt_TransmissionDefeatWarpConduitdestroyedbeforereaching;
trigger gt_TransmissionDefeatWarpConduitdestroyedafterreaching;
trigger gt_TransmissionEasterEggTQ;
trigger gt_TransmissionEasterEggPQ;
trigger gt_TransmissionEasterEggZQ;
trigger gt_DefeatWarpConduitDead;
trigger gt_Defeatenemyreachedthewall;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_ObjectiveReachthewallofknowledgeCreate;
trigger gt_ObjectiveReachthewallofknowledgeComplete;
trigger gt_ObjectiveReachthewallofknowledgeUpdate;
trigger gt_ObjectiveReachthewallofknowledgeFailed;
trigger gt_ObjectiveTheWarpConduitmustsurviveCreate;
trigger gt_ObjectiveTheWarpConduitmustsurviveComplete;
trigger gt_ObjectiveTheWarpConduitmustsurviveUpdate;
trigger gt_ObjectiveTheWarpConduitmustsurviveFailed;
trigger gt_ObjectiveGatherKhaydarinCrystalsCreate;
trigger gt_ObjectiveGatherKhaydarinCrystalsComplete;
trigger gt_ObjectiveGatherKhaydarinCrystalsUpdate;
trigger gt_ObjectiveGatherKhaydarinCrystalsFailed;
//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();
    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }
    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}
bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }
    return true;
}
void gf_EasterEggDefine (int lp_number, int lp_down, int lp_left, int lp_right, int lp_up, unit lp_placedUnit, unit lp_expectedUnit, bool lp_empty) {
    // Implementation
    gv_easterEgg[lp_number].lv_currentUnit = lp_placedUnit;
    gv_easterEgg[lp_number].lv_expectedUnit = lp_expectedUnit;
    gv_easterEgg[lp_number].lv_empty = lp_empty;
    gv_easterEgg[lp_number].lv_point = PointFromName(("15P" + IntToString((lp_number + 10))));
    if ((lp_down != 0)) {
        gv_easterEgg[lp_number].lv_indexD = lp_down;
        gv_easterEgg[lp_number].lv_pointD = PointFromName(("15P" + IntToString((lp_down + 10))));
    }
    if ((lp_left != 0)) {
        gv_easterEgg[lp_number].lv_indexL = lp_left;
        gv_easterEgg[lp_number].lv_pointD = PointFromName(("15P" + IntToString((lp_left + 10))));
    }
    if ((lp_right != 0)) {
        gv_easterEgg[lp_number].lv_indexR = lp_right;
        gv_easterEgg[lp_number].lv_pointD = PointFromName(("15P" + IntToString((lp_right + 10))));
    }
    if ((lp_up != 0)) {
        gv_easterEgg[lp_number].lv_indexU = lp_up;
        gv_easterEgg[lp_number].lv_pointD = PointFromName(("15P" + IntToString((lp_up + 10))));
    }
}
void gf_AIAttackWaveSendatTime (fixed lp_time, trigger lp_aIAttackWave) {
    // Variable Declarations
    const fixed lv_finaldelay = 180.0;
    // Variable Initialization
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        TimerStart(gv_aIAttackWaveFinaldelay, lv_finaldelay, false, c_timeGame);
        TriggerExecute(lp_aIAttackWave, true, false);
    }
}
trigger auto_gf_AIAttackWaveSend_Trigger = null;
unitgroup auto_gf_AIAttackWaveSend_lp_attackWave;
int auto_gf_AIAttackWaveSend_lp_route;
playergroup auto_gf_AIAttackWaveSend_lp_attackingPlayers;
void gf_AIAttackWaveSend (unitgroup lp_attackWave, int lp_route, playergroup lp_attackingPlayers) {
    auto_gf_AIAttackWaveSend_lp_attackWave = lp_attackWave;
    auto_gf_AIAttackWaveSend_lp_route = lp_route;
    auto_gf_AIAttackWaveSend_lp_attackingPlayers = lp_attackingPlayers;
    if (auto_gf_AIAttackWaveSend_Trigger == null) {
        auto_gf_AIAttackWaveSend_Trigger = TriggerCreate("auto_gf_AIAttackWaveSend_TriggerFunc");
    }
    TriggerExecute(auto_gf_AIAttackWaveSend_Trigger, false, false);
}
bool auto_gf_AIAttackWaveSend_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackWave = auto_gf_AIAttackWaveSend_lp_attackWave;
    int lp_route = auto_gf_AIAttackWaveSend_lp_route;
    playergroup lp_attackingPlayers = auto_gf_AIAttackWaveSend_lp_attackingPlayers;
    int init_i;
    int auto3DBC3EB6_ae;
    int auto3DBC3EB6_ai;
    int auto01B92C99_ae;
    int auto01B92C99_ai;
    unitgroup autoFD430847_g;
    int autoFD430847_u;
    int auto449B473B_ae;
    int auto449B473B_ai;
    unitgroup autoAC03ECBC_g;
    int autoAC03ECBC_u;
    int auto55ED8508_ae;
    int auto55ED8508_ai;
    int auto78938D5C_ae;
    int auto78938D5C_ai;
    int autoB7A14315_ae;
    int autoB7A14315_ai;
    int auto7425ED9F_ae;
    int auto7425ED9F_ai;
    // Variable Declarations
    const int lv_c_AttackingPlayerMax = 3;
    int[lv_c_AttackingPlayerMax + 1] lv_attackingPlayers;
    waveinfo[lv_c_AttackingPlayerMax + 1] lv_waveInfo;
    wave[lv_c_AttackingPlayerMax + 1] lv_wave;
    unit lv_waveUnit;
    int[lv_c_AttackingPlayerMax + 1] lv_waveIndex;
    wavetarget lv_waveTarget;
    int lv_playerIter;
    int lv_random;
    unit lv_waveUnitIter;
    int lv_waypoint;
    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_AttackingPlayerMax; init_i += 1) {
        lv_waveInfo[init_i] = AIWaveInfoCreate();
    }
    // Implementation
    gf_AIAttackWaveNextIndex();
    lv_random = RandomInt(1, 2);
    lv_waveTarget = AIWaveTargetUnit(gv_warpConduit);
    auto3DBC3EB6_ae = PlayerGroupCount(lp_attackingPlayers);
    auto3DBC3EB6_ai = 1;
    lv_playerIter = 1;
    for ( ; ( (auto3DBC3EB6_ai >= 0 && lv_playerIter <= auto3DBC3EB6_ae) || (auto3DBC3EB6_ai <= 0 && lv_playerIter >= auto3DBC3EB6_ae) ) ; lv_playerIter += auto3DBC3EB6_ai ) {
        lv_attackingPlayers[lv_playerIter] = PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter);
        lv_waveIndex[lv_playerIter] = gf_AIAttackWaveGetIndex();
        lv_wave[lv_playerIter] = AIWaveCreate(lv_waveInfo[lv_playerIter], lv_attackingPlayers[lv_playerIter], gv_aIAttackWavesRoutes[lp_route][1]);
        AIWaveInfoAttack(AIWaveInfo(lv_wave[lv_playerIter]), lv_playerIter, gv_aIAttackWavesRoutes[lp_route][1], lv_waveTarget, 10);
        AIWaveSet(lv_attackingPlayers[lv_playerIter], lv_waveIndex[lv_playerIter], lv_wave[lv_playerIter]);
        AIWaveTargetClearWaypoints(lv_waveTarget);
        auto01B92C99_ae = 5;
        auto01B92C99_ai = 1;
        lv_waypoint = 1;
        for ( ; ( (auto01B92C99_ai >= 0 && lv_waypoint <= auto01B92C99_ae) || (auto01B92C99_ai <= 0 && lv_waypoint >= auto01B92C99_ae) ) ; lv_waypoint += auto01B92C99_ai ) {
            if ((gv_aIAttackWavesRoutes[lp_route][lv_waypoint] == null)) {
                break;
            }
            else {
                AIWaveTargetAddWaypoint(lv_waveTarget, gv_aIAttackWavesRoutes[lp_route][lv_waypoint], false, (lv_waypoint - 1));
            }
        }
    }
    autoFD430847_g = lp_attackWave;
    autoFD430847_u = 1;
    for ( ; autoFD430847_u <= UnitGroupCount(autoFD430847_g, c_unitCountAll) ; autoFD430847_u += BoolToInt(lv_waveUnitIter == UnitGroupUnit(autoFD430847_g, autoFD430847_u)) ) {
        lv_waveUnitIter = UnitGroupUnit(autoFD430847_g, autoFD430847_u);
        auto449B473B_ae = PlayerGroupCount(lp_attackingPlayers);
        auto449B473B_ai = 1;
        lv_playerIter = 1;
        for ( ; ( (auto449B473B_ai >= 0 && lv_playerIter <= auto449B473B_ae) || (auto449B473B_ai <= 0 && lv_playerIter >= auto449B473B_ae) ) ; lv_playerIter += auto449B473B_ai ) {
            if ((UnitGetOwner(lv_waveUnitIter) == PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter))) {
                AISetUnitScriptControlled(lv_waveUnitIter, false);
                AIWaveAddUnit(lv_wave[lv_playerIter], lv_waveUnitIter);
            }
        }
    }
    autoAC03ECBC_g = gv_aIAttackWaveHybrid;
    autoAC03ECBC_u = 1;
    for ( ; autoAC03ECBC_u <= UnitGroupCount(autoAC03ECBC_g, c_unitCountAll) ; autoAC03ECBC_u += BoolToInt(lv_waveUnitIter == UnitGroupUnit(autoAC03ECBC_g, autoAC03ECBC_u)) ) {
        lv_waveUnitIter = UnitGroupUnit(autoAC03ECBC_g, autoAC03ECBC_u);
        auto55ED8508_ae = PlayerGroupCount(lp_attackingPlayers);
        auto55ED8508_ai = 1;
        lv_playerIter = 1;
        for ( ; ( (auto55ED8508_ai >= 0 && lv_playerIter <= auto55ED8508_ae) || (auto55ED8508_ai <= 0 && lv_playerIter >= auto55ED8508_ae) ) ; lv_playerIter += auto55ED8508_ai ) {
            if ((UnitGetOwner(lv_waveUnitIter) == PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter))) {
                UnitGroupRemove(gv_aIAttackWaveHybrid, lv_waveUnitIter);
                AIWaveAddUnit(lv_wave[lv_playerIter], lv_waveUnitIter);
            }
        }
    }
    auto78938D5C_ae = PlayerGroupCount(lp_attackingPlayers);
    auto78938D5C_ai = 1;
    lv_playerIter = 1;
    for ( ; ( (auto78938D5C_ai >= 0 && lv_playerIter <= auto78938D5C_ae) || (auto78938D5C_ai <= 0 && lv_playerIter >= auto78938D5C_ae) ) ; lv_playerIter += auto78938D5C_ai ) {
        AIWaveSetType(lv_wave[lv_playerIter], c_waveStateAttack, lv_waveTarget);
        gf_AIAttackWaveAssignPing(lv_wave[lv_playerIter], lv_attackingPlayers[lv_playerIter]);
    }
    Wait(80.0, c_timeGame);
    UnitGroupLoopBegin(lp_attackWave);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == gv_aIDropAttackTransportType)) {
            libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitGroupLoopCurrent(), UnitGetPosition(UnitGroupLoopCurrent()), gv_aIAttackWavesRoutes[lp_route][1]);
        }
        AIRemoveUnitFromAnyWaves(UnitGroupLoopCurrent());
        autoB7A14315_ae = PlayerGroupCount(lp_attackingPlayers);
        autoB7A14315_ai = 1;
        lv_playerIter = 1;
        for ( ; ( (autoB7A14315_ai >= 0 && lv_playerIter <= autoB7A14315_ae) || (autoB7A14315_ai <= 0 && lv_playerIter >= autoB7A14315_ae) ) ; lv_playerIter += autoB7A14315_ai ) {
            if ((UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter))) {
                AIAttackWaveUseUnit(PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter), UnitGroupLoopCurrent());
            }
        }
    }
    UnitGroupLoopEnd();
    auto7425ED9F_ae = PlayerGroupCount(lp_attackingPlayers);
    auto7425ED9F_ai = 1;
    lv_playerIter = 1;
    for ( ; ( (auto7425ED9F_ai >= 0 && lv_playerIter <= auto7425ED9F_ae) || (auto7425ED9F_ai <= 0 && lv_playerIter >= auto7425ED9F_ae) ) ; lv_playerIter += auto7425ED9F_ai ) {
        AIAttackWaveSetTargetUnit(PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter), gv_warpConduit);
        AIAttackWaveSend(PlayerGroupPlayer(lp_attackingPlayers, lv_playerIter), 0, false);
    }
    return true;
}
void gf_AIAttackWaveAssignPing (wave lp_wave, int lp_wavePlayer) {
    int autoFA2241FE_ae;
    int autoFA2241FE_ai;
    // Variable Declarations
    wave lv_existingWave;
    int lv_emptyWaveIndex;
    // Variable Initialization
    // Implementation
    autoFA2241FE_ae = libCOMI_gv_cMC_CoopAI_MaxWaveCount;
    autoFA2241FE_ai = 1;
    lv_emptyWaveIndex = 0;
    for ( ; ( (autoFA2241FE_ai >= 0 && lv_emptyWaveIndex <= autoFA2241FE_ae) || (autoFA2241FE_ai <= 0 && lv_emptyWaveIndex >= autoFA2241FE_ae) ) ; lv_emptyWaveIndex += autoFA2241FE_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lp_wavePlayer][lv_emptyWaveIndex] == null)) {
            if ((lv_emptyWaveIndex > libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark)) {
                libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark = lv_emptyWaveIndex;
            }
            break;
        }
    }
    libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lp_wavePlayer][lv_emptyWaveIndex] = lp_wave;
}
int gf_AIAttackWaveGetIndex () {
    // Variable Declarations
    wave lv_existingWave;
    int lv_emptyWaveIndex;
    // Variable Initialization
    // Implementation
    return (gv_c_AttackWaveBaseIndex + gv_aIAttackWaveIndex);
}
void gf_AIAttackWaveNextIndex () {
    // Implementation
    gv_aIAttackWaveIndex += 1;
}
fixed gf_AIAttackWaveGetVarianceNext (fixed lp_varianceTotal) {
    // Implementation
    if ((lp_varianceTotal > 0.0)) {
        return RandomFixed(-0.5, 0.0);
    }
    else {
        return RandomFixed(0.0, 0.5);
    }
}
void gf_AIAttackWavesSetRoutes () {
    // Variable Declarations
    int lv_route;
    int lv_waypoint;
    // Variable Initialization
    // Implementation
    lv_route = 1;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(402620742);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(523381313);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(2066506445);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1167908890);
    lv_route = 2;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(658776792);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1417537924);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(2066506445);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1167908890);
    lv_route = 3;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(658776792);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1417537924);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(2066506445);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1167908890);
    lv_route = 4;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(658776792);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1417537924);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(566956258);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1149188938);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(303502383);
    lv_route = 5;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1639675300);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1760522158);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(566956258);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1149188938);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(303502383);
    lv_route = 6;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1639675300);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1760522158);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1939467547);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1670212276);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(303502383);
    lv_route = 7;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(402620742);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(523381313);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1039541968);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1243025075);
    lv_route = 8;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1639675300);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1760522158);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1521903199);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(252486672);
    lv_route = 9;
    lv_waypoint = 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1639675300);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1760522158);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(1521903199);
    lv_waypoint += 1;
    gv_aIAttackWavesRoutes[lv_route][lv_waypoint] = PointFromId(210852809);
}
trigger auto_gf_AIDropAttackSendWave_Trigger = null;
unitgroup auto_gf_AIDropAttackSendWave_lp_attackWave;
int auto_gf_AIDropAttackSendWave_lp_route;
void gf_AIDropAttackSendWave (unitgroup lp_attackWave, int lp_route) {
    auto_gf_AIDropAttackSendWave_lp_attackWave = lp_attackWave;
    auto_gf_AIDropAttackSendWave_lp_route = lp_route;
    if (auto_gf_AIDropAttackSendWave_Trigger == null) {
        auto_gf_AIDropAttackSendWave_Trigger = TriggerCreate("auto_gf_AIDropAttackSendWave_TriggerFunc");
    }
    TriggerExecute(auto_gf_AIDropAttackSendWave_Trigger, false, false);
}
bool auto_gf_AIDropAttackSendWave_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_attackWave = auto_gf_AIDropAttackSendWave_lp_attackWave;
    int lp_route = auto_gf_AIDropAttackSendWave_lp_route;
    int init_i;
    unitgroup autoE1254666_g;
    int autoE1254666_u;
    int auto3759E30E_ae;
    int auto3759E30E_ai;
    int auto3FCAD2B0_ae;
    int auto3FCAD2B0_ai;
    unitgroup auto9E27D5CB_g;
    int auto9E27D5CB_u;
    int auto54FA3EA5_ae;
    int auto54FA3EA5_ai;
    int auto43594A87_ae;
    int auto43594A87_ai;
    string auto487196A1_val;
    unitgroup auto05867A5F_g;
    int auto05867A5F_u;
    int autoB3C62AA6_ae;
    int autoB3C62AA6_ai;
    int auto943F78F3_ae;
    int auto943F78F3_ai;
    int autoC21D8F9C_ae;
    int autoC21D8F9C_ai;
    // Variable Declarations
    const int lv_c_DropPlayerMax = 4;
    waveinfo[lv_c_DropPlayerMax + 1] lv_waveInfo;
    wave[lv_c_DropPlayerMax + 1] lv_wave;
    int lv_waveIndex;
    wavetarget lv_waveTarget;
    fixed[lv_c_DropPlayerMax + 1] lv_cargoTotal;
    int lv_transportCount;
    unit lv_droppedFuelCell;
    unitgroup lv_defenseUnits;
    playergroup lv_dropAttackPlayers;
    int lv_playerGroupIter;
    int lv_playerIter;
    unit lv_dropUnitIter;
    int lv_random;
    point lv_attackDestination;
    int lv_waypoint;
    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_DropPlayerMax; init_i += 1) {
        lv_waveInfo[init_i] = AIWaveInfoCreate();
    }
    lv_waveTarget = AIWaveTargetUnit(gv_warpConduit);
    lv_defenseUnits = UnitGroupEmpty();
    lv_dropAttackPlayers = PlayerGroupEmpty();
    // Implementation
    autoE1254666_g = lp_attackWave;
    autoE1254666_u = 1;
    for ( ; autoE1254666_u <= UnitGroupCount(autoE1254666_g, c_unitCountAll) ; autoE1254666_u += BoolToInt(lv_dropUnitIter == UnitGroupUnit(autoE1254666_g, autoE1254666_u)) ) {
        lv_dropUnitIter = UnitGroupUnit(autoE1254666_g, autoE1254666_u);
        PlayerGroupAdd(lv_dropAttackPlayers, UnitGetOwner(lv_dropUnitIter));
    }
    gf_AIAttackWaveNextIndex();
    auto3759E30E_ae = PlayerGroupCount(lv_dropAttackPlayers);
    auto3759E30E_ai = 1;
    lv_playerGroupIter = 1;
    for ( ; ( (auto3759E30E_ai >= 0 && lv_playerGroupIter <= auto3759E30E_ae) || (auto3759E30E_ai <= 0 && lv_playerGroupIter >= auto3759E30E_ae) ) ; lv_playerGroupIter += auto3759E30E_ai ) {
        lv_playerIter = PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerGroupIter);
        lv_wave[lv_playerGroupIter] = AIWaveCreate(lv_waveInfo[lv_playerGroupIter], lv_playerIter, gv_aIAttackWavesRoutes[lp_route][1]);
        AIWaveInfoAttack(AIWaveInfo(lv_wave[lv_playerGroupIter]), lv_playerIter, gv_aIAttackWavesRoutes[lp_route][1], lv_waveTarget, 180);
        AIWaveSet(lv_playerIter, gf_AIAttackWaveGetIndex(), lv_wave[lv_playerGroupIter]);
        auto3FCAD2B0_ae = 5;
        auto3FCAD2B0_ai = 1;
        lv_waypoint = 1;
        for ( ; ( (auto3FCAD2B0_ai >= 0 && lv_waypoint <= auto3FCAD2B0_ae) || (auto3FCAD2B0_ai <= 0 && lv_waypoint >= auto3FCAD2B0_ae) ) ; lv_waypoint += auto3FCAD2B0_ai ) {
            if ((gv_aIAttackWavesRoutes[lp_route][lv_waypoint] == null)) {
                break;
            }
            else {
                AIWaveTargetAddWaypoint(lv_waveTarget, gv_aIAttackWavesRoutes[lp_route][lv_waypoint], true, (lv_waypoint - 1));
            }
        }
        if ((lp_route == 7)) {
            AIWaveTargetAddWaypoint(lv_waveTarget, PointFromId(1167908890), false, 4);
            lv_attackDestination = PointFromId(1243025075);
        }
        else if ((lp_route == 8)) {
            AIWaveTargetAddWaypoint(lv_waveTarget, PointFromId(1167908890), false, 4);
            lv_attackDestination = PointFromId(1243025075);
        }
        else if ((lp_route == 9)) {
            AIWaveTargetAddWaypoint(lv_waveTarget, PointFromId(303502383), false, 4);
            lv_attackDestination = PointFromId(252486672);
        }
        AIWaveSetType(lv_wave[lv_playerGroupIter], c_waveStateDropAttack, lv_waveTarget);
    }
    auto9E27D5CB_g = lp_attackWave;
    auto9E27D5CB_u = 1;
    for ( ; auto9E27D5CB_u <= UnitGroupCount(auto9E27D5CB_g, c_unitCountAll) ; auto9E27D5CB_u += BoolToInt(lv_dropUnitIter == UnitGroupUnit(auto9E27D5CB_g, auto9E27D5CB_u)) ) {
        lv_dropUnitIter = UnitGroupUnit(auto9E27D5CB_g, auto9E27D5CB_u);
        auto54FA3EA5_ae = PlayerGroupCount(lv_dropAttackPlayers);
        auto54FA3EA5_ai = 1;
        lv_playerGroupIter = 1;
        for ( ; ( (auto54FA3EA5_ai >= 0 && lv_playerGroupIter <= auto54FA3EA5_ae) || (auto54FA3EA5_ai <= 0 && lv_playerGroupIter >= auto54FA3EA5_ae) ) ; lv_playerGroupIter += auto54FA3EA5_ai ) {
            if ((UnitGetOwner(lv_dropUnitIter) == PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerGroupIter))) {
                AISetUnitScriptControlled(lv_dropUnitIter, false);
                AIWaveAddUnitPriority(lv_wave[lv_playerGroupIter], lv_dropUnitIter, c_prioWave);
                lv_cargoTotal[lv_playerGroupIter] += CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_dropUnitIter), "CargoSize", PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerGroupIter));
            }
        }
    }
    auto43594A87_ae = PlayerGroupCount(lv_dropAttackPlayers);
    auto43594A87_ai = 1;
    lv_playerGroupIter = 1;
    for ( ; ( (auto43594A87_ai >= 0 && lv_playerGroupIter <= auto43594A87_ae) || (auto43594A87_ai <= 0 && lv_playerGroupIter >= auto43594A87_ae) ) ; lv_playerGroupIter += auto43594A87_ai ) {
        auto487196A1_val = PlayerRace(PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerGroupIter));
       
        gv_aIDropAttackTransportType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerGroupIter));
         gv_aIDropAttackTransportCargoCapacity = 8.0;
        lv_transportCount = RoundI(MaxF((Round((lv_cargoTotal[lv_playerGroupIter] / gv_aIDropAttackTransportCargoCapacity)) * 2.0), 1.0));
        UnitCreate(lv_transportCount, gv_aIDropAttackTransportType, 0, PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerGroupIter), gv_aIAttackWavesRoutes[lp_route][1], libNtve_gf_RandomAngle());
        auto05867A5F_g = UnitLastCreatedGroup();
        auto05867A5F_u = 1;
        for ( ; auto05867A5F_u <= UnitGroupCount(auto05867A5F_g, c_unitCountAll) ; auto05867A5F_u += BoolToInt(lv_dropUnitIter == UnitGroupUnit(auto05867A5F_g, auto05867A5F_u)) ) {
            lv_dropUnitIter = UnitGroupUnit(auto05867A5F_g, auto05867A5F_u);
            AISetUnitScriptControlled(lv_dropUnitIter, false);
            AIWaveAddUnitPriority(lv_wave[lv_playerGroupIter], lv_dropUnitIter, c_prioTransport);
            gf_AIDropAttackRemoveEmptyTransports(lv_dropUnitIter);
        }
    }
    Wait(3.0, c_timeAI);
    autoB3C62AA6_ae = PlayerGroupCount(lv_dropAttackPlayers);
    autoB3C62AA6_ai = 1;
    lv_playerGroupIter = 1;
    for ( ; ( (autoB3C62AA6_ai >= 0 && lv_playerGroupIter <= autoB3C62AA6_ae) || (autoB3C62AA6_ai <= 0 && lv_playerGroupIter >= autoB3C62AA6_ae) ) ; lv_playerGroupIter += autoB3C62AA6_ai ) {
        lv_playerIter = PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerGroupIter);
        gf_AIAttackWaveAssignPing(lv_wave[lv_playerGroupIter], lv_playerIter);
    }
    Wait(80.0, c_timeAI);
    UnitGroupLoopBegin(lp_attackWave);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == gv_aIDropAttackTransportType)) {
            libLbty_gf_OrderTransporttoUnloadAllthenDespawn(UnitGroupLoopCurrent(), UnitGetPosition(UnitGroupLoopCurrent()), gv_aIAttackWavesRoutes[lp_route][1]);
        }
        AIRemoveUnitFromAnyWaves(UnitGroupLoopCurrent());
        auto943F78F3_ae = PlayerGroupCount(lv_dropAttackPlayers);
        auto943F78F3_ai = 1;
        lv_playerIter = 1;
        for ( ; ( (auto943F78F3_ai >= 0 && lv_playerIter <= auto943F78F3_ae) || (auto943F78F3_ai <= 0 && lv_playerIter >= auto943F78F3_ae) ) ; lv_playerIter += auto943F78F3_ai ) {
            if ((UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerIter))) {
                AIAttackWaveUseUnit(PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerIter), UnitGroupLoopCurrent());
            }
        }
    }
    UnitGroupLoopEnd();
    autoC21D8F9C_ae = PlayerGroupCount(lv_dropAttackPlayers);
    autoC21D8F9C_ai = 1;
    lv_playerIter = 1;
    for ( ; ( (autoC21D8F9C_ai >= 0 && lv_playerIter <= autoC21D8F9C_ae) || (autoC21D8F9C_ai <= 0 && lv_playerIter >= autoC21D8F9C_ae) ) ; lv_playerIter += autoC21D8F9C_ai ) {
        AIAttackWaveSetTargetUnit(PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerIter), gv_warpConduit);
        AIAttackWaveSend(PlayerGroupPlayer(lv_dropAttackPlayers, lv_playerIter), 0, false);
    }
    return true;
}
trigger auto_gf_AIDropAttackRemoveEmptyTransports_Trigger = null;
unit auto_gf_AIDropAttackRemoveEmptyTransports_lp_transport;
void gf_AIDropAttackRemoveEmptyTransports (unit lp_transport) {
    auto_gf_AIDropAttackRemoveEmptyTransports_lp_transport = lp_transport;
    if (auto_gf_AIDropAttackRemoveEmptyTransports_Trigger == null) {
        auto_gf_AIDropAttackRemoveEmptyTransports_Trigger = TriggerCreate("auto_gf_AIDropAttackRemoveEmptyTransports_TriggerFunc");
    }
    TriggerExecute(auto_gf_AIDropAttackRemoveEmptyTransports_Trigger, false, false);
}
bool auto_gf_AIDropAttackRemoveEmptyTransports_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_AIDropAttackRemoveEmptyTransports_lp_transport;
    // Implementation
    Wait(60.0, c_timeGame);
    while (true) {
        if ((UnitIsValid(lp_transport) == false)) {
            return true;
        }
        if ((UnitOrderCount(lp_transport) == 0) && (UnitCargoValue(lp_transport, c_unitCargoUnitCount) == 0) && (libNtve_gf_UnitInRegion(lp_transport, RegionCircle(PlayerStartLocation(UnitGetOwner(lp_transport)), 10.0)) == true)) {
            UnitSetHeight(lp_transport, 20.0, 6.0);
            Wait(6.0, c_timeGame);
            UnitRemove(lp_transport);
            return true;
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}
void gf_StoneCenturionAIThinkP7 (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    unitgroup auto62872C29_g;
    int auto62872C29_u;
    int auto35F1D39C_ae;
    int auto35F1D39C_ai;
    int autoB7B75C85_ae;
    int autoB7B75C85_ai;
    // Variable Declarations
    unitgroup lv_threatGroup;
    point lv_targetP;
    unit lv_targetU;
    int lv_targetPlayer;
    int lv_random;
    unit lv_pickedUnit;
    int lv_range;
    int lv_minScoreIter;
    order lv_currentOrder;
    int lv_delay;
    // Variable Initialization
    lv_threatGroup = UnitGroupEmpty();
    // Implementation
    lv_delay = 1;
    if ((libNtve_gf_UnitInRegion(lp_aiUnit, RegionFromId(3)) == false)) {
        TimerStart(gv_aIStoneCenturionStoneCenturionAttackCooldown[lv_delay], gv_aIStoneCenturionStoneCenturionAttackDelay[lv_delay], false, c_timeGame);
        libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionCharge", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_aiUnit), 5.0, PointFromId(875311682))));
    }
    UnitGroupAddUnitGroup(lv_threatGroup, UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_aiUnit), 18.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_threatGroup, UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_aiUnit), 18.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto62872C29_g = lv_threatGroup;
    auto62872C29_u = 1;
    for ( ; auto62872C29_u <= UnitGroupCount(auto62872C29_g, c_unitCountAll) ; auto62872C29_u += BoolToInt(lv_pickedUnit == UnitGroupUnit(auto62872C29_g, auto62872C29_u)) ) {
        lv_pickedUnit = UnitGroupUnit(auto62872C29_g, auto62872C29_u);
        if (((UnitGetType(lv_pickedUnit) == "Observer") || (UnitGetType(lv_pickedUnit) == "Overseer"))) {
            UnitGroupRemove(lv_threatGroup, lv_pickedUnit);
        }
    }
    if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0)) {
        if ((TimerGetRemaining(gv_aIStoneCenturionStoneCenturionAttackCooldown[lv_delay]) <= 0.0)) {
            TimerStart(gv_aIStoneCenturionStoneCenturionAttackCooldown[lv_delay], gv_aIStoneCenturionStoneCenturionAttackDelay[lv_delay], false, c_timeGame);
            auto35F1D39C_ae = 18;
            auto35F1D39C_ai = 3;
            lv_range = 1;
            for ( ; ( (auto35F1D39C_ai >= 0 && lv_range <= auto35F1D39C_ae) || (auto35F1D39C_ai <= 0 && lv_range >= auto35F1D39C_ae) ) ; lv_range += auto35F1D39C_ai ) {
                autoB7B75C85_ae = 0;
                autoB7B75C85_ai = -1;
                lv_minScoreIter = 4;
                for ( ; ( (autoB7B75C85_ai >= 0 && lv_minScoreIter <= autoB7B75C85_ae) || (autoB7B75C85_ai <= 0 && lv_minScoreIter >= autoB7B75C85_ae) ) ; lv_minScoreIter += autoB7B75C85_ai ) {
                    lv_targetP = AIBestTargetPoint(lv_threatGroup, 1, 50, lv_minScoreIter, 3.0, UnitGetPosition(lp_aiUnit), lv_range, c_unitAttributeNone);
                    if ((lv_targetP != null)) {
                        break;
                    }
                }
                if ((lv_targetP != null)) {
                    break;
                }
            }
            lv_random = RandomInt(1, 10);
            lv_targetU = UnitGroupClosestToPoint(UnitGroupFilterRegion(lv_threatGroup, RegionCircle(lv_targetP, 3.0), 0), UnitGetPosition(lp_aiUnit));
            if ((lv_random <= 4) && (DistanceBetweenPoints(UnitGetPosition(lp_aiUnit), lv_targetP) <= 3.5) && (PointPathingPassable(lv_targetP) == true)) {
                libNtve_gf_AICast(lp_aiUnit, OrderTargetingUnit(AbilityCommand("StoneCenturionWhirlwind", 0), lv_targetU));
                Wait(3.0, c_timeAI);
                if ((UnitOrderHasAbil(lp_aiUnit, "StoneCenturionWhirlwind") == true)) {
                    lv_random = RandomInt(5, 10);
                }
            }
            else {
                lv_random = RandomInt(5, 10);
                if ((lv_random <= 7) && (DistanceBetweenPoints(UnitGetPosition(lp_aiUnit), lv_targetP) <= 8.0) && (PointPathingPassable(lv_targetP) == true)) {
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionCharge", 0), lv_targetP));
                    Wait(3.0, c_timeAI);
                    if ((UnitOrderHasAbil(lp_aiUnit, "StoneCenturionCharge") == true)) {
                        libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionCharge", 0), lv_targetP));
                    }
                }
                else {
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionLightningAoE", 0), lv_targetP));
                    Wait(3.0, c_timeAI);
                    if ((UnitOrderHasAbil(lp_aiUnit, "StoneCenturionLightningAoE") == true)) {
                        libNtve_gf_AICast(lp_aiUnit, Order(AbilityCommand("stop", 0)));
                    }
                }
            }
        }
    }
}
void gf_StoneCenturionAIThinkP8 (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    unitgroup auto4DA96025_g;
    int auto4DA96025_u;
    int autoC450975F_ae;
    int autoC450975F_ai;
    int autoD8CFB846_ae;
    int autoD8CFB846_ai;
    // Variable Declarations
    unitgroup lv_threatGroup;
    point lv_targetP;
    unit lv_targetU;
    int lv_targetPlayer;
    int lv_random;
    unit lv_pickedUnit;
    int lv_range;
    int lv_minScoreIter;
    order lv_currentOrder;
    int lv_delay;
    // Variable Initialization
    lv_threatGroup = UnitGroupEmpty();
    // Implementation
    lv_delay = 2;
    if ((libNtve_gf_UnitInRegion(lp_aiUnit, RegionFromId(4)) == false)) {
        TimerStart(gv_aIStoneCenturionStoneCenturionAttackCooldown[lv_delay], gv_aIStoneCenturionStoneCenturionAttackDelay[lv_delay], false, c_timeGame);
        libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionCharge", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_aiUnit), 5.0, PointFromId(379692544))));
    }
    UnitGroupAddUnitGroup(lv_threatGroup, UnitGroup(null, gv_pLAYER_05_INVADER, RegionCircle(UnitGetPosition(lp_aiUnit), 18.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((lp_aiUnit == UnitFromId(1359970396))) {
    }
    auto4DA96025_g = lv_threatGroup;
    auto4DA96025_u = 1;
    for ( ; auto4DA96025_u <= UnitGroupCount(auto4DA96025_g, c_unitCountAll) ; auto4DA96025_u += BoolToInt(lv_pickedUnit == UnitGroupUnit(auto4DA96025_g, auto4DA96025_u)) ) {
        lv_pickedUnit = UnitGroupUnit(auto4DA96025_g, auto4DA96025_u);
        if (((UnitGetType(lv_pickedUnit) == "Observer") || (UnitGetType(lv_pickedUnit) == "Overseer"))) {
            UnitGroupRemove(lv_threatGroup, lv_pickedUnit);
        }
    }
    if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0)) {
        if ((TimerGetRemaining(gv_aIStoneCenturionStoneCenturionAttackCooldown[lv_delay]) <= 0.0)) {
            TimerStart(gv_aIStoneCenturionStoneCenturionAttackCooldown[lv_delay], gv_aIStoneCenturionStoneCenturionAttackDelay[lv_delay], false, c_timeGame);
            autoC450975F_ae = 18;
            autoC450975F_ai = 3;
            lv_range = 1;
            for ( ; ( (autoC450975F_ai >= 0 && lv_range <= autoC450975F_ae) || (autoC450975F_ai <= 0 && lv_range >= autoC450975F_ae) ) ; lv_range += autoC450975F_ai ) {
                autoD8CFB846_ae = 0;
                autoD8CFB846_ai = -1;
                lv_minScoreIter = 4;
                for ( ; ( (autoD8CFB846_ai >= 0 && lv_minScoreIter <= autoD8CFB846_ae) || (autoD8CFB846_ai <= 0 && lv_minScoreIter >= autoD8CFB846_ae) ) ; lv_minScoreIter += autoD8CFB846_ai ) {
                    lv_targetP = AIBestTargetPoint(lv_threatGroup, 1, 50, lv_minScoreIter, 3.0, UnitGetPosition(lp_aiUnit), lv_range, c_unitAttributeNone);
                    if ((lv_targetP != null)) {
                        break;
                    }
                }
                if ((lv_targetP != null)) {
                    break;
                }
            }
            lv_random = RandomInt(1, 10);
            lv_targetU = UnitGroupClosestToPoint(UnitGroupFilterRegion(lv_threatGroup, RegionCircle(lv_targetP, 3.0), 0), UnitGetPosition(lp_aiUnit));
            if ((lv_random <= 4) && (DistanceBetweenPoints(UnitGetPosition(lp_aiUnit), lv_targetP) <= 3.5) && (PointPathingPassable(lv_targetP) == true)) {
                libNtve_gf_AICast(lp_aiUnit, OrderTargetingUnit(AbilityCommand("StoneCenturionWhirlwind", 0), lv_targetU));
                Wait(3.0, c_timeAI);
                if ((UnitOrderHasAbil(lp_aiUnit, "StoneCenturionWhirlwind") == true)) {
                    lv_random = RandomInt(5, 10);
                }
            }
            else {
                lv_random = RandomInt(5, 10);
                if ((lv_random <= 7) && (DistanceBetweenPoints(UnitGetPosition(lp_aiUnit), lv_targetP) <= 8.0) && (PointPathingPassable(lv_targetP) == true)) {
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionCharge", 0), lv_targetP));
                    Wait(3.0, c_timeAI);
                    if ((UnitOrderHasAbil(lp_aiUnit, "StoneCenturionCharge") == true)) {
                        libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionCharge", 0), lv_targetP));
                    }
                }
                else {
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("StoneCenturionLightningAoE", 0), lv_targetP));
                    Wait(3.0, c_timeAI);
                    if ((UnitOrderHasAbil(lp_aiUnit, "StoneCenturionLightningAoE") == true)) {
                        libNtve_gf_AICast(lp_aiUnit, Order(AbilityCommand("stop", 0)));
                    }
                }
            }
        }
    }
}
trigger auto_gf_AIVoidThrasherCreate_Trigger = null;
unit auto_gf_AIVoidThrasherCreate_lp_voidRift;
int auto_gf_AIVoidThrasherCreate_lp_thrasherLevel;
void gf_AIVoidThrasherCreate (unit lp_voidRift, int lp_thrasherLevel) {
    auto_gf_AIVoidThrasherCreate_lp_voidRift = lp_voidRift;
    auto_gf_AIVoidThrasherCreate_lp_thrasherLevel = lp_thrasherLevel;
    if (auto_gf_AIVoidThrasherCreate_Trigger == null) {
        auto_gf_AIVoidThrasherCreate_Trigger = TriggerCreate("auto_gf_AIVoidThrasherCreate_TriggerFunc");
    }
    TriggerExecute(auto_gf_AIVoidThrasherCreate_Trigger, false, false);
}
bool auto_gf_AIVoidThrasherCreate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidRift = auto_gf_AIVoidThrasherCreate_lp_voidRift;
    int lp_thrasherLevel = auto_gf_AIVoidThrasherCreate_lp_thrasherLevel;
    int auto362703ED_val;
    int autoCF424810_val;
    // Variable Declarations
    point lv_spawnLocation;
    region lv_terrainHideRegion;
    // Variable Initialization
    // Implementation
    if (((lp_voidRift == null) || (UnitIsAlive(lp_voidRift) == false) || (UnitIsAlive(gv_warpConduit) == false) || (libCOMI_gf_GameIsOver() == true))) {
        return true;
    }
    lv_spawnLocation = UnitGetPosition(lp_voidRift);
    lv_terrainHideRegion = RegionRect((PointGetX(lv_spawnLocation) - 2.0), (PointGetY(lv_spawnLocation) - 2.0), (PointGetX(lv_spawnLocation) + 2.0), (PointGetY(lv_spawnLocation) + 2.0));
    UnitRemove(lp_voidRift);
    Wait(0.0625, c_timeAI);
    UnitCreate(1, gv_c_ThrasherUnitType, c_unitCreateIgnorePlacement, gv_pLAYER_06_THRASHER, UnitGetPosition(lp_voidRift), AngleBetweenPoints(UnitGetPosition(lp_voidRift), UnitGetPosition(gv_warpConduit)));
    gv_aIVoidThrasherAlive = true;
    gv_aIVoidThrasherNumber += 1;
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_c_ThrasherUnitType, "LifeMax", gv_pLAYER_06_THRASHER) + gv_voidThrasher_LifeIncrease * (lp_thrasherLevel)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_c_ThrasherUnitType, "ShieldsMax", gv_pLAYER_06_THRASHER) + gv_voidThrasher_ShieldsIncrease * (lp_thrasherLevel)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitLastCreated()), 3.0), 7.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitLastCreated()), 3.0), 7.0, false);
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    AnimWait(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 1.0, c_animationOffsetStart);
    TerrainShowRegion(lv_terrainHideRegion, false);
    AnimWait(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.0, c_animationOffsetEnd);
    AISetUnitScriptControlled(UnitLastCreated(), false);
    auto362703ED_val = lp_thrasherLevel;
    if (auto362703ED_val == ge_AIVoidThrasherLevel_Level01) {
        gv_thrasherAttackCooldown_Bombardment = 3.0;
    }
    else if (auto362703ED_val == ge_AIVoidThrasherLevel_Level02) {
        gv_thrasherAttackCooldown_Bombardment = 2.75;
    }
    else if (auto362703ED_val == ge_AIVoidThrasherLevel_Level03) {
        gv_thrasherAttackCooldown_Bombardment = 2.6;
    }
    else if (auto362703ED_val == ge_AIVoidThrasherLevel_Level04) {
        gv_thrasherAttackCooldown_Bombardment = 2.5;
    }
    else {
    }
    autoCF424810_val = lp_thrasherLevel;
    if (autoCF424810_val == ge_AIVoidThrasherLevel_Level01) {
        gv_thrasherAttackCooldown_LightningBreath = 10.0;
    }
    else if (autoCF424810_val == ge_AIVoidThrasherLevel_Level02) {
        gv_thrasherAttackCooldown_LightningBreath = 9.0;
    }
    else if (autoCF424810_val == ge_AIVoidThrasherLevel_Level03) {
        gv_thrasherAttackCooldown_LightningBreath = 7.5;
    }
    else if (autoCF424810_val == ge_AIVoidThrasherLevel_Level04) {
        gv_thrasherAttackCooldown_LightningBreath = 6.0;
    }
    else {
    }
    gv_thrasherUnit = UnitLastCreated();
    UnitGroupAdd(gv_p06Wave, UnitLastCreated());
    AIAttackWaveUseUnit(gv_pLAYER_06_THRASHER, UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_06_THRASHER, 0, true);
    while (!((UnitIsAlive(UnitLastCreated()) == false))) {
        Wait(1.0, c_timeGame);
    }
    TerrainShowRegion(lv_terrainHideRegion, true);
    gv_aIVoidThrasherAlive = false;
    TriggerExecute(gt_TransmissionVoidThrasherDeathQ, true, false);
    return true;
}
timer gf_GetVoidThrasherAttackCooldown (unit lp_thrasher, int lp_thrasherAttack) {
    // Variable Declarations
    int lv_unitIter;
    // Variable Initialization
    // Implementation
    return gv_thrasherAttackCooldown[(lp_thrasherAttack)];
}
void gf_VoidThrasherAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    unitgroup auto0702CABB_g;
    int auto0702CABB_u;
    int autoF7758FC5_ae;
    int autoF7758FC5_ai;
    unitgroup auto550D37B9_g;
    int auto550D37B9_u;
    // Variable Declarations
    const bool lv_c_BombardObjective = true;
    timer lv_attackCooldown_Bombard;
    timer lv_attackCooldown_LightningBreath;
    unitgroup lv_threatGroup;
    point lv_target;
    unit lv_highestVitalityUnit;
    fixed lv_highestVitality;
    unit lv_testUnit;
    fixed lv_testVitality;
    int lv_targetPlayer;
    int lv_minScoreIter;
    unit lv_pickedUnit;
    // Variable Initialization
    lv_attackCooldown_Bombard = TimerCreate();
    lv_attackCooldown_LightningBreath = TimerCreate();
    lv_threatGroup = UnitGroupEmpty();
    // Implementation
    lv_attackCooldown_Bombard = gf_GetVoidThrasherAttackCooldown(lp_aiUnit, ge_UntitledPreset001_VoidThrasher_TargetedBombard);
    lv_attackCooldown_LightningBreath = gf_GetVoidThrasherAttackCooldown(lp_aiUnit, ge_UntitledPreset001_VoidThrasher_LightningBreath);
    lv_threatGroup = UnitGroupFilterAlliance(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_aiUnit), CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VoidThrasherLightningAoE", "Range[" + IntToString(0) + "]", c_playerAny)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), lp_player, c_unitAllianceEnemy, 0);
    auto0702CABB_g = lv_threatGroup;
    auto0702CABB_u = 1;
    for ( ; auto0702CABB_u <= UnitGroupCount(auto0702CABB_g, c_unitCountAll) ; auto0702CABB_u += BoolToInt(lv_pickedUnit == UnitGroupUnit(auto0702CABB_g, auto0702CABB_u)) ) {
        lv_pickedUnit = UnitGroupUnit(auto0702CABB_g, auto0702CABB_u);
        if (((UnitGetType(lv_pickedUnit) == "Observer") || (UnitGetType(lv_pickedUnit) == "Overseer"))) {
            UnitGroupRemove(lv_threatGroup, lv_pickedUnit);
        }
    }
    if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0)) {
        if ((TimerGetRemaining(lv_attackCooldown_LightningBreath) <= 0.0)) {
            autoF7758FC5_ae = 0;
            autoF7758FC5_ai = -1;
            lv_minScoreIter = 4;
            for ( ; ( (autoF7758FC5_ai >= 0 && lv_minScoreIter <= autoF7758FC5_ae) || (autoF7758FC5_ai <= 0 && lv_minScoreIter >= autoF7758FC5_ae) ) ; lv_minScoreIter += autoF7758FC5_ai ) {
                lv_target = AIBestTargetPoint(lv_threatGroup, 1, 30, lv_minScoreIter, 2.2, UnitGetPosition(lp_aiUnit), CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VoidThrasherLightningAoE", "Range[" + IntToString(0) + "]", c_playerAny), c_unitAttributeNone);
                if ((lv_target != null)) {
                    TimerStart(lv_attackCooldown_LightningBreath, gv_thrasherAttackCooldown_LightningBreath, false, c_timeAI);
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), lv_target));
                }
            }
        }
    }
    else if (true) {
        if ((TimerGetRemaining(lv_attackCooldown_Bombard) <= 0.0)) {
            TimerStart(lv_attackCooldown_Bombard, (gv_thrasherAttackCooldown_Bombardment * RandomFixed(0.95, 1.05)), false, c_timeAI);
            if ((lv_c_BombardObjective == true)) {
                TriggerExecute(gt_TransmissionVoidThrasherAttackingQ, true, false);
                libNtve_gf_AICast(lp_aiUnit, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_warpConduit));
            }
            else {
                lv_targetPlayer = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
                lv_threatGroup = UnitGroup(null, lv_targetPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto550D37B9_g = lv_threatGroup;
                auto550D37B9_u = 1;
                for ( ; auto550D37B9_u <= UnitGroupCount(auto550D37B9_g, c_unitCountAll) ; auto550D37B9_u += BoolToInt(lv_testUnit == UnitGroupUnit(auto550D37B9_g, auto550D37B9_u)) ) {
                    lv_testUnit = UnitGroupUnit(auto550D37B9_g, auto550D37B9_u);
                    lv_testVitality = UnitGetPropertyFixed(lv_testUnit, c_unitPropVitality, c_unitPropNormal);
                    if ((lv_testVitality > lv_highestVitality)) {
                        lv_highestVitality = lv_testVitality;
                        lv_highestVitalityUnit = lv_testUnit;
                    }
                    else {
                        if ((lv_testVitality == lv_highestVitality)) {
                            if ((UnitGetPropertyFixed(lv_testUnit, c_unitPropVitality, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestVitalityUnit, c_unitPropVitality, c_unitPropCurrent))) {
                                lv_highestVitality = lv_testVitality;
                                lv_highestVitalityUnit = lv_testUnit;
                            }
                        }
                    }
                }
                libNtve_gf_AICast(lp_aiUnit, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), lv_highestVitalityUnit));
            }
        }
    }
}
trigger auto_gf_AIInvadersDisablescriptcontrol_Trigger = null;
unit auto_gf_AIInvadersDisablescriptcontrol_lp_unit;
point auto_gf_AIInvadersDisablescriptcontrol_lp_point;
void gf_AIInvadersDisablescriptcontrol (unit lp_unit, point lp_point) {
    auto_gf_AIInvadersDisablescriptcontrol_lp_unit = lp_unit;
    auto_gf_AIInvadersDisablescriptcontrol_lp_point = lp_point;
    if (auto_gf_AIInvadersDisablescriptcontrol_Trigger == null) {
        auto_gf_AIInvadersDisablescriptcontrol_Trigger = TriggerCreate("auto_gf_AIInvadersDisablescriptcontrol_TriggerFunc");
    }
    TriggerExecute(auto_gf_AIInvadersDisablescriptcontrol_Trigger, false, false);
}
bool auto_gf_AIInvadersDisablescriptcontrol_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_AIInvadersDisablescriptcontrol_lp_unit;
    point lp_point = auto_gf_AIInvadersDisablescriptcontrol_lp_point;
    // Implementation
    while (true) {
        if ((UnitIsAlive(lp_unit) == true)) {
            if ((libNtve_gf_UnitInRegion(lp_unit, RegionCircle(lp_point, 5.0)) == true) && (UnitOrderCount(lp_unit) == 0)) {
                break;
            }
            else {
                Wait(1.0, c_timeGame);
            }
        }
        else {
            break;
        }
    }
    if ((UnitIsAlive(lp_unit) == true)) {
        AISetUnitScriptControlled(lp_unit, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    playergroup autoD0C7B886_g;
    int autoD0C7B886_p;
    string autoD4183FE1_val;
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_unit;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
void gt_Init02Players () {
    string autoFE777F0D_val;
    playergroup autoE525B505_g;
    int autoE525B505_p;
    playergroup auto805AE70E_g;
    int auto805AE70E_p;
    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;
    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_05_INVADER);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_06_THRASHER);
    PlayerSetColorIndex(gv_pLAYER_07_DEFENDERS, 3, true);
    PlayerSetColorIndex(gv_pLAYER_08_DEFENDERS, 3, true);
    PlayerSetColorIndex(gv_pLAYER_09_ALYSAARS, 11, true);
    PlayerSetState(gv_pLAYER_05_INVADER, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_05_INVADER, c_playerStateVespeneCostIgnored, true);
    libNtve_gf_SetAlliance(gv_pLAYER_07_DEFENDERS, gv_pLAYER_08_DEFENDERS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    
    PlayerGroupLoopBegin(libCOMI_gv_vU_Allies);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_07_DEFENDERS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_08_DEFENDERS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_09_ALYSAARS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(libCOMI_gv_vU_Enemies);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_07_DEFENDERS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_08_DEFENDERS, libNtve_ge_AllianceSetting_Enemy);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetAlliance(gv_pLAYER_09_ALYSAARS, gv_pLAYER_07_DEFENDERS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_09_ALYSAARS, gv_pLAYER_08_DEFENDERS, libNtve_ge_AllianceSetting_Ally);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    gt_Init02Players();
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    gt_AIStart();
    TriggerExecute(gt_StartGame, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TechTreeRequirementsEnable(gv_pLAYER_05_INVADER, false);
    TechTreeRestrictionsEnable(gv_pLAYER_05_INVADER, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    int autoDF133317_val;
    // Variable Declarations
    fixed lv_scale;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_06_THRASHER, gv_c_ThrasherUnitType, "VoidThrasherAIThink", false);
    UnitSetTeamColorIndex(UnitFromId(1359970396), 13);
    UnitGroupAdd(gv_roadGroupPlayers, UnitFromId(1359970396));
    UnitSetTeamColorIndex(UnitFromId(1775367823), 13);
    UnitGroupAdd(gv_roadGroupEnemies, UnitFromId(1775367823));
    UnitGroupLoopBegin(UnitGroup("HelperArrowInvulnerable", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    if (((libCOMI_gf_GetMissionDifficulty() == 1) || (libCOMI_gf_GetMissionDifficulty() == 2))) {
        UnitRemove(UnitFromId(1711321022));
        UnitRemove(UnitFromId(1305720755));
        UnitRemove(UnitFromId(1786297002));
        UnitRemove(UnitFromId(1028973004));
        UnitRemove(UnitFromId(614976980));
        UnitRemove(UnitFromId(956361657));
        UnitRemove(UnitFromId(1527478749));
        UnitRemove(UnitFromId(1902066828));
        UnitRemove(UnitFromId(533799587));
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 1)) {
        UnitGroupLoopBegin(gv_roadGroupPlayers);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "PurifierDarkTemplar")) {
                UnitRemove(UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
    }
    UnitGroupLoopBegin(gv_roadGroupPlayers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "ObserverNerazim") || (UnitGetType(UnitGroupLoopCurrent()) == "PylonNerazim"))) {
            UnitGroupRemove(gv_roadGroupPlayers, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_roadGroupEnemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "ObserverNerazim") || (UnitGetType(UnitGroupLoopCurrent()) == "PylonNerazim"))) {
            UnitGroupRemove(gv_roadGroupEnemies, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_roadGroupPlayers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "StalkerInstigatorNerazim") || (UnitGetType(UnitGroupLoopCurrent()) == "CorsairNerazim"))) {
            libHots_gf_StorePointForUnit(UnitGroupLoopCurrent(), 1, UnitGetPosition(UnitGroupLoopCurrent()));
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_roadGroupEnemies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "StalkerInstigatorNerazim") || (UnitGetType(UnitGroupLoopCurrent()) == "CorsairNerazim"))) {
            libHots_gf_StorePointForUnit(UnitGroupLoopCurrent(), 1, UnitGetPosition(UnitGroupLoopCurrent()));
        }
    }
    UnitGroupLoopEnd();
    UnitSetState(gv_warpConduit, c_unitStateTargetable, false);
    libCOMI_gf_SetUnitInfoTextCampaign(gv_warpConduit, null, StringExternal("Param/Value/C9053B43"), null);
    autoDF133317_val = libCOMI_gf_GetMissionDifficulty();
    if (autoDF133317_val == 1) {
        UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifeMax, 5000.0);
        UnitSetPropertyFixed(UnitFromId(1775367823), c_unitPropLifeMax, 12500.0);
        gv_aIStoneCenturionStoneCenturionAttackDelay[1] = 10.0;
        gv_aIStoneCenturionStoneCenturionAttackDelay[2] = 4.0;
    }
    else if (autoDF133317_val == 2) {
        UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifeMax, 7500.0);
        UnitSetPropertyFixed(UnitFromId(1775367823), c_unitPropLifeMax, 10000.0);
        gv_aIStoneCenturionStoneCenturionAttackDelay[1] = 8.0;
        gv_aIStoneCenturionStoneCenturionAttackDelay[2] = 6.0;
    }
    else if (autoDF133317_val == 3) {
        UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifeMax, 10000.0);
        UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifeRegen, 0.5);
        UnitSetPropertyFixed(UnitFromId(1775367823), c_unitPropLifeMax, 7500.0);
        gv_aIStoneCenturionStoneCenturionAttackDelay[1] = 6.0;
        gv_aIStoneCenturionStoneCenturionAttackDelay[2] = 8.0;
    }
    else if (autoDF133317_val == 4) {
        UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifeMax, 12500.0);
        UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifeRegen, 1.0);
        UnitSetPropertyFixed(UnitFromId(1775367823), c_unitPropLifeMax, 5000.0);
        gv_aIStoneCenturionStoneCenturionAttackDelay[1] = 4.0;
        gv_aIStoneCenturionStoneCenturionAttackDelay[2] = 10.0;
    }
    else {
        UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifeMax, 7500.0);
        UnitSetPropertyFixed(UnitFromId(1775367823), c_unitPropLifeMax, 10000.0);
        gv_aIStoneCenturionStoneCenturionAttackDelay[1] = 8.0;
        gv_aIStoneCenturionStoneCenturionAttackDelay[2] = 6.0;
    }
    UnitSetPropertyFixed(UnitFromId(1359970396), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(1775367823), c_unitPropLifePercent, 100.0);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_warpConduit, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("KhaydarinCrystal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("KhaydarinCrystal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, c_unitPropCurrent) >= 10.0)) {
            lv_scale = 0.2;
        }
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, c_unitPropCurrent) >= 20.0)) {
            lv_scale = 0.4;
        }
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, c_unitPropCurrent) >= 30.0)) {
            lv_scale = 0.6;
        }
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, c_unitPropCurrent) >= 40.0)) {
            lv_scale = 0.8;
        }
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, c_unitPropCurrent) >= 50.0)) {
            lv_scale = 1.0;
        }
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), libNtve_gf_SetScale(lv_scale, lv_scale, lv_scale, 0.0));
    }
    UnitGroupLoopEnd();
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(1986276253)), "SetOpacity");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    ActorSend(ActorFromDoodad(DoodadFromId(227365645)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1150808620)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(1045142820)), "SetOpacity");
    ActorSend(ActorFromDoodad(DoodadFromId(257921144)), "SetOpacity");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    int auto1E730C9E_val;
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libCOMI_gf_GetMissionDifficulty() == 4)) {
        UnitRemove(UnitFromId(2056565253));
        UnitRemove(UnitFromId(2056565253));
    }
    auto1E730C9E_val = libCOMI_gf_GetMissionDifficulty();
    if (auto1E730C9E_val == 1) {
        PlayerModifyPropertyFixed(gv_pLAYER_07_DEFENDERS, c_playerPropHandicap, c_playerPropOperSetTo, 50.0);
    }
    else if (auto1E730C9E_val == 2) {
        PlayerModifyPropertyFixed(gv_pLAYER_07_DEFENDERS, c_playerPropHandicap, c_playerPropOperSetTo, 75.0);
    }
    else if (auto1E730C9E_val == 3) {
    }
    else if (auto1E730C9E_val == 4) {
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_EasterEggInit, true, false);
    Wait(7.0, c_timeReal);
    TriggerExecute(gt_IntroductionWallofKnowledgeQ, true, false);
    TriggerExecute(gt_IntroductionRoadsQ, true, false);
    Wait(80.0, c_timeGame);
    TriggerExecute(gt_AlysaarsCreate, true, false);
    Wait(35.0, c_timeGame);
    TriggerExecute(gt_AIInvadersStarthostilities, true, false);
    Wait(710.0, c_timeGame);
    TriggerExecute(gt_BonusObjectiveActivate, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Introduction - Wall of Knowledge Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroductionWallofKnowledgeQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveTheWarpConduitmustsurviveCreate, true, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(7), true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(7), true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionIntroduction1, true, true);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(7)), StringExternal("Param/Value/BC7A9B04"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_TransmissionIntroduction2, true, true);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_warpConduit), StringExternal("Param/Value/0FE5B3C1"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_WarpConduitDamageResponse, true, true);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IntroductionWallofKnowledgeQ_Init () {
    gt_IntroductionWallofKnowledgeQ = TriggerCreate("gt_IntroductionWallofKnowledgeQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Introduction - Roads Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroductionRoadsQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_TransmissionIntroduction3, true, true);
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeCreate, true, true);
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_TransmissionIntroduction4, true, true);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IntroductionRoadsQ_Init () {
    gt_IntroductionRoadsQ = TriggerCreate("gt_IntroductionRoadsQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Alysaars - Create
//--------------------------------------------------------------------------------------------------
bool gt_AlysaarsCreate_Func (bool testConds, bool runActions) {
    int autoABCCBCB6_ae;
    int autoABCCBCB6_ai;
    fixed autoF0AA7B78_ae;
    fixed autoF0AA7B78_ai;
    fixed autoA3F82EC3_ae;
    fixed autoA3F82EC3_ai;
    // Variable Declarations
    int lv_alysaar;
    fixed lv_loop;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AutomatonsPingRoad, true, false);
    autoABCCBCB6_ae = 14;
    autoABCCBCB6_ai = 1;
    lv_alysaar = 1;
    for ( ; ( (autoABCCBCB6_ai >= 0 && lv_alysaar <= autoABCCBCB6_ae) || (autoABCCBCB6_ai <= 0 && lv_alysaar >= autoABCCBCB6_ae) ) ; lv_alysaar += autoABCCBCB6_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Alysaar", c_unitCreateIgnorePlacement, gv_pLAYER_09_ALYSAARS, RegionGetCenter(RegionFromId(20)), PointFromId(1005535691));
        UnitGroupAdd(gv_alysaars, UnitLastCreated());
        SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
        autoF0AA7B78_ae = 1.5;
        autoF0AA7B78_ai = 0.05;
        lv_loop = -7.5;
        for ( ; ( (autoF0AA7B78_ai >= 0 && lv_loop <= autoF0AA7B78_ae) || (autoF0AA7B78_ai <= 0 && lv_loop >= autoF0AA7B78_ae) ) ; lv_loop += autoF0AA7B78_ai ) {
            ActorSend(ActorFromDoodad(DoodadFromId(767032123)), (("SetZ " + FixedToString((lv_loop + 7.5), c_fixedPrecisionAny))));
            if ((lv_loop < 0)) {
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), (("SetZ " + FixedToString((lv_loop + 8.7), c_fixedPrecisionAny))));
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetHeight");
            }
            Wait(0.0, c_timeGame);
        }
        SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 50.0, 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(98348094)), "AnimBracketStart Work Birth Stand,Work Death");
        Wait(2.0, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1005535691)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(757205976)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(416296741)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1681710902)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1129619738)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(632225079)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(251877522)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1639680133)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(252351503)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueAddToEnd);
        Wait(2.0, c_timeGame);
        SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(98348094)), "AnimBracketStop Work");
        Wait(2.0, c_timeGame);
        SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
        autoA3F82EC3_ae = -7.5;
        autoA3F82EC3_ai = -0.05;
        lv_loop = 1.5;
        for ( ; ( (autoA3F82EC3_ai >= 0 && lv_loop <= autoA3F82EC3_ae) || (autoA3F82EC3_ai <= 0 && lv_loop >= autoA3F82EC3_ae) ) ; lv_loop += autoA3F82EC3_ai ) {
            ActorSend(ActorFromDoodad(DoodadFromId(767032123)), (("SetZ " + FixedToString((lv_loop + 7.5), c_fixedPrecisionAny))));
            Wait(0.0, c_timeGame);
        }
        Wait(4.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AlysaarsCreate_Init () {
    gt_AlysaarsCreate = TriggerCreate("gt_AlysaarsCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Alysaars - Reach effect
//--------------------------------------------------------------------------------------------------
bool gt_AlysaarsReacheffect_Func (bool testConds, bool runActions) {
    fixed autoC0C9F62F_ae;
    fixed autoC0C9F62F_ai;
    fixed auto235962FA_ae;
    fixed auto235962FA_ai;
    // Variable Declarations
    fixed lv_loop;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_alysaars, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerUpLarge", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(252351503), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(233984366)), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(539120399), 0.0, 50.0, 0.0);
    autoC0C9F62F_ae = 0.0;
    autoC0C9F62F_ai = -0.05;
    lv_loop = 1.0;
    for ( ; ( (autoC0C9F62F_ai >= 0 && lv_loop <= autoC0C9F62F_ae) || (autoC0C9F62F_ai <= 0 && lv_loop >= autoC0C9F62F_ae) ) ; lv_loop += autoC0C9F62F_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1496805824)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerDownLarge", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(252351503), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(233984366)), "AnimBracketStop Work");
    Wait(1.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(539120399), 0.0, 100.0, 0.0);
    auto235962FA_ae = 1.0;
    auto235962FA_ai = 0.05;
    lv_loop = 0.0;
    for ( ; ( (auto235962FA_ai >= 0 && lv_loop <= auto235962FA_ae) || (auto235962FA_ai <= 0 && lv_loop >= auto235962FA_ae) ) ; lv_loop += auto235962FA_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1496805824)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AlysaarsReacheffect_Init () {
    gt_AlysaarsReacheffect = TriggerCreate("gt_AlysaarsReacheffect_Func");
    TriggerAddEventUnitRegion(gt_AlysaarsReacheffect, null, RegionCircle(PointFromId(252351503), 1.0), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Alysaars - Make Return
//--------------------------------------------------------------------------------------------------
bool gt_AlysaarsMakeReturn_Func (bool testConds, bool runActions) {
    int init_i;
    fixed auto01D540CD_ae;
    fixed auto01D540CD_ai;
    fixed auto09F3E48A_ae;
    fixed auto09F3E48A_ai;
    fixed auto173280C2_ae;
    fixed auto173280C2_ai;
    fixed autoEBFBB5C5_ae;
    fixed autoEBFBB5C5_ai;
    unitgroup auto48E7B0F5_g;
    int auto48E7B0F5_u;
    int auto09D241A2_ae;
    int auto09D241A2_ai;
    string autoDB7CD944_val;
    fixed autoC42D8DAB_ae;
    fixed autoC42D8DAB_ai;
    // Variable Declarations
    fixed lv_loop;
    unit lv_alysaar;
    int lv_time;
    timer lv_timer;
    int[4] lv_alysaarTimer;
    string lv_background;
    // Variable Initialization
    lv_timer = TimerCreate();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_alysaarTimer[init_i] = c_invalidDialogId;
    }
    lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame.dds";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_AlysaarsReacheffect, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AutomatonsActivateenemyStoneCenturion, false, false);
    SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerUpLarge", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(252351503), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(233984366)), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(239560487), 0.0, 50.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1810581630), 0.0, 50.0, 0.0);
    auto01D540CD_ae = 3.41;
    auto01D540CD_ai = 0.05;
    lv_loop = 0.01;
    for ( ; ( (auto01D540CD_ai >= 0 && lv_loop <= auto01D540CD_ae) || (auto01D540CD_ai <= 0 && lv_loop >= auto01D540CD_ae) ) ; lv_loop += auto01D540CD_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1428481219)), (("SetHeight " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        ActorSend(ActorFromDoodad(DoodadFromId(229690351)), (("SetHeight " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(2062601744), 0.0, 50.0, 0.0);
    auto09F3E48A_ae = 1.0;
    auto09F3E48A_ai = 0.05;
    lv_loop = 0.0;
    for ( ; ( (auto09F3E48A_ai >= 0 && lv_loop <= auto09F3E48A_ae) || (auto09F3E48A_ai <= 0 && lv_loop >= auto09F3E48A_ae) ) ; lv_loop += auto09F3E48A_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(227365645)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
    auto173280C2_ae = 0.0;
    auto173280C2_ai = 0.05;
    lv_loop = -9.0;
    for ( ; ( (auto173280C2_ai >= 0 && lv_loop <= auto173280C2_ae) || (auto173280C2_ai <= 0 && lv_loop >= auto173280C2_ae) ) ; lv_loop += auto173280C2_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(767032123)), (("SetZ " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(539120399), 0.0, 100.0, 0.0);
    autoEBFBB5C5_ae = 0.0;
    autoEBFBB5C5_ai = -0.05;
    lv_loop = 1.0;
    for ( ; ( (autoEBFBB5C5_ai >= 0 && lv_loop <= autoEBFBB5C5_ae) || (autoEBFBB5C5_ai <= 0 && lv_loop >= autoEBFBB5C5_ae) ) ; lv_loop += autoEBFBB5C5_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1496805824)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(338169285));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(277643568));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(42885338));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1432509994));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1457747546));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1930661024));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(2062601744));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(132367350));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(721823926));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1471900211));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(275742771));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1231546556));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(1656690622));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(382387843));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker2x2", c_unitCreateIgnorePlacement, 0, PointFromId(810982490));
    gv_alysaarsFieldOn = true;
    auto48E7B0F5_g = gv_alysaars;
    auto48E7B0F5_u = 1;
    for ( ; auto48E7B0F5_u <= UnitGroupCount(auto48E7B0F5_g, c_unitCountAll) ; auto48E7B0F5_u += BoolToInt(lv_alysaar == UnitGroupUnit(auto48E7B0F5_g, auto48E7B0F5_u)) ) {
        lv_alysaar = UnitGroupUnit(auto48E7B0F5_g, auto48E7B0F5_u);
        UnitBehaviorAdd(lv_alysaar, "CarryKhaydarinCrystal", lv_alysaar, 1);
        auto09D241A2_ae = 1;
        auto09D241A2_ai = -1;
        lv_time = 30;
        for ( ; ( (auto09D241A2_ai >= 0 && lv_time <= auto09D241A2_ae) || (auto09D241A2_ai <= 0 && lv_time >= auto09D241A2_ae) ) ; lv_time += auto09D241A2_ai ) {
            PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                autoDB7CD944_val = PlayerRace(PlayerGroupLoopCurrent());
                if (autoDB7CD944_val == "Terr") {
                    lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_terr.dds";
                }
                else if (autoDB7CD944_val == "Zerg") {
                    lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_zerg.dds";
                }
                else {
                }
                DialogCreate(270, 80, c_anchorTopRight, 10, 220, false);
                lv_alysaarTimer[PlayerGroupLoopCurrent()] = DialogLastCreated();
                DialogSetImageVisible(DialogLastCreated(), false);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 80, c_anchorTopLeft, 50, 50, StringToText(""), lv_background, c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 30, c_anchorTop, 0, 10, StringExternal("Param/Value/A506D02C"), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTitleTop", PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/8C6A5B97", "TIME", TextTimeFormat(StringToText("<sectotal/>"), lv_time));
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/8C6A5B97"), Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTextBottom", PlayerGroupAll());
                DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            PlayerGroupLoopEnd();
            Wait(1.0, c_timeGame);
            PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                DialogDestroy(lv_alysaarTimer[PlayerGroupLoopCurrent()]);
            }
            PlayerGroupLoopEnd();
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", UnitGetPosition(lv_alysaar), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
        libHots_gf_StorePingForUnit(lv_alysaar, 1, PingLastCreated());
        PingSetUnit(PingLastCreated(), lv_alysaar);
        PingSetScale(PingLastCreated(), 0.3);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7731339B"));
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(252351503)), c_orderQueueReplace);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1639680133)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(251877522)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(632225079)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1129619738)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1681710902)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(416296741)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(757205976)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1005535691)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_alysaar, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(20))), c_orderQueueAddToEnd);
    }
    TriggerExecute(gt_TransmissionLastAlysaarQ, true, true);
    Wait(5.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerDownLarge", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(252351503), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(233984366)), "AnimBracketStop Work");
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(539120399), 0.0, 50.0, 0.0);
    autoC42D8DAB_ae = 1.0;
    autoC42D8DAB_ai = 0.05;
    lv_loop = 0.0;
    for ( ; ( (autoC42D8DAB_ai >= 0 && lv_loop <= autoC42D8DAB_ae) || (autoC42D8DAB_ai <= 0 && lv_loop >= autoC42D8DAB_ae) ) ; lv_loop += autoC42D8DAB_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1496805824)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AlysaarsMakeReturn_Init () {
    gt_AlysaarsMakeReturn = TriggerCreate("gt_AlysaarsMakeReturn_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Alysaars - Field Kill
//--------------------------------------------------------------------------------------------------
bool gt_AlysaarsFieldKill_Func (bool testConds, bool runActions) {
    int init_i;
    // Variable Declarations
    fixed lv_loop;
    unit lv_alysaar;
    int lv_time;
    timer lv_timer;
    int[4] lv_alysaarTimer;
    string lv_background;
    // Variable Initialization
    lv_timer = TimerCreate();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_alysaarTimer[init_i] = c_invalidDialogId;
    }
    lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame.dds";
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
        if (!((gv_alysaarsFieldOn == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitKill(EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AlysaarsFieldKill_Init () {
    gt_AlysaarsFieldKill = TriggerCreate("gt_AlysaarsFieldKill_Func");
    TriggerAddEventUnitRegion(gt_AlysaarsFieldKill, null, RegionFromId(31), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Alysaars - Make WarpOut
//--------------------------------------------------------------------------------------------------
bool gt_AlysaarsMakeWarpOut_Func (bool testConds, bool runActions) {
    fixed auto41D234C8_ae;
    fixed auto41D234C8_ai;
    fixed auto1DA0B0BD_ae;
    fixed auto1DA0B0BD_ai;
    // Variable Declarations
    fixed lv_loop;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_alysaars, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_TransmissionFirstAlysaarwarpsoutQ, true, false);
    SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(98348094)), "AnimBracketStart Work Birth Stand,Work Death");
    while (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(20)) == true))) {
        Wait(0.5, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(98348094)), "AnimBracketStop Work");
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
    auto41D234C8_ae = 11.0;
    auto41D234C8_ai = 0.05;
    lv_loop = 9.0;
    for ( ; ( (auto41D234C8_ai >= 0 && lv_loop <= auto41D234C8_ae) || (auto41D234C8_ai <= 0 && lv_loop >= auto41D234C8_ae) ) ; lv_loop += auto41D234C8_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(767032123)), (("SetZ " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "SetHeight");
        Wait(0.0, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 50.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1193752014)), "AnimBracketStart Work Birth Stand,Work Death");
    UnitIssueOrder(gv_warpConduit, OrderTargetingUnit(AbilityCommand("WarpConduitWarpAwayImminent", 0), EventUnit()), c_orderQueueReplace);
    UnitBehaviorRemove(EventUnit(), "CarryKhaydarinCrystal", 1);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2071334657)), c_orderQueueAddToEnd);
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "SetOpacity 0.000000 3.000000");
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1193752014)), "AnimBracketStop Work");
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), RegionGetCenter(RegionFromId(20)), 0.0, 100.0, 0.0);
    auto1DA0B0BD_ae = 9.0;
    auto1DA0B0BD_ai = -0.05;
    lv_loop = 11.0;
    for ( ; ( (auto1DA0B0BD_ai >= 0 && lv_loop <= auto1DA0B0BD_ae) || (auto1DA0B0BD_ai <= 0 && lv_loop >= auto1DA0B0BD_ae) ) ; lv_loop += auto1DA0B0BD_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(767032123)), (("SetZ " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    while (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(2071334657), 1.0)) == true))) {
        Wait(0.5, c_timeGame);
    }
    UnitRemove(EventUnit());
    Wait(0.0, c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) == 0) && (UnitGroupCount(gv_alysaars, c_unitCountAlive) == 0) && (UnitIsAlive(gv_warpConduit) == true)) {
        libNtve_gf_MakeUnitInvulnerable(gv_warpConduit, true);
    }
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeUpdate, true, false);
    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    TriggerExecute(gt_AIAttackWaveVoidThrasherWave, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AlysaarsMakeWarpOut_Init () {
    gt_AlysaarsMakeWarpOut = TriggerCreate("gt_AlysaarsMakeWarpOut_Func");
    TriggerEnable(gt_AlysaarsMakeWarpOut, false);
    TriggerAddEventUnitRegion(gt_AlysaarsMakeWarpOut, null, RegionCircle(PointFromId(1005535691), 1.0), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Counter
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsCounter_Func (bool testConds, bool runActions) {
    string auto385423D7_val;
    // Variable Declarations
    const int lv_dialog = 1;
    string lv_background;
    // Variable Initialization
    lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame.dds";
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_DEFENDERS))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive) > 0))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_roadGroupPlayers, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeUpdate, true, false);
    PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto385423D7_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto385423D7_val == "Terr") {
            lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_terr.dds";
        }
        else if (auto385423D7_val == "Zerg") {
            lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_zerg.dds";
        }
        else {
        }
        DialogDestroy(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()]);
        DialogCreate(270, 80, c_anchorTopRight, 10, 220, false);
        gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()] = DialogLastCreated();
        DialogSetImageVisible(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], false);
        libNtve_gf_CreateDialogItemImage(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], 200, 80, c_anchorTopLeft, 50, 50, StringToText(""), lv_background, c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemLabel(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], 500, 30, c_anchorTop, 0, 10, StringExternal("Param/Value/0671BB34"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTitleTop", PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/72B997DC", "AUTOMATONS", IntToText(UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive)));
        libNtve_gf_CreateDialogItemLabel(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/72B997DC"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTextBottom", PlayerGroupAll());
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) == 0)) {
        SoundPlayForPlayer(SoundLink("Alert_UniObjectiveCompleted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeReal);
        DialogDestroy(gv_automatonsCounterDialog[1][1]);
        DialogDestroy(gv_automatonsCounterDialog[1][2]);
        DialogDestroy(gv_automatonsCounterDialog[2][1]);
        DialogDestroy(gv_automatonsCounterDialog[2][2]);
        TriggerExecute(gt_TransmissionAllautomatonskilledQ, true, false);
        TriggerExecute(gt_AlysaarsMakeReturn, true, false);
        TriggerEnable(gt_AlysaarsMakeWarpOut, true);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_AutomatonsCounterEnemy, false);
        TriggerEnable(gt_AIInvadersUnitRevive, false);
        TriggerStop(gt_AIInvadersStarthostilities);
        TriggerStop(gt_AIInvadersUnitRevive);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsCounter_Init () {
    gt_AutomatonsCounter = TriggerCreate("gt_AutomatonsCounter_Func");
    TriggerAddEventUnitDied(gt_AutomatonsCounter, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Counter Enemy
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsCounterEnemy_Func (bool testConds, bool runActions) {
    string autoE67703DE_val;
    // Variable Declarations
    const int lv_dialog = 2;
    string lv_background;
    // Variable Initialization
    lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame.dds";
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_DEFENDERS))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_roadGroupEnemies, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoE67703DE_val = PlayerRace(PlayerGroupLoopCurrent());
        if (autoE67703DE_val == "Terr") {
            lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_terr.dds";
        }
        else if (autoE67703DE_val == "Zerg") {
            lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_zerg.dds";
        }
        else {
        }
        DialogDestroy(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()]);
        DialogCreate(270, 80, c_anchorTopRight, 10, 330, false);
        gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()] = DialogLastCreated();
        DialogSetImageVisible(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], false);
        libNtve_gf_CreateDialogItemImage(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], 200, 80, c_anchorTopLeft, 50, 50, StringToText(""), lv_background, c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemLabel(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], 500, 30, c_anchorTop, 0, 10, StringExternal("Param/Value/4498E016"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTitleTop", PlayerGroupAll());
        if ((UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive) > 30)) {
            TextExpressionSetToken("Param/Expression/1F70694C", "AUTOMATONS", IntToText(UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive)));
            libNtve_gf_CreateDialogItemLabel(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/1F70694C"), Color(100,100,100), false, 2.0);
        }
        else {
            TextExpressionSetToken("Param/Expression/69239EA6", "AUTOMATONS", IntToText(UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive)));
            libNtve_gf_CreateDialogItemLabel(gv_automatonsCounterDialog[lv_dialog][PlayerGroupLoopCurrent()], 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/69239EA6"), Color(100.00, 0.00, 0.00), false, 2.0);
        }
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTextBottom", PlayerGroupAll());
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsCounterEnemy_Init () {
    gt_AutomatonsCounterEnemy = TriggerCreate("gt_AutomatonsCounterEnemy_Func");
    TriggerAddEventUnitDied(gt_AutomatonsCounterEnemy, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Ping Road
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsPingRoad_Func (bool testConds, bool runActions) {
    int autoD38421D7_ae;
    int autoD38421D7_ai;
    // Variable Declarations
    int lv_loop;
    int lv_totalAutomatons;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_totalAutomatons = UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    while ((lv_totalAutomatons == UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive)) && (libCOMI_gf_GameIsOver() == false)) {
        autoD38421D7_ae = 5;
        autoD38421D7_ai = 1;
        lv_loop = 1;
        for ( ; ( (autoD38421D7_ai >= 0 && lv_loop <= autoD38421D7_ae) || (autoD38421D7_ai <= 0 && lv_loop >= autoD38421D7_ae) ) ; lv_loop += autoD38421D7_ai ) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(788610940)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1385076189)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(242715263)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(906526117)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1465763381)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1852567253)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1502319952)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(598255943)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(389230730)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(652505743)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1177094873)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(923788388)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(2070317829)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1875963659)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1708712459)), Color(100.00, 0.00, 0.00), 0.6);
            PingSetScale(PingLastCreated(), 0.3);
            Wait(0.1, c_timeGame);
        }
        Wait(20.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsPingRoad_Init () {
    gt_AutomatonsPingRoad = TriggerCreate("gt_AutomatonsPingRoad_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Ping Road Enemy
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsPingRoadEnemy_Func (bool testConds, bool runActions) {
    int auto73965215_ae;
    int auto73965215_ai;
    // Variable Declarations
    int lv_loop;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto73965215_ae = 10;
    auto73965215_ai = 1;
    lv_loop = 1;
    for ( ; ( (auto73965215_ai >= 0 && lv_loop <= auto73965215_ae) || (auto73965215_ai <= 0 && lv_loop >= auto73965215_ae) ) ; lv_loop += auto73965215_ai ) {
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1598965349)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1813578660)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(469547612)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(240275635)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(536713134)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(1247373762)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(194989249)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
        Wait(0.1, c_timeGame);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", UnitGetPosition(UnitFromId(888869318)), Color(100.00, 0.00, 0.00), 0.6);
        PingSetScale(PingLastCreated(), 0.3);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsPingRoadEnemy_Init () {
    gt_AutomatonsPingRoadEnemy = TriggerCreate("gt_AutomatonsPingRoadEnemy_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Enemy share vision
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsEnemysharevision_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_roadGroupEnemies, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_automatonsEnemysharevision, EventUnit()) == false))) {
            return false;
        }
        if (!((UnitGroupHasUnit(UnitGroup(null, gv_pLAYER_05_INVADER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_automatonsEnemysharevision, EventUnit());
    libNtve_gf_ShareVisionofUnit(EventUnit(), true, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(EventUnit(), true, gv_pLAYER_02_USER);
    Wait(5.0, c_timeGame);
    libNtve_gf_ShareVisionofUnit(EventUnit(), false, gv_pLAYER_01_USER);
    libNtve_gf_ShareVisionofUnit(EventUnit(), false, gv_pLAYER_02_USER);
    UnitGroupRemove(gv_automatonsEnemysharevision, EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsEnemysharevision_Init () {
    gt_AutomatonsEnemysharevision = TriggerCreate("gt_AutomatonsEnemysharevision_Func");
    TriggerAddEventUnitStartedAttack2(gt_AutomatonsEnemysharevision, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Almost Done
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsAlmostDone_Func (bool testConds, bool runActions) {
    fixed auto954A656E_at;
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_DEFENDERS))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive) > 0))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) < 30))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_roadGroupPlayers, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_AutomatonsActivateenemyStoneCenturion, false, false);
    TriggerExecute(gt_TransmissionLastForcesHighlightQ, true, false);
    TriggerEnable(gt_AutomatonsPingedunitdies, true);
    UnitGroupLoopBegin(gv_roadGroupPlayers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((!((EventUnit() == UnitGroupLoopCurrent())))) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
            libHots_gf_StorePingForUnit(UnitGroupLoopCurrent(), 1, PingLastCreated());
            PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
            PingSetScale(PingLastCreated(), 0.3);
        }
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(UnitFromId(1359970396), "StoneCenturionStatue", 1);
    UnitIssueOrder(UnitFromId(1359970396), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(875311682)), c_orderQueueReplace);
    PingSetModel(libHots_gf_PingStoredForUnit(UnitFromId(1359970396), 1), "PingBoss");
    PingSetColor(libHots_gf_PingStoredForUnit(UnitFromId(1359970396), 1), Color(100.00, 0.00, 0.00));
    auto954A656E_at = 0;
    while (!((libNtve_gf_UnitInRegion(UnitFromId(1359970396), RegionCircle(PointFromId(875311682), 1.0)) == true)) && auto954A656E_at <= 6.0) {
        Wait(1.0, c_timeGame);
        auto954A656E_at = auto954A656E_at + 1.0;
    }
    AISetUnitScriptControlled(UnitFromId(1359970396), false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_07_DEFENDERS, "StoneCenturion", "StoneCenturionAIThinkP7", false);
    while ((UnitIsAlive(UnitFromId(1359970396)) == true)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1359970396)), 2.0), 1.0, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(1359970396)), 2.0), 1.0, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsAlmostDone_Init () {
    gt_AutomatonsAlmostDone = TriggerCreate("gt_AutomatonsAlmostDone_Func");
    TriggerAddEventUnitDied(gt_AutomatonsAlmostDone, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Activate enemy Stone Centurion
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsActivateenemyStoneCenturion_Func (bool testConds, bool runActions) {
    fixed auto9FC7883B_at;
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_DEFENDERS))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive) < 10))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_roadGroupEnemies, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    UnitBehaviorRemove(UnitFromId(1775367823), "StoneCenturionStatue", 1);
    UnitIssueOrder(UnitFromId(1775367823), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(379692544)), c_orderQueueReplace);
    auto9FC7883B_at = 0;
    while (!((libNtve_gf_UnitInRegion(UnitFromId(1775367823), RegionCircle(PointFromId(379692544), 1.0)) == true)) && auto9FC7883B_at <= 6.0) {
        Wait(1.0, c_timeGame);
        auto9FC7883B_at = auto9FC7883B_at + 1.0;
    }
    AISetUnitScriptControlled(UnitFromId(1775367823), false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_08_DEFENDERS, "StoneCenturion", "StoneCenturionAIThinkP8", false);
    TriggerExecute(gt_TransmissionEnemyfightsStonelotQ, true, false);
    while ((UnitIsAlive(UnitFromId(1775367823)) == true) && (UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1775367823)), 2.0), 1.0, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(1775367823)), 2.0), 1.0, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsActivateenemyStoneCenturion_Init () {
    gt_AutomatonsActivateenemyStoneCenturion = TriggerCreate("gt_AutomatonsActivateenemyStoneCenturion_Func");
    TriggerAddEventUnitDied(gt_AutomatonsActivateenemyStoneCenturion, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Automatons - Pinged unit dies
//--------------------------------------------------------------------------------------------------
bool gt_AutomatonsPingedunitdies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_DEFENDERS))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_roadGroupPlayers, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AutomatonsPingedunitdies_Init () {
    gt_AutomatonsPingedunitdies = TriggerCreate("gt_AutomatonsPingedunitdies_Func");
    TriggerEnable(gt_AutomatonsPingedunitdies, false);
    TriggerAddEventUnitDied(gt_AutomatonsPingedunitdies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Activate
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveActivate_Func (bool testConds, bool runActions) {
    fixed auto343499EE_ae;
    fixed auto343499EE_ai;
    // Variable Declarations
    int lv_loop;
    fixed lv_loop2;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup("KhaydarinCrystal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_bonusObjectiveAvailable += FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropResources, c_unitPropCurrent));
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AlysaarGround", c_unitCreateIgnorePlacement, gv_pLAYER_09_ALYSAARS, PointFromId(1158469840));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1018434029)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1605951225)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(994470537)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(932929012)), c_orderQueueAddToEnd);
    TimerStart(gv_bonusObjectiveDurationTimer, gv_bonusObjectiveDuration, false, c_timeGame);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(29), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(29), true, false);
    UnitGroupLoopBegin(UnitGroup("KhaydarinCrystal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, true);
    }
    UnitGroupLoopEnd();
    UnitSetOwner(UnitFromId(380493972), gv_pLAYER_01_USER, true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_pLAYER_02_USER), libNtve_gf_MainActorofUnit(UnitFromId(380493972)), false);
    UnitSetOwner(UnitFromId(2019958241), gv_pLAYER_02_USER, true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_pLAYER_01_USER), libNtve_gf_MainActorofUnit(UnitFromId(2019958241)), false);
    TriggerExecute(gt_TransmissionSideobjectiveactivatesQ, true, false);
    TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsCreate, true, true);
    Wait(2.0, c_timeGame);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, RegionGetCenter(RegionFromId(29)), StringExternal("Param/Value/82C1166D"));
    PingSetScale(PingLastCreated(), 0.8);
    gv_bonusObjectiveChalicePing = PingLastCreated();
    lv_loop = 0;
    UnitGroupLoopBegin(UnitGroup("KhaydarinCrystal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_loop += 1;
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingXenonCrystalGreenIcon", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit = UnitGroupLoopCurrent();
        gv_bonusObjectiveCrystalmarkers[lv_loop].lv_ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.18);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FEDB565B"));
        VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.0));
        gv_bonusObjectiveCrystalmarkers[lv_loop].lv_revealer = VisRevealerLastCreated();
        VisRevealerCreate(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.0));
        gv_bonusObjectiveCrystalmarkers[lv_loop].lv_revealer2 = VisRevealerLastCreated();
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_BonusObjectiveRemovePing, true);
    TriggerEnable(gt_BonusObjectiveHelper, true);
    TriggerExecute(gt_BonusObjectiveUpdate, true, false);
    while (!((libNtve_gf_UnitInRegion(UnitLastCreated(), RegionCircle(PointFromId(932929012), 1.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitRemove(UnitLastCreated());
    Wait(10.0, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "AlysaarGround", c_unitCreateIgnorePlacement, gv_pLAYER_09_ALYSAARS, PointFromId(897783665), PointFromId(1005535691));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1558124476)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2029660697)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1768836635)), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitInRegion(UnitLastCreated(), RegionCircle(PointFromId(1768836635), 1.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitRemove(UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(1, "Alysaar", c_unitCreateIgnorePlacement, gv_pLAYER_09_ALYSAARS, PointFromId(1768836635), PointFromId(638229412));
    SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
    auto343499EE_ae = 8.2;
    auto343499EE_ai = 0.05;
    lv_loop2 = -1.5;
    for ( ; ( (auto343499EE_ai >= 0 && lv_loop2 <= auto343499EE_ae) || (auto343499EE_ai <= 0 && lv_loop2 >= auto343499EE_ae) ) ; lv_loop2 += auto343499EE_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1330483702)), (("SetZ " + FixedToString(lv_loop2, c_fixedPrecisionAny))));
        if ((lv_loop2 < 6.0)) {
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), (("SetZ " + FixedToString((lv_loop2 + 1.8), c_fixedPrecisionAny))));
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetHeight");
        }
        Wait(0.0, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 50.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1316709222)), "AnimBracketStart Work Birth Stand,Work Death");
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(638229412)), c_orderQueueAddToEnd);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    gv_bonusObjectiveAlysaar = UnitLastCreated();
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1316709222)), "AnimBracketStop Work");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveActivate_Init () {
    gt_BonusObjectiveActivate = TriggerCreate("gt_BonusObjectiveActivate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Pings when returning
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectivePingswhenreturning_Func (bool testConds, bool runActions) {
    int init_i;
    // Variable Declarations
    unit lv_carryingUnit;
    int[3] lv_carryingPing;
    int lv_loop;
    string lv_stepIconAsModel;
    string lv_stepIconAsImage;
    string lv_crystalPingModel;
    fixed lv_crystalPingScale;
    int[4] lv_sideObjectivePathdisplay;
    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_carryingPing[init_i] = c_invalidPingId;
    }
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Alysaar"))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) != "AlysaarGround"))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_bonusObjectiveGatherers, EventUnit());
    PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            lv_crystalPingModel = "PingXenonCrystalGreenIcon";
            lv_crystalPingScale = 0.25;
        }
        else {
            if ((PlayerGroupLoopCurrent() == gv_pLAYER_01_USER)) {
                lv_crystalPingModel = "PingXenonCrystalOrangeIcon";
            }
            else {
                lv_crystalPingModel = "PingXenonCrystalBlueIcon";
            }
            lv_crystalPingScale = 0.2;
        }
        libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupSingle(PlayerGroupLoopCurrent()), UnitGetPosition(EventUnit()), 270.0, lv_crystalPingModel, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), lv_crystalPingScale);
        lv_carryingPing[PlayerGroupLoopCurrent()] = PingLastCreated();
        PingSetUnit(lv_carryingPing[PlayerGroupLoopCurrent()], EventUnit());
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1B0F0B12"));
        PathCreateForUnit(PlayerGroupSingle(PlayerGroupLoopCurrent()), EventUnit());
        lv_sideObjectivePathdisplay[PlayerGroupLoopCurrent()] = PathLastCreated();
        PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
        PathSetDestinationPoint(PathLastCreated(), UnitGetPosition(UnitFromId(2019958241)));
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            PathSetColor(PathLastCreated(), c_pathLocationAll, Color(0.00, 100.00, 0.00));
        }
        else {
            PathSetColor(PathLastCreated(), c_pathLocationAll, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false)));
        }
        lv_stepIconAsModel = "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3";
        lv_stepIconAsImage = lv_stepIconAsModel;
        PathSetStepModel(PathLastCreated(), c_pathLocationWorld, lv_stepIconAsImage);
    }
    PlayerGroupLoopEnd();
    while ((UnitIsAlive(EventUnit()) == true) && (UnitHasBehavior2(EventUnit(), "CarryKhaydarinCrystal") == true) && (TimerGetRemaining(gv_bonusObjectiveDurationTimer) > 0.0)) {
        Wait(0.25, c_timeGame);
    }
    PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PingDestroy(lv_carryingPing[gv_pLAYER_01_USER]);
        PingDestroy(lv_carryingPing[gv_pLAYER_02_USER]);
        PathDestroy(lv_sideObjectivePathdisplay[gv_pLAYER_01_USER]);
        PathDestroy(lv_sideObjectivePathdisplay[gv_pLAYER_02_USER]);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectivePingswhenreturning_Init () {
    gt_BonusObjectivePingswhenreturning = TriggerCreate("gt_BonusObjectivePingswhenreturning_Func");
    TriggerAddEventUnitBehaviorChange(gt_BonusObjectivePingswhenreturning, null, "CarryKhaydarinCrystal", c_unitBehaviorChangeActivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Pings when gathering
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectivePingswhengathering_Func (bool testConds, bool runActions) {
    int init_i;
    // Variable Declarations
    unit lv_carryingUnit;
    int[3] lv_carryingPing;
    int lv_loop;
    string lv_stepIconAsModel;
    color lv_crystalPingColor;
    string lv_stepIconAsImage;
    string lv_crystalPingModel;
    fixed lv_crystalPingScale;
    int[4] lv_sideObjectivePathdisplay;
    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_carryingPing[init_i] = c_invalidPingId;
    }
    lv_crystalPingColor = Color(0,0,0);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "KhaydarinCrystal"))) {
            return false;
        }
        if (!((UnitHasBehavior2(EventUnit(), "CarryKhaydarinCrystal") == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    while (!(((UnitOrder(EventUnit(), 0) == EventUnitOrder()) || (UnitIsAlive(EventUnit()) == false) || ((UnitOrderHasAbil(EventUnit(), AbilityCommandGetAbility(AbilityCommand("DroneHarvest", 0))) == false) && (UnitGetType(EventUnit()) == "Drone")) || ((UnitOrderHasAbil(EventUnit(), AbilityCommandGetAbility(AbilityCommand("ProbeHarvest", 0))) == false) && (UnitGetType(EventUnit()) == "Probe")) || ((UnitOrderHasAbil(EventUnit(), AbilityCommandGetAbility(AbilityCommand("SCVHarvest", 0))) == false) && ((UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "SISCV")))))) {
        Wait(1.0, c_timeGame);
    }
    if (((UnitOrder(EventUnit(), 0) != EventUnitOrder()) || (UnitHasBehavior2(EventUnit(), "CarryKhaydarinCrystal") == true))) {
    }
    PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_crystalPingModel = "PingMoving";
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            lv_crystalPingColor = Color(0.00, 100.00, 0.00);
            lv_crystalPingScale = 0.5;
        }
        else {
            lv_crystalPingScale = 0.3;
            if ((PlayerGroupLoopCurrent() == gv_pLAYER_01_USER)) {
                lv_crystalPingColor = Color(100.00, 50.20, 0.00);
            }
            else {
                lv_crystalPingColor = Color(0.00, 0.00, 100.00);
            }
        }
        libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupSingle(PlayerGroupLoopCurrent()), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 270.0, lv_crystalPingModel, lv_crystalPingColor, 0.0);
        libCOMI_gf_ShowHidePingCoop(PingLastCreated(), true);
        PingSetScale(PingLastCreated(), lv_crystalPingScale);
        lv_carryingPing[PlayerGroupLoopCurrent()] = PingLastCreated();
        PingSetUnit(lv_carryingPing[PlayerGroupLoopCurrent()], OrderGetTargetUnit(EventUnitOrder()));
        TextExpressionSetToken("Param/Expression/CDA87B96", "Player_Name", PlayerName(EventPlayer()));
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/CDA87B96"));
    }
    PlayerGroupLoopEnd();
    while ((UnitIsAlive(EventUnit()) == true) && (UnitOrder(EventUnit(), 0) == EventUnitOrder()) && (TimerGetRemaining(gv_bonusObjectiveDurationTimer) > 0.0)) {
        Wait(0.25, c_timeGame);
    }
    PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PingDestroy(lv_carryingPing[gv_pLAYER_01_USER]);
        PingDestroy(lv_carryingPing[gv_pLAYER_02_USER]);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectivePingswhengathering_Init () {
    gt_BonusObjectivePingswhengathering = TriggerCreate("gt_BonusObjectivePingswhengathering_Func");
    TriggerAddEventUnitOrder(gt_BonusObjectivePingswhengathering, null, AbilityCommand("DroneHarvest", 0));
    TriggerAddEventUnitOrder(gt_BonusObjectivePingswhengathering, null, AbilityCommand("ProbeHarvest", 0));
    TriggerAddEventUnitOrder(gt_BonusObjectivePingswhengathering, null, AbilityCommand("SCVHarvest", 0));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Remove from group
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRemovefromgroup_Func (bool testConds, bool runActions) {
    int init_i;
    // Variable Declarations
    unit lv_carryingUnit;
    int[3] lv_carryingPing;
    int lv_loop;
    string lv_stepIconAsModel;
    string lv_stepIconAsImage;
    string lv_crystalPingModel;
    fixed lv_crystalPingScale;
    int[4] lv_sideObjectivePathdisplay;
    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_carryingPing[init_i] = c_invalidPingId;
    }
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Alysaar"))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupRemove(gv_bonusObjectiveGatherers, EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRemovefromgroup_Init () {
    gt_BonusObjectiveRemovefromgroup = TriggerCreate("gt_BonusObjectiveRemovefromgroup_Func");
    TriggerAddEventUnitBehaviorChange(gt_BonusObjectiveRemovefromgroup, null, "CarryKhaydarinCrystal", c_unitBehaviorChangeDeactivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Return if the unit is in the zone
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveReturniftheunitisinthezone_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(638229412), 4.0)) == true))) {
            return false;
        }
        if (!((UnitHasBehavior2(EventUnit(), "CarryKhaydarinCrystal") == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup("KhaydarinCrystalReturnSpot", gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "SCV")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("SCVHarvest", 1)), c_orderQueueAddToFront);
    }
    if ((UnitGetType(EventUnit()) == "Drone")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("DroneHarvest", 1)), c_orderQueueAddToFront);
    }
    if ((UnitGetType(EventUnit()) == "Probe")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ProbeHarvest", 1)), c_orderQueueAddToFront);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveReturniftheunitisinthezone_Init () {
    gt_BonusObjectiveReturniftheunitisinthezone = TriggerCreate("gt_BonusObjectiveReturniftheunitisinthezone_Func");
    TriggerAddEventUnitBecomesIdle(gt_BonusObjectiveReturniftheunitisinthezone, null, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Helper
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveHelper_Func (bool testConds, bool runActions) {
    fixed auto8C975EF4_at;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateActorAtPoint("BriefingUnitSelectProtossLarge", RegionGetCenter(EventUnitRegion()));
    TextTagCreate(StringExternal("Param/Value/06523699"), 24, RegionGetCenter(EventUnitRegion()), 3.0, true, false, PlayerGroupAll());
    auto8C975EF4_at = 0;
    while (!((TriggerGetExecCount(gt_BonusObjectivePingswhenreturning) >= 1)) && auto8C975EF4_at <= 300.0) {
        Wait(1.0, c_timeGame);
        auto8C975EF4_at = auto8C975EF4_at + 1.0;
    }
    ActorSend(libNtve_gf_ActorLastCreated(), "Destroy");
    TextTagDestroy(TextTagLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveHelper_Init () {
    gt_BonusObjectiveHelper = TriggerCreate("gt_BonusObjectiveHelper_Func");
    TriggerEnable(gt_BonusObjectiveHelper, false);
    TriggerAddEventUnitRegion(gt_BonusObjectiveHelper, null, RegionCircle(UnitGetPosition(UnitFromId(1202296715)), 6.0), true);
    TriggerAddEventUnitRegion(gt_BonusObjectiveHelper, null, RegionCircle(UnitGetPosition(UnitFromId(681816801)), 6.0), true);
    TriggerAddEventUnitRegion(gt_BonusObjectiveHelper, null, RegionCircle(UnitGetPosition(UnitFromId(1303687177)), 6.0), true);
    TriggerAddEventUnitRegion(gt_BonusObjectiveHelper, null, RegionCircle(UnitGetPosition(UnitFromId(1701872213)), 6.0), true);
    TriggerAddEventUnitRegion(gt_BonusObjectiveHelper, null, RegionCircle(UnitGetPosition(UnitFromId(36113014)), 6.0), true);
    TriggerAddEventUnitRegion(gt_BonusObjectiveHelper, null, RegionCircle(UnitGetPosition(UnitFromId(723715415)), 6.0), true);
    TriggerAddEventUnitRegion(gt_BonusObjectiveHelper, null, RegionCircle(UnitGetPosition(UnitFromId(1680327580)), 6.0), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Remove Ping
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRemovePing_Func (bool testConds, bool runActions) {
    int autoFA2B597D_ae;
    int autoFA2B597D_ai;
    // Variable Declarations
    int lv_loop;
    fixed lv_scale;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KhaydarinCrystal"))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoFA2B597D_ae = 10;
    autoFA2B597D_ai = 1;
    lv_loop = 1;
    for ( ; ( (autoFA2B597D_ai >= 0 && lv_loop <= autoFA2B597D_ae) || (autoFA2B597D_ai <= 0 && lv_loop >= autoFA2B597D_ae) ) ; lv_loop += autoFA2B597D_ai ) {
        if ((gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit == EventUnit())) {
            if ((libNtve_gf_UnitGetPropertyResources(EventUnit(), c_unitPropCurrent) <= 0)) {
                libCOMI_gf_DestroyPingCoop(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_ping);
                VisRevealerDestroy(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_revealer);
                VisRevealerDestroy(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_revealer2);
                break;
            }
            if ((UnitGetPropertyFixed(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit, c_unitPropResources, c_unitPropCurrent) >= 10.0)) {
                lv_scale = 0.2;
            }
            if ((UnitGetPropertyFixed(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit, c_unitPropResources, c_unitPropCurrent) >= 20.0)) {
                lv_scale = 0.4;
            }
            if ((UnitGetPropertyFixed(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit, c_unitPropResources, c_unitPropCurrent) >= 30.0)) {
                lv_scale = 0.6;
            }
            if ((UnitGetPropertyFixed(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit, c_unitPropResources, c_unitPropCurrent) >= 40.0)) {
                lv_scale = 0.8;
            }
            if ((UnitGetPropertyFixed(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit, c_unitPropResources, c_unitPropCurrent) >= 50.0)) {
                lv_scale = 1.0;
            }
            libNtve_gf_SendActorMessageToUnit(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit, libNtve_gf_SetScale(lv_scale, lv_scale, lv_scale, 1.0));
            break;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRemovePing_Init () {
    gt_BonusObjectiveRemovePing = TriggerCreate("gt_BonusObjectiveRemovePing_Func");
    TriggerEnable(gt_BonusObjectiveRemovePing, false);
    TriggerAddEventUnitProperty(gt_BonusObjectiveRemovePing, null, c_unitPropResources);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Return animation
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveReturnanimation_Func (bool testConds, bool runActions) {
    fixed auto950501FA_ae;
    fixed auto950501FA_ai;
    fixed auto070B0A32_ae;
    fixed auto070B0A32_ai;
    // Variable Declarations
    fixed lv_loop;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_bonusObjectiveDurationTimer) > 0.0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_bonusObjectiveWaitingforreturn == false)) {
        gv_bonusObjectiveWaitingforreturn = true;
        UnitBehaviorAdd(gv_bonusObjectiveAlysaar, "CarryKhaydarinCrystal", gv_bonusObjectiveAlysaar, 1);
        while (!((UnitGroupCount(UnitGroupFilterRegion(gv_bonusObjectiveGatherers, RegionCircle(PointFromId(1768836635), 15.0), 0), c_unitCountAlive) == 0))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 50.0, 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(1316709222)), "AnimBracketStart Work Birth Stand,Work Death");
        Wait(2.0, c_timeGame);
        UnitIssueOrder(gv_bonusObjectiveAlysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1768836635)), c_orderQueueAddToEnd);
        while (!((libNtve_gf_UnitInRegion(gv_bonusObjectiveAlysaar, RegionCircle(PointFromId(1768836635), 1.0)) == true))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
        auto950501FA_ae = 10.5;
        auto950501FA_ai = 0.05;
        lv_loop = 8.2;
        for ( ; ( (auto950501FA_ai >= 0 && lv_loop <= auto950501FA_ae) || (auto950501FA_ai <= 0 && lv_loop >= auto950501FA_ae) ) ; lv_loop += auto950501FA_ai ) {
            ActorSend(ActorFromDoodad(DoodadFromId(1330483702)), (("SetZ " + FixedToString(lv_loop, c_fixedPrecisionAny))));
            ActorSend(libNtve_gf_MainActorofUnit(gv_bonusObjectiveAlysaar), "SetHeight");
            Wait(0.0, c_timeGame);
        }
        Wait(1.0, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_bonusObjectiveAlysaar, "AnimPlay Attack Spell,A");
        UnitBehaviorRemove(gv_bonusObjectiveAlysaar, "CarryKhaydarinCrystal", 1);
        Wait(1.0, c_timeGame);
        SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
        auto070B0A32_ae = 8.2;
        auto070B0A32_ai = -0.05;
        lv_loop = 10.5;
        for ( ; ( (auto070B0A32_ai >= 0 && lv_loop <= auto070B0A32_ae) || (auto070B0A32_ai <= 0 && lv_loop >= auto070B0A32_ae) ) ; lv_loop += auto070B0A32_ai ) {
            ActorSend(ActorFromDoodad(DoodadFromId(1330483702)), (("SetZ " + FixedToString(lv_loop, c_fixedPrecisionAny))));
            ActorSend(libNtve_gf_MainActorofUnit(gv_bonusObjectiveAlysaar), "SetHeight");
            Wait(0.0, c_timeGame);
        }
        UnitIssueOrder(gv_bonusObjectiveAlysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(638229412)), c_orderQueueAddToEnd);
        Wait(2.0, c_timeGame);
        SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(1316709222)), "AnimBracketStop Work");
        gv_bonusObjectiveWaitingforreturn = false;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveReturnanimation_Init () {
    gt_BonusObjectiveReturnanimation = TriggerCreate("gt_BonusObjectiveReturnanimation_Func");
    TriggerAddEventPlayerPropChange(gt_BonusObjectiveReturnanimation, 1, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_BonusObjectiveReturnanimation, 2, c_playerPropCustom);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Update
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    while ((libCOMI_gf_GameIsOver() == false) && (TimerGetRemaining(gv_bonusObjectiveDurationTimer) > 0.0)) {
        TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsUpdate, true, false);
        if (((TimerGetRemaining(gv_bonusObjectiveDurationTimer) / TimerGetDuration(gv_bonusObjectiveDurationTimer)) < 0.65)) {
            TriggerExecute(gt_TransmissionSideobjectivereminder1Q, true, false);
        }
        if (((TimerGetRemaining(gv_bonusObjectiveDurationTimer) / TimerGetDuration(gv_bonusObjectiveDurationTimer)) < 0.3)) {
            TriggerExecute(gt_TransmissionSideobjectivereminder2Q, true, false);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveUpdate_Init () {
    gt_BonusObjectiveUpdate = TriggerCreate("gt_BonusObjectiveUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - End
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEnd_Func (bool testConds, bool runActions) {
    int autoD5398727_ae;
    int autoD5398727_ai;
    fixed auto18133C90_ae;
    fixed auto18133C90_ai;
    int auto4253757E_ae;
    int auto4253757E_ai;
    fixed autoC59CD5BE_ae;
    fixed autoC59CD5BE_ai;
    // Variable Declarations
    int lv_loop;
    fixed lv_loop2;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!(gf_bonusObjectiveTargetSum() >= gv_bonusObjectiveTarget || TimerGetRemaining(gv_bonusObjectiveDurationTimer) <= 0.0)) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveHelper, false);
    UnitGroupLoopBegin(UnitGroup("SCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SISCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("KhaydarinCrystal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("KhaydarinCrystalReturnSpot", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TimerPause(gv_bonusObjectiveDurationTimer, true);
    TriggerStop(gt_BonusObjectiveUpdate);
    TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsUpdate, true, false);
    Wait(2.0, c_timeGame);
    if (gf_bonusObjectiveTargetSum()  >= gv_bonusObjectiveTarget) {
        TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsComplete, true, false);
        TriggerExecute(gt_TransmissionSideobjectivecompletedQ, true, false);
    }
    else if ((TimerGetRemaining(gv_bonusObjectiveDurationTimer) <= 0.0)) {
        TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsFailed, true, false);
        TriggerExecute(gt_TransmissionSideobjectivefailedQ, true, false);
    }
    autoD5398727_ae = 10;
    autoD5398727_ai = 1;
    lv_loop = 1;
    for ( ; ( (autoD5398727_ai >= 0 && lv_loop <= autoD5398727_ae) || (autoD5398727_ai <= 0 && lv_loop >= autoD5398727_ae) ) ; lv_loop += autoD5398727_ai ) {
        if ((gv_bonusObjectiveCrystalmarkers[lv_loop].lv_unit != null)) {
            libCOMI_gf_DestroyPingCoop(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_ping);
            libCOMI_gf_DestroyRevealerCoop(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_revealer);
            libCOMI_gf_DestroyRevealerCoop(gv_bonusObjectiveCrystalmarkers[lv_loop].lv_revealer2);
        }
    }
    libCOMI_gf_DestroyPingCoop(gv_bonusObjectiveChalicePing);
    Wait(11.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("SCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SISCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    while (!((gv_bonusObjectiveWaitingforreturn == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(gv_bonusObjectiveAlysaar, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1768836635)), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(gv_bonusObjectiveAlysaar, RegionCircle(PointFromId(1768836635), 1.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
    auto18133C90_ae = 10.5;
    auto18133C90_ai = 0.05;
    lv_loop2 = 8.2;
    for ( ; ( (auto18133C90_ai >= 0 && lv_loop2 <= auto18133C90_ae) || (auto18133C90_ai <= 0 && lv_loop2 >= auto18133C90_ae) ) ; lv_loop2 += auto18133C90_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1330483702)), (("SetZ " + FixedToString(lv_loop2, c_fixedPrecisionAny))));
        ActorSend(libNtve_gf_MainActorofUnit(gv_bonusObjectiveAlysaar), "SetHeight");
        Wait(0.0, c_timeGame);
    }
    libNtve_gf_MakeUnitFacePoint(gv_bonusObjectiveAlysaar, RegionGetCenter(RegionFromId(29)), 1.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_bonusObjectiveAlysaar, "AnimPlay Attack Spell,B");
    SoundPlayAtPointForPlayer(SoundLink("BridgeOn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 50.0, 0.0);
    auto4253757E_ae = 100;
    auto4253757E_ai = 1;
    lv_loop = 1;
    for ( ; ( (auto4253757E_ai >= 0 && lv_loop <= auto4253757E_ae) || (auto4253757E_ai <= 0 && lv_loop >= auto4253757E_ae) ) ; lv_loop += auto4253757E_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1150808620)), (("SetOpacity " + FixedToString(IntToFixed(lv_loop), c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("CollectionBeam_ObjectFloatUp", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
    autoC59CD5BE_ae = -1.5;
    autoC59CD5BE_ai = -0.05;
    lv_loop2 = 10.5;
    for ( ; ( (autoC59CD5BE_ai >= 0 && lv_loop2 <= autoC59CD5BE_ae) || (autoC59CD5BE_ai <= 0 && lv_loop2 >= autoC59CD5BE_ae) ) ; lv_loop2 += autoC59CD5BE_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1330483702)), (("SetZ " + FixedToString(lv_loop2, c_fixedPrecisionAny))));
        if ((lv_loop2 < 6.0)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_bonusObjectiveAlysaar), (("SetZ " + FixedToString((lv_loop2 + 1.8), c_fixedPrecisionAny))));
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(gv_bonusObjectiveAlysaar), "SetHeight");
        }
        Wait(0.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("NovaPsiBlade_Impact", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1768836635), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1316709222)), "AnimBracketStop Work");
    UnitRemove(gv_bonusObjectiveAlysaar);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AlysaarGround", 0, gv_pLAYER_09_ALYSAARS, PointFromId(1768836635));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2029660697)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1558124476)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(897783665)), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitInRegion(UnitLastCreated(), RegionCircle(PointFromId(897783665), 1.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitRemove(UnitLastCreated());
    Wait(10.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AlysaarGround", 0, gv_pLAYER_09_ALYSAARS, PointFromId(932929012));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(994470537)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1605951225)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1018434029)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1158469840)), c_orderQueueAddToEnd);
    while (!((libNtve_gf_UnitInRegion(UnitLastCreated(), RegionCircle(PointFromId(1158469840), 1.0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    UnitRemove(UnitLastCreated());
    UnitGroupLoopBegin(UnitGroup("SCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Drone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SISCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "CarryKhaydarinCrystal", 1);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEnd_Init () {
    gt_BonusObjectiveEnd = TriggerCreate("gt_BonusObjectiveEnd_Func");
    TriggerAddEventPlayerPropChange(gt_BonusObjectiveEnd, 1, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_BonusObjectiveEnd, 2, c_playerPropCustom);
    TriggerAddEventTimer(gt_BonusObjectiveEnd, gv_bonusObjectiveDurationTimer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit - Damage Response
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitDamageResponse_Func (bool testConds, bool runActions) {
    string auto27A844FC_val;
    // Variable Declarations
    string lv_background;
    // Variable Initialization
    lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame.dds";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_hUMAN_PLAYERS);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto27A844FC_val = PlayerRace(PlayerGroupLoopCurrent());
        if (auto27A844FC_val == "Terr") {
            lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_terr.dds";
        }
        else if (auto27A844FC_val == "Zerg") {
            lv_background = "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame_zerg.dds";
        }
        else {
        }
        DialogDestroy(gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()]);
        DialogCreate(270, 80, c_anchorTopRight, 10, 110, false);
        gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()] = DialogLastCreated();
        DialogSetImageVisible(gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()], false);
        libNtve_gf_CreateDialogItemImage(gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()], 200, 80, c_anchorTopLeft, 50, 50, StringToText(""), lv_background, c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemLabel(gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()], 500, 30, c_anchorTop, 0, 10, StringExternal("Param/Value/5C8319FC"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTitleTop", PlayerGroupAll());
        if ((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) > 50.0)) {
            TextExpressionSetToken("Param/Expression/D2C40E20", "CURRENT_LIFE", IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent))));
            TextExpressionSetToken("Param/Expression/D2C40E20", "TOTAL_LIFE", IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropNormal))));
            libNtve_gf_CreateDialogItemLabel(gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()], 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/D2C40E20"), Color(100,100,100), false, 2.0);
        }
        else if ((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) > 10.0)) {
            TextExpressionSetToken("Param/Expression/7E4282DB", "CURRENT_LIFE", IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent))));
            TextExpressionSetToken("Param/Expression/7E4282DB", "TOTAL_LIFE", IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropNormal))));
            libNtve_gf_CreateDialogItemLabel(gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()], 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/7E4282DB"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
        }
        else if (true) {
            TextExpressionSetToken("Param/Expression/5AA58839", "CURRENT_LIFE", IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent))));
            TextExpressionSetToken("Param/Expression/5AA58839", "TOTAL_LIFE", IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropNormal))));
            libNtve_gf_CreateDialogItemLabel(gv_warpConduitLifeDialog[PlayerGroupLoopCurrent()], 500, 25, c_anchorBottom, 0, 10, TextExpressionAssemble("Param/Expression/5AA58839"), Color(100.00, 0.00, 0.00), false, 2.0);
        }
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerTextBottom", PlayerGroupAll());
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_ObjectiveTheWarpConduitmustsurviveUpdate, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WarpConduitDamageResponse_Init () {
    gt_WarpConduitDamageResponse = TriggerCreate("gt_WarpConduitDamageResponse_Func");
    TriggerAddEventUnitDamaged(gt_WarpConduitDamageResponse, UnitRefFromUnit(UnitFromId(1314688197)), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Easter Egg - Not Allowed
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggNotAllowed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 12)))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "VoidSeeker"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPosition(EventUnit(), PointFromId(1632652071), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EasterEggNotAllowed_Init () {
    gt_EasterEggNotAllowed = TriggerCreate("gt_EasterEggNotAllowed_Func");
    TriggerAddEventUnitRegion(gt_EasterEggNotAllowed, null, RegionFromId(14), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Easter Egg - Init
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_EasterEggDefine(1, 5, 0, 2, 0, UnitFromId(21844962), UnitFromId(675384899), false);
    gf_EasterEggDefine(2, 6, 1, 3, 0, UnitFromId(675384899), UnitFromId(422322077), false);
    gf_EasterEggDefine(3, 7, 2, 4, 0, UnitFromId(808826057), UnitFromId(456582577), false);
    gf_EasterEggDefine(4, 8, 3, 0, 0, UnitFromId(422322077), UnitFromId(1982910182), false);
    gf_EasterEggDefine(5, 9, 0, 6, 1, UnitFromId(1470919989), UnitFromId(1844908092), false);
    gf_EasterEggDefine(6, 10, 5, 7, 2, UnitFromId(220210938), UnitFromId(21844962), false);
    gf_EasterEggDefine(7, 11, 6, 8, 3, UnitFromId(1982910182), UnitFromId(1470919989), false);
    gf_EasterEggDefine(8, 12, 7, 0, 4, UnitFromId(2046311806), UnitFromId(1176343556), false);
    gf_EasterEggDefine(9, 13, 0, 10, 5, UnitFromId(1844908092), UnitFromId(821363473), false);
    gf_EasterEggDefine(10, 14, 9, 11, 6, null, UnitFromId(808826057), true);
    gf_EasterEggDefine(11, 15, 10, 12, 7, UnitFromId(821363473), UnitFromId(220210938), false);
    gf_EasterEggDefine(12, 16, 11, 0, 8, UnitFromId(860819419), UnitFromId(1354695818), false);
    gf_EasterEggDefine(13, 0, 0, 14, 9, UnitFromId(1176343556), UnitFromId(1773125291), false);
    gf_EasterEggDefine(14, 0, 13, 15, 10, UnitFromId(1354695818), UnitFromId(2046311806), false);
    gf_EasterEggDefine(15, 0, 14, 16, 11, UnitFromId(1773125291), UnitFromId(860819419), false);
    gf_EasterEggDefine(16, 0, 15, 0, 12, UnitFromId(456582577), null, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EasterEggInit_Init () {
    gt_EasterEggInit = TriggerCreate("gt_EasterEggInit_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Easter Egg - Move block
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggMoveblock_Func (bool testConds, bool runActions) {
    int auto75DCD0C7_ae;
    int auto75DCD0C7_ai;
    int auto0993A488_ae;
    int auto0993A488_ai;
    int autoFA379F7B_ae;
    int autoFA379F7B_ai;
    fixed autoE777D449_ae;
    fixed autoE777D449_ai;
    string auto0A9AD3F2_val;
    fixed auto0E758529_ae;
    fixed auto0E758529_ai;
    int auto58F4FFA5_ae;
    int auto58F4FFA5_ai;
    // Variable Declarations
    int lv_pickedPoint;
    bool lv_moved;
    bool lv_completed;
    fixed lv_loop;
    int lv_loop2;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "15PBlock"))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive) == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_easterEggPlayerActive[EventPlayer()] = true;
    TriggerEnable(TriggerGetCurrent(), false);
    auto75DCD0C7_ae = 16;
    auto75DCD0C7_ai = 1;
    lv_pickedPoint = 1;
    for ( ; ( (auto75DCD0C7_ai >= 0 && lv_pickedPoint <= auto75DCD0C7_ae) || (auto75DCD0C7_ai <= 0 && lv_pickedPoint >= auto75DCD0C7_ae) ) ; lv_pickedPoint += auto75DCD0C7_ai ) {
        if ((gv_easterEgg[lv_pickedPoint].lv_currentUnit == EventUnit())) {
            if ((gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexD].lv_empty == true)) {
                SoundPlayAtPointForPlayer(SoundLink("Dehaka_Jump_Leap", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_easterEgg[lv_pickedPoint].lv_currentUnit), 0.0, 100.0, 0.0);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexD].lv_point), c_orderQueueReplace);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                gv_easterEgg[lv_pickedPoint].lv_empty = true;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexD].lv_currentUnit = gv_easterEgg[lv_pickedPoint].lv_currentUnit;
                gv_easterEgg[lv_pickedPoint].lv_currentUnit = null;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexD].lv_empty = false;
            }
            else if ((gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexL].lv_empty == true)) {
                SoundPlayAtPointForPlayer(SoundLink("Dehaka_Jump_Leap", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_easterEgg[lv_pickedPoint].lv_currentUnit), 0.0, 100.0, 0.0);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexL].lv_point), c_orderQueueReplace);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                gv_easterEgg[lv_pickedPoint].lv_empty = true;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexL].lv_currentUnit = gv_easterEgg[lv_pickedPoint].lv_currentUnit;
                gv_easterEgg[lv_pickedPoint].lv_currentUnit = null;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexL].lv_empty = false;
            }
            else if ((gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexR].lv_empty == true)) {
                SoundPlayAtPointForPlayer(SoundLink("Dehaka_Jump_Leap", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_easterEgg[lv_pickedPoint].lv_currentUnit), 0.0, 100.0, 0.0);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexR].lv_point), c_orderQueueReplace);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                gv_easterEgg[lv_pickedPoint].lv_empty = true;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexR].lv_currentUnit = gv_easterEgg[lv_pickedPoint].lv_currentUnit;
                gv_easterEgg[lv_pickedPoint].lv_currentUnit = null;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexR].lv_empty = false;
            }
            else if ((gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexU].lv_empty == true)) {
                SoundPlayAtPointForPlayer(SoundLink("Dehaka_Jump_Leap", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_easterEgg[lv_pickedPoint].lv_currentUnit), 0.0, 100.0, 0.0);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexU].lv_point), c_orderQueueReplace);
                UnitIssueOrder(gv_easterEgg[lv_pickedPoint].lv_currentUnit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
                gv_easterEgg[lv_pickedPoint].lv_empty = true;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexU].lv_currentUnit = gv_easterEgg[lv_pickedPoint].lv_currentUnit;
                gv_easterEgg[lv_pickedPoint].lv_currentUnit = null;
                gv_easterEgg[gv_easterEgg[lv_pickedPoint].lv_indexU].lv_empty = false;
            }
            break;
        }
    }
    Wait(0.3, c_timeGame);
    lv_completed = true;
    auto0993A488_ae = 16;
    auto0993A488_ai = 1;
    lv_pickedPoint = 1;
    for ( ; ( (auto0993A488_ai >= 0 && lv_pickedPoint <= auto0993A488_ae) || (auto0993A488_ai <= 0 && lv_pickedPoint >= auto0993A488_ae) ) ; lv_pickedPoint += auto0993A488_ai ) {
        if ((gv_easterEgg[lv_pickedPoint].lv_currentUnit != gv_easterEgg[lv_pickedPoint].lv_expectedUnit)) {
            lv_completed = false;
            break;
        }
    }
    if ((lv_completed == false)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        autoFA379F7B_ae = 16;
        autoFA379F7B_ai = 1;
        lv_pickedPoint = 1;
        for ( ; ( (autoFA379F7B_ai >= 0 && lv_pickedPoint <= autoFA379F7B_ae) || (autoFA379F7B_ai <= 0 && lv_pickedPoint >= autoFA379F7B_ae) ) ; lv_pickedPoint += autoFA379F7B_ai ) {
            UnitRemove(gv_easterEgg[lv_pickedPoint].lv_currentUnit);
        }
        SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerUpLarge", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(809105638), 0.0, 100.0, 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(257921144)), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
        autoE777D449_ae = 1.0;
        autoE777D449_ai = 0.01;
        lv_loop = 0.0;
        for ( ; ( (autoE777D449_ai >= 0 && lv_loop <= autoE777D449_ae) || (autoE777D449_ai <= 0 && lv_loop >= autoE777D449_ae) ) ; lv_loop += autoE777D449_ai ) {
            ActorSend(ActorFromDoodad(DoodadFromId(257921144)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
            Wait(0.0, c_timeGame);
        }
        SoundPlayAtPointForPlayer(SoundLink("AiurTempleStoneGate_MoveStart", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(809105638), 0.0, 100.0, 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(650230213)), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
        TriggerEnable(gt_EasterEggNotAllowed, false);
        Wait(0.5, c_timeGame);
        UnitGroupLoopBegin(UnitGroup("PathingBlocker2x2", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        if ((gv_easterEggPlayerActive[gv_pLAYER_01_USER] == true) && (gv_easterEggPlayerActive[gv_pLAYER_02_USER] == true)) {
            gv_easterEggPlayer = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
        }
        else {
            gv_easterEggPlayer = EventPlayer();
        }
        auto0A9AD3F2_val = PlayerRace(gv_easterEggPlayer);
        if (auto0A9AD3F2_val == "Terr") {
            libNtve_gf_UnitCreateFacingPoint(1, "BeachCivilian", 0, 0, PointFromId(563769359), PointWithOffsetPolar(PointFromId(563769359), 1.0, 200.0));
            UnitGroupAdd(gv_easterEggExtraunits, UnitLastCreated());
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimBracketStart StandUnpowered Stand,Unpowered,Start Stand,Unpowered Stand,Unpowered,End");
            libNtve_gf_UnitCreateFacingPoint(1, "BeachCivilian", 0, 0, PointFromId(1239016154), PointWithOffsetPolar(PointFromId(1239016154), 1.0, 0.0));
            UnitGroupAdd(gv_easterEggExtraunits, UnitLastCreated());
        }
        else if (auto0A9AD3F2_val == "Zerg") {
            auto58F4FFA5_ae = 4;
            auto58F4FFA5_ai = 1;
            lv_loop2 = 1;
            for ( ; ( (auto58F4FFA5_ai >= 0 && lv_loop2 <= auto58F4FFA5_ae) || (auto58F4FFA5_ai <= 0 && lv_loop2 >= auto58F4FFA5_ae) ) ; lv_loop2 += auto58F4FFA5_ai ) {
                libNtve_gf_UnitCreateFacingPoint(1, "HotSRaptor", 0, 0, RegionRandomPoint(RegionCircle(PointFromId(1922834601), 1.0)), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(PointFromId(1922834601), 1.0)), 1.0, RandomFixed(1.0, 359.0)));
                UnitBehaviorAdd(UnitLastCreated(), "InstallationZergWander", UnitLastCreated(), 1);
                UnitGroupAdd(gv_easterEggExtraunits, UnitLastCreated());
            }
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "LazyZealot", 0, 0, PointFromId(1349372385), PointWithOffsetPolar(PointFromId(1349372385), 1.0, 180.0));
            UnitGroupAdd(gv_easterEggExtraunits, UnitLastCreated());
            auto0E758529_ae = 0.0;
            auto0E758529_ai = -0.05;
            lv_loop = 1.0;
            for ( ; ( (auto0E758529_ai >= 0 && lv_loop <= auto0E758529_ae) || (auto0E758529_ai <= 0 && lv_loop >= auto0E758529_ae) ) ; lv_loop += auto0E758529_ai ) {
                ActorSend(ActorFromDoodad(DoodadFromId(1045142820)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
            }
       
        }
        TriggerEnable(gt_EasterEggEnd, true);
        Wait(5.0, c_timeGame);
        SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerDownLarge", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(809105638), 0.0, 100.0, 0.0);
        ActorSend(ActorFromDoodad(DoodadFromId(257921144)), "AnimBracketStop Work");
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EasterEggMoveblock_Init () {
    gt_EasterEggMoveblock = TriggerCreate("gt_EasterEggMoveblock_Func");
    TriggerAddEventUnitSelected(gt_EasterEggMoveblock, null, c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Easter Egg - End
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggEnd_Func (bool testConds, bool runActions) {
    string autoDA77AE18_val;
    string autoBB9E9864_val;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == gv_easterEggPlayer))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), PointFromId(1922834601), 2.0, Color(50.20, 50.20, 100.00));
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(5), 20.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(5), 20.0, false);
    autoDA77AE18_val = PlayerRace(gv_easterEggPlayer);
    if (autoDA77AE18_val == "Terr") {
        TriggerExecute(gt_TransmissionEasterEggTQ, true, true);
        UnitGroupLoopBegin(gv_easterEggExtraunits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "AnimBracketStop StandUnpowered");
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
    }
    else if (autoDA77AE18_val == "Prot") {
        TriggerExecute(gt_TransmissionEasterEggPQ, true, true);
        ActorSend(ActorFromDoodad(DoodadFromId(1045142820)), "SetOpacity");
        Wait(0.2, c_timeGame);
    }
    else if (autoDA77AE18_val == "Zerg") {
        TriggerExecute(gt_TransmissionEasterEggZQ, true, true);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "InstallationZergWander", 1);
        Wait(0.2, c_timeGame);
    }
    else {
    }
    UnitGroupLoopBegin(gv_easterEggExtraunits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2115579464)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitGroupLoopEnd();
    autoBB9E9864_val = PlayerRace(gv_easterEggPlayer);
    if (autoBB9E9864_val == "Terr") {
        UnitGroupLoopBegin(gv_easterEggExtraunits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            while (!((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(PointFromId(2115579464), 1.0)) == true))) {
                Wait(0.4, c_timeGame);
            }
            UnitRemove(UnitGroupLoopCurrent());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gv_easterEggPlayer, PointFromId(2115579464));
            SoundPlayAtPointForPlayer(SoundLink("UI_TerranRescueUnit", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(2115579464), 0.0, 100.0, 0.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1632652071)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    else if (autoBB9E9864_val == "Prot") {
        UnitGroupLoopBegin(gv_easterEggExtraunits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            while (!((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(PointFromId(2115579464), 1.0)) == true))) {
                Wait(0.5, c_timeGame);
            }
            UnitRemove(UnitGroupLoopCurrent());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZealotAiur", 0, gv_easterEggPlayer, PointFromId(2115579464));
            SoundPlayAtPointForPlayer(SoundLink("UI_TerranRescueUnit", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(2115579464), 0.0, 100.0, 0.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1632652071)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    else if (autoBB9E9864_val == "Zerg") {
        UnitGroupLoopBegin(gv_easterEggExtraunits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            while (!((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionCircle(PointFromId(2115579464), 1.0)) == true))) {
                Wait(0.4, c_timeGame);
            }
            UnitRemove(UnitGroupLoopCurrent());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSRaptor", 0, gv_easterEggPlayer, PointFromId(2115579464));
            SoundPlayAtPointForPlayer(SoundLink("UI_TerranRescueUnit", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(2115579464), 0.0, 100.0, 0.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1632652071)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EasterEggEnd_Init () {
    gt_EasterEggEnd = TriggerCreate("gt_EasterEggEnd_Func");
    TriggerEnable(gt_EasterEggEnd, false);
    TriggerAddEventUnitRegion(gt_EasterEggEnd, null, RegionFromId(30), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Easter Egg - Deselect Block
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggDeselectBlock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickedUnit;
    bool lv_moved;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "15PBlock"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(0.0, c_timeGame);
    UnitSelect(EventUnit(), EventPlayer(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EasterEggDeselectBlock_Init () {
    gt_EasterEggDeselectBlock = TriggerCreate("gt_EasterEggDeselectBlock_Func");
    TriggerAddEventUnitSelected(gt_EasterEggDeselectBlock, null, c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Start
//--------------------------------------------------------------------------------------------------
void gt_AIStart () {
    string auto4915238E_val;
    // Variable Declarations
    string lv_randomRace;
    int lv_attackWavesIter;
    int lv_resourceSizeIter;
    // Variable Initialization
    // Actions
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_05_INVADER, gv_pLAYER_08_DEFENDERS);
    libCOMI_gf_StartCoopAI(gv_pLAYER_06_THRASHER, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_07_DEFENDERS, gv_pLAYER_02_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_08_DEFENDERS, gv_pLAYER_05_INVADER);
    AICampaignStart(gv_pLAYER_06_THRASHER);
    PlayerGroupAdd(gv_aIAttackWavePlayers, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_aIAttackWavePlayers, gv_pLAYER_04_ENEMY);
    PlayerGroupAdd(gv_aIDropAttackDroppingPlayers, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_aIDropAttackDroppingPlayers, gv_pLAYER_04_ENEMY);
    PlayerGroupLoopBegin(gv_enemyGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        AIAttackWaveSetTargetUnit(PlayerGroupLoopCurrent(), gv_warpConduit);
        libCOMI_gf_SetCoopAIGatherPoint(PlayerGroupLoopCurrent(), PlayerStartLocation(PlayerGroupLoopCurrent()));
        if ((PlayerGroupLoopCurrent() == gv_pLAYER_05_INVADER)) {
            AISetBullyRebuildDelay(0.0, 0.0, PlayerGroupLoopCurrent());
        }
        else {
            AISetBullyRebuildDelay(60.0, 60.0, PlayerGroupLoopCurrent());
        }
        AITransportSetReturn(PlayerGroupLoopCurrent(), PlayerStartLocation(PlayerGroupLoopCurrent()));
        AISetDifficulty(PlayerGroupLoopCurrent(), c_diffWaveLeashing, false);
    }
    PlayerGroupLoopEnd();
    AISetDefenseRadii(gv_pLAYER_07_DEFENDERS, 8.0, 6.0, 10.0);
    auto4915238E_val = PlayerRace(gv_pLAYER_03_ENEMY);
    gf_AIAttackWavesSetRoutes();
    gv_aIDropAttackTransportType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, gv_pLAYER_03_ENEMY);
   // gv_aIDropAttackTransportCargoCapacity = libCOMI_gf_GetUnitCargoSize(UnitLastCreated());
    gv_aIDropAttackTransportCargoCapacity = 8.0;
    gv_aIAttackWaveHybridMajor = "HybridBehemoth";
    gv_aIAttackWaveHybridMinor = "HybridReaver";
    //gv_aIAttackWaveHybridMajor = "HybridDominatorVoid";
    //gv_aIAttackWaveHybridMinor = "HybridDestroyer";
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, true);
    TriggerExecute(gt_AIAttackWaveRunA, true, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - Run (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveRunA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_varianceTotal;
    fixed lv_varianceNext;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_AIAttackWaveRunAFinal, true, false);
    gf_AIAttackWaveSendatTime((3.25 * 60.0), gt_AIAttackWave01325A);
    gf_AIAttackWaveSendatTime((5.5 * 60.0), gt_AIAttackWave0255A);
    lv_varianceNext = RandomFixed(-1.5, 1.5);
    gf_AIAttackWaveSendatTime(((8.0 + lv_varianceNext) * 60.0), gt_AIAttackWave038A);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_AIAttackWaveGetVarianceNext(lv_varianceTotal);
    gf_AIAttackWaveSendatTime(((11.0 + lv_varianceNext) * 60.0), gt_AIAttackWave0411A);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_AIAttackWaveGetVarianceNext(lv_varianceTotal);
    gf_AIAttackWaveSendatTime(((15.0 + lv_varianceNext) * 60.0), gt_AIAttackWave0515A);
    lv_varianceTotal += lv_varianceNext;
    lv_varianceNext = gf_AIAttackWaveGetVarianceNext(lv_varianceTotal);
    gf_AIAttackWaveSendatTime(((18.5 + lv_varianceNext) * 60.0), gt_AIAttackWave06185A);
    lv_varianceTotal += lv_varianceNext;
    while (!((GameGetMissionTime() >= (20.75 * 60.0)))) {
        Wait(1.0, c_timeGame);
    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        gv_aIAttackWaveRandom = RandomInt(1, 2);
        TriggerExecute(gt_AIAttackWave0515A, true, false);
        Wait(130.0, c_timeAI);
        TriggerExecute(gt_AIAttackWave06185A, true, false);
        Wait(80.0, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveRunA_Init () {
    gt_AIAttackWaveRunA = TriggerCreate("gt_AIAttackWaveRunA_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - Run (A) Final
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveRunAFinal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_varianceTotal;
    fixed lv_varianceNext;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    while (!(((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) == 0) || (libCOMI_gf_GameIsOver() == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerStop(gt_AIAttackWaveRunA);
    if ((libCOMI_gf_GameIsOver() == true)) {
        TriggerStop(TriggerGetCurrent());
    }
    libNtve_gf_WaitForTimer(gv_aIAttackWaveFinaldelay, 0.0, false);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_AIAttackWaveAfterClearance01A, true, false);
        Wait(110.0, c_timeAI);
        TriggerExecute(gt_AIAttackWaveAfterClearance02A, true, false);
        Wait(110.0, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveRunAFinal_Init () {
    gt_AIAttackWaveRunAFinal = TriggerCreate("gt_AIAttackWaveRunAFinal_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - 01 3,25 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWave01325A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    int lv_attackWaveRoute;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 2, 2) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWaveRoute = 2;
    TriggerExecute(gt_TransmissionEnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    Wait(50.0, c_timeAI);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWave01325A_Init () {
    gt_AIAttackWave01325A = TriggerCreate("gt_AIAttackWave01325A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - 02 5.5 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWave0255A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    int lv_attackWaveRoute;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_TransmissionEnemyAttackingQ, true, false);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_attackWaveRoute = 1;
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWave0255A_Init () {
    gt_AIAttackWave0255A = TriggerCreate("gt_AIAttackWave0255A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - 03 8 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWave038A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    unitgroup lv_attackWave;
    int lv_attackWaveRoute;
    int lv_random;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_enemyGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(6), true);
    }
    PlayerGroupLoopEnd();
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_attackWaveRoute = 7;
    TriggerExecute(gt_TransmissionEnemyAttackingQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIDropAttackSendWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWave038A_Init () {
    gt_AIAttackWave038A = TriggerCreate("gt_AIAttackWave038A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - 04 11 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWave0411A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    unitgroup lv_attackWave;
    int lv_attackWaveRoute;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
        TriggerExecute(gt_TransmissionHybridDetectedQ, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionEnemyAttackingQ, true, false);
    }
    gv_aIAttackWaveRandom = RandomInt(1, 2);
    if ((gv_aIAttackWaveRandom == 1)) {
        lv_attackWaveRoute = RandomInt(3, 4);
    }
    else {
        lv_attackWaveRoute = 6;
    }
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 1, 1), gv_aIAttackWaveHybridMinor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
    UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWave0411A_Init () {
    gt_AIAttackWave0411A = TriggerCreate("gt_AIAttackWave0411A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - 05 15 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWave0515A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    unitgroup lv_attackWave;
    int lv_attackWaveRoute;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_enemyGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
            AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(11), true);
        }
    }
    PlayerGroupLoopEnd();
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    if ((gv_aIAttackWaveRandom == 1)) {
        lv_attackWaveRoute = 6;
    }
    else {
        lv_attackWaveRoute = 5;
    }
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 0, 2, 2), gv_aIAttackWaveHybridMinor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
    UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 2, 2), gv_aIAttackWaveHybridMajor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
    UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
    if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
        TriggerExecute(gt_TransmissionHybridDetectedQ, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionEnemyAttackingQ, true, false);
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    Wait(50.0, c_timeAI);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_attackWaveRoute = RandomInt(9, 10);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
    UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIDropAttackSendWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWave0515A_Init () {
    gt_AIAttackWave0515A = TriggerCreate("gt_AIAttackWave0515A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - 06 18.5 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWave06185A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    unitgroup lv_attackWave;
    int lv_attackWaveRoute;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    gv_aIAttackWaveRandom = RandomInt(1, 2);
    if ((gv_aIAttackWaveRandom == 1)) {
        lv_attackWaveRoute = 5;
    }
    else {
        lv_attackWaveRoute = 6;
    }
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 1, 2, 2), gv_aIAttackWaveHybridMinor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
    UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 2, 2), gv_aIAttackWaveHybridMajor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
    UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
    TriggerExecute(gt_TransmissionHybridDetectedQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWave06185A_Init () {
    gt_AIAttackWave06185A = TriggerCreate("gt_AIAttackWave06185A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - After Clearance - 01 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveAfterClearance01A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    unitgroup lv_attackWave;
    unitgroup lv_hybrid;
    int lv_random;
    int lv_attackWaveRoute;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();
    lv_hybrid = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_enemyGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
            AIToggleBulliesInRegion(PlayerGroupLoopCurrent(), RegionFromId(11), true);
        }
    }
    PlayerGroupLoopEnd();
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_random = RandomInt(1, 2);
    lv_attackWaveRoute = 5;
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
    if ((RandomInt(1, 3) == 1)) {
        lv_attackWaveRoute = 9;
        gf_AIDropAttackSendWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute);
    }
    else {
        if ((lv_random == 1)) {
            lv_attackWaveRoute = 6;
        }
        gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    }
    TriggerExecute(gt_TransmissionEnemyAttackingQ, true, false);
    Wait(60.0, c_timeAI);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_random = RandomInt(1, 2);
    if ((lv_random == 1)) {
        lv_attackWaveRoute = 1;
    }
    else {
        lv_attackWaveRoute = 2;
    }
    if ((RandomInt(1, 3) > 1)) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY), 0, 1, 1, 2, 2, 3), gv_aIAttackWaveHybridMajor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
        gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    }
    else {
        if ((lv_random == 1)) {
            lv_attackWaveRoute = 7;
        }
        else {
            lv_attackWaveRoute = 8;
        }
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY), 0, 1, 1, 2, 2, 3), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
        gf_AIDropAttackSendWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveAfterClearance01A_Init () {
    gt_AIAttackWaveAfterClearance01A = TriggerCreate("gt_AIAttackWaveAfterClearance01A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - After Clearance - 02 (A)
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveAfterClearance02A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceAmount;
    int lv_techLevel;
    unitgroup lv_attackWave;
    int lv_random;
    int lv_attackWaveRoute;
    // Variable Initialization
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_attackWave = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) == 0)) {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else {
        lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_random = RandomInt(1, 2);
    if ((lv_random == 1)) {
        lv_attackWaveRoute = 2;
    }
    else {
        lv_attackWaveRoute = 3;
    }
    if ((RandomInt(1, 3) == 1)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
        gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    }
    else {
        if ((lv_random == 1)) {
            lv_attackWaveRoute = 8;
        }
        else {
            lv_attackWaveRoute = 9;
        }
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
        gf_AIDropAttackSendWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute);
    }
    TriggerExecute(gt_TransmissionHybridDetectedQ, true, false);
    Wait(60.0, c_timeAI);
    lv_resourceAmount = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    if ((RandomInt(1, 3) > 1)) {
        lv_attackWaveRoute = 6;
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY), 1, 0, 1, 2, 2, 2), gv_aIAttackWaveHybridMinor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 2, 2), gv_aIAttackWaveHybridMajor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 2, 3), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
        gf_AIAttackWaveSend(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute, gv_aIAttackWavePlayers);
    }
    else {
        lv_attackWaveRoute = 9;
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY), 1, 0, 1, 2, 2, 2), gv_aIAttackWaveHybridMinor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 2, 2), gv_aIAttackWaveHybridMajor, 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 2, 3), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], 270.0);
        UnitGroupAddUnitGroup(gv_aIAttackWaveHybrid, UnitLastCreatedGroup());
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(PlayerGroupPlayer(gv_aIAttackWavePlayers, 1), PlayerGroupPlayer(gv_aIAttackWavePlayers, 2), lv_resourceAmount, lv_techLevel, gv_aIAttackWavesRoutes[lv_attackWaveRoute][1], true);
        gf_AIDropAttackSendWave(libCOMI_gf_LastCreatedCoopAttackForce(), lv_attackWaveRoute);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveAfterClearance02A_Init () {
    gt_AIAttackWaveAfterClearance02A = TriggerCreate("gt_AIAttackWaveAfterClearance02A_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Attack Wave - Void Thrasher Wave
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveVoidThrasherWave_Func (bool testConds, bool runActions) {
    int autoEF3524F3_val;
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_alysaars, c_unitCountAlive) < 9))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionVoidThrasherAppearsQ, true, false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, PointFromId(1631344279), true);
    autoEF3524F3_val = libCOMI_gf_GetMissionDifficulty();
    if (autoEF3524F3_val == 1) {
        gf_AIVoidThrasherCreate(UnitFromId(1986276253), ge_AIVoidThrasherLevel_Level01);
    }
    else if (autoEF3524F3_val == 2) {
        gf_AIVoidThrasherCreate(UnitFromId(1986276253), ge_AIVoidThrasherLevel_Level02);
    }
    else if (autoEF3524F3_val == 3) {
        gf_AIVoidThrasherCreate(UnitFromId(1986276253), ge_AIVoidThrasherLevel_Level03);
    }
    else if (autoEF3524F3_val == 4) {
        gf_AIVoidThrasherCreate(UnitFromId(1986276253), ge_AIVoidThrasherLevel_Level04);
    }
    else {
        gf_AIVoidThrasherCreate(UnitFromId(1986276253), ge_AIVoidThrasherLevel_Level02);
    }
    while (!((gv_aIVoidThrasherAlive == true))) {
        Wait(1.0, c_timeGame);
    }
    while (!(((gv_aIVoidThrasherAlive == false) || (TriggerGetExecCount(gt_TransmissionVoidThrasherDeathQ) != 0)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveVoidThrasherWave_Init () {
    gt_AIAttackWaveVoidThrasherWave = TriggerCreate("gt_AIAttackWaveVoidThrasherWave_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Void Thrasher - Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_AIVoidThrasherAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridAttackPing;
    unitgroup lv_hybridGroup;
    wave lv_wave;
    // Variable Initialization
    lv_hybridAttackPing = c_invalidPingId;
    lv_hybridGroup = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_wave = EventPlayerWave();
    if ((lv_wave == null)) {
        breakpoint;
        return true;
    }
    lv_hybridGroup = AIWaveGetUnits(EventPlayerWave());
    if ((lv_hybridGroup == null)) {
        breakpoint;
        return true;
    }
    if ((UnitGroupCount(UnitGroupFilter(gv_c_ThrasherUnitType, c_playerAny, lv_hybridGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), StringExternal("Param/Value/F2BD5BB8"));
        PingSetScale(PingLastCreated(), 1.0);
        PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), StringExternal("Param/Value/EB8BE201"));
        PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    }
    lv_hybridAttackPing = PingLastCreated();
    if ((lv_hybridAttackPing == c_invalidPingId)) {
        breakpoint;
    }
    while ((libCOMI_gf_GameIsOver() == false) && (libNtve_gf_UnitGroupIsDead(lv_hybridGroup) == false)) {
        PingSetPosition(lv_hybridAttackPing, UnitGroupCenterOfGroup(lv_hybridGroup));
        Wait(0.5, c_timeAI);
    }
    PingDestroy(lv_hybridAttackPing);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIVoidThrasherAttackWave_Init () {
    gt_AIVoidThrasherAttackWave = TriggerCreate("gt_AIVoidThrasherAttackWave_Func");
    TriggerAddEventPlayerAIWave(gt_AIVoidThrasherAttackWave, 6);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Void Thrasher - Missiles
//--------------------------------------------------------------------------------------------------
bool gt_AIVoidThrasherMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_l_MissileUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "KaiserWormScourgeMissile"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_l_MissileUnit = EventUnit();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "KaiserWormScourgeMissile", UnitGetPosition(lv_l_MissileUnit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, UnitGetFacing(lv_l_MissileUnit));
    libHots_gf_StorePingForUnit(lv_l_MissileUnit, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), lv_l_MissileUnit);
    PingSetScale(PingLastCreated(), 0.075);
    while (!((UnitIsAlive(EventUnit()) == false))) {
        Wait(0.0625, c_timeGame);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lv_l_MissileUnit, 1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIVoidThrasherMissiles_Init () {
    gt_AIVoidThrasherMissiles = TriggerCreate("gt_AIVoidThrasherMissiles_Func");
    TriggerAddEventUnitRegion(gt_AIVoidThrasherMissiles, null, RegionEntireMap(), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Void Thrasher - Extra Breath Attacks
//--------------------------------------------------------------------------------------------------
bool gt_AIVoidThrasherExtraBreathAttacks_Func (bool testConds, bool runActions) {
    int auto2A2E6425_ae;
    int auto2A2E6425_ai;
    // Variable Declarations
    int lv_extraDifficultyDamage;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto2A2E6425_ae = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 3, 3);
    auto2A2E6425_ai = 1;
    lv_extraDifficultyDamage = 0;
    for ( ; ( (auto2A2E6425_ai >= 0 && lv_extraDifficultyDamage <= auto2A2E6425_ae) || (auto2A2E6425_ai <= 0 && lv_extraDifficultyDamage >= auto2A2E6425_ae) ) ; lv_extraDifficultyDamage += auto2A2E6425_ai ) {
        UnitCreateEffectPoint(EventUnit(), "VoidThrasherLightningAoECreatePersistentDelay", EventUnitTargetPoint());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIVoidThrasherExtraBreathAttacks_Init () {
    gt_AIVoidThrasherExtraBreathAttacks = TriggerCreate("gt_AIVoidThrasherExtraBreathAttacks_Func");
    TriggerAddEventUnitAbility(gt_AIVoidThrasherExtraBreathAttacks, null, AbilityCommand("VoidThrasherLightningAoE", 0), c_unitAbilStageExecute, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Invaders - Start hostilities
//--------------------------------------------------------------------------------------------------
bool gt_AIInvadersStarthostilities_Func (bool testConds, bool runActions) {
    int autoBC9EBEB9_ae;
    int autoBC9EBEB9_ai;
    // Variable Declarations
    point lv_target;
    int lv_loop;
    int lv_region;
    string lv_currentRegion;
    // Variable Initialization
    lv_currentRegion = "";
    // Actions
    if (!runActions) {
        return true;
    }
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(1), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(1), true, false);
    TriggerExecute(gt_AutomatonsPingRoadEnemy, true, false);
    TriggerExecute(gt_TransmissionEnemystartsfightingQ, true, false);
    TriggerExecute(gt_AutomatonsCounter, false, false);
    TriggerExecute(gt_AutomatonsCounterEnemy, false, false);
    autoBC9EBEB9_ae = 166;
    autoBC9EBEB9_ai = 1;
    lv_loop = 1;
    for ( ; ( (autoBC9EBEB9_ai >= 0 && lv_loop <= autoBC9EBEB9_ae) || (autoBC9EBEB9_ai <= 0 && lv_loop >= autoBC9EBEB9_ae) ) ; lv_loop += autoBC9EBEB9_ai ) {
        if ((UserDataGetInt("LMHostilities", UserDataInstance("LMHostilities", lv_loop), "Enables Bullies", 1) == 1)) {
            lv_region += 1;
            lv_currentRegion = ("P05Bullies" + IntToString(lv_region));
            AIToggleBulliesInRegion(gv_pLAYER_05_INVADER, RegionFromName(lv_currentRegion), true);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("LMHostilities", UserDataInstance("LMHostilities", lv_loop), "Unit", 1), c_unitCreateIgnorePlacement, gv_pLAYER_05_INVADER, PointFromId(1692979517));
        lv_target = RegionRandomPoint(RegionFromName(lv_currentRegion));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
        gf_AIInvadersDisablescriptcontrol(UnitLastCreated(), lv_target);
        Wait(UserDataGetFixed("LMHostilities", UserDataInstance("LMHostilities", lv_loop), "Delay", 1), c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIInvadersStarthostilities_Init () {
    gt_AIInvadersStarthostilities = TriggerCreate("gt_AIInvadersStarthostilities_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Invaders - Unit Revive
//--------------------------------------------------------------------------------------------------
bool gt_AIInvadersUnitRevive_Func (bool testConds, bool runActions) {
    int auto24EE93F3_val;
    // Variable Declarations
    string lv_type;
    point lv_target;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((EventPlayer() == gv_pLAYER_05_INVADER))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) != "PhotonCannon"))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) != "Pylon"))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_target = RegionRandomPoint(RegionCircle(EventUnitDamageSourcePoint(), 5.0));
    lv_type = UnitGetType(EventUnit());
    auto24EE93F3_val = libCOMI_gf_GetMissionDifficulty();
    if (auto24EE93F3_val == 1) {
        Wait(RandomFixed(22.0, 32.0), c_timeGame);
    }
    else if (auto24EE93F3_val == 2) {
        Wait(RandomFixed(19.0, 29.0), c_timeGame);
    }
    else if (auto24EE93F3_val == 3) {
        Wait(RandomFixed(16.0, 26.0), c_timeGame);
    }
    else {
        Wait(RandomFixed(14.0, 24.0), c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_type, c_unitCreateIgnorePlacement, gv_pLAYER_05_INVADER, PointFromId(1692979517));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
    gf_AIInvadersDisablescriptcontrol(UnitLastCreated(), lv_target);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIInvadersUnitRevive_Init () {
    gt_AIInvadersUnitRevive = TriggerCreate("gt_AIInvadersUnitRevive_Func");
    TriggerAddEventUnitDied(gt_AIInvadersUnitRevive, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Invaders - Go to your side
//--------------------------------------------------------------------------------------------------
bool gt_AIInvadersGotoyourside_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_loop;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_05_INVADER) || (UnitGroupHasUnit(gv_roadGroupEnemies, EventUnit()) == true)))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_alysaarsFieldOn == true)) {
        UnitKill(EventUnit());
    }
    else {
        if ((EventUnit() != UnitFromId(1775367823))) {
            while (!((UnitOrderCount(EventUnit()) == 0))) {
                Wait(1.0, c_timeGame);
            }
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(26))), c_orderQueueReplace);
            Wait(10.0, c_timeGame);
            AISetUnitScriptControlled(EventUnit(), false);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIInvadersGotoyourside_Init () {
    gt_AIInvadersGotoyourside = TriggerCreate("gt_AIInvadersGotoyourside_Func");
    TriggerAddEventUnitRegion(gt_AIInvadersGotoyourside, null, RegionFromId(27), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: AI - Defenders - Return to the line
//--------------------------------------------------------------------------------------------------
bool gt_AIDefendersReturntotheline_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_07_DEFENDERS) || (UnitGetOwner(EventUnit()) == gv_pLAYER_08_DEFENDERS)))) {
            return false;
        }
        if (!(((UnitGetType(EventUnit()) == "StalkerInstigatorNerazim") || (UnitGetType(EventUnit()) == "CorsairNerazim")))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(libHots_gf_PointStoredForUnit(EventUnit(), 5), 1.0)) == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true) && (UnitOrderCount(EventUnit()) == 0) && (libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(libHots_gf_PointStoredForUnit(EventUnit(), 1), 5.0)) == false)) {
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), libHots_gf_PointStoredForUnit(EventUnit(), 1)));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AIDefendersReturntotheline_Init () {
    gt_AIDefendersReturntotheline = TriggerCreate("gt_AIDefendersReturntotheline_Func");
    TriggerAddEventUnitBecomesIdle(gt_AIDefendersReturntotheline, null, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyAttackingQ_Init () {
    gt_TransmissionEnemyAttackingQ = TriggerCreate("gt_TransmissionEnemyAttackingQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Detected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridDetectedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTimeCurrent;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lv_missionTimeCurrent = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_missionTimeCurrent) > 10.0)) {
        return true;
    }
    else {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("HybridDetected", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridDetectedQ_Init () {
    gt_TransmissionHybridDetectedQ = TriggerCreate("gt_TransmissionHybridDetectedQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Introduction 1
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroduction1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8001", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroduction1_Init () {
    gt_TransmissionIntroduction1 = TriggerCreate("gt_TransmissionIntroduction1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Introduction 2
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroduction2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8002", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroduction2_Init () {
    gt_TransmissionIntroduction2 = TriggerCreate("gt_TransmissionIntroduction2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Introduction 3
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroduction3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8006", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroduction3_Init () {
    gt_TransmissionIntroduction3 = TriggerCreate("gt_TransmissionIntroduction3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Introduction 4
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroduction4_Func (bool testConds, bool runActions) {
    string autoA5457D2C_val;
    string autoAF045E97_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8007", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 2) == 1)) {
        autoAF045E97_val = PlayerCommander(gv_pLAYER_01_USER);
        if (autoAF045E97_val == "Artanis") {
            lv_userType = "ArtanisSecureObjective";
            lv_unitType = "ArtanisVoid";
        }
        else if (autoAF045E97_val == "Kerrigan") {
            lv_userType = "KerriganSecureObjective";
            lv_unitType = "KerriganVoid";
        }
        else if (autoAF045E97_val == "Raynor") {
            lv_userType = "RaynorSecureObjective";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    else {
        autoA5457D2C_val = PlayerCommander(gv_pLAYER_02_USER);
        if (autoA5457D2C_val == "Artanis") {
            lv_userType = "ArtanisSecureObjective";
            lv_unitType = "ArtanisVoid";
        }
        else if (autoA5457D2C_val == "Kerrigan") {
            lv_userType = "KerriganSecureObjective";
            lv_unitType = "KerriganVoid";
        }
        else if (autoA5457D2C_val == "Raynor") {
            lv_userType = "RaynorSecureObjective";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroduction4_Init () {
    gt_TransmissionIntroduction4 = TriggerCreate("gt_TransmissionIntroduction4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Start fighting Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStartfightingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_roadGroupPlayers, EventUnit()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8021", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_TransmissionLevel1ClearedQ, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionStartfightingQ_Init () {
    gt_TransmissionStartfightingQ = TriggerCreate("gt_TransmissionStartfightingQ_Func");
    TriggerAddEventUnitAttacked2(gt_TransmissionStartfightingQ, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Level 1 Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLevel1ClearedQ_Func (bool testConds, bool runActions) {
    string auto395EDA44_val;
    string autoD285E52F_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_roadGroupPlayers, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_roadGroupPlayers, RegionFromId(12), 0), c_unitCountAlive) == 0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionStartfightingQ, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8022", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            autoD285E52F_val = PlayerCommander(gv_pLAYER_01_USER);
            if (autoD285E52F_val == "Artanis") {
                lv_userType = "ArtanisSecureProgres";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoD285E52F_val == "Kerrigan") {
                lv_userType = "KerriganSecureProgres";
                lv_unitType = "KerriganVoid";
            }
            else if (autoD285E52F_val == "Raynor") {
                lv_userType = "RaynorSecureProgres";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            auto395EDA44_val = PlayerCommander(gv_pLAYER_02_USER);
            if (auto395EDA44_val == "Artanis") {
                lv_userType = "ArtanisSecureProgres";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto395EDA44_val == "Kerrigan") {
                lv_userType = "KerriganSecureProgres";
                lv_unitType = "KerriganVoid";
            }
            else if (auto395EDA44_val == "Raynor") {
                lv_userType = "RaynorSecureProgres";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_roadGroupPlayers, RegionFromId(13), 0), c_unitCountAlive) > 0)) {
        TriggerEnable(gt_TransmissionLevel2ClearedQ, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionLevel1ClearedQ_Init () {
    gt_TransmissionLevel1ClearedQ = TriggerCreate("gt_TransmissionLevel1ClearedQ_Func");
    TriggerEnable(gt_TransmissionLevel1ClearedQ, false);
    TriggerAddEventUnitDied(gt_TransmissionLevel1ClearedQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Level 2 Cleared Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLevel2ClearedQ_Func (bool testConds, bool runActions) {
    string autoD709B2FC_val;
    string auto24559FC3_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_roadGroupPlayers, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_roadGroupPlayers, RegionFromId(13), 0), c_unitCountAlive) == 0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8023", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            auto24559FC3_val = PlayerCommander(gv_pLAYER_01_USER);
            if (auto24559FC3_val == "Artanis") {
                lv_userType = "ArtanisSecureProgres";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto24559FC3_val == "Kerrigan") {
                lv_userType = "KerriganSecureProgres";
                lv_unitType = "KerriganVoid";
            }
            else if (auto24559FC3_val == "Raynor") {
                lv_userType = "RaynorSecureProgres";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            autoD709B2FC_val = PlayerCommander(gv_pLAYER_02_USER);
            if (autoD709B2FC_val == "Artanis") {
                lv_userType = "ArtanisSecureProgres";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoD709B2FC_val == "Kerrigan") {
                lv_userType = "KerriganSecureProgres";
                lv_unitType = "KerriganVoid";
            }
            else if (autoD709B2FC_val == "Raynor") {
                lv_userType = "RaynorSecureProgres";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    if ((TriggerGetExecCount(gt_AutomatonsAlmostDone) == 0)) {
        TriggerEnable(gt_TransmissionStonelotEncounterQ, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionLevel2ClearedQ_Init () {
    gt_TransmissionLevel2ClearedQ = TriggerCreate("gt_TransmissionLevel2ClearedQ_Func");
    TriggerEnable(gt_TransmissionLevel2ClearedQ, false);
    TriggerAddEventUnitDied(gt_TransmissionLevel2ClearedQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Last Forces Highlight Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLastForcesHighlightQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionStartfightingQ, false);
    TriggerEnable(gt_TransmissionLevel1ClearedQ, false);
    TriggerEnable(gt_TransmissionLevel2ClearedQ, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8024", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionLastForcesHighlightQ_Init () {
    gt_TransmissionLastForcesHighlightQ = TriggerCreate("gt_TransmissionLastForcesHighlightQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Stonelot Encounter Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStonelotEncounterQ_Func (bool testConds, bool runActions) {
    string auto004764E5_val;
    string autoB36C0FEA_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() == UnitFromId(1359970396)))) {
            return false;
        }
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8025", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            autoB36C0FEA_val = PlayerCommander(gv_pLAYER_01_USER);
            if (autoB36C0FEA_val == "Artanis") {
                lv_userType = "ArtanisSecureAlmostDone";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoB36C0FEA_val == "Kerrigan") {
                lv_userType = "KerriganSecureAlmostDone";
                lv_unitType = "KerriganVoid";
            }
            else if (autoB36C0FEA_val == "Raynor") {
                lv_userType = "RaynorSecureAlmostDone";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            auto004764E5_val = PlayerCommander(gv_pLAYER_02_USER);
            if (auto004764E5_val == "Artanis") {
                lv_userType = "ArtanisSecureAlmostDone";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto004764E5_val == "Kerrigan") {
                lv_userType = "KerriganSecureAlmostDone";
                lv_unitType = "KerriganVoid";
            }
            else if (auto004764E5_val == "Raynor") {
                lv_userType = "RaynorSecureAlmostDone";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionStonelotEncounterQ_Init () {
    gt_TransmissionStonelotEncounterQ = TriggerCreate("gt_TransmissionStonelotEncounterQ_Func");
    TriggerEnable(gt_TransmissionStonelotEncounterQ, false);
    TriggerAddEventUnitDamaged(gt_TransmissionStonelotEncounterQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - All automatons killed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAllautomatonskilledQ_Func (bool testConds, bool runActions) {
    string autoBF475FA0_val;
    string auto26C5853A_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionEnemystartsfightingQ, false);
    TriggerEnable(gt_TransmissionEnemybeatsfirstgroupQ, false);
    TriggerEnable(gt_TransmissionEnemyfightsStonelotQ, false);
    TriggerEnable(gt_TransmissionEnemyreacheshighgroundQ, false);
    TriggerQueueEnter();
    libCOMI_gf_PlaySoundCinematic(SoundLink("Alert_UniObjectiveCompleted", -1), PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8031", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            auto26C5853A_val = PlayerCommander(gv_pLAYER_01_USER);
            if (auto26C5853A_val == "Artanis") {
                lv_userType = "ArtanisSecureCompleted";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto26C5853A_val == "Kerrigan") {
                lv_userType = "KerriganSecureCompleted";
                lv_unitType = "KerriganVoid";
            }
            else if (auto26C5853A_val == "Raynor") {
                lv_userType = "RaynorSecureCompleted";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            autoBF475FA0_val = PlayerCommander(gv_pLAYER_02_USER);
            if (autoBF475FA0_val == "Artanis") {
                lv_userType = "ArtanisSecureCompleted";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoBF475FA0_val == "Kerrigan") {
                lv_userType = "KerriganSecureCompleted";
                lv_unitType = "KerriganVoid";
            }
            else if (autoBF475FA0_val == "Raynor") {
                lv_userType = "RaynorSecureCompleted";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAllautomatonskilledQ_Init () {
    gt_TransmissionAllautomatonskilledQ = TriggerCreate("gt_TransmissionAllautomatonskilledQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Alysaar warps out Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstAlysaarwarpsoutQ_Func (bool testConds, bool runActions) {
    string autoF2EDB2DF_val;
    string auto939BDA1C_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8032", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 2) == 1)) {
        auto939BDA1C_val = PlayerCommander(gv_pLAYER_01_USER);
        if (auto939BDA1C_val == "Artanis") {
            lv_userType = "ArtanisDefendObjective";
            lv_unitType = "ArtanisVoid";
        }
        else if (auto939BDA1C_val == "Kerrigan") {
            lv_userType = "KerriganDefendObjective";
            lv_unitType = "KerriganVoid";
        }
        else if (auto939BDA1C_val == "Raynor") {
            lv_userType = "RaynorDefendObjective";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    else {
        autoF2EDB2DF_val = PlayerCommander(gv_pLAYER_02_USER);
        if (autoF2EDB2DF_val == "Artanis") {
            lv_userType = "ArtanisDefendObjective";
            lv_unitType = "ArtanisVoid";
        }
        else if (autoF2EDB2DF_val == "Kerrigan") {
            lv_userType = "KerriganDefendObjective";
            lv_unitType = "KerriganVoid";
        }
        else if (autoF2EDB2DF_val == "Raynor") {
            lv_userType = "RaynorDefendObjective";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstAlysaarwarpsoutQ_Init () {
    gt_TransmissionFirstAlysaarwarpsoutQ = TriggerCreate("gt_TransmissionFirstAlysaarwarpsoutQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Last Alysaar Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLastAlysaarQ_Func (bool testConds, bool runActions) {
    string autoB0D58C59_val;
    string auto31724E5F_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8041", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            auto31724E5F_val = PlayerCommander(gv_pLAYER_01_USER);
            if (auto31724E5F_val == "Artanis") {
                lv_userType = "ArtanisDefendAlmostDone";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto31724E5F_val == "Kerrigan") {
                lv_userType = "KerriganDefendAlmostDone";
                lv_unitType = "KerriganVoid";
            }
            else if (auto31724E5F_val == "Raynor") {
                lv_userType = "RaynorDefendAlmostDone";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            autoB0D58C59_val = PlayerCommander(gv_pLAYER_02_USER);
            if (autoB0D58C59_val == "Artanis") {
                lv_userType = "ArtanisDefendAlmostDone";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoB0D58C59_val == "Kerrigan") {
                lv_userType = "KerriganDefendAlmostDone";
                lv_unitType = "KerriganVoid";
            }
            else if (autoB0D58C59_val == "Raynor") {
                lv_userType = "RaynorDefendAlmostDone";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionLastAlysaarQ_Init () {
    gt_TransmissionLastAlysaarQ = TriggerCreate("gt_TransmissionLastAlysaarQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy starts fighting Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemystartsfightingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        lv_sound = SoundLink("acObj_Krythkal_8071", -1);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemystartsfightingQ_Init () {
    gt_TransmissionEnemystartsfightingQ = TriggerCreate("gt_TransmissionEnemystartsfightingQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy beats first group Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemybeatsfirstgroupQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    point lv_point;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_roadGroupEnemies, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_roadGroupEnemies, RegionFromId(22), 0), c_unitCountAlive) == 0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_point = UnitGetPosition(EventUnit());
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_point, 2.0, Color(100.00, 0.00, 0.00));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        lv_sound = SoundLink("acObj_Krythkal_8072", -1);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemybeatsfirstgroupQ_Init () {
    gt_TransmissionEnemybeatsfirstgroupQ = TriggerCreate("gt_TransmissionEnemybeatsfirstgroupQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionEnemybeatsfirstgroupQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy reaches highground Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyreacheshighgroundQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    point lv_point;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_roadGroupEnemies, EventUnit()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroupFilterRegion(gv_roadGroupEnemies, RegionFromId(24), 0), c_unitCountAlive) == 0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_point = UnitGetPosition(EventUnit());
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_point, 2.0, Color(100.00, 0.00, 0.00));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        lv_sound = SoundLink("acObj_Krythkal_8073", -1);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyreacheshighgroundQ_Init () {
    gt_TransmissionEnemyreacheshighgroundQ = TriggerCreate("gt_TransmissionEnemyreacheshighgroundQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionEnemyreacheshighgroundQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy fights Stonelot Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyfightsStonelotQ_Func (bool testConds, bool runActions) {
    string autoCC061965_val;
    string auto2948295E_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    point lv_point;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive) < 10))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_point = UnitGetPosition(UnitFromId(1775367823));
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_point, 2.0, Color(100.00, 0.00, 0.00));
        lv_sound = SoundLink("acObj_Krythkal_8074", -1);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        if ((RandomInt(1, 10) > 7)) {
            if ((RandomInt(1, 2) == 1)) {
                auto2948295E_val = PlayerCommander(gv_pLAYER_01_USER);
                if (auto2948295E_val == "Artanis") {
                    lv_userType = "ArtanisThatWontHappen";
                    lv_unitType = "ArtanisVoid";
                }
                else if (auto2948295E_val == "Kerrigan") {
                    lv_userType = "KerriganThatWontHappen";
                    lv_unitType = "KerriganVoid";
                }
                else if (auto2948295E_val == "Raynor") {
                    lv_userType = "RaynorThatWontHappen";
                    lv_unitType = "RaynorLab";
                }
                else {
                }
            }
            else {
                autoCC061965_val = PlayerCommander(gv_pLAYER_02_USER);
                if (autoCC061965_val == "Artanis") {
                    lv_userType = "ArtanisThatWontHappen";
                    lv_unitType = "ArtanisVoid";
                }
                else if (autoCC061965_val == "Kerrigan") {
                    lv_userType = "KerriganThatWontHappen";
                    lv_unitType = "KerriganVoid";
                }
                else if (autoCC061965_val == "Raynor") {
                    lv_userType = "RaynorThatWontHappen";
                    lv_unitType = "RaynorLab";
                }
                else {
                }
            }
            lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
            Wait(2.0, c_timeGame);
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        }
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyfightsStonelotQ_Init () {
    gt_TransmissionEnemyfightsStonelotQ = TriggerCreate("gt_TransmissionEnemyfightsStonelotQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp Conduit damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpConduitdamagedQ_Func (bool testConds, bool runActions) {
    string auto1DE67C67_val;
    string autoE39E86AC_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8051", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            autoE39E86AC_val = PlayerCommander(gv_pLAYER_01_USER);
            if (autoE39E86AC_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoE39E86AC_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (autoE39E86AC_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            auto1DE67C67_val = PlayerCommander(gv_pLAYER_02_USER);
            if (auto1DE67C67_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto1DE67C67_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (auto1DE67C67_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_TransmissionWarpConduitdamaged50Q, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpConduitdamagedQ_Init () {
    gt_TransmissionWarpConduitdamagedQ = TriggerCreate("gt_TransmissionWarpConduitdamagedQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionWarpConduitdamagedQ, UnitRefFromUnit(UnitFromId(1314688197)), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp Conduit damaged 50% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpConduitdamaged50Q_Func (bool testConds, bool runActions) {
    string autoDED011C2_val;
    string autoBE0AAC5C_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8052", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            autoBE0AAC5C_val = PlayerCommander(gv_pLAYER_01_USER);
            if (autoBE0AAC5C_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoBE0AAC5C_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (autoBE0AAC5C_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            autoDED011C2_val = PlayerCommander(gv_pLAYER_02_USER);
            if (autoDED011C2_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoDED011C2_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (autoDED011C2_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_TransmissionWarpConduitdamaged25Q, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpConduitdamaged50Q_Init () {
    gt_TransmissionWarpConduitdamaged50Q = TriggerCreate("gt_TransmissionWarpConduitdamaged50Q_Func");
    TriggerEnable(gt_TransmissionWarpConduitdamaged50Q, false);
    TriggerAddEventUnitDamaged(gt_TransmissionWarpConduitdamaged50Q, UnitRefFromUnit(UnitFromId(1314688197)), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp Conduit damaged 25% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpConduitdamaged25Q_Func (bool testConds, bool runActions) {
    string autoC8306FD0_val;
    string auto0A379601_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 25.0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8053", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 9)) {
        if ((RandomInt(1, 2) == 1)) {
            auto0A379601_val = PlayerCommander(gv_pLAYER_01_USER);
            if (auto0A379601_val == "Artanis") {
                lv_userType = "ArtanisThatWontHappen";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto0A379601_val == "Kerrigan") {
                lv_userType = "KerriganThatWontHappen";
                lv_unitType = "KerriganVoid";
            }
            else if (auto0A379601_val == "Raynor") {
                lv_userType = "RaynorThatWontHappen";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            autoC8306FD0_val = PlayerCommander(gv_pLAYER_02_USER);
            if (autoC8306FD0_val == "Artanis") {
                lv_userType = "ArtanisThatWontHappen";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoC8306FD0_val == "Kerrigan") {
                lv_userType = "KerriganThatWontHappen";
                lv_unitType = "KerriganVoid";
            }
            else if (autoC8306FD0_val == "Raynor") {
                lv_userType = "RaynorThatWontHappen";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_TransmissionWarpConduitdamaged10Q, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpConduitdamaged25Q_Init () {
    gt_TransmissionWarpConduitdamaged25Q = TriggerCreate("gt_TransmissionWarpConduitdamaged25Q_Func");
    TriggerEnable(gt_TransmissionWarpConduitdamaged25Q, false);
    TriggerAddEventUnitDamaged(gt_TransmissionWarpConduitdamaged25Q, UnitRefFromUnit(UnitFromId(1314688197)), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp Conduit damaged 10% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpConduitdamaged10Q_Func (bool testConds, bool runActions) {
    string auto1088CD1B_val;
    string auto4AA6A43B_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8054", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 8)) {
        if ((RandomInt(1, 2) == 1)) {
            auto4AA6A43B_val = PlayerCommander(gv_pLAYER_01_USER);
            if (auto4AA6A43B_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto4AA6A43B_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (auto4AA6A43B_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            auto1088CD1B_val = PlayerCommander(gv_pLAYER_02_USER);
            if (auto1088CD1B_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto1088CD1B_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (auto1088CD1B_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_TransmissionWarpConduitdamaged5Q, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpConduitdamaged10Q_Init () {
    gt_TransmissionWarpConduitdamaged10Q = TriggerCreate("gt_TransmissionWarpConduitdamaged10Q_Func");
    TriggerEnable(gt_TransmissionWarpConduitdamaged10Q, false);
    TriggerAddEventUnitDamaged(gt_TransmissionWarpConduitdamaged10Q, UnitRefFromUnit(UnitFromId(1314688197)), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Warp Conduit damaged 5% Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionWarpConduitdamaged5Q_Func (bool testConds, bool runActions) {
    string auto5D9D7410_val;
    string auto0AA789CC_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 5.0))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8055", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            auto0AA789CC_val = PlayerCommander(gv_pLAYER_01_USER);
            if (auto0AA789CC_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto0AA789CC_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (auto0AA789CC_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            auto5D9D7410_val = PlayerCommander(gv_pLAYER_02_USER);
            if (auto5D9D7410_val == "Artanis") {
                lv_userType = "ArtanisDefendProgress";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto5D9D7410_val == "Kerrigan") {
                lv_userType = "KerriganDefendProgress";
                lv_unitType = "KerriganVoid";
            }
            else if (auto5D9D7410_val == "Raynor") {
                lv_userType = "RaynorDefendProgress";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionWarpConduitdamaged5Q_Init () {
    gt_TransmissionWarpConduitdamaged5Q = TriggerCreate("gt_TransmissionWarpConduitdamaged5Q_Func");
    TriggerEnable(gt_TransmissionWarpConduitdamaged5Q, false);
    TriggerAddEventUnitDamaged(gt_TransmissionWarpConduitdamaged5Q, UnitRefFromUnit(UnitFromId(1314688197)), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Appears Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherAppearsQ_Func (bool testConds, bool runActions) {
    string autoE29A60A4_val;
    string auto19BDF9B1_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8061", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 10) > 7)) {
        if ((RandomInt(1, 2) == 1)) {
            auto19BDF9B1_val = PlayerCommander(gv_pLAYER_01_USER);
            if (auto19BDF9B1_val == "Artanis") {
                lv_userType = "ArtanisKillThrasher";
                lv_unitType = "ArtanisVoid";
            }
            else if (auto19BDF9B1_val == "Kerrigan") {
                lv_userType = "KerriganKillThrasher";
                lv_unitType = "KerriganVoid";
            }
            else if (auto19BDF9B1_val == "Raynor") {
                lv_userType = "RaynorKillThrasher";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            autoE29A60A4_val = PlayerCommander(gv_pLAYER_02_USER);
            if (autoE29A60A4_val == "Artanis") {
                lv_userType = "ArtanisKillThrasher";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoE29A60A4_val == "Kerrigan") {
                lv_userType = "KerriganKillThrasher";
                lv_unitType = "KerriganVoid";
            }
            else if (autoE29A60A4_val == "Raynor") {
                lv_userType = "RaynorKillThrasher";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerEnable(gt_TransmissionVoidThrasherAttackingQ, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherAppearsQ_Init () {
    gt_TransmissionVoidThrasherAppearsQ = TriggerCreate("gt_TransmissionVoidThrasherAppearsQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherAttackingQ_Func (bool testConds, bool runActions) {
    int auto04C84541_val;
    string autoD433A118_val;
    string autoF9A240DD_val;
    // Variable Declarations
    soundlink lv_sound;
    int lv_line;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_thrasherUnit) == false)) {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_transmissionVoidThrasherAttackingLoop == 3)) {
        lv_line = RandomInt(1, 3);
    }
    else {
        gv_transmissionVoidThrasherAttackingLoop += 1;
        lv_line = gv_transmissionVoidThrasherAttackingLoop;
    }
    auto04C84541_val = RandomInt(1, 3);
    if (auto04C84541_val == 1) {
        lv_sound = SoundLink("acObj_Krythkal_8062", -1);
    }
    else if (auto04C84541_val == 2) {
        lv_sound = SoundLink("acObj_Krythkal_8063", -1);
    }
    else if (auto04C84541_val == 3) {
        lv_sound = SoundLink("acObj_Krythkal_8064", -1);
    }
    else {
    }
    if ((RandomInt(1, 10) > 9)) {
        if ((RandomInt(1, 2) == 1)) {
            autoF9A240DD_val = PlayerCommander(gv_pLAYER_01_USER);
            if (autoF9A240DD_val == "Artanis") {
                lv_userType = "ArtanisKillThrasher";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoF9A240DD_val == "Kerrigan") {
                lv_userType = "KerriganKillThrasher";
                lv_unitType = "KerriganVoid";
            }
            else if (autoF9A240DD_val == "Raynor") {
                lv_userType = "RaynorKillThrasher";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        else {
            autoD433A118_val = PlayerCommander(gv_pLAYER_02_USER);
            if (autoD433A118_val == "Artanis") {
                lv_userType = "ArtanisKillThrasher";
                lv_unitType = "ArtanisVoid";
            }
            else if (autoD433A118_val == "Kerrigan") {
                lv_userType = "KerriganKillThrasher";
                lv_unitType = "KerriganVoid";
            }
            else if (autoD433A118_val == "Raynor") {
                lv_userType = "RaynorKillThrasher";
                lv_unitType = "RaynorLab";
            }
            else {
            }
        }
        lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(50.0, c_timeGame);
    TriggerEnable(gt_TransmissionVoidThrasherAttackingQ, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherAttackingQ_Init () {
    gt_TransmissionVoidThrasherAttackingQ = TriggerCreate("gt_TransmissionVoidThrasherAttackingQ_Func");
    TriggerEnable(gt_TransmissionVoidThrasherAttackingQ, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Death Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherDeathQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8065", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherDeathQ_Init () {
    gt_TransmissionVoidThrasherDeathQ = TriggerCreate("gt_TransmissionVoidThrasherDeathQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Player attacks base Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPlayerattacksbaseQ_Func (bool testConds, bool runActions) {
    int auto1ACE0F91_val;
    // Variable Declarations
    soundlink lv_sound;
    int lv_line;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!(((RegionContainsPoint(RegionFromId(8), CameraGetTarget(EventPlayer())) == true) || (RegionContainsPoint(RegionFromId(1), CameraGetTarget(EventPlayer())) == true)))) {
            return false;
        }
        if (!(((UnitGroupHasUnit(gv_roadGroupEnemies, EventUnit()) == true) || (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(8)) == true) || (UnitGetOwner(EventUnit()) == gv_pLAYER_05_INVADER)))) {
            return false;
        }
        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_USER)))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_transmissionVoidThrasherAttackingLoop == 3)) {
        lv_line = RandomInt(1, 3);
    }
    else {
        gv_transmissionPlayerattacksbaseloop += 1;
        lv_line = gv_transmissionVoidThrasherAttackingLoop;
    }
    auto1ACE0F91_val = RandomInt(1, 3);
    if (auto1ACE0F91_val == 1) {
        lv_sound = SoundLink("acObj_Krythkal_8066", -1);
    }
    else if (auto1ACE0F91_val == 2) {
        lv_sound = SoundLink("acObj_Krythkal_8067", -1);
    }
    else if (auto1ACE0F91_val == 3) {
        lv_sound = SoundLink("acObj_Krythkal_8068", -1);
    }
    else {
    }
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 4.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionPlayerattacksbaseQ_Init () {
    gt_TransmissionPlayerattacksbaseQ = TriggerCreate("gt_TransmissionPlayerattacksbaseQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionPlayerattacksbaseQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Side objective activates Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSideobjectiveactivatesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8081", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionSideobjectiveactivatesQ_Init () {
    gt_TransmissionSideobjectiveactivatesQ = TriggerCreate("gt_TransmissionSideobjectiveactivatesQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Side objective reminder 1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSideobjectivereminder1Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8082", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionSideobjectivereminder1Q_Init () {
    gt_TransmissionSideobjectivereminder1Q = TriggerCreate("gt_TransmissionSideobjectivereminder1Q_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Side objective reminder 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSideobjectivereminder2Q_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8083", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionSideobjectivereminder2Q_Init () {
    gt_TransmissionSideobjectivereminder2Q = TriggerCreate("gt_TransmissionSideobjectivereminder2Q_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Side objective Worker dies Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSideobjectiveWorkerdiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "CarryKhaydarinCrystal") == true))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) != "Alysaar"))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) != "AlysaarGround"))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8086", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionSideobjectiveWorkerdiesQ_Init () {
    gt_TransmissionSideobjectiveWorkerdiesQ = TriggerCreate("gt_TransmissionSideobjectiveWorkerdiesQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionSideobjectiveWorkerdiesQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Side objective completed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSideobjectivecompletedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8084", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionSideobjectivecompletedQ_Init () {
    gt_TransmissionSideobjectivecompletedQ = TriggerCreate("gt_TransmissionSideobjectivecompletedQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Side objective failed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSideobjectivefailedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8085", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionSideobjectivefailedQ_Init () {
    gt_TransmissionSideobjectivefailedQ = TriggerCreate("gt_TransmissionSideobjectivefailedQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Victory 1
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVictory1_Func (bool testConds, bool runActions) {
    string auto92C36D09_val;
    string auto5EFB19A4_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8011", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 4.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 2) == 1)) {
        auto5EFB19A4_val = PlayerCommander(gv_pLAYER_01_USER);
        if (auto5EFB19A4_val == "Artanis") {
            lv_userType = "ArtanisDefendCompleted";
            lv_unitType = "ArtanisVoid";
        }
        else if (auto5EFB19A4_val == "Kerrigan") {
            lv_userType = "KerriganDefendCompleted";
            lv_unitType = "KerriganVoid";
        }
        else if (auto5EFB19A4_val == "Raynor") {
            lv_userType = "RaynorDefendCompleted";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    else {
        auto92C36D09_val = PlayerCommander(gv_pLAYER_02_USER);
        if (auto92C36D09_val == "Artanis") {
            lv_userType = "ArtanisDefendCompleted";
            lv_unitType = "ArtanisVoid";
        }
        else if (auto92C36D09_val == "Kerrigan") {
            lv_userType = "KerriganDefendCompleted";
            lv_unitType = "KerriganVoid";
        }
        else if (auto92C36D09_val == "Raynor") {
            lv_userType = "RaynorDefendCompleted";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVictory1_Init () {
    gt_TransmissionVictory1 = TriggerCreate("gt_TransmissionVictory1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Victory 2 (Raynor Variant)
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVictory2RaynorVariant_Func (bool testConds, bool runActions) {
    string autoCD7B46FF_val;
    string auto91D37F1C_val;
    // Variable Declarations
    soundlink lv_sound;
    string lv_userType;
    string lv_unitType;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_userType = "ArtanisSecureObjective";
    lv_unitType = "ArtanisVoid";
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8012", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 4.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((RandomInt(1, 2) == 1)) {
        auto91D37F1C_val = PlayerCommander(gv_pLAYER_01_USER);
        if (auto91D37F1C_val == "Artanis") {
            lv_userType = "ArtanisDefendCompleted";
            lv_unitType = "ArtanisVoid";
        }
        else if (auto91D37F1C_val == "Kerrigan") {
            lv_userType = "KerriganDefendAlmostDone";
            lv_unitType = "KerriganVoid";
        }
        else if (auto91D37F1C_val == "Raynor") {
            lv_userType = "RaynorDefendAlmostDone";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    else {
        autoCD7B46FF_val = PlayerCommander(gv_pLAYER_02_USER);
        if (autoCD7B46FF_val == "Artanis") {
            lv_userType = "ArtanisDefendCompleted";
            lv_unitType = "ArtanisVoid";
        }
        else if (autoCD7B46FF_val == "Kerrigan") {
            lv_userType = "KerriganDefendAlmostDone";
            lv_unitType = "KerriganVoid";
        }
        else if (autoCD7B46FF_val == "Raynor") {
            lv_userType = "RaynorDefendAlmostDone";
            lv_unitType = "RaynorLab";
        }
        else {
        }
    }
    lv_sound = SoundLink(UserDataGetGameLink("LMResponses", lv_userType, "Sound", RandomInt(1, UserDataGetInt("LMResponses", lv_userType, "Sounds", 1))), c_soundIndexAny);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType(lv_unitType, false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVictory2RaynorVariant_Init () {
    gt_TransmissionVictory2RaynorVariant = TriggerCreate("gt_TransmissionVictory2RaynorVariant_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Defeat Enemy reaches first
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDefeatEnemyreachesfirst_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8016", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 4.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionDefeatEnemyreachesfirst_Init () {
    gt_TransmissionDefeatEnemyreachesfirst = TriggerCreate("gt_TransmissionDefeatEnemyreachesfirst_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Defeat Warp Conduit destroyed before reaching
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDefeatWarpConduitdestroyedbeforereaching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8017", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 4.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionDefeatWarpConduitdestroyedbeforereaching_Init () {
    gt_TransmissionDefeatWarpConduitdestroyedbeforereaching = TriggerCreate("gt_TransmissionDefeatWarpConduitdestroyedbeforereaching_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Defeat Warp Conduit destroyed after reaching
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDefeatWarpConduitdestroyedafterreaching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8018", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 4.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionDefeatWarpConduitdestroyedafterreaching_Init () {
    gt_TransmissionDefeatWarpConduitdestroyedafterreaching = TriggerCreate("gt_TransmissionDefeatWarpConduitdestroyedafterreaching_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Easter Egg T Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEasterEggTQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8090", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterRight), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEasterEggTQ_Init () {
    gt_TransmissionEasterEggTQ = TriggerCreate("gt_TransmissionEasterEggTQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Easter Egg P Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEasterEggPQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8091", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterRight), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEasterEggPQ_Init () {
    gt_TransmissionEasterEggPQ = TriggerCreate("gt_TransmissionEasterEggPQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Easter Egg Z Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEasterEggZQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    lv_sound = SoundLink("acObj_Krythkal_8092", -1);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("KrythkalPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterRight), "", "Talk", lv_sound, StringExternal(CatalogFieldValueGet(c_gameCatalogCharacter, "Krythkal", "Name", c_playerAny)), SoundSubtitleText(lv_sound), (SoundLengthSync(lv_sound) + 2.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEasterEggZQ_Init () {
    gt_TransmissionEasterEggZQ = TriggerCreate("gt_TransmissionEasterEggZQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Warp Conduit Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatWarpConduitDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);

    TriggerExecute(gt_ObjectiveTheWarpConduitmustsurviveFailed, true, false);
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeFailed, true, false);
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        TriggerExecute(gt_TransmissionDefeatWarpConduitdestroyedbeforereaching, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionDefeatWarpConduitdestroyedafterreaching, true, false);
    }



    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);

    if (gf_bonusObjectiveTargetSum()  < gv_bonusObjectiveTarget) {
        TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsFailed, true, false);
    }
    Wait(2.0, c_timeReal);
    if (((gv_automatonsCounterDialog[1][0] != c_invalidDialogId) || (gv_automatonsCounterDialog[2][0] != c_invalidDialogId))) {
        if ((gv_automatonsCounterDialog[1][0] != c_invalidDialogId)) {
            DialogDestroy(gv_automatonsCounterDialog[1][0]);
        }
        if ((gv_automatonsCounterDialog[2][0] != c_invalidDialogId)) {
            DialogDestroy(gv_automatonsCounterDialog[2][0]);
        }
    }

    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FE836221"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
   

    libCOMI_gf_MoveCameraForAllPlayers(lv_cameraTarget, 1.5);

    while (!((TriggerActiveCount(gt_TransmissionDefeatWarpConduitdestroyedafterreaching) == 0) && (TriggerActiveCount(gt_TransmissionDefeatWarpConduitdestroyedbeforereaching) == 0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);



    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatWarpConduitDead_Init () {
    gt_DefeatWarpConduitDead = TriggerCreate("gt_DefeatWarpConduitDead_Func");
    TriggerAddEventUnitDied(gt_DefeatWarpConduitDead, UnitRefFromUnit(UnitFromId(1314688197)));
}



int gf_bonusObjectiveTargetSum (){

    playergroup xxx_player_group;
    int xxx_player_current;
    int xxx_player_sum;

    xxx_player_sum = 0;
    xxx_player_group = libCOMI_gf_GetAlliedCommandersPlayers();
    xxx_player_current = -1;
    while (true) {
        xxx_player_current = PlayerGroupNextPlayer(xxx_player_group, xxx_player_current);
        if (xxx_player_current < 0) { break; }
        xxx_player_sum += PlayerGetPropertyInt(xxx_player_current, c_playerPropCustom);
    }
    return  xxx_player_sum;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat enemy reached the wall
//--------------------------------------------------------------------------------------------------
bool gt_Defeatenemyreachedthewall_Func (bool testConds, bool runActions) {
    int autoA4D1E06B_ae;
    int autoA4D1E06B_ai;
    int autoF6B46E50_ae;
    int autoF6B46E50_ai;
    fixed autoC292EA93_ae;
    fixed autoC292EA93_ai;
    // Variable Declarations
    int lv_i;
    int lv_j;
    fixed lv_loop;


    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_DEFENDERS))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupEnemies, c_unitCountAlive) == 0))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeFailed, true, false);
    TriggerExecute(gt_TransmissionDefeatEnemyreachesfirst, true, false);


    //TODO. CHECK ALL COMMANDERS PLAYERS
    if (gf_bonusObjectiveTargetSum() < gv_bonusObjectiveTarget) {
        TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsFailed, true, false);
    }



    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);

    autoA4D1E06B_ae = 2;
    autoA4D1E06B_ai = 1;
    lv_i = 1;
    for ( ; ( (autoA4D1E06B_ai >= 0 && lv_i <= autoA4D1E06B_ae) || (autoA4D1E06B_ai <= 0 && lv_i >= autoA4D1E06B_ae) ) ; lv_i += autoA4D1E06B_ai ) {
        autoF6B46E50_ae = 2;
        autoF6B46E50_ai = 1;
        lv_j = 1;
        for ( ; ( (autoF6B46E50_ai >= 0 && lv_j <= autoF6B46E50_ae) || (autoF6B46E50_ai <= 0 && lv_j >= autoF6B46E50_ae) ) ; lv_j += autoF6B46E50_ai ) {
            if ((gv_automatonsCounterDialog[lv_j][lv_i] != c_invalidDialogId)) {
                DialogDestroy(gv_automatonsCounterDialog[lv_j][lv_i]);
            }
        }
    }
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/10C0668D"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(RegionGetCenter(RegionFromId(7)), 1.5);

    ActorSend(ActorFromDoodad(DoodadFromId(233984366)), "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
    Wait(2.0, c_timeGame);
    autoC292EA93_ae = 0.0;
    autoC292EA93_ai = -0.05;
    lv_loop = 1.0;
    for ( ; ( (autoC292EA93_ai >= 0 && lv_loop <= autoC292EA93_ae) || (autoC292EA93_ai <= 0 && lv_loop >= autoC292EA93_ae) ) ; lv_loop += autoC292EA93_ai ) {
        ActorSend(ActorFromDoodad(DoodadFromId(1496805824)), (("SetOpacity " + FixedToString(lv_loop, c_fixedPrecisionAny))));
        Wait(0.0, c_timeGame);
    }
    UnitGroupLoopBegin(gv_alysaars);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(252351503)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1639680133)), c_orderQueueAddToEnd);
        Wait(0.3, c_timeGame);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((TriggerActiveCount(gt_TransmissionDefeatEnemyreachesfirst) == 0)) {
            break;
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueReplace);
        }
        Wait(0.3, c_timeGame);
    }
    UnitGroupLoopEnd();
    while (!((TriggerActiveCount(gt_TransmissionDefeatEnemyreachesfirst) == 0))) {
        Wait(1.0, c_timeGame);
    }

    libCOMI_gf_AfterFanfare(c_gameOverDefeat);

    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeatenemyreachedthewall_Init () {
    gt_Defeatenemyreachedthewall = TriggerCreate("gt_Defeatenemyreachedthewall_Func");
    TriggerAddEventUnitDied(gt_Defeatenemyreachedthewall, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) == 0))) {
            return false;
        }
        if (!((UnitGroupCount(gv_alysaars, c_unitCountAlive) == 0))) {
            return false;
        }
        if (!((UnitIsAlive(gv_warpConduit) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;
    soundlink lv_sound;
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);







    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/DBBAA2D7"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_victoryCompletePan, 2.0);

    lv_random = RandomInt(1, 2);
    if ((lv_random == 1)) {
        TriggerExecute(gt_TransmissionVictory1, true, false);
    }
    else {
        TriggerExecute(gt_TransmissionVictory2RaynorVariant, true, false);
    }
    while (!((TriggerActiveCount(gt_TransmissionVictory1) == 0) && (TriggerActiveCount(gt_TransmissionVictory2RaynorVariant) == 0))) {
        Wait(1.0, c_timeGame);
    }

    libCOMI_gf_AfterFanfare(c_gameOverVictory);



    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach the wall of knowledge - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachthewallofknowledgeCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_LosingMemories_Primary01");
    gv_objectiveReachthewallofknowledge = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    ObjectiveSetPrimary(ObjectiveLastCreated(), true);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachthewallofknowledgeCreate_Init () {
    gt_ObjectiveReachthewallofknowledgeCreate = TriggerCreate("gt_ObjectiveReachthewallofknowledgeCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach the wall of knowledge - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachthewallofknowledgeComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeCreate, true, false);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_objectiveReachthewallofknowledge, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachthewallofknowledgeComplete_Init () {
    gt_ObjectiveReachthewallofknowledgeComplete = TriggerCreate("gt_ObjectiveReachthewallofknowledgeComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach the wall of knowledge - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachthewallofknowledgeUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeCreate, true, false);
    if ((UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive) > 0)) {
        TextExpressionSetToken("Param/Expression/C6226ECA", "FORCES_LEFT", FormatNumber(UnitGroupCount(gv_roadGroupPlayers, c_unitCountAlive)));
        ObjectiveSetName(gv_objectiveReachthewallofknowledge, TextExpressionAssemble("Param/Expression/C6226ECA"));
    }
    else {
        TextExpressionSetToken("Param/Expression/1B57D8AA", "ALYSAARS_LEFT", FormatNumber(UnitGroupCount(gv_alysaars, c_unitCountAlive)));
        ObjectiveSetName(gv_objectiveReachthewallofknowledge, TextExpressionAssemble("Param/Expression/1B57D8AA"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachthewallofknowledgeUpdate_Init () {
    gt_ObjectiveReachthewallofknowledgeUpdate = TriggerCreate("gt_ObjectiveReachthewallofknowledgeUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Reach the wall of knowledge - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachthewallofknowledgeFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveReachthewallofknowledgeCreate, true, false);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_objectiveReachthewallofknowledge, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachthewallofknowledgeFailed_Init () {
    gt_ObjectiveReachthewallofknowledgeFailed = TriggerCreate("gt_ObjectiveReachthewallofknowledgeFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Warp Conduit must survive - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheWarpConduitmustsurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_LosingMemories_Primary02");
    gv_objectiveTheWarpConduitmustsurvive = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    ObjectiveSetPrimary(ObjectiveLastCreated(), true);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveTheWarpConduitmustsurviveUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheWarpConduitmustsurviveCreate_Init () {
    gt_ObjectiveTheWarpConduitmustsurviveCreate = TriggerCreate("gt_ObjectiveTheWarpConduitmustsurviveCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Warp Conduit must survive - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheWarpConduitmustsurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveTheWarpConduitmustsurviveCreate, true, false);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_objectiveTheWarpConduitmustsurvive, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheWarpConduitmustsurviveComplete_Init () {
    gt_ObjectiveTheWarpConduitmustsurviveComplete = TriggerCreate("gt_ObjectiveTheWarpConduitmustsurviveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Warp Conduit must survive - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheWarpConduitmustsurviveUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_color;
    // Variable Initialization
    lv_color = "";
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveTheWarpConduitmustsurviveCreate, true, false);
    if (((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent) / UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropNormal)) > 0.65)) {
        lv_color = libNtve_gf_ConvertColorToString((Color(22*100/255,128*100/255,0)));
    }
    else if (((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent) / UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropNormal)) > 0.3)) {
        lv_color = libNtve_gf_ConvertColorToString((Color(150*100/255,150*100/255,30*100/255)));
    }
    else if (true) {
        lv_color = libNtve_gf_ConvertColorToString((Color(100.00, 0.00, 0.00)));
    }
    if ((UnitIsAlive(gv_warpConduit) == true)) {
        TextExpressionSetToken("Param/Expression/69F3BA7A", "COLOR", StringToText(lv_color));
        TextExpressionSetToken("Param/Expression/69F3BA7A", "REMAINING_HP", IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent))));
        ObjectiveSetName(gv_objectiveTheWarpConduitmustsurvive, TextExpressionAssemble("Param/Expression/69F3BA7A"));
    }
    else {
        ObjectiveSetName(gv_objectiveTheWarpConduitmustsurvive, TextExpressionAssemble("Param/Expression/DDB8AAC2"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheWarpConduitmustsurviveUpdate_Init () {
    gt_ObjectiveTheWarpConduitmustsurviveUpdate = TriggerCreate("gt_ObjectiveTheWarpConduitmustsurviveUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Warp Conduit must survive - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheWarpConduitmustsurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveTheWarpConduitmustsurviveCreate, true, false);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_objectiveTheWarpConduitmustsurvive, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheWarpConduitmustsurviveFailed_Init () {
    gt_ObjectiveTheWarpConduitmustsurviveFailed = TriggerCreate("gt_ObjectiveTheWarpConduitmustsurviveFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Khaydarin Crystals - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherKhaydarinCrystalsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_LosingMemories_Bonus");
    gv_objectiveGatherKhaydarinCrystals = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 6);
    ObjectiveSetPrimary(ObjectiveLastCreated(), false);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveBonusDiscovered", -1), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherKhaydarinCrystalsCreate_Init () {
    gt_ObjectiveGatherKhaydarinCrystalsCreate = TriggerCreate("gt_ObjectiveGatherKhaydarinCrystalsCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Khaydarin Crystals - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherKhaydarinCrystalsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsCreate, true, false);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_objectiveGatherKhaydarinCrystals, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherKhaydarinCrystalsComplete_Init () {
    gt_ObjectiveGatherKhaydarinCrystalsComplete = TriggerCreate("gt_ObjectiveGatherKhaydarinCrystalsComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Khaydarin Crystals - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherKhaydarinCrystalsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_color;
    int lv_remainingTime;
    text lv_textTime;
    // Variable Initialization
    lv_color = "";
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsCreate, true, false);
    lv_remainingTime = FixedToInt(TimerGetRemaining(gv_bonusObjectiveDurationTimer));
    TextExpressionSetToken("Param/Expression/9050B6F4", "Timer", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_remainingTime));
    lv_textTime = TextExpressionAssemble("Param/Expression/9050B6F4");
    if (gf_bonusObjectiveTargetSum()  >= gv_bonusObjectiveTarget) {
        TextExpressionSetToken("Param/Expression/8A6BD339", "GATHERED_CRYSTALS", IntToText((PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropCustom) + PlayerGetPropertyInt(gv_pLAYER_02_USER, c_playerPropCustom))));
        ObjectiveSetName(gv_objectiveGatherKhaydarinCrystals, TextExpressionAssemble("Param/Expression/8A6BD339"));
    }
    else {
        if (((TimerGetRemaining(gv_bonusObjectiveDurationTimer) / TimerGetDuration(gv_bonusObjectiveDurationTimer)) > 0.65)) {
            lv_color = libNtve_gf_ConvertColorToString((Color(22*100/255,128*100/255,0)));
        }
        else if (((TimerGetRemaining(gv_bonusObjectiveDurationTimer) / TimerGetDuration(gv_bonusObjectiveDurationTimer)) > 0.3)) {
            lv_color = libNtve_gf_ConvertColorToString((Color(150*100/255,150*100/255,30*100/255)));
        }
        else if (true) {
            lv_color = libNtve_gf_ConvertColorToString((Color(100.00, 0.00, 0.00)));
        }
        TextExpressionSetToken("Param/Expression/77C3A219", "MISSING_CRYSTALS", IntToText((gv_bonusObjectiveTarget - gf_bonusObjectiveTargetSum() )));
        TextExpressionSetToken("Param/Expression/77C3A219", "COLOR", StringToText(lv_color));
        TextExpressionSetToken("Param/Expression/77C3A219", "REMAINING_TIME", TextTimeFormat(StringToText("<min2/>:<sec2/>"), lv_remainingTime));
        ObjectiveSetName(gv_objectiveGatherKhaydarinCrystals, TextExpressionAssemble("Param/Expression/77C3A219"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherKhaydarinCrystalsUpdate_Init () {
    gt_ObjectiveGatherKhaydarinCrystalsUpdate = TriggerCreate("gt_ObjectiveGatherKhaydarinCrystalsUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Khaydarin Crystals - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherKhaydarinCrystalsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGatherKhaydarinCrystalsCreate, true, false);
    libCOMI_gf_PlaySoundCinematic(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_objectiveGatherKhaydarinCrystals, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherKhaydarinCrystalsFailed_Init () {
    gt_ObjectiveGatherKhaydarinCrystalsFailed = TriggerCreate("gt_ObjectiveGatherKhaydarinCrystalsFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartGame_Init();
    gt_IntroductionWallofKnowledgeQ_Init();
    gt_IntroductionRoadsQ_Init();
    gt_AlysaarsCreate_Init();
    gt_AlysaarsReacheffect_Init();
    gt_AlysaarsMakeReturn_Init();
    gt_AlysaarsFieldKill_Init();
    gt_AlysaarsMakeWarpOut_Init();
    gt_AutomatonsCounter_Init();
    gt_AutomatonsCounterEnemy_Init();
    gt_AutomatonsPingRoad_Init();
    gt_AutomatonsPingRoadEnemy_Init();
    gt_AutomatonsEnemysharevision_Init();
    gt_AutomatonsAlmostDone_Init();
    gt_AutomatonsActivateenemyStoneCenturion_Init();
    gt_AutomatonsPingedunitdies_Init();
    gt_BonusObjectiveActivate_Init();
    gt_BonusObjectivePingswhenreturning_Init();
    gt_BonusObjectivePingswhengathering_Init();
    gt_BonusObjectiveRemovefromgroup_Init();
    gt_BonusObjectiveReturniftheunitisinthezone_Init();
    gt_BonusObjectiveHelper_Init();
    gt_BonusObjectiveRemovePing_Init();
    gt_BonusObjectiveReturnanimation_Init();
    gt_BonusObjectiveUpdate_Init();
    gt_BonusObjectiveEnd_Init();
    gt_WarpConduitDamageResponse_Init();
    gt_EasterEggNotAllowed_Init();
    gt_EasterEggInit_Init();
    gt_EasterEggMoveblock_Init();
    gt_EasterEggEnd_Init();
    gt_EasterEggDeselectBlock_Init();
    gt_AIAttackWaveRunA_Init();
    gt_AIAttackWaveRunAFinal_Init();
    gt_AIAttackWave01325A_Init();
    gt_AIAttackWave0255A_Init();
    gt_AIAttackWave038A_Init();
    gt_AIAttackWave0411A_Init();
    gt_AIAttackWave0515A_Init();
    gt_AIAttackWave06185A_Init();
    gt_AIAttackWaveAfterClearance01A_Init();
    gt_AIAttackWaveAfterClearance02A_Init();
    gt_AIAttackWaveVoidThrasherWave_Init();
    gt_AIVoidThrasherAttackWave_Init();
    gt_AIVoidThrasherMissiles_Init();
    gt_AIVoidThrasherExtraBreathAttacks_Init();
    gt_AIInvadersStarthostilities_Init();
    gt_AIInvadersUnitRevive_Init();
    gt_AIInvadersGotoyourside_Init();
    gt_AIDefendersReturntotheline_Init();
    gt_TransmissionEnemyAttackingQ_Init();
    gt_TransmissionHybridDetectedQ_Init();
    gt_TransmissionIntroduction1_Init();
    gt_TransmissionIntroduction2_Init();
    gt_TransmissionIntroduction3_Init();
    gt_TransmissionIntroduction4_Init();
    gt_TransmissionStartfightingQ_Init();
    gt_TransmissionLevel1ClearedQ_Init();
    gt_TransmissionLevel2ClearedQ_Init();
    gt_TransmissionLastForcesHighlightQ_Init();
    gt_TransmissionStonelotEncounterQ_Init();
    gt_TransmissionAllautomatonskilledQ_Init();
    gt_TransmissionFirstAlysaarwarpsoutQ_Init();
    gt_TransmissionLastAlysaarQ_Init();
    gt_TransmissionEnemystartsfightingQ_Init();
    gt_TransmissionEnemybeatsfirstgroupQ_Init();
    gt_TransmissionEnemyreacheshighgroundQ_Init();
    gt_TransmissionEnemyfightsStonelotQ_Init();
    gt_TransmissionWarpConduitdamagedQ_Init();
    gt_TransmissionWarpConduitdamaged50Q_Init();
    gt_TransmissionWarpConduitdamaged25Q_Init();
    gt_TransmissionWarpConduitdamaged10Q_Init();
    gt_TransmissionWarpConduitdamaged5Q_Init();
    gt_TransmissionVoidThrasherAppearsQ_Init();
    gt_TransmissionVoidThrasherAttackingQ_Init();
    gt_TransmissionVoidThrasherDeathQ_Init();
    gt_TransmissionPlayerattacksbaseQ_Init();
    gt_TransmissionSideobjectiveactivatesQ_Init();
    gt_TransmissionSideobjectivereminder1Q_Init();
    gt_TransmissionSideobjectivereminder2Q_Init();
    gt_TransmissionSideobjectiveWorkerdiesQ_Init();
    gt_TransmissionSideobjectivecompletedQ_Init();
    gt_TransmissionSideobjectivefailedQ_Init();
    gt_TransmissionVictory1_Init();
    gt_TransmissionVictory2RaynorVariant_Init();
    gt_TransmissionDefeatEnemyreachesfirst_Init();
    gt_TransmissionDefeatWarpConduitdestroyedbeforereaching_Init();
    gt_TransmissionDefeatWarpConduitdestroyedafterreaching_Init();
    gt_TransmissionEasterEggTQ_Init();
    gt_TransmissionEasterEggPQ_Init();
    gt_TransmissionEasterEggZQ_Init();
    gt_DefeatWarpConduitDead_Init();
    gt_Defeatenemyreachedthewall_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_ObjectiveReachthewallofknowledgeCreate_Init();
    gt_ObjectiveReachthewallofknowledgeComplete_Init();
    gt_ObjectiveReachthewallofknowledgeUpdate_Init();
    gt_ObjectiveReachthewallofknowledgeFailed_Init();
    gt_ObjectiveTheWarpConduitmustsurviveCreate_Init();
    gt_ObjectiveTheWarpConduitmustsurviveComplete_Init();
    gt_ObjectiveTheWarpConduitmustsurviveUpdate_Init();
    gt_ObjectiveTheWarpConduitmustsurviveFailed_Init();
    gt_ObjectiveGatherKhaydarinCrystalsCreate_Init();
    gt_ObjectiveGatherKhaydarinCrystalsComplete_Init();
    gt_ObjectiveGatherKhaydarinCrystalsUpdate_Init();
    gt_ObjectiveGatherKhaydarinCrystalsFailed_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
