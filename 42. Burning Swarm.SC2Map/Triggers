<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="B3A4154F"/>
    </Root>
    <Element Type="CustomScript" Id="B3A4154F">
        <Identifier>Triggers</Identifier>
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated AI Script
            // 
            // AI Name: Hybrid Wave AI
            // 
            //==================================================================================================
            include &quot;TriggerLibs/natives&quot;
            include &quot;TriggerLibs/AI&quot;
            include &quot;TriggerLibs/Computer&quot;
            //--------------------------------------------------------------------------------------------------
            // Globals
            //--------------------------------------------------------------------------------------------------
            point[17] aiF917F4D7_defGather;
            string[17] aiF917F4D7_customData;
            wave[17] aiF917F4D7_lastWave;
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave1_enabled;
            wave[17] aiF917F4D7_wave1_lastWave;
            trigger aiF917F4D7_wave1_trigger = null;
            int aiF917F4D7_wave1_runPlayer;
            playergroup aiF917F4D7_wave1_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave1_enabled[init_i] = true;
                    aiF917F4D7_wave1_lastWave[init_i] = null;
                }
                aiF917F4D7_wave1_trigger = TriggerCreate(&quot;aiF917F4D7_wave1_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave1_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave1_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave1_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave1_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave1_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave1_runPlayer;
                playergroup target = aiF917F4D7_wave1_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave1_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave1_runPlayer = p;
                aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave2_enabled;
            wave[17] aiF917F4D7_wave2_lastWave;
            trigger aiF917F4D7_wave2_trigger = null;
            int aiF917F4D7_wave2_runPlayer;
            playergroup aiF917F4D7_wave2_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave2_enabled[init_i] = true;
                    aiF917F4D7_wave2_lastWave[init_i] = null;
                }
                aiF917F4D7_wave2_trigger = TriggerCreate(&quot;aiF917F4D7_wave2_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave2_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave2_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave2_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave2_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave2_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave2_runPlayer;
                playergroup target = aiF917F4D7_wave2_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave2_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave2_runPlayer = p;
                aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave3_enabled;
            wave[17] aiF917F4D7_wave3_lastWave;
            trigger aiF917F4D7_wave3_trigger = null;
            int aiF917F4D7_wave3_runPlayer;
            playergroup aiF917F4D7_wave3_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave3_enabled[init_i] = true;
                    aiF917F4D7_wave3_lastWave[init_i] = null;
                }
                aiF917F4D7_wave3_trigger = TriggerCreate(&quot;aiF917F4D7_wave3_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave3_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave3_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave3_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave3_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave3_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave3_runPlayer;
                playergroup target = aiF917F4D7_wave3_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave3_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave3_runPlayer = p;
                aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave4_enabled;
            wave[17] aiF917F4D7_wave4_lastWave;
            trigger aiF917F4D7_wave4_trigger = null;
            int aiF917F4D7_wave4_runPlayer;
            playergroup aiF917F4D7_wave4_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave4_enabled[init_i] = true;
                    aiF917F4D7_wave4_lastWave[init_i] = null;
                }
                aiF917F4D7_wave4_trigger = TriggerCreate(&quot;aiF917F4D7_wave4_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave4_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave4_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave4_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave4_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave4_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave4_runPlayer;
                playergroup target = aiF917F4D7_wave4_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave4_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave4_runPlayer = p;
                aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave5_enabled;
            wave[17] aiF917F4D7_wave5_lastWave;
            trigger aiF917F4D7_wave5_trigger = null;
            int aiF917F4D7_wave5_runPlayer;
            playergroup aiF917F4D7_wave5_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave5_enabled[init_i] = true;
                    aiF917F4D7_wave5_lastWave[init_i] = null;
                }
                aiF917F4D7_wave5_trigger = TriggerCreate(&quot;aiF917F4D7_wave5_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave5_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave5_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave5_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave5_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave5_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave5_runPlayer;
                playergroup target = aiF917F4D7_wave5_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave5_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave5_runPlayer = p;
                aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave6_enabled;
            wave[17] aiF917F4D7_wave6_lastWave;
            trigger aiF917F4D7_wave6_trigger = null;
            int aiF917F4D7_wave6_runPlayer;
            playergroup aiF917F4D7_wave6_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave6_enabled[init_i] = true;
                    aiF917F4D7_wave6_lastWave[init_i] = null;
                }
                aiF917F4D7_wave6_trigger = TriggerCreate(&quot;aiF917F4D7_wave6_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave6_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave6_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave6_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave6_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave6_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave6_runPlayer;
                playergroup target = aiF917F4D7_wave6_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave6_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave6_runPlayer = p;
                aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave7_enabled;
            wave[17] aiF917F4D7_wave7_lastWave;
            trigger aiF917F4D7_wave7_trigger = null;
            int aiF917F4D7_wave7_runPlayer;
            playergroup aiF917F4D7_wave7_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave7_enabled[init_i] = true;
                    aiF917F4D7_wave7_lastWave[init_i] = null;
                }
                aiF917F4D7_wave7_trigger = TriggerCreate(&quot;aiF917F4D7_wave7_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave7_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave7_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave7_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave7_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave7_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave7_runPlayer;
                playergroup target = aiF917F4D7_wave7_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave7_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave7_runPlayer = p;
                aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Wrappers
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave_enable (int w, int p, bool val) {
                if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
                if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
                if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
                if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
                if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
                if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
                if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave_isEnabled (int w, int p) {
                if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
                if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
                if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
                if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
                if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
                if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
                if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave_createdWave (int w, int p) {
                if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
                if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
                if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
                if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
                if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
                if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
                if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
                if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
                if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
                if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
                if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
                if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
                if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
                if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Sequence
            //--------------------------------------------------------------------------------------------------
            trigger aiF917F4D7_waves_trigger = null;
            int aiF917F4D7_waves_runPlayer;
            playergroup aiF917F4D7_waves_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_init () {
                aiF917F4D7_waves_trigger = TriggerCreate(&quot;aiF917F4D7_waves_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_waves_runFunc (bool c, bool a) {
                int p = aiF917F4D7_waves_runPlayer;
                playergroup target = aiF917F4D7_waves_runTarget;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                aiF917F4D7_wave1_run(p, target, true);
                aiF917F4D7_wave2_run(p, target, true);
                aiF917F4D7_wave3_run(p, target, true);
                aiF917F4D7_wave4_run(p, target, true);
                aiF917F4D7_wave5_run(p, target, true);
                aiF917F4D7_wave6_run(p, target, true);
                aiF917F4D7_wave7_run(p, target, true);
                while (true) {
                    aiF917F4D7_wave7_run(p, target, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_run (int p, playergroup target) {
                aiF917F4D7_waves_runPlayer = p;
                aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_waves_trigger, false, false);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave1_enable(p, val);
                aiF917F4D7_wave2_enable(p, val);
                aiF917F4D7_wave3_enable(p, val);
                aiF917F4D7_wave4_enable(p, val);
                aiF917F4D7_wave5_enable(p, val);
                aiF917F4D7_wave6_enable(p, val);
                aiF917F4D7_wave7_enable(p, val);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_stop () {
                TriggerStop(aiF917F4D7_waves_trigger);
                TriggerStop(aiF917F4D7_wave1_trigger);
                TriggerStop(aiF917F4D7_wave2_trigger);
                TriggerStop(aiF917F4D7_wave3_trigger);
                TriggerStop(aiF917F4D7_wave4_trigger);
                TriggerStop(aiF917F4D7_wave5_trigger);
                TriggerStop(aiF917F4D7_wave6_trigger);
                TriggerStop(aiF917F4D7_wave7_trigger);
            }
            //--------------------------------------------------------------------------------------------------
            // Configuration
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_defGather[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            string aiF917F4D7_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_customData[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            // Start
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_initialized = false;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_start (int p) {
                int init_i;
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (!aiF917F4D7_initialized) {
                    aiF917F4D7_wave1_init();
                    aiF917F4D7_wave2_init();
                    aiF917F4D7_wave3_init();
                    aiF917F4D7_wave4_init();
                    aiF917F4D7_wave5_init();
                    aiF917F4D7_wave6_init();
                    aiF917F4D7_wave7_init();
                    aiF917F4D7_waves_init();
                    for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                        aiF917F4D7_defGather[init_i] = PointFromId(0);
                    }
                    aiF917F4D7_initialized = true;
                }
                AICampaignStart(p);
            }
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   RTC2017 - Burning Swarm
            // 
            //==================================================================================================
            include &quot;TriggerLibs/NativeLib&quot;
            include &quot;TriggerLibs/SwarmLib&quot;
            include &quot;LibCOMI&quot;
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void InitLibs () {
                libNtve_InitLib();
                libHots_InitLib();
                libCOMI_InitLib();
            }
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            const int gv_pLAYER_01_USER = 1;
            const int gv_pLAYER_02_USER = 2;
            const int gv_pLAYER_03_ENEMY = 3;
            const int gv_pLAYER_04_ENEMY = 4;
            const int gv_pLAYER_05_ZergSwarm = 5;
            const int gv_eNEMY_BASE_COUNT = 10;
            const int gv_kronosBossbarID = 1;
            //--------------------------------------------------------------------------------------------------
            // Global Structures
            //--------------------------------------------------------------------------------------------------
            struct gs_Ability {
                int lv_chargeCount;
                timer lv_cooltimeTimer;
                fixed[21] lv_conditionKronosHitpointPercent;
                int lv_conditionKronosHitpointPercentMaxINDEX;
                int lv_conditionKronosHitpointPercentCurrentINDEX;
                fixed lv_errorRange;
            };
            struct gs_AbilitySet {
                string lv_type;
            };
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            unit gv_announcer;
            int[5] gv_tower_Pings;
            playergroup gv_enemyGroup;
            soundlink gv_defaultSoundacObj_Izsha_603SoundLink;
            string[21] gv_hybridinAttackWave;
            bool[5] gv_canTowerofVoidUseAttackIngorance;
            int gv_airDestination;
            bool gv_isPlayerBusy;
            string gv_race;
            bool gv_isTransmissionAvailable;
            text gv_strStartingSe1;
            text gv_strStartingSe2;
            text gv_strStartingSeSpeaker;
            unit gv_towerofVoidA;
            unit gv_towerofVoidB;
            unit gv_towerofVoidC;
            unit gv_towerofVoidD;
            unit[5] gv_towerofVoid;
            unit gv_kronos;
            unit gv_evolutionChamber;
            bool gv_conversationAvailable;
            text gv_speakerAnnouncer;
            text gv_speakerKronos;
            text gv_speakerAdjustant;
            bool gv_attackBaforeFirstKronosAlertAvailable;
            bool gv_kronosSpawningAreaWarningAvailable;
            timer gv_objectiveTimer;
            int gv_objectiveTimerWindow;
            unitfilter gv_vICTORY_REQUIREMENT;
            int[11] gv_enemyBaseObjectiveMarkers;
            int gv_remainingStructureCount;
            int gv_remainingEggs;
            point gv_victoryCompletePan;
            unit gv_kRONOSforSequence;
            bool gv_isSingleMode;
            int[101] gv_attackWavePathBucket;
            int gv_attackWavePathBucketIndex;
            point gv_airStrikeSpawn;
            unit[31] gv_transporter;
            int gv_transporterINDEX;
            bool gv_isAirstrikeLEFT;
            unit[31] gv_airStrikeLeaderUnit;
            int gv_airStrikeLeaderUnitINDEX;
            int[31] gv_airStrikePing;
            gs_Ability gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598;
            gs_Ability gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998;
            gs_Ability gv_kronosAbilityECA795EBB28C;
            gs_Ability gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0;
            gs_Ability gv_kronosAbilityED9A8CED94BCECA084EB9EB5;
            point gv_kronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598EB8C80EC8381ECA780ECA090;
            int gv_kronosStateNumber;
            int[51] gv_kronosStateButtons;
            int[51] gv_kronosStateButtonsPreset;
            int[51] gv_kronosStateButtonstmp;
            int[51] gv_kronosStateButtonsType;
            int[51] gv_kronosStateButtonsTypetmp;
            unit gv_kronosSatellite;
            unit gv_kronosEC82ACEBA79DEC84A0EAB3A0Target;
            bool gv_deathPenaltyORStormSwitch;
            int gv_kronosCurrentSkill;
            actor[51] gv_kronosEBB688EAB8B0EB91A5AlertModel1;
            actor[51] gv_kronosEBB688EAB8B0EB91A5AlertModel2;
            bool gv_kronosEBB688EAB8B0EB91A5Pattern;
            timer gv_kronosECA780EC97B0ECA084EB9EB5Cooltime;
            timer[11] gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0Timer;
            int gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0TimerINDEX;
            int[11][6] gv_kronosStateButtonSet;
            int gv_kronosStateMAGICGUARDitem;
            bool gv_kronosTipsArmorCrashVoidMagicGuardandIronShield;
            bool gv_kronosTipsFireStormandBloodyImprison;
            bool gv_kronosTipsDeathPenalty;
            bool gv_kronosTipsWyvern;
            bool gv_kronosTipsSatelliteDrop;
            bool gv_kronosisinCombat;
            timer gv_kronosCombatTimer;
            timer gv_kronosTimer;
            int gv_kronosTimerWindows;
            int gv_kronoscycle;
            int gv_kronosActivePing;
            int gv_kronosDeActivePing;
            bool gv_kronosisAlive;
            unit gv_kronosNisemono;
            actor gv_kronosNisemonoWarpActor;
            bool gv_kronosisBusy;
            actor[11] gv_kronosFire;
            bool[5] gv_towerFireStormUseable;
            unit[5] gv_towerDamageSource;
            revealer[5] gv_towerVision;
            bool gv_isEndingSceneStarted;
            timer gv_endingTimer;
            timer gv_endingTimerNaktulHelp;
            unit gv_endingSceneNexus;
            unit gv_heroP1;
            unit gv_heroP2;
            int gv_objectiveKillKronosNoObjectiveObjective;
            int gv_objectiveDestroyTowerofVoid;
            int gv_objectivePreventTimerExpire;
            int gv_subObjectiveState;
            bool gv_eggObjisOn;
            timer gv_eggLimitTimer;
            bool gv_eggObjAttackWaveHybridOn;
            int gv_objSub_Egg_Ping;
            revealer gv_eggAreaRevealer;
            point gv_eggObjDynamicTarget;
            int gv_previousEggCount;
            int gv_subObjectiveINPROGRESS;
            int gv_subObjectiveCOMPLETE;
            int gv_subObjectiveFAIL;
            int gv_objectiveTEST;
            void InitGlobals () {
                int init_i;
                int init_j;
                int init_i1;
                gv_announcer = UnitFromId(1469862881);
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_tower_Pings[init_i] = c_invalidPingId;
                }
                gv_enemyGroup = PlayerGroupEmpty();
                gv_defaultSoundacObj_Izsha_603SoundLink = SoundLink(&quot;acObj_Izsha_603&quot;, -1);
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_canTowerofVoidUseAttackIngorance[init_i] = true;
                }
                gv_race = &quot;Zerg&quot;;
                gv_isTransmissionAvailable = true;
                gv_strStartingSe1 = StringExternal(&quot;Param/Value/BE4F34E3&quot;);
                gv_strStartingSe2 = StringExternal(&quot;Param/Value/26A252E0&quot;);
                gv_strStartingSeSpeaker = StringExternal(&quot;Param/Value/0421C168&quot;);
                gv_towerofVoidA = UnitFromId(2074230026);
                gv_towerofVoidB = UnitFromId(1367688162);
                gv_towerofVoidC = UnitFromId(1032847867);
                gv_towerofVoidD = UnitFromId(572517807);
                gv_conversationAvailable = true;
                gv_speakerAnnouncer = StringExternal(&quot;Param/Value/2C7C5556&quot;);
                gv_speakerKronos = StringExternal(&quot;Param/Value/CDA3E492&quot;);
                gv_speakerAdjustant = StringExternal(&quot;Param/Value/3DBF4748&quot;);
                gv_attackBaforeFirstKronosAlertAvailable = true;
                gv_kronosSpawningAreaWarningAvailable = true;
                gv_objectiveTimer = TimerCreate();
                gv_objectiveTimerWindow = c_timerWindowNone;
                gv_vICTORY_REQUIREMENT = UnitFilter((1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)));
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_enemyBaseObjectiveMarkers[init_i] = c_invalidPingId;
                }
                gv_remainingStructureCount = 4;
                gv_remainingEggs = 100;
                gv_attackWavePathBucketIndex = 1;
                for (init_i = 0; init_i &lt;= 30; init_i += 1) {
                    gv_airStrikePing[init_i] = c_invalidPingId;
                }
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_cooltimeTimer = TimerCreate();
                for (init_i1 = 0; init_i1 &lt;= 20; init_i1 += 1) {
                    gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercent[init_i1] = -1.0;
                }
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_errorRange = 5.0;
                gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_cooltimeTimer = TimerCreate();
                for (init_i1 = 0; init_i1 &lt;= 20; init_i1 += 1) {
                    gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercent[init_i1] = -1.0;
                }
                gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_errorRange = 5.0;
                gv_kronosAbilityECA795EBB28C.lv_cooltimeTimer = TimerCreate();
                for (init_i1 = 0; init_i1 &lt;= 20; init_i1 += 1) {
                    gv_kronosAbilityECA795EBB28C.lv_conditionKronosHitpointPercent[init_i1] = -1.0;
                }
                gv_kronosAbilityECA795EBB28C.lv_errorRange = 5.0;
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_cooltimeTimer = TimerCreate();
                for (init_i1 = 0; init_i1 &lt;= 20; init_i1 += 1) {
                    gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[init_i1] = -1.0;
                }
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_errorRange = 5.0;
                gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_cooltimeTimer = TimerCreate();
                for (init_i1 = 0; init_i1 &lt;= 20; init_i1 += 1) {
                    gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_conditionKronosHitpointPercent[init_i1] = -1.0;
                }
                gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_errorRange = 5.0;
                for (init_i = 0; init_i &lt;= 50; init_i += 1) {
                    gv_kronosStateButtons[init_i] = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 50; init_i += 1) {
                    gv_kronosStateButtonsPreset[init_i] = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 50; init_i += 1) {
                    gv_kronosStateButtonstmp[init_i] = c_invalidDialogId;
                }
                gv_deathPenaltyORStormSwitch = true;
                gv_kronosCurrentSkill = 4;
                gv_kronosEBB688EAB8B0EB91A5Pattern = true;
                gv_kronosECA780EC97B0ECA084EB9EB5Cooltime = TimerCreate();
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0Timer[init_i] = TimerCreate();
                }
                gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0TimerINDEX = 1;
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 5; init_j += 1) {
                        gv_kronosStateButtonSet[init_i][init_j] = c_invalidDialogId;
                    }
                }
                gv_kronosStateMAGICGUARDitem = c_invalidDialogControlId;
                gv_kronosCombatTimer = TimerCreate();
                gv_kronosTimer = TimerCreate();
                gv_kronosTimerWindows = c_timerWindowNone;
                gv_kronoscycle = 1;
                gv_kronosActivePing = c_invalidPingId;
                gv_kronosDeActivePing = c_invalidPingId;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_towerFireStormUseable[init_i] = true;
                }
                gv_endingTimer = TimerCreate();
                gv_endingTimerNaktulHelp = TimerCreate();
                gv_objectiveKillKronosNoObjectiveObjective = c_invalidObjectiveId;
                gv_objectiveDestroyTowerofVoid = c_invalidObjectiveId;
                gv_objectivePreventTimerExpire = c_invalidObjectiveId;
                gv_eggLimitTimer = TimerCreate();
                gv_objSub_Egg_Ping = c_invalidPingId;
                gv_eggObjDynamicTarget = PointFromId(236191240);
                gv_subObjectiveINPROGRESS = c_invalidObjectiveId;
                gv_subObjectiveCOMPLETE = c_invalidObjectiveId;
                gv_subObjectiveFAIL = c_invalidObjectiveId;
                gv_objectiveTEST = c_invalidObjectiveId;
            }
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            string gf_GetReplacedUnitForOtherRaceTERRAN (unit lp_originalUnit);
            string gf_GetReplacedUnitForOtherRacePROTOSS (unit lp_originalUnit);
            void gf_BuildBunker (point lp_position);
            void gf_BuildPylons ();
            int gf_SetCountCasebyDifficulty (int lp_valueCasual, int lp_valueNormal, int lp_valueHard, int lp_valueBrutal);
            int gf_SetCountCasebyRound (int lp_value1st, int lp_value2nd, int lp_value3rd, int lp_value4th);
            string gf_SetUnitCaseByRace (string lp_zerg, string lp_terran, string lp_protoss);
            fixed gf_SetNumberCaseByRace (fixed lp_zerg, fixed lp_terran, fixed lp_protoss);
            abilcmd gf_SetAbilityCaseByRace (abilcmd lp_abilityZerg, abilcmd lp_abilityTerran, abilcmd lp_abilityProtoss);
            void gf_DisplayErrorMessage (text lp_msg);
            void gf_SetTowerofVoidhitpoint (int lp_eCB2B4EBA0A5);
            void gf_MakeConversationAnnouncer (text lp_text, soundlink lp_sound, fixed lp_duration);
            void gf_MakeConversationKronos (text lp_text, soundlink lp_sound, fixed lp_duration, bool lp_isAlive);
            void gf_MakeConversationAdjustant (text lp_text, soundlink lp_sound, fixed lp_duration);
            text gf_GetOrdinalExpression (int lp_number);
            bool gf_IsUnitTypeHybrid (unit lp_unit);
            bool gf_IsUnitTypeCaster (unit lp_unit);
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
            void gf_ConversationDefaultCommander (text lp_tEXT, fixed lp_duration);
            int gf_GetCargoSize (string lp_unitType);
            void gf_InsertCargo (int lp_zerglingNumber, int lp_roachNumber, int lp_hydraliskNumber, int lp_banelingNumber, int lp_ultraliskNumber, int lp_eAB6A4EBA9B8ECB6A9Number, int lp_eBB380ED9895ECB2B4Number, int lp_infestorNumber);
            string gf_ConvertAirCargoType (string lp_zergUnit, string lp_race);
            fixed gf_ConvertAirCargoNumber (string lp_zergUnit, string lp_race);
            void gf_AirStrike (int lp_bucket);
            void gf_AirStrikeLarge (int lp_bucket);
            void gf_SmartAttackSystem (int lp_eAB79CEBAAA8, int lp_eAB8B0EC88A0ECA095EB8F84);
            int gf_LotteryBox ();
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_eC8B9CEAB084, int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84, int lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898, int lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898, int lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898);
            trigger gf_GetProperAttackTrigger (int lp_eAB79CEBAAA8);
            string gf_GetRandomPath ();
            void gf_DrawArrowsBetweenPoints (point lp_eC8B9CEC9E91, point lp_eB8F84ECB0A9, fixed lp_eAB084EAB2A9, fixed lp_eCA780EC868DEC8B9CEAB084, fixed lp_eD9994EC82B4ED919CED81ACEAB8B0, color lp_eC8389EC8381);
            void gf_DrawArrowsForAirstrikeTransporter (unit lp_transporter, point lp_destionation, color lp_color);
            fixed gf_GetUnitHealthPercent (unit lp_unit);
            bool gf_UnitHealthCheck (unit lp_unit, fixed lp_min, fixed lp_max);
            unitgroup gf_GetTargetUnitCandidates (unit lp_caster, fixed lp_region, unitfilter lp_filter);
            bool gf_GetKronosSkillDeathPenaltyOrStorm ();
            bool gf_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598EB8299ED9598EBB08FEBB680EC8898EB8F99EC9E91 (unit lp_satellite);
            void gf_KronosEBB688EAB8B0EB91A5Basic (bool lp_isCross, fixed lp_term);
            void gf_KronosEBB688EAB8B0EB91A5ED9994EC97BCEC839DEC84B1 (unit lp_pillar, point lp_destination);
            void gf_KronosEBB688EAB8B0EB91A5EAB8B0EB91A5ECA09CEAB1B0 (unit lp_pillar, point lp_destination);
            void gf_KronosStateAddState (int lp_state);
            void gf_KronosStateAddState2 (int lp_stateType, int lp_kronosStateButtonSetNum);
            void gf_KronosStateMoveStateLeft (int lp_iNDEX, int lp_positionXRelative);
            void gf_KronosStateMoveStateLeft2 (int lp_kronosStateButtonSetNum, int lp_iNDEX, int lp_positionXRelative);
            void gf_KronosStateRemoveStates ();
            void gf_KronosStateRemoveStates2 ();
            void gf_KronosStateShowState (int lp_type);
            int gf_CalcKronoshitpoint ();
            int gf_CalcKronosdamagebyDiff ();
            void gf_SummoningKronosinit ();
            void gf_RunKronosAttackatMissionTime (trigger lp_kronoswave, fixed lp_eC8B9CEAB084, int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84);
            void gf_KronosNormalAttackEffectRemove (actor lp_target);
            void gf_SmartAttackSystem2subObjective (int lp_eAB79CEBAAA8, int lp_eAB8B0EC88A0ECA095EB8F84);
            void gf_RunAttackWaveatMissionTime2subObjective (trigger lp_attackWave, int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84, int lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898, int lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898, int lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898);
            trigger gf_GetProperAttackTrigger2subObjective (int lp_eAB79CEBAAA8);
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_Init01LoadData;
            trigger gt_Init02Players;
            trigger gt_Init03LoadingComplete;
            trigger gt_Init04Technology;
            trigger gt_Init05Units;
            trigger gt_Init06MusicSound;
            trigger gt_Init07Environment;
            trigger gt_Init08Difficulties;
            trigger gt_Init09Commander;
            trigger gt_PortraitAnnouncer;
            trigger gt_PortraitKronos;
            trigger gt_PortraitAdjustant;
            trigger gt_AirStrikeConversation;
            trigger gt_AttackBeforeFirstKronosAlert;
            trigger gt_KronosSpawningAreaWarning;
            trigger gt_StartGameQ;
            trigger gt_DefendenceUnitsByDifficulty;
            trigger gt_ObjectiveTimerWindow;
            trigger gt_ShowTowerMarkers;
            trigger gt_UpdateTowerMarkers;
            trigger gt_UpdateStructureCount;
            trigger gt_EnemyAttackingQ;
            trigger gt_DefeatGameTimerOver;
            trigger gt_DefeatKRONOSTimerOver;
            trigger gt_DefeatSequence;
            trigger gt_VictoryPrimaryObjectiveComplete;
            trigger gt_VictorySequence;
            trigger gt_VictoryFanfareQ;
            trigger gt_Victory;
            trigger gt_Defeat;
            trigger gt_StartAI;
            trigger gt_AIAttackWaves;
            trigger gt_RemoveAirStrikePing;
            trigger gt_TypeAttackWave1SMALLEST;
            trigger gt_TypeAttackWave2SMALLER;
            trigger gt_TypeAttackWave3SMALL;
            trigger gt_TypeAttackWave4MEDIUM;
            trigger gt_TypeAttackWave5LARGE;
            trigger gt_TypeAttackWave6LARGER;
            trigger gt_TypeAttackWave7LARGEST;
            trigger gt_TypeAttackWaveerror;
            trigger gt_KronosAbilityObserver;
            trigger gt_SmartAbilityCaster;
            trigger gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095;
            trigger gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C;
            trigger gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598;
            trigger gt_KronosEC82ACEBA79DEC84A0EAB3A0;
            trigger gt_KronosEC9980EC9DB4EBB288EC868CED9998;
            trigger gt_KronosECA795EBB28C;
            trigger gt_KronosED9A8CED94BCECA084EB9EB5ED8C90EB8BA8;
            trigger gt_KronosED9A8CED94BCECA084EB9EB5;
            trigger gt_KronosECA491EBA0A5EC9EA5;
            trigger gt_KronosECA780EC97B0ECA084EB9EB5ED8C90EB8BA8;
            trigger gt_KronosECA780EC97B0ECA084EB9EB5EAB3B5ED9788EC9D98EAB090EC98A5;
            trigger gt_KronosECA780EC97B0ECA084EB9EB5EC8AA4ED858CEC8B9CEC8AA4ED9584EB939C;
            trigger gt_KronosECA780EC97B0ECA084EB9EB5EBB894EB9E99ED9980;
            trigger gt_KronosEBB688EAB8B0EB91A5A;
            trigger gt_KronosEBB688EAB8B0EB91A5B;
            trigger gt_KronosEBB688EAB8B0EB91A5B1;
            trigger gt_KronosEBB688EAB8B0EB91A5B2;
            trigger gt_KronosStateUpdateMagicGuard;
            trigger gt_KronosStatePreset1Basic;
            trigger gt_KronosStatePreset2Basic;
            trigger gt_KronosStatePreset3Storm;
            trigger gt_KronosStatePreset4DeathPenalty;
            trigger gt_KronosStatePreset5SatelliteDrop;
            trigger gt_KronosStatePreset6Wyvern;
            trigger gt_KronosStatePreset7APillarofFire;
            trigger gt_KronosTipsShowTips;
            trigger gt_KronosTipsKronosGeneral;
            trigger gt_KronosTipsArmorCrashVoidMagicGuardandIronShield;
            trigger gt_KronosTipsFireStormandBloodyImprison;
            trigger gt_KronosTipsDeathPenalty;
            trigger gt_KronosTipsWyvern;
            trigger gt_KronosTipsSatelliteDrop;
            trigger gt_Kronos1stAlert;
            trigger gt_Kronos2ndAlert;
            trigger gt_Kronos3rdAlert;
            trigger gt_Kronos4thAlert;
            trigger gt_KronosWaves;
            trigger gt_Kronosisdead;
            trigger gt_KronosTimerWindow;
            trigger gt_IfKronosisinCombatA;
            trigger gt_IfKronosisinRest;
            trigger gt_ShowKronosPrepSummoningPing;
            trigger gt_KronosAwakenWindowUpdate;
            trigger gt_KronosSummoningWave;
            trigger gt_KronosInit;
            trigger gt_KronosSummoningPreparingMotionCreate;
            trigger gt_KronosSummoningPreparingMotionRemove;
            trigger gt_KronosStatesHidePresist;
            trigger gt_KronosStatesHideinLowLife;
            trigger gt_TowerofVoidDead;
            trigger gt_TowerofVoidDead1;
            trigger gt_TowerofVoidDead2;
            trigger gt_TowerofVoidDead3;
            trigger gt_TowerofVoidDead4;
            trigger gt_SkillAttackIngoracne1;
            trigger gt_SkillAttackIngoracne2;
            trigger gt_SkillAttackIngoracne3;
            trigger gt_SkillAttackIngoracne4;
            trigger gt_SkillFireStorm1;
            trigger gt_SkillFireStorm2;
            trigger gt_SkillFireStorm3;
            trigger gt_SkillFireStorm4;
            trigger gt_EndingScenePreset;
            trigger gt_EndingSceneCinematic;
            trigger gt_EndingSceneFightWithKronos;
            trigger gt_EndingSceneSatelliteDropPersist;
            trigger gt_EndingSceneNaktulHelp;
            trigger gt_EndingSceneVictory;
            trigger gt_ObjectiveKillKronosCreate;
            trigger gt_ObjectiveKillKronosComplete;
            trigger gt_ObjectiveKillKronosUpdate;
            trigger gt_ObjectiveKillKronosFailed;
            trigger gt_ObjectiveDestroyTowerofVoidCreate;
            trigger gt_ObjectiveDestroyTowerofVoidComplete;
            trigger gt_ObjectiveDestroyTowerofVoidUpdate;
            trigger gt_ObjectiveDestroyTowerofVoidFailed;
            trigger gt_ObjectivePreventTimerExpireCreate;
            trigger gt_ObjectivePreventTimerExpireComplete;
            trigger gt_ObjectivePreventTimerExpireUpdate;
            trigger gt_ObjectivePreventTimerExpireFailed;
            trigger gt_SubObjectiveInit;
            trigger gt_ShowSubObjective1TimeElapsed;
            trigger gt_ShowSubObjective2Discovery;
            trigger gt_SubObjectiveCompleteActions;
            trigger gt_SubObjectiveFailActions;
            trigger gt_UpdateEggsCount;
            trigger gt_subObjectiveCallAttackWave1;
            trigger gt_subObjectiveCallAttackWave2;
            trigger gt_subObjectiveCallAttackWave3;
            trigger gt_subObjectiveCallAttackWave4;
            trigger gt_TurntoOurBase;
            trigger gt_SubObjectiveTypeAttackWave1SMALLEST;
            trigger gt_SubObjectiveTypeAttackWave2SMALLER;
            trigger gt_SubObjectiveTypeAttackWave3SMALL;
            trigger gt_SubObjectiveTypeAttackWave4MEDIUM;
            trigger gt_SubObjectiveTypeAttackWave5LARGE;
            trigger gt_SubObjectiveTypeAttackWave6LARGER;
            trigger gt_SubObjectiveTypeAttackWave7LARGEST;
            trigger gt_SubObjectiveTypeAttackWaveerror;
            trigger gt_SubObjectiveCreate;
            trigger gt_SubObjectiveComplete;
            trigger gt_SubObjectiveUpdate;
            trigger gt_SubObjectiveFailed;
            trigger gt_ObjectiveTESTCreate2;
            trigger gt_ObjectiveTESTComplete2;
            trigger gt_ObjectiveTESTUpdate2;
            trigger gt_ObjectiveTESTFailed2;
            //--------------------------------------------------------------------------------------------------
            // Custom AI Functions
            //--------------------------------------------------------------------------------------------------
            string[17] cai_playerAI;
            //--------------------------------------------------------------------------------------------------
            void InitCustomAI () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    cai_playerAI[init_i] = null;
                }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_start (string ai, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                cai_playerAI[p] = ai;
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_start(p); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_setDefGather(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            string cai_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_getCustomData(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_getLastWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_run (int p, playergroup target) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_run(p, target); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_stop (string ai) {
                if (ai == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_stop(); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_run (int w, int p, playergroup target, bool wait) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_wave_run(w, p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_enable (int w, int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_wave_enable(w, p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool cai_wave_isEnabled (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_isEnabled(w, p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup cai_wave_createdUnits (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_createdUnits(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_wave_createdWave (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_createdWave(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_startall () {
                AICampaignStart(3);
                AICampaignStart(4);
                AICampaignStart(5);
            }
            //--------------------------------------------------------------------------------------------------
            void cai_runall () {
                playergroup target = PlayerGroupEmpty();
            }
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            string gf_GetReplacedUnitForOtherRaceTERRAN (unit lp_originalUnit) {
                string autoE19DB0BF_val;
                // Variable Declarations
                string lv_unitTypeofOriginal;
                // Variable Initialization
                // Implementation
                lv_unitTypeofOriginal = UnitGetType(lp_originalUnit);
                autoE19DB0BF_val = lv_unitTypeofOriginal;
                if (autoE19DB0BF_val == &quot;Hatchery&quot;) {
                    return &quot;CommandCenter&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Lair&quot;) {
                    return &quot;CommandCenter&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Hive&quot;) {
                    return &quot;CommandCenter&quot;;
                }
                else if (autoE19DB0BF_val == &quot;SpawningPool&quot;) {
                    return &quot;Barracks&quot;;
                }
                else if (autoE19DB0BF_val == &quot;EvolutionChamber&quot;) {
                    return &quot;EngineeringBay&quot;;
                }
                else if (autoE19DB0BF_val == &quot;RoachWarren&quot;) {
                    return &quot;Armory&quot;;
                }
                else if (autoE19DB0BF_val == &quot;BanelingNest&quot;) {
                    return &quot;Factory&quot;;
                }
                else if (autoE19DB0BF_val == &quot;SpineCrawler&quot;) {
                    return &quot;SiegeTankSieged&quot;;
                }
                else if (autoE19DB0BF_val == &quot;SporeCrawler&quot;) {
                    return &quot;MissileTurret&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Spire&quot;) {
                    return &quot;Starport&quot;;
                }
                else if (autoE19DB0BF_val == &quot;GreaterSpire&quot;) {
                    return &quot;Starport&quot;;
                }
                else if (autoE19DB0BF_val == &quot;HydraliskDen&quot;) {
                    return &quot;Barracks&quot;;
                }
                else if (autoE19DB0BF_val == &quot;LurkerDen&quot;) {
                    return &quot;Barracks&quot;;
                }
                else if (autoE19DB0BF_val == &quot;InfestationPit&quot;) {
                    return &quot;Factory&quot;;
                }
                else if (autoE19DB0BF_val == &quot;UltraliskCavern&quot;) {
                    return &quot;Factory&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Zergling&quot;) {
                    return &quot;Marine&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Roach&quot;) {
                    return &quot;Goliath&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Baneling&quot;) {
                    return &quot;Marauder&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Ravager&quot;) {
                    return &quot;SiegeTankSieged&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Overlord&quot;) {
                    return &quot;VikingFighter&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Overseer&quot;) {
                    return &quot;MissileTurret&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Hydralisk&quot;) {
                    return &quot;Marauder&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Mutalisk&quot;) {
                    return &quot;Banshee&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Corruptor&quot;) {
                    return &quot;VikingFighter&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Infestor&quot;) {
                    return &quot;Raven&quot;;
                }
                else if (autoE19DB0BF_val == &quot;SwarmHostMP&quot;) {
                    return &quot;WarHound&quot;;
                }
                else if (autoE19DB0BF_val == &quot;SwarmHostBurrowedMP&quot;) {
                    return &quot;WarHound&quot;;
                }
                else if (autoE19DB0BF_val == &quot;LurkerMP&quot;) {
                    return &quot;Banshee&quot;;
                }
                else if (autoE19DB0BF_val == &quot;LurkerMPBurrowed&quot;) {
                    return &quot;Banshee&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Viper&quot;) {
                    return &quot;ScienceVessel&quot;;
                }
                else if (autoE19DB0BF_val == &quot;BroodLord&quot;) {
                    return &quot;Battlecruiser&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Ultralisk&quot;) {
                    return &quot;Thor&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Drone&quot;) {
                    return &quot;SCV&quot;;
                }
                else if (autoE19DB0BF_val == &quot;Leviathan&quot;) {
                    return &quot;Loki&quot;;
                }
                else {
                    return &quot;Marine&quot;;
                }
            }
            string gf_GetReplacedUnitForOtherRacePROTOSS (unit lp_originalUnit) {
                string autoEF425893_val;
                // Variable Declarations
                string lv_unitTypeofOriginal;
                // Variable Initialization
                // Implementation
                lv_unitTypeofOriginal = UnitGetType(lp_originalUnit);
                autoEF425893_val = lv_unitTypeofOriginal;
                if (autoEF425893_val == &quot;Hatchery&quot;) {
                    return &quot;Nexus&quot;;
                }
                else if (autoEF425893_val == &quot;Lair&quot;) {
                    return &quot;Nexus&quot;;
                }
                else if (autoEF425893_val == &quot;Hive&quot;) {
                    return &quot;Nexus&quot;;
                }
                else if (autoEF425893_val == &quot;SpawningPool&quot;) {
                    return &quot;Gateway&quot;;
                }
                else if (autoEF425893_val == &quot;EvolutionChamber&quot;) {
                    return &quot;Forge&quot;;
                }
                else if (autoEF425893_val == &quot;RoachWarren&quot;) {
                    return &quot;CyberneticsCore&quot;;
                }
                else if (autoEF425893_val == &quot;BanelingNest&quot;) {
                    return &quot;TemplarArchive&quot;;
                }
                else if (autoEF425893_val == &quot;SpineCrawler&quot;) {
                    return &quot;PhotonCannon&quot;;
                }
                else if (autoEF425893_val == &quot;SporeCrawler&quot;) {
                    return &quot;PhotonCannon&quot;;
                }
                else if (autoEF425893_val == &quot;Spire&quot;) {
                    return &quot;Stargate&quot;;
                }
                else if (autoEF425893_val == &quot;GreaterSpire&quot;) {
                    return &quot;Stargate&quot;;
                }
                else if (autoEF425893_val == &quot;HydraliskDen&quot;) {
                    return &quot;TwilightCouncil&quot;;
                }
                else if (autoEF425893_val == &quot;LurkerDen&quot;) {
                    return &quot;FleetBeacon&quot;;
                }
                else if (autoEF425893_val == &quot;InfestationPit&quot;) {
                    return &quot;RoboticsFacility&quot;;
                }
                else if (autoEF425893_val == &quot;UltraliskCavern&quot;) {
                    return &quot;RoboticsBay&quot;;
                }
                else if (autoEF425893_val == &quot;Zergling&quot;) {
                    return &quot;ZealotAiur&quot;;
                }
                else if (autoEF425893_val == &quot;Roach&quot;) {
                    return &quot;Stalker&quot;;
                }
                else if (autoEF425893_val == &quot;Baneling&quot;) {
                    return &quot;DarkTemplar&quot;;
                }
                else if (autoEF425893_val == &quot;Ravager&quot;) {
                    return &quot;Disruptor&quot;;
                }
                else if (autoEF425893_val == &quot;Overlord&quot;) {
                    return &quot;Scout&quot;;
                }
                else if (autoEF425893_val == &quot;Overseer&quot;) {
                    return &quot;Observer&quot;;
                }
                else if (autoEF425893_val == &quot;Hydralisk&quot;) {
                    if ((RandomInt(1, 2) == 1)) {
                        return &quot;Stalker&quot;;
                    }
                    else {
                        return &quot;Dragoon&quot;;
                    }
                }
                else if (autoEF425893_val == &quot;Mutalisk&quot;) {
                    return &quot;Phoenix&quot;;
                }
                else if (autoEF425893_val == &quot;Corruptor&quot;) {
                    return &quot;Scout&quot;;
                }
                else if (autoEF425893_val == &quot;Infestor&quot;) {
                    return &quot;HighTemplar&quot;;
                }
                else if (autoEF425893_val == &quot;SwarmHostMP&quot;) {
                    return &quot;ImmortalAiur&quot;;
                }
                else if (autoEF425893_val == &quot;SwarmHostBurrowedMP&quot;) {
                    return &quot;ImmortalAiur&quot;;
                }
                else if (autoEF425893_val == &quot;LurkerMP&quot;) {
                    return &quot;DarkTemplar&quot;;
                }
                else if (autoEF425893_val == &quot;LurkerMPBurrowed&quot;) {
                    return &quot;DarkTemplar&quot;;
                }
                else if (autoEF425893_val == &quot;Viper&quot;) {
                    return &quot;Oracle&quot;;
                }
                else if (autoEF425893_val == &quot;BroodLord&quot;) {
                    return &quot;Carrier&quot;;
                }
                else if (autoEF425893_val == &quot;Ultralisk&quot;) {
                    return &quot;Reaver&quot;;
                }
                else if (autoEF425893_val == &quot;Drone&quot;) {
                    return &quot;Probe&quot;;
                }
                else if (autoEF425893_val == &quot;Leviathan&quot;) {
                    return &quot;Mothership&quot;;
                }
                else {
                    return &quot;Adept&quot;;
                }
            }
            void gf_BuildBunker (point lp_position) {
                // Variable Declarations
                unit lv_bunker;
                // Variable Initialization
                // Implementation
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Bunker&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_03_ENEMY, lp_position);
                lv_bunker = UnitLastCreated();
                UnitCargoCreate(lv_bunker, &quot;Marine&quot;, 2);
                UnitCargoCreate(lv_bunker, &quot;Marauder&quot;, 1);
            }
            void gf_BuildPylons () {
                int autoB0D80409_ae;
                int autoB0D80409_ai;
                // Variable Declarations
                point[51] lv_pylons;
                int lv_i;
                // Variable Initialization
                lv_i = 1;
                // Implementation
                lv_pylons[lv_i] = PointFromId(940224754);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1819603686);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1897814586);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(2086139357);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(765298354);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(875474631);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(111723463);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(2030420267);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(2082974772);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1722125035);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(822225155);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(365204089);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1030778494);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(2068111309);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1550525472);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1819353861);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1899279650);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(525893591);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1824459691);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(360249548);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1159091374);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(668177614);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1139704306);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(285554271);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1125612621);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(645464718);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1509019337);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(263432479);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1706647472);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1468466709);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1564357909);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1659421263);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1413228613);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(804010902);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1027725389);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1091703834);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(38709466);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1378447719);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1313606891);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(364082682);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1692996508);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(708657249);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(335155168);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1212744643);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1731223051);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1712249413);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1147184126);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(1566855660);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(359165902);
                lv_i = (lv_i + 1);
                lv_pylons[lv_i] = PointFromId(59327540);
                autoB0D80409_ae = 50;
                autoB0D80409_ai = 1;
                lv_i = 1;
                for ( ; ( (autoB0D80409_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB0D80409_ae) || (autoB0D80409_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB0D80409_ae) ) ; lv_i += autoB0D80409_ai ) {
                    if ((lv_pylons[lv_i] != null)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Pylon&quot;, 0, gv_pLAYER_03_ENEMY, lv_pylons[lv_i]);
                    }
                }
            }
            int gf_SetCountCasebyDifficulty (int lp_valueCasual, int lp_valueNormal, int lp_valueHard, int lp_valueBrutal) {
                int auto337CED98_val;
                // Implementation
                auto337CED98_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (auto337CED98_val == 1) {
                    return lp_valueCasual;
                }
                else if (auto337CED98_val == 2) {
                    return lp_valueNormal;
                }
                else if (auto337CED98_val == 3) {
                    return lp_valueHard;
                }
                else if (auto337CED98_val == 4) {
                    return lp_valueBrutal;
                }
                else {
                    return lp_valueCasual;
                }
            }
            int gf_SetCountCasebyRound (int lp_value1st, int lp_value2nd, int lp_value3rd, int lp_value4th) {
                int auto894D2FE5_val;
                // Implementation
                auto894D2FE5_val = gv_kronoscycle;
                if (auto894D2FE5_val == 1) {
                    return lp_value1st;
                }
                else if (auto894D2FE5_val == 2) {
                    return lp_value2nd;
                }
                else if (auto894D2FE5_val == 3) {
                    return lp_value3rd;
                }
                else if (auto894D2FE5_val == 4) {
                    return lp_value4th;
                }
                else {
                    return lp_value1st;
                }
            }
            string gf_SetUnitCaseByRace (string lp_zerg, string lp_terran, string lp_protoss) {
                string autoD85BC118_val;
                // Implementation
                autoD85BC118_val = gv_race;
                if (autoD85BC118_val == &quot;Zerg&quot;) {
                    return lp_zerg;
                }
                else if (autoD85BC118_val == &quot;Terr&quot;) {
                    return lp_terran;
                }
                else if (autoD85BC118_val == &quot;Prot&quot;) {
                    return lp_protoss;
                }
                else {
                    return lp_zerg;
                }
            }
            fixed gf_SetNumberCaseByRace (fixed lp_zerg, fixed lp_terran, fixed lp_protoss) {
                string autoB51E6F1C_val;
                // Implementation
                autoB51E6F1C_val = gv_race;
                if (autoB51E6F1C_val == &quot;Zerg&quot;) {
                    return lp_zerg;
                }
                else if (autoB51E6F1C_val == &quot;Terr&quot;) {
                    return lp_terran;
                }
                else if (autoB51E6F1C_val == &quot;Prot&quot;) {
                    return lp_protoss;
                }
                else {
                    return lp_zerg;
                }
            }
            abilcmd gf_SetAbilityCaseByRace (abilcmd lp_abilityZerg, abilcmd lp_abilityTerran, abilcmd lp_abilityProtoss) {
                string autoD6188889_val;
                // Implementation
                autoD6188889_val = gv_race;
                if (autoD6188889_val == &quot;Zerg&quot;) {
                    return lp_abilityZerg;
                }
                else if (autoD6188889_val == &quot;Terr&quot;) {
                    return lp_abilityTerran;
                }
                else if (autoD6188889_val == &quot;Prot&quot;) {
                    return lp_abilityProtoss;
                }
                else {
                    return lp_abilityZerg;
                }
            }
            void gf_DisplayErrorMessage (text lp_msg) {
                // Implementation
            }
            void gf_SetTowerofVoidhitpoint (int lp_eCB2B4EBA0A5) {
                // Implementation
                UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 100.0);
            }
            void gf_MakeConversationAnnouncer (text lp_text, soundlink lp_sound, fixed lp_duration) {
                // Implementation
                while (!((gv_isTransmissionAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_isTransmissionAvailable = false;
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1469862881), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, lp_sound, StringExternal(&quot;Param/Value/A3B23564&quot;), lp_text, lp_duration, c_transmissionDurationSet, false, c_maxPlayers, false);
                Wait(1.0, c_timeReal);
                gv_isTransmissionAvailable = true;
            }
            void gf_MakeConversationKronos (text lp_text, soundlink lp_sound, fixed lp_duration, bool lp_isAlive) {
                // Implementation
                while (!((gv_isTransmissionAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_isTransmissionAvailable = false;
                if ((lp_isAlive == true)) {
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, lp_sound, StringExternal(&quot;Param/Value/816EF57A&quot;), lp_text, lp_duration, c_transmissionDurationSet, false, c_maxPlayers, false);
                }
                else {
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronosNisemono, false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, lp_sound, StringExternal(&quot;Param/Value/1F4049AE&quot;), lp_text, lp_duration, c_transmissionDurationSet, false, c_maxPlayers, false);
                }
                Wait(1.0, c_timeReal);
                gv_isTransmissionAvailable = true;
            }
            void gf_MakeConversationAdjustant (text lp_text, soundlink lp_sound, fixed lp_duration) {
                // Implementation
                while (!((gv_isTransmissionAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_isTransmissionAvailable = false;
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(175998748), false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, lp_sound, StringExternal(&quot;Param/Value/B7F9ED13&quot;), lp_text, lp_duration, c_transmissionDurationSet, false, c_maxPlayers, false);
                Wait(1.0, c_timeReal);
                gv_isTransmissionAvailable = true;
            }
            text gf_GetOrdinalExpression (int lp_number) {
                int autoDAC3C08A_val;
                // Variable Declarations
                text lv_addition;
                // Variable Initialization
                lv_addition = StringToText(&quot;&quot;);
                // Implementation
                autoDAC3C08A_val = lp_number;
                if (autoDAC3C08A_val == 1) {
                    lv_addition = StringExternal(&quot;Param/Value/FB2653E2&quot;);
                }
                else if (autoDAC3C08A_val == 2) {
                    lv_addition = StringExternal(&quot;Param/Value/6F7D95D9&quot;);
                }
                else if (autoDAC3C08A_val == 3) {
                    lv_addition = StringExternal(&quot;Param/Value/93F45D47&quot;);
                }
                else {
                    lv_addition = StringExternal(&quot;Param/Value/AAA2D2C7&quot;);
                }
                TextExpressionSetToken(&quot;Param/Expression/860ECDE0&quot;, &quot;A&quot;, IntToText(lp_number));
                TextExpressionSetToken(&quot;Param/Expression/860ECDE0&quot;, &quot;B&quot;, lv_addition);
                return TextExpressionAssemble(&quot;Param/Expression/860ECDE0&quot;);
            }
            bool gf_IsUnitTypeHybrid (unit lp_unit) {
                // Implementation
                if (((UnitGetType(lp_unit) == &quot;HybridBehemoth&quot;) || (UnitGetType(lp_unit) == &quot;HybridDestroyer&quot;) || (UnitGetType(lp_unit) == &quot;HybridDominator&quot;) || (UnitGetType(lp_unit) == &quot;HybridDominatorVoid&quot;) || (UnitGetType(lp_unit) == &quot;HybridNemesis&quot;) || (UnitGetType(lp_unit) == &quot;HybridReaver&quot;))) {
                    return true;
                }
                else {
                    return false;
                }
            }
            bool gf_IsUnitTypeCaster (unit lp_unit) {
                // Implementation
                if (((UnitGetType(lp_unit) == &quot;Infestor&quot;) || (UnitGetType(lp_unit) == &quot;HighTemplar&quot;) || (UnitGetType(lp_unit) == &quot;Raven&quot;) || (UnitGetType(lp_unit) == &quot;ScienceVessel&quot;) || (UnitGetType(lp_unit) == &quot;Viper&quot;))) {
                    return true;
                }
                else {
                    return false;
                }
            }
            trigger auto_gf_RunMissionEvent_Trigger = null;
            trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
            fixed auto_gf_RunMissionEvent_lp_missionEventTime;
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
                auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
                auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
                if (auto_gf_RunMissionEvent_Trigger == null) {
                    auto_gf_RunMissionEvent_Trigger = TriggerCreate(&quot;auto_gf_RunMissionEvent_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
            }
            bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
                fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
                // Implementation
                while (!((GameGetMissionTime() &gt;= lp_missionEventTime))) {
                    Wait(0.5, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_missionEventTrigger, true, false);
                }
                return true;
            }
            void gf_ConversationDefaultCommander (text lp_tEXT, fixed lp_duration) {
                // Implementation
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, false, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;TTosh03BNova00007&quot;, -1), StringExternal(&quot;Param/Value/D47127F2&quot;), lp_tEXT, lp_duration, c_transmissionDurationAdd, true, c_maxPlayers, false);
            }
            int gf_GetCargoSize (string lp_unitType) {
                string autoB5A9C5A3_val;
                // Variable Declarations
                const int lv_cargoSizeZergling = 1;
                const int lv_cargoSizeHydralisk = 2;
                const int lv_cargoSizeRoach = 2;
                const int lv_cargoSizeBaneling = 2;
                const int lv_cargoSizeRavager = 4;
                const int lv_cargoSizeInfestor = 2;
                const int lv_cargoSizeSwarmHost = 4;
                const int lv_cargoSizeUltralisk = 8;
                const int lv_cargoSizeLurker = 4;
                const int lv_cargoSizeAberration = 4;
                const int lv_cargoSizeMarine = 1;
                const int lv_cargoSizeMarau = 2;
                const int lv_cargoSizeGoliath = 2;
                const int lv_cargoSizeSiegeTank = 4;
                const int lv_cargoSizeThor = 8;
                const int lv_cargoSizeReaper = 1;
                const int lv_cargoSizeCyclon = 4;
                const int lv_cargoSizeGhost = 2;
                const int lv_cargoSizeSpectre = 2;
                const int lv_cargoSizeZealot = 2;
                const int lv_cargoSizeStalker = 2;
                const int lv_cargoSizeAdept = 2;
                const int lv_cargoSizeImmortal = 4;
                const int lv_cargoSizeReaver = 4;
                const int lv_cargoSizeArchon = 4;
                const int lv_cargoSizeDisruptor = 4;
                const int lv_cargoSizeHighTemplar = 2;
                const int lv_cargoSizeDarkTemplar = 2;
                // Variable Initialization
                // Implementation
                autoB5A9C5A3_val = lp_unitType;
                if (autoB5A9C5A3_val == &quot;Zergling&quot;) {
                    return lv_cargoSizeZergling;
                }
                else if (autoB5A9C5A3_val == &quot;Hydralisk&quot;) {
                    return lv_cargoSizeHydralisk;
                }
                else if (autoB5A9C5A3_val == &quot;Roach&quot;) {
                    return lv_cargoSizeRoach;
                }
                else if (autoB5A9C5A3_val == &quot;Baneling&quot;) {
                    return lv_cargoSizeBaneling;
                }
                else if (autoB5A9C5A3_val == &quot;Ravager&quot;) {
                    return lv_cargoSizeRavager;
                }
                else if (autoB5A9C5A3_val == &quot;Infestor&quot;) {
                    return lv_cargoSizeInfestor;
                }
                else if (autoB5A9C5A3_val == &quot;SwarmHostMP&quot;) {
                    return lv_cargoSizeSwarmHost;
                }
                else if (autoB5A9C5A3_val == &quot;Ultralisk&quot;) {
                    return lv_cargoSizeUltralisk;
                }
                else if (autoB5A9C5A3_val == &quot;LurkerMP&quot;) {
                    return lv_cargoSizeLurker;
                }
                else if (autoB5A9C5A3_val == &quot;InfestedAbomination&quot;) {
                    return lv_cargoSizeAberration;
                }
                else if (autoB5A9C5A3_val == &quot;Marine&quot;) {
                    return lv_cargoSizeMarine;
                }
                else if (autoB5A9C5A3_val == &quot;Marauder&quot;) {
                    return lv_cargoSizeMarau;
                }
                else if (autoB5A9C5A3_val == &quot;Goliath&quot;) {
                    return lv_cargoSizeGoliath;
                }
                else if (autoB5A9C5A3_val == &quot;SiegeTankSieged&quot;) {
                    return lv_cargoSizeSiegeTank;
                }
                else if (autoB5A9C5A3_val == &quot;Thor&quot;) {
                    return lv_cargoSizeThor;
                }
                else if (autoB5A9C5A3_val == &quot;Reaper&quot;) {
                    return lv_cargoSizeReaper;
                }
                else if (autoB5A9C5A3_val == &quot;Cyclone&quot;) {
                    return lv_cargoSizeCyclon;
                }
                else if (autoB5A9C5A3_val == &quot;Ghost&quot;) {
                    return lv_cargoSizeGhost;
                }
                else if (autoB5A9C5A3_val == &quot;Spectre&quot;) {
                    return lv_cargoSizeSpectre;
                }
                else if (autoB5A9C5A3_val == &quot;ZealotAiur&quot;) {
                    return lv_cargoSizeZealot;
                }
                else if (autoB5A9C5A3_val == &quot;Stalker&quot;) {
                    return lv_cargoSizeStalker;
                }
                else if (autoB5A9C5A3_val == &quot;Dragoon&quot;) {
                    return lv_cargoSizeStalker;
                }
                else if (autoB5A9C5A3_val == &quot;Adept&quot;) {
                    return lv_cargoSizeAdept;
                }
                else if (autoB5A9C5A3_val == &quot;Immortal&quot;) {
                    return lv_cargoSizeImmortal;
                }
                else if (autoB5A9C5A3_val == &quot;ImmortalAiur&quot;) {
                    return lv_cargoSizeImmortal;
                }
                else if (autoB5A9C5A3_val == &quot;Reaver&quot;) {
                    return lv_cargoSizeReaver;
                }
                else if (autoB5A9C5A3_val == &quot;Archon&quot;) {
                    return lv_cargoSizeArchon;
                }
                else if (autoB5A9C5A3_val == &quot;Disruptor&quot;) {
                    return lv_cargoSizeDisruptor;
                }
                else if (autoB5A9C5A3_val == &quot;HighTemplar&quot;) {
                    return lv_cargoSizeHighTemplar;
                }
                else if (autoB5A9C5A3_val == &quot;DarkTemplar&quot;) {
                    return lv_cargoSizeDarkTemplar;
                }
                else if (autoB5A9C5A3_val == &quot;DarkTemplarAiur&quot;) {
                    return lv_cargoSizeDarkTemplar;
                }
                else {
                    return 0;
                }
            }
            void gf_InsertCargo (int lp_zerglingNumber, int lp_roachNumber, int lp_hydraliskNumber, int lp_banelingNumber, int lp_ultraliskNumber, int lp_eAB6A4EBA9B8ECB6A9Number, int lp_eBB380ED9895ECB2B4Number, int lp_infestorNumber) {
                int autoC480BA2D_val;
                int autoA4FB282D_ae;
                int autoA4FB282D_ai;
                int autoF162C31E_ae;
                int autoF162C31E_ai;
                int auto9C86A740_ae;
                int auto9C86A740_ai;
                int autoEF3E6166_ae;
                int autoEF3E6166_ai;
                int auto74773EF7_ae;
                int auto74773EF7_ai;
                int auto72C25890_ae;
                int auto72C25890_ai;
                int auto35D648B1_ae;
                int auto35D648B1_ai;
                int autoE3E58869_ae;
                int autoE3E58869_ai;
                // Variable Declarations
                point lv_overlordSpawn;
                int lv_currentCargo;
                int lv_i;
                const int lv_maxCargoSize = 8;
                string lv_transporterType;
                string lv_cargoUnitType;
                int lv_cargoUnitCount;
                // Variable Initialization
                lv_transporterType = gf_SetUnitCaseByRace(&quot;VIPSOverlord&quot;, &quot;Medivac2&quot;, &quot;WarpPrism2&quot;);
                // Implementation
                autoC480BA2D_val = gv_airDestination;
                if (autoC480BA2D_val == 1) {
                    lv_overlordSpawn = PointFromId(187032815);
                }
                else if (autoC480BA2D_val == 2) {
                    lv_overlordSpawn = PointFromId(1658407762);
                }
                else if (autoC480BA2D_val == 3) {
                    lv_overlordSpawn = PointFromId(463907894);
                }
                else if (autoC480BA2D_val == 4) {
                    lv_overlordSpawn = PointFromId(642844534);
                }
                else if (autoC480BA2D_val == 5) {
                    lv_overlordSpawn = PointFromId(1608991287);
                }
                else {
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                gv_transporter[1] = UnitLastCreated();
                if ((lp_zerglingNumber &gt; 0)) {
                    lv_cargoUnitType = gf_ConvertAirCargoType(&quot;Zergling&quot;, gv_race);
                    lv_cargoUnitCount = CeilingI((lp_zerglingNumber * gf_ConvertAirCargoNumber(&quot;Zergling&quot;, gv_race)));
                    autoA4FB282D_ae = lv_cargoUnitCount;
                    autoA4FB282D_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoA4FB282D_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoA4FB282D_ae) || (autoA4FB282D_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoA4FB282D_ae) ) ; lv_i += autoA4FB282D_ai ) {
                        if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                        }
                        else {
                            gv_transporterINDEX = (gv_transporterINDEX + 1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                            gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                        }
                    }
                }
                lv_cargoUnitType = gf_ConvertAirCargoType(&quot;Roach&quot;, gv_race);
                lv_cargoUnitCount = CeilingI((lp_roachNumber * gf_ConvertAirCargoNumber(&quot;Roach&quot;, gv_race)));
                if ((lp_roachNumber &gt; 0)) {
                    autoF162C31E_ae = lv_cargoUnitCount;
                    autoF162C31E_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoF162C31E_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoF162C31E_ae) || (autoF162C31E_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoF162C31E_ae) ) ; lv_i += autoF162C31E_ai ) {
                        if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                        }
                        else {
                            gv_transporterINDEX = (gv_transporterINDEX + 1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                            gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                        }
                    }
                }
                lv_cargoUnitType = gf_ConvertAirCargoType(&quot;Hydralisk&quot;, gv_race);
                lv_cargoUnitCount = CeilingI((lp_hydraliskNumber * gf_ConvertAirCargoNumber(&quot;Hydralisk&quot;, gv_race)));
                if ((lp_hydraliskNumber &gt; 0)) {
                    auto9C86A740_ae = lv_cargoUnitCount;
                    auto9C86A740_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto9C86A740_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto9C86A740_ae) || (auto9C86A740_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto9C86A740_ae) ) ; lv_i += auto9C86A740_ai ) {
                        if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                        }
                        else {
                            gv_transporterINDEX = (gv_transporterINDEX + 1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                            gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                        }
                    }
                }
                lv_cargoUnitType = gf_ConvertAirCargoType(&quot;Baneling&quot;, gv_race);
                lv_cargoUnitCount = CeilingI((lp_banelingNumber * gf_ConvertAirCargoNumber(&quot;Baneling&quot;, gv_race)));
                if ((lp_banelingNumber &gt; 0)) {
                    autoEF3E6166_ae = lv_cargoUnitCount;
                    autoEF3E6166_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoEF3E6166_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoEF3E6166_ae) || (autoEF3E6166_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoEF3E6166_ae) ) ; lv_i += autoEF3E6166_ai ) {
                        if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                        }
                        else {
                            gv_transporterINDEX = (gv_transporterINDEX + 1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                            gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                        }
                    }
                }
                lv_cargoUnitType = gf_ConvertAirCargoType(&quot;Ultralisk&quot;, gv_race);
                lv_cargoUnitCount = CeilingI((lp_ultraliskNumber * gf_ConvertAirCargoNumber(&quot;Ultralisk&quot;, gv_race)));
                if ((lp_ultraliskNumber &gt; 0)) {
                    auto74773EF7_ae = lv_cargoUnitCount;
                    auto74773EF7_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto74773EF7_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto74773EF7_ae) || (auto74773EF7_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto74773EF7_ae) ) ; lv_i += auto74773EF7_ai ) {
                        if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                        }
                        else {
                            gv_transporterINDEX = (gv_transporterINDEX + 1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                            gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                        }
                    }
                }
                lv_cargoUnitType = gf_ConvertAirCargoType(&quot;Ravager&quot;, gv_race);
                lv_cargoUnitCount = CeilingI((lp_eAB6A4EBA9B8ECB6A9Number * gf_ConvertAirCargoNumber(&quot;Ravager&quot;, gv_race)));
                auto72C25890_ae = lv_cargoUnitCount;
                auto72C25890_ai = 1;
                lv_i = 1;
                for ( ; ( (auto72C25890_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto72C25890_ae) || (auto72C25890_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto72C25890_ae) ) ; lv_i += auto72C25890_ai ) {
                    if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                        UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                        lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                    }
                    else {
                        gv_transporterINDEX = (gv_transporterINDEX + 1);
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                        gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                        UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                        lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                    }
                }
                lv_cargoUnitType = gf_ConvertAirCargoType(&quot;InfestedAbomination&quot;, gv_race);
                lv_cargoUnitCount = CeilingI((lp_eBB380ED9895ECB2B4Number * gf_ConvertAirCargoNumber(&quot;InfestedAbomination&quot;, gv_race)));
                if ((lp_eBB380ED9895ECB2B4Number &gt; 0)) {
                    auto35D648B1_ae = lv_cargoUnitCount;
                    auto35D648B1_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto35D648B1_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto35D648B1_ae) || (auto35D648B1_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto35D648B1_ae) ) ; lv_i += auto35D648B1_ai ) {
                        if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                        }
                        else {
                            gv_transporterINDEX = (gv_transporterINDEX + 1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                            gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                        }
                    }
                }
                lv_cargoUnitType = gf_ConvertAirCargoType(&quot;Infestor&quot;, gv_race);
                lv_cargoUnitCount = CeilingI((lp_infestorNumber * gf_ConvertAirCargoNumber(&quot;Infestor&quot;, gv_race)));
                if ((lp_infestorNumber &gt; 0)) {
                    autoE3E58869_ae = lv_cargoUnitCount;
                    autoE3E58869_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoE3E58869_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE3E58869_ae) || (autoE3E58869_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE3E58869_ae) ) ; lv_i += autoE3E58869_ai ) {
                        if (((lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType)) &lt;= lv_maxCargoSize)) {
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = (lv_currentCargo + gf_GetCargoSize(lv_cargoUnitType));
                        }
                        else {
                            gv_transporterINDEX = (gv_transporterINDEX + 1);
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_transporterType, 0, gv_pLAYER_03_ENEMY, lv_overlordSpawn);
                            gv_transporter[gv_transporterINDEX] = UnitLastCreated();
                            UnitCargoCreate(gv_transporter[gv_transporterINDEX], lv_cargoUnitType, 1);
                            lv_currentCargo = gf_GetCargoSize(lv_cargoUnitType);
                        }
                    }
                }
            }
            string gf_ConvertAirCargoType (string lp_zergUnit, string lp_race) {
                string auto184C968D_val;
                // Implementation
                auto184C968D_val = lp_zergUnit;
                if (auto184C968D_val == &quot;Zergling&quot;) {
                    return gf_SetUnitCaseByRace(&quot;Zergling&quot;, &quot;Marine&quot;, &quot;ZealotAiur&quot;);
                }
                else if (auto184C968D_val == &quot;Roach&quot;) {
                    if ((RandomInt(1, 2) == 1)) {
                        return gf_SetUnitCaseByRace(&quot;Roach&quot;, &quot;Marauder&quot;, &quot;Stalker&quot;);
                    }
                    else {
                        return gf_SetUnitCaseByRace(&quot;Roach&quot;, &quot;Marauder&quot;, &quot;Dragoon&quot;);
                    }
                }
                else if (auto184C968D_val == &quot;Hydralisk&quot;) {
                    return gf_SetUnitCaseByRace(&quot;Hydralisk&quot;, &quot;Goliath&quot;, &quot;Adept&quot;);
                }
                else if (auto184C968D_val == &quot;Ultralisk&quot;) {
                    if ((RandomInt(1, 2) == 1)) {
                        return gf_SetUnitCaseByRace(&quot;Ultralisk&quot;, &quot;SiegeTank&quot;, &quot;ImmortalAiur&quot;);
                    }
                    else {
                        return gf_SetUnitCaseByRace(&quot;Ultralisk&quot;, &quot;Thor&quot;, &quot;Reaver&quot;);
                    }
                }
                else if (auto184C968D_val == &quot;Baneling&quot;) {
                    return gf_SetUnitCaseByRace(&quot;Baneling&quot;, &quot;Reaper&quot;, &quot;Archon&quot;);
                }
                else if (auto184C968D_val == &quot;Ravager&quot;) {
                    if ((RandomInt(1, 2) == 1)) {
                        return gf_SetUnitCaseByRace(&quot;Ravager&quot;, &quot;SiegeTank&quot;, &quot;Disruptor&quot;);
                    }
                    else {
                        return gf_SetUnitCaseByRace(&quot;Ravager&quot;, &quot;Cyclone&quot;, &quot;Archon&quot;);
                    }
                }
                else if (auto184C968D_val == &quot;Infestor&quot;) {
                    if ((RandomInt(1, 2) == 1)) {
                        return gf_SetUnitCaseByRace(&quot;Infestor&quot;, &quot;Ghost&quot;, &quot;HighTemplar&quot;);
                    }
                    else {
                        return gf_SetUnitCaseByRace(&quot;Infestor&quot;, &quot;Spectre&quot;, &quot;DarkTemplarAiur&quot;);
                    }
                }
                else {
                    return &quot;Marine&quot;;
                }
            }
            fixed gf_ConvertAirCargoNumber (string lp_zergUnit, string lp_race) {
                string autoA196E046_val;
                // Implementation
                autoA196E046_val = lp_zergUnit;
                if (autoA196E046_val == &quot;Zergling&quot;) {
                    return gf_SetNumberCaseByRace(1, 0.4, 0.4);
                }
                else if (autoA196E046_val == &quot;Roach&quot;) {
                    return gf_SetNumberCaseByRace(1, 0.6, 0.6);
                }
                else if (autoA196E046_val == &quot;Hydralisk&quot;) {
                    return gf_SetNumberCaseByRace(1, 0.6, 0.6);
                }
                else if (autoA196E046_val == &quot;Ultralisk&quot;) {
                    if ((RandomInt(1, 2) == 1)) {
                        return gf_SetNumberCaseByRace(1, 1.0, 1.5);
                    }
                    else {
                        return gf_SetNumberCaseByRace(1, 1.0, 1.5);
                    }
                }
                else if (autoA196E046_val == &quot;Baneling&quot;) {
                    return gf_SetNumberCaseByRace(1, 0.6, 0.2);
                }
                else if (autoA196E046_val == &quot;Ravager&quot;) {
                    if ((RandomInt(1, 2) == 1)) {
                        return gf_SetNumberCaseByRace(1, 0.5, 0.5);
                    }
                    else {
                        return gf_SetNumberCaseByRace(1, 1.0, 1.0);
                    }
                }
                else if (autoA196E046_val == &quot;Infestor&quot;) {
                    return gf_SetNumberCaseByRace(1, 2.0, 2.0);
                }
                else {
                    return 1.0;
                }
            }
            void gf_AirStrike (int lp_bucket) {
                int auto11C382DC_val;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                // Implementation
                auto11C382DC_val = lp_bucket;
                if (auto11C382DC_val == libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(8, 10, 12, 16), 0, 0, 0, 0, 0, 0, 0);
                }
                else if (auto11C382DC_val == libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(8, 16, 16, 16), gf_SetCountCasebyDifficulty(2, 2, 4, 4), 0, 0, 0, 0, 0, 0);
                }
                else if (auto11C382DC_val == libCOMI_ge_CoopAIAttackWaveBuckets__3Small) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(16, 16, 16, 16), gf_SetCountCasebyDifficulty(2, 4, 4, 4), gf_SetCountCasebyDifficulty(0, 0, 0, 4), 0, 0, 0, 0, 0);
                }
                else if (auto11C382DC_val == libCOMI_ge_CoopAIAttackWaveBuckets__4Medium) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(24, 24, 16, 24), gf_SetCountCasebyDifficulty(4, 4, 4, 8), gf_SetCountCasebyDifficulty(0, 2, 4, 4), 0, gf_SetCountCasebyDifficulty(0, 0, 0, 1), 0, 0, 0);
                }
                else if (auto11C382DC_val == libCOMI_ge_CoopAIAttackWaveBuckets__5Large) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(24, 24, 24, 32), gf_SetCountCasebyDifficulty(4, 4, 8, 8), gf_SetCountCasebyDifficulty(2, 4, 4, 8), gf_SetCountCasebyDifficulty(0, 0, 0, 4), gf_SetCountCasebyDifficulty(0, 0, 1, 2), 0, 0, 0);
                }
                else if (auto11C382DC_val == libCOMI_ge_CoopAIAttackWaveBuckets__6Larger) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(24, 32, 32, 40), gf_SetCountCasebyDifficulty(4, 4, 8, 8), gf_SetCountCasebyDifficulty(4, 4, 8, 8), gf_SetCountCasebyDifficulty(0, 0, 4, 8), gf_SetCountCasebyDifficulty(0, 0, 2, 2), gf_SetCountCasebyDifficulty(0, 0, 0, 2), 0, 0);
                }
                else if (auto11C382DC_val == libCOMI_ge_CoopAIAttackWaveBuckets__7Largest) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(32, 40, 40, 48), gf_SetCountCasebyDifficulty(4, 8, 8, 12), gf_SetCountCasebyDifficulty(4, 4, 8, 8), gf_SetCountCasebyDifficulty(0, 0, 8, 8), gf_SetCountCasebyDifficulty(0, 0, 2, 3), gf_SetCountCasebyDifficulty(0, 0, 2, 4), 0, 0);
                }
                else {
                }
            }
            void gf_AirStrikeLarge (int lp_bucket) {
                int auto13519EB9_val;
                // Variable Declarations
                int lv_i;
                const fixed lv_rATIO = 1.4;
                // Variable Initialization
                // Implementation
                auto13519EB9_val = lp_bucket;
                if (auto13519EB9_val == libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(CeilingI((8.0 * lv_rATIO)), CeilingI((10.0 * lv_rATIO)), CeilingI((12.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO))), 0, 0, 0, 0, 0, 0, 0);
                }
                else if (auto13519EB9_val == libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(CeilingI((8.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((2.0 * lv_rATIO)), CeilingI((2.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO))), 0, 0, 0, 0, 0, 0);
                }
                else if (auto13519EB9_val == libCOMI_ge_CoopAIAttackWaveBuckets__3Small) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(CeilingI((16.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((2.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, 0, CeilingI((4.0 * lv_rATIO))), 0, 0, 0, 0, 0);
                }
                else if (auto13519EB9_val == libCOMI_ge_CoopAIAttackWaveBuckets__4Medium) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(CeilingI((24.0 * lv_rATIO)), CeilingI((24.0 * lv_rATIO)), CeilingI((16.0 * lv_rATIO)), CeilingI((24.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, CeilingI((2.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO))), 0, gf_SetCountCasebyDifficulty(0, 0, 0, CeilingI((1.0 * lv_rATIO))), 0, 0, 0);
                }
                else if (auto13519EB9_val == libCOMI_ge_CoopAIAttackWaveBuckets__5Large) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(CeilingI((24.0 * lv_rATIO)), CeilingI((24.0 * lv_rATIO)), CeilingI((24.0 * lv_rATIO)), CeilingI((32.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((2.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, 0, CeilingI((4.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, CeilingI((1.0 * lv_rATIO)), CeilingI((2.0 * lv_rATIO))), 0, 0, 0);
                }
                else if (auto13519EB9_val == libCOMI_ge_CoopAIAttackWaveBuckets__6Larger) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(CeilingI((24.0 * lv_rATIO)), CeilingI((32.0 * lv_rATIO)), CeilingI((32.0 * lv_rATIO)), CeilingI((40.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, CeilingI((4.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, CeilingI((2.0 * lv_rATIO)), CeilingI((2.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, 0, CeilingI((2.0 * lv_rATIO))), 0, 0);
                }
                else if (auto13519EB9_val == libCOMI_ge_CoopAIAttackWaveBuckets__7Largest) {
                    gf_InsertCargo(gf_SetCountCasebyDifficulty(CeilingI((32.0 * lv_rATIO)), CeilingI((40.0 * lv_rATIO)), CeilingI((40.0 * lv_rATIO)), CeilingI((48.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((4.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO)), CeilingI((12.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(CeilingI((4.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, CeilingI((8.0 * lv_rATIO)), CeilingI((8.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, CeilingI((2.0 * lv_rATIO)), CeilingI((3.0 * lv_rATIO))), gf_SetCountCasebyDifficulty(0, 0, CeilingI((2.0 * lv_rATIO)), CeilingI((4.0 * lv_rATIO))), 0, 0);
                }
                else {
                }
            }
            void gf_SmartAttackSystem (int lp_eAB79CEBAAA8, int lp_eAB8B0EC88A0ECA095EB8F84) {
                int autoF0577945_ae;
                int autoF0577945_ai;
                int autoE8ED06B8_val;
                int auto284BBF20_ae;
                int auto284BBF20_ai;
                int autoBC19F970_ae;
                int autoBC19F970_ai;
                int autoF8EC334F_ae;
                int autoF8EC334F_ai;
                int auto0804CF27_val;
                // Variable Declarations
                int lv_i;
                int lv_intRandom;
                point lv_eC839DEC84B1ECA780;
                point lv_eAB2BDEC9CA0ECA7801;
                point lv_eAB2BDEC9CA0ECA7802;
                point lv_eAB2BDEC9CA0ECA7803;
                point lv_eB8F84ECB0A9ECA780;
                unitgroup lv_transporterWave;
                unitgroup lv_airStrikeArmy;
                int lv_maximumAirStrikeArrows;
                // Variable Initialization
                lv_eB8F84ECB0A9ECA780 = PointFromId(249);
                lv_transporterWave = UnitGroupEmpty();
                lv_airStrikeArmy = UnitGroupEmpty();
                // Implementation
                gv_transporterINDEX = 1;
                autoF0577945_ae = 30;
                autoF0577945_ai = 1;
                lv_i = 1;
                for ( ; ( (autoF0577945_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoF0577945_ae) || (autoF0577945_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoF0577945_ae) ) ; lv_i += autoF0577945_ai ) {
                    gv_transporter[lv_i] = null;
                }
                lv_intRandom = gf_LotteryBox();
                if ((gv_attackWavePathBucketIndex &gt;= 3)) {
                    while (((lv_intRandom == gv_attackWavePathBucket[(gv_attackWavePathBucketIndex - 1)]) || (lv_intRandom == gv_attackWavePathBucket[(gv_attackWavePathBucketIndex - 2)]))) {
                        lv_intRandom = gf_LotteryBox();
                    }
                }
                else {
                    if ((gv_attackWavePathBucketIndex &gt;= 2)) {
                        while (((lv_intRandom == gv_attackWavePathBucket[(gv_attackWavePathBucketIndex - 1)]))) {
                            lv_intRandom = gf_LotteryBox();
                        }
                    }
                }
                gv_attackWavePathBucket[gv_attackWavePathBucketIndex] = lv_intRandom;
                gv_attackWavePathBucketIndex = (gv_attackWavePathBucketIndex + 1);
                autoE8ED06B8_val = lv_intRandom;
                if (autoE8ED06B8_val == 1) {
                    lv_eC839DEC84B1ECA780 = PointFromId(187032815);
                    gv_airStrikeSpawn = PointFromId(187032815);
                    gv_airDestination = 1;
                    gf_AirStrike(lp_eAB79CEBAAA8);
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/3EFFA654&quot;));
                }
                else if (autoE8ED06B8_val == 2) {
                    if (((UnitCount(&quot;Nexus&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Nexus&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;CommandCenter&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;CommandCenter&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hatchery&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hatchery&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Lair&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Lair&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hive&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hive&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1))) {
                        lv_eC839DEC84B1ECA780 = PointFromId(1658407762);
                        gv_airStrikeSpawn = PointFromId(1658407762);
                        gv_airDestination = 2;
                        lv_eB8F84ECB0A9ECA780 = PointFromId(1018445328);
                        gf_AirStrikeLarge(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/FD15662A&quot;));
                    }
                    else {
                        lv_eC839DEC84B1ECA780 = PointFromId(187032815);
                        gv_airStrikeSpawn = PointFromId(187032815);
                        gv_airDestination = 1;
                        lv_eB8F84ECB0A9ECA780 = PointFromId(1553492140);
                        gf_AirStrike(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/7C9B09F7&quot;));
                    }
                }
                else if (autoE8ED06B8_val == 3) {
                    lv_eC839DEC84B1ECA780 = PointFromId(666261520);
                    lv_eAB2BDEC9CA0ECA7801 = PointFromId(978627658);
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/3FB33ECB&quot;));
                }
                else if (autoE8ED06B8_val == 4) {
                    lv_eC839DEC84B1ECA780 = PointFromId(666261520);
                    lv_eAB2BDEC9CA0ECA7801 = PointFromId(1950658432);
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/FA274C9B&quot;));
                }
                else if (autoE8ED06B8_val == 5) {
                    lv_eC839DEC84B1ECA780 = PointFromId(1703872879);
                    lv_eAB2BDEC9CA0ECA7801 = PointFromId(1596382329);
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/D3EC98AF&quot;));
                }
                else if (autoE8ED06B8_val == 6) {
                    lv_eC839DEC84B1ECA780 = PointFromId(1703872879);
                    lv_eAB2BDEC9CA0ECA7801 = PointFromId(1449348943);
                    lv_eAB2BDEC9CA0ECA7802 = PointFromId(1950658432);
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/654BF90B&quot;));
                }
                else if (autoE8ED06B8_val == 7) {
                    lv_eC839DEC84B1ECA780 = PointFromId(839761394);
                    lv_eAB2BDEC9CA0ECA7801 = PointFromId(1950658432);
                    lv_eAB2BDEC9CA0ECA7802 = PointFromId(978627658);
                    lv_eAB2BDEC9CA0ECA7802 = PointFromId(1596382329);
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/22D16DEA&quot;));
                }
                else if (autoE8ED06B8_val == 8) {
                    lv_eC839DEC84B1ECA780 = PointFromId(1703872879);
                    lv_eAB2BDEC9CA0ECA7801 = PointFromId(1950658432);
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/AAAD2A42&quot;));
                }
                else {
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                if ((lv_intRandom &gt;= 3)) {
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_03_ENEMY, lp_eAB79CEBAAA8, lp_eAB8B0EC88A0ECA095EB8F84, lv_eC839DEC84B1ECA780, true);
                }
                if (((lv_intRandom &gt;= 1) &amp;&amp; (lv_intRandom &lt;= 2))) {
                    auto284BBF20_ae = 20;
                    auto284BBF20_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto284BBF20_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto284BBF20_ae) || (auto284BBF20_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto284BBF20_ae) ) ; lv_i += auto284BBF20_ai ) {
                        if (((gv_hybridinAttackWave[lv_i] == &quot;HybridDestroyer&quot;) || (gv_hybridinAttackWave[lv_i] == &quot;HybridDominator&quot;) || (gv_hybridinAttackWave[lv_i] == &quot;HybridNemesis&quot;) || (gv_hybridinAttackWave[lv_i] == &quot;HybridReaver&quot;))) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, lv_eC839DEC84B1ECA780);
                            UnitGroupAdd(lv_airStrikeArmy, UnitLastCreated());
                        }
                        else if ((gv_hybridinAttackWave[lv_i] == &quot;HybridBehemoth&quot;)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, lv_eC839DEC84B1ECA780);
                            UnitGroupAdd(lv_airStrikeArmy, UnitLastCreated());
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, lv_eC839DEC84B1ECA780);
                            UnitGroupAdd(lv_airStrikeArmy, UnitLastCreated());
                        }
                        else if ((gv_hybridinAttackWave[lv_i] == null)) {
                        }
                    }
                }
                else {
                    autoBC19F970_ae = 20;
                    autoBC19F970_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoBC19F970_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoBC19F970_ae) || (autoBC19F970_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoBC19F970_ae) ) ; lv_i += autoBC19F970_ai ) {
                        if ((gv_hybridinAttackWave[lv_i] != null)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_hybridinAttackWave[lv_i], 0, gv_pLAYER_03_ENEMY, lv_eC839DEC84B1ECA780);
                            libCOMI_gf_AddAttackWaveUnitType(1, gv_hybridinAttackWave[lv_i]);
                        }
                    }
                }
                if ((lv_eAB2BDEC9CA0ECA7801 != null)) {
                    libCOMI_gf_AddAttackForceWaypoint(lv_eAB2BDEC9CA0ECA7801, false);
                }
                if ((lv_eAB2BDEC9CA0ECA7802 != null)) {
                    libCOMI_gf_AddAttackForceWaypoint(lv_eAB2BDEC9CA0ECA7801, false);
                }
                if ((lv_eAB2BDEC9CA0ECA7803 != null)) {
                    libCOMI_gf_AddAttackForceWaypoint(lv_eAB2BDEC9CA0ECA7801, false);
                }
                if ((lv_intRandom &gt;= 3)) {
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                }
                else {
                    autoF8EC334F_ae = 30;
                    autoF8EC334F_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoF8EC334F_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoF8EC334F_ae) || (autoF8EC334F_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoF8EC334F_ae) ) ; lv_i += autoF8EC334F_ai ) {
                        if ((gv_transporter[lv_i] != null)) {
                            UnitGroupAdd(lv_transporterWave, gv_transporter[lv_i]);
                        }
                    }
                    UnitGroupLoopBegin(lv_airStrikeArmy);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBaseMovementSpeed, 4.0);
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 4.0);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(lv_transporterWave);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBaseMovementSpeed, 4.0);
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 4.0);
                    }
                    UnitGroupLoopEnd();
                    auto0804CF27_val = gv_airDestination;
                    if (auto0804CF27_val == 1) {
                        UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;MedivacTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(1553492140)), c_orderQueueReplace);
                        UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueReplace);
                        lv_maximumAirStrikeArrows = 5;
                    }
                    else if (auto0804CF27_val == 2) {
                        UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;MedivacTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(1018445328)), c_orderQueueReplace);
                        UnitGroupLoopBegin(lv_airStrikeArmy);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitKill(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        lv_maximumAirStrikeArrows = 3;
                    }
                    else if (auto0804CF27_val == 3) {
                        UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;MedivacTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(438343757)), c_orderQueueReplace);
                        UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(236191240)), c_orderQueueReplace);
                        lv_maximumAirStrikeArrows = 8;
                    }
                    else if (auto0804CF27_val == 4) {
                        UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;MedivacTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(438343757)), c_orderQueueReplace);
                        UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(236191240)), c_orderQueueReplace);
                        lv_maximumAirStrikeArrows = 9;
                    }
                    else if (auto0804CF27_val == 5) {
                        UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;MedivacTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(438343757)), c_orderQueueReplace);
                        UnitGroupLoopBegin(lv_airStrikeArmy);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitKill(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        lv_maximumAirStrikeArrows = 13;
                    }
                    else {
                    }
                    TriggerExecute(gt_AirStrikeConversation, true, false);
                    gv_airStrikeLeaderUnitINDEX = (gv_airStrikeLeaderUnitINDEX + 1);
                    gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX] = gv_transporter[1];
                    PingCreate(PlayerGroupAll(), &quot;PingBaseAttack&quot;, UnitGetPosition(gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 45.0);
                    PingSetUnit(PingLastCreated(), gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX]);
                    PingSetTooltip(PingLastCreated(), StringExternal(&quot;Param/Value/7AD27746&quot;));
                    gv_airStrikePing[gv_airStrikeLeaderUnitINDEX] = PingLastCreated();
                    gf_DrawArrowsForAirstrikeTransporter(gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX], lv_eB8F84ECB0A9ECA780, Color(100.00, 0.00, 0.00));
                    TriggerExecute(gt_RemoveAirStrikePing, true, false);
                }
            }
            int gf_LotteryBox () {
                // Variable Declarations
                int lv_intRandom;
                // Variable Initialization
                // Implementation
                lv_intRandom = gf_SetCountCasebyDifficulty(RandomInt(3, 8), RandomInt(3, 8), gf_SetCountCasebyRound(RandomInt(3, 8), RandomInt(2, 8), RandomInt(2, 8), RandomInt(2, 8)), gf_SetCountCasebyRound(RandomInt(3, 8), RandomInt(1, 8), RandomInt(1, 8), RandomInt(1, 8)));
                return lv_intRandom;
            }
            trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
            trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
            fixed auto_gf_RunAttackWaveatMissionTime_lp_eC8B9CEAB084;
            int auto_gf_RunAttackWaveatMissionTime_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
            int auto_gf_RunAttackWaveatMissionTime_lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
            int auto_gf_RunAttackWaveatMissionTime_lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
            int auto_gf_RunAttackWaveatMissionTime_lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_eC8B9CEAB084, int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84, int lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898, int lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898, int lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898) {
                auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
                auto_gf_RunAttackWaveatMissionTime_lp_eC8B9CEAB084 = lp_eC8B9CEAB084;
                auto_gf_RunAttackWaveatMissionTime_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84 = lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
                auto_gf_RunAttackWaveatMissionTime_lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898 = lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
                auto_gf_RunAttackWaveatMissionTime_lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898 = lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
                auto_gf_RunAttackWaveatMissionTime_lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898 = lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
                if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
                    auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate(&quot;auto_gf_RunAttackWaveatMissionTime_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
            }
            bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
                fixed lp_eC8B9CEAB084 = auto_gf_RunAttackWaveatMissionTime_lp_eC8B9CEAB084;
                int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84 = auto_gf_RunAttackWaveatMissionTime_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
                int lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898 = auto_gf_RunAttackWaveatMissionTime_lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
                int lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898 = auto_gf_RunAttackWaveatMissionTime_lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
                int lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898 = auto_gf_RunAttackWaveatMissionTime_lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
                int autoF03EA7F4_ae;
                int autoF03EA7F4_ai;
                int autoE17F1752_ae;
                int autoE17F1752_ai;
                int auto4674601C_ae;
                int auto4674601C_ai;
                int auto5764E174_ae;
                int auto5764E174_ai;
                // Variable Declarations
                int lv_i;
                int lv_index;
                // Variable Initialization
                lv_index = 1;
                // Implementation
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == lp_eD95B4EB8BB9EB829CEC9DB4EB8F84)) {
                    while (!((lp_eC8B9CEAB084 &lt;= GameGetMissionTime()))) {
                        Wait(0.3, c_timeAI);
                    }
                    if ((libCOMI_gf_GameIsOver() == false)) {
                        autoF03EA7F4_ae = 20;
                        autoF03EA7F4_ai = 1;
                        lv_i = 1;
                        for ( ; ( (autoF03EA7F4_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoF03EA7F4_ae) || (autoF03EA7F4_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoF03EA7F4_ae) ) ; lv_i += autoF03EA7F4_ai ) {
                            gv_hybridinAttackWave[lv_i] = null;
                        }
                        if ((lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898 &gt; 0)) {
                            autoE17F1752_ae = lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
                            autoE17F1752_ai = 1;
                            lv_i = 1;
                            for ( ; ( (autoE17F1752_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE17F1752_ae) || (autoE17F1752_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE17F1752_ae) ) ; lv_i += autoE17F1752_ai ) {
                                gv_hybridinAttackWave[lv_index] = &quot;HybridDestroyer&quot;;
                                lv_index = (lv_index + 1);
                            }
                        }
                        if ((lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898 &gt; 0)) {
                            auto4674601C_ae = lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
                            auto4674601C_ai = 1;
                            lv_i = 1;
                            for ( ; ( (auto4674601C_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto4674601C_ae) || (auto4674601C_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto4674601C_ae) ) ; lv_i += auto4674601C_ai ) {
                                if ((RandomInt(0, 100) &lt; 50)) {
                                    gv_hybridinAttackWave[lv_index] = &quot;HybridNemesis&quot;;
                                    lv_index = (lv_index + 1);
                                }
                                else {
                                    gv_hybridinAttackWave[lv_index] = &quot;HybridReaver&quot;;
                                    lv_index = (lv_index + 1);
                                }
                            }
                        }
                        if ((lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898 &gt; 0)) {
                            auto5764E174_ae = lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
                            auto5764E174_ai = 1;
                            lv_i = 1;
                            for ( ; ( (auto5764E174_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto5764E174_ae) || (auto5764E174_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto5764E174_ae) ) ; lv_i += auto5764E174_ai ) {
                                gv_hybridinAttackWave[lv_index] = &quot;HybridBehemoth&quot;;
                                lv_index = (lv_index + 1);
                            }
                        }
                        TriggerExecute(lp_attackWave, true, false);
                    }
                }
                return true;
            }
            trigger gf_GetProperAttackTrigger (int lp_eAB79CEBAAA8) {
                int auto39AABFDD_val;
                // Implementation
                auto39AABFDD_val = lp_eAB79CEBAAA8;
                if (auto39AABFDD_val == libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest) {
                    return gt_TypeAttackWave1SMALLEST;
                }
                else if (auto39AABFDD_val == libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller) {
                    return gt_TypeAttackWave2SMALLER;
                }
                else if (auto39AABFDD_val == libCOMI_ge_CoopAIAttackWaveBuckets__3Small) {
                    return gt_TypeAttackWave3SMALL;
                }
                else if (auto39AABFDD_val == libCOMI_ge_CoopAIAttackWaveBuckets__4Medium) {
                    return gt_TypeAttackWave4MEDIUM;
                }
                else if (auto39AABFDD_val == libCOMI_ge_CoopAIAttackWaveBuckets__5Large) {
                    return gt_TypeAttackWave5LARGE;
                }
                else if (auto39AABFDD_val == libCOMI_ge_CoopAIAttackWaveBuckets__6Larger) {
                    return gt_TypeAttackWave6LARGER;
                }
                else if (auto39AABFDD_val == libCOMI_ge_CoopAIAttackWaveBuckets__7Largest) {
                    return gt_TypeAttackWave7LARGEST;
                }
                else {
                    return gt_TypeAttackWaveerror;
                }
            }
            string gf_GetRandomPath () {
                // Variable Declarations
                int lv_randomInt;
                // Variable Initialization
                // Implementation
                if ((RandomInt(0, 100) &lt; 50)) {
                    if ((RandomInt(0, 100) &lt; 50)) {
                        return &quot;A&quot;;
                    }
                    else {
                        return &quot;B&quot;;
                    }
                }
                else {
                    if ((RandomInt(0, 100) &lt; 50)) {
                        return &quot;C&quot;;
                    }
                    else {
                        return &quot;D&quot;;
                    }
                }
            }
            void gf_DrawArrowsBetweenPoints (point lp_eC8B9CEC9E91, point lp_eB8F84ECB0A9, fixed lp_eAB084EAB2A9, fixed lp_eCA780EC868DEC8B9CEAB084, fixed lp_eD9994EC82B4ED919CED81ACEAB8B0, color lp_eC8389EC8381) {
                int auto1B065C07_ae;
                int auto1B065C07_ai;
                // Variable Declarations
                fixed lv_distanceBetweenStartandEnd;
                int lv_countofArrows;
                fixed lv_basicDistance;
                fixed lv_angle;
                point lv_currentArrowPoint;
                int lv_i;
                // Variable Initialization
                // Implementation
                lv_distanceBetweenStartandEnd = DistanceBetweenPoints(lp_eC8B9CEC9E91, lp_eB8F84ECB0A9);
                lv_countofArrows = (TruncI((lv_distanceBetweenStartandEnd / lp_eAB084EAB2A9)) - 1);
                lv_basicDistance = (lv_distanceBetweenStartandEnd / (lv_countofArrows + 1));
                lv_angle = AngleBetweenPoints(lp_eC8B9CEC9E91, lp_eB8F84ECB0A9);
                auto1B065C07_ae = lv_countofArrows;
                auto1B065C07_ai = 1;
                lv_i = 1;
                for ( ; ( (auto1B065C07_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto1B065C07_ae) || (auto1B065C07_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto1B065C07_ae) ) ; lv_i += auto1B065C07_ai ) {
                    lv_currentArrowPoint = libNtve_gf_PointOffsetTowardsPoint(lp_eC8B9CEC9E91, (lv_basicDistance * lv_i), lp_eB8F84ECB0A9);
                    PingCreate(PlayerGroupAll(), &quot;PingArrow&quot;, lv_currentArrowPoint, lp_eC8389EC8381, lp_eCA780EC868DEC8B9CEAB084);
                    PingSetScale(PingLastCreated(), lp_eD9994EC82B4ED919CED81ACEAB8B0);
                    PingSetRotation(PingLastCreated(), lv_angle);
                }
            }
            void gf_DrawArrowsForAirstrikeTransporter (unit lp_transporter, point lp_destionation, color lp_color) {
                // Implementation
                while (((UnitIsAlive(lp_transporter) == true) &amp;&amp; (libNtve_gf_UnitInRegion(lp_transporter, RegionCircle(lp_destionation, 10.0)) == false))) {
                    gf_DrawArrowsBetweenPoints(UnitGetPosition(lp_transporter), lp_destionation, 12.0, 3.0, 0.75, lp_color);
                    Wait(3.0, c_timeGame);
                }
            }
            fixed gf_GetUnitHealthPercent (unit lp_unit) {
                // Variable Declarations
                fixed lv_currentHitpoints;
                fixed lv_defaultHitpoints;
                // Variable Initialization
                // Implementation
                lv_currentHitpoints = (UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent));
                lv_defaultHitpoints = (gf_CalcKronoshitpoint() + 100.0);
                return ((lv_currentHitpoints / lv_defaultHitpoints) * 100.0);
            }
            bool gf_UnitHealthCheck (unit lp_unit, fixed lp_min, fixed lp_max) {
                // Variable Declarations
                fixed lv_currentHitpoints;
                // Variable Initialization
                // Implementation
                lv_currentHitpoints = gf_GetUnitHealthPercent(lp_unit);
                if (((lv_currentHitpoints &gt;= lp_min) &amp;&amp; (lv_currentHitpoints &lt; lp_max))) {
                    return true;
                }
                else {
                    return false;
                }
            }
            unitgroup gf_GetTargetUnitCandidates (unit lp_caster, fixed lp_region, unitfilter lp_filter) {
                // Variable Declarations
                unitgroup lv_candidates;
                // Variable Initialization
                lv_candidates = UnitGroupEmpty();
                // Implementation
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_caster), lp_region), lp_filter, 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupAdd(lv_candidates, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_caster), lp_region), lp_filter, 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupAdd(lv_candidates, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return lv_candidates;
            }
            bool gf_GetKronosSkillDeathPenaltyOrStorm () {
                // Variable Declarations
                int lv_scoreDeathPenalty;
                int lv_scoreStorm;
                // Variable Initialization
                // Implementation
                UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, 12.0, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter((1 &lt;&lt; c_targetFilterLight), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_02_USER, UnitFilter((1 &lt;&lt; c_targetFilterLight), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                        lv_scoreStorm = (lv_scoreStorm + RoundI((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropNormal) + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropNormal))));
                    }
                    else {
                        if (((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter((1 &lt;&lt; c_targetFilterMassive), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_02_USER, UnitFilter((1 &lt;&lt; c_targetFilterMassive), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                            lv_scoreDeathPenalty = (lv_scoreDeathPenalty + RoundI((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropNormal) + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropNormal))));
                        }
                        else {
                            if (((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter((1 &lt;&lt; c_targetFilterArmored), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_02_USER, UnitFilter((1 &lt;&lt; c_targetFilterArmored), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                                if ((RandomInt(1, 2) == 1)) {
                                    lv_scoreDeathPenalty = (lv_scoreDeathPenalty + RoundI((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropNormal) + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropNormal))));
                                }
                                else {
                                    lv_scoreStorm = (lv_scoreStorm + RoundI((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropNormal) + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropNormal))));
                                }
                            }
                        }
                    }
                }
                UnitGroupLoopEnd();
                if ((lv_scoreDeathPenalty &gt; lv_scoreStorm)) {
                    return true;
                }
                else {
                    if ((lv_scoreDeathPenalty &lt; lv_scoreStorm)) {
                        return false;
                    }
                    else {
                        if ((RandomInt(1, 2) == 1)) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            bool gf_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598EB8299ED9598EBB08FEBB680EC8898EB8F99EC9E91 (unit lp_satellite) {
                // Variable Declarations
                int lv_deathline;
                actor lv_explosion;
                // Variable Initialization
                lv_deathline = 200;
                // Implementation
                while (!((UnitGetHeight(lp_satellite) &lt;= 1.2))) {
                    Wait(0.5, c_timeGame);
                }
                libNtve_gf_CreateModelAtPoint(&quot;EvoNukeExplode&quot;, UnitGetPosition(lp_satellite));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Odin_NukeExplode&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_satellite), 0.0, 200.0, 0.0);
                CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 6.0);
                CameraShakeStart(gv_pLAYER_02_USER, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 6.0);
                if ((gv_isEndingSceneStarted == false)) {
                    lv_deathline = gf_SetCountCasebyDifficulty(200, 300, 400, 500);
                }
                else {
                    lv_deathline = 10;
                }
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_satellite), 8.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32)) | (1 &lt;&lt; (c_targetFilterStunned - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropCurrent)) &lt;= lv_deathline)) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    else {
                        if ((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true)) {
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - lv_deathline));
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, 0.0);
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 0.0);
                        }
                        else {
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, 1.0);
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, 1.0);
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 1.0);
                        }
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_satellite), 10.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if (((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropCurrent)) &lt;= lv_deathline)) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    else {
                        if ((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_02_USER, UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true)) {
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - lv_deathline));
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, 0.0);
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 0.0);
                        }
                        else {
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, 1.0);
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, 1.0);
                            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, 1.0);
                        }
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            void gf_KronosEBB688EAB8B0EB91A5Basic (bool lp_isCross, fixed lp_term) {
                int autoDF85CCF0_ae;
                int autoDF85CCF0_ai;
                int auto05BFB083_ae;
                int auto05BFB083_ai;
                int auto7ED757A9_ae;
                int auto7ED757A9_ai;
                int autoA751520C_ae;
                int autoA751520C_ai;
                int auto6095FD36_ae;
                int auto6095FD36_ai;
                int autoE2DDC0A5_ae;
                int autoE2DDC0A5_ai;
                int autoB897C6BB_ae;
                int autoB897C6BB_ai;
                // Variable Declarations
                point[5] lv_target;
                fixed lv_distance;
                fixed lv_kronosAngle;
                fixed lv_arrowWidth;
                int lv_arrowRepeatCount;
                unit[5] lv_pillar;
                const fixed lv_arrowAnglePatched = 0.0;
                point lv_startPoint;
                point[5] lv_startPoint2;
                actor[51] lv_alertModelLocal;
                int lv_i;
                int lv_j;
                int lv_k;
                // Variable Initialization
                lv_distance = 15.0;
                lv_arrowWidth = 2.8;
                lv_j = 1;
                lv_k = 1;
                // Implementation
                lv_startPoint = UnitGetPosition(gv_kronos);
                if ((lp_isCross == true)) {
                    auto05BFB083_ae = 4;
                    auto05BFB083_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto05BFB083_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto05BFB083_ae) || (auto05BFB083_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto05BFB083_ae) ) ; lv_i += auto05BFB083_ai ) {
                        lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_i * 90.0));
                    }
                }
                else {
                    autoDF85CCF0_ae = 4;
                    autoDF85CCF0_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoDF85CCF0_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoDF85CCF0_ae) || (autoDF85CCF0_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoDF85CCF0_ae) ) ; lv_i += autoDF85CCF0_ai ) {
                        lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, ((lv_i * 90.0) + 45.0));
                    }
                }
                lv_arrowRepeatCount = TruncI((lv_distance / lv_arrowWidth));
                auto7ED757A9_ae = 4;
                auto7ED757A9_ai = 1;
                lv_k = 1;
                for ( ; ( (auto7ED757A9_ai &gt;= 0 &amp;&amp; lv_k &lt;= auto7ED757A9_ae) || (auto7ED757A9_ai &lt;= 0 &amp;&amp; lv_k &gt;= auto7ED757A9_ae) ) ; lv_k += auto7ED757A9_ai ) {
                    autoA751520C_ae = lv_arrowRepeatCount;
                    autoA751520C_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoA751520C_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoA751520C_ae) || (autoA751520C_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoA751520C_ae) ) ; lv_i += autoA751520C_ai ) {
                        if ((lv_i == 1)) {
                            libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadLaunch&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_startPoint, (lv_i * lv_arrowWidth), lv_target[lv_k]));
                        }
                        else {
                            if ((lv_i == lv_arrowRepeatCount)) {
                                libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadImpact&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_startPoint, (lv_i * lv_arrowWidth), lv_target[lv_k]));
                            }
                            else {
                                libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadCenter&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_startPoint, (lv_i * lv_arrowWidth), lv_target[lv_k]));
                            }
                        }
                        libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), (AngleBetweenPoints(lv_startPoint, lv_target[lv_k]) + lv_arrowAnglePatched));
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 1.500000&quot;);
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTintColor 255,0,0&quot;);
                        lv_alertModelLocal[lv_j] = libNtve_gf_ActorLastCreated();
                        lv_j = (lv_j + 1);
                    }
                }
                Wait(lp_term, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[1] = UnitLastCreated();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[2] = UnitLastCreated();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[3] = UnitLastCreated();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[4] = UnitLastCreated();
                auto6095FD36_ae = 4;
                auto6095FD36_ai = 1;
                lv_i = 1;
                for ( ; ( (auto6095FD36_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto6095FD36_ae) || (auto6095FD36_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto6095FD36_ae) ) ; lv_i += auto6095FD36_ai ) {
                    UnitIssueOrder(lv_pillar[lv_i], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_target[lv_i]), c_orderQueueReplace);
                }
                TimerStart(gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0Timer[gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0TimerINDEX], 8.0, false, c_timeGame);
                gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0TimerINDEX = (gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0TimerINDEX + 1);
                while (!(((libNtve_gf_UnitInRegion(lv_pillar[1], RegionCircle(lv_target[1], 0.5)) == true) || (libNtve_gf_UnitInRegion(lv_pillar[2], RegionCircle(lv_target[2], 0.5)) == true) || (libNtve_gf_UnitInRegion(lv_pillar[3], RegionCircle(lv_target[3], 0.5)) == true) || (libNtve_gf_UnitInRegion(lv_pillar[4], RegionCircle(lv_target[4], 0.5)) == true) || (TimerGetRemaining(gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0Timer[(gv_kronosEBB688EAB8B0EB91A5ECA09CEAB1B0TimerINDEX - 1)]) &lt;= 1.234)))) {
                    Wait(0.5, c_timeGame);
                }
                autoE2DDC0A5_ae = 4;
                autoE2DDC0A5_ai = 1;
                lv_i = 1;
                for ( ; ( (autoE2DDC0A5_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE2DDC0A5_ae) || (autoE2DDC0A5_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE2DDC0A5_ae) ) ; lv_i += autoE2DDC0A5_ai ) {
                    UnitKill(lv_pillar[lv_i]);
                }
                autoB897C6BB_ae = 50;
                autoB897C6BB_ai = 1;
                lv_i = 1;
                for ( ; ( (autoB897C6BB_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB897C6BB_ae) || (autoB897C6BB_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB897C6BB_ae) ) ; lv_i += autoB897C6BB_ai ) {
                    libNtve_gf_KillModel(lv_alertModelLocal[lv_i]);
                }
            }
            void gf_KronosEBB688EAB8B0EB91A5ED9994EC97BCEC839DEC84B1 (unit lp_pillar, point lp_destination) {
                int auto4F69A7EF_ae;
                int auto4F69A7EF_ai;
                int auto9E22DE5F_ae;
                int auto9E22DE5F_ai;
                // Variable Declarations
                fixed lv_distance;
                fixed lv_term;
                const fixed lv_flameWidth = 3.0;
                int lv_flameCount;
                actor[31] lv_flames;
                int lv_i;
                // Variable Initialization
                // Implementation
                while ((libNtve_gf_UnitInRegion(lp_pillar, RegionCircle(lp_destination, 0.5)) == false)) {
                    auto4F69A7EF_ae = 30;
                    auto4F69A7EF_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto4F69A7EF_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto4F69A7EF_ae) || (auto4F69A7EF_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto4F69A7EF_ae) ) ; lv_i += auto4F69A7EF_ai ) {
                        libNtve_gf_KillModel(lv_flames[lv_i]);
                    }
                    lv_distance = DistanceBetweenPoints(UnitGetPosition(gv_kronos), UnitGetPosition(lp_pillar));
                    lv_flameCount = TruncI((lv_distance / lv_flameWidth));
                    lv_term = (lv_distance / lv_flameCount);
                    auto9E22DE5F_ae = lv_flameCount;
                    auto9E22DE5F_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto9E22DE5F_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto9E22DE5F_ae) || (auto9E22DE5F_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto9E22DE5F_ae) ) ; lv_i += auto9E22DE5F_ai ) {
                        libNtve_gf_CreateModelAtPoint(&quot;MutatorScorchedEarthFireBeamLargeModel&quot;, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), (lv_term * lv_i), UnitGetPosition(lp_pillar)));
                        libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Stand&quot;, c_animFlagPlayForever, c_animTimeDefault);
                        lv_flames[lv_i] = libNtve_gf_ActorLastCreated();
                    }
                    Wait(3.0, c_timeGame);
                }
            }
            void gf_KronosEBB688EAB8B0EB91A5EAB8B0EB91A5ECA09CEAB1B0 (unit lp_pillar, point lp_destination) {
                int autoD4425E45_ae;
                int autoD4425E45_ai;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                // Implementation
                while (!((libNtve_gf_UnitInRegion(lp_pillar, RegionCircle(lp_destination, 0.5)) == true))) {
                    Wait(0.5, c_timeGame);
                }
                UnitKill(lp_pillar);
                autoD4425E45_ae = 50;
                autoD4425E45_ai = 1;
                lv_i = 1;
                for ( ; ( (autoD4425E45_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoD4425E45_ae) || (autoD4425E45_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoD4425E45_ae) ) ; lv_i += autoD4425E45_ai ) {
                    if ((gv_kronosEBB688EAB8B0EB91A5AlertModel2[lv_i] != null)) {
                        libNtve_gf_KillModel(gv_kronosEBB688EAB8B0EB91A5AlertModel2[lv_i]);
                    }
                }
            }
            void gf_KronosStateAddState (int lp_state) {
                int auto6170F005_ae;
                int auto6170F005_ai;
                int auto8993FA42_val;
                int auto80450587_val;
                // Variable Declarations
                const int lv_size = 80;
                const int lv_term = 15;
                const int lv_positionY = 200;
                int lv_i;
                int lv_lastButtonINDEX;
                int lv_lastButtonPositionX;
                const int lv_imageSizeDiffer = 30;
                int lv_vOIDMAGICGUARDpercent;
                // Variable Initialization
                // Implementation
                if ((lp_state &gt; 9)) {
                }
                auto6170F005_ae = 50;
                auto6170F005_ai = 1;
                lv_i = 1;
                for ( ; ( (auto6170F005_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto6170F005_ae) || (auto6170F005_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto6170F005_ae) ) ; lv_i += auto6170F005_ai ) {
                    if ((gv_kronosStateButtons[lv_i] != c_invalidDialogId)) {
                        gf_KronosStateMoveStateLeft(lv_i, RoundI(((lv_size / 2.0) + (lv_term / 2.0))));
                        lv_lastButtonINDEX = lv_i;
                    }
                }
                if ((lv_lastButtonINDEX == 0)) {
                    lv_lastButtonPositionX = 0;
                    DialogCreate(lv_size, lv_size, c_anchorTop, 0, lv_positionY, true);
                }
                else {
                    lv_lastButtonPositionX = DialogGetOffsetX(gv_kronosStateButtons[lv_lastButtonINDEX]);
                    DialogCreate(lv_size, lv_size, c_anchorTop, (lv_lastButtonPositionX + lv_size + lv_term), lv_positionY, true);
                }
                auto8993FA42_val = lp_state;
                if (auto8993FA42_val == 1) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/3D9E8292&quot;), &quot;Satellite Drop\\Satellite Drop Icon.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 1;
                }
                else if (auto8993FA42_val == 2) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/AEC48B9B&quot;), &quot;Bloody Imprison\\Bloody Imprison Icon.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 2;
                }
                else if (auto8993FA42_val == 3) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/B4EC00EE&quot;), &quot;Assets\\Textures\\btn-ability-protoss-psistorm.dds&quot;, c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 3;
                }
                else if (auto8993FA42_val == 4) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/EF13AE19&quot;), &quot;Death Penalty Icon 2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 4;
                }
                else if (auto8993FA42_val == 5) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/8ACF37CE&quot;), &quot;Assets\\Textures\\ui_tipicon_campaign_exp02-focusfire.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 5;
                }
                else if (auto8993FA42_val == 7) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/8FE196C8&quot;), &quot;Iron Shield.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 7;
                }
                else if (auto8993FA42_val == 8) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/3E5E97E2&quot;), &quot;Scene05_2ndKRONOSdead\\Void Sniping Icon.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 8;
                }
                else if (auto8993FA42_val == 9) {
                    auto80450587_val = gv_kronoscycle;
                    if (auto80450587_val == 2) {
                        lv_vOIDMAGICGUARDpercent = 10;
                    }
                    else if (auto80450587_val == 3) {
                        lv_vOIDMAGICGUARDpercent = 15;
                    }
                    else if (auto80450587_val == 4) {
                        lv_vOIDMAGICGUARDpercent = 20;
                    }
                    else {
                    }
                    TextExpressionSetToken(&quot;Param/Expression/E2D7A3BF&quot;, &quot;A&quot;, IntToText(lv_vOIDMAGICGUARDpercent));
                    TextExpressionSetToken(&quot;Param/Expression/E2D7A3BF&quot;, &quot;B&quot;, IntToText(20));
                    TextExpressionSetToken(&quot;Param/Expression/E2D7A3BF&quot;, &quot;C&quot;, IntToText(20));
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, TextExpressionAssemble(&quot;Param/Expression/E2D7A3BF&quot;), &quot;Assets\\Textures\\btn-ability-protoss-voidarmor.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 9;
                }
                else {
                }
                DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
                gv_kronosStateButtons[(lv_lastButtonINDEX + 1)] = DialogLastCreated();
            }
            void gf_KronosStateAddState2 (int lp_stateType, int lp_kronosStateButtonSetNum) {
                int auto75B4F520_ae;
                int auto75B4F520_ai;
                int autoC08780E9_val;
                int autoC25ABC24_val;
                // Variable Declarations
                const int lv_size = 80;
                const int lv_term = 15;
                const int lv_positionY = 200;
                int lv_i;
                int lv_lastButtonINDEX;
                int lv_lastButtonPositionX;
                const int lv_imageSizeDiffer = 30;
                int lv_vOIDMAGICGUARDpercent;
                // Variable Initialization
                // Implementation
                if ((lp_stateType &gt; 10)) {
                }
                auto75B4F520_ae = 5;
                auto75B4F520_ai = 1;
                lv_i = 1;
                for ( ; ( (auto75B4F520_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto75B4F520_ae) || (auto75B4F520_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto75B4F520_ae) ) ; lv_i += auto75B4F520_ai ) {
                    if ((gv_kronosStateButtonSet[lp_kronosStateButtonSetNum][lv_i] != c_invalidDialogId)) {
                        gf_KronosStateMoveStateLeft2(lp_kronosStateButtonSetNum, lv_i, RoundI(((lv_size / 2.0) + (lv_term / 2.0))));
                        lv_lastButtonINDEX = lv_i;
                    }
                }
                if ((lv_lastButtonINDEX == 0)) {
                    lv_lastButtonPositionX = 0;
                    DialogCreate(lv_size, lv_size, c_anchorTop, 0, lv_positionY, true);
                }
                else {
                    lv_lastButtonPositionX = DialogGetOffsetX(gv_kronosStateButtonSet[lp_kronosStateButtonSetNum][lv_lastButtonINDEX]);
                    DialogCreate(lv_size, lv_size, c_anchorTop, (lv_lastButtonPositionX + lv_size + lv_term), lv_positionY, true);
                }
                autoC08780E9_val = lp_stateType;
                if (autoC08780E9_val == 1) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/0F2D0133&quot;), &quot;Assets\\Textures\\talent-raynor-level08-orbitaldroppods.dds&quot;, c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 1;
                }
                else if (autoC08780E9_val == 2) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/98DCC003&quot;), &quot;Assets\\Textures\\btn-tips-researchunlocked.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 2;
                }
                else if (autoC08780E9_val == 3) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/BDB8CD57&quot;), &quot;Assets\\Textures\\btn-ability-protoss-psistorm.dds&quot;, c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 3;
                }
                else if (autoC08780E9_val == 4) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/5B77CE52&quot;), &quot;Assets\\Textures\\btn-ability-zerg-plague.dds&quot;, c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 4;
                }
                else if (autoC08780E9_val == 5) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/7611DB7B&quot;), &quot;Wyvern New.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 5;
                }
                else if (autoC08780E9_val == 7) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/4A988115&quot;), &quot;Assets\\Textures\\btn-tips-terran-psishield.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 7;
                }
                else if (autoC08780E9_val == 8) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/D73D480D&quot;), &quot;Assets\\Textures\\btn-ability-terran-ignorearmor.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 8;
                }
                else if (autoC08780E9_val == 9) {
                    autoC25ABC24_val = gv_kronoscycle;
                    if (autoC25ABC24_val == 2) {
                        lv_vOIDMAGICGUARDpercent = 10;
                    }
                    else if (autoC25ABC24_val == 3) {
                        lv_vOIDMAGICGUARDpercent = 15;
                    }
                    else if (autoC25ABC24_val == 4) {
                        lv_vOIDMAGICGUARDpercent = 20;
                    }
                    else {
                    }
                    TextExpressionSetToken(&quot;Param/Expression/B1D7B3C7&quot;, &quot;A&quot;, IntToText(lv_vOIDMAGICGUARDpercent));
                    TextExpressionSetToken(&quot;Param/Expression/B1D7B3C7&quot;, &quot;B&quot;, IntToText(20));
                    TextExpressionSetToken(&quot;Param/Expression/B1D7B3C7&quot;, &quot;C&quot;, IntToText(20));
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, TextExpressionAssemble(&quot;Param/Expression/B1D7B3C7&quot;), &quot;Assets\\Textures\\btn-ability-protoss-voidarmor.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateMAGICGUARDitem = DialogControlLastCreated();
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 9;
                }
                else if (autoC08780E9_val == 10) {
                    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_size - lv_imageSizeDiffer), (lv_size - lv_imageSizeDiffer), c_anchorCenter, 0, 0, StringExternal(&quot;Param/Value/5B78865F&quot;), &quot;A Pillar of Fire.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_kronosStateButtonsType[(lv_lastButtonINDEX + 1)] = 8;
                }
                else {
                }
                gv_kronosStateButtonSet[lp_kronosStateButtonSetNum][(lv_lastButtonINDEX + 1)] = DialogLastCreated();
            }
            void gf_KronosStateMoveStateLeft (int lp_iNDEX, int lp_positionXRelative) {
                // Implementation
                DialogSetPosition(gv_kronosStateButtons[lp_iNDEX], c_anchorTop, (DialogGetOffsetX(gv_kronosStateButtons[lp_iNDEX]) - lp_positionXRelative), DialogGetOffsetY(gv_kronosStateButtons[lp_iNDEX]));
            }
            void gf_KronosStateMoveStateLeft2 (int lp_kronosStateButtonSetNum, int lp_iNDEX, int lp_positionXRelative) {
                // Implementation
                DialogSetPosition(gv_kronosStateButtonSet[lp_kronosStateButtonSetNum][lp_iNDEX], c_anchorTop, (DialogGetOffsetX(gv_kronosStateButtonSet[lp_kronosStateButtonSetNum][lp_iNDEX]) - lp_positionXRelative), DialogGetOffsetY(gv_kronosStateButtonSet[lp_kronosStateButtonSetNum][lp_iNDEX]));
            }
            void gf_KronosStateRemoveStates () {
                int auto7DF8B25B_ae;
                int auto7DF8B25B_ai;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                // Implementation
                auto7DF8B25B_ae = 50;
                auto7DF8B25B_ai = 1;
                lv_i = 1;
                for ( ; ( (auto7DF8B25B_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto7DF8B25B_ae) || (auto7DF8B25B_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto7DF8B25B_ae) ) ; lv_i += auto7DF8B25B_ai ) {
                    if ((gv_kronosStateButtons[lv_i] != c_invalidDialogId)) {
                        DialogSetVisible(gv_kronosStateButtons[lv_i], PlayerGroupAll(), false);
                        DialogDestroy(gv_kronosStateButtons[lv_i]);
                        gv_kronosStateButtons[lv_i] = c_invalidDialogId;
                    }
                }
            }
            void gf_KronosStateRemoveStates2 () {
                int autoB3E68B89_ae;
                int autoB3E68B89_ai;
                int auto046984A8_ae;
                int auto046984A8_ai;
                // Variable Declarations
                int lv_i;
                int lv_j;
                // Variable Initialization
                // Implementation
                autoB3E68B89_ae = 10;
                autoB3E68B89_ai = 1;
                lv_i = 1;
                for ( ; ( (autoB3E68B89_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB3E68B89_ae) || (autoB3E68B89_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB3E68B89_ae) ) ; lv_i += autoB3E68B89_ai ) {
                    auto046984A8_ae = 5;
                    auto046984A8_ai = 1;
                    lv_j = 1;
                    for ( ; ( (auto046984A8_ai &gt;= 0 &amp;&amp; lv_j &lt;= auto046984A8_ae) || (auto046984A8_ai &lt;= 0 &amp;&amp; lv_j &gt;= auto046984A8_ae) ) ; lv_j += auto046984A8_ai ) {
                        DialogSetVisible(gv_kronosStateButtonSet[lv_i][lv_j], PlayerGroupAll(), false);
                    }
                }
            }
            void gf_KronosStateShowState (int lp_type) {
                int autoEED95802_ae;
                int autoEED95802_ai;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                // Implementation
                autoEED95802_ae = 5;
                autoEED95802_ai = 1;
                lv_i = 1;
                for ( ; ( (autoEED95802_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoEED95802_ae) || (autoEED95802_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoEED95802_ae) ) ; lv_i += autoEED95802_ai ) {
                    DialogSetVisible(gv_kronosStateButtonSet[lp_type][lv_i], libCOMI_gf_HumanPlayers(), true);
                }
            }
            int gf_CalcKronoshitpoint () {
                int autoB2CD89A1_val;
                // Variable Declarations
                int lv_eAB28CEC9E84EB829CEC9DB4EB8F84;
                int lv_eCB69CED9884ED9A9FEC8898;
                int[5][5] lv_lifeTable;
                int lv_x;
                int lv_y;
                // Variable Initialization
                lv_x = 1;
                lv_y = 1;
                // Implementation
                lv_lifeTable[lv_x][lv_y] = 800;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 1200;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 2000;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 2800;
                lv_x = (lv_x + 1);
                lv_y = 1;
                lv_lifeTable[lv_x][lv_y] = 1000;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 1500;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 2300;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 3200;
                lv_x = (lv_x + 1);
                lv_y = 1;
                lv_lifeTable[lv_x][lv_y] = 1250;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 1850;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 2700;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 3900;
                lv_x = (lv_x + 1);
                lv_y = 1;
                lv_lifeTable[lv_x][lv_y] = 1500;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 2150;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 3100;
                lv_y = (lv_y + 1);
                lv_lifeTable[lv_x][lv_y] = 4300;
                lv_eCB69CED9884ED9A9FEC8898 = gv_kronoscycle;
                autoB2CD89A1_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (autoB2CD89A1_val == 1) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 1;
                }
                else if (autoB2CD89A1_val == 2) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 2;
                }
                else if (autoB2CD89A1_val == 3) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 3;
                }
                else if (autoB2CD89A1_val == 4) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 4;
                }
                else {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 1;
                }
                return lv_lifeTable[lv_eAB28CEC9E84EB829CEC9DB4EB8F84][lv_eCB69CED9884ED9A9FEC8898];
            }
            int gf_CalcKronosdamagebyDiff () {
                int auto754DA1B4_val;
                // Variable Declarations
                int lv_eAB8B0EBB3B8EAB3B5EAB2A9EBA0A5;
                int lv_eAB28CEC9E84EB829CEC9DB4EB8F84;
                int lv_eCB69CED9884ED9A9FEC8898;
                // Variable Initialization
                // Implementation
                lv_eAB8B0EBB3B8EAB3B5EAB2A9EBA0A5 = 20;
                auto754DA1B4_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (auto754DA1B4_val == 1) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 1;
                }
                else if (auto754DA1B4_val == 2) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 2;
                }
                else if (auto754DA1B4_val == 3) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 3;
                }
                else if (auto754DA1B4_val == 4) {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 4;
                }
                else {
                    lv_eAB28CEC9E84EB829CEC9DB4EB8F84 = 1;
                }
                return (lv_eAB8B0EBB3B8EAB3B5EAB2A9EBA0A5 + (3 * lv_eAB28CEC9E84EB829CEC9DB4EB8F84) + (4 * lv_eCB69CED9884ED9A9FEC8898));
            }
            void gf_SummoningKronosinit () {
                int auto43CB6E3E_ae;
                int auto43CB6E3E_ai;
                int auto19E60C89_val;
                int auto498B4C12_val;
                // Variable Declarations
                int lv_eCB2B4EBA0A5;
                int lv_eAB3B5EAB2A9EBA0A5;
                int lv_i;
                // Variable Initialization
                // Implementation
                TriggerQueueEnter();
                gv_kronosisAlive = true;
                gv_kronosisinCombat = false;
                TimerRestart(gv_kronosTimer);
                TimerWindowShow(gv_objectiveTimerWindow, PlayerGroupAll(), false);
                TriggerExecute(gt_KronosAwakenWindowUpdate, true, false);
                lv_eCB2B4EBA0A5 = gf_CalcKronoshitpoint();
                lv_eAB3B5EAB2A9EBA0A5 = gf_CalcKronosdamagebyDiff();
                UnitSetInfoTip(gv_kronos, StringExternal(&quot;Param/Value/ED44FEFB&quot;));
                UnitSetPropertyFixed(gv_kronos, c_unitPropLifeMax, lv_eCB2B4EBA0A5);
                UnitSetPropertyFixed(gv_kronos, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(gv_kronos, c_unitPropShieldsMax, 100.0);
                UnitSetPropertyFixed(gv_kronos, c_unitPropLifePercent, 100.0);
                if ((gv_kronoscycle &gt; 1)) {
                    auto43CB6E3E_ae = gv_kronoscycle;
                    auto43CB6E3E_ai = 1;
                    lv_i = 2;
                    for ( ; ( (auto43CB6E3E_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto43CB6E3E_ae) || (auto43CB6E3E_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto43CB6E3E_ae) ) ; lv_i += auto43CB6E3E_ai ) {
                        TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;KronosWeaponUpgradeplus4&quot;, 1);
                    }
                }
                if ((gv_kronoscycle &gt;= 2)) {
                    UnitBehaviorAdd(gv_kronos, &quot;VoidMagicGuard&quot;, gv_announcer, 1);
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;MagicGuardBasicUpgrade&quot;, 1);
                }
                if ((gv_kronoscycle &gt;= 3)) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;MagicGuardBasicUpgrade&quot;, 1);
                }
                UnitBehaviorAdd(gv_kronos, &quot;VoidMagicGuard3&quot;, gv_announcer, 1);
                UnitBehaviorAdd(gv_kronos, &quot;VoidMagicGuard2&quot;, gv_announcer, 1);
                auto19E60C89_val = gv_kronoscycle;
                if (auto19E60C89_val == 2) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;MagicGuardHeroicandSpellUpgrade2ndRound&quot;, 1);
                }
                else if (auto19E60C89_val == 3) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;MagicGuardHeroicandSpellUpgrade3rdRound&quot;, 1);
                }
                else if (auto19E60C89_val == 4) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;MagicGuardHeroicandSpellUpgrade4thRound&quot;, 1);
                }
                else {
                }
                PingSetVisible(gv_kronosDeActivePing, false);
                PingSetUnit(gv_kronosActivePing, gv_kronos);
                PingSetVisible(gv_kronosActivePing, true);
                libNtve_gf_SetBossBarBoss(gv_kronosBossbarID, gv_kronos, true);
                libNtve_gf_ShowHideBossBar(true, gv_kronosBossbarID);
                libNtve_gf_SendActorMessageToUnit(gv_kronos, &quot;SetTintColor {255,0,0 2.000000}&quot;);
                ActorSend(ActorFrom(&quot;KarassPsiStormModel&quot;), &quot;SetTintColor {255,0,0 2.000000}&quot;);
                TriggerExecute(gt_KronosStateUpdateMagicGuard, true, false);
                TriggerExecute(gt_ObjectiveKillKronosUpdate, true, false);
                auto498B4C12_val = RandomInt(1, 2);
                if (auto498B4C12_val == 1) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;TValerian03MusicEventA&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else if (auto498B4C12_val == 2) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;TValerian03MusicEventB&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else if (auto498B4C12_val == 3) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;TValerian03MusicEventC&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else if (auto498B4C12_val == 4) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;TValerian03MusicEventD&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else if (auto498B4C12_val == 5) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;TValerian03MusicEventE&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else {
                }
                TriggerQueueExit();
            }
            trigger auto_gf_RunKronosAttackatMissionTime_Trigger = null;
            trigger auto_gf_RunKronosAttackatMissionTime_lp_kronoswave;
            fixed auto_gf_RunKronosAttackatMissionTime_lp_eC8B9CEAB084;
            int auto_gf_RunKronosAttackatMissionTime_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
            void gf_RunKronosAttackatMissionTime (trigger lp_kronoswave, fixed lp_eC8B9CEAB084, int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84) {
                auto_gf_RunKronosAttackatMissionTime_lp_kronoswave = lp_kronoswave;
                auto_gf_RunKronosAttackatMissionTime_lp_eC8B9CEAB084 = lp_eC8B9CEAB084;
                auto_gf_RunKronosAttackatMissionTime_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84 = lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
                if (auto_gf_RunKronosAttackatMissionTime_Trigger == null) {
                    auto_gf_RunKronosAttackatMissionTime_Trigger = TriggerCreate(&quot;auto_gf_RunKronosAttackatMissionTime_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunKronosAttackatMissionTime_Trigger, false, false);
            }
            bool auto_gf_RunKronosAttackatMissionTime_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_kronoswave = auto_gf_RunKronosAttackatMissionTime_lp_kronoswave;
                fixed lp_eC8B9CEAB084 = auto_gf_RunKronosAttackatMissionTime_lp_eC8B9CEAB084;
                int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84 = auto_gf_RunKronosAttackatMissionTime_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
                // Variable Declarations
                int lv_i;
                int lv_index;
                // Variable Initialization
                lv_index = 1;
                // Implementation
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == lp_eD95B4EB8BB9EB829CEC9DB4EB8F84)) {
                    while (!((lp_eC8B9CEAB084 &lt;= GameGetMissionTime()))) {
                        Wait(0.3, c_timeAI);
                    }
                    if ((libCOMI_gf_GameIsOver() == false)) {
                        TriggerExecute(lp_kronoswave, true, false);
                    }
                }
                return true;
            }
            void gf_KronosNormalAttackEffectRemove (actor lp_target) {
                // Implementation
                Wait(0.5, c_timeReal);
                libNtve_gf_KillModel(lp_target);
            }
            void gf_SmartAttackSystem2subObjective (int lp_eAB79CEBAAA8, int lp_eAB8B0EC88A0ECA095EB8F84) {
                int auto52CFF6D1_ae;
                int auto52CFF6D1_ai;
                int auto37071BAF_val;
                int autoB5FBB606_val;
                int auto35377ECE_ae;
                int auto35377ECE_ai;
                int auto45DD0571_ae;
                int auto45DD0571_ai;
                int autoE013C897_ae;
                int autoE013C897_ai;
                int auto849943C2_val;
                // Variable Declarations
                int lv_i;
                int lv_intRandom;
                point lv_eC839DEC84B1ECA780;
                point lv_eAB2BDEC9CA0ECA7801;
                point lv_eAB2BDEC9CA0ECA7802;
                point lv_eB8F84ECB0A9ECA780;
                unitgroup lv_transporterWave;
                unitgroup lv_airStrikeArmy;
                int lv_maximumAirStrikeArrows;
                point lv_airStrikeDropPoint;
                // Variable Initialization
                lv_eB8F84ECB0A9ECA780 = PointFromId(236191240);
                lv_transporterWave = UnitGroupEmpty();
                lv_airStrikeArmy = UnitGroupEmpty();
                lv_airStrikeDropPoint = PointFromId(438343757);
                // Implementation
                gv_transporterINDEX = 1;
                auto52CFF6D1_ae = 30;
                auto52CFF6D1_ai = 1;
                lv_i = 1;
                for ( ; ( (auto52CFF6D1_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto52CFF6D1_ae) || (auto52CFF6D1_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto52CFF6D1_ae) ) ; lv_i += auto52CFF6D1_ai ) {
                    gv_transporter[lv_i] = null;
                }
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
                    lv_intRandom = RandomInt(1, 3);
                    autoB5FBB606_val = lv_intRandom;
                    if (autoB5FBB606_val == 1) {
                        lv_eC839DEC84B1ECA780 = PointFromId(463907894);
                        gv_airDestination = 3;
                        gf_AirStrike(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/49BA7D78&quot;));
                    }
                    else if (autoB5FBB606_val == 2) {
                        lv_eC839DEC84B1ECA780 = PointFromId(642844534);
                        gv_airDestination = 4;
                        gf_AirStrike(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/9A0A6EA1&quot;));
                    }
                    else if (autoB5FBB606_val == 3) {
                        lv_eC839DEC84B1ECA780 = PointFromId(1608991287);
                        gv_airDestination = 5;
                        gf_AirStrikeLarge(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/58B21682&quot;));
                    }
                    else if (autoB5FBB606_val == 4) {
                        lv_eC839DEC84B1ECA780 = PointFromId(666261520);
                        lv_eAB2BDEC9CA0ECA7801 = PointFromId(1950658432);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/A8FE1666&quot;));
                    }
                    else if (autoB5FBB606_val == 5) {
                        lv_eC839DEC84B1ECA780 = PointFromId(839761394);
                        lv_eAB2BDEC9CA0ECA7801 = PointFromId(1950658432);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/CBF89F52&quot;));
                    }
                    else {
                    }
                }
                else {
                    lv_intRandom = RandomInt(1, 3);
                    auto37071BAF_val = lv_intRandom;
                    if (auto37071BAF_val == 1) {
                        lv_eC839DEC84B1ECA780 = PointFromId(463907894);
                        gv_airDestination = 3;
                        gf_AirStrike(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/3041D48C&quot;));
                    }
                    else if (auto37071BAF_val == 2) {
                        lv_eC839DEC84B1ECA780 = PointFromId(642844534);
                        gv_airDestination = 4;
                        gf_AirStrike(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/123086EA&quot;));
                    }
                    else if (auto37071BAF_val == 3) {
                        lv_eC839DEC84B1ECA780 = PointFromId(1608991287);
                        gv_airDestination = 5;
                        gf_AirStrikeLarge(lp_eAB79CEBAAA8);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/525CCB91&quot;));
                    }
                    else if (auto37071BAF_val == 4) {
                        lv_eC839DEC84B1ECA780 = PointFromId(666261520);
                        lv_eAB2BDEC9CA0ECA7801 = PointFromId(1950658432);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/A3C10C1F&quot;));
                    }
                    else if (auto37071BAF_val == 5) {
                        lv_eC839DEC84B1ECA780 = PointFromId(839761394);
                        lv_eAB2BDEC9CA0ECA7801 = PointFromId(1950658432);
                        gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/872749C5&quot;));
                    }
                    else {
                    }
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, lv_eB8F84ECB0A9ECA780);
                if ((lv_intRandom &gt;= 4)) {
                    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_03_ENEMY, lp_eAB79CEBAAA8, lp_eAB8B0EC88A0ECA095EB8F84, lv_eC839DEC84B1ECA780, true);
                }
                if (((lv_intRandom &gt;= 1) &amp;&amp; (lv_intRandom &lt;= 3))) {
                    auto35377ECE_ae = 20;
                    auto35377ECE_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto35377ECE_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto35377ECE_ae) || (auto35377ECE_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto35377ECE_ae) ) ; lv_i += auto35377ECE_ai ) {
                        if ((gv_hybridinAttackWave[lv_i] != null)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridNemesis&quot;, 0, gv_pLAYER_03_ENEMY, lv_eC839DEC84B1ECA780);
                            UnitGroupAdd(lv_airStrikeArmy, UnitLastCreated());
                        }
                    }
                }
                else {
                    auto45DD0571_ae = 20;
                    auto45DD0571_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto45DD0571_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto45DD0571_ae) || (auto45DD0571_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto45DD0571_ae) ) ; lv_i += auto45DD0571_ai ) {
                        if ((gv_hybridinAttackWave[lv_i] != null)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_hybridinAttackWave[lv_i], 0, gv_pLAYER_03_ENEMY, lv_eC839DEC84B1ECA780);
                            libCOMI_gf_AddAttackWaveUnitType(1, gv_hybridinAttackWave[lv_i]);
                        }
                    }
                }
                if ((gv_subObjectiveState != 1)) {
                    if (((UnitCount(&quot;Nexus&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Nexus&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;CommandCenter&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;CommandCenter&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hatchery&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hatchery&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Lair&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Lair&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hive&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hive&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 1))) {
                        lv_airStrikeDropPoint = PointFromId(1018445328);
                    }
                    else {
                        lv_airStrikeDropPoint = PointFromId(1553492140);
                    }
                }
                else {
                    lv_airStrikeDropPoint = PointFromId(438343757);
                }
                if ((lv_eAB2BDEC9CA0ECA7801 != null)) {
                    libCOMI_gf_AddAttackForceWaypoint(lv_eAB2BDEC9CA0ECA7801, false);
                }
                if ((lv_eAB2BDEC9CA0ECA7802 != null)) {
                    libCOMI_gf_AddAttackForceWaypoint(lv_eAB2BDEC9CA0ECA7802, false);
                }
                if ((lv_intRandom &gt;= 4)) {
                    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                    if ((gv_subObjectiveState == 1)) {
                        PingSetColor(PingLastCreated(), Color(0.00, 0.00, 100.00));
                    }
                }
                else {
                    autoE013C897_ae = 30;
                    autoE013C897_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoE013C897_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE013C897_ae) || (autoE013C897_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE013C897_ae) ) ; lv_i += autoE013C897_ai ) {
                        if ((gv_transporter[lv_i] != null)) {
                            UnitGroupAdd(lv_transporterWave, gv_transporter[lv_i]);
                        }
                    }
                    UnitGroupLoopBegin(lv_airStrikeArmy);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBaseMovementSpeed, 3.0);
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 3.0);
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(lv_transporterWave);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBaseMovementSpeed, 3.0);
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 3.0);
                    }
                    UnitGroupLoopEnd();
                    auto849943C2_val = gv_airDestination;
                    if (auto849943C2_val == 1) {
                        UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(1553492140)), c_orderQueueReplace);
                        UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueReplace);
                        lv_maximumAirStrikeArrows = 5;
                    }
                    else if (auto849943C2_val == 2) {
                        UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(1018445328)), c_orderQueueReplace);
                        UnitGroupLoopBegin(lv_airStrikeArmy);
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitKill(UnitGroupLoopCurrent());
                        }
                        UnitGroupLoopEnd();
                        lv_maximumAirStrikeArrows = 3;
                    }
                    else if (auto849943C2_val == 3) {
                        if ((gv_subObjectiveState == 1)) {
                            UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(438343757)), c_orderQueueReplace);
                            UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(236191240)), c_orderQueueReplace);
                        }
                        else {
                            UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(249)), c_orderQueueReplace);
                            UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueReplace);
                        }
                    }
                    else if (auto849943C2_val == 4) {
                        if ((gv_subObjectiveState == 1)) {
                            UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(438343757)), c_orderQueueReplace);
                            UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(236191240)), c_orderQueueReplace);
                        }
                        else {
                            UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(249)), c_orderQueueReplace);
                            UnitGroupIssueOrder(lv_airStrikeArmy, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueReplace);
                        }
                    }
                    else if (auto849943C2_val == 5) {
                        if ((gv_subObjectiveState == 1)) {
                            UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(438343757)), c_orderQueueReplace);
                            UnitGroupLoopBegin(lv_airStrikeArmy);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitKill(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                        }
                        else {
                            UnitGroupIssueOrder(lv_transporterWave, OrderTargetingPoint(gf_SetAbilityCaseByRace(AbilityCommand(&quot;OverlordTransport3&quot;, 2), AbilityCommand(&quot;OverlordTransport2&quot;, 2), AbilityCommand(&quot;WarpPrismTransport2&quot;, 2)), PointFromId(249)), c_orderQueueReplace);
                            UnitGroupLoopBegin(lv_airStrikeArmy);
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitKill(UnitGroupLoopCurrent());
                            }
                            UnitGroupLoopEnd();
                        }
                    }
                    else {
                    }
                    TriggerExecute(gt_AirStrikeConversation, true, false);
                    gv_airStrikeLeaderUnitINDEX = (gv_airStrikeLeaderUnitINDEX + 1);
                    gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX] = gv_transporter[1];
                    PingCreate(PlayerGroupAll(), &quot;PingBaseAttack&quot;, UnitGetPosition(gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 45.0);
                    PingSetUnit(PingLastCreated(), gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX]);
                    PingSetTooltip(PingLastCreated(), StringExternal(&quot;Param/Value/F3E25B0A&quot;));
                    gv_airStrikePing[gv_airStrikeLeaderUnitINDEX] = PingLastCreated();
                    if ((gv_subObjectiveState != 1)) {
                        if (((UnitCount(&quot;Nexus&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Nexus&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;CommandCenter&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;CommandCenter&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hatchery&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hatchery&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Lair&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Lair&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hive&quot;, gv_pLAYER_01_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1) || (UnitCount(&quot;Hive&quot;, gv_pLAYER_02_USER, RegionCircle(PointFromId(367), 30.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) == 1))) {
                            gf_DrawArrowsForAirstrikeTransporter(gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX], PointFromId(1018445328), Color(100.00, 0.00, 0.00));
                        }
                        else {
                            gf_DrawArrowsForAirstrikeTransporter(gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX], PointFromId(1553492140), Color(100.00, 0.00, 0.00));
                        }
                    }
                    else {
                        PingSetColor(PingLastCreated(), Color(0.00, 0.00, 100.00));
                        gf_DrawArrowsForAirstrikeTransporter(gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX], PointFromId(438343757), Color(0.00, 0.00, 100.00));
                    }
                    TriggerExecute(gt_RemoveAirStrikePing, true, false);
                }
            }
            trigger auto_gf_RunAttackWaveatMissionTime2subObjective_Trigger = null;
            trigger auto_gf_RunAttackWaveatMissionTime2subObjective_lp_attackWave;
            int auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
            int auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
            int auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
            int auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
            void gf_RunAttackWaveatMissionTime2subObjective (trigger lp_attackWave, int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84, int lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898, int lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898, int lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898) {
                auto_gf_RunAttackWaveatMissionTime2subObjective_lp_attackWave = lp_attackWave;
                auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84 = lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
                auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898 = lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
                auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898 = lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
                auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898 = lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
                if (auto_gf_RunAttackWaveatMissionTime2subObjective_Trigger == null) {
                    auto_gf_RunAttackWaveatMissionTime2subObjective_Trigger = TriggerCreate(&quot;auto_gf_RunAttackWaveatMissionTime2subObjective_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunAttackWaveatMissionTime2subObjective_Trigger, false, false);
            }
            bool auto_gf_RunAttackWaveatMissionTime2subObjective_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime2subObjective_lp_attackWave;
                int lp_eD95B4EB8BB9EB829CEC9DB4EB8F84 = auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD95B4EB8BB9EB829CEC9DB4EB8F84;
                int lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898 = auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
                int lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898 = auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
                int lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898 = auto_gf_RunAttackWaveatMissionTime2subObjective_lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
                int autoD05795EE_ae;
                int autoD05795EE_ai;
                int autoB3794AFF_ae;
                int autoB3794AFF_ai;
                int autoC80801BC_ae;
                int autoC80801BC_ai;
                int auto8C2A3257_ae;
                int auto8C2A3257_ai;
                // Variable Declarations
                int lv_i;
                int lv_index;
                // Variable Initialization
                lv_index = 1;
                // Implementation
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == lp_eD95B4EB8BB9EB829CEC9DB4EB8F84)) {
                    if ((libCOMI_gf_GameIsOver() == false)) {
                        autoD05795EE_ae = 20;
                        autoD05795EE_ai = 1;
                        lv_i = 1;
                        for ( ; ( (autoD05795EE_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoD05795EE_ae) || (autoD05795EE_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoD05795EE_ae) ) ; lv_i += autoD05795EE_ai ) {
                            gv_hybridinAttackWave[lv_i] = null;
                        }
                        if ((lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898 &gt; 0)) {
                            autoB3794AFF_ae = lp_eD98BCECA285ED8C8CEAB4B4EC9E90EC9D98EC8898;
                            autoB3794AFF_ai = 1;
                            lv_i = 1;
                            for ( ; ( (autoB3794AFF_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB3794AFF_ae) || (autoB3794AFF_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB3794AFF_ae) ) ; lv_i += autoB3794AFF_ai ) {
                                gv_hybridinAttackWave[lv_index] = &quot;HybridDestroyer&quot;;
                                lv_index = (lv_index + 1);
                            }
                        }
                        if ((lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898 &gt; 0)) {
                            autoC80801BC_ae = lp_eD98BCECA285EB84A4EBA994EC8B9CEC8AA4EC9980EC95BDED8388EC9E90EC9D98EC8898;
                            autoC80801BC_ai = 1;
                            lv_i = 1;
                            for ( ; ( (autoC80801BC_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoC80801BC_ae) || (autoC80801BC_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoC80801BC_ae) ) ; lv_i += autoC80801BC_ai ) {
                                if ((RandomInt(0, 100) &lt; 50)) {
                                    gv_hybridinAttackWave[lv_index] = &quot;HybridNemesis&quot;;
                                    lv_index = (lv_index + 1);
                                }
                                else {
                                    gv_hybridinAttackWave[lv_index] = &quot;HybridReaver&quot;;
                                    lv_index = (lv_index + 1);
                                }
                            }
                        }
                        if ((lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898 &gt; 0)) {
                            auto8C2A3257_ae = lp_eAB1B0EB8C80ED98BCECA285EC9D98EC8898;
                            auto8C2A3257_ai = 1;
                            lv_i = 1;
                            for ( ; ( (auto8C2A3257_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto8C2A3257_ae) || (auto8C2A3257_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto8C2A3257_ae) ) ; lv_i += auto8C2A3257_ai ) {
                                gv_hybridinAttackWave[lv_index] = &quot;HybridBehemoth&quot;;
                                lv_index = (lv_index + 1);
                            }
                        }
                        TriggerExecute(lp_attackWave, true, false);
                    }
                }
                return true;
            }
            trigger gf_GetProperAttackTrigger2subObjective (int lp_eAB79CEBAAA8) {
                int auto09F2F1FC_val;
                // Implementation
                auto09F2F1FC_val = lp_eAB79CEBAAA8;
                if (auto09F2F1FC_val == libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest) {
                    return gt_SubObjectiveTypeAttackWave1SMALLEST;
                }
                else if (auto09F2F1FC_val == libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller) {
                    return gt_SubObjectiveTypeAttackWave2SMALLER;
                }
                else if (auto09F2F1FC_val == libCOMI_ge_CoopAIAttackWaveBuckets__3Small) {
                    return gt_SubObjectiveTypeAttackWave3SMALL;
                }
                else if (auto09F2F1FC_val == libCOMI_ge_CoopAIAttackWaveBuckets__4Medium) {
                    return gt_SubObjectiveTypeAttackWave4MEDIUM;
                }
                else if (auto09F2F1FC_val == libCOMI_ge_CoopAIAttackWaveBuckets__5Large) {
                    return gt_SubObjectiveTypeAttackWave5LARGE;
                }
                else if (auto09F2F1FC_val == libCOMI_ge_CoopAIAttackWaveBuckets__6Larger) {
                    return gt_SubObjectiveTypeAttackWave6LARGER;
                }
                else if (auto09F2F1FC_val == libCOMI_ge_CoopAIAttackWaveBuckets__7Largest) {
                    return gt_SubObjectiveTypeAttackWave7LARGEST;
                }
                else {
                    return gt_TypeAttackWaveerror;
                }
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 01 Load Data
            //--------------------------------------------------------------------------------------------------
            bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
                playergroup auto0B258D10_g;
                int auto0B258D10_p;
                string auto834F8A5E_val;
                // Variable Declarations
                int lv_indexPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_LoadCoopMission(&quot;COOP_Placeholder&quot;, gt_Init03LoadingComplete);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init01LoadData_Init () {
                gt_Init01LoadData = TriggerCreate(&quot;gt_Init01LoadData_Func&quot;);
                TriggerAddEventMapInit(gt_Init01LoadData);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 02 Players
            //--------------------------------------------------------------------------------------------------
            bool gt_Init02Players_Func (bool testConds, bool runActions) {
                playergroup autoE0EF2853_g;
                int autoE0EF2853_p;
                playergroup autoB969537F_g;
                int autoB969537F_p;
                // Variable Declarations
                int lv_playerIterEnemy;
                int lv_playerIterAlly;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init02Players_Init () {
                gt_Init02Players = TriggerCreate(&quot;gt_Init02Players_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 03 Loading Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_Init02Players, true, false);
                TriggerExecute(gt_Init04Technology, true, false);
                TriggerExecute(gt_Init05Units, true, false);
                TriggerExecute(gt_Init06MusicSound, true, false);
                TriggerExecute(gt_Init07Environment, true, false);
                TriggerExecute(gt_Init08Difficulties, true, false);
                TriggerExecute(gt_StartAI, true, false);
                TriggerExecute(gt_KronosWaves, true, false);
                TriggerExecute(gt_StartGameQ, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init03LoadingComplete_Init () {
                gt_Init03LoadingComplete = TriggerCreate(&quot;gt_Init03LoadingComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 04 Technology
            //--------------------------------------------------------------------------------------------------
            bool gt_Init04Technology_Func (bool testConds, bool runActions) {
                int autoA5C22F11_ae;
                int autoA5C22F11_ai;
                int auto56F477C3_ae;
                int auto56F477C3_ai;
                int autoAC722341_ae;
                int autoAC722341_ai;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
                autoA5C22F11_ae = 4;
                autoA5C22F11_ai = 1;
                lv_i = 1;
                for ( ; ( (autoA5C22F11_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoA5C22F11_ae) || (autoA5C22F11_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoA5C22F11_ae) ) ; lv_i += autoA5C22F11_ai ) {
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;KarassPsiStorm&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;BloodyImprison&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;HybridGeneralPhaseShift2&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;Teleport&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;Blink&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;OriginBullet&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;NovaKitSwap&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;NovaKitSwap&quot;, 1), true);
                    TechTreeUpgradeAddLevel(lv_i, &quot;TempestDisintegration&quot;, 1);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;DeathPenalty&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;FenixChampionAirGravitonPrison&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;GravitonPrison&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;ArbiterMPStasisField&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;VoidSentryBlackHole&quot;, 0), true);
                    TechTreeAbilityAllow(lv_i, AbilityCommand(&quot;DefensiveMatrix&quot;, 0), true);
                }
                auto56F477C3_ae = 4;
                auto56F477C3_ai = 1;
                lv_i = 3;
                for ( ; ( (auto56F477C3_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto56F477C3_ae) || (auto56F477C3_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto56F477C3_ae) ) ; lv_i += auto56F477C3_ai ) {
                    TechTreeUpgradeAddLevel(lv_i, &quot;overlordspeed&quot;, 1);
                    TechTreeUpgradeAddLevel(lv_i, &quot;overlordtransport&quot;, 1);
                }
                TechTreeUpgradeAddLevel(gv_pLAYER_03_ENEMY, &quot;DropSpeedFix&quot;, 1);
                autoAC722341_ae = 4;
                autoAC722341_ai = 1;
                lv_i = 1;
                for ( ; ( (autoAC722341_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoAC722341_ae) || (autoAC722341_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoAC722341_ae) ) ; lv_i += autoAC722341_ai ) {
                    TechTreeUpgradeAddLevel(lv_i, &quot;AbilityPreset&quot;, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init04Technology_Init () {
                gt_Init04Technology = TriggerCreate(&quot;gt_Init04Technology_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 05 Units
            //--------------------------------------------------------------------------------------------------
            bool gt_Init05Units_Func (bool testConds, bool runActions) {
                int autoA43F6B67_ae;
                int autoA43F6B67_ai;
                // Variable Declarations
                int lv_i;
                unit lv_adjustant;
                // Variable Initialization
                lv_adjustant = UnitFromId(175998748);
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_towerofVoid[1] = gv_towerofVoidA;
                gv_towerofVoid[2] = gv_towerofVoidB;
                gv_towerofVoid[3] = gv_towerofVoidC;
                gv_towerofVoid[4] = gv_towerofVoidD;
                autoA43F6B67_ae = 4;
                autoA43F6B67_ai = 1;
                lv_i = 1;
                for ( ; ( (autoA43F6B67_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoA43F6B67_ae) || (autoA43F6B67_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoA43F6B67_ae) ) ; lv_i += autoA43F6B67_ai ) {
                    UnitSetState(gv_towerofVoid[lv_i], c_unitStateStatusBar, false);
                }
                TriggerExecute(gt_SubObjectiveInit, true, false);
                libNtve_gf_MakeUnitInvulnerable(gv_announcer, true);
                UnitSetState(gv_announcer, c_unitStateSelectable, false);
                UnitSetState(gv_announcer, c_unitStateStatusBar, false);
                UnitSetState(gv_announcer, c_unitStateTargetable, false);
                UnitSetState(gv_announcer, c_unitStateTooltipable, false);
                UnitAbilityEnable(gv_announcer, &quot;attack&quot;, false);
                UnitAbilityEnable(gv_announcer, &quot;BurrowSwarmQueenUp&quot;, false);
                libNtve_gf_MakeUnitInvulnerable(lv_adjustant, true);
                UnitSetState(lv_adjustant, c_unitStateSelectable, false);
                UnitSetState(lv_adjustant, c_unitStateStatusBar, false);
                UnitSetState(lv_adjustant, c_unitStateTargetable, false);
                UnitSetState(lv_adjustant, c_unitStateTooltipable, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init05Units_Init () {
                gt_Init05Units = TriggerCreate(&quot;gt_Init05Units_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 06 Music/Sound
            //--------------------------------------------------------------------------------------------------
            bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;ZSpace02MusicEvent12_ElevatorDescent&quot;, c_soundtrackCueAny, c_soundtrackIndexAny, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init06MusicSound_Init () {
                gt_Init06MusicSound = TriggerCreate(&quot;gt_Init06MusicSound_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 07 Environment
            //--------------------------------------------------------------------------------------------------
            bool gt_Init07Environment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
                VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(18));
                VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(18));
                RegionPlayableMapSet(RegionFromId(10));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init07Environment_Init () {
                gt_Init07Environment = TriggerCreate(&quot;gt_Init07Environment_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 08 Difficulties
            //--------------------------------------------------------------------------------------------------
            bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
                string auto40757E7A_val;
                int auto400CA92E_ae;
                int auto400CA92E_ai;
                int auto299059E4_ae;
                int auto299059E4_ai;
                int auto8C54FAF3_ae;
                int auto8C54FAF3_ai;
                int auto450B24EF_ae;
                int auto450B24EF_ai;
                int auto55589CE2_val;
                int autoF1954713_val;
                int autoB843D1CA_ae;
                int autoB843D1CA_ai;
                int auto959A65F4_ae;
                int auto959A65F4_ai;
                int auto294FB6F8_ae;
                int auto294FB6F8_ai;
                int auto5EDF2A47_ae;
                int auto5EDF2A47_ai;
                int autoD520BF77_ae;
                int autoD520BF77_ai;
                int autoE6CD8A35_val;
                int auto5C69589C_val;
                int autoDD3BBB0F_val;
                int autoAC51F206_val;
                int auto7437EC0B_val;
                // Variable Declarations
                fixed lv_bonusObjectiveLife;
                fixed lv_mainObjectiveLife;
                int lv_i;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
                    UnitRemove(UnitFromId(211));
                }
                if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
                    UnitRemove(UnitFromId(134));
                }
                auto55589CE2_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (auto55589CE2_val == 1) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(1), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else if (auto55589CE2_val == 2) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(1), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                else if (auto55589CE2_val == 3) {
                    UnitRemove(UnitFromId(304632902));
                    UnitRemove(UnitFromId(1576430775));
                    UnitRemove(UnitFromId(294013280));
                    UnitRemove(UnitFromId(325500345));
                    UnitRemove(UnitFromId(1344100697));
                    UnitRemove(UnitFromId(1240708827));
                }
                else if (auto55589CE2_val == 4) {
                    UnitRemove(UnitFromId(304632902));
                    UnitRemove(UnitFromId(1576430775));
                    UnitRemove(UnitFromId(294013280));
                    UnitRemove(UnitFromId(325500345));
                    UnitRemove(UnitFromId(1344100697));
                    UnitRemove(UnitFromId(1240708827));
                }
                else {
                }
                autoF1954713_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (autoF1954713_val == 1) {
                    autoB843D1CA_ae = 4;
                    autoB843D1CA_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoB843D1CA_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB843D1CA_ae) || (autoB843D1CA_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB843D1CA_ae) ) ; lv_i += autoB843D1CA_ai ) {
                        UnitSetPropertyFixed(gv_towerofVoid[lv_i], c_unitPropLifeMax, 4000.0);
                    }
                    UnitSetPropertyFixed(gv_evolutionChamber, c_unitPropLife, 5000.0);
                }
                else if (autoF1954713_val == 2) {
                    auto959A65F4_ae = 4;
                    auto959A65F4_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto959A65F4_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto959A65F4_ae) || (auto959A65F4_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto959A65F4_ae) ) ; lv_i += auto959A65F4_ai ) {
                        UnitSetPropertyFixed(gv_towerofVoid[lv_i], c_unitPropLifeMax, 6000.0);
                    }
                    UnitSetPropertyFixed(gv_evolutionChamber, c_unitPropLife, 4000.0);
                }
                else if (autoF1954713_val == 3) {
                    auto294FB6F8_ae = 4;
                    auto294FB6F8_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto294FB6F8_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto294FB6F8_ae) || (auto294FB6F8_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto294FB6F8_ae) ) ; lv_i += auto294FB6F8_ai ) {
                        UnitSetPropertyFixed(gv_towerofVoid[lv_i], c_unitPropLifeMax, 8000.0);
                    }
                    UnitSetPropertyFixed(gv_evolutionChamber, c_unitPropLife, 3000.0);
                }
                else if (autoF1954713_val == 4) {
                    auto5EDF2A47_ae = 4;
                    auto5EDF2A47_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto5EDF2A47_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto5EDF2A47_ae) || (auto5EDF2A47_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto5EDF2A47_ae) ) ; lv_i += auto5EDF2A47_ai ) {
                        UnitSetPropertyFixed(gv_towerofVoid[lv_i], c_unitPropLifeMax, 10000.0);
                    }
                    UnitSetPropertyFixed(gv_evolutionChamber, c_unitPropLife, 2000.0);
                }
                else {
                }
                autoD520BF77_ae = 4;
                autoD520BF77_ai = 1;
                lv_i = 1;
                for ( ; ( (autoD520BF77_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoD520BF77_ae) || (autoD520BF77_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoD520BF77_ae) ) ; lv_i += autoD520BF77_ai ) {
                    UnitSetPropertyFixed(gv_towerofVoid[lv_i], c_unitPropLifePercent, 100.0);
                }
                UnitSetPropertyFixed(gv_evolutionChamber, c_unitPropLifePercent, 100.0);
                autoE6CD8A35_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (autoE6CD8A35_val == 2) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;KronosWeaponUpgradeplus3&quot;, 1);
                }
                else if (autoE6CD8A35_val == 3) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;KronosWeaponUpgradeplus3&quot;, 2);
                }
                else if (autoE6CD8A35_val == 4) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;KronosWeaponUpgradeplus3&quot;, 3);
                }
                else {
                }
                auto5C69589C_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (auto5C69589C_val == 2) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;KronosAbilityUpgrade&quot;, 1);
                }
                else if (auto5C69589C_val == 3) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;KronosAbilityUpgrade&quot;, 2);
                }
                else if (auto5C69589C_val == 4) {
                    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, &quot;KronosAbilityUpgrade&quot;, 3);
                }
                else {
                }
                autoDD3BBB0F_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (autoDD3BBB0F_val == 1) {
                    TechTreeAbilityAllow(gv_pLAYER_04_ENEMY, AbilityCommand(&quot;HybridGeneralPhaseShift2&quot;, 0), false);
                }
                else if (autoDD3BBB0F_val == 2) {
                    TechTreeAbilityAllow(gv_pLAYER_04_ENEMY, AbilityCommand(&quot;HybridGeneralPhaseShift2&quot;, 0), false);
                }
                else {
                }
                autoAC51F206_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (autoAC51F206_val == 1) {
                    UnitSetPropertyFixed(UnitFromId(1344100697), c_unitPropLifeMax, 1500.0);
                    UnitSetPropertyFixed(UnitFromId(1240708827), c_unitPropLifeMax, 1500.0);
                    UnitSetPropertyFixed(UnitFromId(304632902), c_unitPropLifeMax, 700.0);
                    UnitSetPropertyFixed(UnitFromId(1576430775), c_unitPropLifeMax, 700.0);
                    UnitSetPropertyFixed(UnitFromId(294013280), c_unitPropLifeMax, 700.0);
                    UnitSetPropertyFixed(UnitFromId(325500345), c_unitPropLifeMax, 700.0);
                    UnitSetPropertyFixed(UnitFromId(1344100697), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(1240708827), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(304632902), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(1576430775), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(294013280), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(325500345), c_unitPropLifePercent, 100.0);
                }
                else if (autoAC51F206_val == 2) {
                    UnitSetPropertyFixed(UnitFromId(1344100697), c_unitPropLifeMax, 1000.0);
                    UnitSetPropertyFixed(UnitFromId(1240708827), c_unitPropLifeMax, 1000.0);
                    UnitSetPropertyFixed(UnitFromId(304632902), c_unitPropLifeMax, 500.0);
                    UnitSetPropertyFixed(UnitFromId(1576430775), c_unitPropLifeMax, 500.0);
                    UnitSetPropertyFixed(UnitFromId(294013280), c_unitPropLifeMax, 500.0);
                    UnitSetPropertyFixed(UnitFromId(325500345), c_unitPropLifeMax, 500.0);
                    UnitSetPropertyFixed(UnitFromId(1344100697), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(1240708827), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(304632902), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(1576430775), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(294013280), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitFromId(325500345), c_unitPropLifePercent, 100.0);
                }
                else {
                }
                auto7437EC0B_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (auto7437EC0B_val == 1) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridBehemoth&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDestroyer&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominator&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominatorVoid&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridNemesis&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridReaver&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Infestor&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HighTemplar&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Raven&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;ScienceVessel&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Viper&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMP&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMPBurrowed&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Disruptor&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Immortal&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;DarkTemplar&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;DarkTemplarAiur&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Banshee&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Ultralisk&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Thor&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Tempest&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;BroodLord&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Battlecruiser&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Carrier&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SiegeTankSieged&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SiegeTank&quot;))) {
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                }
                else if (auto7437EC0B_val == 2) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridBehemoth&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDestroyer&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominator&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominatorVoid&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridNemesis&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridReaver&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMP&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMPBurrowed&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Disruptor&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;DarkTemplar&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;DarkTemplarAiur&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Banshee&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Ultralisk&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Thor&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Tempest&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;BroodLord&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Battlecruiser&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Carrier&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SiegeTankSieged&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SiegeTank&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Reaver&quot;))) {
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                }
                else if (auto7437EC0B_val == 3) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridBehemoth&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDestroyer&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominator&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominatorVoid&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridNemesis&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridReaver&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SwarmHostMP&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SwarmHostBurrowedMP&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;Disruptor&quot;))) {
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init08Difficulties_Init () {
                gt_Init08Difficulties = TriggerCreate(&quot;gt_Init08Difficulties_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 09 Commander
            //--------------------------------------------------------------------------------------------------
            bool gt_Init09Commander_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i0Integer;
                point[3] lv_eC9881EC9B85EC8B9CEC9E91ECA090;
                point[3] lv_eD8AB9EC8898EAB1B4EBACBCEC8B9CEC9E91ECA090;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_eC9881EC9B85EC8B9CEC9E91ECA090[gv_pLAYER_01_USER] = PointFromId(1728867553);
                lv_eC9881EC9B85EC8B9CEC9E91ECA090[gv_pLAYER_02_USER] = PointFromId(857911479);
                lv_eD8AB9EC8898EAB1B4EBACBCEC8B9CEC9E91ECA090[gv_pLAYER_01_USER] = PointFromId(1541304506);
                lv_eD8AB9EC8898EAB1B4EBACBCEC8B9CEC9E91ECA090[gv_pLAYER_02_USER] = PointFromId(521722155);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init09Commander_Init () {
                gt_Init09Commander = TriggerCreate(&quot;gt_Init09Commander_Func&quot;);
                TriggerAddEventMapInit(gt_Init09Commander);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Portrait - Announcer
            //--------------------------------------------------------------------------------------------------
            bool gt_PortraitAnnouncer_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Silence&quot;, -1), StringToText(&quot;&quot;), StringToText(&quot;&quot;), 30.0, c_transmissionDurationSet, false, c_maxPlayers, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PortraitAnnouncer_Init () {
                gt_PortraitAnnouncer = TriggerCreate(&quot;gt_PortraitAnnouncer_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Portrait - Kronos
            //--------------------------------------------------------------------------------------------------
            bool gt_PortraitKronos_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Silence&quot;, -1), StringToText(&quot;&quot;), StringToText(&quot;&quot;), 30.0, c_transmissionDurationSet, false, c_maxPlayers, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PortraitKronos_Init () {
                gt_PortraitKronos = TriggerCreate(&quot;gt_PortraitKronos_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Portrait - Adjustant
            //--------------------------------------------------------------------------------------------------
            bool gt_PortraitAdjustant_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(175998748), true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Silence&quot;, -1), StringToText(&quot;&quot;), StringToText(&quot;&quot;), 30.0, c_transmissionDurationSet, false, c_maxPlayers, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PortraitAdjustant_Init () {
                gt_PortraitAdjustant = TriggerCreate(&quot;gt_PortraitAdjustant_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Air Strike Conversation
            //--------------------------------------------------------------------------------------------------
            bool gt_AirStrikeConversation_Func (bool testConds, bool runActions) {
                string auto865B4E38_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto865B4E38_val = gv_race;
                if (auto865B4E38_val == &quot;Zerg&quot;) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene22_AirStrike_Announcer_A&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/787D0709&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto865B4E38_val == &quot;Terr&quot;) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene22_AirStrike_Announcer_B_medivacs&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/95BAEA61&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto865B4E38_val == &quot;Prot&quot;) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene22_AirStrike_Announcer_C&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/60BD8A68&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AirStrikeConversation_Init () {
                gt_AirStrikeConversation = TriggerCreate(&quot;gt_AirStrikeConversation_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Before First Kronos Alert
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackBeforeFirstKronosAlert_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_attackBaforeFirstKronosAlertAvailable == true))) {
                        return false;
                    }
                    if (!((gv_kronoscycle == 1))) {
                        return false;
                    }
                    if (!((gv_kronosisAlive == false))) {
                        return false;
                    }
                    if (!(((EventPlayer() == gv_pLAYER_01_USER) || (EventPlayer() == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_attackBaforeFirstKronosAlertAvailable = false;
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.2, c_timeGame);
                }
                gv_conversationAvailable = false;
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene24_AttatBeforeFirstKronos&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/976DB44C&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackBeforeFirstKronosAlert_Init () {
                gt_AttackBeforeFirstKronosAlert = TriggerCreate(&quot;gt_AttackBeforeFirstKronosAlert_Func&quot;);
                TriggerAddEventUnitRegion(gt_AttackBeforeFirstKronosAlert, null, RegionFromId(9), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Spawning Area Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosSpawningAreaWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_kronosSpawningAreaWarningAvailable == true))) {
                        return false;
                    }
                    if (!(((EventPlayer() == gv_pLAYER_01_USER) || (EventPlayer() == gv_pLAYER_02_USER)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_kronosSpawningAreaWarningAvailable = false;
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_conversationAvailable = false;
                MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(17)), 3.0, Color(100.00, 0.00, 0.00));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene23_DoNotEnterSpawningArea&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/B6535EE6&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosSpawningAreaWarning_Init () {
                gt_KronosSpawningAreaWarning = TriggerCreate(&quot;gt_KronosSpawningAreaWarning_Func&quot;);
                TriggerAddEventUnitRegion(gt_KronosSpawningAreaWarning, null, RegionFromId(17), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Game Q
            //--------------------------------------------------------------------------------------------------
            bool gt_StartGameQ_Func (bool testConds, bool runActions) {
                // Variable Declarations
                region lv_enemyBase;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_01_USER, StringExternal(&quot;Param/Value/068743D5&quot;), null, PlayerStartLocation(gv_pLAYER_01_USER));
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_02_USER, StringExternal(&quot;Param/Value/187E0E6E&quot;), null, PlayerStartLocation(gv_pLAYER_02_USER));
                Wait(7.0, c_timeReal);
                TriggerQueueEnter();
                gv_tower_Pings[1] = c_invalidPingId;
                gv_tower_Pings[2] = c_invalidPingId;
                gv_tower_Pings[3] = c_invalidPingId;
                gv_tower_Pings[4] = c_invalidPingId;
                TriggerExecute(gt_ObjectiveKillKronosCreate, true, true);
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_KronosInit, true, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene01_INTRO_new2_1_Announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/08718A70&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, true);
                TriggerExecute(gt_ObjectiveTimerWindow, true, false);
                Wait(2.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene01_INTRO_new2_2_Announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/78778F60&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_UpdateStructureCount, true, false);
                TriggerExecute(gt_ObjectiveDestroyTowerofVoidCreate, true, true);
                TriggerExecute(gt_ShowTowerMarkers, true, false);
                Wait(2.0, c_timeGame);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene01_INTRO_new2_3_Announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/1835AD37&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(5.0, c_timeReal);
                TriggerExecute(gt_KronosTipsShowTips, true, false);
                SoundPlayForPlayer(SoundLink(&quot;UI_BnetDockMessage&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/27554752&quot;));
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartGameQ_Init () {
                gt_StartGameQ = TriggerCreate(&quot;gt_StartGameQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defendence Units By Difficulty
            //--------------------------------------------------------------------------------------------------
            bool gt_DefendenceUnitsByDifficulty_Func (bool testConds, bool runActions) {
                int autoFDD4E529_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                autoFDD4E529_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                if (autoFDD4E529_val == 1) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterEnemy) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDestroyer&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridBehemoth&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominator&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominatorVoid&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridNemesis&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridReaver&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMP&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMPBurrowed&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SwarmHostMP&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;SwarmHostBurrowedMP&quot;))) {
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                }
                else if (autoFDD4E529_val == 2) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterEnemy) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDestroyer&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridBehemoth&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominator&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominatorVoid&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridNemesis&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridReaver&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMP&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;LurkerMPBurrowed&quot;))) {
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                }
                else if (autoFDD4E529_val == 3) {
                    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterEnemy) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDestroyer&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridBehemoth&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominator&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridDominatorVoid&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridNemesis&quot;) || (UnitGetType(UnitGroupLoopCurrent()) == &quot;HybridReaver&quot;))) {
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefendenceUnitsByDifficulty_Init () {
                gt_DefendenceUnitsByDifficulty = TriggerCreate(&quot;gt_DefendenceUnitsByDifficulty_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective Timer Window
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveTimerWindow_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerStart(gv_objectiveTimer, (30.0 * 60.0), false, c_timeGame);
                libCOMI_gf_TimerWindowCreate(gv_objectiveTimer, StringExternal(&quot;Param/Value/AFD0FF28&quot;), true, false);
                gv_objectiveTimerWindow = TimerWindowLastCreated();
                Wait(4.0, c_timeGame);
                while ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(gt_ObjectivePreventTimerExpireUpdate, true, false);
                    Wait(0.5, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveTimerWindow_Init () {
                gt_ObjectiveTimerWindow = TriggerCreate(&quot;gt_ObjectiveTimerWindow_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Show Tower Markers
            //--------------------------------------------------------------------------------------------------
            bool gt_ShowTowerMarkers_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitIsAlive(gv_towerofVoidA) == true)) {
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_towerofVoidA), StringExternal(&quot;Param/Value/76EA70B9&quot;));
                    gv_tower_Pings[1] = PingLastCreated();
                    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_towerofVoid[1]), 1.0));
                    gv_towerVision[1] = VisRevealerLastCreated();
                }
                if ((UnitIsAlive(gv_towerofVoidB) == true)) {
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_towerofVoidB), StringExternal(&quot;Param/Value/478B4A4E&quot;));
                    gv_tower_Pings[2] = PingLastCreated();
                    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_towerofVoid[2]), 1.0));
                    gv_towerVision[2] = VisRevealerLastCreated();
                }
                if ((UnitIsAlive(gv_towerofVoidC) == true)) {
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_towerofVoidC), StringExternal(&quot;Param/Value/C775D90B&quot;));
                    gv_tower_Pings[3] = PingLastCreated();
                    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_towerofVoid[3]), 1.0));
                    gv_towerVision[3] = VisRevealerLastCreated();
                }
                if ((gv_tower_Pings[4] == c_invalidPingId)) {
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_towerofVoidD), StringExternal(&quot;Param/Value/0D03E973&quot;));
                    gv_tower_Pings[4] = PingLastCreated();
                    VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_towerofVoid[4]), 1.0));
                    gv_towerVision[4] = VisRevealerLastCreated();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowTowerMarkers_Init () {
                gt_ShowTowerMarkers = TriggerCreate(&quot;gt_ShowTowerMarkers_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Update Tower Markers
            //--------------------------------------------------------------------------------------------------
            bool gt_UpdateTowerMarkers_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitIsAlive(gv_towerofVoidA) == false)) {
                    libCOMI_gf_DestroyPingCoop(gv_tower_Pings[1]);
                    VisRevealerDestroy(gv_towerVision[1]);
                }
                if ((UnitIsAlive(gv_towerofVoidB) == false)) {
                    libCOMI_gf_DestroyPingCoop(gv_tower_Pings[2]);
                    VisRevealerDestroy(gv_towerVision[2]);
                }
                if ((UnitIsAlive(gv_towerofVoidC) == false)) {
                    libCOMI_gf_DestroyPingCoop(gv_tower_Pings[3]);
                    VisRevealerDestroy(gv_towerVision[3]);
                }
                if ((UnitIsAlive(gv_towerofVoidD) == false)) {
                    libCOMI_gf_DestroyPingCoop(gv_tower_Pings[4]);
                    VisRevealerDestroy(gv_towerVision[4]);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateTowerMarkers_Init () {
                gt_UpdateTowerMarkers = TriggerCreate(&quot;gt_UpdateTowerMarkers_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Update Structure Count
            //--------------------------------------------------------------------------------------------------
            bool gt_UpdateStructureCount_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_runningStructureTotal;
                region lv_enemyBase;
                unitgroup lv_enemyBaseTargets;
                // Variable Initialization
                lv_enemyBaseTargets = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_runningStructureTotal = TechTreeUnitCount(gv_pLAYER_04_ENEMY, &quot;TowerOfVoid&quot;, c_techCountQueuedOrBetter);
                gv_remainingStructureCount = lv_runningStructureTotal;
                if ((lv_runningStructureTotal == 0)) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_EndingScenePreset, true, false);
                }
                TriggerExecute(gt_ObjectiveDestroyTowerofVoidUpdate, true, false);
                TriggerExecute(gt_UpdateTowerMarkers, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateStructureCount_Init () {
                gt_UpdateStructureCount = TriggerCreate(&quot;gt_UpdateStructureCount_Func&quot;);
                TriggerAddEventUnitDied(gt_UpdateStructureCount, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Attacking Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.2, c_timeGame);
                }
                gv_conversationAvailable = false;
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                if ((gv_isSingleMode == false)) {
                    libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                }
                else {
                    libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, gv_pLAYER_01_USER);
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                Wait(20.0, c_timeAI);
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAttackingQ_Init () {
                gt_EnemyAttackingQ = TriggerCreate(&quot;gt_EnemyAttackingQ_Func&quot;);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Game Timer Over
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatGameTimerOver_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_zergSwarm;
                // Variable Initialization
                lv_zergSwarm = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                TriggerExecute(gt_ObjectivePreventTimerExpireFailed, true, false);
                libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/79462FB3&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraPan(gv_pLAYER_01_USER, PointFromId(249), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, PointFromId(249), 2.0, -1, 10.0, false);
                CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1244615516), 2.0, -1, 10.0, false);
                CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoFromId(1244615516), 2.0, -1, 10.0, false);
                CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 5.0);
                CameraShakeStart(gv_pLAYER_02_USER, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 5.0);
                libCOMI_gf_WaitForMissionTransmission();
                TriggerExecute(gt_DefeatSequence, true, true);
                Wait(15.0, c_timeReal);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatGameTimerOver_Init () {
                gt_DefeatGameTimerOver = TriggerCreate(&quot;gt_DefeatGameTimerOver_Func&quot;);
                TriggerAddEventTimer(gt_DefeatGameTimerOver, gv_objectiveTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat KRONOS Timer Over
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatKRONOSTimerOver_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                TriggerExecute(gt_ObjectiveKillKronosFailed, true, false);
                libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/A414276F&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraPan(gv_pLAYER_01_USER, PointFromId(249), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, PointFromId(249), 2.0, -1, 10.0, false);
                CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1244615516), 2.0, -1, 10.0, false);
                CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoFromId(1244615516), 2.0, -1, 10.0, false);
                CameraShakeStart(gv_pLAYER_01_USER, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 5.0);
                CameraShakeStart(gv_pLAYER_02_USER, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 5.0);
                libCOMI_gf_WaitForMissionTransmission();
                TriggerExecute(gt_DefeatSequence, true, true);
                Wait(15.0, c_timeReal);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatKRONOSTimerOver_Init () {
                gt_DefeatKRONOSTimerOver = TriggerCreate(&quot;gt_DefeatKRONOSTimerOver_Func&quot;);
                TriggerAddEventTimer(gt_DefeatKRONOSTimerOver, gv_kronosTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Sequence
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatSequence_Func (bool testConds, bool runActions) {
                int auto21A54D1D_ae;
                int auto21A54D1D_ai;
                int autoEFDD3491_ae;
                int autoEFDD3491_ai;
                // Variable Declarations
                int lv_i;
                point[31] lv_defeatPoint;
                string[3] lv_playerUnitType;
                unitgroup lv_dropPod;
                int lv_iNDEX;
                // Variable Initialization
                lv_i = 1;
                lv_dropPod = UnitGroupEmpty();
                lv_iNDEX = 1;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_defeatPoint[lv_i] = PointFromId(373946088);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(594289340);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(1861834182);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(904511968);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(1712208319);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(549141085);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(1879924749);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(1954219215);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(352024331);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(933063505);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(401036581);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(1624801035);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(579191912);
                lv_i = (lv_i + 1);
                lv_defeatPoint[lv_i] = PointFromId(623321819);
                lv_playerUnitType[1] = &quot;Marine&quot;;
                lv_playerUnitType[2] = &quot;Archon&quot;;
                auto21A54D1D_ae = 30;
                auto21A54D1D_ai = 5;
                lv_i = 1;
                for ( ; ( (auto21A54D1D_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto21A54D1D_ae) || (auto21A54D1D_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto21A54D1D_ae) ) ; lv_i += auto21A54D1D_ai ) {
                    if ((lv_defeatPoint[lv_i] != null)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, lv_defeatPoint[lv_i], lv_dropPod, false, gv_pLAYER_04_ENEMY);
                        CreepModify(lv_defeatPoint[lv_i], 6.0, true, true);
                        UnitGroupIssueOrder(lv_dropPod, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1728867553)), c_orderQueueReplace);
                    }
                }
                autoEFDD3491_ae = 30;
                autoEFDD3491_ai = 5;
                lv_i = 2;
                for ( ; ( (autoEFDD3491_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoEFDD3491_ae) || (autoEFDD3491_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoEFDD3491_ae) ) ; lv_i += autoEFDD3491_ai ) {
                    if ((lv_defeatPoint[lv_i] != null)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(666261520));
                        UnitGroupAdd(lv_dropPod, UnitLastCreated());
                        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, lv_defeatPoint[lv_i], lv_dropPod, false, gv_pLAYER_04_ENEMY);
                        CreepModify(lv_defeatPoint[lv_i], 6.0, true, true);
                        UnitGroupIssueOrder(lv_dropPod, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(857911479)), c_orderQueueReplace);
                    }
                }
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 9999.0);
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
                }
                UnitGroupLoopEnd();
                if ((gv_kronosisAlive == true)) {
                    UnitSetPosition(gv_kronos, PointFromId(965520810), false);
                    UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1728867553)), c_orderQueueReplace);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridKronos&quot;, 0, gv_pLAYER_04_ENEMY, PointFromId(965520810));
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), &quot;SetTintColor {255,0,0 2.000000}&quot;);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(1728867553)), c_orderQueueReplace);
                }
                libNtve_gf_CreateModelAtPoint(&quot;HybridWarpInEffect&quot;, PointFromId(965520810));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 2.000000&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatSequence_Init () {
                gt_DefeatSequence = TriggerCreate(&quot;gt_DefeatSequence_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Primary Objective Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_VictorySequence, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryPrimaryObjectiveComplete_Init () {
                gt_VictoryPrimaryObjectiveComplete = TriggerCreate(&quot;gt_VictoryPrimaryObjectiveComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Sequence
            //--------------------------------------------------------------------------------------------------
            bool gt_VictorySequence_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
                Wait(2.0, c_timeReal);
                TriggerExecute(gt_ObjectiveDestroyTowerofVoidComplete, true, false);
                TriggerExecute(gt_ObjectivePreventTimerExpireComplete, true, false);
                TriggerExecute(gt_ObjectiveKillKronosComplete, true, false);
                if ((gv_subObjectiveState &lt; 2)) {
                    TriggerExecute(gt_SubObjectiveComplete, true, false);
                }
                libNtve_gf_ShowHideBossBar(false, 1);
                gf_KronosStateRemoveStates();
                libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictorySequence_Init () {
                gt_VictorySequence = TriggerCreate(&quot;gt_VictorySequence_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Fanfare Q
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionClearAll();
                TriggerQueueEnter();
                libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
                CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_kronos), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, UnitGetPosition(gv_kronos), 2.0, -1, 10.0, false);
                UnitPauseAll(true);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                Wait(3.0, c_timeGame);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                Wait(1.5, c_timeReal);
                libNtve_gf_CreateModelAtPoint(&quot;HybridWarpOut&quot;, UnitGetPosition(gv_kronos));
                ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 5.000000&quot;);
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Stand&quot;, 0, c_animTimeDefault);
                UnitKill(gv_kronos);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene13_VICTORY_5_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/7D706B73&quot;), 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(5.0, c_timeReal);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Victory, true, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryFanfareQ_Init () {
                gt_VictoryFanfareQ = TriggerCreate(&quot;gt_VictoryFanfareQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Victory_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverVictory);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Victory_Init () {
                gt_Victory = TriggerCreate(&quot;gt_Victory_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_Defeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Defeat_Init () {
                gt_Defeat = TriggerCreate(&quot;gt_Defeat_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start AI
            //--------------------------------------------------------------------------------------------------
            bool gt_StartAI_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
                libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
                TriggerExecute(gt_AIAttackWaves, true, false);
                AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 0, 0), true, gv_pLAYER_03_ENEMY);
                AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 0, 0), false, gv_pLAYER_03_ENEMY);
                AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 0, 0), true, gv_pLAYER_04_ENEMY);
                AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(0, 0, 0, 0), false, gv_pLAYER_04_ENEMY);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartAI_Init () {
                gt_StartAI = TriggerCreate(&quot;gt_StartAI_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: AI Attack Waves
            //--------------------------------------------------------------------------------------------------
            bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest), (3.0 * 60.0), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest), (3.0 * 60.0), 4, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest), (4.0 * 60.0), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest), (5.0 * 60.0), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest), (8.0 * 60.0), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest), (8.0 * 60.0), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller), (8.0 * 60.0), 3, 0, 1, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller), (8.0 * 60.0), 4, 0, 1, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__3Small), (12.0 * 60.0), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__3Small), (12.0 * 60.0), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__3Small), (12.0 * 60.0), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__3Small), (12.0 * 60.0), 4, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium), (18.0 * 60.0), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__5Large), (18.0 * 60.0), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__5Large), (18.0 * 60.0), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__5Large), (18.0 * 60.0), 4, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (22.0 * 60.0), 1, 1, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (22.0 * 60.0), 2, 1, 1, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (22.0 * 60.0), 3, 2, 1, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (22.0 * 60.0), 4, 3, 2, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (24.0 * 60.0), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (24.0 * 60.0), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (24.0 * 60.0), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), (24.0 * 60.0), 4, 0, 0, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest), (28.0 * 60.0), 1, 2, 1, 0);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest), (28.0 * 60.0), 2, 2, 1, 1);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest), (28.0 * 60.0), 3, 2, 3, 1);
                gf_RunAttackWaveatMissionTime(gf_GetProperAttackTrigger(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest), (28.0 * 60.0), 4, 3, 4, 2);
                TriggerExecute(gt_subObjectiveCallAttackWave1, true, false);
                TriggerExecute(gt_subObjectiveCallAttackWave2, true, false);
                TriggerExecute(gt_subObjectiveCallAttackWave3, true, false);
                TriggerExecute(gt_subObjectiveCallAttackWave4, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIAttackWaves_Init () {
                gt_AIAttackWaves = TriggerCreate(&quot;gt_AIAttackWaves_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Remove Air Strike Ping
            //--------------------------------------------------------------------------------------------------
            bool gt_RemoveAirStrikePing_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((UnitIsAlive(gv_airStrikeLeaderUnit[gv_airStrikeLeaderUnitINDEX]) == false))) {
                    Wait(0.5, c_timeAI);
                }
                PingDestroy(gv_airStrikePing[gv_airStrikeLeaderUnitINDEX]);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RemoveAirStrikePing_Init () {
                gt_RemoveAirStrikePing = TriggerCreate(&quot;gt_RemoveAirStrikePing_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave 1-SMALLEST
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWave1SMALLEST_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWave1SMALLEST_Init () {
                gt_TypeAttackWave1SMALLEST = TriggerCreate(&quot;gt_TypeAttackWave1SMALLEST_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave 2-SMALLER
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWave2SMALLER_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWave2SMALLER_Init () {
                gt_TypeAttackWave2SMALLER = TriggerCreate(&quot;gt_TypeAttackWave2SMALLER_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave 3-SMALL
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWave3SMALL_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem(libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWave3SMALL_Init () {
                gt_TypeAttackWave3SMALL = TriggerCreate(&quot;gt_TypeAttackWave3SMALL_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave 4-MEDIUM
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWave4MEDIUM_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWave4MEDIUM_Init () {
                gt_TypeAttackWave4MEDIUM = TriggerCreate(&quot;gt_TypeAttackWave4MEDIUM_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave 5-LARGE
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWave5LARGE_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem(libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWave5LARGE_Init () {
                gt_TypeAttackWave5LARGE = TriggerCreate(&quot;gt_TypeAttackWave5LARGE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave 6-LARGER
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWave6LARGER_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWave6LARGER_Init () {
                gt_TypeAttackWave6LARGER = TriggerCreate(&quot;gt_TypeAttackWave6LARGER_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave 7-LARGEST
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWave7LARGEST_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWave7LARGEST_Init () {
                gt_TypeAttackWave7LARGEST = TriggerCreate(&quot;gt_TypeAttackWave7LARGEST_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Type Attack Wave ~error
            //--------------------------------------------------------------------------------------------------
            bool gt_TypeAttackWaveerror_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/96FA7B18&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TypeAttackWaveerror_Init () {
                gt_TypeAttackWaveerror = TriggerCreate(&quot;gt_TypeAttackWaveerror_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Ability Observer
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosAbilityObserver_Func (bool testConds, bool runActions) {
                int autoD6C3E622_ae;
                int autoD6C3E622_ai;
                int auto3422D92A_ae;
                int auto3422D92A_ai;
                int auto57D78F2B_ae;
                int auto57D78F2B_ai;
                int autoDC0E59AF_ae;
                int autoDC0E59AF_ai;
                // Variable Declarations
                int lv_i;
                const fixed lv_hitpointErrorRange = 12.0;
                const fixed lv_kronosSkillRestTerm = 3.0;
                const fixed lv_range = 8.0;
                fixed[201] lv_hitpointArchive;
                int lv_index;
                int[4] lv_maxChargCount;
                bool lv_finalAttackAvailable;
                int lv_buttonINDEX;
                // Variable Initialization
                lv_i = 1;
                lv_index = 2;
                lv_finalAttackAvailable = true;
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(0, 0, 0, 1), gf_SetCountCasebyRound(0, 0, 1, 1), gf_SetCountCasebyRound(0, 0, 2, 2), gf_SetCountCasebyRound(2, 2, 2, 2));
                lv_maxChargCount[1] = gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount;
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercent[lv_i] = IntToFixed(gf_SetCountCasebyDifficulty(50, 50, 70, 70));
                lv_i = (lv_i + 1);
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercent[lv_i] = IntToFixed(gf_SetCountCasebyDifficulty(-1, -1, 30, 30));
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentMaxINDEX = lv_i;
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX = 1;
                lv_i = 1;
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_errorRange = 20.0;
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(0, 3, 3, 3), gf_SetCountCasebyRound(0, 3, 3, 3), gf_SetCountCasebyRound(0, 3, 3, 3), gf_SetCountCasebyRound(0, 4, 4, 4));
                lv_maxChargCount[2] = gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount;
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[lv_i] = IntToFixed(gf_SetCountCasebyDifficulty(70, 70, 70, 80));
                lv_i = (lv_i + 1);
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[lv_i] = IntToFixed(gf_SetCountCasebyDifficulty(50, 50, 50, 60));
                lv_i = (lv_i + 1);
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[lv_i] = IntToFixed(gf_SetCountCasebyDifficulty(10, 10, 10, 40));
                lv_i = (lv_i + 1);
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[lv_i] = IntToFixed(gf_SetCountCasebyDifficulty(-1, -1, -10, 20));
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentMaxINDEX = lv_i;
                gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX = 1;
                lv_i = 1;
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_errorRange = 12.0;
                gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount = 1;
                lv_maxChargCount[3] = gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount;
                gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercent[lv_i] = IntToFixed(gf_SetCountCasebyDifficulty(35, 35, 25, 25));
                gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentMaxINDEX = lv_i;
                gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX = 1;
                lv_i = 1;
                gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_errorRange = 15.0;
                gv_kronosAbilityECA795EBB28C.lv_chargeCount = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(1, 2, 3, 4), gf_SetCountCasebyRound(1, 2, 3, 5), gf_SetCountCasebyRound(1, 3, 4, 6), gf_SetCountCasebyRound(1, 3, 5, 7));
                TimerStart(gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_cooltimeTimer, 35.72, false, c_timeGame);
                TimerStart(gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_cooltimeTimer, 19.83, false, c_timeGame);
                TimerStart(gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_cooltimeTimer, 35.0, false, c_timeGame);
                TimerStart(gv_kronosAbilityECA795EBB28C.lv_cooltimeTimer, 47.509, false, c_timeGame);
                TimerStart(gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_cooltimeTimer, 27.304, false, c_timeGame);
                autoD6C3E622_ae = 50;
                autoD6C3E622_ai = 1;
                lv_i = 1;
                for ( ; ( (autoD6C3E622_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoD6C3E622_ae) || (autoD6C3E622_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoD6C3E622_ae) ) ; lv_i += autoD6C3E622_ai ) {
                    gv_kronosStateButtons[lv_i] = c_invalidDialogId;
                }
                auto3422D92A_ae = 50;
                auto3422D92A_ai = 1;
                lv_i = 1;
                for ( ; ( (auto3422D92A_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto3422D92A_ae) || (auto3422D92A_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto3422D92A_ae) ) ; lv_i += auto3422D92A_ai ) {
                    gv_kronosStateButtonstmp[lv_i] = c_invalidDialogId;
                }
                auto57D78F2B_ae = 50;
                auto57D78F2B_ai = 1;
                lv_i = 1;
                for ( ; ( (auto57D78F2B_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto57D78F2B_ae) || (auto57D78F2B_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto57D78F2B_ae) ) ; lv_i += auto57D78F2B_ai ) {
                    gv_kronosStateButtonsType[lv_i] = 0;
                }
                autoDC0E59AF_ae = 50;
                autoDC0E59AF_ai = 1;
                lv_i = 1;
                for ( ; ( (autoDC0E59AF_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoDC0E59AF_ae) || (autoDC0E59AF_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoDC0E59AF_ae) ) ; lv_i += autoDC0E59AF_ai ) {
                    gv_kronosStateButtonsTypetmp[lv_i] = 0;
                }
                while ((gv_kronosisAlive == true)) {
                    if (((gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount &gt; 0) &amp;&amp; (gv_kronosisBusy == false) &amp;&amp; (TimerGetRemaining(gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_cooltimeTimer) &lt;= 1.234) &amp;&amp; (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercent[gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX] != -1.0) &amp;&amp; (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX &lt;= gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentMaxINDEX) &amp;&amp; (UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1))) {
                        if ((gf_UnitHealthCheck(gv_kronos, (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercent[gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX] - gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_errorRange), (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercent[gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX] + gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_errorRange)) == true)) {
                            gv_kronosisBusy = true;
                            TimerRestart(gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_cooltimeTimer);
                            gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount = (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount - 1);
                            TriggerExecute(gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598, true, true);
                            Wait(lv_kronosSkillRestTerm, c_timeGame);
                            gf_KronosStateRemoveStates();
                            gv_kronosisBusy = false;
                            gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX = (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX + 1);
                        }
                    }
                    if (((gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount &gt; 0) &amp;&amp; (gv_kronosisBusy == false) &amp;&amp; (TimerGetRemaining(gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_cooltimeTimer) &lt;= 1.234) &amp;&amp; (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX] != -1.0) &amp;&amp; (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX &lt;= gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentMaxINDEX) &amp;&amp; (UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1))) {
                        if ((gf_UnitHealthCheck(gv_kronos, (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX] - gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_errorRange), (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercent[gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX] + gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_errorRange)) == true)) {
                            gv_kronosisBusy = true;
                            TimerRestart(gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_cooltimeTimer);
                            gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount = (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount - 1);
                            TriggerExecute(gt_KronosEC82ACEBA79DEC84A0EAB3A0, true, true);
                            Wait(lv_kronosSkillRestTerm, c_timeGame);
                            gf_KronosStateRemoveStates();
                            gv_kronosisBusy = false;
                            gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX = (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX + 1);
                        }
                    }
                    if (((gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount &gt; 0) &amp;&amp; (gv_kronosisBusy == false) &amp;&amp; (TimerGetRemaining(gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_cooltimeTimer) &lt;= 1.234) &amp;&amp; (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercent[gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX] != -1.0) &amp;&amp; (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX &lt;= gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentMaxINDEX) &amp;&amp; (UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1))) {
                        if ((gf_UnitHealthCheck(gv_kronos, (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercent[gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX] - gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_errorRange), (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercent[gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX] + gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_errorRange)) == true)) {
                            gv_kronosisBusy = true;
                            TimerRestart(gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_cooltimeTimer);
                            gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount = (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount - 1);
                            TriggerExecute(gt_KronosEC9980EC9DB4EBB288EC868CED9998, true, true);
                            Wait(lv_kronosSkillRestTerm, c_timeGame);
                            gf_KronosStateRemoveStates();
                            gv_kronosisBusy = false;
                            gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX = (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX + 1);
                        }
                    }
                    if (((gv_kronosAbilityECA795EBB28C.lv_chargeCount &gt; 0) &amp;&amp; (gv_kronosisBusy == false) &amp;&amp; (TimerGetRemaining(gv_kronosAbilityECA795EBB28C.lv_cooltimeTimer) &lt;= 1.234) &amp;&amp; (UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1))) {
                        gv_kronosisBusy = true;
                        TimerRestart(gv_kronosAbilityECA795EBB28C.lv_cooltimeTimer);
                        gv_kronosAbilityECA795EBB28C.lv_chargeCount = (gv_kronosAbilityECA795EBB28C.lv_chargeCount - 1);
                        TriggerExecute(gt_KronosECA795EBB28C, true, true);
                        Wait(lv_kronosSkillRestTerm, c_timeGame);
                        gf_KronosStateRemoveStates();
                        gv_kronosisBusy = false;
                    }
                    lv_hitpointArchive[1] = (UnitGetPropertyFixed(gv_kronos, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_kronos, c_unitPropShields, c_unitPropCurrent));
                    lv_hitpointArchive[2] = (UnitGetPropertyFixed(gv_kronos, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_kronos, c_unitPropShields, c_unitPropCurrent));
                    lv_index = (lv_index + 1);
                    lv_hitpointArchive[lv_index] = (UnitGetPropertyFixed(gv_kronos, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_kronos, c_unitPropShields, c_unitPropCurrent));
                    if (((lv_hitpointArchive[(lv_index - 2)] - lv_hitpointArchive[lv_index]) &gt;= 400.0) &amp;&amp; (gv_kronosisBusy == false) &amp;&amp; (TimerGetRemaining(gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_cooltimeTimer) &lt;= 1.234)) {
                        gv_kronosisBusy = true;
                        TimerRestart(gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_cooltimeTimer);
                        TriggerExecute(gt_KronosED9A8CED94BCECA084EB9EB5, true, true);
                        Wait(lv_kronosSkillRestTerm, c_timeGame);
                        gv_kronosisBusy = false;
                    }
                    if ((gv_kronosisBusy == false) &amp;&amp; (lv_maxChargCount[1] != 0) &amp;&amp; ((lv_maxChargCount[1] - gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount) == 0) &amp;&amp; (gf_UnitHealthCheck(gv_kronos, 0.1, 10.0) == true) &amp;&amp; (lv_finalAttackAvailable == true)) {
                        UnitBehaviorAdd(gv_kronos, &quot;PartialResistanceall&quot;, gv_announcer, 1);
                        gv_kronosisBusy = true;
                        lv_finalAttackAvailable = false;
                        TimerRestart(gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_cooltimeTimer);
                        gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount = (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_chargeCount - 1);
                        TriggerExecute(gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598, true, true);
                        UnitBehaviorRemove(gv_kronos, &quot;PartialResistanceall&quot;, 1);
                        Wait(lv_kronosSkillRestTerm, c_timeGame);
                        gv_kronosisBusy = false;
                        gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX = (gv_kronosAbilityEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598.lv_conditionKronosHitpointPercentCurrentINDEX + 1);
                    }
                    if ((gv_kronosisBusy == false) &amp;&amp; (lv_maxChargCount[3] != 0) &amp;&amp; ((lv_maxChargCount[3] - gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount) == 0) &amp;&amp; (gf_UnitHealthCheck(gv_kronos, 0.1, 5.0) == true) &amp;&amp; (lv_finalAttackAvailable == true)) {
                        UnitBehaviorAdd(gv_kronos, &quot;PartialResistanceall&quot;, gv_announcer, 1);
                        gv_kronosisBusy = true;
                        lv_finalAttackAvailable = false;
                        TimerRestart(gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_cooltimeTimer);
                        gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount = (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_chargeCount - 1);
                        TriggerExecute(gt_KronosEC9980EC9DB4EBB288EC868CED9998, true, true);
                        UnitBehaviorRemove(gv_kronos, &quot;PartialResistanceall&quot;, 1);
                        Wait(lv_kronosSkillRestTerm, c_timeGame);
                        gv_kronosisBusy = false;
                        gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX = (gv_kronosAbilityEC9980EC9DB4EBB288EC868CED9998.lv_conditionKronosHitpointPercentCurrentINDEX + 1);
                    }
                    if ((gv_kronosisBusy == false) &amp;&amp; (lv_maxChargCount[2] != 0) &amp;&amp; ((lv_maxChargCount[2] - gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount) == 0) &amp;&amp; (gf_UnitHealthCheck(gv_kronos, 0.1, 5.0) == true) &amp;&amp; (lv_finalAttackAvailable == true)) {
                        UnitBehaviorAdd(gv_kronos, &quot;PartialResistanceall&quot;, gv_announcer, 1);
                        gv_kronosisBusy = true;
                        lv_finalAttackAvailable = false;
                        TimerRestart(gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_cooltimeTimer);
                        gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount = (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_chargeCount - 1);
                        TriggerExecute(gt_KronosEC82ACEBA79DEC84A0EAB3A0, true, true);
                        UnitBehaviorRemove(gv_kronos, &quot;PartialResistanceall&quot;, 1);
                        Wait(lv_kronosSkillRestTerm, c_timeGame);
                        gv_kronosisBusy = false;
                        gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX = (gv_kronosAbilityEC82ACEBA79DEC84A0EAB3A0.lv_conditionKronosHitpointPercentCurrentINDEX + 1);
                    }
                    Wait(3.0, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosAbilityObserver_Init () {
                gt_KronosAbilityObserver = TriggerCreate(&quot;gt_KronosAbilityObserver_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Smart Ability Caster
            //--------------------------------------------------------------------------------------------------
            bool gt_SmartAbilityCaster_Func (bool testConds, bool runActions) {
                int init_i;
                int autoF56B7B83_ae;
                int autoF56B7B83_ai;
                int autoD37CF99E_ae;
                int autoD37CF99E_ai;
                int auto2F1FF234_ae;
                int auto2F1FF234_ai;
                int autoC6A0F632_ae;
                int autoC6A0F632_ai;
                int auto433F79F1_ae;
                int auto433F79F1_ai;
                int auto8F52038D_ae;
                int auto8F52038D_ai;
                int auto0C857F60_ae;
                int auto0C857F60_ai;
                int auto76A77A97_ae;
                int auto76A77A97_ai;
                int autoCE24DA4E_ae;
                int autoCE24DA4E_ai;
                int autoE42F222D_val;
                // Variable Declarations
                int lv_chargeCountCriticalShot;
                int lv_chargeCountStorm;
                int lv_chargeCountDeathPenalty;
                int lv_chargeCountWyvern;
                int lv_chargeCountDelayStrategy;
                int lv_chargeCountAPillarofFire;
                int[51] lv_shuffleBox;
                int lv_shuffleBuffer;
                int lv_shuffleBoxINDEX;
                int lv_shufflernd;
                int lv_maxChargeCount;
                fixed lv_hitpointSectionCount;
                fixed[51] lv_normalDistribution;
                bool[51] lv_lock;
                const fixed lv_kronosSkillRestTerm = 3.0;
                int lv_buttonINDEX;
                fixed[201] lv_hitpointArchive;
                const int lv_currentSkillDivider = 4;
                int lv_currentSkillMod;
                int lv_examineLimit;
                int lv_index;
                int lv_i;
                int lv_j;
                // Variable Initialization
                lv_shuffleBoxINDEX = 1;
                for (init_i = 0; init_i &lt;= 50; init_i += 1) {
                    lv_normalDistribution[init_i] = -1.0;
                }
                lv_index = 2;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_chargeCountCriticalShot = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(0, 0, 2, 2), gf_SetCountCasebyRound(0, 1, 2, 2), gf_SetCountCasebyRound(0, 2, 2, 2), gf_SetCountCasebyRound(0, 2, 2, 2));
                lv_chargeCountStorm = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(1, 1, 2, 2), gf_SetCountCasebyRound(1, 2, 2, 2), gf_SetCountCasebyRound(1, 2, 2, 3), gf_SetCountCasebyRound(1, 2, 2, 3));
                lv_chargeCountDeathPenalty = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(1, 1, 2, 2), gf_SetCountCasebyRound(1, 2, 2, 2), gf_SetCountCasebyRound(1, 2, 2, 3), gf_SetCountCasebyRound(1, 2, 2, 3));
                lv_chargeCountWyvern = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(0, 1, 1, 2), gf_SetCountCasebyRound(1, 1, 2, 3), gf_SetCountCasebyRound(1, 2, 3, 3), gf_SetCountCasebyRound(1, 2, 3, 3));
                lv_chargeCountDelayStrategy = 1;
                lv_chargeCountAPillarofFire = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(0, 1, 1, 2), gf_SetCountCasebyRound(0, 1, 2, 2), gf_SetCountCasebyRound(0, 2, 2, 3), gf_SetCountCasebyRound(0, 2, 3, 3));
                lv_maxChargeCount = (lv_chargeCountCriticalShot + lv_chargeCountWyvern + lv_chargeCountStorm + lv_chargeCountDelayStrategy);
                if ((lv_chargeCountCriticalShot &gt; 0)) {
                    autoF56B7B83_ae = lv_chargeCountCriticalShot;
                    autoF56B7B83_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoF56B7B83_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoF56B7B83_ae) || (autoF56B7B83_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoF56B7B83_ae) ) ; lv_i += autoF56B7B83_ai ) {
                        lv_shuffleBox[lv_shuffleBoxINDEX] = 1;
                        lv_shuffleBoxINDEX = (lv_shuffleBoxINDEX + 1);
                    }
                }
                if ((lv_chargeCountStorm &gt; 0)) {
                    autoD37CF99E_ae = lv_chargeCountStorm;
                    autoD37CF99E_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoD37CF99E_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoD37CF99E_ae) || (autoD37CF99E_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoD37CF99E_ae) ) ; lv_i += autoD37CF99E_ai ) {
                        lv_shuffleBox[lv_shuffleBoxINDEX] = 2;
                        lv_shuffleBoxINDEX = (lv_shuffleBoxINDEX + 1);
                    }
                }
                if ((lv_chargeCountDeathPenalty &gt; 0)) {
                    auto2F1FF234_ae = lv_chargeCountStorm;
                    auto2F1FF234_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto2F1FF234_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto2F1FF234_ae) || (auto2F1FF234_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto2F1FF234_ae) ) ; lv_i += auto2F1FF234_ai ) {
                        lv_shuffleBox[lv_shuffleBoxINDEX] = 2;
                        lv_shuffleBoxINDEX = (lv_shuffleBoxINDEX + 1);
                    }
                }
                if ((lv_chargeCountWyvern &gt; 0)) {
                    autoC6A0F632_ae = lv_chargeCountWyvern;
                    autoC6A0F632_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoC6A0F632_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoC6A0F632_ae) || (autoC6A0F632_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoC6A0F632_ae) ) ; lv_i += autoC6A0F632_ai ) {
                        lv_shuffleBox[lv_shuffleBoxINDEX] = 3;
                        lv_shuffleBoxINDEX = (lv_shuffleBoxINDEX + 1);
                    }
                }
                if ((lv_chargeCountDelayStrategy &gt; 0)) {
                    auto433F79F1_ae = lv_chargeCountDelayStrategy;
                    auto433F79F1_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto433F79F1_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto433F79F1_ae) || (auto433F79F1_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto433F79F1_ae) ) ; lv_i += auto433F79F1_ai ) {
                        lv_shuffleBox[lv_shuffleBoxINDEX] = 4;
                        lv_shuffleBoxINDEX = (lv_shuffleBoxINDEX + 1);
                    }
                }
                if ((lv_chargeCountAPillarofFire &gt; 0)) {
                    auto8F52038D_ae = lv_chargeCountDelayStrategy;
                    auto8F52038D_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto8F52038D_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto8F52038D_ae) || (auto8F52038D_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto8F52038D_ae) ) ; lv_i += auto8F52038D_ai ) {
                        lv_shuffleBox[lv_shuffleBoxINDEX] = 5;
                        lv_shuffleBoxINDEX = (lv_shuffleBoxINDEX + 1);
                    }
                }
                if ((lv_maxChargeCount &gt; 2)) {
                    auto0C857F60_ae = (lv_maxChargeCount - 1);
                    auto0C857F60_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto0C857F60_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto0C857F60_ae) || (auto0C857F60_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto0C857F60_ae) ) ; lv_i += auto0C857F60_ai ) {
                        lv_shufflernd = RandomInt((lv_i + 0), lv_maxChargeCount);
                        lv_shuffleBuffer = lv_shuffleBox[lv_i];
                        lv_shuffleBox[lv_i] = lv_shuffleBox[lv_shufflernd];
                        lv_shuffleBox[lv_shufflernd] = lv_shuffleBuffer;
                    }
                }
                if ((lv_maxChargeCount &gt; 1)) {
                    lv_hitpointSectionCount = ((90.0 - 10.0) / (lv_maxChargeCount - 0));
                    auto76A77A97_ae = (lv_maxChargeCount + 1);
                    auto76A77A97_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto76A77A97_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto76A77A97_ae) || (auto76A77A97_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto76A77A97_ae) ) ; lv_i += auto76A77A97_ai ) {
                        lv_normalDistribution[lv_i] = (10.0 + (lv_hitpointSectionCount * (lv_i - 1)));
                    }
                }
                else {
                    lv_normalDistribution[1] = 30.0;
                    lv_normalDistribution[2] = 60.0;
                }
                if ((lv_maxChargeCount &gt; 10)) {
                    lv_maxChargeCount = 10;
                }
                lv_examineLimit = lv_maxChargeCount;
                while ((gv_kronosisAlive == true)) {
                    autoCE24DA4E_ae = (lv_maxChargeCount - 0);
                    autoCE24DA4E_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoCE24DA4E_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoCE24DA4E_ae) || (autoCE24DA4E_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoCE24DA4E_ae) ) ; lv_i += autoCE24DA4E_ai ) {
                        if ((gf_UnitHealthCheck(gv_kronos, lv_normalDistribution[lv_i], lv_normalDistribution[(lv_i + 1)]) == true)) {
                            TextExpressionSetToken(&quot;Param/Expression/CC9FCA39&quot;, &quot;A&quot;, FixedToText(lv_normalDistribution[lv_i], c_fixedPrecisionAny));
                            TextExpressionSetToken(&quot;Param/Expression/CC9FCA39&quot;, &quot;B&quot;, FixedToText(lv_normalDistribution[(lv_i + 1)], c_fixedPrecisionAny));
                            gf_DisplayErrorMessage(TextExpressionAssemble(&quot;Param/Expression/CC9FCA39&quot;));
                            lv_examineLimit = lv_i;
                            while ((lv_lock[lv_i] == false)) {
                                if ((gv_kronosisBusy == false)) {
                                    lv_currentSkillMod = ModI(gv_kronosCurrentSkill, lv_currentSkillDivider);
                                    autoE42F222D_val = lv_currentSkillMod;
                                    if (autoE42F222D_val == 0) {
                                        if ((lv_chargeCountStorm &gt;= 1)) {
                                            gv_kronosisBusy = true;
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                            lv_chargeCountStorm = (lv_chargeCountStorm - 1);
                                            lv_lock[lv_i] = true;
                                            lv_lock[(lv_i + 1)] = true;
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gf_KronosStateShowState(3);
                                            TriggerExecute(gt_KronosECA795EBB28C, true, true);
                                            Wait(lv_kronosSkillRestTerm, c_timeGame);
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gv_kronosisBusy = false;
                                        }
                                        else {
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                        }
                                    }
                                    else if (autoE42F222D_val == 1) {
                                        if ((lv_chargeCountWyvern &gt;= 1)) {
                                            gv_kronosisBusy = true;
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                            lv_chargeCountWyvern = (lv_chargeCountWyvern - 1);
                                            lv_lock[lv_i] = true;
                                            lv_lock[(lv_i + 1)] = true;
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gf_KronosStateShowState(6);
                                            TriggerExecute(gt_KronosEC9980EC9DB4EBB288EC868CED9998, true, true);
                                            Wait(lv_kronosSkillRestTerm, c_timeGame);
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gv_kronosisBusy = false;
                                        }
                                        else {
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                        }
                                    }
                                    else if (autoE42F222D_val == 2) {
                                        if ((lv_chargeCountDeathPenalty &gt;= 1)) {
                                            gv_kronosisBusy = true;
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                            lv_chargeCountDeathPenalty = (lv_chargeCountDeathPenalty - 1);
                                            lv_lock[lv_i] = true;
                                            lv_lock[(lv_i + 1)] = true;
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gf_KronosStateShowState(4);
                                            TriggerExecute(gt_KronosEC82ACEBA79DEC84A0EAB3A0, true, true);
                                            Wait(lv_kronosSkillRestTerm, c_timeGame);
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gv_kronosisBusy = false;
                                        }
                                        else {
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                        }
                                    }
                                    else if (autoE42F222D_val == 3) {
                                        if ((lv_chargeCountCriticalShot &gt;= 1)) {
                                            gv_kronosisBusy = true;
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                            lv_chargeCountCriticalShot = (lv_chargeCountCriticalShot - 1);
                                            lv_lock[lv_i] = true;
                                            lv_lock[(lv_i + 1)] = true;
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gf_KronosStateShowState(5);
                                            TriggerExecute(gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598, true, true);
                                            Wait(lv_kronosSkillRestTerm, c_timeGame);
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gv_kronosisBusy = false;
                                        }
                                        else {
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                        }
                                    }
                                    else if (autoE42F222D_val == 4) {
                                        if ((lv_chargeCountAPillarofFire &gt;= 1)) {
                                            gv_kronosisBusy = true;
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                            lv_chargeCountAPillarofFire = (lv_chargeCountDelayStrategy - 1);
                                            lv_lock[lv_i] = true;
                                            lv_lock[(lv_i + 1)] = true;
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gf_KronosStateShowState(7);
                                            UnitSetState(gv_kronos, c_unitStateMoveSuppressed, false);
                                            UnitAbilityEnable(gv_kronos, &quot;move&quot;, false);
                                            UnitSetHeight(gv_kronos, 7.0, 2.0);
                                            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                                            UnitBehaviorAdd(gv_kronos, &quot;KronosPlaneAirOnly&quot;, gv_announcer, 1);
                                            TriggerExecute(gt_KronosEBB688EAB8B0EB91A5B, true, false);
                                            Wait(8.0, c_timeReal);
                                            UnitSetHeight(gv_kronos, 0.0, 0.5);
                                            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand&quot;, c_animFlagNonLooping, c_animTimeDefault);
                                            UnitBehaviorRemove(gv_kronos, &quot;KronosPlaneAirOnly&quot;, 1);
                                            UnitSetState(gv_kronos, c_unitStateMoveSuppressed, true);
                                            UnitAbilityEnable(gv_kronos, &quot;move&quot;, true);
                                            gf_KronosStateRemoveStates2();
                                            Wait(0.5, c_timeGame);
                                            gf_KronosStateShowState(2);
                                            gv_kronosisBusy = false;
                                        }
                                        else {
                                            gv_kronosCurrentSkill = (gv_kronosCurrentSkill + 1);
                                        }
                                    }
                                    else {
                                    }
                                }
                            }
                        }
                    }
                    if ((gf_UnitHealthCheck(gv_kronos, 0.01, 5.0) == true)) {
                        gf_KronosStateRemoveStates2();
                    }
                    Wait(1.5, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SmartAbilityCaster_Init () {
                gt_SmartAbilityCaster = TriggerCreate(&quot;gt_SmartAbilityCaster_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? ?????? ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_MakeUnitInvulnerable(gv_kronos, true);
                UnitSetState(gv_kronos, c_unitStateSelectable, false);
                UnitSetState(gv_kronos, c_unitStateTooltipable, false);
                UnitAbilityEnable(gv_kronos, &quot;attack&quot;, false);
                UnitSetState(gv_kronos, c_unitStateMoveSuppressed, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095_Init () {
                gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095 = TriggerCreate(&quot;gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? ?????? ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_MakeUnitInvulnerable(gv_kronos, false);
                UnitSetState(gv_kronos, c_unitStateSelectable, true);
                UnitSetState(gv_kronos, c_unitStateTooltipable, true);
                UnitAbilityEnable(gv_kronos, &quot;attack&quot;, true);
                UnitSetState(gv_kronos, c_unitStateMoveSuppressed, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C_Init () {
                gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C = TriggerCreate(&quot;gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? ????????????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_hitpointPercent;
                point lv_target;
                actor lv_areaWarningActorModel;
                unit lv_satellite;
                actor lv_explosion;
                int lv_ping;
                int lv_deathline;
                revealer[3] lv_revealer;
                // Variable Initialization
                lv_ping = c_invalidPingId;
                lv_deathline = 200;
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/4FD62BC9&quot;));
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095, true, false);
                lv_target = UnitGetPosition(UnitGroupRandomUnit(gf_GetTargetUnitCandidates(gv_kronos, 12.0, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive));
                gv_kronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598EB8C80EC8381ECA780ECA090 = lv_target;
                libNtve_gf_CreateModelAtPoint(&quot;nukeCursorSplat&quot;, lv_target);
                lv_areaWarningActorModel = libNtve_gf_ActorLastCreated();
                ActorSend(lv_areaWarningActorModel, &quot;SetTintColor {255,0,0 2.000000}&quot;);
                ActorSend(lv_areaWarningActorModel, &quot;SetScale 7.000000&quot;);
                VisRevealerCreate(gv_pLAYER_01_USER, RegionCircle(lv_target, 10.0));
                lv_revealer[1] = VisRevealerLastCreated();
                VisRevealerCreate(gv_pLAYER_02_USER, RegionCircle(lv_target, 10.0));
                lv_revealer[2] = VisRevealerLastCreated();
                PingCreate(PlayerGroupAll(), &quot;PingWarning&quot;, lv_target, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 15.0);
                lv_ping = PingLastCreated();
                PingSetTooltip(lv_ping, StringExternal(&quot;Param/Value/9732D58C&quot;));
                libNtve_gf_MakeUnitFacePoint(gv_kronos, lv_target, 1.5);
                libNtve_gf_CreateModelAtPoint(&quot;AmonTentacleDGroundSlamImpact&quot;, UnitGetPosition(gv_kronos));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink(&quot;KRONOS_descent&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_kronos), 0.0, 100.0, 0.0);
                UnitSetHeight(gv_kronos, 8.0, 2.0);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Odin_NukeLaunch&quot;, -1), c_maxPlayers, PlayerGroupAll(), lv_target, 0.0, 200.0, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                Wait(3.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SatelliteDropNew&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, gv_kronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598EB8C80EC8381ECA780ECA090);
                lv_satellite = UnitLastCreated();
                gv_kronosSatellite = UnitLastCreated();
                UnitSetHeight(lv_satellite, 0.0, 6.5);
                while (!((gf_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598EB8299ED9598EBB08FEBB680EC8898EB8F99EC9E91(lv_satellite) == true))) {
                    Wait(0.5, c_timeGame);
                }
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand&quot;, 0, c_animTimeDefault);
                UnitSetHeight(gv_kronos, 0.0, 0.5);
                Wait(0.5, c_timeReal);
                libNtve_gf_CreateModelAtPoint(&quot;AmonTentacleDGroundSlamImpact&quot;, UnitGetPosition(gv_kronos));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink(&quot;KRONOS_descent&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_kronos), 0.0, 100.0, 0.0);
                UnitRemove(lv_satellite);
                libNtve_gf_KillModel(libNtve_gf_MainActorofUnit(lv_satellite));
                libNtve_gf_KillModel(lv_areaWarningActorModel);
                libNtve_gf_KillModel(lv_explosion);
                VisRevealerDestroy(lv_revealer[1]);
                VisRevealerDestroy(lv_revealer[2]);
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598_Init () {
                gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598 = TriggerCreate(&quot;gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEC82ACEBA79DEC84A0EAB3A0_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_candidates;
                unit lv_target;
                actor lv_missile;
                // Variable Initialization
                lv_candidates = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/ECE1857C&quot;));
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095, true, false);
                lv_candidates = gf_GetTargetUnitCandidates(gv_kronos, 8.0, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))));
                UnitGroupLoopBegin(lv_candidates);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((lv_target == null)) {
                        if (((UnitFilterMatch(lv_target, gv_pLAYER_01_USER, UnitFilter((1 &lt;&lt; c_targetFilterMassive), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_target, gv_pLAYER_02_USER, UnitFilter((1 &lt;&lt; c_targetFilterMassive), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                            lv_target = UnitGroupLoopCurrent();
                        }
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(lv_candidates);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((lv_target == null)) {
                        if (((UnitFilterMatch(lv_target, gv_pLAYER_01_USER, UnitFilter(0, (1 &lt;&lt; (c_targetFilterHasEnergy - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_target, gv_pLAYER_02_USER, UnitFilter(0, (1 &lt;&lt; (c_targetFilterHasEnergy - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                            lv_target = UnitGroupLoopCurrent();
                        }
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(lv_candidates);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((lv_target == null)) {
                        if (((UnitFilterMatch(lv_target, gv_pLAYER_01_USER, UnitFilter((1 &lt;&lt; c_targetFilterArmored), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_target, gv_pLAYER_02_USER, UnitFilter((1 &lt;&lt; c_targetFilterArmored), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                            lv_target = UnitGroupLoopCurrent();
                        }
                    }
                }
                UnitGroupLoopEnd();
                if ((lv_target == null)) {
                    lv_target = UnitGroupRandomUnit(lv_candidates, c_unitCountAlive);
                }
                UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockBakcNew&quot;, 0)), c_orderQueueReplace);
                ActorSend(libNtve_gf_MainActorofUnit(lv_target), &quot;SetTintColor 255,0,0&quot;);
                UnitFlashSelection(lv_target, 9999.0);
                UnitSetState(lv_target, c_unitStateMoveSuppressed, false);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand Channel&quot;, c_animFlagPlayForever, c_animTimeDefault);
                libNtve_gf_AttachModelToUnit(gv_kronos, &quot;DisintegrationMissile&quot;, &quot;Ref_Weapon 01&quot;);
                lv_missile = libNtve_gf_ActorLastCreated();
                ActorSend(lv_missile, &quot;SetTintColor {255,0,0 2.000000}&quot;);
                ActorSend(lv_missile, &quot;SetScale 2.000000&quot;);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Battlecruiser_YamatoAttackChargeUp&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_target), 0.0, 200.0, 0.0);
                Wait(2.0, c_timeGame);
                UnitIssueOrder(gv_kronos, OrderTargetingUnit(AbilityCommand(&quot;DeathPenalty&quot;, 0), lv_target), c_orderQueueReplace);
                libNtve_gf_KillModel(lv_missile);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Tempest_Disintegration_Launch&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_target), 0.0, 200.0, 0.0);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Spell&quot;, 0, c_animTimeDefault);
                ActorSend(libNtve_gf_MainActorofUnit(lv_target), &quot;ClearTintColor&quot;);
                UnitSetState(lv_target, c_unitStateMoveSuppressed, true);
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEC82ACEBA79DEC84A0EAB3A0_Init () {
                gt_KronosEC82ACEBA79DEC84A0EAB3A0 = TriggerCreate(&quot;gt_KronosEC82ACEBA79DEC84A0EAB3A0_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEC9980EC9DB4EBB288EC868CED9998_Func (bool testConds, bool runActions) {
                int auto9C179BF5_val;
                int auto1483B190_ae;
                int auto1483B190_ai;
                int autoDF99F928_ae;
                int autoDF99F928_ai;
                int autoAA522E86_ae;
                int autoAA522E86_ai;
                // Variable Declarations
                int lv_chargeCount;
                point[6] lv_target;
                fixed lv_kronosAngle;
                const fixed lv_distance = 6.5;
                int lv_i;
                int lv_maxSpawnPoints;
                actor[6] lv_spawnActorModel;
                // Variable Initialization
                lv_i = 1;
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/6CF7D7F9&quot;));
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095, true, false);
                lv_chargeCount = gf_SetCountCasebyDifficulty(2, 3, 4, 5);
                lv_kronosAngle = UnitGetFacing(gv_kronos);
                auto9C179BF5_val = lv_chargeCount;
                if (auto9C179BF5_val == 2) {
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + 90.0));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle - 90.0));
                    lv_maxSpawnPoints = lv_i;
                }
                else if (auto9C179BF5_val == 3) {
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + 90.0));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle - 90.0));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + 0.0));
                    lv_maxSpawnPoints = lv_i;
                }
                else if (auto9C179BF5_val == 4) {
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + 90.0));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle - 90.0));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + 180.0));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle - 180.0));
                    lv_maxSpawnPoints = lv_i;
                }
                else if (auto9C179BF5_val == 5) {
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + (72.0 * (lv_i - 1))));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + (72.0 * (lv_i - 1))));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + (72.0 * (lv_i - 1))));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + (72.0 * (lv_i - 1))));
                    lv_i = (lv_i + 1);
                    lv_target[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_kronosAngle + (72.0 * (lv_i - 1))));
                    lv_maxSpawnPoints = lv_i;
                }
                else {
                }
                auto1483B190_ae = lv_maxSpawnPoints;
                auto1483B190_ai = 1;
                lv_i = 1;
                for ( ; ( (auto1483B190_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto1483B190_ae) || (auto1483B190_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto1483B190_ae) ) ; lv_i += auto1483B190_ai ) {
                    libNtve_gf_CreateModelAtPoint(&quot;HybridWarpInEffect&quot;, lv_target[lv_i]);
                    ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTintColor {255,0,0 2.000000}&quot;);
                    lv_spawnActorModel[lv_i] = libNtve_gf_ActorLastCreated();
                }
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand Work&quot;, c_animFlagPlayForever, c_animTimeDefault);
                autoDF99F928_ae = lv_maxSpawnPoints;
                autoDF99F928_ai = 1;
                lv_i = 1;
                for ( ; ( (autoDF99F928_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoDF99F928_ae) || (autoDF99F928_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoDF99F928_ae) ) ; lv_i += autoDF99F928_ai ) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Wyvern&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_target[lv_i]);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), &quot;SetTintColor {255,0,0 2.000000}&quot;);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueReplace);
                }
                SoundPlayAtPointForPlayer(SoundLink(&quot;Mutalisk_Pissed&quot;, -1), c_maxPlayers, PlayerGroupAll(), lv_target[1], 0.0, 200.0, 0.0);
                Wait(2.0, c_timeGame);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand&quot;, 0, c_animTimeDefault);
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C, true, false);
                Wait(4.0, c_timeGame);
                autoAA522E86_ae = lv_maxSpawnPoints;
                autoAA522E86_ai = 1;
                lv_i = 1;
                for ( ; ( (autoAA522E86_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoAA522E86_ae) || (autoAA522E86_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoAA522E86_ae) ) ; lv_i += autoAA522E86_ai ) {
                    libNtve_gf_KillModel(lv_spawnActorModel[lv_i]);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEC9980EC9DB4EBB288EC868CED9998_Init () {
                gt_KronosEC9980EC9DB4EBB288EC868CED9998 = TriggerCreate(&quot;gt_KronosEC9980EC9DB4EBB288EC868CED9998_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosECA795EBB28C_Func (bool testConds, bool runActions) {
                int autoDD5C29AB_ae;
                int autoDD5C29AB_ai;
                int auto85350B82_ae;
                int auto85350B82_ai;
                // Variable Declarations
                unit[4] lv_skillTarget;
                unitgroup lv_candidates;
                int lv_i;
                sound lv_effectSound;
                // Variable Initialization
                lv_candidates = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/DED10263&quot;));
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095, true, false);
                lv_candidates = gf_GetTargetUnitCandidates(gv_kronos, 12.0, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32))));
                autoDD5C29AB_ae = 3;
                autoDD5C29AB_ai = 1;
                lv_i = 1;
                for ( ; ( (autoDD5C29AB_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoDD5C29AB_ae) || (autoDD5C29AB_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoDD5C29AB_ae) ) ; lv_i += autoDD5C29AB_ai ) {
                    UnitGroupLoopBegin(lv_candidates);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((lv_skillTarget[lv_i] == null)) {
                            if (((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter((1 &lt;&lt; c_targetFilterLight), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_02_USER, UnitFilter((1 &lt;&lt; c_targetFilterLight), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                                lv_skillTarget[lv_i] = UnitGroupLoopCurrent();
                            }
                        }
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(lv_candidates);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((lv_skillTarget[lv_i] == null)) {
                            if (((UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, UnitFilter(0, (1 &lt;&lt; (c_targetFilterHasEnergy - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(UnitGroupLoopCurrent(), gv_pLAYER_02_USER, UnitFilter(0, (1 &lt;&lt; (c_targetFilterHasEnergy - 32)), (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                                lv_skillTarget[lv_i] = UnitGroupLoopCurrent();
                            }
                        }
                    }
                    UnitGroupLoopEnd();
                    if ((lv_skillTarget[lv_i] == null)) {
                        lv_skillTarget[lv_i] = UnitGroupRandomUnit(lv_candidates, c_unitCountAlive);
                    }
                }
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand Work&quot;, c_animFlagPlayForever, c_animTimeDefault);
                libNtve_gf_CreateModelAtPoint(&quot;AmonTentacleDGroundSlamImpact&quot;, UnitGetPosition(gv_kronos));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink(&quot;KRONOS_descent&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_kronos), 0.0, 100.0, 0.0);
                UnitSetHeight(gv_kronos, 7.0, 2.0);
                SoundPlayAtPointForPlayer(SoundLink(&quot;Aiur05_Amon_Amb_Emitter&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_skillTarget[1]), 0.0, 200.0, 0.0);
                lv_effectSound = SoundLastPlayed();
                UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockBakcNew&quot;, 0)), c_orderQueueReplace);
                Wait(1.0, c_timeGame);
                auto85350B82_ae = 3;
                auto85350B82_ai = 1;
                lv_i = 1;
                for ( ; ( (auto85350B82_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto85350B82_ae) || (auto85350B82_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto85350B82_ae) ) ; lv_i += auto85350B82_ai ) {
                    UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;FireStormNew&quot;, 0), UnitGetPosition(lv_skillTarget[lv_i])), c_orderQueueReplace);
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronos), c_animNameDefault, &quot;Stand&quot;, 0, c_animTimeDefault);
                UnitSetHeight(gv_kronos, 0.0, 1.0);
                Wait(1.0, c_timeReal);
                libNtve_gf_CreateModelAtPoint(&quot;AmonTentacleDGroundSlamImpact&quot;, UnitGetPosition(gv_kronos));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Death&quot;, 0, c_animTimeDefault);
                SoundPlayAtPointForPlayer(SoundLink(&quot;KRONOS_descent&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_kronos), 0.0, 100.0, 0.0);
                Wait(2.0, c_timeGame);
                SoundStop(lv_effectSound, true);
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosECA795EBB28C_Init () {
                gt_KronosECA795EBB28C = TriggerCreate(&quot;gt_KronosECA795EBB28C_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ???????????? ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosED9A8CED94BCECA084EB9EB5ED8C90EB8BA8_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed[301] lv_hitpointArchive;
                int lv_index;
                // Variable Initialization
                lv_index = 2;
                // Actions
                if (!runActions) {
                    return true;
                }
                while ((gv_kronosisAlive == true)) {
                    TimerStart(gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_cooltimeTimer, 27.304, false, c_timeGame);
                    lv_hitpointArchive[1] = (UnitGetPropertyFixed(gv_kronos, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_kronos, c_unitPropShields, c_unitPropCurrent));
                    lv_hitpointArchive[2] = (UnitGetPropertyFixed(gv_kronos, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_kronos, c_unitPropShields, c_unitPropCurrent));
                    lv_index = (lv_index + 1);
                    lv_hitpointArchive[lv_index] = (UnitGetPropertyFixed(gv_kronos, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(gv_kronos, c_unitPropShields, c_unitPropCurrent));
                    if (((lv_hitpointArchive[(lv_index - 2)] - lv_hitpointArchive[lv_index]) &gt;= 300.0) &amp;&amp; (gv_kronosisBusy == false) &amp;&amp; (TimerGetRemaining(gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_cooltimeTimer) &lt;= 1.234)) {
                        TimerRestart(gv_kronosAbilityED9A8CED94BCECA084EB9EB5.lv_cooltimeTimer);
                        TriggerExecute(gt_KronosED9A8CED94BCECA084EB9EB5, true, true);
                    }
                    Wait(3.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosED9A8CED94BCECA084EB9EB5ED8C90EB8BA8_Init () {
                gt_KronosED9A8CED94BCECA084EB9EB5ED8C90EB8BA8 = TriggerCreate(&quot;gt_KronosED9A8CED94BCECA084EB9EB5ED8C90EB8BA8_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosED9A8CED94BCECA084EB9EB5_Func (bool testConds, bool runActions) {
                int autoB81F6CFF_ae;
                int autoB81F6CFF_ai;
                int autoE3FA8095_ae;
                int autoE3FA8095_ai;
                int auto2EB5FB9D_ae;
                int auto2EB5FB9D_ai;
                int auto60E24DAB_ae;
                int auto60E24DAB_ai;
                // Variable Declarations
                point lv_skillDestination;
                point lv_temporaryTarget;
                int lv_i;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((RegionContainsPoint(RegionCircle(PointFromId(249), 20.0), UnitGetPosition(gv_kronos)) == false)) {
                    if ((RandomInt(1, 10) &gt; 3)) {
                        lv_temporaryTarget = PointFromId(249);
                    }
                    else {
                        lv_temporaryTarget = PointFromId(959960150);
                    }
                }
                else {
                    if ((RandomInt(1, 10) &gt; 3)) {
                        lv_temporaryTarget = PointFromId(358);
                    }
                    else {
                        lv_temporaryTarget = PointFromId(959960150);
                    }
                }
                libNtve_gf_MakeUnitFacePoint(gv_kronos, lv_temporaryTarget, 0.5);
                autoB81F6CFF_ae = 16;
                autoB81F6CFF_ai = 2;
                lv_i = 8;
                for ( ; ( (autoB81F6CFF_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB81F6CFF_ae) || (autoB81F6CFF_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB81F6CFF_ae) ) ; lv_i += autoB81F6CFF_ai ) {
                    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, lv_temporaryTarget), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1)) {
                    }
                    else {
                        lv_skillDestination = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, lv_temporaryTarget);
                    }
                }
                if ((lv_skillDestination == null)) {
                    autoE3FA8095_ae = 16;
                    autoE3FA8095_ai = 2;
                    lv_i = 8;
                    for ( ; ( (autoE3FA8095_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE3FA8095_ae) || (autoE3FA8095_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE3FA8095_ae) ) ; lv_i += autoE3FA8095_ai ) {
                        if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, PointWithOffsetPolar(UnitGetPosition(gv_kronos), 50.0, (UnitGetFacing(gv_kronos) + 90.0))), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1)) {
                        }
                        else {
                            lv_skillDestination = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, PointWithOffsetPolar(UnitGetPosition(gv_kronos), 50.0, (UnitGetFacing(gv_kronos) + 90.0)));
                        }
                    }
                }
                if ((lv_skillDestination == null)) {
                    auto2EB5FB9D_ae = 16;
                    auto2EB5FB9D_ai = 2;
                    lv_i = 8;
                    for ( ; ( (auto2EB5FB9D_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto2EB5FB9D_ae) || (auto2EB5FB9D_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto2EB5FB9D_ae) ) ; lv_i += auto2EB5FB9D_ai ) {
                        if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, PointWithOffsetPolar(UnitGetPosition(gv_kronos), 50.0, (UnitGetFacing(gv_kronos) + 180.0))), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1)) {
                        }
                        else {
                            lv_skillDestination = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, PointWithOffsetPolar(UnitGetPosition(gv_kronos), 50.0, (UnitGetFacing(gv_kronos) + 180.0)));
                        }
                    }
                }
                if ((lv_skillDestination == null)) {
                    auto60E24DAB_ae = 16;
                    auto60E24DAB_ai = 2;
                    lv_i = 8;
                    for ( ; ( (auto60E24DAB_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto60E24DAB_ae) || (auto60E24DAB_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto60E24DAB_ae) ) ; lv_i += auto60E24DAB_ai ) {
                        if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, PointWithOffsetPolar(UnitGetPosition(gv_kronos), 50.0, (UnitGetFacing(gv_kronos) + -90.0))), 1.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1)) {
                        }
                        else {
                            lv_skillDestination = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), lv_i, PointWithOffsetPolar(UnitGetPosition(gv_kronos), 50.0, (UnitGetFacing(gv_kronos) - 90.0)));
                        }
                    }
                }
                if ((lv_skillDestination != null)) {
                    UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockback&quot;, 0)), c_orderQueueReplace);
                    Wait(2.0, c_timeAI);
                    UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;Teleport2&quot;, 0), lv_skillDestination), c_orderQueueReplace);
                    Wait(2.0, c_timeAI);
                    UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockback&quot;, 0)), c_orderQueueReplace);
                    Wait(2.0, c_timeAI);
                }
                else {
                    UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockBakcNew&quot;, 0)), c_orderQueueReplace);
                    Wait(2.0, c_timeAI);
                    UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockback&quot;, 0)), c_orderQueueReplace);
                    Wait(2.0, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosED9A8CED94BCECA084EB9EB5_Init () {
                gt_KronosED9A8CED94BCECA084EB9EB5 = TriggerCreate(&quot;gt_KronosED9A8CED94BCECA084EB9EB5_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ?????????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosECA491EBA0A5EC9EA5_Func (bool testConds, bool runActions) {
                int auto25E2F541_ae;
                int auto25E2F541_ai;
                // Variable Declarations
                int lv_range;
                actor[201] lv_model;
                int lv_modelINDEX;
                actor lv_gravityFieldModel;
                fixed lv_damagePercent;
                int lv_i;
                // Variable Initialization
                lv_range = 10;
                lv_modelINDEX = 1;
                lv_damagePercent = 0.1;
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/D575E00C&quot;));
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095, true, false);
                libNtve_gf_CreateModelAtPoint(&quot;ChallengeShield&quot;, UnitGetPosition(gv_kronos));
                libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, &quot;Stand&quot;, c_animFlagPlayForever, c_animTimeDefault);
                lv_gravityFieldModel = libNtve_gf_ActorLastCreated();
                UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetHeight(UnitGroupLoopCurrent(), 8.0, 1.5);
                    libNtve_gf_AttachActorToUnit(UnitGroupLoopCurrent(), &quot;FenixChampionAirGravitonPrisonImpact&quot;, &quot;Ref_Head&quot;);
                    lv_model[lv_modelINDEX] = libNtve_gf_ActorLastCreated();
                    lv_modelINDEX = (lv_modelINDEX + 1);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, false);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
                    UnitAbilityEnable(UnitGroupLoopCurrent(), &quot;attack&quot;, false);
                }
                UnitGroupLoopEnd();
                Wait(7.0, c_timeGame);
                UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetHeight(UnitGroupLoopCurrent(), 0.0, 0.5);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, true);
                    UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, true);
                    UnitAbilityEnable(UnitGroupLoopCurrent(), &quot;attack&quot;, true);
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropNormal) * lv_damagePercent)));
                }
                UnitGroupLoopEnd();
                auto25E2F541_ae = (lv_modelINDEX - 1);
                auto25E2F541_ai = 1;
                lv_i = 1;
                for ( ; ( (auto25E2F541_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto25E2F541_ae) || (auto25E2F541_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto25E2F541_ae) ) ; lv_i += auto25E2F541_ai ) {
                    libNtve_gf_KillModel(lv_model[lv_i]);
                }
                libNtve_gf_KillModel(lv_gravityFieldModel);
                TriggerExecute(gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosECA491EBA0A5EC9EA5_Init () {
                gt_KronosECA491EBA0A5EC9EA5 = TriggerCreate(&quot;gt_KronosECA491EBA0A5EC9EA5_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ???????????? ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosECA780EC97B0ECA084EB9EB5ED8C90EB8BA8_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_dealing;
                fixed lv_dealingLimit;
                const fixed lv_range = 15.0;
                bool lv_flagStrongDealing;
                bool lv_flagHeroicGround;
                bool lv_flagHeroicAir;
                // Variable Initialization
                lv_dealingLimit = 40.0;
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_kronoscycle &gt;= 2)) {
                    TimerStart(gv_kronosECA780EC97B0ECA084EB9EB5Cooltime, 37.783, false, c_timeGame);
                    while ((gv_kronosisAlive == true)) {
                        UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            lv_dealing = (lv_dealing + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropNormal));
                        }
                        UnitGroupLoopEnd();
                        if ((lv_dealing &gt;= lv_dealingLimit)) {
                            lv_flagStrongDealing = true;
                        }
                        if ((UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterGround) | (1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1)) {
                            lv_flagHeroicGround = true;
                        }
                        if ((UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterGround) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1)) {
                            lv_flagHeroicAir = true;
                        }
                        if ((gv_kronosisBusy == false) &amp;&amp; (TimerGetRemaining(gv_kronosECA780EC97B0ECA084EB9EB5Cooltime) &lt;= 1.234)) {
                            if ((lv_flagHeroicGround == true) &amp;&amp; (lv_flagStrongDealing == true)) {
                                TriggerExecute(gt_KronosECA780EC97B0ECA084EB9EB5EBB894EB9E99ED9980, true, false);
                                TimerRestart(gv_kronosECA780EC97B0ECA084EB9EB5Cooltime);
                            }
                            else {
                                if ((lv_flagHeroicGround == true) &amp;&amp; (lv_flagHeroicAir == false) &amp;&amp; (lv_flagStrongDealing == false)) {
                                    TriggerExecute(gt_KronosECA780EC97B0ECA084EB9EB5EAB3B5ED9788EC9D98EAB090EC98A5, true, false);
                                    TimerRestart(gv_kronosECA780EC97B0ECA084EB9EB5Cooltime);
                                }
                                else {
                                    if ((((lv_flagHeroicGround == false) &amp;&amp; (lv_flagHeroicAir == false)) || ((lv_flagHeroicGround == false) &amp;&amp; (lv_flagHeroicAir == true))) &amp;&amp; (lv_flagStrongDealing == true)) {
                                        TriggerExecute(gt_KronosECA780EC97B0ECA084EB9EB5EC8AA4ED858CEC8B9CEC8AA4ED9584EB939C, true, false);
                                        TimerRestart(gv_kronosECA780EC97B0ECA084EB9EB5Cooltime);
                                    }
                                }
                            }
                        }
                        Wait(11.835, c_timeGame);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosECA780EC97B0ECA084EB9EB5ED8C90EB8BA8_Init () {
                gt_KronosECA780EC97B0ECA084EB9EB5ED8C90EB8BA8 = TriggerCreate(&quot;gt_KronosECA780EC97B0ECA084EB9EB5ED8C90EB8BA8_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ???????????? - ????????? ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosECA780EC97B0ECA084EB9EB5EAB3B5ED9788EC9D98EAB090EC98A5_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_maxTargetCount;
                unitgroup lv_targets;
                int lv_castINDEX;
                const fixed lv_range = 15.0;
                // Variable Initialization
                lv_targets = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;DefensiveMatrix&quot;, 0)), c_orderQueueReplace);
                lv_maxTargetCount = gf_SetCountCasebyDifficulty(gf_SetCountCasebyRound(1, 2, 3, 4), gf_SetCountCasebyRound(1, 2, 4, 6), gf_SetCountCasebyRound(2, 3, 5, 8), gf_SetCountCasebyRound(2, 3, 7, 9));
                UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterGround) | (1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitGroupAdd(lv_targets, UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                if ((UnitGroupCount(lv_targets, c_unitCountAlive) &lt; lv_maxTargetCount)) {
                    UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterGround) | (1 &lt;&lt; c_targetFilterMassive), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupAdd(lv_targets, UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                if ((UnitGroupCount(lv_targets, c_unitCountAlive) &lt; lv_maxTargetCount)) {
                    UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterGround) | (1 &lt;&lt; c_targetFilterCanHaveEnergy), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterMassive) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupAdd(lv_targets, UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                if ((UnitGroupCount(lv_targets, c_unitCountAlive) &lt; lv_maxTargetCount)) {
                    UnitGroupLoopBegin(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterGround), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterAir) | (1 &lt;&lt; c_targetFilterArmored) | (1 &lt;&lt; c_targetFilterMassive) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitGroupAdd(lv_targets, UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                UnitGroupLoopBegin(lv_targets);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((lv_castINDEX &lt;= lv_maxTargetCount)) {
                        UnitIssueOrder(gv_kronos, OrderTargetingUnit(AbilityCommand(&quot;GravitonPrison&quot;, 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
                        lv_castINDEX = (lv_castINDEX + 1);
                        Wait(0.5, c_timeGame);
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosECA780EC97B0ECA084EB9EB5EAB3B5ED9788EC9D98EAB090EC98A5_Init () {
                gt_KronosECA780EC97B0ECA084EB9EB5EAB3B5ED9788EC9D98EAB090EC98A5 = TriggerCreate(&quot;gt_KronosECA780EC97B0ECA084EB9EB5EAB3B5ED9788EC9D98EAB090EC98A5_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ???????????? - ???????????? ??????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosECA780EC97B0ECA084EB9EB5EC8AA4ED858CEC8B9CEC8AA4ED9584EB939C_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_target;
                const fixed lv_range = 15.0;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;DefensiveMatrix&quot;, 0)), c_orderQueueReplace);
                if ((UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1)) {
                    lv_target = UnitGetPosition(UnitGroupRandomUnit(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive));
                }
                else {
                    lv_target = UnitGetPosition(UnitGroupRandomUnit(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive));
                }
                UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;ArbiterMPStasisField&quot;, 0), lv_target), c_orderQueueReplace);
                Wait(2.0, c_timeGame);
                UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockback&quot;, 0)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosECA780EC97B0ECA084EB9EB5EC8AA4ED858CEC8B9CEC8AA4ED9584EB939C_Init () {
                gt_KronosECA780EC97B0ECA084EB9EB5EC8AA4ED858CEC8B9CEC8AA4ED9584EB939C = TriggerCreate(&quot;gt_KronosECA780EC97B0ECA084EB9EB5EC8AA4ED858CEC8B9CEC8AA4ED9584EB939C_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ???????????? - ?????????
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosECA780EC97B0ECA084EB9EB5EBB894EB9E99ED9980_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_target;
                fixed lv_range;
                // Variable Initialization
                lv_range = 15.0;
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;DefensiveMatrix&quot;, 0)), c_orderQueueReplace);
                if ((UnitGroupCount(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive) &gt;= 1)) {
                    lv_target = UnitGetPosition(UnitGroupRandomUnit(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive));
                }
                else {
                    lv_target = UnitGetPosition(UnitGroupRandomUnit(gf_GetTargetUnitCandidates(gv_kronos, lv_range, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible), (1 &lt;&lt; (c_targetFilterDead - 32)))), c_unitCountAlive));
                }
                UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;VoidSentryBlackHole&quot;, 0), lv_target), c_orderQueueReplace);
                Wait(2.0, c_timeGame);
                UnitIssueOrder(gv_kronos, Order(AbilityCommand(&quot;PowerKnockback&quot;, 0)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosECA780EC97B0ECA084EB9EB5EBB894EB9E99ED9980_Init () {
                gt_KronosECA780EC97B0ECA084EB9EB5EBB894EB9E99ED9980 = TriggerCreate(&quot;gt_KronosECA780EC97B0ECA084EB9EB5EBB894EB9E99ED9980_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? A
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEBB688EAB8B0EB91A5A_Func (bool testConds, bool runActions) {
                int autoECBB6BF8_ae;
                int autoECBB6BF8_ai;
                int auto3C448B52_ae;
                int auto3C448B52_ai;
                int auto7198C864_ae;
                int auto7198C864_ai;
                int auto6B8F2ACD_ae;
                int auto6B8F2ACD_ai;
                int auto24F2CDAD_ae;
                int auto24F2CDAD_ai;
                int auto4E366791_ae;
                int auto4E366791_ai;
                int autoE5529C4F_ae;
                int autoE5529C4F_ai;
                int auto919865A3_ae;
                int auto919865A3_ai;
                int auto55C15F27_ae;
                int auto55C15F27_ai;
                int auto89F173A7_ae;
                int auto89F173A7_ai;
                // Variable Declarations
                point[5] lv_target1;
                point[5] lv_target2;
                fixed lv_distance;
                fixed lv_kronosAngle;
                fixed lv_arrowWidth;
                int lv_arrowRepeatCount;
                unit[5] lv_pillar;
                const fixed lv_arrowAnglePatched = 0.0;
                point lv_startPoint;
                point[5] lv_startPoint2;
                int lv_i;
                int lv_j;
                int lv_k;
                // Variable Initialization
                lv_distance = 10.0;
                lv_arrowWidth = 2.8;
                lv_j = 1;
                lv_k = 1;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_startPoint = UnitGetPosition(gv_kronos);
                if ((RandomInt(1, 2) == 1)) {
                    auto3C448B52_ae = 4;
                    auto3C448B52_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto3C448B52_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto3C448B52_ae) || (auto3C448B52_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto3C448B52_ae) ) ; lv_i += auto3C448B52_ai ) {
                        lv_target1[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, (lv_i * 90.0));
                    }
                }
                else {
                    autoECBB6BF8_ae = 4;
                    autoECBB6BF8_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoECBB6BF8_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoECBB6BF8_ae) || (autoECBB6BF8_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoECBB6BF8_ae) ) ; lv_i += autoECBB6BF8_ai ) {
                        lv_target1[lv_i] = PointWithOffsetPolar(UnitGetPosition(gv_kronos), lv_distance, ((lv_i * 90.0) + 45.0));
                    }
                }
                lv_arrowRepeatCount = TruncI((lv_distance / lv_arrowWidth));
                auto7198C864_ae = 4;
                auto7198C864_ai = 1;
                lv_k = 1;
                for ( ; ( (auto7198C864_ai &gt;= 0 &amp;&amp; lv_k &lt;= auto7198C864_ae) || (auto7198C864_ai &lt;= 0 &amp;&amp; lv_k &gt;= auto7198C864_ae) ) ; lv_k += auto7198C864_ai ) {
                    auto6B8F2ACD_ae = lv_arrowRepeatCount;
                    auto6B8F2ACD_ai = 1;
                    lv_i = 1;
                    for ( ; ( (auto6B8F2ACD_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto6B8F2ACD_ae) || (auto6B8F2ACD_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto6B8F2ACD_ae) ) ; lv_i += auto6B8F2ACD_ai ) {
                        if ((lv_i == 1)) {
                            libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadLaunch&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_startPoint, (lv_i * lv_arrowWidth), lv_target1[lv_k]));
                        }
                        else {
                            if ((lv_i == lv_arrowRepeatCount)) {
                                libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadImpact&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_startPoint, (lv_i * lv_arrowWidth), lv_target1[lv_k]));
                            }
                            else {
                                libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadCenter&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_startPoint, (lv_i * lv_arrowWidth), lv_target1[lv_k]));
                            }
                        }
                        libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), (AngleBetweenPoints(lv_startPoint, lv_target1[lv_k]) + lv_arrowAnglePatched));
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 1.500000&quot;);
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTintColor 255,0,0&quot;);
                        gv_kronosEBB688EAB8B0EB91A5AlertModel1[lv_j] = libNtve_gf_ActorLastCreated();
                        lv_j = (lv_j + 1);
                    }
                }
                SoundPlayAtPointForPlayer(SoundLink(&quot;MutatorSoAPowerWarning&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_kronos), 0.0, 100.0, 0.0);
                Wait(5.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[1] = UnitLastCreated();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[2] = UnitLastCreated();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[3] = UnitLastCreated();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;apillaroffire&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, lv_startPoint);
                lv_pillar[4] = UnitLastCreated();
                auto24F2CDAD_ae = 4;
                auto24F2CDAD_ai = 1;
                lv_i = 1;
                for ( ; ( (auto24F2CDAD_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto24F2CDAD_ae) || (auto24F2CDAD_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto24F2CDAD_ae) ) ; lv_i += auto24F2CDAD_ai ) {
                    UnitIssueOrder(lv_pillar[lv_i], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_target1[lv_i]), c_orderQueueReplace);
                }
                while (!((libNtve_gf_UnitInRegion(lv_pillar[1], RegionCircle(lv_target1[1], (lv_distance * (2.0 / 3.0)))) == true))) {
                    Wait(0.5, c_timeGame);
                }
                lv_target2[2] = lv_target1[1];
                lv_target2[3] = lv_target1[2];
                lv_target2[4] = lv_target1[3];
                lv_target2[1] = lv_target1[4];
                lv_j = 1;
                auto4E366791_ae = 4;
                auto4E366791_ai = 1;
                lv_k = 1;
                for ( ; ( (auto4E366791_ai &gt;= 0 &amp;&amp; lv_k &lt;= auto4E366791_ae) || (auto4E366791_ai &lt;= 0 &amp;&amp; lv_k &gt;= auto4E366791_ae) ) ; lv_k += auto4E366791_ai ) {
                    lv_distance = (DistanceBetweenPoints(lv_target1[lv_k], lv_target2[lv_k]) * 1.0);
                    lv_arrowRepeatCount = TruncI((lv_distance / lv_arrowWidth));
                    autoE5529C4F_ae = lv_arrowRepeatCount;
                    autoE5529C4F_ai = 1;
                    lv_i = 1;
                    for ( ; ( (autoE5529C4F_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE5529C4F_ae) || (autoE5529C4F_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE5529C4F_ae) ) ; lv_i += autoE5529C4F_ai ) {
                        if ((lv_i == 1)) {
                            libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadLaunch&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_target1[lv_k], (lv_i * lv_arrowWidth), lv_target2[lv_k]));
                        }
                        else {
                            if ((lv_i == lv_arrowRepeatCount)) {
                                libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadImpact&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_target1[lv_k], (lv_i * lv_arrowWidth), lv_target2[lv_k]));
                            }
                            else {
                                libNtve_gf_CreateModelAtPoint(&quot;TerranGuideVisualQuadCenter&quot;, libNtve_gf_PointOffsetTowardsPoint(lv_target1[lv_k], (lv_i * lv_arrowWidth), lv_target2[lv_k]));
                            }
                        }
                        libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), (AngleBetweenPoints(lv_target1[lv_k], lv_target2[lv_k]) + lv_arrowAnglePatched));
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetScale 1.500000&quot;);
                        ActorSend(libNtve_gf_ActorLastCreated(), &quot;SetTintColor 255,0,0&quot;);
                        gv_kronosEBB688EAB8B0EB91A5AlertModel2[lv_j] = libNtve_gf_ActorLastCreated();
                        lv_j = (lv_j + 1);
                    }
                }
                while (!((libNtve_gf_UnitInRegion(lv_pillar[1], RegionCircle(lv_target1[1], 0.5)) == true))) {
                    Wait(0.5, c_timeGame);
                }
                auto919865A3_ae = 50;
                auto919865A3_ai = 1;
                lv_i = 1;
                for ( ; ( (auto919865A3_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto919865A3_ae) || (auto919865A3_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto919865A3_ae) ) ; lv_i += auto919865A3_ai ) {
                    libNtve_gf_KillModel(gv_kronosEBB688EAB8B0EB91A5AlertModel1[lv_i]);
                }
                auto55C15F27_ae = 4;
                auto55C15F27_ai = 1;
                lv_i = 1;
                for ( ; ( (auto55C15F27_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto55C15F27_ae) || (auto55C15F27_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto55C15F27_ae) ) ; lv_i += auto55C15F27_ai ) {
                    UnitIssueOrder(lv_pillar[lv_i], OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), lv_target2[lv_i]), c_orderQueueReplace);
                }
                auto89F173A7_ae = 4;
                auto89F173A7_ai = 1;
                lv_i = 1;
                for ( ; ( (auto89F173A7_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto89F173A7_ae) || (auto89F173A7_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto89F173A7_ae) ) ; lv_i += auto89F173A7_ai ) {
                    gf_KronosEBB688EAB8B0EB91A5EAB8B0EB91A5ECA09CEAB1B0(lv_pillar[lv_i], lv_target2[lv_i]);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEBB688EAB8B0EB91A5A_Init () {
                gt_KronosEBB688EAB8B0EB91A5A = TriggerCreate(&quot;gt_KronosEBB688EAB8B0EB91A5A_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? B
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEBB688EAB8B0EB91A5B_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundPlayAtPointForPlayer(SoundLink(&quot;MutatorSoAPowerWarning&quot;, -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_kronos), 0.0, 100.0, 0.0);
                TriggerExecute(gt_KronosEBB688EAB8B0EB91A5B1, true, false);
                Wait(8.0, c_timeGame);
                TriggerExecute(gt_KronosEBB688EAB8B0EB91A5B2, true, false);
                Wait(6.0, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEBB688EAB8B0EB91A5B_Init () {
                gt_KronosEBB688EAB8B0EB91A5B = TriggerCreate(&quot;gt_KronosEBB688EAB8B0EB91A5B_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? B-1
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEBB688EAB8B0EB91A5B1_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosEBB688EAB8B0EB91A5Basic(true, 3.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEBB688EAB8B0EB91A5B1_Init () {
                gt_KronosEBB688EAB8B0EB91A5B1 = TriggerCreate(&quot;gt_KronosEBB688EAB8B0EB91A5B1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos ????????? B-2
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosEBB688EAB8B0EB91A5B2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosEBB688EAB8B0EB91A5Basic(false, 0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosEBB688EAB8B0EB91A5B2_Init () {
                gt_KronosEBB688EAB8B0EB91A5B2 = TriggerCreate(&quot;gt_KronosEBB688EAB8B0EB91A5B2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State - Update Magic Guard
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStateUpdateMagicGuard_Func (bool testConds, bool runActions) {
                int autoB3CD77FE_val;
                // Variable Declarations
                text lv_tooltipText;
                int lv_vOIDMAGICGUARDpercentnormal;
                const int lv_vOIDMAGICGUARDpercentfromhero = 20;
                const int lv_vOIDMAGICGUARDpercentfromability = 20;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                autoB3CD77FE_val = gv_kronoscycle;
                if (autoB3CD77FE_val == 1) {
                    TextExpressionSetToken(&quot;Param/Expression/DF1C3825&quot;, &quot;A&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromhero));
                    TextExpressionSetToken(&quot;Param/Expression/DF1C3825&quot;, &quot;B&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromability));
                    lv_tooltipText = TextExpressionAssemble(&quot;Param/Expression/DF1C3825&quot;);
                }
                else if (autoB3CD77FE_val == 2) {
                    lv_vOIDMAGICGUARDpercentnormal = 10;
                    TextExpressionSetToken(&quot;Param/Expression/B9DDA0DF&quot;, &quot;C&quot;, IntToText(lv_vOIDMAGICGUARDpercentnormal));
                    TextExpressionSetToken(&quot;Param/Expression/B9DDA0DF&quot;, &quot;A&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromhero));
                    TextExpressionSetToken(&quot;Param/Expression/B9DDA0DF&quot;, &quot;B&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromability));
                    lv_tooltipText = TextExpressionAssemble(&quot;Param/Expression/B9DDA0DF&quot;);
                }
                else if (autoB3CD77FE_val == 3) {
                    lv_vOIDMAGICGUARDpercentnormal = 15;
                    TextExpressionSetToken(&quot;Param/Expression/98751427&quot;, &quot;C&quot;, IntToText(lv_vOIDMAGICGUARDpercentnormal));
                    TextExpressionSetToken(&quot;Param/Expression/98751427&quot;, &quot;A&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromhero));
                    TextExpressionSetToken(&quot;Param/Expression/98751427&quot;, &quot;B&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromability));
                    lv_tooltipText = TextExpressionAssemble(&quot;Param/Expression/98751427&quot;);
                }
                else if (autoB3CD77FE_val == 4) {
                    lv_vOIDMAGICGUARDpercentnormal = 20;
                    TextExpressionSetToken(&quot;Param/Expression/68A6CE77&quot;, &quot;C&quot;, IntToText(lv_vOIDMAGICGUARDpercentnormal));
                    TextExpressionSetToken(&quot;Param/Expression/68A6CE77&quot;, &quot;A&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromhero));
                    TextExpressionSetToken(&quot;Param/Expression/68A6CE77&quot;, &quot;B&quot;, IntToText(lv_vOIDMAGICGUARDpercentfromability));
                    lv_tooltipText = TextExpressionAssemble(&quot;Param/Expression/68A6CE77&quot;);
                }
                else {
                }
                libNtve_gf_SetDialogItemTooltip(gv_kronosStateMAGICGUARDitem, lv_tooltipText, PlayerGroupAll());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStateUpdateMagicGuard_Init () {
                gt_KronosStateUpdateMagicGuard = TriggerCreate(&quot;gt_KronosStateUpdateMagicGuard_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State Preset 1 - Basic
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatePreset1Basic_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosStateAddState2(8, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatePreset1Basic_Init () {
                gt_KronosStatePreset1Basic = TriggerCreate(&quot;gt_KronosStatePreset1Basic_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State Preset 2 - Basic
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatePreset2Basic_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosStateAddState2(8, 2);
                gf_KronosStateAddState2(9, 2);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatePreset2Basic_Init () {
                gt_KronosStatePreset2Basic = TriggerCreate(&quot;gt_KronosStatePreset2Basic_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State Preset 3 - Storm
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatePreset3Storm_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosStateAddState2(3, 3);
                gf_KronosStateAddState2(2, 3);
                gf_KronosStateAddState2(7, 3);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatePreset3Storm_Init () {
                gt_KronosStatePreset3Storm = TriggerCreate(&quot;gt_KronosStatePreset3Storm_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State Preset 4 - Death Penalty
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatePreset4DeathPenalty_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosStateAddState2(4, 4);
                gf_KronosStateAddState2(2, 4);
                gf_KronosStateAddState2(7, 4);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatePreset4DeathPenalty_Init () {
                gt_KronosStatePreset4DeathPenalty = TriggerCreate(&quot;gt_KronosStatePreset4DeathPenalty_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State Preset 5 - Satellite Drop
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatePreset5SatelliteDrop_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosStateAddState2(1, 5);
                gf_KronosStateAddState2(7, 5);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatePreset5SatelliteDrop_Init () {
                gt_KronosStatePreset5SatelliteDrop = TriggerCreate(&quot;gt_KronosStatePreset5SatelliteDrop_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State Preset 6 - Wyvern
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatePreset6Wyvern_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosStateAddState2(5, 6);
                gf_KronosStateAddState2(7, 6);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatePreset6Wyvern_Init () {
                gt_KronosStatePreset6Wyvern = TriggerCreate(&quot;gt_KronosStatePreset6Wyvern_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos State Preset 7 - A Pillar of Fire
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatePreset7APillarofFire_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_KronosStateAddState2(10, 7);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatePreset7APillarofFire_Init () {
                gt_KronosStatePreset7APillarofFire = TriggerCreate(&quot;gt_KronosStatePreset7APillarofFire_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Tips - Show Tips
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTipsShowTips_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TipAlertPanelClear(PlayerGroupAll());
                TriggerExecute(gt_KronosTipsSatelliteDrop, true, false);
                TriggerExecute(gt_KronosTipsWyvern, true, false);
                TriggerExecute(gt_KronosTipsDeathPenalty, true, false);
                TriggerExecute(gt_KronosTipsFireStormandBloodyImprison, true, false);
                TriggerExecute(gt_KronosTipsArmorCrashVoidMagicGuardandIronShield, true, false);
                TriggerExecute(gt_KronosTipsKronosGeneral, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTipsShowTips_Init () {
                gt_KronosTipsShowTips = TriggerCreate(&quot;gt_KronosTipsShowTips_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Tips - Kronos General
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTipsKronosGeneral_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/C51325A5&quot;), libNtve_ge_TipType_NewUnit), StringExternal(&quot;Param/Value/B47E1676&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\tip_hybridbehemoth.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTipsKronosGeneral_Init () {
                gt_KronosTipsKronosGeneral = TriggerCreate(&quot;gt_KronosTipsKronosGeneral_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Tips - Armor Crash, Void Magic Guard, and Iron Shield
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTipsArmorCrashVoidMagicGuardandIronShield_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/606B1795&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/3352FBE5&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-ability-terran-ignorearmor.dds&quot;);
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/952B3D9F&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/3116A468&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-ability-protoss-voidarmor.dds&quot;);
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/F9BF320B&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/4CAAA62E&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-ability-protoss-shieldcapacitor.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTipsArmorCrashVoidMagicGuardandIronShield_Init () {
                gt_KronosTipsArmorCrashVoidMagicGuardandIronShield = TriggerCreate(&quot;gt_KronosTipsArmorCrashVoidMagicGuardandIronShield_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Tips - Fire Storm and Bloody Imprison
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTipsFireStormandBloodyImprison_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/177C9A03&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/8AA071EB&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-ability-protoss-psistorm.dds&quot;);
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/3122FD47&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/0DCD4647&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-tips-researchunlocked.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTipsFireStormandBloodyImprison_Init () {
                gt_KronosTipsFireStormandBloodyImprison = TriggerCreate(&quot;gt_KronosTipsFireStormandBloodyImprison_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Tips - Death Penalty
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTipsDeathPenalty_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/34DA9A14&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/F2F94D7A&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-ability-zerg-plague.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTipsDeathPenalty_Init () {
                gt_KronosTipsDeathPenalty = TriggerCreate(&quot;gt_KronosTipsDeathPenalty_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Tips - Wyvern
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTipsWyvern_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/CD6EA25F&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/CC144364&quot;), StringToText(&quot;&quot;), &quot;Wyvern New.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTipsWyvern_Init () {
                gt_KronosTipsWyvern = TriggerCreate(&quot;gt_KronosTipsWyvern_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Tips - Satellite Drop
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTipsSatelliteDrop_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/8603BF26&quot;), libNtve_ge_TipType_NewAbility), StringExternal(&quot;Param/Value/0B98D0FE&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\talent-raynor-level08-orbitaldroppods.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTipsSatelliteDrop_Init () {
                gt_KronosTipsSatelliteDrop = TriggerCreate(&quot;gt_KronosTipsSatelliteDrop_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos 1st Alert
            //--------------------------------------------------------------------------------------------------
            bool gt_Kronos1stAlert_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_conversationAvailable = false;
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene02_1stKRONOS_1_Announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/2BA7AF61&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Kronos1stAlert_Init () {
                gt_Kronos1stAlert = TriggerCreate(&quot;gt_Kronos1stAlert_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Kronos1stAlert, (5.7 * 60), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos 2nd Alert
            //--------------------------------------------------------------------------------------------------
            bool gt_Kronos2ndAlert_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_conversationAvailable = false;
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene04_2ndKRONOS_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/D95FBA9C&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Kronos2ndAlert_Init () {
                gt_Kronos2ndAlert = TriggerCreate(&quot;gt_Kronos2ndAlert_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Kronos2ndAlert, (11.7 * 60), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos 3rd Alert
            //--------------------------------------------------------------------------------------------------
            bool gt_Kronos3rdAlert_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_conversationAvailable = false;
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene06_3rdKRONOS_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/C25C5782&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Kronos3rdAlert_Init () {
                gt_Kronos3rdAlert = TriggerCreate(&quot;gt_Kronos3rdAlert_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Kronos3rdAlert, (17.7 * 60), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos 4th Alert
            //--------------------------------------------------------------------------------------------------
            bool gt_Kronos4thAlert_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_conversationAvailable = false;
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene08_4thKRONOS_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/503C1487&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Kronos4thAlert_Init () {
                gt_Kronos4thAlert = TriggerCreate(&quot;gt_Kronos4thAlert_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Kronos4thAlert, (23.7 * 60), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Waves
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosWaves_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (6.3 * 60.0), 4);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (12.3 * 60.0), 4);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (18.3 * 60.0), 4);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (24.3 * 60.0), 4);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (6.3 * 60.0), 3);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (12.3 * 60.0), 3);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (18.3 * 60.0), 3);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (24.3 * 60.0), 3);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (6.3 * 60.0), 2);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (12.3 * 60.0), 2);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (18.3 * 60.0), 2);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (24.3 * 60.0), 2);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (6.3 * 60.0), 1);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (12.3 * 60.0), 1);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (18.3 * 60.0), 1);
                gf_RunKronosAttackatMissionTime(gt_KronosSummoningWave, (24.3 * 60.0), 1);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosWaves_Init () {
                gt_KronosWaves = TriggerCreate(&quot;gt_KronosWaves_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos is dead
            //--------------------------------------------------------------------------------------------------
            bool gt_Kronosisdead_Func (bool testConds, bool runActions) {
                int auto7D1C2D0E_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerPause(gv_kronosTimer, true);
                TimerPause(gv_kronosCombatTimer, true);
                gv_kronosisAlive = false;
                gv_kronoscycle = (gv_kronoscycle + 1);
                gv_kronos = null;
                TriggerExecute(gt_ObjectiveKillKronosUpdate, true, false);
                gv_kronosisinCombat = false;
                PingSetVisible(gv_kronosActivePing, false);
                PingSetVisible(gv_kronosDeActivePing, true);
                TriggerExecute(gt_ShowKronosPrepSummoningPing, true, false);
                libNtve_gf_ShowHideBossBar(false, gv_kronosBossbarID);
                libCOMI_gf_ShowHideProgressBar(false);
                gf_KronosStateRemoveStates2();
                TimerWindowShow(gv_objectiveTimerWindow, PlayerGroupAll(), true);
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Wyvern&quot;)) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                }
                UnitGroupLoopEnd();
                TriggerExecute(gt_KronosSummoningPreparingMotionCreate, true, false);
                auto7D1C2D0E_val = (gv_kronoscycle - 1);
                if (auto7D1C2D0E_val == 1) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronosNisemono, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene03_1stKRONOSdead_1_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/39ABE3F0&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene03_1stKRONOSdead_2_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/0F3D6394&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto7D1C2D0E_val == 2) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronosNisemono, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene05_2ndKRONOSdead_1_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/0AA49460&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene05_2ndKRONOSdead_2_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/BFE9CCD5&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto7D1C2D0E_val == 3) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronosNisemono, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene07_3rdKRONOSdead_1_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/D3EBF048&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene07_3rdKRONOSdead_2_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/EDD7A18B&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto7D1C2D0E_val == 4) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronosNisemono, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene09_4thKRONOSdead_1_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/9BD6873D&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene09_4thKRONOSdead_2_Announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/B80F6052&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                }
                TriggerExecute(gt_KronosStatesHidePresist, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Kronosisdead_Init () {
                gt_Kronosisdead = TriggerCreate(&quot;gt_Kronosisdead_Func&quot;);
                TriggerAddEventUnitDied(gt_Kronosisdead, UnitRefFromVariable(&quot;gv_kronos&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Timer Window
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosTimerWindow_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                TimerStart(gv_kronosTimer, (6.0 * 60.0), false, c_timeGame);
                Wait(4.0, c_timeGame);
                while ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(gt_ObjectiveKillKronosUpdate, true, false);
                    Wait(0.5, c_timeGame);
                }
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosTimerWindow_Init () {
                gt_KronosTimerWindow = TriggerCreate(&quot;gt_KronosTimerWindow_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: If Kronos is in Combat A
            //--------------------------------------------------------------------------------------------------
            bool gt_IfKronosisinCombatA_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerRestart(gv_kronosCombatTimer);
                gv_kronosisinCombat = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IfKronosisinCombatA_Init () {
                gt_IfKronosisinCombatA = TriggerCreate(&quot;gt_IfKronosisinCombatA_Func&quot;);
                TriggerAddEventUnitDamaged(gt_IfKronosisinCombatA, UnitRefFromVariable(&quot;gv_kronos&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: If Kronos is in Rest
            //--------------------------------------------------------------------------------------------------
            bool gt_IfKronosisinRest_Func (bool testConds, bool runActions) {
                int auto42CDA374_ae;
                int auto42CDA374_ai;
                int auto55A40D65_ae;
                int auto55A40D65_ai;
                // Variable Declarations
                unitgroup lv_candidates;
                point lv_destination;
                int lv_searchRange;
                int lv_teleportRequired;
                int lv_i;
                // Variable Initialization
                lv_candidates = UnitGroupEmpty();
                lv_searchRange = 20;
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_kronosisBusy == false)) {
                    gv_kronosisinCombat = false;
                    auto42CDA374_ae = 500;
                    auto42CDA374_ai = 10;
                    lv_searchRange = 20;
                    for ( ; ( (auto42CDA374_ai &gt;= 0 &amp;&amp; lv_searchRange &lt;= auto42CDA374_ae) || (auto42CDA374_ai &lt;= 0 &amp;&amp; lv_searchRange &gt;= auto42CDA374_ae) ) ; lv_searchRange += auto42CDA374_ai ) {
                        lv_candidates = gf_GetTargetUnitCandidates(gv_kronos, lv_searchRange, UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterHeroic) | (1 &lt;&lt; c_targetFilterUser1) | (1 &lt;&lt; c_targetFilterWorker) | (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterDestructible) | (1 &lt;&lt; c_targetFilterUncommandable), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32)) | (1 &lt;&lt; (c_targetFilterRadar - 32))));
                        if ((UnitGroupCount(lv_candidates, c_unitCountAlive) &gt;= 1)) {
                            lv_destination = UnitGetPosition(UnitGroupRandomUnit(lv_candidates, c_unitCountAlive));
                            lv_teleportRequired = TruncI((DistanceBetweenPoints(UnitGetPosition(gv_kronos), lv_destination) / 12.0));
                            auto55A40D65_ae = lv_teleportRequired;
                            auto55A40D65_ai = 1;
                            lv_i = 1;
                            for ( ; ( (auto55A40D65_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto55A40D65_ae) || (auto55A40D65_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto55A40D65_ae) ) ; lv_i += auto55A40D65_ai ) {
                                UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;Teleport2&quot;, 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_kronos), 12.0, lv_destination)), c_orderQueueReplace);
                                Wait(2.0, c_timeAI);
                            }
                            UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), lv_destination), c_orderQueueReplace);
                            break;
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IfKronosisinRest_Init () {
                gt_IfKronosisinRest = TriggerCreate(&quot;gt_IfKronosisinRest_Func&quot;);
                TriggerAddEventTimer(gt_IfKronosisinRest, gv_kronosCombatTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Show Kronos Prep Summoning Ping
            //--------------------------------------------------------------------------------------------------
            bool gt_ShowKronosPrepSummoningPing_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(959960150), 10.0), 0.0, false);
                VisRevealArea(gv_pLAYER_02_USER, RegionCircle(PointFromId(959960150), 10.0), 0.0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowKronosPrepSummoningPing_Init () {
                gt_ShowKronosPrepSummoningPing = TriggerCreate(&quot;gt_ShowKronosPrepSummoningPing_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Awaken Window Update
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosAwakenWindowUpdate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_progressPercentage;
                fixed lv_maxTimerCount;
                // Variable Initialization
                lv_maxTimerCount = (6.0 * 60.0);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_kronosisAlive == false)) {
                    libCOMI_gf_ShowHideProgressBar(false);
                }
                else {
                    libCOMI_gf_ShowHideProgressBar(true);
                }
                while ((gv_kronosisAlive == true)) {
                    lv_progressPercentage = RoundI(((TimerGetElapsed(gv_kronosTimer) / lv_maxTimerCount) * 100.0));
                    libCOMI_gf_SetProgressBarProgress(lv_progressPercentage);
                    TextExpressionSetToken(&quot;Param/Expression/13C8098A&quot;, &quot;A&quot;, IntToText(lv_progressPercentage));
                    libCOMI_gf_SetProgressBarLabel(TextExpressionAssemble(&quot;Param/Expression/13C8098A&quot;));
                    if ((lv_progressPercentage &lt;= 50)) {
                        libCOMI_gf_SetProgressBarColor(Color(42.75, 68.24, 16.86));
                    }
                    else {
                        if ((lv_progressPercentage &lt;= 75)) {
                            libCOMI_gf_SetProgressBarColor(Color(100.00, 100.00, 0.00));
                        }
                    }
                    if ((lv_progressPercentage &gt; 75)) {
                        libCOMI_gf_SetProgressBarColor(Color(100.00, 0.00, 0.00));
                    }
                    Wait(0.5, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosAwakenWindowUpdate_Init () {
                gt_KronosAwakenWindowUpdate = TriggerCreate(&quot;gt_KronosAwakenWindowUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Summoning Wave
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosSummoningWave_Func (bool testConds, bool runActions) {
                int auto6FE0F9A0_val;
                // Variable Declarations
                point lv_eC839DEC84B1ECA780;
                // Variable Initialization
                lv_eC839DEC84B1ECA780 = PointFromId(959960150);
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                TriggerExecute(gt_KronosSummoningPreparingMotionRemove, true, false);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridKronos&quot;, 0, gv_pLAYER_04_ENEMY, lv_eC839DEC84B1ECA780);
                gv_kronos = UnitLastCreated();
                gf_SummoningKronosinit();
                if ((RandomInt(0, 100) &lt; 50)) {
                    UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(886751863)), c_orderQueueReplace);
                    UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(48588845)), c_orderQueueReplace);
                    UnitIssueOrder(gv_kronos, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueAddToEnd);
                }
                TriggerExecute(gt_SmartAbilityCaster, true, false);
                TriggerExecute(gt_KronosED9A8CED94BCECA084EB9EB5ED8C90EB8BA8, true, false);
                auto6FE0F9A0_val = gv_kronoscycle;
                if (auto6FE0F9A0_val == 1) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene26_KronosPreWarning_1&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/48FE5AD2&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene02_1stKRONOS_2_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/4D92386B&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(5.0, c_timeGame);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene25_KronosOverloadAlert&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/56CBDBBE&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto6FE0F9A0_val == 2) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene26_KronosPreWarning_12&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/35494214&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene04_2ndKRONOS_2_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/21325176&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto6FE0F9A0_val == 3) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene26_KronosPreWarning_122&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/D55F8442&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene06_3rdKRONOS_2_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/8904E688&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto6FE0F9A0_val == 4) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.2, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    SoundPlayForPlayer(SoundLink(&quot;TUIWarningPing&quot;, 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene26_KronosPreWarning_1222&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/209007FA&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene08_4thKRONOS_2_KRONOS&quot;, -1), gv_speakerKronos, StringExternal(&quot;Param/Value/646387AD&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                }
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosSummoningWave_Init () {
                gt_KronosSummoningWave = TriggerCreate(&quot;gt_KronosSummoningWave_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Init
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                lv_i = 1;
                // Actions
                if (!runActions) {
                    return true;
                }
                TimerStart(gv_kronosTimer, (6.0 * 60.0), false, c_timeGame);
                TimerPause(TimerLastStarted(), true);
                TimerStart(gv_kronosCombatTimer, 6.0, true, c_timeGame);
                TimerPause(TimerLastStarted(), true);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, UnitGetPosition(gv_kronos), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
                PingSetTooltip(PingLastCreated(), StringExternal(&quot;Param/Value/6C8CC39F&quot;));
                gv_kronosActivePing = PingLastCreated();
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, PointFromId(959960150), StringExternal(&quot;Param/Value/8A3E445B&quot;));
                gv_kronosDeActivePing = PingLastCreated();
                PingSetVisible(gv_kronosActivePing, false);
                libNtve_gf_DisplayBossBar(gv_kronosBossbarID, &quot;Assets\\Textures\\hybridnemesisportrait_static.dds&quot;, StringExternal(&quot;Param/Value/114530F6&quot;), 0, PlayerGroupAll());
                libNtve_gf_SetBossBarBoss(gv_kronosBossbarID, gv_kronos, true);
                libNtve_gf_SetBossBarRace(gv_kronosBossbarID, libNtve_ge_BossBarRace_Zerg, true);
                libNtve_gf_MoveBossBar(gv_kronosBossbarID, c_anchorTop, 0, 90);
                libNtve_gf_ShowHideBossBar(false, gv_kronosBossbarID);
                libCOMI_gf_DisplayProgressBar(StringExternal(&quot;Param/Value/AC8A99BF&quot;), 0, 100);
                libCOMI_gf_ShowHideProgressBar(false);
                libNtve_gf_CreateModelAtPoint(&quot;GenericFire_Large&quot;, PointFromId(1681531527));
                gv_kronosFire[lv_i] = libNtve_gf_ActorLastCreated();
                lv_i = (lv_i + 1);
                libNtve_gf_CreateModelAtPoint(&quot;GenericFire_Large&quot;, PointFromId(552556147));
                gv_kronosFire[lv_i] = libNtve_gf_ActorLastCreated();
                lv_i = (lv_i + 1);
                libNtve_gf_CreateModelAtPoint(&quot;GenericFire_Large&quot;, PointFromId(1421261323));
                gv_kronosFire[lv_i] = libNtve_gf_ActorLastCreated();
                lv_i = (lv_i + 1);
                libNtve_gf_CreateModelAtPoint(&quot;GenericFire_Large&quot;, PointFromId(2099326030));
                gv_kronosFire[lv_i] = libNtve_gf_ActorLastCreated();
                lv_i = (lv_i + 1);
                libNtve_gf_CreateModelAtPoint(&quot;GenericFire_Large&quot;, PointFromId(1333009703));
                gv_kronosFire[lv_i] = libNtve_gf_ActorLastCreated();
                lv_i = (lv_i + 1);
                libNtve_gf_CreateModelAtPoint(&quot;GenericFire_Large&quot;, PointFromId(959482363));
                gv_kronosFire[lv_i] = libNtve_gf_ActorLastCreated();
                lv_i = (lv_i + 1);
                libNtve_gf_CreateModelAtPoint(&quot;GenericFire_Large&quot;, PointFromId(85426403));
                gv_kronosFire[lv_i] = libNtve_gf_ActorLastCreated();
                TriggerExecute(gt_KronosStatePreset1Basic, true, false);
                TriggerExecute(gt_KronosStatePreset2Basic, true, false);
                TriggerExecute(gt_KronosStatePreset3Storm, true, false);
                TriggerExecute(gt_KronosStatePreset4DeathPenalty, true, false);
                TriggerExecute(gt_KronosStatePreset5SatelliteDrop, true, false);
                TriggerExecute(gt_KronosStatePreset6Wyvern, true, false);
                TriggerExecute(gt_KronosStatePreset7APillarofFire, true, false);
                TriggerExecute(gt_KronosSummoningPreparingMotionCreate, true, false);
                VisFillArea(gv_pLAYER_01_USER, RegionFromId(17), c_fillTypeFogged, false);
                VisFillArea(gv_pLAYER_02_USER, RegionFromId(17), c_fillTypeFogged, false);
                VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(959960150), 10.0), 0.0, false);
                VisRevealArea(gv_pLAYER_02_USER, RegionCircle(PointFromId(959960150), 10.0), 0.0, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosInit_Init () {
                gt_KronosInit = TriggerCreate(&quot;gt_KronosInit_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Summoning Preparing Motion Create
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosSummoningPreparingMotionCreate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;HybridKronos&quot;, 0, gv_pLAYER_03_ENEMY, PointFromId(959960150), PointFromId(249));
                gv_kronosNisemono = UnitLastCreated();
                libNtve_gf_SendActorMessageToUnit(gv_kronosNisemono, &quot;SetTintColor {255,0,0 2.000000}&quot;);
                UnitSetState(gv_kronosNisemono, c_unitStateSelectable, false);
                UnitSetState(gv_kronosNisemono, c_unitStateCursorable, false);
                UnitSetState(gv_kronosNisemono, c_unitStateStatusBar, false);
                libNtve_gf_MakeUnitInvulnerable(gv_kronosNisemono, true);
                UnitSetState(gv_kronosNisemono, c_unitStateMoveSuppressed, false);
                UnitAbilityEnable(gv_kronosNisemono, &quot;attack&quot;, false);
                UnitAbilityEnable(gv_kronosNisemono, &quot;Teleport2&quot;, false);
                UnitSetHeight(gv_kronosNisemono, 3.0, 0.0);
                UnitSetInfoText(gv_kronosNisemono, StringExternal(&quot;Param/Value/7C5BFD79&quot;), StringExternal(&quot;Param/Value/F849652C&quot;), StringToText(&quot;&quot;));
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kronosNisemono), c_animNameDefault, &quot;Stand Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                while ((UnitIsAlive(gv_kronosNisemono) == true)) {
                    libNtve_gf_CreateActorAtPoint(&quot;HybridWarpInEffect&quot;, PointFromId(959960150));
                    gv_kronosNisemonoWarpActor = libNtve_gf_ActorLastCreated();
                    ActorSend(gv_kronosNisemonoWarpActor, &quot;SetScale 2.000000&quot;);
                    libHots_gf_StoreActorForUnit(gv_kronosNisemono, 1, gv_kronosNisemonoWarpActor);
                    Wait(5.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosSummoningPreparingMotionCreate_Init () {
                gt_KronosSummoningPreparingMotionCreate = TriggerCreate(&quot;gt_KronosSummoningPreparingMotionCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos Summoning Preparing Motion Remove
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosSummoningPreparingMotionRemove_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_kronosNisemono, 1));
                UnitRemove(gv_kronosNisemono);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosSummoningPreparingMotionRemove_Init () {
                gt_KronosSummoningPreparingMotionRemove = TriggerCreate(&quot;gt_KronosSummoningPreparingMotionRemove_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos States Hide Presist
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatesHidePresist_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while ((gv_kronosisAlive == false)) {
                    gf_KronosStateRemoveStates2();
                    Wait(31.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatesHidePresist_Init () {
                gt_KronosStatesHidePresist = TriggerCreate(&quot;gt_KronosStatesHidePresist_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Kronos States Hide in Low Life
            //--------------------------------------------------------------------------------------------------
            bool gt_KronosStatesHideinLowLife_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KronosStatesHideinLowLife_Init () {
                gt_KronosStatesHideinLowLife = TriggerCreate(&quot;gt_KronosStatesHideinLowLife_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tower of Void Dead
            //--------------------------------------------------------------------------------------------------
            bool gt_TowerofVoidDead_Func (bool testConds, bool runActions) {
                int auto19CDDF2C_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto19CDDF2C_val = TechTreeUnitCount(gv_pLAYER_04_ENEMY, &quot;TowerOfVoid&quot;, c_techCountQueuedOrBetter);
                if (auto19CDDF2C_val == 3) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene10_1stTower_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/E05EA9D3&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto19CDDF2C_val == 2) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene11_2ndTower_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/AD4288D2&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else if (auto19CDDF2C_val == 1) {
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene12_3rdTower_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/DAB129FE&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TowerofVoidDead_Init () {
                gt_TowerofVoidDead = TriggerCreate(&quot;gt_TowerofVoidDead_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tower of Void Dead 1
            //--------------------------------------------------------------------------------------------------
            bool gt_TowerofVoidDead1_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_TowerofVoidDead, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TowerofVoidDead1_Init () {
                gt_TowerofVoidDead1 = TriggerCreate(&quot;gt_TowerofVoidDead1_Func&quot;);
                TriggerAddEventUnitDied(gt_TowerofVoidDead1, UnitRefFromVariable(&quot;gv_towerofVoid[1]&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tower of Void Dead 2
            //--------------------------------------------------------------------------------------------------
            bool gt_TowerofVoidDead2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_TowerofVoidDead, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TowerofVoidDead2_Init () {
                gt_TowerofVoidDead2 = TriggerCreate(&quot;gt_TowerofVoidDead2_Func&quot;);
                TriggerAddEventUnitDied(gt_TowerofVoidDead2, UnitRefFromVariable(&quot;gv_towerofVoid[2]&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tower of Void Dead 3
            //--------------------------------------------------------------------------------------------------
            bool gt_TowerofVoidDead3_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_TowerofVoidDead, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TowerofVoidDead3_Init () {
                gt_TowerofVoidDead3 = TriggerCreate(&quot;gt_TowerofVoidDead3_Func&quot;);
                TriggerAddEventUnitDied(gt_TowerofVoidDead3, UnitRefFromVariable(&quot;gv_towerofVoid[3]&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tower of Void Dead 4
            //--------------------------------------------------------------------------------------------------
            bool gt_TowerofVoidDead4_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_TowerofVoidDead, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TowerofVoidDead4_Init () {
                gt_TowerofVoidDead4 = TriggerCreate(&quot;gt_TowerofVoidDead4_Func&quot;);
                TriggerAddEventUnitDied(gt_TowerofVoidDead4, UnitRefFromVariable(&quot;gv_towerofVoid[4]&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Attack Ingoracne 1
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillAttackIngoracne1_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((gv_canTowerofVoidUseAttackIngorance[1] == true) &amp;&amp; (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) &lt; 50.0))) {
                    libNtve_gf_AICast(EventUnit(), Order(AbilityCommand(&quot;AttackInogrance&quot;, 0)));
                    gv_canTowerofVoidUseAttackIngorance[1] = false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillAttackIngoracne1_Init () {
                gt_SkillAttackIngoracne1 = TriggerCreate(&quot;gt_SkillAttackIngoracne1_Func&quot;);
                TriggerAddEventUnitDamaged(gt_SkillAttackIngoracne1, UnitRefFromVariable(&quot;gv_towerofVoid[1]&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Attack Ingoracne 2
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillAttackIngoracne2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((gv_canTowerofVoidUseAttackIngorance[2] == true) &amp;&amp; (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) &lt; 50.0))) {
                    libNtve_gf_AICast(EventUnit(), Order(AbilityCommand(&quot;AttackInogrance&quot;, 0)));
                    gv_canTowerofVoidUseAttackIngorance[2] = false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillAttackIngoracne2_Init () {
                gt_SkillAttackIngoracne2 = TriggerCreate(&quot;gt_SkillAttackIngoracne2_Func&quot;);
                TriggerAddEventUnitDamaged(gt_SkillAttackIngoracne2, UnitRefFromVariable(&quot;gv_towerofVoid[2]&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Attack Ingoracne 3
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillAttackIngoracne3_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((gv_canTowerofVoidUseAttackIngorance[3] == true) &amp;&amp; (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) &lt; 50.0))) {
                    libNtve_gf_AICast(EventUnit(), Order(AbilityCommand(&quot;AttackInogrance&quot;, 0)));
                    gv_canTowerofVoidUseAttackIngorance[3] = false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillAttackIngoracne3_Init () {
                gt_SkillAttackIngoracne3 = TriggerCreate(&quot;gt_SkillAttackIngoracne3_Func&quot;);
                TriggerAddEventUnitDamaged(gt_SkillAttackIngoracne3, UnitRefFromVariable(&quot;gv_towerofVoid[3]&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Attack Ingoracne 4
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillAttackIngoracne4_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((gv_canTowerofVoidUseAttackIngorance[4] == true) &amp;&amp; (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) &lt; 50.0))) {
                    libNtve_gf_AICast(EventUnit(), Order(AbilityCommand(&quot;AttackInogrance&quot;, 0)));
                    gv_canTowerofVoidUseAttackIngorance[4] = false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillAttackIngoracne4_Init () {
                gt_SkillAttackIngoracne4 = TriggerCreate(&quot;gt_SkillAttackIngoracne4_Func&quot;);
                TriggerAddEventUnitDamaged(gt_SkillAttackIngoracne4, UnitRefFromVariable(&quot;gv_towerofVoid[4]&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Fire Storm 1
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillFireStorm1_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_towerFireStormUseable[1] == true)) {
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/D009CA95&quot;));
                    UnitIssueOrder(gv_towerofVoid[1], OrderTargetingPoint(AbilityCommand(&quot;FireStormNew&quot;, 0), UnitGetPosition(gv_towerDamageSource[1])), c_orderQueueReplace);
                    gv_towerFireStormUseable[1] = false;
                    Wait(50.0, c_timeGame);
                    gv_towerFireStormUseable[1] = true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillFireStorm1_Init () {
                gt_SkillFireStorm1 = TriggerCreate(&quot;gt_SkillFireStorm1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Fire Storm 2
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillFireStorm2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_towerFireStormUseable[2] == true)) {
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/1B0FB8DE&quot;));
                    UnitIssueOrder(gv_towerofVoid[2], OrderTargetingPoint(AbilityCommand(&quot;FireStormNew&quot;, 0), UnitGetPosition(gv_towerDamageSource[2])), c_orderQueueReplace);
                    gv_towerFireStormUseable[2] = false;
                    Wait(50.0, c_timeGame);
                    gv_towerFireStormUseable[2] = true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillFireStorm2_Init () {
                gt_SkillFireStorm2 = TriggerCreate(&quot;gt_SkillFireStorm2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Fire Storm 3
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillFireStorm3_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_towerFireStormUseable[3] == true)) {
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/40D33CF7&quot;));
                    UnitIssueOrder(gv_towerofVoid[3], OrderTargetingPoint(AbilityCommand(&quot;FireStormNew&quot;, 0), UnitGetPosition(gv_towerDamageSource[3])), c_orderQueueReplace);
                    gv_towerFireStormUseable[3] = false;
                    Wait(50.0, c_timeGame);
                    gv_towerFireStormUseable[3] = true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillFireStorm3_Init () {
                gt_SkillFireStorm3 = TriggerCreate(&quot;gt_SkillFireStorm3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Skill - Fire Storm 4
            //--------------------------------------------------------------------------------------------------
            bool gt_SkillFireStorm4_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_towerFireStormUseable[4] == true)) {
                    gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/81F9341D&quot;));
                    UnitIssueOrder(gv_towerofVoid[1], OrderTargetingPoint(AbilityCommand(&quot;FireStormNew&quot;, 0), UnitGetPosition(gv_towerDamageSource[4])), c_orderQueueReplace);
                    gv_towerFireStormUseable[4] = false;
                    Wait(50.0, c_timeGame);
                    gv_towerFireStormUseable[4] = true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SkillFireStorm4_Init () {
                gt_SkillFireStorm4 = TriggerCreate(&quot;gt_SkillFireStorm4_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Scene - Preset
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingScenePreset_Func (bool testConds, bool runActions) {
                int auto33682182_ae;
                int auto33682182_ai;
                string auto4A272A1A_val;
                string autoE0F754BB_val;
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_isEndingSceneStarted = true;
                TimerPause(gv_objectiveTimer, true);
                TimerPause(gv_kronosTimer, true);
                TimerPause(gv_kronosCombatTimer, true);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitRemove(gv_kronosNisemono);
                UnitRemove(UnitFromId(1247227950));
                UnitRemove(UnitFromId(381871814));
                UnitRemove(UnitFromId(406892396));
                auto33682182_ae = 10;
                auto33682182_ai = 1;
                lv_i = 1;
                for ( ; ( (auto33682182_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto33682182_ae) || (auto33682182_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto33682182_ae) ) ; lv_i += auto33682182_ai ) {
                    libNtve_gf_KillModel(gv_kronosFire[lv_i]);
                }
                VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(17));
                VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(17));
                UnitPauseAll(true);
                PointSet(PointFromId(959960150), PointFromId(249));
                ObjectiveShow(gv_objectiveDestroyTowerofVoid, PlayerGroupAll(), false);
                ObjectiveShow(gv_objectiveKillKronosNoObjectiveObjective, PlayerGroupAll(), false);
                ObjectiveShow(gv_objectivePreventTimerExpire, PlayerGroupAll(), false);
                ObjectiveShow(gv_subObjectiveINPROGRESS, PlayerGroupAll(), false);
                libNtve_gf_ShowHideBossBar(false, gv_kronosBossbarID);
                TimerWindowShow(gv_objectiveTimerWindow, PlayerGroupAll(), false);
                gf_KronosStateRemoveStates2();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32)) | (1 &lt;&lt; (c_targetFilterRadar - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32)) | (1 &lt;&lt; (c_targetFilterRadar - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_ZergSwarm, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterRawResource) | (1 &lt;&lt; c_targetFilterHarvestableResource) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32)) | (1 &lt;&lt; (c_targetFilterRadar - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                auto4A272A1A_val = GameAttributePlayerValue(&quot;[bnet:local/0.0/355870]1&quot;, gv_pLAYER_01_USER);
                if (auto4A272A1A_val == &quot;0001&quot;) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;RaynorCommando&quot;, 0, gv_pLAYER_01_USER, PointFromId(1728867553));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 10000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(gv_kronos), 0.0);
                    gv_heroP1 = UnitLastCreated();
                }
                else if (auto4A272A1A_val == &quot;0003&quot;) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Nexus&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(404309365));
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), &quot;SetScale 0.010000&quot;);
                    gv_endingSceneNexus = UnitLastCreated();
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;ArtanisVoid&quot;, 0, gv_pLAYER_01_USER, PointFromId(1728867553));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 10000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(gv_kronos), 0.0);
                    gv_heroP1 = UnitLastCreated();
                }
                else if (auto4A272A1A_val == &quot;0002&quot;) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;KerriganVoid&quot;, 0, gv_pLAYER_01_USER, PointFromId(1728867553));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 10000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(gv_kronos), 0.0);
                    gv_heroP1 = UnitLastCreated();
                }
                else {
                }
                autoE0F754BB_val = GameAttributePlayerValue(&quot;[bnet:local/0.0/355870]1&quot;, gv_pLAYER_02_USER);
                if (autoE0F754BB_val == &quot;0001&quot;) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;RaynorCommando&quot;, 0, gv_pLAYER_02_USER, PointFromId(857911479));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 10000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(gv_kronos), 0.0);
                    gv_heroP2 = UnitLastCreated();
                }
                else if (autoE0F754BB_val == &quot;0003&quot;) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Nexus&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(1964726545));
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), &quot;SetScale 0.010000&quot;);
                    gv_endingSceneNexus = UnitLastCreated();
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;ArtanisVoid&quot;, 0, gv_pLAYER_02_USER, PointFromId(857911479));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 10000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(gv_kronos), 0.0);
                    gv_heroP2 = UnitLastCreated();
                }
                else if (autoE0F754BB_val == &quot;0002&quot;) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;KerriganVoid&quot;, 0, gv_pLAYER_02_USER, PointFromId(857911479));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 10000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(gv_kronos), 0.0);
                    gv_heroP2 = UnitLastCreated();
                }
                else {
                }
                PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, true);
                PlayerSetAlliance(gv_pLAYER_02_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, true);
                libCOMI_gf_SetAllianceCoop(gv_pLAYER_01_USER, gv_pLAYER_05_ZergSwarm, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                libCOMI_gf_SetAllianceCoop(gv_pLAYER_02_USER, gv_pLAYER_05_ZergSwarm, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                libCOMI_gf_SetAllianceCoop(gv_pLAYER_04_ENEMY, gv_pLAYER_05_ZergSwarm, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
                TriggerExecute(gt_EndingSceneCinematic, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingScenePreset_Init () {
                gt_EndingScenePreset = TriggerCreate(&quot;gt_EndingScenePreset_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Scene - Cinematic
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingSceneCinematic_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionClearAll();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.2, c_timeGame);
                }
                gv_conversationAvailable = false;
                TriggerQueueEnter();
                libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
                UnitPauseAll(true);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene13_VICTORY_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/29164C7F&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                CameraPan(gv_pLAYER_01_USER, PointFromId(1375483667), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, PointFromId(1375483667), 2.0, -1, 10.0, false);
                Wait(3.0, c_timeGame);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                libNtve_gf_CreateModelAtPoint(&quot;HybridWarpInEffect&quot;, PointFromId(1375483667));
                libNtve_gf_UnitCreateFacingPoint(1, &quot;HybridKronos&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_04_ENEMY, PointFromId(1375483667), PointFromId(249));
                gv_kronos = UnitLastCreated();
                UnitSetState(gv_kronos, c_unitStateInvulnerable, true);
                UnitSetState(gv_kronos, c_unitStateSelectable, false);
                UnitSetState(gv_kronos, c_unitStateStatusBar, false);
                UnitSetPropertyFixed(gv_kronos, c_unitPropLifeMax, 99999.0);
                UnitSetPropertyFixed(gv_kronos, c_unitPropLifePercent, 100.0);
                ActorSend(libNtve_gf_MainActorofUnit(gv_kronos), &quot;SetTintColor {255,0,0 2.000000}&quot;);
                Wait(1.5, c_timeReal);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_kronos, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene13_VICTORY_2_thelastKronos_B&quot;, -1), StringExternal(&quot;Param/Value/43C65731&quot;), StringExternal(&quot;Param/Value/1A27E681&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene13_VICTORY_3_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/E01F8A04&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(1.5, c_timeReal);
                TriggerExecute(gt_EndingSceneFightWithKronos, true, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingSceneCinematic_Init () {
                gt_EndingSceneCinematic = TriggerCreate(&quot;gt_EndingSceneCinematic_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Scene - Fight With Kronos
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingSceneFightWithKronos_Func (bool testConds, bool runActions) {
                string autoA224C1B3_val;
                int autoD9BB55CD_n;
                int autoD9BB55CD_i;
                int autoE76C7444_n;
                int autoE76C7444_i;
                int auto3555A72B_n;
                int auto3555A72B_i;
                int auto30A595CB_n;
                int auto30A595CB_i;
                string auto4D7A157A_val;
                int autoFA5D5793_n;
                int autoFA5D5793_i;
                int auto9FBD2E9B_n;
                int auto9FBD2E9B_i;
                int autoC27F6803_n;
                int autoC27F6803_i;
                int auto65F95C55_n;
                int auto65F95C55_i;
                // Variable Declarations
                const int lv_bossBarNisemonoNum = 2;
                int lv_bossBarNisemono;
                unitgroup lv_friendlyP1;
                unitgroup lv_friendlyP2;
                unitgroup lv_friendlyP5;
                unit lv_nexus;
                unit lv_mothership;
                actor lv_omega;
                // Variable Initialization
                lv_bossBarNisemono = c_invalidDialogId;
                lv_friendlyP1 = UnitGroupEmpty();
                lv_friendlyP2 = UnitGroupEmpty();
                lv_friendlyP5 = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitPauseAll(false);
                UnitSetState(gv_kronos, c_unitStateInvulnerable, false);
                UnitSetState(gv_heroP1, c_unitStateInvulnerable, false);
                UnitSetState(gv_heroP2, c_unitStateInvulnerable, false);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
                UnitSetState(gv_kronos, c_unitStateSelectable, false);
                UnitSetInfoText(gv_kronos, StringExternal(&quot;Param/Value/7C76AB7F&quot;), StringExternal(&quot;Param/Value/9D24553A&quot;), StringToText(&quot;&quot;));
                RegionPlayableMapSet(RegionFromId(1));
                TechTreeAbilityAllow(gv_pLAYER_05_ZergSwarm, AbilityCommand(&quot;Hyperjump&quot;, 0), true);
                TechTreeAbilityAllow(gv_pLAYER_05_ZergSwarm, AbilityCommand(&quot;MassRecall&quot;, 0), true);
                TechTreeAbilityAllow(gv_pLAYER_05_ZergSwarm, AbilityCommand(&quot;ArbiterMPRecall&quot;, 0), true);
                TechTreeAbilityAllow(gv_pLAYER_05_ZergSwarm, AbilityCommand(&quot;BuildGreaterNydusWorm&quot;, 0), true);
                autoA224C1B3_val = GameAttributePlayerValue(&quot;[bnet:local/0.0/355870]1&quot;, gv_pLAYER_01_USER);
                if (autoA224C1B3_val == &quot;0001&quot;) {
                    autoD9BB55CD_n = 10;
                    for (autoD9BB55CD_i = 1; autoD9BB55CD_i &lt;= autoD9BB55CD_n; autoD9BB55CD_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Battlecruiser&quot;, 0, gv_pLAYER_05_ZergSwarm, PointFromId(1627988404));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                        UnitGroupAdd(lv_friendlyP1, UnitLastCreated());
                    }
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroP1, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acResponses_Raynor_036&quot;, -1), StringExternal(&quot;Param/Value/7A464E66&quot;), StringExternal(&quot;Param/Value/A5C6BEF0&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    UnitGroupIssueOrder(lv_friendlyP1, OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(404309365)), c_orderQueueReplace);
                }
                else if (autoA224C1B3_val == &quot;0003&quot;) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Mothership&quot;, 0, gv_pLAYER_05_ZergSwarm, PointFromId(1624822377));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, 300.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 7000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    lv_mothership = UnitLastCreated();
                    autoE76C7444_n = 10;
                    for (autoE76C7444_i = 1; autoE76C7444_i &lt;= autoE76C7444_n; autoE76C7444_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Tempest&quot;, 0, gv_pLAYER_05_ZergSwarm, PointFromId(1624822377));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                        UnitGroupAdd(lv_friendlyP1, UnitLastCreated());
                    }
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroP1, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acResponses_Artanis_019&quot;, -1), StringExternal(&quot;Param/Value/0CF179E3&quot;), StringExternal(&quot;Param/Value/80B1514B&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    UnitIssueOrder(lv_mothership, OrderTargetingUnit(AbilityCommand(&quot;MothershipMassRecall&quot;, 0), gv_endingSceneNexus), c_orderQueueReplace);
                }
                else if (autoA224C1B3_val == &quot;0002&quot;) {
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroP1, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acResponses_Kerrigan_027&quot;, -1), StringExternal(&quot;Param/Value/5B57FBB5&quot;), StringExternal(&quot;Param/Value/B857F521&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    libNtve_gf_CreateModelAtPoint(&quot;GreaterNydusWorm&quot;, PointFromId(404309365));
                    lv_omega = libNtve_gf_ActorLastCreated();
                    libNtve_gf_PlayAnimation(lv_omega, c_animNameDefault, &quot;Birth One&quot;, c_animFlagNonLooping, c_animTimeDefault);
                    SoundPlayForPlayer(SoundLink(&quot;NydusWorm_Birth&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    Wait(4.8, c_timeReal);
                    libNtve_gf_PlayAnimation(lv_omega, c_animNameDefault, &quot;Spell&quot;, c_animFlagPlayForever, c_animTimeDefault);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;KerriganVoid&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(404309365));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), &quot;SetScale 2.000000&quot;);
                    UnitGroupAdd(lv_friendlyP1, UnitLastCreated());
                    auto3555A72B_n = 5;
                    for (auto3555A72B_i = 1; auto3555A72B_i &lt;= auto3555A72B_n; auto3555A72B_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HunterKiller&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(404309365));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                        UnitGroupAdd(lv_friendlyP1, UnitLastCreated());
                        Wait(0.5, c_timeReal);
                    }
                    auto30A595CB_n = 3;
                    for (auto30A595CB_i = 1; auto30A595CB_i &lt;= auto30A595CB_n; auto30A595CB_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;TorrasqueViolet&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(404309365));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                        UnitGroupAdd(lv_friendlyP1, UnitLastCreated());
                        Wait(1.0, c_timeReal);
                    }
                    libNtve_gf_PlayAnimation(lv_omega, c_animNameDefault, &quot;Unburrow&quot;, c_animFlagPlayForever, c_animTimeDefault);
                }
                else {
                }
                Wait(2.0, c_timeReal);
                if ((gv_isSingleMode == false)) {
                    Wait(2.0, c_timeReal);
                    auto4D7A157A_val = GameAttributePlayerValue(&quot;[bnet:local/0.0/355870]1&quot;, gv_pLAYER_02_USER);
                    if (auto4D7A157A_val == &quot;0001&quot;) {
                        autoFA5D5793_n = 10;
                        for (autoFA5D5793_i = 1; autoFA5D5793_i &lt;= autoFA5D5793_n; autoFA5D5793_i += 1) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Battlecruiser&quot;, 0, gv_pLAYER_05_ZergSwarm, PointFromId(582100252));
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                            UnitGroupAdd(lv_friendlyP2, UnitLastCreated());
                        }
                        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroP2, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acResponses_Raynor_036&quot;, -1), StringExternal(&quot;Param/Value/5B244EF2&quot;), StringExternal(&quot;Param/Value/B5F495CF&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                        UnitGroupIssueOrder(lv_friendlyP2, OrderTargetingPoint(AbilityCommand(&quot;Hyperjump&quot;, 0), PointFromId(1964726545)), c_orderQueueReplace);
                    }
                    else if (auto4D7A157A_val == &quot;0003&quot;) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Mothership&quot;, 0, gv_pLAYER_05_ZergSwarm, PointFromId(1624822377));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, 300.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 7000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                        lv_mothership = UnitLastCreated();
                        auto9FBD2E9B_n = 10;
                        for (auto9FBD2E9B_i = 1; auto9FBD2E9B_i &lt;= auto9FBD2E9B_n; auto9FBD2E9B_i += 1) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Tempest&quot;, 0, gv_pLAYER_05_ZergSwarm, PointFromId(1624822377));
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                            UnitGroupAdd(lv_friendlyP2, UnitLastCreated());
                        }
                        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroP2, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acResponses_Artanis_019&quot;, -1), StringExternal(&quot;Param/Value/32CD3D40&quot;), StringExternal(&quot;Param/Value/3EF39B4D&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                        UnitIssueOrder(lv_mothership, OrderTargetingUnit(AbilityCommand(&quot;MothershipMassRecall&quot;, 0), gv_endingSceneNexus), c_orderQueueReplace);
                    }
                    else if (auto4D7A157A_val == &quot;0002&quot;) {
                        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_heroP2, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acResponses_Kerrigan_027&quot;, -1), StringExternal(&quot;Param/Value/E74A2B09&quot;), StringExternal(&quot;Param/Value/4A5946DA&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                        libNtve_gf_CreateModelAtPoint(&quot;GreaterNydusWorm&quot;, PointFromId(1964726545));
                        lv_omega = libNtve_gf_ActorLastCreated();
                        libNtve_gf_PlayAnimation(lv_omega, c_animNameDefault, &quot;Birth One&quot;, c_animFlagNonLooping, c_animTimeDefault);
                        SoundPlayForPlayer(SoundLink(&quot;NydusWorm_Birth&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        Wait(4.8, c_timeReal);
                        libNtve_gf_PlayAnimation(lv_omega, c_animNameDefault, &quot;Spell&quot;, c_animFlagPlayForever, c_animTimeDefault);
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;KerriganVoid&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(1964726545));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), &quot;SetScale 2.000000&quot;);
                        UnitGroupAdd(lv_friendlyP1, UnitLastCreated());
                        autoC27F6803_n = 5;
                        for (autoC27F6803_i = 1; autoC27F6803_i &lt;= autoC27F6803_n; autoC27F6803_i += 1) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HunterKiller&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(1964726545));
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                            UnitGroupAdd(lv_friendlyP2, UnitLastCreated());
                            Wait(0.5, c_timeReal);
                        }
                        auto65F95C55_n = 3;
                        for (auto65F95C55_i = 1; auto65F95C55_i &lt;= auto65F95C55_n; auto65F95C55_i += 1) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;TorrasqueViolet&quot;, c_unitCreateIgnorePlacement, gv_pLAYER_05_ZergSwarm, PointFromId(1964726545));
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                            UnitGroupAdd(lv_friendlyP1, UnitLastCreated());
                            Wait(1.0, c_timeReal);
                        }
                        libNtve_gf_PlayAnimation(lv_omega, c_animNameDefault, &quot;Unburrow&quot;, c_animFlagPlayForever, c_animTimeDefault);
                    }
                    else {
                    }
                }
                Wait(2.0, c_timeReal);
                TimerStart(gv_endingTimer, 20.0, false, c_timeReal);
                Wait(2.0, c_timeReal);
                TriggerExecute(gt_EndingSceneNaktulHelp, false, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingSceneFightWithKronos_Init () {
                gt_EndingSceneFightWithKronos = TriggerCreate(&quot;gt_EndingSceneFightWithKronos_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Scene - Satellite Drop Persist
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingSceneSatelliteDropPersist_Func (bool testConds, bool runActions) {
                int auto22C5DFB7_n;
                int auto22C5DFB7_i;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto22C5DFB7_n = 30;
                for (auto22C5DFB7_i = 1; auto22C5DFB7_i &lt;= auto22C5DFB7_n; auto22C5DFB7_i += 1) {
                    TriggerExecute(gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598, true, true);
                    Wait(15.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingSceneSatelliteDropPersist_Init () {
                gt_EndingSceneSatelliteDropPersist = TriggerCreate(&quot;gt_EndingSceneSatelliteDropPersist_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Scene - Naktul Help
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingSceneNaktulHelp_Func (bool testConds, bool runActions) {
                int auto562C5409_n;
                int auto562C5409_i;
                // Variable Declarations
                unitgroup lv_help;
                // Variable Initialization
                lv_help = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_subObjectiveState != 2)) {
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene13_VICTORY_4_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/464BD43B&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    auto562C5409_n = 30;
                    for (auto562C5409_i = 1; auto562C5409_i &lt;= auto562C5409_n; auto562C5409_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Mutalisk&quot;, 0, gv_pLAYER_05_ZergSwarm, PointFromId(1064674067));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 5000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
                        UnitGroupAdd(lv_help, UnitLastCreated());
                    }
                    UnitGroupIssueOrder(lv_help, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_kronos), c_orderQueueReplace);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingSceneNaktulHelp_Init () {
                gt_EndingSceneNaktulHelp = TriggerCreate(&quot;gt_EndingSceneNaktulHelp_Func&quot;);
                TriggerAddEventTimer(gt_EndingSceneNaktulHelp, gv_endingTimerNaktulHelp);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Scene - Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingSceneVictory_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                RegionPlayableMapSet(RegionFromId(10));
                TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingSceneVictory_Init () {
                gt_EndingSceneVictory = TriggerCreate(&quot;gt_EndingSceneVictory_Func&quot;);
                TriggerAddEventTimer(gt_EndingSceneVictory, gv_endingTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill Kronos - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillKronosCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                gv_objectiveKillKronosNoObjectiveObjective = ObjectiveLastCreated();
                ObjectiveSetName(gv_objectiveKillKronosNoObjectiveObjective, TextExpressionAssemble(&quot;Param/Expression/55CFFC2C&quot;));
                ObjectiveSetPriority(ObjectiveLastCreated(), 30);
                ObjectiveSetDescription(ObjectiveLastCreated(), StringExternal(&quot;Param/Value/EA141848&quot;));
                TriggerExecute(gt_ObjectiveKillKronosUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillKronosCreate_Init () {
                gt_ObjectiveKillKronosCreate = TriggerCreate(&quot;gt_ObjectiveKillKronosCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill Kronos - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillKronosComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveKillKronosCreate, true, false);
                ObjectiveSetState(gv_objectiveKillKronosNoObjectiveObjective, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillKronosComplete_Init () {
                gt_ObjectiveKillKronosComplete = TriggerCreate(&quot;gt_ObjectiveKillKronosComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill Kronos - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillKronosUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveKillKronosCreate, true, false);
                if ((gv_kronosisAlive == true)) {
                    ObjectiveSetName(gv_objectiveKillKronosNoObjectiveObjective, TextExpressionAssemble(&quot;Param/Expression/A161D05A&quot;));
                }
                else {
                    if ((gv_kronoscycle &lt;= 4)) {
                        TextExpressionSetToken(&quot;Param/Expression/527CC448&quot;, &quot;A&quot;, gf_GetOrdinalExpression(gv_kronoscycle));
                        ObjectiveSetName(gv_objectiveKillKronosNoObjectiveObjective, TextExpressionAssemble(&quot;Param/Expression/527CC448&quot;));
                    }
                    else {
                        ObjectiveSetName(gv_objectiveKillKronosNoObjectiveObjective, TextExpressionAssemble(&quot;Param/Expression/EA34F1EB&quot;));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillKronosUpdate_Init () {
                gt_ObjectiveKillKronosUpdate = TriggerCreate(&quot;gt_ObjectiveKillKronosUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Kill Kronos - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveKillKronosFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveKillKronosCreate, true, false);
                ObjectiveSetState(gv_objectiveKillKronosNoObjectiveObjective, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveKillKronosFailed_Init () {
                gt_ObjectiveKillKronosFailed = TriggerCreate(&quot;gt_ObjectiveKillKronosFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Destroy Tower of Void - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyTowerofVoidCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderPrimary&quot;, gv_remainingStructureCount);
                gv_objectiveDestroyTowerofVoid = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 20);
                ObjectiveSetDescription(ObjectiveLastCreated(), StringExternal(&quot;Param/Value/6B75E962&quot;));
                TriggerExecute(gt_ObjectiveDestroyTowerofVoidUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyTowerofVoidCreate_Init () {
                gt_ObjectiveDestroyTowerofVoidCreate = TriggerCreate(&quot;gt_ObjectiveDestroyTowerofVoidCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Destroy Tower of Void - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyTowerofVoidComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveDestroyTowerofVoidCreate, true, false);
                ObjectiveSetState(gv_objectiveDestroyTowerofVoid, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyTowerofVoidComplete_Init () {
                gt_ObjectiveDestroyTowerofVoidComplete = TriggerCreate(&quot;gt_ObjectiveDestroyTowerofVoidComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Destroy Tower of Void - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyTowerofVoidUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveDestroyTowerofVoidCreate, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderPrimary&quot;, gv_remainingStructureCount);
                TextExpressionSetToken(&quot;Param/Expression/67CB7BA7&quot;, &quot;StructureCount&quot;, IntToText((4 - gv_remainingStructureCount)));
                ObjectiveSetName(gv_objectiveDestroyTowerofVoid, TextExpressionAssemble(&quot;Param/Expression/67CB7BA7&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyTowerofVoidUpdate_Init () {
                gt_ObjectiveDestroyTowerofVoidUpdate = TriggerCreate(&quot;gt_ObjectiveDestroyTowerofVoidUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - Destroy Tower of Void - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyTowerofVoidFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveDestroyTowerofVoidCreate, true, false);
                ObjectiveSetState(gv_objectiveDestroyTowerofVoid, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyTowerofVoidFailed_Init () {
                gt_ObjectiveDestroyTowerofVoidFailed = TriggerCreate(&quot;gt_ObjectiveDestroyTowerofVoidFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Create
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireCreate_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                gv_objectivePreventTimerExpire = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 10);
                ObjectiveSetDescription(ObjectiveLastCreated(), StringExternal(&quot;Param/Value/9CE28009&quot;));
                TriggerExecute(gt_ObjectivePreventTimerExpireUpdate, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireCreate_Init () {
                gt_ObjectivePreventTimerExpireCreate = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
                ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireComplete_Init () {
                gt_ObjectivePreventTimerExpireComplete = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Update
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireUpdate_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
                TextExpressionSetToken(&quot;Param/Expression/F6A42A6B&quot;, &quot;timerRemaining&quot;, libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(gv_objectiveTimer))));
                ObjectiveSetName(gv_objectivePreventTimerExpire, TextExpressionAssemble(&quot;Param/Expression/F6A42A6B&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireUpdate_Init () {
                gt_ObjectivePreventTimerExpireUpdate = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - PreventTimerExpire - Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectivePreventTimerExpireFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
                ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectivePreventTimerExpireFailed_Init () {
                gt_ObjectivePreventTimerExpireFailed = TriggerCreate(&quot;gt_ObjectivePreventTimerExpireFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sub Objective Init
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveInit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                int lv_eggCountGoal;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_MakeUnitInvulnerable(RegionGetAttachUnit(RegionFromId(11)), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveInit_Init () {
                gt_SubObjectiveInit = TriggerCreate(&quot;gt_SubObjectiveInit_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Show Sub Objective 1 - Time Elapsed
            //--------------------------------------------------------------------------------------------------
            bool gt_ShowSubObjective1TimeElapsed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_i;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((gv_kronosisAlive == false) &amp;&amp; (gv_isPlayerBusy == false))) {
                    Wait(0.5, c_timeAI);
                }
                if ((gv_subObjectiveState == 0)) {
                    gv_subObjectiveState = 1;
                    gv_isPlayerBusy = true;
                    Wait(5.0, c_timeGame);
                    TriggerExecute(gt_SubObjectiveCreate, true, false);
                    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(11));
                    gv_eggAreaRevealer = VisRevealerLastCreated();
                    PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, true);
                    PlayerSetAlliance(gv_pLAYER_05_ZergSwarm, c_allianceIdVision, gv_pLAYER_01_USER, true);
                    PlayerSetAlliance(gv_pLAYER_02_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, true);
                    PlayerSetAlliance(gv_pLAYER_05_ZergSwarm, c_allianceIdVision, gv_pLAYER_02_USER, true);
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, RegionGetCenter(RegionFromId(11)), StringExternal(&quot;Param/Value/A49976B3&quot;));
                    gv_objSub_Egg_Ping = PingLastCreated();
                    libNtve_gf_MakeUnitInvulnerable(RegionGetAttachUnit(RegionFromId(11)), false);
                    TriggerExecute(gt_TurntoOurBase, true, false);
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene17_BONUSshow_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/F3E90F53&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene17_BONUSshow_2_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/C1A1E7E4&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                    Wait(5.0, c_timeGame);
                    TriggerExecute(gt_UpdateEggsCount, false, false);
                    gv_isPlayerBusy = false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowSubObjective1TimeElapsed_Init () {
                gt_ShowSubObjective1TimeElapsed = TriggerCreate(&quot;gt_ShowSubObjective1TimeElapsed_Func&quot;);
                TriggerAddEventTimeElapsed(gt_ShowSubObjective1TimeElapsed, (9.0 * 60), c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Show Sub Objective 2 - Discovery
            //--------------------------------------------------------------------------------------------------
            bool gt_ShowSubObjective2Discovery_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER))) {
                    if ((gv_subObjectiveState == 0)) {
                        TriggerExecute(gt_ShowSubObjective1TimeElapsed, false, false);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowSubObjective2Discovery_Init () {
                gt_ShowSubObjective2Discovery = TriggerCreate(&quot;gt_ShowSubObjective2Discovery_Func&quot;);
                TriggerAddEventUnitRegion(gt_ShowSubObjective2Discovery, null, RegionFromId(11), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sub Objective Complete Actions
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveCompleteActions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/F48007C8&quot;));
                TriggerExecute(gt_SubObjectiveComplete, true, false);
                gv_subObjectiveState = 3;
                PingDestroy(gv_objSub_Egg_Ping);
                VisRevealerDestroy(gv_eggAreaRevealer);
                VisFillArea(gv_pLAYER_01_USER, RegionFromId(11), c_fillTypeUnexplored, false);
                VisFillArea(gv_pLAYER_02_USER, RegionFromId(11), c_fillTypeUnexplored, false);
                PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, false);
                PlayerSetAlliance(gv_pLAYER_05_ZergSwarm, c_allianceIdVision, gv_pLAYER_01_USER, false);
                PlayerSetAlliance(gv_pLAYER_02_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, false);
                PlayerSetAlliance(gv_pLAYER_05_ZergSwarm, c_allianceIdVision, gv_pLAYER_02_USER, false);
                TimerPause(gv_eggLimitTimer, true);
                libNtve_gf_SetAlliance(gv_pLAYER_05_ZergSwarm, gv_pLAYER_03_ENEMY, libNtve_ge_AllianceSetting_Neutral);
                libNtve_gf_SetAlliance(gv_pLAYER_05_ZergSwarm, gv_pLAYER_04_ENEMY, libNtve_ge_AllianceSetting_Neutral);
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(11), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(11), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_conversationAvailable = false;
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene19_BONUScomplete_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/9320339E&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveCompleteActions_Init () {
                gt_SubObjectiveCompleteActions = TriggerCreate(&quot;gt_SubObjectiveCompleteActions_Func&quot;);
                TriggerAddEventTimer(gt_SubObjectiveCompleteActions, gv_eggLimitTimer);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sub Objective Fail Actions
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveFailActions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/E51265F6&quot;));
                TriggerExecute(gt_SubObjectiveFailed, true, false);
                gv_subObjectiveState = 2;
                PingDestroy(gv_objSub_Egg_Ping);
                VisRevealerDestroy(gv_eggAreaRevealer);
                VisFillArea(gv_pLAYER_01_USER, RegionFromId(11), c_fillTypeUnexplored, false);
                VisFillArea(gv_pLAYER_02_USER, RegionFromId(11), c_fillTypeUnexplored, false);
                PlayerSetAlliance(gv_pLAYER_01_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, false);
                PlayerSetAlliance(gv_pLAYER_05_ZergSwarm, c_allianceIdVision, gv_pLAYER_01_USER, false);
                PlayerSetAlliance(gv_pLAYER_02_USER, c_allianceIdVision, gv_pLAYER_05_ZergSwarm, false);
                PlayerSetAlliance(gv_pLAYER_05_ZergSwarm, c_allianceIdVision, gv_pLAYER_02_USER, false);
                TimerPause(gv_eggLimitTimer, true);
                libNtve_gf_SetAlliance(gv_pLAYER_05_ZergSwarm, gv_pLAYER_03_ENEMY, libNtve_ge_AllianceSetting_Neutral);
                libNtve_gf_SetAlliance(gv_pLAYER_05_ZergSwarm, gv_pLAYER_04_ENEMY, libNtve_ge_AllianceSetting_Neutral);
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(11), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_ENEMY, RegionFromId(11), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                libCOMI_gf_WaitForMissionTransmission();
                while (!((gv_conversationAvailable == true))) {
                    Wait(0.5, c_timeGame);
                }
                gv_conversationAvailable = false;
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene20_BONUSfail_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/71E14005&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                Wait(2.0, c_timeGame);
                gv_conversationAvailable = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveFailActions_Init () {
                gt_SubObjectiveFailActions = TriggerCreate(&quot;gt_SubObjectiveFailActions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Update Eggs Count
            //--------------------------------------------------------------------------------------------------
            bool gt_UpdateEggsCount_Func (bool testConds, bool runActions) {
                int autoC8C3B2A5_val;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                while ((gv_subObjectiveState == 1)) {
                    gv_remainingEggs = TechTreeUnitCount(gv_pLAYER_05_ZergSwarm, &quot;VIPSegg&quot;, c_techCountQueuedOrBetter);
                    autoC8C3B2A5_val = libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER);
                    if (autoC8C3B2A5_val == 1) {
                        if ((gv_remainingEggs &lt;= 50)) {
                            TriggerExecute(gt_SubObjectiveFailActions, false, true);
                            break;
                        }
                    }
                    else if (autoC8C3B2A5_val == 2) {
                        if ((gv_remainingEggs &lt;= 60)) {
                            TriggerExecute(gt_SubObjectiveFailActions, false, true);
                            break;
                        }
                    }
                    else if (autoC8C3B2A5_val == 3) {
                        if ((gv_remainingEggs &lt;= 70)) {
                            TriggerExecute(gt_SubObjectiveFailActions, false, true);
                            break;
                        }
                    }
                    else if (autoC8C3B2A5_val == 4) {
                        if ((gv_remainingEggs &lt;= 80)) {
                            TriggerExecute(gt_SubObjectiveFailActions, false, true);
                            break;
                        }
                    }
                    else {
                    }
                    TriggerExecute(gt_SubObjectiveUpdate, true, false);
                    gv_previousEggCount = gv_remainingEggs;
                    Wait(0.5, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateEggsCount_Init () {
                gt_UpdateEggsCount = TriggerCreate(&quot;gt_UpdateEggsCount_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: subObjective Call Attack Wave 1
            //--------------------------------------------------------------------------------------------------
            bool gt_subObjectiveCallAttackWave1_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((GameGetMissionTime() &gt;= ((10.0 * 60) - 25)))) {
                    Wait(0.5, c_timeAI);
                }
                if ((gv_subObjectiveState == 1)) {
                    gv_eggObjDynamicTarget = PointFromId(236191240);
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene21_BONUSattackwave_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/C6876085&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                    gv_eggObjDynamicTarget = PointFromId(249);
                }
                while (!((GameGetMissionTime() &gt;= (10.0 * 60)))) {
                    Wait(0.5, c_timeAI);
                }
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller), 4, 0, 0, 0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_subObjectiveCallAttackWave1_Init () {
                gt_subObjectiveCallAttackWave1 = TriggerCreate(&quot;gt_subObjectiveCallAttackWave1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: subObjective Call Attack Wave 2
            //--------------------------------------------------------------------------------------------------
            bool gt_subObjectiveCallAttackWave2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((GameGetMissionTime() &gt;= ((15.0 * 60) - 25)))) {
                    Wait(0.5, c_timeAI);
                }
                if ((gv_subObjectiveState == 1)) {
                    gv_eggObjDynamicTarget = PointFromId(236191240);
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene21_BONUSattackwave_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/83D1981E&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                    gv_eggObjDynamicTarget = PointFromId(249);
                }
                while (!((GameGetMissionTime() &gt;= (15.0 * 60)))) {
                    Wait(0.5, c_timeAI);
                }
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium), 4, 0, 0, 0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_subObjectiveCallAttackWave2_Init () {
                gt_subObjectiveCallAttackWave2 = TriggerCreate(&quot;gt_subObjectiveCallAttackWave2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: subObjective Call Attack Wave 3
            //--------------------------------------------------------------------------------------------------
            bool gt_subObjectiveCallAttackWave3_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((GameGetMissionTime() &gt;= ((20.0 * 60) - 25)))) {
                    Wait(0.5, c_timeAI);
                }
                if ((gv_subObjectiveState == 1)) {
                    gv_eggObjDynamicTarget = PointFromId(236191240);
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene21_BONUSattackwave_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/F0C2E1A8&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                    gv_eggObjDynamicTarget = PointFromId(249);
                }
                while (!((GameGetMissionTime() &gt;= (20.0 * 60)))) {
                    Wait(0.5, c_timeAI);
                }
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__5Large), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__5Large), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__5Large), 4, 0, 0, 0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_subObjectiveCallAttackWave3_Init () {
                gt_subObjectiveCallAttackWave3 = TriggerCreate(&quot;gt_subObjectiveCallAttackWave3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: subObjective Call Attack Wave 4
            //--------------------------------------------------------------------------------------------------
            bool gt_subObjectiveCallAttackWave4_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while (!((GameGetMissionTime() &gt;= ((26.0 * 60) - 25)))) {
                    Wait(0.5, c_timeAI);
                }
                if ((gv_subObjectiveState == 1)) {
                    gv_eggObjDynamicTarget = PointFromId(236191240);
                    libCOMI_gf_WaitForMissionTransmission();
                    while (!((gv_conversationAvailable == true))) {
                        Wait(0.5, c_timeGame);
                    }
                    gv_conversationAvailable = false;
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(gv_announcer, true, true, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;Scene21_BONUSattackwave_1_announcer&quot;, -1), gv_speakerAnnouncer, StringExternal(&quot;Param/Value/4F82F48C&quot;), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
                    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                    Wait(2.0, c_timeGame);
                    gv_conversationAvailable = true;
                }
                else {
                    gv_eggObjDynamicTarget = PointFromId(249);
                }
                while (!((GameGetMissionTime() &gt;= (26.0 * 60)))) {
                    Wait(0.5, c_timeAI);
                }
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__5Large), 1, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger), 2, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest), 3, 0, 0, 0);
                gf_RunAttackWaveatMissionTime2subObjective(gf_GetProperAttackTrigger2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest), 4, 0, 0, 0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_subObjectiveCallAttackWave4_Init () {
                gt_subObjectiveCallAttackWave4 = TriggerCreate(&quot;gt_subObjectiveCallAttackWave4_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Turn to Our Base
            //--------------------------------------------------------------------------------------------------
            bool gt_TurntoOurBase_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while ((GameGetMissionTime() &lt;= (24.0 * 60.0))) {
                    if (((gv_subObjectiveState &gt;= 3) &amp;&amp; (UnitCount(null, gv_pLAYER_03_ENEMY, RegionFromId(12), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0) &gt;= 1))) {
                        UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(12), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterStructure) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), PointFromId(249)), c_orderQueueReplace);
                        break;
                    }
                    Wait(5.0, c_timeGame);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TurntoOurBase_Init () {
                gt_TurntoOurBase = TriggerCreate(&quot;gt_TurntoOurBase_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave 1-SMALLEST
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWave1SMALLEST_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWave1SMALLEST_Init () {
                gt_SubObjectiveTypeAttackWave1SMALLEST = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWave1SMALLEST_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave 2-SMALLER
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWave2SMALLER_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWave2SMALLER_Init () {
                gt_SubObjectiveTypeAttackWave2SMALLER = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWave2SMALLER_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave 3-SMALL
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWave3SMALL_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWave3SMALL_Init () {
                gt_SubObjectiveTypeAttackWave3SMALL = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWave3SMALL_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave 4-MEDIUM
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWave4MEDIUM_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWave4MEDIUM_Init () {
                gt_SubObjectiveTypeAttackWave4MEDIUM = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWave4MEDIUM_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave 5-LARGE
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWave5LARGE_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWave5LARGE_Init () {
                gt_SubObjectiveTypeAttackWave5LARGE = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWave5LARGE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave 6-LARGER
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWave6LARGER_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWave6LARGER_Init () {
                gt_SubObjectiveTypeAttackWave6LARGER = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWave6LARGER_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave 7-LARGEST
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWave7LARGEST_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_SmartAttackSystem2subObjective(libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWave7LARGEST_Init () {
                gt_SubObjectiveTypeAttackWave7LARGEST = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWave7LARGEST_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SubObjective Type Attack Wave ~error
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveTypeAttackWaveerror_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_DisplayErrorMessage(StringExternal(&quot;Param/Value/9A09CDAF&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveTypeAttackWaveerror_Init () {
                gt_SubObjectiveTypeAttackWaveerror = TriggerCreate(&quot;gt_SubObjectiveTypeAttackWaveerror_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sub Objective Create
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveCreate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_eggCountGoal;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderSecondary&quot;);
                gv_subObjectiveINPROGRESS = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 5);
                ObjectiveSetDescription(ObjectiveLastCreated(), StringExternal(&quot;Param/Value/0F397098&quot;));
                lv_eggCountGoal = gf_SetCountCasebyDifficulty(50, 40, 30, 20);
                TextExpressionSetToken(&quot;Param/Expression/C4C4D89B&quot;, &quot;C&quot;, IntToText(lv_eggCountGoal));
                TextExpressionSetToken(&quot;Param/Expression/C4C4D89B&quot;, &quot;A&quot;, IntToText((100 - gv_remainingEggs)));
                ObjectiveSetName(gv_subObjectiveINPROGRESS, TextExpressionAssemble(&quot;Param/Expression/C4C4D89B&quot;));
                Wait(4.0, c_timeReal);
                TriggerExecute(gt_UpdateEggsCount, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveCreate_Init () {
                gt_SubObjectiveCreate = TriggerCreate(&quot;gt_SubObjectiveCreate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sub Objective Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_SubObjectiveCreate, true, false);
                ObjectiveSetState(gv_subObjectiveINPROGRESS, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveComplete_Init () {
                gt_SubObjectiveComplete = TriggerCreate(&quot;gt_SubObjectiveComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sub Objective Update
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveUpdate_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_eggCountGoal;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_SubObjectiveCreate, true, false);
                lv_eggCountGoal = gf_SetCountCasebyDifficulty(50, 40, 30, 20);
                TextExpressionSetToken(&quot;Param/Expression/625102C2&quot;, &quot;C&quot;, IntToText(lv_eggCountGoal));
                TextExpressionSetToken(&quot;Param/Expression/625102C2&quot;, &quot;A&quot;, IntToText((100 - gv_remainingEggs)));
                ObjectiveSetName(gv_subObjectiveINPROGRESS, TextExpressionAssemble(&quot;Param/Expression/625102C2&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveUpdate_Init () {
                gt_SubObjectiveUpdate = TriggerCreate(&quot;gt_SubObjectiveUpdate_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sub Objective Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_SubObjectiveFailed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_eggCountGoal;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_SubObjectiveCreate, true, false);
                lv_eggCountGoal = gf_SetCountCasebyDifficulty(50, 40, 30, 20);
                TextExpressionSetToken(&quot;Param/Expression/D067D657&quot;, &quot;C&quot;, IntToText(lv_eggCountGoal));
                TextExpressionSetToken(&quot;Param/Expression/D067D657&quot;, &quot;A&quot;, IntToText((100 - gv_remainingEggs)));
                TextExpressionSetToken(&quot;Param/Expression/D067D657&quot;, &quot;B&quot;, libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(gv_eggLimitTimer))));
                ObjectiveSetName(gv_subObjectiveINPROGRESS, TextExpressionAssemble(&quot;Param/Expression/D067D657&quot;));
                ObjectiveSetState(gv_subObjectiveINPROGRESS, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SubObjectiveFailed_Init () {
                gt_SubObjectiveFailed = TriggerCreate(&quot;gt_SubObjectiveFailed_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - TEST - Create 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveTESTCreate2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                gv_objectiveTEST = ObjectiveLastCreated();
                ObjectiveSetName(gv_objectiveTEST, TextExpressionAssemble(&quot;Param/Expression/77FF509C&quot;));
                ObjectiveSetPriority(ObjectiveLastCreated(), 20);
                TriggerExecute(gt_ObjectiveTESTUpdate2, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveTESTCreate2_Init () {
                gt_ObjectiveTESTCreate2 = TriggerCreate(&quot;gt_ObjectiveTESTCreate2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - TEST - Complete 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveTESTComplete2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveTESTCreate2, true, false);
                ObjectiveSetState(gv_objectiveTEST, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveTESTComplete2_Init () {
                gt_ObjectiveTESTComplete2 = TriggerCreate(&quot;gt_ObjectiveTESTComplete2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - TEST - Update 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveTESTUpdate2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveTESTCreate2, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveTESTUpdate2_Init () {
                gt_ObjectiveTESTUpdate2 = TriggerCreate(&quot;gt_ObjectiveTESTUpdate2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - TEST - Failed 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveTESTFailed2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveTESTCreate2, true, false);
                ObjectiveSetName(gv_objectiveTEST, TextExpressionAssemble(&quot;Param/Expression/C2EFD579&quot;));
                ObjectiveSetState(gv_objectiveTEST, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveTESTFailed2_Init () {
                gt_ObjectiveTESTFailed2 = TriggerCreate(&quot;gt_ObjectiveTESTFailed2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void InitTriggers () {
                gt_Init01LoadData_Init();
                gt_Init02Players_Init();
                gt_Init03LoadingComplete_Init();
                gt_Init04Technology_Init();
                gt_Init05Units_Init();
                gt_Init06MusicSound_Init();
                gt_Init07Environment_Init();
                gt_Init08Difficulties_Init();
                gt_Init09Commander_Init();
                gt_PortraitAnnouncer_Init();
                gt_PortraitKronos_Init();
                gt_PortraitAdjustant_Init();
                gt_AirStrikeConversation_Init();
                gt_AttackBeforeFirstKronosAlert_Init();
                gt_KronosSpawningAreaWarning_Init();
                gt_StartGameQ_Init();
                gt_DefendenceUnitsByDifficulty_Init();
                gt_ObjectiveTimerWindow_Init();
                gt_ShowTowerMarkers_Init();
                gt_UpdateTowerMarkers_Init();
                gt_UpdateStructureCount_Init();
                gt_EnemyAttackingQ_Init();
                gt_DefeatGameTimerOver_Init();
                gt_DefeatKRONOSTimerOver_Init();
                gt_DefeatSequence_Init();
                gt_VictoryPrimaryObjectiveComplete_Init();
                gt_VictorySequence_Init();
                gt_VictoryFanfareQ_Init();
                gt_Victory_Init();
                gt_Defeat_Init();
                gt_StartAI_Init();
                gt_AIAttackWaves_Init();
                gt_RemoveAirStrikePing_Init();
                gt_TypeAttackWave1SMALLEST_Init();
                gt_TypeAttackWave2SMALLER_Init();
                gt_TypeAttackWave3SMALL_Init();
                gt_TypeAttackWave4MEDIUM_Init();
                gt_TypeAttackWave5LARGE_Init();
                gt_TypeAttackWave6LARGER_Init();
                gt_TypeAttackWave7LARGEST_Init();
                gt_TypeAttackWaveerror_Init();
                gt_KronosAbilityObserver_Init();
                gt_SmartAbilityCaster_Init();
                gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91EC84A4ECA095_Init();
                gt_KronosEC8B9CECA084EC9E90EB8F99EC9E91ED95B4ECA09C_Init();
                gt_KronosEAB2B0ECA084EAB8B0EC9C84EC84B1EB8299ED9598_Init();
                gt_KronosEC82ACEBA79DEC84A0EAB3A0_Init();
                gt_KronosEC9980EC9DB4EBB288EC868CED9998_Init();
                gt_KronosECA795EBB28C_Init();
                gt_KronosED9A8CED94BCECA084EB9EB5ED8C90EB8BA8_Init();
                gt_KronosED9A8CED94BCECA084EB9EB5_Init();
                gt_KronosECA491EBA0A5EC9EA5_Init();
                gt_KronosECA780EC97B0ECA084EB9EB5ED8C90EB8BA8_Init();
                gt_KronosECA780EC97B0ECA084EB9EB5EAB3B5ED9788EC9D98EAB090EC98A5_Init();
                gt_KronosECA780EC97B0ECA084EB9EB5EC8AA4ED858CEC8B9CEC8AA4ED9584EB939C_Init();
                gt_KronosECA780EC97B0ECA084EB9EB5EBB894EB9E99ED9980_Init();
                gt_KronosEBB688EAB8B0EB91A5A_Init();
                gt_KronosEBB688EAB8B0EB91A5B_Init();
                gt_KronosEBB688EAB8B0EB91A5B1_Init();
                gt_KronosEBB688EAB8B0EB91A5B2_Init();
                gt_KronosStateUpdateMagicGuard_Init();
                gt_KronosStatePreset1Basic_Init();
                gt_KronosStatePreset2Basic_Init();
                gt_KronosStatePreset3Storm_Init();
                gt_KronosStatePreset4DeathPenalty_Init();
                gt_KronosStatePreset5SatelliteDrop_Init();
                gt_KronosStatePreset6Wyvern_Init();
                gt_KronosStatePreset7APillarofFire_Init();
                gt_KronosTipsShowTips_Init();
                gt_KronosTipsKronosGeneral_Init();
                gt_KronosTipsArmorCrashVoidMagicGuardandIronShield_Init();
                gt_KronosTipsFireStormandBloodyImprison_Init();
                gt_KronosTipsDeathPenalty_Init();
                gt_KronosTipsWyvern_Init();
                gt_KronosTipsSatelliteDrop_Init();
                gt_Kronos1stAlert_Init();
                gt_Kronos2ndAlert_Init();
                gt_Kronos3rdAlert_Init();
                gt_Kronos4thAlert_Init();
                gt_KronosWaves_Init();
                gt_Kronosisdead_Init();
                gt_KronosTimerWindow_Init();
                gt_IfKronosisinCombatA_Init();
                gt_IfKronosisinRest_Init();
                gt_ShowKronosPrepSummoningPing_Init();
                gt_KronosAwakenWindowUpdate_Init();
                gt_KronosSummoningWave_Init();
                gt_KronosInit_Init();
                gt_KronosSummoningPreparingMotionCreate_Init();
                gt_KronosSummoningPreparingMotionRemove_Init();
                gt_KronosStatesHidePresist_Init();
                gt_KronosStatesHideinLowLife_Init();
                gt_TowerofVoidDead_Init();
                gt_TowerofVoidDead1_Init();
                gt_TowerofVoidDead2_Init();
                gt_TowerofVoidDead3_Init();
                gt_TowerofVoidDead4_Init();
                gt_SkillAttackIngoracne1_Init();
                gt_SkillAttackIngoracne2_Init();
                gt_SkillAttackIngoracne3_Init();
                gt_SkillAttackIngoracne4_Init();
                gt_SkillFireStorm1_Init();
                gt_SkillFireStorm2_Init();
                gt_SkillFireStorm3_Init();
                gt_SkillFireStorm4_Init();
                gt_EndingScenePreset_Init();
                gt_EndingSceneCinematic_Init();
                gt_EndingSceneFightWithKronos_Init();
                gt_EndingSceneSatelliteDropPersist_Init();
                gt_EndingSceneNaktulHelp_Init();
                gt_EndingSceneVictory_Init();
                gt_ObjectiveKillKronosCreate_Init();
                gt_ObjectiveKillKronosComplete_Init();
                gt_ObjectiveKillKronosUpdate_Init();
                gt_ObjectiveKillKronosFailed_Init();
                gt_ObjectiveDestroyTowerofVoidCreate_Init();
                gt_ObjectiveDestroyTowerofVoidComplete_Init();
                gt_ObjectiveDestroyTowerofVoidUpdate_Init();
                gt_ObjectiveDestroyTowerofVoidFailed_Init();
                gt_ObjectivePreventTimerExpireCreate_Init();
                gt_ObjectivePreventTimerExpireComplete_Init();
                gt_ObjectivePreventTimerExpireUpdate_Init();
                gt_ObjectivePreventTimerExpireFailed_Init();
                gt_SubObjectiveInit_Init();
                gt_ShowSubObjective1TimeElapsed_Init();
                gt_ShowSubObjective2Discovery_Init();
                gt_SubObjectiveCompleteActions_Init();
                gt_SubObjectiveFailActions_Init();
                gt_UpdateEggsCount_Init();
                gt_subObjectiveCallAttackWave1_Init();
                gt_subObjectiveCallAttackWave2_Init();
                gt_subObjectiveCallAttackWave3_Init();
                gt_subObjectiveCallAttackWave4_Init();
                gt_TurntoOurBase_Init();
                gt_SubObjectiveTypeAttackWave1SMALLEST_Init();
                gt_SubObjectiveTypeAttackWave2SMALLER_Init();
                gt_SubObjectiveTypeAttackWave3SMALL_Init();
                gt_SubObjectiveTypeAttackWave4MEDIUM_Init();
                gt_SubObjectiveTypeAttackWave5LARGE_Init();
                gt_SubObjectiveTypeAttackWave6LARGER_Init();
                gt_SubObjectiveTypeAttackWave7LARGEST_Init();
                gt_SubObjectiveTypeAttackWaveerror_Init();
                gt_SubObjectiveCreate_Init();
                gt_SubObjectiveComplete_Init();
                gt_SubObjectiveUpdate_Init();
                gt_SubObjectiveFailed_Init();
                gt_ObjectiveTESTCreate2_Init();
                gt_ObjectiveTESTComplete2_Init();
                gt_ObjectiveTESTUpdate2_Init();
                gt_ObjectiveTESTFailed2_Init();
            }
            //--------------------------------------------------------------------------------------------------
            // Map Initialization
            //--------------------------------------------------------------------------------------------------
            void run () {
                InitLibs();
                InitGlobals();
                InitCustomAI();
                InitTriggers();
            }
        </ScriptCode>
        <InitFunc>run</InitFunc>
    </Element>
</TriggerData>