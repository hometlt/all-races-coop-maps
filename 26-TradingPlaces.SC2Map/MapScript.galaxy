//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Trading Places
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"
include "aiCD4D0112"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_eNEMY_BASE_COUNT = 10;
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 6;
const int gv_pLAYER_04_ENEMY = 7;
const int gv_pLAYER_05_BONUS = 8;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_PlatformLocationB {
    point lv_centerPoint;
    int lv_linkUp;
    int lv_linkDown;
    int lv_linkLeft;
    int lv_linkRight;
    unitgroup lv_pathingBlockers;
};

struct gs_RECORD_PlatformLocationC {
    point lv_centerPoint;
    int lv_linkUp;
    int lv_linkDown;
    int lv_linkLeft;
    int lv_linkRight;
    unitgroup lv_pathingBlockers;
};

struct gs_RECORD_PlatformLocationA {
    point lv_centerPoint;
    int lv_linkUp;
    int lv_linkDown;
    int lv_linkLeft;
    int lv_linkRight;
    unitgroup lv_pathingBlockers;
};

struct gs_RECORD_MovingPlatform {
    unit lv_platformPlateB;
    unit lv_platformPlateA;
    unit lv_platformPlateC;
    int lv_currentLocationB;
    int lv_currentLocationA;
    int lv_currentLocationC;
    bool lv_inTransitB;
    bool lv_inTransitA;
    bool lv_inTransitC;
    sound lv_movementSoundB;
    sound lv_movementSoundA;
    sound lv_movementSoundC;
    int lv_dialog;
    int lv_leftButton;
    int lv_pingButton;
    int lv_downButton;
    int lv_upButton;
    int lv_rightButton;
    int lv_leftIcon;
    int lv_pingIcon;
    int lv_downIcon;
    int lv_upIcon;
    int lv_rightIcon;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_previousShield;
int gv_currentShield;
int gv_coresDestroyed;
int gv_dataDownloaded;
int[7] gv_powerCorePings;
int[6] gv_powerCoreShieldPings;
unit[7] gv_powerCores;
unit[6] gv_powerCoreShields;
point gv_finalCorePoint;
region gv_finalCoreRegion;
int gv__4Shield;
int gv__5Shield;
int gv_shieldAnnounce;
int[4] gv_wardenPing;
timer gv_objectiveTimer;
int gv_objectiveTimer3;
timer gv_objectiveTimer2;
int gv_objectiveTimerDuration;
timer gv_bonusTimer;
timer gv_bonusTimer2;
int gv_objectiveTimerDuration2;
int gv_objectiveTimerDuration3;
unitfilter gv_vICTORY_REQUIREMENT;
point gv_attackWaveA_Wave05Path;
region[3][11] gv_attackSpawn;
point gv_victoryCompletePan;
bool gv_amonPlatformDown;
bool gv_amonAttackExpansion;
gs_RECORD_MovingPlatform gv_movingPlatform;
gs_RECORD_PlatformLocationB[9] gv_platformLocationsB;
gs_RECORD_PlatformLocationC[8] gv_platformLocationsC;
gs_RECORD_PlatformLocationA[4] gv_platformLocationsAmon;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase3;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDestroyZergBase4;
bool gv_isConversationAvailable;
text[3] gv_pLAYER_COMMANDER;
playergroup gv_enemyGroup;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_powerCorePings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_powerCoreShieldPings[init_i] = c_invalidPingId;
    }
    gv_finalCorePoint = UnitGetPosition(UnitFromId(275));
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_wardenPing[init_i] = c_invalidPingId;
    }
    gv_objectiveTimer = TimerCreate();
    gv_objectiveTimer3 = c_timerWindowNone;
    gv_objectiveTimer2 = TimerCreate();
    gv_objectiveTimerDuration = 10;
    gv_bonusTimer = TimerCreate();
    gv_bonusTimer2 = TimerCreate();
    gv_objectiveTimerDuration2 = 6;
    gv_vICTORY_REQUIREMENT = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_amonPlatformDown = true;
    gv_movingPlatform.lv_currentLocationB = 1;
    gv_movingPlatform.lv_currentLocationA = 1;
    gv_movingPlatform.lv_currentLocationC = 1;
    gv_movingPlatform.lv_dialog = c_invalidDialogId;
    gv_movingPlatform.lv_leftButton = c_invalidDialogControlId;
    gv_movingPlatform.lv_pingButton = c_invalidDialogControlId;
    gv_movingPlatform.lv_downButton = c_invalidDialogControlId;
    gv_movingPlatform.lv_upButton = c_invalidDialogControlId;
    gv_movingPlatform.lv_rightButton = c_invalidDialogControlId;
    gv_movingPlatform.lv_leftIcon = c_invalidDialogControlId;
    gv_movingPlatform.lv_pingIcon = c_invalidDialogControlId;
    gv_movingPlatform.lv_downIcon = c_invalidDialogControlId;
    gv_movingPlatform.lv_upIcon = c_invalidDialogControlId;
    gv_movingPlatform.lv_rightIcon = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_platformLocationsB[init_i].lv_pathingBlockers = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_platformLocationsC[init_i].lv_pathingBlockers = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_platformLocationsAmon[init_i].lv_pathingBlockers = UnitGroupEmpty();
    }
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase4 = c_invalidObjectiveId;
    gv_isConversationAvailable = true;
    gv_enemyGroup = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CoreDestroyed (unit lp_activeUnit);
void gf_RunBonusatMissionTime (trigger lp_bonusObjective, fixed lp_time);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
point gf_AttackWaveSpawn ();
void gf_MovePlatformB (int lp_nextLocation, fixed lp_direction);
void gf_MovePlatformA (int lp_nextLocation, fixed lp_direction);
void gf_MovePlatformC (int lp_nextLocation, fixed lp_direction);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_CoreDestroyed;
trigger gt_CoreDestroyedQ;
trigger gt_CoreShields3;
trigger gt_ShieldChange;
trigger gt_ObjectiveTimerWindow;
trigger gt_ObjectiveTimerWindow2;
trigger gt_BonusTimer;
trigger gt_BonusTimer2;
trigger gt_Bonus;
trigger gt_Bonus1;
trigger gt_Bonus2;
trigger gt_Warden;
trigger gt_WardenDies;
trigger gt_EnemyAttackingQ;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_AttackWaveFleet;
trigger gt_ObjectiveDownloadDataFailTime;
trigger gt_Bonus1Complete;
trigger gt_Bonus2Complete;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_PlatformInit;
trigger gt_PlatforrmDialogSetup;
trigger gt_PlatformButtonPressed;
trigger gt_PlatformButtonPressed2;
trigger gt_DisableAllButtons;
trigger gt_DisableAllButtons2;
trigger gt_EnableButtons;
trigger gt_RevealButtonsQ;
trigger gt_ObjectiveDestroyPowerCoresCreate;
trigger gt_ObjectiveDestroyPowerCoresComplete;
trigger gt_ObjectiveDestroyPowerCoresUpdate;
trigger gt_ObjectiveDownloadDataCreate;
trigger gt_ObjectiveDownloadDataComplete;
trigger gt_ObjectiveDownloadDataFailed;
trigger gt_ObjectiveDestroyPowerCoresUpdate2;
trigger gt_Init03LoadingComplete;
trigger gt_Init05Units;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiCD4D0112") { aiCD4D0112_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { aiCD4D0112_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { return aiCD4D0112_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { return aiCD4D0112_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { aiCD4D0112_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { aiCD4D0112_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiCD4D0112") { aiCD4D0112_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { aiCD4D0112_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { aiCD4D0112_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { return aiCD4D0112_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { return aiCD4D0112_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiCD4D0112") { return aiCD4D0112_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CoreDestroyed (unit lp_activeUnit) {
    // Variable Declarations
    int lv_iter;

    // Automatic Variable Declarations
    const int autoD25F86D3_ae = 6;
    const int autoD25F86D3_ai = 1;
    unit autoE69BE59C_val;

    // Variable Initialization

    // Implementation
    gv_coresDestroyed += 1;
    TimerStart(gv_objectiveTimer, (TimerGetRemaining(gv_objectiveTimer) + 300.0), false, c_timeGame);
    TriggerExecute(gt_ObjectiveDestroyPowerCoresUpdate, true, false);
    lv_iter = 1;
    for ( ; ( (autoD25F86D3_ai >= 0 && lv_iter <= autoD25F86D3_ae) || (autoD25F86D3_ai < 0 && lv_iter >= autoD25F86D3_ae) ) ; lv_iter += autoD25F86D3_ai ) {
        if ((lp_activeUnit == gv_powerCores[lv_iter])) {
            PingDestroy(gv_powerCorePings[lv_iter]);
        }

    }
    if ((gv_coresDestroyed == 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_finalCorePoint = UnitGetPosition(lp_activeUnit);
        autoE69BE59C_val = lp_activeUnit;
        if (autoE69BE59C_val == UnitFromId(109)) {
            gv_finalCoreRegion = RegionFromId(17);
        }
        else if (autoE69BE59C_val == UnitFromId(275)) {
            gv_finalCoreRegion = RegionFromId(16);
        }
        else if (autoE69BE59C_val == UnitFromId(276)) {
            gv_finalCoreRegion = RegionFromId(18);
        }
        else {
        }
        TriggerExecute(gt_ObjectiveDestroyPowerCoresComplete, true, false);
    }
    else {
        TriggerExecute(gt_CoreDestroyedQ, true, false);
    }
}

trigger auto_gf_RunBonusatMissionTime_Trigger = null;
trigger auto_gf_RunBonusatMissionTime_lp_bonusObjective;
fixed auto_gf_RunBonusatMissionTime_lp_time;

void gf_RunBonusatMissionTime (trigger lp_bonusObjective, fixed lp_time) {
    auto_gf_RunBonusatMissionTime_lp_bonusObjective = lp_bonusObjective;
    auto_gf_RunBonusatMissionTime_lp_time = lp_time;

    if (auto_gf_RunBonusatMissionTime_Trigger == null) {
        auto_gf_RunBonusatMissionTime_Trigger = TriggerCreate("auto_gf_RunBonusatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunBonusatMissionTime_Trigger, false, false);
}

bool auto_gf_RunBonusatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_bonusObjective = auto_gf_RunBonusatMissionTime_lp_bonusObjective;
    fixed lp_time = auto_gf_RunBonusatMissionTime_lp_time;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_bonusObjective, true, false);
    }

    return true;
}

trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

point gf_AttackWaveSpawn () {
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return RegionGetCenter(RegionFromId(24));
}

void gf_MovePlatformB (int lp_nextLocation, fixed lp_direction) {
    // Variable Declarations
    fixed lv_distance;
    int lv_i;
    point lv_visionPoint;
    unitgroup lv_enemyGroundUnits;
    unitgroup lv_friendlyGroundUnits;
    unitgroup lv_platformUnits;

    // Automatic Variable Declarations
    fixed auto8935DBA5_val;
    unitgroup auto9714DE6C_g;
    int auto9714DE6C_u;
    unit auto9714DE6C_var;
    unitgroup autoA6006777_g;
    int autoA6006777_u;
    unit autoA6006777_var;
    unitgroup autoC5C665E3_g;
    int autoC5C665E3_u;
    unit autoC5C665E3_var;
    unitgroup autoB8FABB6C_g;
    int autoB8FABB6C_u;
    unit autoB8FABB6C_var;
    unitgroup auto32161CC7_g;
    int auto32161CC7_u;
    unit auto32161CC7_var;
    unitgroup auto26E24D62_g;
    int auto26E24D62_u;
    unit auto26E24D62_var;
    unitgroup autoF3549FED_g;
    int autoF3549FED_u;
    unit autoF3549FED_var;
    fixed auto25890817_val;
    unitgroup autoB914CE5F_g;
    int autoB914CE5F_u;
    unit autoB914CE5F_var;

    // Variable Initialization
    lv_enemyGroundUnits = UnitGroupEmpty();
    lv_friendlyGroundUnits = UnitGroupEmpty();
    lv_platformUnits = UnitGroupEmpty();

    // Implementation
    gv_movingPlatform.lv_inTransitB = true;
    TriggerExecute(gt_DisableAllButtons, true, false);
    lv_distance = DistanceBetweenPoints(gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_centerPoint, gv_platformLocationsB[lp_nextLocation].lv_centerPoint);
    lv_visionPoint = gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_centerPoint;
    VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(lv_visionPoint) - 16.0), (PointGetY(lv_visionPoint) - 16.0), (PointGetX(lv_visionPoint) + 16.0), (PointGetY(lv_visionPoint) + 16.0)), 12.0, false);
    lv_visionPoint = PointWithOffsetPolar(gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_centerPoint, (lv_distance/2), lp_direction);
    VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(lv_visionPoint) - 16.0), (PointGetY(lv_visionPoint) - 16.0), (PointGetX(lv_visionPoint) + 16.0), (PointGetY(lv_visionPoint) + 16.0)), 12.0, false);
    lv_visionPoint = gv_platformLocationsB[lp_nextLocation].lv_centerPoint;
    VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(lv_visionPoint) - 16.0), (PointGetY(lv_visionPoint) - 16.0), (PointGetX(lv_visionPoint) + 16.0), (PointGetY(lv_visionPoint) + 16.0)), 12.0, false);
    SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStart", "Shadow_Platform_Ramp", RegionFromId(19));
    auto8935DBA5_val = lp_direction;
    if (auto8935DBA5_val == 0.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal RightStart");
    }
    else if (auto8935DBA5_val == 90.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal UpStart");
    }
    else if (auto8935DBA5_val == 180.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal LeftStart");
    }
    else if (auto8935DBA5_val == 270.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal DownStart");
    }
    else {
    }
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementLoop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_movingPlatform.lv_movementSoundB = SoundLastPlayed();
    UnitCreateEffectPoint(gv_movingPlatform.lv_platformPlateB, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(gv_movingPlatform.lv_platformPlateB), lv_distance, lp_direction));
    auto9714DE6C_g = UnitGroup(null, c_playerAny, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9714DE6C_u = UnitGroupCount(auto9714DE6C_g, c_unitCountAll);
    for (;; auto9714DE6C_u -= 1) {
        auto9714DE6C_var = UnitGroupUnitFromEnd(auto9714DE6C_g, auto9714DE6C_u);
        if (auto9714DE6C_var == null) { break; }
        UnitGroupAdd(lv_platformUnits, auto9714DE6C_var);
        if ((UnitTypeTestAttribute(UnitGetType(auto9714DE6C_var), c_unitAttributeStructure) == false)) {
            if (((UnitGetOwner(auto9714DE6C_var) == gv_pLAYER_01_USER) || (UnitGetOwner(auto9714DE6C_var) == gv_pLAYER_02_USER))) {
                UnitGroupAdd(lv_friendlyGroundUnits, auto9714DE6C_var);
            }
            else {
                if (((UnitGetOwner(auto9714DE6C_var) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(auto9714DE6C_var) == gv_pLAYER_04_ENEMY))) {
                    UnitGroupAdd(lv_enemyGroundUnits, auto9714DE6C_var);
                }

            }
        }

    }
    autoA6006777_g = lv_platformUnits;
    autoA6006777_u = UnitGroupCount(autoA6006777_g, c_unitCountAll);
    for (;; autoA6006777_u -= 1) {
        autoA6006777_var = UnitGroupUnitFromEnd(autoA6006777_g, autoA6006777_u);
        if (autoA6006777_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(autoA6006777_var), c_unitAttributeStructure) == false)) {
            if ((UnitGetType(autoA6006777_var) == "Probe")) {
                UnitAbilityEnable(autoA6006777_var, "ProtossBuild", false);
            }

            if ((UnitGetType(autoA6006777_var) == "Drone")) {
                UnitAbilityEnable(autoA6006777_var, "ZergBuild", false);
            }

            if ((UnitGetType(autoA6006777_var) == "SCV")) {
                UnitAbilityEnable(autoA6006777_var, "TerranBuild", false);
                UnitIssueOrder(autoA6006777_var, Order(AbilityCommand("TerranBuild", 30)), c_orderQueueReplace);
            }

            UnitIssueOrder(autoA6006777_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        else {
            if ((UnitGetType(autoA6006777_var) == "Nexus")) {
                UnitIssueOrder(autoA6006777_var, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), autoA6006777_var), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(autoA6006777_var, OrderTargetingUnit(AbilityCommand("Rally", 0), autoA6006777_var), c_orderQueueReplace);
            }
        }
        UnitCreateEffectPoint(autoA6006777_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(autoA6006777_var), lv_distance, lp_direction));
    }
    autoC5C665E3_g = gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_pathingBlockers;
    autoC5C665E3_u = UnitGroupCount(autoC5C665E3_g, c_unitCountAll);
    for (;; autoC5C665E3_u -= 1) {
        autoC5C665E3_var = UnitGroupUnitFromEnd(autoC5C665E3_g, autoC5C665E3_u);
        if (autoC5C665E3_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC5C665E3_var, true);
    }
    Wait(0.0625, c_timeGame);
    autoB8FABB6C_g = UnitGroup("SCV", c_playerAny, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB8FABB6C_u = UnitGroupCount(autoB8FABB6C_g, c_unitCountAll);
    for (;; autoB8FABB6C_u -= 1) {
        autoB8FABB6C_var = UnitGroupUnitFromEnd(autoB8FABB6C_g, autoB8FABB6C_u);
        if (autoB8FABB6C_var == null) { break; }
        if ((libNtve_gf_UnitCanCreateEffectAtPoint(autoB8FABB6C_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(autoB8FABB6C_var), lv_distance, lp_direction)) == true)) {
            UnitGroupAdd(lv_platformUnits, autoB8FABB6C_var);
            UnitGroupAdd(lv_friendlyGroundUnits, autoB8FABB6C_var);
            UnitIssueOrder(autoB8FABB6C_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitCreateEffectPoint(autoB8FABB6C_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(autoB8FABB6C_var), lv_distance, lp_direction));
        }

    }
    Wait(9.875, c_timeGame);
    auto32161CC7_g = gv_platformLocationsB[lp_nextLocation].lv_pathingBlockers;
    auto32161CC7_u = UnitGroupCount(auto32161CC7_g, c_unitCountAll);
    for (;; auto32161CC7_u -= 1) {
        auto32161CC7_var = UnitGroupUnitFromEnd(auto32161CC7_g, auto32161CC7_u);
        if (auto32161CC7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto32161CC7_var, false);
    }
    SoundStop(gv_movingPlatform.lv_movementSoundB, true);
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == false)) {
        SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementStop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    Wait(0.0625, c_timeGame);
    auto26E24D62_g = lv_friendlyGroundUnits;
    auto26E24D62_u = UnitGroupCount(auto26E24D62_g, c_unitCountAll);
    for (;; auto26E24D62_u -= 1) {
        auto26E24D62_var = UnitGroupUnitFromEnd(auto26E24D62_g, auto26E24D62_u);
        if (auto26E24D62_var == null) { break; }
        UnitIssueOrder(auto26E24D62_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        if ((UnitGetType(auto26E24D62_var) == "Probe")) {
            UnitAbilityEnable(auto26E24D62_var, "ProtossBuild", true);
        }

        if ((UnitGetType(auto26E24D62_var) == "Drone")) {
            UnitAbilityEnable(auto26E24D62_var, "ZergBuild", true);
        }

        if ((UnitGetType(auto26E24D62_var) == "SCV")) {
            UnitAbilityEnable(auto26E24D62_var, "TerranBuild", true);
            UnitIssueOrder(auto26E24D62_var, Order(AbilityCommand("TerranBuild", 30)), c_orderQueueReplace);
        }

        UnitIssueOrder(auto26E24D62_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    autoF3549FED_g = lv_enemyGroundUnits;
    autoF3549FED_u = UnitGroupCount(autoF3549FED_g, c_unitCountAll);
    for (;; autoF3549FED_u -= 1) {
        autoF3549FED_var = UnitGroupUnitFromEnd(autoF3549FED_g, autoF3549FED_u);
        if (autoF3549FED_var == null) { break; }
    }
    gv_movingPlatform.lv_currentLocationB = lp_nextLocation;
    RegionSetCenter(RegionFromId(19), gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_centerPoint);
    gv_movingPlatform.lv_inTransitB = false;
    auto25890817_val = lp_direction;
    if (auto25890817_val == 0.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal RightStop");
    }
    else if (auto25890817_val == 90.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal UpStop");
    }
    else if (auto25890817_val == 180.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal LeftStop");
    }
    else if (auto25890817_val == 270.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateB, "Signal DownStop");
    }
    else {
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStop", "Shadow_Platform_Ramp", RegionFromId(19));
    Wait(1.75, c_timeGame);
    TriggerExecute(gt_EnableButtons, true, false);
    autoB914CE5F_g = lv_enemyGroundUnits;
    autoB914CE5F_u = UnitGroupCount(autoB914CE5F_g, c_unitCountAll);
    for (;; autoB914CE5F_u -= 1) {
        autoB914CE5F_var = UnitGroupUnitFromEnd(autoB914CE5F_g, autoB914CE5F_u);
        if (autoB914CE5F_var == null) { break; }
        AISetUnitScriptControlled(autoB914CE5F_var, false);
        AISetUnitSuicide(autoB914CE5F_var, true);
    }
}

void gf_MovePlatformA (int lp_nextLocation, fixed lp_direction) {
    // Variable Declarations
    fixed lv_distance;
    int lv_i;
    unitgroup lv_enemyGroundUnits;
    unitgroup lv_friendlyGroundUnits;
    unitgroup lv_platformUnits;

    // Automatic Variable Declarations
    fixed autoFC340720_val;
    unitgroup auto783DAC69_g;
    int auto783DAC69_u;
    unit auto783DAC69_var;
    unitgroup auto73B2911B_g;
    int auto73B2911B_u;
    unit auto73B2911B_var;
    unitgroup auto698066D1_g;
    int auto698066D1_u;
    unit auto698066D1_var;
    unitgroup auto589E9593_g;
    int auto589E9593_u;
    unit auto589E9593_var;
    unitgroup auto68C6FA59_g;
    int auto68C6FA59_u;
    unit auto68C6FA59_var;
    unitgroup autoD7142C3E_g;
    int autoD7142C3E_u;
    unit autoD7142C3E_var;
    unitgroup auto4F1D572C_g;
    int auto4F1D572C_u;
    unit auto4F1D572C_var;
    fixed auto995CB154_val;
    unitgroup autoEF1E652C_g;
    int autoEF1E652C_u;
    unit autoEF1E652C_var;

    // Variable Initialization
    lv_enemyGroundUnits = UnitGroupEmpty();
    lv_friendlyGroundUnits = UnitGroupEmpty();
    lv_platformUnits = UnitGroupEmpty();

    // Implementation
    gv_movingPlatform.lv_inTransitA = true;
    lv_distance = DistanceBetweenPoints(gv_platformLocationsAmon[gv_movingPlatform.lv_currentLocationA].lv_centerPoint, gv_platformLocationsAmon[lp_nextLocation].lv_centerPoint);
    SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStart", "Shadow_Platform_Ramp", RegionFromId(15));
    autoFC340720_val = lp_direction;
    if (autoFC340720_val == 0.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal RightStart");
    }
    else if (autoFC340720_val == 90.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal UpStart");
    }
    else if (autoFC340720_val == 180.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal LeftStart");
    }
    else if (autoFC340720_val == 270.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal DownStart");
    }
    else {
    }
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementLoop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_movingPlatform.lv_movementSoundA = SoundLastPlayed();
    UnitCreateEffectPoint(gv_movingPlatform.lv_platformPlateA, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(gv_movingPlatform.lv_platformPlateA), lv_distance, lp_direction));
    auto783DAC69_g = UnitGroup(null, c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto783DAC69_u = UnitGroupCount(auto783DAC69_g, c_unitCountAll);
    for (;; auto783DAC69_u -= 1) {
        auto783DAC69_var = UnitGroupUnitFromEnd(auto783DAC69_g, auto783DAC69_u);
        if (auto783DAC69_var == null) { break; }
        UnitGroupAdd(lv_platformUnits, auto783DAC69_var);
        if ((UnitTypeTestAttribute(UnitGetType(auto783DAC69_var), c_unitAttributeStructure) == false)) {
            if (((UnitGetOwner(auto783DAC69_var) == gv_pLAYER_01_USER) || (UnitGetOwner(auto783DAC69_var) == gv_pLAYER_02_USER))) {
                UnitGroupAdd(lv_friendlyGroundUnits, auto783DAC69_var);
            }
            else {
                if (((UnitGetOwner(auto783DAC69_var) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(auto783DAC69_var) == gv_pLAYER_04_ENEMY))) {
                    UnitGroupAdd(lv_enemyGroundUnits, auto783DAC69_var);
                }

            }
        }

    }
    auto73B2911B_g = lv_platformUnits;
    auto73B2911B_u = UnitGroupCount(auto73B2911B_g, c_unitCountAll);
    for (;; auto73B2911B_u -= 1) {
        auto73B2911B_var = UnitGroupUnitFromEnd(auto73B2911B_g, auto73B2911B_u);
        if (auto73B2911B_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto73B2911B_var), c_unitAttributeStructure) == false)) {
            if ((UnitGetType(auto73B2911B_var) == "Probe")) {
                UnitAbilityEnable(auto73B2911B_var, "ProtossBuild", false);
            }

            if ((UnitGetType(auto73B2911B_var) == "Drone")) {
                UnitAbilityEnable(auto73B2911B_var, "ZergBuild", false);
            }

            if ((UnitGetType(auto73B2911B_var) == "SCV")) {
                UnitAbilityEnable(auto73B2911B_var, "TerranBuild", false);
                UnitIssueOrder(auto73B2911B_var, Order(AbilityCommand("TerranBuild", 30)), c_orderQueueReplace);
            }

            UnitIssueOrder(auto73B2911B_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        else {
            if ((UnitGetType(auto73B2911B_var) == "Nexus")) {
                UnitIssueOrder(auto73B2911B_var, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), auto73B2911B_var), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto73B2911B_var, OrderTargetingUnit(AbilityCommand("Rally", 0), auto73B2911B_var), c_orderQueueReplace);
            }
        }
        UnitCreateEffectPoint(auto73B2911B_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(auto73B2911B_var), lv_distance, lp_direction));
    }
    auto698066D1_g = gv_platformLocationsAmon[gv_movingPlatform.lv_currentLocationA].lv_pathingBlockers;
    auto698066D1_u = UnitGroupCount(auto698066D1_g, c_unitCountAll);
    for (;; auto698066D1_u -= 1) {
        auto698066D1_var = UnitGroupUnitFromEnd(auto698066D1_g, auto698066D1_u);
        if (auto698066D1_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto698066D1_var, true);
    }
    Wait(0.0625, c_timeGame);
    auto589E9593_g = UnitGroup("SCV", c_playerAny, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto589E9593_u = UnitGroupCount(auto589E9593_g, c_unitCountAll);
    for (;; auto589E9593_u -= 1) {
        auto589E9593_var = UnitGroupUnitFromEnd(auto589E9593_g, auto589E9593_u);
        if (auto589E9593_var == null) { break; }
        if ((libNtve_gf_UnitCanCreateEffectAtPoint(auto589E9593_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(auto589E9593_var), lv_distance, lp_direction)) == true)) {
            UnitGroupAdd(lv_platformUnits, auto589E9593_var);
            UnitGroupAdd(lv_friendlyGroundUnits, auto589E9593_var);
            UnitIssueOrder(auto589E9593_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitCreateEffectPoint(auto589E9593_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(auto589E9593_var), lv_distance, lp_direction));
        }

    }
    Wait(9.875, c_timeGame);
    auto68C6FA59_g = gv_platformLocationsAmon[lp_nextLocation].lv_pathingBlockers;
    auto68C6FA59_u = UnitGroupCount(auto68C6FA59_g, c_unitCountAll);
    for (;; auto68C6FA59_u -= 1) {
        auto68C6FA59_var = UnitGroupUnitFromEnd(auto68C6FA59_g, auto68C6FA59_u);
        if (auto68C6FA59_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto68C6FA59_var, false);
    }
    SoundStop(gv_movingPlatform.lv_movementSoundA, true);
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == false)) {
        SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementStop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    Wait(0.0625, c_timeGame);
    autoD7142C3E_g = lv_friendlyGroundUnits;
    autoD7142C3E_u = UnitGroupCount(autoD7142C3E_g, c_unitCountAll);
    for (;; autoD7142C3E_u -= 1) {
        autoD7142C3E_var = UnitGroupUnitFromEnd(autoD7142C3E_g, autoD7142C3E_u);
        if (autoD7142C3E_var == null) { break; }
        UnitIssueOrder(autoD7142C3E_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        if ((UnitGetType(autoD7142C3E_var) == "Probe")) {
            UnitAbilityEnable(autoD7142C3E_var, "ProtossBuild", true);
        }

        if ((UnitGetType(autoD7142C3E_var) == "Drone")) {
            UnitAbilityEnable(autoD7142C3E_var, "ZergBuild", true);
        }

        if ((UnitGetType(autoD7142C3E_var) == "SCV")) {
            UnitAbilityEnable(autoD7142C3E_var, "TerranBuild", true);
            UnitIssueOrder(autoD7142C3E_var, Order(AbilityCommand("TerranBuild", 30)), c_orderQueueReplace);
        }

        UnitIssueOrder(autoD7142C3E_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    auto4F1D572C_g = lv_enemyGroundUnits;
    auto4F1D572C_u = UnitGroupCount(auto4F1D572C_g, c_unitCountAll);
    for (;; auto4F1D572C_u -= 1) {
        auto4F1D572C_var = UnitGroupUnitFromEnd(auto4F1D572C_g, auto4F1D572C_u);
        if (auto4F1D572C_var == null) { break; }
    }
    gv_movingPlatform.lv_currentLocationA = lp_nextLocation;
    RegionSetCenter(RegionFromId(15), gv_platformLocationsAmon[gv_movingPlatform.lv_currentLocationA].lv_centerPoint);
    gv_movingPlatform.lv_inTransitA = false;
    auto995CB154_val = lp_direction;
    if (auto995CB154_val == 0.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal RightStop");
    }
    else if (auto995CB154_val == 90.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal UpStop");
    }
    else if (auto995CB154_val == 180.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal LeftStop");
    }
    else if (auto995CB154_val == 270.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateA, "Signal DownStop");
    }
    else {
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStop", "Shadow_Platform_Ramp", RegionFromId(15));
    Wait(1.75, c_timeGame);
    autoEF1E652C_g = lv_enemyGroundUnits;
    autoEF1E652C_u = UnitGroupCount(autoEF1E652C_g, c_unitCountAll);
    for (;; autoEF1E652C_u -= 1) {
        autoEF1E652C_var = UnitGroupUnitFromEnd(autoEF1E652C_g, autoEF1E652C_u);
        if (autoEF1E652C_var == null) { break; }
        AISetUnitScriptControlled(autoEF1E652C_var, false);
        AISetUnitSuicide(autoEF1E652C_var, true);
    }
}

void gf_MovePlatformC (int lp_nextLocation, fixed lp_direction) {
    // Variable Declarations
    fixed lv_distance;
    int lv_i;
    point lv_visionPoint;
    unitgroup lv_enemyGroundUnits;
    unitgroup lv_friendlyGroundUnits;
    unitgroup lv_platformUnits;

    // Automatic Variable Declarations
    fixed autoA228AAAF_val;
    unitgroup auto9E2B86E2_g;
    int auto9E2B86E2_u;
    unit auto9E2B86E2_var;
    unitgroup auto874EFB44_g;
    int auto874EFB44_u;
    unit auto874EFB44_var;
    unitgroup autoC3DF364C_g;
    int autoC3DF364C_u;
    unit autoC3DF364C_var;
    unitgroup auto0B5DCA24_g;
    int auto0B5DCA24_u;
    unit auto0B5DCA24_var;
    unitgroup autoFB5595FD_g;
    int autoFB5595FD_u;
    unit autoFB5595FD_var;
    unitgroup auto073D1419_g;
    int auto073D1419_u;
    unit auto073D1419_var;
    unitgroup auto2E139C69_g;
    int auto2E139C69_u;
    unit auto2E139C69_var;
    fixed autoAD478501_val;
    unitgroup auto46789C2B_g;
    int auto46789C2B_u;
    unit auto46789C2B_var;

    // Variable Initialization
    lv_enemyGroundUnits = UnitGroupEmpty();
    lv_friendlyGroundUnits = UnitGroupEmpty();
    lv_platformUnits = UnitGroupEmpty();

    // Implementation
    gv_movingPlatform.lv_inTransitC = true;
    TriggerExecute(gt_DisableAllButtons2, true, false);
    lv_distance = DistanceBetweenPoints(gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_centerPoint, gv_platformLocationsC[lp_nextLocation].lv_centerPoint);
    lv_visionPoint = gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_centerPoint;
    VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(lv_visionPoint) - 16.0), (PointGetY(lv_visionPoint) - 16.0), (PointGetX(lv_visionPoint) + 16.0), (PointGetY(lv_visionPoint) + 16.0)), 12.0, false);
    lv_visionPoint = PointWithOffsetPolar(gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_centerPoint, (lv_distance/2), lp_direction);
    VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(lv_visionPoint) - 16.0), (PointGetY(lv_visionPoint) - 16.0), (PointGetX(lv_visionPoint) + 16.0), (PointGetY(lv_visionPoint) + 16.0)), 12.0, false);
    lv_visionPoint = gv_platformLocationsC[lp_nextLocation].lv_centerPoint;
    VisRevealArea(gv_pLAYER_01_USER, RegionRect((PointGetX(lv_visionPoint) - 16.0), (PointGetY(lv_visionPoint) - 16.0), (PointGetX(lv_visionPoint) + 16.0), (PointGetY(lv_visionPoint) + 16.0)), 12.0, false);
    SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStart", "Shadow_Platform_Ramp", RegionFromId(1));
    autoA228AAAF_val = lp_direction;
    if (autoA228AAAF_val == 0.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal RightStart");
    }
    else if (autoA228AAAF_val == 90.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal UpStart");
    }
    else if (autoA228AAAF_val == 180.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal LeftStart");
    }
    else if (autoA228AAAF_val == 270.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal DownStart");
    }
    else {
    }
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementLoop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_movingPlatform.lv_movementSoundC = SoundLastPlayed();
    UnitCreateEffectPoint(gv_movingPlatform.lv_platformPlateC, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(gv_movingPlatform.lv_platformPlateC), lv_distance, lp_direction));
    auto9E2B86E2_g = UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E2B86E2_u = UnitGroupCount(auto9E2B86E2_g, c_unitCountAll);
    for (;; auto9E2B86E2_u -= 1) {
        auto9E2B86E2_var = UnitGroupUnitFromEnd(auto9E2B86E2_g, auto9E2B86E2_u);
        if (auto9E2B86E2_var == null) { break; }
        UnitGroupAdd(lv_platformUnits, auto9E2B86E2_var);
        if ((UnitTypeTestAttribute(UnitGetType(auto9E2B86E2_var), c_unitAttributeStructure) == false)) {
            if (((UnitGetOwner(auto9E2B86E2_var) == gv_pLAYER_01_USER) || (UnitGetOwner(auto9E2B86E2_var) == gv_pLAYER_02_USER))) {
                UnitGroupAdd(lv_friendlyGroundUnits, auto9E2B86E2_var);
            }
            else {
                if (((UnitGetOwner(auto9E2B86E2_var) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(auto9E2B86E2_var) == gv_pLAYER_04_ENEMY))) {
                    UnitGroupAdd(lv_enemyGroundUnits, auto9E2B86E2_var);
                }

            }
        }

    }
    auto874EFB44_g = lv_platformUnits;
    auto874EFB44_u = UnitGroupCount(auto874EFB44_g, c_unitCountAll);
    for (;; auto874EFB44_u -= 1) {
        auto874EFB44_var = UnitGroupUnitFromEnd(auto874EFB44_g, auto874EFB44_u);
        if (auto874EFB44_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto874EFB44_var), c_unitAttributeStructure) == false)) {
            if ((UnitGetType(auto874EFB44_var) == "Probe")) {
                UnitAbilityEnable(auto874EFB44_var, "ProtossBuild", false);
            }

            if ((UnitGetType(auto874EFB44_var) == "Drone")) {
                UnitAbilityEnable(auto874EFB44_var, "ZergBuild", false);
            }

            if ((UnitGetType(auto874EFB44_var) == "SCV")) {
                UnitAbilityEnable(auto874EFB44_var, "TerranBuild", false);
                UnitIssueOrder(auto874EFB44_var, Order(AbilityCommand("TerranBuild", 30)), c_orderQueueReplace);
            }

            UnitIssueOrder(auto874EFB44_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        else {
            if ((UnitGetType(auto874EFB44_var) == "Nexus")) {
                UnitIssueOrder(auto874EFB44_var, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), auto874EFB44_var), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto874EFB44_var, OrderTargetingUnit(AbilityCommand("Rally", 0), auto874EFB44_var), c_orderQueueReplace);
            }
        }
        UnitCreateEffectPoint(auto874EFB44_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(auto874EFB44_var), lv_distance, lp_direction));
    }
    autoC3DF364C_g = gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_pathingBlockers;
    autoC3DF364C_u = UnitGroupCount(autoC3DF364C_g, c_unitCountAll);
    for (;; autoC3DF364C_u -= 1) {
        autoC3DF364C_var = UnitGroupUnitFromEnd(autoC3DF364C_g, autoC3DF364C_u);
        if (autoC3DF364C_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC3DF364C_var, true);
    }
    Wait(0.0625, c_timeGame);
    auto0B5DCA24_g = UnitGroup("SCV", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B5DCA24_u = UnitGroupCount(auto0B5DCA24_g, c_unitCountAll);
    for (;; auto0B5DCA24_u -= 1) {
        auto0B5DCA24_var = UnitGroupUnitFromEnd(auto0B5DCA24_g, auto0B5DCA24_u);
        if (auto0B5DCA24_var == null) { break; }
        if ((libNtve_gf_UnitCanCreateEffectAtPoint(auto0B5DCA24_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(auto0B5DCA24_var), lv_distance, lp_direction)) == true)) {
            UnitGroupAdd(lv_platformUnits, auto0B5DCA24_var);
            UnitGroupAdd(lv_friendlyGroundUnits, auto0B5DCA24_var);
            UnitIssueOrder(auto0B5DCA24_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitCreateEffectPoint(auto0B5DCA24_var, "TranslateUnit", PointWithOffsetPolar(UnitGetPosition(auto0B5DCA24_var), lv_distance, lp_direction));
        }

    }
    Wait(9.875, c_timeGame);
    autoFB5595FD_g = gv_platformLocationsC[lp_nextLocation].lv_pathingBlockers;
    autoFB5595FD_u = UnitGroupCount(autoFB5595FD_g, c_unitCountAll);
    for (;; autoFB5595FD_u -= 1) {
        autoFB5595FD_var = UnitGroupUnitFromEnd(autoFB5595FD_g, autoFB5595FD_u);
        if (autoFB5595FD_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFB5595FD_var, false);
    }
    SoundStop(gv_movingPlatform.lv_movementSoundC, true);
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == false)) {
        SoundPlayForPlayer(SoundLink("PMoebius01_PlatformMovementStop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    Wait(0.0625, c_timeGame);
    auto073D1419_g = lv_friendlyGroundUnits;
    auto073D1419_u = UnitGroupCount(auto073D1419_g, c_unitCountAll);
    for (;; auto073D1419_u -= 1) {
        auto073D1419_var = UnitGroupUnitFromEnd(auto073D1419_g, auto073D1419_u);
        if (auto073D1419_var == null) { break; }
        UnitIssueOrder(auto073D1419_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        if ((UnitGetType(auto073D1419_var) == "Probe")) {
            UnitAbilityEnable(auto073D1419_var, "ProtossBuild", true);
        }

        if ((UnitGetType(auto073D1419_var) == "Drone")) {
            UnitAbilityEnable(auto073D1419_var, "ZergBuild", true);
        }

        if ((UnitGetType(auto073D1419_var) == "SCV")) {
            UnitAbilityEnable(auto073D1419_var, "TerranBuild", true);
            UnitIssueOrder(auto073D1419_var, Order(AbilityCommand("TerranBuild", 30)), c_orderQueueReplace);
        }

    }
    auto2E139C69_g = lv_enemyGroundUnits;
    auto2E139C69_u = UnitGroupCount(auto2E139C69_g, c_unitCountAll);
    for (;; auto2E139C69_u -= 1) {
        auto2E139C69_var = UnitGroupUnitFromEnd(auto2E139C69_g, auto2E139C69_u);
        if (auto2E139C69_var == null) { break; }
        UnitIssueOrder(auto2E139C69_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    gv_movingPlatform.lv_currentLocationC = lp_nextLocation;
    RegionSetCenter(RegionFromId(1), gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_centerPoint);
    gv_movingPlatform.lv_inTransitC = false;
    autoAD478501_val = lp_direction;
    if (autoAD478501_val == 0.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal RightStop");
    }
    else if (autoAD478501_val == 90.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal UpStop");
    }
    else if (autoAD478501_val == 180.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal LeftStop");
    }
    else if (autoAD478501_val == 270.0) {
        libNtve_gf_SendActorMessageToUnit(gv_movingPlatform.lv_platformPlateC, "Signal DownStop");
    }
    else {
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStop", "Shadow_Platform_Ramp", RegionFromId(1));
    Wait(1.75, c_timeGame);
    TriggerExecute(gt_EnableButtons, true, false);
    auto46789C2B_g = lv_enemyGroundUnits;
    auto46789C2B_u = UnitGroupCount(auto46789C2B_g, c_unitCountAll);
    for (;; auto46789C2B_u -= 1) {
        auto46789C2B_var = UnitGroupUnitFromEnd(auto46789C2B_g, auto46789C2B_u);
        if (auto46789C2B_var == null) { break; }
        AISetUnitScriptControlled(auto46789C2B_var, false);
        AISetUnitSuicide(auto46789C2B_var, true);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_CoreDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_activeUnit;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "PlatformPowerCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_activeUnit = EventUnit();
    gf_CoreDestroyed(lv_activeUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CoreDestroyed_Init () {
    gt_CoreDestroyed = TriggerCreate("gt_CoreDestroyed_Func");
    TriggerAddEventUnitDied(gt_CoreDestroyed, UnitRefFromUnit(UnitFromId(109)));
    TriggerAddEventUnitDied(gt_CoreDestroyed, UnitRefFromUnit(UnitFromId(275)));
    TriggerAddEventUnitDied(gt_CoreDestroyed, UnitRefFromUnit(UnitFromId(276)));
    TriggerAddEventUnitDied(gt_CoreDestroyed, UnitRefFromUnit(UnitFromId(186849208)));
    TriggerAddEventUnitDied(gt_CoreDestroyed, UnitRefFromUnit(UnitFromId(1170760595)));
    TriggerAddEventUnitDied(gt_CoreDestroyed, UnitRefFromUnit(UnitFromId(319769329)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_CoreDestroyedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_powerCoresDestroyed_LOCAL;

    // Automatic Variable Declarations
    int autoAB483546_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_powerCoresDestroyed_LOCAL = gv_coresDestroyed;
    TriggerQueueEnter();
    if ((lv_powerCoresDestroyed_LOCAL != gv_coresDestroyed)) {
        return true;
    }

    autoAB483546_val = gv_coresDestroyed;
    if (autoAB483546_val == 1) {
    }
    else if (autoAB483546_val == 2) {
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CoreDestroyedQ_Init () {
    gt_CoreDestroyedQ = TriggerCreate("gt_CoreDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Shields 3
//--------------------------------------------------------------------------------------------------
bool gt_CoreShields3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_i3;
    int lv_i4;

    // Automatic Variable Declarations
    const int auto540EF34C_ae = 3;
    const int auto540EF34C_ai = 1;

    // Variable Initialization
    lv_i3 = 1;
    lv_i4 = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ShieldChange, true);
    gv_previousShield = gv_currentShield;
    if ((UnitIsAlive(gv_powerCores[1]) == false)) {
        lv_i3 = 2;
    }

    if ((UnitIsAlive(gv_powerCores[3]) == false)) {
        lv_i4 = 2;
    }

    gv_currentShield = RandomInt(lv_i3, lv_i4);
    if ((UnitIsAlive(gv_powerCores[2]) == false) && (gv_currentShield == 2)) {
        gv_currentShield = 3;
    }

    libNtve_gf_ShowHideUnit(gv_powerCoreShields[gv_previousShield], false);
    libNtve_gf_MakeUnitInvulnerable(gv_powerCores[gv_previousShield], false);
    libNtve_gf_ShowHideUnit(gv_powerCoreShields[gv_currentShield], true);
    libNtve_gf_MakeUnitInvulnerable(gv_powerCores[gv_currentShield], true);
    lv_i = 1;
    for ( ; ( (auto540EF34C_ai >= 0 && lv_i <= auto540EF34C_ae) || (auto540EF34C_ai < 0 && lv_i >= auto540EF34C_ae) ) ; lv_i += auto540EF34C_ai ) {
        PingDestroy(gv_powerCorePings[lv_i]);
        PingDestroy(gv_powerCoreShieldPings[lv_i]);
        if (((libNtve_gf_UnitIsHidden(gv_powerCoreShields[lv_i]) == false) && (UnitIsAlive(gv_powerCores[lv_i]) == true))) {
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, UnitGetPosition(gv_powerCoreShields[lv_i]), StringExternal("Param/Value/DD8CC752"));
            gv_powerCoreShieldPings[lv_i] = PingLastCreated();
        }
        else {
            if ((UnitIsAlive(gv_powerCores[lv_i]) == true)) {
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_powerCores[lv_i]), StringExternal("Param/Value/E24AB2FD"));
                gv_powerCorePings[lv_i] = PingLastCreated();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CoreShields3_Init () {
    gt_CoreShields3 = TriggerCreate("gt_CoreShields3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldChange 3
//--------------------------------------------------------------------------------------------------
bool gt_ShieldChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Fleet23", -1), StringExternal("Param/Value/07F7E9AC"), StringExternal("Param/Value/4675A86E"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    TriggerExecute(gt_CoreShields3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldChange_Init () {
    gt_ShieldChange = TriggerCreate("gt_ShieldChange_Func");
    TriggerEnable(gt_ShieldChange, false);
    TriggerAddEventTimePeriodic(gt_ShieldChange, (1.0*60.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_objectiveTimer, (gv_objectiveTimerDuration * 60.0), false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(gv_objectiveTimer, StringExternal("Param/Value/EC76ACC9"), true, false);
    gv_objectiveTimer3 = TimerWindowLastCreated();
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary232");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    libCOMI_gf_SetObjectiveTimerCampaign("PlaceholderPrimary232", gv_objectiveTimer);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTimerWindow_Init () {
    gt_ObjectiveTimerWindow = TriggerCreate("gt_ObjectiveTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Timer Window 2
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTimerWindow2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopTimer(gv_objectiveTimer);
    TimerStart(gv_objectiveTimer2, (3.0 * 60.0), false, c_timeGame);
    TimerWindowDestroy(gv_objectiveTimer3);
    libCOMI_gf_TimerWindowCreate(gv_objectiveTimer2, StringExternal("Param/Value/651E2FB2"), true, false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary23");
    libCOMI_gf_SetObjectiveTimerCampaign("PlaceholderPrimary23", gv_objectiveTimer2);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTimerWindow2_Init () {
    gt_ObjectiveTimerWindow2 = TriggerCreate("gt_ObjectiveTimerWindow2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Timer
//--------------------------------------------------------------------------------------------------
bool gt_BonusTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_bonusTimer, (gv_objectiveTimerDuration2 * 60.0), false, c_timeGame);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTimer_Init () {
    gt_BonusTimer = TriggerCreate("gt_BonusTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Timer 2
//--------------------------------------------------------------------------------------------------
bool gt_BonusTimer2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_bonusTimer2, (gv_objectiveTimerDuration2 * 60.0), false, c_timeGame);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTimer2_Init () {
    gt_BonusTimer2 = TriggerCreate("gt_BonusTimer2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus
//--------------------------------------------------------------------------------------------------
bool gt_Bonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunBonusatMissionTime(gt_Bonus1, (11.6667 * 60.0));
    gf_RunBonusatMissionTime(gt_Bonus2, (18.8889 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bonus_Init () {
    gt_Bonus = TriggerCreate("gt_Bonus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus 1
//--------------------------------------------------------------------------------------------------
bool gt_Bonus1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    actor[3] lv_actorModel;
    actor[3] lv_actorSound;

    // Automatic Variable Declarations
    const int auto59FCB1F3_ae = 2;
    const int auto59FCB1F3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveTimerDuration3 = 1;
    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction22222", -1), StringExternal("Param/Value/6F886E57"), StringExternal("Param/Value/03210D4C"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    UnitSetState(UnitFromId(600697120), c_unitStateHidden, false);
    UnitSetState(UnitFromId(600697120), c_unitStateInvulnerable, true);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(600697120)), StringExternal("Param/Value/610E608A"));
    gv_wardenPing[3] = PingLastCreated();
    TriggerExecute(gt_BonusTimer, true, false);
    TriggerExecute(gt_ObjectiveDownloadDataCreate, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(21)));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonus", RegionGetCenter(RegionFromId(21)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
    TextExpressionSetToken("Param/Expression/52F5D118", "A", gv_pLAYER_COMMANDER[1]);
    TextExpressionSetToken("Param/Expression/52F5D118", "B", StringExternal("Param/Value/4FAFC778"));
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/52F5D118"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    gv_wardenPing[1] = PingLastCreated();
    libNtve_gf_CreateActorAtPoint("WarpInWardenModel", UnitGetPosition(UnitLastCreated()));
    lv_actorModel[1] = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actorModel[1], "AnimPlay Birth Birth");
    libNtve_gf_CreateActorAtPoint("WarpInWardenSound", UnitGetPosition(UnitLastCreated()));
    lv_actorSound[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, gv_pLAYER_02_USER, RegionGetCenter(RegionFromId(20)));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonus", RegionGetCenter(RegionFromId(20)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
    TextExpressionSetToken("Param/Expression/450A1CA1", "A", gv_pLAYER_COMMANDER[2]);
    TextExpressionSetToken("Param/Expression/450A1CA1", "B", StringExternal("Param/Value/13A23026"));
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/450A1CA1"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    gv_wardenPing[2] = PingLastCreated();
    libNtve_gf_CreateActorAtPoint("WarpInWardenModel", UnitGetPosition(UnitLastCreated()));
    lv_actorModel[2] = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actorModel[2], "AnimPlay Birth Birth");
    libNtve_gf_CreateActorAtPoint("WarpInWardenSound", UnitGetPosition(UnitLastCreated()));
    lv_actorSound[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    Wait(5.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto59FCB1F3_ai >= 0 && lv_i <= auto59FCB1F3_ae) || (auto59FCB1F3_ai < 0 && lv_i >= auto59FCB1F3_ae) ) ; lv_i += auto59FCB1F3_ai ) {
        ActorSend(lv_actorModel[lv_i], "Destroy");
        ActorSend(lv_actorSound[lv_i], "Destroy");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bonus1_Init () {
    gt_Bonus1 = TriggerCreate("gt_Bonus1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus 2
//--------------------------------------------------------------------------------------------------
bool gt_Bonus2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    actor[3] lv_actorModel;
    actor[3] lv_actorSound;

    // Automatic Variable Declarations
    const int autoCB14CA78_ae = 2;
    const int autoCB14CA78_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveTimerDuration3 = 2;
    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction222223", -1), StringExternal("Param/Value/F58246D8"), StringExternal("Param/Value/3E9514E1"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    UnitSetState(UnitFromId(1370276555), c_unitStateHidden, false);
    UnitSetState(UnitFromId(1370276555), c_unitStateInvulnerable, true);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(1370276555)), StringExternal("Param/Value/ED6FDEAB"));
    gv_wardenPing[3] = PingLastCreated();
    TriggerExecute(gt_BonusTimer2, true, false);
    TriggerExecute(gt_ObjectiveDownloadDataCreate, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(21)));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonus", RegionGetCenter(RegionFromId(21)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
    TextExpressionSetToken("Param/Expression/5523750C", "A", gv_pLAYER_COMMANDER[1]);
    TextExpressionSetToken("Param/Expression/5523750C", "B", StringExternal("Param/Value/FB29A5A6"));
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/5523750C"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    gv_wardenPing[1] = PingLastCreated();
    libNtve_gf_CreateActorAtPoint("WarpInWardenModel", UnitGetPosition(UnitLastCreated()));
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimPlay Birth Birth");
    lv_actorModel[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("WarpInWardenSound", UnitGetPosition(UnitLastCreated()));
    lv_actorSound[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RoguePurifierSupportDroneA", 0, gv_pLAYER_02_USER, RegionGetCenter(RegionFromId(20)));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBonus", RegionGetCenter(RegionFromId(20)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
    TextExpressionSetToken("Param/Expression/C6C98364", "A", gv_pLAYER_COMMANDER[2]);
    TextExpressionSetToken("Param/Expression/C6C98364", "B", StringExternal("Param/Value/E96920E5"));
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/C6C98364"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    gv_wardenPing[2] = PingLastCreated();
    libNtve_gf_CreateActorAtPoint("WarpInWardenModel", UnitGetPosition(UnitLastCreated()));
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimPlay Birth Birth");
    lv_actorModel[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("WarpInWardenSound", UnitGetPosition(UnitLastCreated()));
    lv_actorSound[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    Wait(5.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoCB14CA78_ai >= 0 && lv_i <= autoCB14CA78_ae) || (autoCB14CA78_ai < 0 && lv_i >= autoCB14CA78_ae) ) ; lv_i += autoCB14CA78_ai ) {
        ActorSend(lv_actorModel[lv_i], "Destroy");
        ActorSend(lv_actorSound[lv_i], "Destroy");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bonus2_Init () {
    gt_Bonus2 = TriggerCreate("gt_Bonus2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warden
//--------------------------------------------------------------------------------------------------
bool gt_Warden_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "RoguePurifierSupportDroneA") && ((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    Wait(5.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_unit, "SetOpacity 1.000000");
    libNtve_gf_SendActorMessageToUnit(lv_unit, "AnimPlay Stand Stand");
    libNtve_gf_MakeUnitInvulnerable(lv_unit, false);
    UnitAbilityEnable(lv_unit, "attack", true);
    UnitAbilityEnable(lv_unit, "move", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Warden_Init () {
    gt_Warden = TriggerCreate("gt_Warden_Func");
    TriggerAddEventUnitRegion(gt_Warden, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_Warden, null, RegionFromId(21), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WardenDies
//--------------------------------------------------------------------------------------------------
bool gt_WardenDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoE4326E58_g;
    int autoE4326E58_u;
    unit autoE4326E58_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "RoguePurifierSupportDroneA") && ((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wardenPing[1]);
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[2]);
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[3]);
    TriggerEnable(TriggerGetCurrent(), false);
    autoE4326E58_g = UnitGroup("RoguePurifierSupportDroneA", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE4326E58_u = UnitGroupCount(autoE4326E58_g, c_unitCountAll);
    for (;; autoE4326E58_u -= 1) {
        autoE4326E58_var = UnitGroupUnitFromEnd(autoE4326E58_g, autoE4326E58_u);
        if (autoE4326E58_var == null) { break; }
        UnitKill(autoE4326E58_var);
    }
    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction222222", -1), StringExternal("Param/Value/86C0AEE2"), StringExternal("Param/Value/D7D810EF"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    TriggerExecute(gt_ObjectiveDownloadDataFailed, true, false);
    TriggerStop(gt_Bonus);
    TriggerEnable(gt_Bonus, false);
    TriggerEnable(gt_Bonus1, false);
    TriggerEnable(gt_Bonus2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WardenDies_Init () {
    gt_WardenDies = TriggerCreate("gt_WardenDies_Func");
    TriggerAddEventTimer(gt_WardenDies, gv_bonusTimer);
    TriggerAddEventTimer(gt_WardenDies, gv_bonusTimer2);
    TriggerAddEventUnitDied(gt_WardenDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter = 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(24);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(24);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(libCOMI_gf_HumanPlayers(), true);
    libCOMI_gf_EnableDisableCoopAIWavePings(true);
    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nextLocation;
    fixed lv_direction;
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!(((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(30.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_nextLocation;
    fixed lv_direction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(30.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_nextLocation;
    fixed lv_direction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    if (((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(7), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(14), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
        lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
        lv_direction = 270.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        Wait(30.0, c_timeGame);
        lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
        lv_direction = 90.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
        lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
        lv_direction = 90.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
    }
    else {
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(38));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(38));
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        Wait(20.0, c_timeGame);
        lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
        lv_direction = 90.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;
    int lv_nextLocation;
    fixed lv_direction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(30.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    int lv_nextLocation;
    fixed lv_direction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    if (((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(7), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(14), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
        lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
        lv_direction = 270.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        Wait(30.0, c_timeGame);
        lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
        lv_direction = 90.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
        lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
        lv_direction = 90.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
    }
    else {
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(38));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(38));
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        Wait(20.0, c_timeGame);
        lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
        lv_direction = 90.0;
        gf_MovePlatformA(lv_nextLocation, lv_direction);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_nextLocation;
    fixed lv_direction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(30.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_nextLocation;
    fixed lv_direction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(30.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Fleet
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveFleet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_heroic;
    int lv_big;
    int lv_hybrid;
    int lv_nextLocation;
    fixed lv_direction;

    // Automatic Variable Declarations
    unitgroup auto61550BE2_g;
    int auto61550BE2_u;
    unit auto61550BE2_var;
    unitgroup autoCB102F58_g;
    int autoCB102F58_u;
    unit autoCB102F58_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_heroic = 1;
    lv_big = 3;
    lv_hybrid = 4;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveTimerWindow2, true, false);
    if ((GameAttributeGameValue("2") == "0001")) {
        lv_heroic = 1;
        lv_hybrid = 2;
        lv_big = 2;
    }

    if ((GameAttributeGameValue("2") == "0002")) {
        lv_heroic = 1;
        lv_hybrid = 4;
        lv_big = 3;
    }

    if ((GameAttributeGameValue("2") == "0003")) {
        lv_heroic = 2;
        lv_hybrid = 6;
        lv_big = 4;
    }

    if ((GameAttributeGameValue("2") == "0004")) {
        lv_heroic = 2;
        lv_hybrid = 8;
        lv_big = 6;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(194));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(194));
    libNtve_gf_UnitCreateFacingPoint(lv_heroic, "Leviathan", 0, gv_pLAYER_03_ENEMY, PointFromId(1639784204), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(lv_hybrid, "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(1639784204), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(lv_big, "BroodLord", 0, gv_pLAYER_03_ENEMY, PointFromId(1639784204), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    TriggerEnable(gt_EnemyAttackingQ, false);
    libNtve_gf_UnitCreateFacingPoint(lv_heroic, "Mothership", 0, gv_pLAYER_03_ENEMY, PointFromId(542404936), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(lv_hybrid, "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(542404936), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(lv_big, "Carrier", 0, gv_pLAYER_03_ENEMY, PointFromId(542404936), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    libNtve_gf_UnitCreateFacingPoint(lv_heroic, "Loki", 0, gv_pLAYER_03_ENEMY, PointFromId(1632449444), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(lv_hybrid, "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(1632449444), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libNtve_gf_UnitCreateFacingPoint(lv_big, "Battlecruiser", 0, gv_pLAYER_03_ENEMY, PointFromId(1632449444), UnitGetPosition(UnitFromId(3184994)));
    AIAttackWaveUseUnit(gv_pLAYER_03_ENEMY, UnitLastCreated());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    Wait(20.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[1].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkDown;
    lv_direction = 270.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(13));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(13));
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    auto61550BE2_g = UnitGroup(null, gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61550BE2_u = UnitGroupCount(auto61550BE2_g, c_unitCountAll);
    for (;; auto61550BE2_u -= 1) {
        auto61550BE2_var = UnitGroupUnitFromEnd(auto61550BE2_g, auto61550BE2_u);
        if (auto61550BE2_var == null) { break; }
        UnitIssueOrder(auto61550BE2_var, OrderTargetingPoint(AbilityCommand("attack", 1), PointFromId(1311074677)), c_orderQueueAddToFront);
    }
    autoCB102F58_g = UnitGroup(null, gv_pLAYER_04_ENEMY, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCB102F58_u = UnitGroupCount(autoCB102F58_g, c_unitCountAll);
    for (;; autoCB102F58_u -= 1) {
        autoCB102F58_var = UnitGroupUnitFromEnd(autoCB102F58_g, autoCB102F58_u);
        if (autoCB102F58_var == null) { break; }
        UnitIssueOrder(autoCB102F58_var, OrderTargetingPoint(AbilityCommand("attack", 1), PointFromId(1311074677)), c_orderQueueAddToFront);
    }
    Wait(30.0, c_timeGame);
    lv_nextLocation = gv_platformLocationsAmon[3].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    lv_nextLocation = gv_platformLocationsAmon[2].lv_linkUp;
    lv_direction = 90.0;
    gf_MovePlatformA(lv_nextLocation, lv_direction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveFleet_Init () {
    gt_AttackWaveFleet = TriggerCreate("gt_AttackWaveFleet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Download Data - Fail (Time)
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadDataFailTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_WardenDies, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadDataFailTime_Init () {
    gt_ObjectiveDownloadDataFailTime = TriggerCreate("gt_ObjectiveDownloadDataFailTime_Func");
    TriggerAddEventTimer(gt_ObjectiveDownloadDataFailTime, gv_bonusTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus 1 Complete
//--------------------------------------------------------------------------------------------------
bool gt_Bonus1Complete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Automatic Variable Declarations
    unitgroup auto30D17767_g;
    int auto30D17767_u;
    unit auto30D17767_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_objectiveTimerDuration3 == 1) && (TriggerIsEnabled(TriggerGetCurrent()) == true) && (libCOMI_gf_GameIsOver() == false) && (UnitCount("RoguePurifierSupportDroneA", c_playerAny, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto30D17767_g = UnitGroup("RoguePurifierSupportDroneA", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30D17767_u = UnitGroupCount(auto30D17767_g, c_unitCountAll);
    for (;; auto30D17767_u -= 1) {
        auto30D17767_var = UnitGroupUnitFromEnd(auto30D17767_g, auto30D17767_u);
        if (auto30D17767_var == null) { break; }
        UnitSetOwner(auto30D17767_var, 5, true);
        libNtve_gf_CreateActorAtPoint("WarpInWardenModel", UnitGetPosition(auto30D17767_var));
        libNtve_gf_CreateActorAtPoint("WarpInWardenSound", UnitGetPosition(auto30D17767_var));
        libNtve_gf_MakeUnitInvulnerable(auto30D17767_var, true);
        UnitAbilityEnable(auto30D17767_var, "attack", false);
        UnitAbilityEnable(auto30D17767_var, "move", false);
        libNtve_gf_SendActorMessageToUnit(auto30D17767_var, "SetOpacity");
        UnitRemove(auto30D17767_var);
        ActorSend(libNtve_gf_ActorLastCreated(), "Destroy");
    }
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[1]);
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[2]);
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[3]);
    gv_dataDownloaded += 1;
    TriggerExecute(gt_ObjectiveDestroyPowerCoresUpdate2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bonus1Complete_Init () {
    gt_Bonus1Complete = TriggerCreate("gt_Bonus1Complete_Func");
    TriggerAddEventTimePeriodic(gt_Bonus1Complete, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus 2 Complete
//--------------------------------------------------------------------------------------------------
bool gt_Bonus2Complete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Automatic Variable Declarations
    unitgroup auto3CA8D816_g;
    int auto3CA8D816_u;
    unit auto3CA8D816_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_objectiveTimerDuration3 == 2))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitCount("RoguePurifierSupportDroneA", c_playerAny, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3CA8D816_g = UnitGroup("RoguePurifierSupportDroneA", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CA8D816_u = UnitGroupCount(auto3CA8D816_g, c_unitCountAll);
    for (;; auto3CA8D816_u -= 1) {
        auto3CA8D816_var = UnitGroupUnitFromEnd(auto3CA8D816_g, auto3CA8D816_u);
        if (auto3CA8D816_var == null) { break; }
        UnitSetOwner(auto3CA8D816_var, 5, true);
        libNtve_gf_CreateActorAtPoint("WarpInWardenModel", UnitGetPosition(auto3CA8D816_var));
        libNtve_gf_CreateActorAtPoint("WarpInWardenSound", UnitGetPosition(auto3CA8D816_var));
        libNtve_gf_MakeUnitInvulnerable(auto3CA8D816_var, true);
        UnitAbilityEnable(auto3CA8D816_var, "attack", false);
        UnitAbilityEnable(auto3CA8D816_var, "move", false);
        libNtve_gf_SendActorMessageToUnit(auto3CA8D816_var, "SetOpacity");
        UnitRemove(auto3CA8D816_var);
        ActorSend(libNtve_gf_ActorLastCreated(), "Destroy");
    }
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[1]);
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[2]);
    libCOMI_gf_DestroyPingCoop(gv_wardenPing[3]);
    gv_dataDownloaded += 1;
    TriggerExecute(gt_ObjectiveDestroyPowerCoresUpdate2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bonus2Complete_Init () {
    gt_Bonus2Complete = TriggerCreate("gt_Bonus2Complete_Func");
    TriggerAddEventTimePeriodic(gt_Bonus2Complete, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("PhoenixPurifierPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink("TP_Introduction2", -1), 0.0, c_transmissionDurationAdd, true);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/4F2D2051"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(RegionGetCenter(RegionFromName("Power Core 1")), 1.5);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventTimer(gt_DefeatPrimaryObjectiveFailed, gv_objectiveTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Fleet2", -1), StringExternal("Param/Value/B6E3E8D8"), StringExternal("Param/Value/86745D12"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/C88268CD"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_victoryCompletePan, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
    TriggerAddEventTimer(gt_VictoryPrimaryObjectiveComplete, gv_objectiveTimer2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Init
//--------------------------------------------------------------------------------------------------
bool gt_PlatformInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoC51E897F_ae = 8;
    const int autoC51E897F_ai = 1;
    const int autoF035AAD1_ae = 7;
    const int autoF035AAD1_ai = 1;
    const int auto7496E1FE_ae = 3;
    const int auto7496E1FE_ai = 1;
    unitgroup auto6449BD5B_g;
    int auto6449BD5B_u;
    unit auto6449BD5B_var;
    unitgroup auto2C41E2F7_g;
    int auto2C41E2F7_u;
    unit auto2C41E2F7_var;
    unitgroup auto701FACB6_g;
    int auto701FACB6_u;
    unit auto701FACB6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_movingPlatform.lv_platformPlateA = UnitFromId(312309143);
    gv_movingPlatform.lv_platformPlateB = UnitFromId(1420903224);
    gv_movingPlatform.lv_platformPlateC = UnitFromId(3);
    gv_platformLocationsB[1].lv_centerPoint = PointFromId(1622582061);
    gv_platformLocationsB[1].lv_linkUp = 2;
    gv_platformLocationsB[1].lv_linkRight = 4;
    gv_platformLocationsB[2].lv_centerPoint = PointFromId(215859283);
    gv_platformLocationsB[2].lv_linkDown = 1;
    gv_platformLocationsB[2].lv_linkRight = 3;
    gv_platformLocationsB[3].lv_centerPoint = PointFromId(941618441);
    gv_platformLocationsB[3].lv_linkDown = 4;
    gv_platformLocationsB[3].lv_linkUp = 5;
    gv_platformLocationsB[3].lv_linkLeft = 2;
    gv_platformLocationsB[4].lv_centerPoint = PointFromId(521137186);
    gv_platformLocationsB[4].lv_linkLeft = 1;
    gv_platformLocationsB[4].lv_linkUp = 3;
    gv_platformLocationsB[5].lv_centerPoint = PointFromId(1047512975);
    gv_platformLocationsB[5].lv_linkDown = 3;
    gv_platformLocationsB[5].lv_linkLeft = 6;
    gv_platformLocationsB[6].lv_centerPoint = PointFromId(293);
    gv_platformLocationsB[6].lv_linkUp = 7;
    gv_platformLocationsB[6].lv_linkRight = 5;
    gv_platformLocationsB[7].lv_centerPoint = PointFromId(54);
    gv_platformLocationsB[7].lv_linkLeft = 8;
    gv_platformLocationsB[7].lv_linkDown = 6;
    gv_platformLocationsB[8].lv_centerPoint = PointFromId(1086676905);
    gv_platformLocationsB[8].lv_linkRight = 7;
    gv_platformLocationsC[1].lv_centerPoint = PointFromId(1444329685);
    gv_platformLocationsC[1].lv_linkUp = 2;
    gv_platformLocationsC[2].lv_centerPoint = PointFromId(55);
    gv_platformLocationsC[2].lv_linkLeft = 4;
    gv_platformLocationsC[2].lv_linkDown = 1;
    gv_platformLocationsC[2].lv_linkUp = 5;
    gv_platformLocationsC[2].lv_linkRight = 3;
    gv_platformLocationsC[3].lv_centerPoint = PointFromId(295);
    gv_platformLocationsC[3].lv_linkLeft = 2;
    gv_platformLocationsC[4].lv_centerPoint = PointFromId(1576707316);
    gv_platformLocationsC[4].lv_linkRight = 2;
    gv_platformLocationsC[5].lv_centerPoint = PointFromId(1683417818);
    gv_platformLocationsC[5].lv_linkDown = 2;
    gv_platformLocationsC[5].lv_linkUp = 6;
    gv_platformLocationsC[6].lv_centerPoint = PointFromId(160);
    gv_platformLocationsC[6].lv_linkDown = 5;
    gv_platformLocationsC[6].lv_linkUp = 7;
    gv_platformLocationsC[7].lv_centerPoint = PointFromId(193);
    gv_platformLocationsC[7].lv_linkDown = 6;
    gv_platformLocationsAmon[1].lv_centerPoint = PointFromId(194);
    gv_platformLocationsAmon[1].lv_linkDown = 2;
    gv_platformLocationsAmon[2].lv_centerPoint = PointFromId(38);
    gv_platformLocationsAmon[2].lv_linkDown = 3;
    gv_platformLocationsAmon[2].lv_linkUp = 1;
    gv_platformLocationsAmon[3].lv_centerPoint = PointFromId(13);
    gv_platformLocationsAmon[3].lv_linkUp = 2;
    lv_i = 1;
    for ( ; ( (autoC51E897F_ai >= 0 && lv_i <= autoC51E897F_ae) || (autoC51E897F_ai < 0 && lv_i >= autoC51E897F_ae) ) ; lv_i += autoC51E897F_ai ) {
        UnitGroupAddUnitGroup(gv_platformLocationsB[lv_i].lv_pathingBlockers, UnitGroup("Blocker16x16", 0, RegionCircle(gv_platformLocationsB[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_platformLocationsB[lv_i].lv_pathingBlockers, UnitGroup("Blocker4x4", 0, RegionCircle(gv_platformLocationsB[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_platformLocationsB[lv_i].lv_pathingBlockers, UnitGroup("PathingBlocker2x2", 0, RegionCircle(gv_platformLocationsB[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_i = 1;
    for ( ; ( (autoF035AAD1_ai >= 0 && lv_i <= autoF035AAD1_ae) || (autoF035AAD1_ai < 0 && lv_i >= autoF035AAD1_ae) ) ; lv_i += autoF035AAD1_ai ) {
        UnitGroupAddUnitGroup(gv_platformLocationsC[lv_i].lv_pathingBlockers, UnitGroup("Blocker16x16", 0, RegionCircle(gv_platformLocationsC[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_platformLocationsC[lv_i].lv_pathingBlockers, UnitGroup("Blocker4x4", 0, RegionCircle(gv_platformLocationsC[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_platformLocationsC[lv_i].lv_pathingBlockers, UnitGroup("PathingBlocker2x2", 0, RegionCircle(gv_platformLocationsC[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    lv_i = 1;
    for ( ; ( (auto7496E1FE_ai >= 0 && lv_i <= auto7496E1FE_ae) || (auto7496E1FE_ai < 0 && lv_i >= auto7496E1FE_ae) ) ; lv_i += auto7496E1FE_ai ) {
        UnitGroupAddUnitGroup(gv_platformLocationsAmon[lv_i].lv_pathingBlockers, UnitGroup("Blocker16x16", 0, RegionCircle(gv_platformLocationsAmon[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_platformLocationsAmon[lv_i].lv_pathingBlockers, UnitGroup("Blocker4x4", 0, RegionCircle(gv_platformLocationsAmon[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(gv_platformLocationsAmon[lv_i].lv_pathingBlockers, UnitGroup("PathingBlocker2x2", 0, RegionCircle(gv_platformLocationsAmon[lv_i].lv_centerPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    auto6449BD5B_g = gv_platformLocationsB[1].lv_pathingBlockers;
    auto6449BD5B_u = UnitGroupCount(auto6449BD5B_g, c_unitCountAll);
    for (;; auto6449BD5B_u -= 1) {
        auto6449BD5B_var = UnitGroupUnitFromEnd(auto6449BD5B_g, auto6449BD5B_u);
        if (auto6449BD5B_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6449BD5B_var, false);
    }
    auto2C41E2F7_g = gv_platformLocationsC[1].lv_pathingBlockers;
    auto2C41E2F7_u = UnitGroupCount(auto2C41E2F7_g, c_unitCountAll);
    for (;; auto2C41E2F7_u -= 1) {
        auto2C41E2F7_var = UnitGroupUnitFromEnd(auto2C41E2F7_g, auto2C41E2F7_u);
        if (auto2C41E2F7_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2C41E2F7_var, false);
    }
    auto701FACB6_g = gv_platformLocationsAmon[1].lv_pathingBlockers;
    auto701FACB6_u = UnitGroupCount(auto701FACB6_g, c_unitCountAll);
    for (;; auto701FACB6_u -= 1) {
        auto701FACB6_var = UnitGroupUnitFromEnd(auto701FACB6_g, auto701FACB6_u);
        if (auto701FACB6_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto701FACB6_var, false);
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStop", "Shadow_Platform_Ramp", RegionFromId(1));
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStop", "Shadow_Platform_Ramp", RegionFromId(19));
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal UpStop", "Shadow_Platform_Ramp", RegionFromId(15));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", PointFromId(1444329685), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 0.0);
    TextExpressionSetToken("Param/Expression/FD2CCB29", "A", gv_pLAYER_COMMANDER[2]);
    TextExpressionSetToken("Param/Expression/FD2CCB29", "B", StringExternal("Param/Value/4DBA7A89"));
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/FD2CCB29"));
    PingSetScale(PingLastCreated(), 0.3);
    PingSetUnit(PingLastCreated(), gv_movingPlatform.lv_platformPlateC);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", PointFromId(1622582061), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 0.0);
    TextExpressionSetToken("Param/Expression/30D0979C", "A", gv_pLAYER_COMMANDER[1]);
    TextExpressionSetToken("Param/Expression/30D0979C", "B", StringExternal("Param/Value/F9110742"));
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/30D0979C"));
    PingSetScale(PingLastCreated(), 0.3);
    PingSetUnit(PingLastCreated(), gv_movingPlatform.lv_platformPlateB);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingSquare", PointFromId(194), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_03_ENEMY, false)), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/92FECDE3"));
    PingSetScale(PingLastCreated(), 0.3);
    PingSetUnit(PingLastCreated(), UnitFromId(312309143));
    TriggerExecute(gt_DisableAllButtons, true, false);
    TriggerExecute(gt_DisableAllButtons2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformInit_Init () {
    gt_PlatformInit = TriggerCreate("gt_PlatformInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platforrm Dialog Setup
//--------------------------------------------------------------------------------------------------
bool gt_PlatforrmDialogSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(410, 120, c_anchorTopRight, 50, 300, false);
    gv_movingPlatform.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_movingPlatform.lv_dialog, 80, 80, c_anchorTopLeft, 29, 23, StringExternal("Param/Value/C24AD3DA"), StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normaloverpressedover.dds");
    gv_movingPlatform.lv_pingButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_movingPlatform.lv_pingButton, "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_movingPlatform.lv_pingButton, c_triggerImageTypeNineSlice, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_movingPlatform.lv_dialog, 60, 60, c_anchorTopLeft, 38, 33, StringToText(""), "Assets\\Textures\\aicommand_customability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    gv_movingPlatform.lv_pingIcon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_movingPlatform.lv_dialog, 80, 80, c_anchorTopLeft, 100, 23, StringExternal("Param/Value/65E28230"), StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normaloverpressedover.dds");
    gv_movingPlatform.lv_leftButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_movingPlatform.lv_leftButton, "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_movingPlatform.lv_leftButton, c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetEnabled(gv_movingPlatform.lv_leftButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_leftButton, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_movingPlatform.lv_leftButton, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_movingPlatform.lv_dialog, 60, 60, c_anchorTopLeft, 109, 33, StringToText(""), "Assets\\Textures\\aicommand_scout1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    gv_movingPlatform.lv_leftIcon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(gv_movingPlatform.lv_leftIcon, 180, PlayerGroupAll());
    DialogControlFadeTransparency(gv_movingPlatform.lv_leftIcon, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemButton(gv_movingPlatform.lv_dialog, 80, 80, c_anchorTopLeft, 170, 23, StringExternal("Param/Value/00C778D9"), StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normaloverpressedover.dds");
    gv_movingPlatform.lv_downButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_movingPlatform.lv_downButton, "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_movingPlatform.lv_downButton, c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetEnabled(gv_movingPlatform.lv_downButton, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_downButton, true, PlayerGroupAll());
    DialogControlFadeTransparency(gv_movingPlatform.lv_downButton, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_movingPlatform.lv_dialog, 60, 60, c_anchorTopLeft, 180, 33, StringToText(""), "Assets\\Textures\\aicommand_scout1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    gv_movingPlatform.lv_downIcon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(gv_movingPlatform.lv_downIcon, 90, PlayerGroupAll());
    DialogControlFadeTransparency(gv_movingPlatform.lv_downIcon, PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemButton(gv_movingPlatform.lv_dialog, 80, 80, c_anchorTopLeft, 241, 23, StringExternal("Param/Value/390F85F3"), StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normaloverpressedover.dds");
    gv_movingPlatform.lv_upButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_movingPlatform.lv_upButton, "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_movingPlatform.lv_upButton, c_triggerImageTypeNineSlice, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_movingPlatform.lv_dialog, 60, 60, c_anchorTopLeft, 250, 33, StringToText(""), "Assets\\Textures\\aicommand_scout1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    gv_movingPlatform.lv_upIcon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(gv_movingPlatform.lv_upIcon, 270, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_movingPlatform.lv_dialog, 80, 80, c_anchorTopLeft, 311, 23, StringExternal("Param/Value/B8916A75"), StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normaloverpressedover.dds");
    gv_movingPlatform.lv_rightButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_movingPlatform.lv_rightButton, "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_movingPlatform.lv_rightButton, c_triggerImageTypeNineSlice, PlayerGroupAll());
    DialogControlSetEnabled(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(2), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_rightButton, true, PlayerGroupSingle(2));
    DialogControlFadeTransparency(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(2), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_movingPlatform.lv_dialog, 60, 60, c_anchorTopLeft, 320, 33, StringToText(""), "Assets\\Textures\\aicommand_scout1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    gv_movingPlatform.lv_rightIcon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(gv_movingPlatform.lv_rightIcon, 0, PlayerGroupAll());
    DialogControlFadeTransparency(gv_movingPlatform.lv_rightIcon, PlayerGroupSingle(2), 0.0, 50.0);
    DialogSetVisible(gv_movingPlatform.lv_dialog, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("PMoebius01_RevealButtons", -1), c_maxPlayers, PlayerGroupAll(), 90.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatforrmDialogSetup_Init () {
    gt_PlatforrmDialogSetup = TriggerCreate("gt_PlatforrmDialogSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_PlatformButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nextLocation;
    fixed lv_direction;
    unitgroup lv_probeGroup;
    fixed lv_angleIncrement;
    int lv_i;
    unit lv_currentProbe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_probeGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_movingPlatform.lv_pingButton)) {
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(194), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(38), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(13), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1622582061), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(215859283), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(941618441), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(521137186), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1047512975), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(293), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(54), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1086676905), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1444329685), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(55), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(295), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1576707316), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1683417818), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(160), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(193), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
    }
    else {
        if (((gv_movingPlatform.lv_inTransitB == false))) {
            if ((EventDialogControl() == gv_movingPlatform.lv_leftButton)) {
                lv_nextLocation = gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkLeft;
                lv_direction = 180.0;
            }
            else {
                if ((EventDialogControl() == gv_movingPlatform.lv_downButton)) {
                    lv_nextLocation = gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkDown;
                    lv_direction = 270.0;
                }
                else {
                    if ((EventDialogControl() == gv_movingPlatform.lv_upButton)) {
                        lv_nextLocation = gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkUp;
                        lv_direction = 90.0;
                    }
                    else {
                        if ((EventDialogControl() == gv_movingPlatform.lv_rightButton)) {
                            lv_nextLocation = gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkRight;
                            lv_direction = 0.0;
                        }
                        else {
                            return true;
                        }
                    }
                }
            }
            if ((lv_nextLocation != 0)) {
                gf_MovePlatformB(lv_nextLocation, lv_direction);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformButtonPressed_Init () {
    gt_PlatformButtonPressed = TriggerCreate("gt_PlatformButtonPressed_Func");
    TriggerAddEventDialogControl(gt_PlatformButtonPressed, gv_pLAYER_01_USER, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Button Pressed 2
//--------------------------------------------------------------------------------------------------
bool gt_PlatformButtonPressed2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nextLocation;
    fixed lv_direction;
    unitgroup lv_probeGroup;
    fixed lv_angleIncrement;
    int lv_i;
    unit lv_currentProbe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_probeGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_movingPlatform.lv_pingButton)) {
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(194), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(38), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(13), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1622582061), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(215859283), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(941618441), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(521137186), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1047512975), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(293), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(54), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1086676905), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_01_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1444329685), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(55), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(295), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1576707316), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(1683417818), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(160), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
        libCOMI_gf_CreatePingCoop(PlayerGroupSingle(EventPlayer()), "PingCircleImportant", PointFromId(193), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_pLAYER_02_USER, false)), 4.0);
        PingSetScale(PingLastCreated(), 0.5);
    }
    else {
        if (((gv_movingPlatform.lv_inTransitC == false))) {
            if ((EventDialogControl() == gv_movingPlatform.lv_leftButton)) {
                lv_nextLocation = gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkLeft;
                lv_direction = 180.0;
            }
            else {
                if ((EventDialogControl() == gv_movingPlatform.lv_downButton)) {
                    lv_nextLocation = gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkDown;
                    lv_direction = 270.0;
                }
                else {
                    if ((EventDialogControl() == gv_movingPlatform.lv_upButton)) {
                        lv_nextLocation = gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkUp;
                        lv_direction = 90.0;
                    }
                    else {
                        if ((EventDialogControl() == gv_movingPlatform.lv_rightButton)) {
                            lv_nextLocation = gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkRight;
                            lv_direction = 0.0;
                        }
                        else {
                            return true;
                        }
                    }
                }
            }
            if ((lv_nextLocation != 0)) {
                gf_MovePlatformC(lv_nextLocation, lv_direction);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformButtonPressed2_Init () {
    gt_PlatformButtonPressed2 = TriggerCreate("gt_PlatformButtonPressed2_Func");
    TriggerAddEventDialogControl(gt_PlatformButtonPressed2, gv_pLAYER_02_USER, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable All Buttons
//--------------------------------------------------------------------------------------------------
bool gt_DisableAllButtons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_leftButton, true, PlayerGroupSingle(gv_pLAYER_01_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_leftIcon, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    DialogControlSetEnabled(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_downButton, true, PlayerGroupSingle(gv_pLAYER_01_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    DialogControlSetEnabled(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_upButton, true, PlayerGroupSingle(gv_pLAYER_01_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    DialogControlSetEnabled(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_rightButton, true, PlayerGroupSingle(gv_pLAYER_01_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableAllButtons_Init () {
    gt_DisableAllButtons = TriggerCreate("gt_DisableAllButtons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable All Buttons 2
//--------------------------------------------------------------------------------------------------
bool gt_DisableAllButtons2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_leftButton, true, PlayerGroupSingle(gv_pLAYER_02_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_leftIcon, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    DialogControlSetEnabled(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_02_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_downButton, true, PlayerGroupSingle(gv_pLAYER_02_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    DialogControlSetEnabled(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_02_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_upButton, true, PlayerGroupSingle(gv_pLAYER_02_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    DialogControlSetEnabled(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_02_USER), false);
    libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_rightButton, true, PlayerGroupSingle(gv_pLAYER_02_USER));
    DialogControlFadeTransparency(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    DialogControlFadeTransparency(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableAllButtons2_Init () {
    gt_DisableAllButtons2 = TriggerCreate("gt_DisableAllButtons2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Buttons
//--------------------------------------------------------------------------------------------------
bool gt_EnableButtons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_movingPlatform.lv_inTransitB == false)) {
        if ((gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkLeft != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_01_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_leftButton, false, PlayerGroupSingle(gv_pLAYER_01_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_leftIcon, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
        }

        if ((gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkDown != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_01_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_downButton, false, PlayerGroupSingle(gv_pLAYER_01_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_downIcon, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
        }

        if ((gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkUp != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_01_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_upButton, false, PlayerGroupSingle(gv_pLAYER_01_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_upIcon, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
        }

        if ((gv_platformLocationsB[gv_movingPlatform.lv_currentLocationB].lv_linkRight != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_01_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_rightButton, false, PlayerGroupSingle(gv_pLAYER_01_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_rightIcon, PlayerGroupSingle(gv_pLAYER_01_USER), 0.0, 0.0);
        }

    }

    if ((gv_movingPlatform.lv_inTransitC == false)) {
        if ((gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkLeft != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_02_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_leftButton, false, PlayerGroupSingle(gv_pLAYER_02_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_leftButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_leftIcon, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
        }

        if ((gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkDown != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_02_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_downButton, false, PlayerGroupSingle(gv_pLAYER_02_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_downButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_downIcon, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
        }

        if ((gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkUp != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_02_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_upButton, false, PlayerGroupSingle(gv_pLAYER_02_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_upButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_upIcon, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
        }

        if ((gv_platformLocationsC[gv_movingPlatform.lv_currentLocationC].lv_linkRight != 0)) {
            DialogControlSetEnabled(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_02_USER), true);
            libNtve_gf_SetDialogItemDesaturated(gv_movingPlatform.lv_rightButton, false, PlayerGroupSingle(gv_pLAYER_02_USER));
            DialogControlFadeTransparency(gv_movingPlatform.lv_rightButton, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
            DialogControlFadeTransparency(gv_movingPlatform.lv_rightIcon, PlayerGroupSingle(gv_pLAYER_02_USER), 0.0, 0.0);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableButtons_Init () {
    gt_EnableButtons = TriggerCreate("gt_EnableButtons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Buttons Q
//--------------------------------------------------------------------------------------------------
bool gt_RevealButtonsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(10.0, c_timeAI);
    TriggerQueueEnter();
    TriggerExecute(gt_PlatforrmDialogSetup, true, false);
    Wait(1.0, c_timeReal);
    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Fleet22", -1), StringExternal("Param/Value/F6AFA30D"), StringExternal("Param/Value/D9EEBD00"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealButtonsQ_Init () {
    gt_RevealButtonsQ = TriggerCreate("gt_RevealButtonsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Power Cores - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoresCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary2");
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary2", gv_coresDestroyed);
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoresCreate_Init () {
    gt_ObjectiveDestroyPowerCoresCreate = TriggerCreate("gt_ObjectiveDestroyPowerCoresCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Power Cores - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoresComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPowerCoresCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderPrimary2", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderPrimary232", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(2.0, c_timeReal);
    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction22", -1), StringExternal("Param/Value/0CB758E1"), StringExternal("Param/Value/C2D73FC4"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Fleet", -1), StringExternal("Param/Value/5DB83252"), StringExternal("Param/Value/752FD483"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    TriggerExecute(gt_AttackWaveFleet, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoresComplete_Init () {
    gt_ObjectiveDestroyPowerCoresComplete = TriggerCreate("gt_ObjectiveDestroyPowerCoresComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Power Cores - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoresUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1218ABC2_ae = 5;
    const int auto1218ABC2_ai = 1;
    const int auto57608643_ae = 3;
    const int auto57608643_ai = 1;
    const int auto5FB7990B_ae = 3;
    const int auto5FB7990B_ai = 1;
    const int auto571F8299_ae = 3;
    const int auto571F8299_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyPowerCoresCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary2", gv_coresDestroyed);
    if ((gv_coresDestroyed == 1)) {
        while (!((gv_isConversationAvailable == true))) {
            Wait(0.5, c_timeGame);
        }
        gv_isConversationAvailable = false;
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction23", -1), StringExternal("Param/Value/5052A981"), StringExternal("Param/Value/7D4481F9"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeGame);
        gv_isConversationAvailable = true;
        lv_i = 4;
        for ( ; ( (auto1218ABC2_ai >= 0 && lv_i <= auto1218ABC2_ae) || (auto1218ABC2_ai < 0 && lv_i >= auto1218ABC2_ae) ) ; lv_i += auto1218ABC2_ai ) {
            if ((UnitIsAlive(gv_powerCores[lv_i]) == true)) {
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_powerCores[lv_i]), StringExternal("Param/Value/D3BDA720"));
                gv_powerCorePings[lv_i] = PingLastCreated();
            }

        }
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1170760595)), 5.0), 0.1, false);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(186849208)), 5.0), 0.1, false);
    }

    if ((gv_coresDestroyed == 3)) {
        lv_i = 1;
        for ( ; ( (auto57608643_ai >= 0 && lv_i <= auto57608643_ae) || (auto57608643_ai < 0 && lv_i >= auto57608643_ae) ) ; lv_i += auto57608643_ai ) {
            if ((UnitIsAlive(gv_powerCores[lv_i]) == true)) {
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_powerCores[lv_i]), StringExternal("Param/Value/881B0B9A"));
                gv_powerCorePings[lv_i] = PingLastCreated();
            }

        }
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(109)), 5.0), 0.1, false);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(276)), 5.0), 0.1, false);
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(275)), 5.0), 0.1, false);
        TriggerExecute(gt_CoreShields3, true, true);
        while (!((gv_isConversationAvailable == true))) {
            Wait(0.5, c_timeGame);
        }
        gv_isConversationAvailable = false;
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Shields", -1), StringExternal("Param/Value/450A621D"), StringExternal("Param/Value/92763CC1"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeGame);
        gv_isConversationAvailable = true;
        TriggerEnable(gt_ShieldChange, true);
    }

    if ((gv_coresDestroyed == 5)) {
        TriggerStop(gt_ShieldChange);
        TriggerStop(gt_CoreShields3);
        TriggerEnable(gt_CoreShields3, false);
        TriggerEnable(gt_ShieldChange, false);
        while (!((gv_isConversationAvailable == true))) {
            Wait(0.5, c_timeGame);
        }
        gv_isConversationAvailable = false;
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction232", -1), StringExternal("Param/Value/8BE741E9"), StringExternal("Param/Value/6081E705"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeGame);
        gv_isConversationAvailable = true;
        lv_i = 1;
        for ( ; ( (auto5FB7990B_ai >= 0 && lv_i <= auto5FB7990B_ae) || (auto5FB7990B_ai < 0 && lv_i >= auto5FB7990B_ae) ) ; lv_i += auto5FB7990B_ai ) {
            libNtve_gf_ShowHideUnit(gv_powerCoreShields[lv_i], false);
            libNtve_gf_MakeUnitInvulnerable(gv_powerCores[lv_i], false);
            PingDestroy(gv_powerCoreShieldPings[lv_i]);
            PingDestroy(gv_powerCorePings[lv_i]);
            if ((UnitIsAlive(gv_powerCores[lv_i]) == true)) {
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_powerCores[lv_i]), StringExternal("Param/Value/28C333A1"));
                gv_powerCorePings[lv_i] = PingLastCreated();
            }

        }
        Wait(5.0, c_timeGame);
        lv_i = 1;
        for ( ; ( (auto571F8299_ai >= 0 && lv_i <= auto571F8299_ae) || (auto571F8299_ai < 0 && lv_i >= auto571F8299_ae) ) ; lv_i += auto571F8299_ai ) {
            libNtve_gf_ShowHideUnit(gv_powerCoreShields[lv_i], false);
            libNtve_gf_MakeUnitInvulnerable(gv_powerCores[lv_i], false);
            PingDestroy(gv_powerCoreShieldPings[lv_i]);
            PingDestroy(gv_powerCorePings[lv_i]);
            if ((UnitIsAlive(gv_powerCores[lv_i]) == true)) {
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_powerCores[lv_i]), StringExternal("Param/Value/42C1C29A"));
                gv_powerCorePings[lv_i] = PingLastCreated();
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoresUpdate_Init () {
    gt_ObjectiveDestroyPowerCoresUpdate = TriggerCreate("gt_ObjectiveDestroyPowerCoresUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Download Data - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadDataCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_objectiveTimerDuration3 == 1)) {
        libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary22");
        libCOMI_gf_SetObjectiveTimerCampaign("PlaceholderPrimary22", gv_bonusTimer);
        gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
        Wait(2.0, c_timeReal);
    }

    if ((gv_objectiveTimerDuration3 == 2)) {
        libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary222");
        libCOMI_gf_SetObjectiveTimerCampaign("PlaceholderPrimary222", gv_bonusTimer2);
        gv_objectiveDestroyZergBase4 = ObjectiveLastCreated();
        Wait(2.0, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadDataCreate_Init () {
    gt_ObjectiveDownloadDataCreate = TriggerCreate("gt_ObjectiveDownloadDataCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Download Data - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadDataComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDownloadDataCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderPrimary222", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(2.0, c_timeReal);
    while (!((gv_isConversationAvailable == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_isConversationAvailable = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction222", -1), StringExternal("Param/Value/A3F32FBC"), StringExternal("Param/Value/922D4142"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    gv_isConversationAvailable = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadDataComplete_Init () {
    gt_ObjectiveDownloadDataComplete = TriggerCreate("gt_ObjectiveDownloadDataComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Download Data - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDownloadDataFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDownloadDataCreate, true, false);
    libNtve_gf_StopTimer(gv_bonusTimer);
    libNtve_gf_StopTimer(gv_bonusTimer2);
    if ((gv_dataDownloaded == 1)) {
        libNtve_gf_StopTimer(gv_bonusTimer);
        libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderPrimary22", libCOMI_ge_MissionObjectiveState_Failed);
    }

    if ((gv_dataDownloaded == 2)) {
        libNtve_gf_StopTimer(gv_bonusTimer2);
        libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderPrimary222", libCOMI_ge_MissionObjectiveState_Failed);
    }

    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDownloadDataFailed_Init () {
    gt_ObjectiveDownloadDataFailed = TriggerCreate("gt_ObjectiveDownloadDataFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Download Data - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPowerCoresUpdate2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDownloadDataCreate, true, false);
    if ((gv_dataDownloaded == 1)) {
        libNtve_gf_StopTimer(gv_bonusTimer);
        while (!((gv_isConversationAvailable == true))) {
            Wait(0.5, c_timeGame);
        }
        gv_isConversationAvailable = false;
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction2222", -1), StringExternal("Param/Value/A558E6C5"), StringExternal("Param/Value/3EB7661F"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeGame);
        gv_isConversationAvailable = true;
        libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderPrimary22", libCOMI_ge_MissionObjectiveState_Completed);
    }

    if ((gv_dataDownloaded == 2)) {
        libNtve_gf_StopTimer(gv_bonusTimer2);
        TriggerExecute(gt_ObjectiveDownloadDataComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPowerCoresUpdate2_Init () {
    gt_ObjectiveDestroyPowerCoresUpdate2 = TriggerCreate("gt_ObjectiveDestroyPowerCoresUpdate2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_PlatformInit, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerCores[1] = UnitFromId(109);
    gv_powerCores[2] = UnitFromId(276);
    gv_powerCores[3] = UnitFromId(275);
    gv_powerCores[4] = UnitFromId(186849208);
    gv_powerCores[5] = UnitFromId(1170760595);
    gv_powerCores[6] = UnitFromId(319769329);
    gv_powerCoreShields[1] = UnitFromId(317230518);
    gv_powerCoreShields[2] = UnitFromId(11247945);
    gv_powerCoreShields[3] = UnitFromId(825710426);
    gv_powerCoreShields[4] = UnitFromId(1819821000);
    gv_powerCoreShields[5] = UnitFromId(358528442);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_objectiveTimerDuration = libNtve_gf_DifficultyValueInt(12, 10, 9, 8);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_AIAttackWaves, true, false);
    TriggerExecute(gt_Bonus, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    region lv_enemyBase;

    // Automatic Variable Declarations
    const int autoA12360DF_ae = 6;
    const int autoA12360DF_ai = 1;
    unitgroup auto75961B6D_g;
    int auto75961B6D_u;
    unit auto75961B6D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyPowerCoresCreate, true, true);
    lv_i = 6;
    for ( ; ( (autoA12360DF_ai >= 0 && lv_i <= autoA12360DF_ae) || (autoA12360DF_ai < 0 && lv_i >= autoA12360DF_ae) ) ; lv_i += autoA12360DF_ai ) {
        if ((UnitIsAlive(gv_powerCores[lv_i]) == true)) {
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_powerCores[lv_i]), StringExternal("Param/Value/C5210E6F"));
            gv_powerCorePings[lv_i] = PingLastCreated();
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(319769329)), 5.0), 0.1, false);
        }

    }
    TriggerQueueExit();
    auto75961B6D_g = UnitGroup("PathableShieldRadius11", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto75961B6D_u = UnitGroupCount(auto75961B6D_g, c_unitCountAll);
    for (;; auto75961B6D_u -= 1) {
        auto75961B6D_var = UnitGroupUnitFromEnd(auto75961B6D_g, auto75961B6D_u);
        if (auto75961B6D_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto75961B6D_var, false);
    }
    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveTimerWindow, true, false);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("TP_Introduction", -1), StringExternal("Param/Value/EF041E89"), StringExternal("Param/Value/5A5F5FF3"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(1796642225), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("IntroFleet2", -1), StringExternal("Param/Value/F53D8128"), StringExternal("Param/Value/0ED0D0B8"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    TriggerQueueExit();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_RevealButtonsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_CoreDestroyed_Init();
    gt_CoreDestroyedQ_Init();
    gt_CoreShields3_Init();
    gt_ShieldChange_Init();
    gt_ObjectiveTimerWindow_Init();
    gt_ObjectiveTimerWindow2_Init();
    gt_BonusTimer_Init();
    gt_BonusTimer2_Init();
    gt_Bonus_Init();
    gt_Bonus1_Init();
    gt_Bonus2_Init();
    gt_Warden_Init();
    gt_WardenDies_Init();
    gt_EnemyAttackingQ_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_AttackWaveFleet_Init();
    gt_ObjectiveDownloadDataFailTime_Init();
    gt_Bonus1Complete_Init();
    gt_Bonus2Complete_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_PlatformInit_Init();
    gt_PlatforrmDialogSetup_Init();
    gt_PlatformButtonPressed_Init();
    gt_PlatformButtonPressed2_Init();
    gt_DisableAllButtons_Init();
    gt_DisableAllButtons2_Init();
    gt_EnableButtons_Init();
    gt_RevealButtonsQ_Init();
    gt_ObjectiveDestroyPowerCoresCreate_Init();
    gt_ObjectiveDestroyPowerCoresComplete_Init();
    gt_ObjectiveDestroyPowerCoresUpdate_Init();
    gt_ObjectiveDownloadDataCreate_Init();
    gt_ObjectiveDownloadDataComplete_Init();
    gt_ObjectiveDownloadDataFailed_Init();
    gt_ObjectiveDestroyPowerCoresUpdate2_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init05Units_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
