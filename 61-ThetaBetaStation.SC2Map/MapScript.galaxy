//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC 2017: Theta Beta Station
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"
include "Lib37CC0EF2"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
    lib37CC0EF2_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 3;
const int gv_pLAYER_04_ENEMY = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
timer gv_objectiveTimer;
unitfilter gv_vICTORY_REQUIREMENT;
int gv_remainingStructureCount;
bool gv_bridges;
bool gv_doors;
int[7] gv_turrets;
point gv_victoryCompletePan;
point gv_attackWaveA_Wave05Path;
region[3][3] gv_attackSpawn;
int gv_warningSpawn;
int gv_objectiveProtecttheControlTower;
int gv_objectiveGatherHighYieldMinerals;

void InitGlobals () {
    int init_i;

    gv_enemyGroup = PlayerGroupEmpty();
    gv_objectiveTimer = TimerCreate();
    gv_vICTORY_REQUIREMENT = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_turrets[init_i] = c_invalidPingId;
    }
    gv_objectiveProtecttheControlTower = c_invalidObjectiveId;
    gv_objectiveGatherHighYieldMinerals = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_TimerAlert (unit lp_system);
void gf_ThrasherSpawn (int lp_side, fixed lp_time);
void gf_VoidThrasherAI (unit lp_thrasher);
void gf_ThrasherAttackEnemies (unit lp_thrasher, int lp_count);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
void gf_ClearWaveWarning (fixed lp_time);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_BankPreloading;
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_DebugCantFail;
trigger gt_StartGameQ;
trigger gt_ObjectiveTimerWindow;
trigger gt_UpdateStructureCount;
trigger gt_ControlUnits;
trigger gt_TimersAlerts;
trigger gt_FixtheTardedBridges;
trigger gt_ThrasherSpawning;
trigger gt_CompleteBonus;
trigger gt_EnemyAttackingQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_StartAI;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_MainWave01;
trigger gt_MainWave02;
trigger gt_MainWave03;
trigger gt_MainWave04;
trigger gt_MainWave05;
trigger gt_MainWave06;
trigger gt_MainWave07;
trigger gt_AltWave02;
trigger gt_AltWave03;
trigger gt_AltWave04;
trigger gt_AltWave05;
trigger gt_AltWave06;
trigger gt_AltWave07;
trigger gt_Alt2Wave02;
trigger gt_Alt2Wave03;
trigger gt_Alt2Wave04;
trigger gt_Alt2Wave05;
trigger gt_Alt2Wave06;
trigger gt_Alt2Wave07;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_BonusBaseAttackWave1;
trigger gt_BonusBaseAttackWave2;
trigger gt_BonusBaseAttackWave3;
trigger gt_BonusBaseAttackWave4;
trigger gt_BonusBaseAttackWave5;
trigger gt_BonusBaseAttackWave6;
trigger gt_ObjectiveProtecttheControlTowerCreate;
trigger gt_ObjectiveProtecttheControlTowerComplete;
trigger gt_ObjectiveProtecttheControlTowerUpdate;
trigger gt_ObjectiveProtecttheControlTowerFailed;
trigger gt_ObjectiveGatherHighYieldMineralsCreate;
trigger gt_ObjectiveGatherHighYieldMineralsComplete;
trigger gt_ObjectiveGatherHighYieldMineralsUpdate;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;

void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;

    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}

bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;

    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }

    return true;
}

trigger auto_gf_TimerAlert_Trigger = null;
unit auto_gf_TimerAlert_lp_system;

void gf_TimerAlert (unit lp_system) {
    auto_gf_TimerAlert_lp_system = lp_system;

    if (auto_gf_TimerAlert_Trigger == null) {
        auto_gf_TimerAlert_Trigger = TriggerCreate("auto_gf_TimerAlert_TriggerFunc");
    }

    TriggerExecute(auto_gf_TimerAlert_Trigger, false, false);
}

bool auto_gf_TimerAlert_TriggerFunc (bool testConds, bool runActions) {
    unit lp_system = auto_gf_TimerAlert_lp_system;

    // Variable Declarations
    int lv_timer;
    int lv_visibleTimer;

    // Automatic Variable Declarations
    unit auto452FB7D2_val;
    unit auto9991F50E_val;

    // Variable Initialization
    lv_visibleTimer = c_textTagNone;

    // Implementation
    auto452FB7D2_val = lp_system;
    if (auto452FB7D2_val == UnitFromId(374468494)) {
        PingSetColor(gv_turrets[0], Color(100.00, 0.00, 0.00));
    }
    else if (auto452FB7D2_val == UnitFromId(1387552519)) {
        PingSetColor(gv_turrets[1], Color(100.00, 0.00, 0.00));
    }
    else if (auto452FB7D2_val == UnitFromId(889258797)) {
        PingSetColor(gv_turrets[2], Color(100.00, 0.00, 0.00));
    }
    else if (auto452FB7D2_val == UnitFromId(1935216586)) {
        PingSetColor(gv_turrets[3], Color(100.00, 0.00, 0.00));
    }
    else if (auto452FB7D2_val == UnitFromId(2100018978)) {
        PingSetColor(gv_turrets[4], Color(100.00, 0.00, 0.00));
    }
    else if (auto452FB7D2_val == UnitFromId(174924799)) {
        PingSetColor(gv_turrets[5], Color(100.00, 0.00, 0.00));
    }
    else {
    }
    UnitBehaviorAdd(lp_system, "ProgressBar", lp_system, 1);
    UnitBehaviorSetDuration(lp_system, "ProgressBar", 60.0);
    libCOMI_gf_ShowHideUnitProgressBar(lp_system, true);
    lv_timer = 60;
    while (true) {
        lv_timer -= 1;
        Wait(1.0, c_timeGame);
        if ((lv_timer == 0)) {
            break;
        }

    }
    libCOMI_gf_ShowHideUnitProgressBar(lp_system, false);
    UnitBehaviorRemove(lp_system, "ProgressBar", 1);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", UnitGetPosition(lp_system), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    PingSetRotation(PingLastCreated(), 270.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BB6D8437"));
    auto9991F50E_val = lp_system;
    if (auto9991F50E_val == UnitFromId(374468494)) {
        PingSetColor(gv_turrets[0], Color(0.00, 100.00, 0.00));
    }
    else if (auto9991F50E_val == UnitFromId(1387552519)) {
        PingSetColor(gv_turrets[1], Color(0.00, 100.00, 0.00));
    }
    else if (auto9991F50E_val == UnitFromId(889258797)) {
        PingSetColor(gv_turrets[2], Color(0.00, 100.00, 0.00));
    }
    else if (auto9991F50E_val == UnitFromId(1935216586)) {
        PingSetColor(gv_turrets[3], Color(0.00, 100.00, 0.00));
    }
    else if (auto9991F50E_val == UnitFromId(2100018978)) {
        PingSetColor(gv_turrets[4], Color(0.00, 100.00, 0.00));
    }
    else if (auto9991F50E_val == UnitFromId(174924799)) {
        PingSetColor(gv_turrets[5], Color(0.00, 100.00, 0.00));
    }
    else {
    }
    return true;
}

trigger auto_gf_ThrasherSpawn_Trigger = null;
int auto_gf_ThrasherSpawn_lp_side;
fixed auto_gf_ThrasherSpawn_lp_time;

void gf_ThrasherSpawn (int lp_side, fixed lp_time) {
    auto_gf_ThrasherSpawn_lp_side = lp_side;
    auto_gf_ThrasherSpawn_lp_time = lp_time;

    if (auto_gf_ThrasherSpawn_Trigger == null) {
        auto_gf_ThrasherSpawn_Trigger = TriggerCreate("auto_gf_ThrasherSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_ThrasherSpawn_Trigger, false, false);
}

bool auto_gf_ThrasherSpawn_TriggerFunc (bool testConds, bool runActions) {
    int lp_side = auto_gf_ThrasherSpawn_lp_side;
    fixed lp_time = auto_gf_ThrasherSpawn_lp_time;

    // Variable Declarations
    unit lv_thrasher;
    int lv_ping;
    int lv_side;

    // Automatic Variable Declarations
    unitgroup auto857D51F0_g;
    int auto857D51F0_u;
    unit auto857D51F0_var;
    unitgroup autoC64475B9_g;
    int autoC64475B9_u;
    unit autoC64475B9_var;
    fixed auto18A25679_at;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1) && (TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1)) {
            return true;
        }
        else {
            if ((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1) && (TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 0)) {
                UnitCreate(1, "VoidThrasher", 0, 4, PointFromId(1313579030), 315.0);
                UnitSetOwner(UnitFromId(174924799), 3, true);
                PingSetColor(gv_turrets[5], Color(100.00, 0.00, 0.00));
                auto857D51F0_g = UnitGroup("MoebiusLabDoorsThinLeft", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto857D51F0_u = UnitGroupCount(auto857D51F0_g, c_unitCountAll);
                for (;; auto857D51F0_u -= 1) {
                    auto857D51F0_var = UnitGroupUnitFromEnd(auto857D51F0_g, auto857D51F0_u);
                    if (auto857D51F0_var == null) { break; }
                    UnitIssueOrder(auto857D51F0_var, Order(AbilityCommand("MoebiusLabDoorsThinLeftLowered", 0)), c_orderQueueReplace);
                }
                lv_side = 1;
                gv_doors = true;
            }
            else {
                if ((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1)) {
                    UnitCreate(1, "VoidThrasher", 0, 3, PointFromId(438903992), 45.0);
                    UnitSetOwner(UnitFromId(2100018978), 3, true);
                    PingSetColor(gv_turrets[4], Color(100.00, 0.00, 0.00));
                    UnitIssueOrder(UnitFromId(469359960), Order(AbilityCommand("ExtendingBridgeNWWide8Out", 0)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(256626454), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
                    UnitIssueOrder(UnitFromId(1443667272), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
                    lv_side = 2;
                    gv_bridges = true;
                }
                else {
                    if ((lp_side != 1)) {
                        UnitCreate(1, "VoidThrasher", 0, 3, PointFromId(438903992), 45.0);
                        UnitSetOwner(UnitFromId(2100018978), 3, true);
                        PingSetColor(gv_turrets[4], Color(100.00, 0.00, 0.00));
                        UnitIssueOrder(UnitFromId(469359960), Order(AbilityCommand("ExtendingBridgeNWWide8Out", 0)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(256626454), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
                        UnitIssueOrder(UnitFromId(1443667272), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
                        lv_side = 1;
                        gv_bridges = true;
                    }
                    else {
                        UnitCreate(1, "VoidThrasher", 0, 4, PointFromId(1313579030), 315.0);
                        UnitSetOwner(UnitFromId(174924799), 3, true);
                        PingSetColor(gv_turrets[5], Color(100.00, 0.00, 0.00));
                        autoC64475B9_g = UnitGroup("MoebiusLabDoorsThinLeft", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoC64475B9_u = UnitGroupCount(autoC64475B9_g, c_unitCountAll);
                        for (;; autoC64475B9_u -= 1) {
                            autoC64475B9_var = UnitGroupUnitFromEnd(autoC64475B9_g, autoC64475B9_u);
                            if (autoC64475B9_var == null) { break; }
                            UnitIssueOrder(autoC64475B9_var, Order(AbilityCommand("MoebiusLabDoorsThinLeftLowered", 0)), c_orderQueueReplace);
                        }
                        lv_side = 2;
                        gv_doors = true;
                    }
                }
            }
        }
        lv_thrasher = UnitLastCreated();
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(lv_thrasher), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), (1800.0 - GameGetMissionTime()));
        lv_ping = PingLastCreated();
        PingSetRotation(lv_ping, 270.0);
        gf_VoidThrasherAI(lv_thrasher);
        if ((lp_time == (8.0 * 60.0))) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("CommandCenter", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/8A843A39"), StringExternal("Param/Value/8B04CE1F"), 6.5, c_transmissionDurationAdd, false, c_maxPlayers, false);
        }
        else {
            if ((GameGetMissionTime() < 1750.0)) {
                libCOMI_gf_SendMissionTransmission("VoidThrasherAppears", false, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
            }

        }
        auto18A25679_at = 0;
        while (!((UnitIsAlive(lv_thrasher) == false)) && auto18A25679_at <= (1800.0 - GameGetMissionTime())) {
            Wait(0.3, c_timeGame);
            auto18A25679_at = auto18A25679_at + 0.3;
        }
        libCOMI_gf_DestroyPingCoop(lv_ping);
        if ((lv_side == 1)) {
            libNtve_gf_RescueUnit(UnitFromId(2100018978), 5, true);
            PingSetColor(gv_turrets[4], Color(0.00, 100.00, 0.00));
        }
        else {
            libNtve_gf_RescueUnit(UnitFromId(174924799), 5, true);
            PingSetColor(gv_turrets[5], Color(0.00, 100.00, 0.00));
        }
    }

    return true;
}

trigger auto_gf_VoidThrasherAI_Trigger = null;
unit auto_gf_VoidThrasherAI_lp_thrasher;

void gf_VoidThrasherAI (unit lp_thrasher) {
    auto_gf_VoidThrasherAI_lp_thrasher = lp_thrasher;

    if (auto_gf_VoidThrasherAI_Trigger == null) {
        auto_gf_VoidThrasherAI_Trigger = TriggerCreate("auto_gf_VoidThrasherAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_VoidThrasherAI_Trigger, false, false);
}

bool auto_gf_VoidThrasherAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_thrasher = auto_gf_VoidThrasherAI_lp_thrasher;

    // Automatic Variable Declarations
    int auto767B0EF3_val;

    // Implementation
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_thrasher) == true)) {
        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_thrasher), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_thrasher), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            auto767B0EF3_val = PlayerDifficulty(UnitGetOwner(lp_thrasher));
            if (auto767B0EF3_val == 1) {
                gf_ThrasherAttackEnemies(lp_thrasher, 1);
            }
            else if (auto767B0EF3_val == 2) {
                gf_ThrasherAttackEnemies(lp_thrasher, 1);
            }
            else if (auto767B0EF3_val == 3) {
                gf_ThrasherAttackEnemies(lp_thrasher, 1);
            }
            else if (auto767B0EF3_val == 4) {
                gf_ThrasherAttackEnemies(lp_thrasher, 3);
            }
            else {
            }
            Wait(7.0, c_timeAI);
        }
        else {
            Wait(3.5, c_timeAI);
        }
    }
    return true;
}

trigger auto_gf_ThrasherAttackEnemies_Trigger = null;
unit auto_gf_ThrasherAttackEnemies_lp_thrasher;
int auto_gf_ThrasherAttackEnemies_lp_count;

void gf_ThrasherAttackEnemies (unit lp_thrasher, int lp_count) {
    auto_gf_ThrasherAttackEnemies_lp_thrasher = lp_thrasher;
    auto_gf_ThrasherAttackEnemies_lp_count = lp_count;

    if (auto_gf_ThrasherAttackEnemies_Trigger == null) {
        auto_gf_ThrasherAttackEnemies_Trigger = TriggerCreate("auto_gf_ThrasherAttackEnemies_TriggerFunc");
    }

    TriggerExecute(auto_gf_ThrasherAttackEnemies_Trigger, false, false);
}

bool auto_gf_ThrasherAttackEnemies_TriggerFunc (bool testConds, bool runActions) {
    unit lp_thrasher = auto_gf_ThrasherAttackEnemies_lp_thrasher;
    int lp_count = auto_gf_ThrasherAttackEnemies_lp_count;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unit lv_targetUnit;
    point lv_primaryTarget;
    point lv_extraTarget;

    // Automatic Variable Declarations
    unitgroup auto0B7FB198_g;
    int auto0B7FB198_u;
    unit auto0B7FB198_var;
    unitgroup auto8086BC9B_g;
    int auto8086BC9B_u;
    unit auto8086BC9B_var;
    unitgroup auto54152872_g;
    int auto54152872_u;
    unit auto54152872_var;
    unitgroup auto3B735943_g;
    int auto3B735943_u;
    unit auto3B735943_var;
    unitgroup auto687A3DB8_g;
    int auto687A3DB8_u;
    unit auto687A3DB8_var;
    unitgroup autoCB7EF51C_g;
    int autoCB7EF51C_u;
    unit autoCB7EF51C_var;
    unitgroup auto21166ADD_g;
    int auto21166ADD_u;
    unit auto21166ADD_var;
    int autoDA1AF1A4_n;
    int autoDA1AF1A4_i;
    unitgroup auto9D50DF75_g;
    int auto9D50DF75_u;
    unit auto9D50DF75_var;
    unitgroup auto3181861D_g;
    int auto3181861D_u;
    unit auto3181861D_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    if (((UnitIsAlive(lp_thrasher) == false) || (libCOMI_gf_GameIsOver() == true))) {
        return true;
    }

    lv_enemyGroup = UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_thrasher), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B7FB198_g = lv_enemyGroup;
    auto0B7FB198_u = UnitGroupCount(auto0B7FB198_g, c_unitCountAll);
    for (;; auto0B7FB198_u -= 1) {
        auto0B7FB198_var = UnitGroupUnitFromEnd(auto0B7FB198_g, auto0B7FB198_u);
        if (auto0B7FB198_var == null) { break; }
        if ((UnitGetType(auto0B7FB198_var) == "SOAThermalLanceTargeter")) {
            UnitGroupRemove(lv_enemyGroup, auto0B7FB198_var);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGroupCenterOfGroup(lv_enemyGroup), 4.0), 0), c_unitCountAlive);
    if ((lv_targetUnit == null)) {
        lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)) < 5.0)) {
        lv_primaryTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasher), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)));
        auto8086BC9B_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
        auto8086BC9B_u = UnitGroupCount(auto8086BC9B_g, c_unitCountAll);
        for (;; auto8086BC9B_u -= 1) {
            auto8086BC9B_var = UnitGroupUnitFromEnd(auto8086BC9B_g, auto8086BC9B_u);
            if (auto8086BC9B_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto8086BC9B_var);
        }
    }
    else {
        lv_primaryTarget = UnitGetPosition(lv_targetUnit);
    }
    UnitIssueOrder(lp_thrasher, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), lv_primaryTarget), c_orderQueueReplace);
    auto54152872_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_primaryTarget, 3.0), 0);
    auto54152872_u = UnitGroupCount(auto54152872_g, c_unitCountAll);
    for (;; auto54152872_u -= 1) {
        auto54152872_var = UnitGroupUnitFromEnd(auto54152872_g, auto54152872_u);
        if (auto54152872_var == null) { break; }
        UnitGroupRemove(lv_enemyGroup, auto54152872_var);
    }
    Wait(0.0625, c_timeAI);
    if ((lp_count >= 2) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0) && (UnitIsAlive(lp_thrasher) == true)) {
        lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lp_thrasher), 7.0, (AngleBetweenPoints(UnitGetPosition(lp_thrasher), lv_primaryTarget) + 60.0)), 8.0), 0), c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasher), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)));
            auto3B735943_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            auto3B735943_u = UnitGroupCount(auto3B735943_g, c_unitCountAll);
            for (;; auto3B735943_u -= 1) {
                auto3B735943_var = UnitGroupUnitFromEnd(auto3B735943_g, auto3B735943_u);
                if (auto3B735943_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, auto3B735943_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(lp_thrasher, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto687A3DB8_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto687A3DB8_u = UnitGroupCount(auto687A3DB8_g, c_unitCountAll);
        for (;; auto687A3DB8_u -= 1) {
            auto687A3DB8_var = UnitGroupUnitFromEnd(auto687A3DB8_g, auto687A3DB8_u);
            if (auto687A3DB8_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto687A3DB8_var);
        }
    }

    Wait(0.0625, c_timeAI);
    if ((lp_count >= 3) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) > 0) && (UnitIsAlive(lp_thrasher) == true)) {
        lv_targetUnit = UnitGroupRandomUnit(UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lp_thrasher), 7.0, (AngleBetweenPoints(UnitGetPosition(lp_thrasher), lv_primaryTarget) - 60.0)), 8.0), 0), c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasher), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)));
            autoCB7EF51C_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            autoCB7EF51C_u = UnitGroupCount(autoCB7EF51C_g, c_unitCountAll);
            for (;; autoCB7EF51C_u -= 1) {
                autoCB7EF51C_var = UnitGroupUnitFromEnd(autoCB7EF51C_g, autoCB7EF51C_u);
                if (autoCB7EF51C_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, autoCB7EF51C_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(lp_thrasher, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto21166ADD_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto21166ADD_u = UnitGroupCount(auto21166ADD_g, c_unitCountAll);
        for (;; auto21166ADD_u -= 1) {
            auto21166ADD_var = UnitGroupUnitFromEnd(auto21166ADD_g, auto21166ADD_u);
            if (auto21166ADD_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto21166ADD_var);
        }
    }

    autoDA1AF1A4_n = (lp_count - 3);
    for (autoDA1AF1A4_i = 1; autoDA1AF1A4_i <= autoDA1AF1A4_n; autoDA1AF1A4_i += 1) {
        Wait(0.0625, c_timeAI);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) || (UnitIsAlive(lp_thrasher) == false))) {
            return true;
        }

        lv_targetUnit = UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive);
        if ((DistanceBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)) < 5.0)) {
            lv_extraTarget = PointWithOffsetPolar(UnitGetPosition(lp_thrasher), 5.0, AngleBetweenPoints(UnitGetPosition(lp_thrasher), UnitGetPosition(lv_targetUnit)));
            auto9D50DF75_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(UnitGetPosition(lv_targetUnit), 3.0), 0);
            auto9D50DF75_u = UnitGroupCount(auto9D50DF75_g, c_unitCountAll);
            for (;; auto9D50DF75_u -= 1) {
                auto9D50DF75_var = UnitGroupUnitFromEnd(auto9D50DF75_g, auto9D50DF75_u);
                if (auto9D50DF75_var == null) { break; }
                UnitGroupRemove(lv_enemyGroup, auto9D50DF75_var);
            }
        }
        else {
            lv_extraTarget = UnitGetPosition(lv_targetUnit);
        }
        UnitIssueOrder(lp_thrasher, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoEExtra", 0), lv_extraTarget), c_orderQueueAddToFront);
        auto3181861D_g = UnitGroupFilterRegion(lv_enemyGroup, RegionCircle(lv_extraTarget, 3.0), 0);
        auto3181861D_u = UnitGroupCount(auto3181861D_g, c_unitCountAll);
        for (;; auto3181861D_u -= 1) {
            auto3181861D_var = UnitGroupUnitFromEnd(auto3181861D_g, auto3181861D_u);
            if (auto3181861D_var == null) { break; }
            UnitGroupRemove(lv_enemyGroup, auto3181861D_var);
        }
    }
    return true;
}

trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

trigger auto_gf_ClearWaveWarning_Trigger = null;
fixed auto_gf_ClearWaveWarning_lp_time;

void gf_ClearWaveWarning (fixed lp_time) {
    auto_gf_ClearWaveWarning_lp_time = lp_time;

    if (auto_gf_ClearWaveWarning_Trigger == null) {
        auto_gf_ClearWaveWarning_Trigger = TriggerCreate("auto_gf_ClearWaveWarning_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClearWaveWarning_Trigger, false, false);
}

bool auto_gf_ClearWaveWarning_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_ClearWaveWarning_lp_time;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((lp_time == (2.0 * 60.0)) && ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 1) || (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 2) || (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 1) || (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 2))) {
        return true;
    }
    else {
        if ((libCOMI_gf_GameIsOver() == false)) {
            gv_warningSpawn = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
            TriggerExecute(gt_EnemyAttackingQ, true, false);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 30.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AD73ABF3"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bank Preloading
//--------------------------------------------------------------------------------------------------
bool gt_BankPreloading_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BankPreloading_Init () {
    gt_BankPreloading = TriggerCreate("gt_BankPreloading_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init02Players, true, false);
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;

    // Automatic Variable Declarations
    playergroup auto36D43175_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto36D43175_g = libCOMI_gf_HumanPlayers();
    lv_playerIterAlly = -1;
    while (true) {
        lv_playerIterAlly = PlayerGroupNextPlayer(auto36D43175_g, lv_playerIterAlly);
        if (lv_playerIterAlly < 0) { break; }
        libNtve_gf_SetAllianceOneWay(5, lv_playerIterAlly, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        libNtve_gf_SetAllianceOneWay(lv_playerIterAlly, 5, libNtve_ge_AllianceSetting_Ally);
    }
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(1), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(1), true, false);
    VisRevealerCreate(gv_pLAYER_01_USER, RegionFromId(14));
    VisRevealerCreate(gv_pLAYER_02_USER, RegionFromId(14));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;

    // Automatic Variable Declarations
    string auto89AE7C52_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto89AE7C52_val = GameAttributeGameValue("2");
    if (auto89AE7C52_val == "0001") {
        PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 1);
        PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 1);
    }
    else if (auto89AE7C52_val == "0002") {
        PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 2);
        PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 2);
    }
    else if (auto89AE7C52_val == "0003") {
        PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 3);
        PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 3);
    }
    else if (auto89AE7C52_val == "0004") {
        PlayerSetDifficulty(gv_pLAYER_03_ENEMY, 4);
        PlayerSetDifficulty(gv_pLAYER_04_ENEMY, 4);
    }
    else {
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 4)) {
        UnitRemove(UnitFromId(2042044178));
        UnitRemove(UnitFromId(1760447991));
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 4)) {
        UnitRemove(UnitFromId(1400873960));
        UnitRemove(UnitFromId(482016832));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Can't Fail
//--------------------------------------------------------------------------------------------------
bool gt_DebugCantFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(gv_pLAYER_01_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
    PlayerModifyPropertyFixed(gv_pLAYER_02_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugCantFail_Init () {
    gt_DebugCantFail = TriggerCreate("gt_DebugCantFail_Func");
    TriggerAddEventChatMessage(gt_DebugCantFail, c_playerAny, "cantfail", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitFromId(1008223032)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetRotation(PingLastCreated(), 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5CC87D99"));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "KorhalPalaceTurret", UnitGetPosition(UnitFromId(374468494)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetScale(PingLastCreated(), 0.04);
    gv_turrets[0] = PingLastCreated();
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "KorhalPalaceTurret", UnitGetPosition(UnitFromId(1387552519)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetScale(PingLastCreated(), 0.04);
    gv_turrets[1] = PingLastCreated();
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "KorhalPalaceTurret", UnitGetPosition(UnitFromId(889258797)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetScale(PingLastCreated(), 0.04);
    gv_turrets[2] = PingLastCreated();
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "KorhalPalaceTurret", UnitGetPosition(UnitFromId(1935216586)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetScale(PingLastCreated(), 0.04);
    gv_turrets[3] = PingLastCreated();
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "GateControlUnit", UnitGetPosition(UnitFromId(2100018978)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetScale(PingLastCreated(), 0.04);
    PingSetRotation(PingLastCreated(), 270.0);
    gv_turrets[4] = PingLastCreated();
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "GateControlUnit", UnitGetPosition(UnitFromId(174924799)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetScale(PingLastCreated(), 0.04);
    PingSetRotation(PingLastCreated(), 270.0);
    gv_turrets[5] = PingLastCreated();
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveProtecttheControlTowerCreate, true, true);
    TriggerExecute(gt_ObjectiveTimerWindow, true, false);
    Wait(2.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("CommandCenter", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/4AAA1049"), StringExternal("Param/Value/EA2013A5"), 6.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(50.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("CommandCenter", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/18470BF3"), StringExternal("Param/Value/79215DC4"), 9.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(2100018978)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    PingSetRotation(PingLastCreated(), 270.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(174924799)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    PingSetRotation(PingLastCreated(), 270.0);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_ObjectiveGatherHighYieldMineralsCreate, true, true);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", PointFromId(1761049629), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", PointFromId(1196946763), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", PointFromId(1761049629), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/387FDFE7"));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", PointFromId(1196946763), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1820.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4751B73A"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2CE3E33A"));
    Wait(140.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("CommandCenter", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/C965422F"), StringExternal("Param/Value/88342C7A"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(374468494)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    PingSetRotation(PingLastCreated(), 270.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(1387552519)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    PingSetRotation(PingLastCreated(), 270.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(889258797)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    PingSetRotation(PingLastCreated(), 270.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MinimapPing", UnitGetPosition(UnitFromId(1935216586)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 4.0);
    PingSetRotation(PingLastCreated(), 270.0);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_objectiveTimer, (30.0 * 60.0), false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(gv_objectiveTimer, StringExternal("Param/Value/9C6DC835"), true, false);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_ObjectiveProtecttheControlTowerUpdate, true, false);
        TriggerExecute(gt_ObjectiveGatherHighYieldMineralsUpdate, true, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTimerWindow_Init () {
    gt_ObjectiveTimerWindow = TriggerCreate("gt_ObjectiveTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Structure Count
//--------------------------------------------------------------------------------------------------
bool gt_UpdateStructureCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_runningStructureTotal;
    region lv_enemyBase;
    unitgroup lv_enemyBaseTargets;

    // Automatic Variable Declarations
    playergroup auto0C33251B_g;
    int auto0C33251B_var;

    // Variable Initialization
    lv_enemyBaseTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0C33251B_g = gv_enemyGroup;
    auto0C33251B_var = -1;
    while (true) {
        auto0C33251B_var = PlayerGroupNextPlayer(auto0C33251B_g, auto0C33251B_var);
        if (auto0C33251B_var < 0) { break; }
        lv_runningStructureTotal += UnitGroupCount(UnitGroup(null, auto0C33251B_var, null, gv_vICTORY_REQUIREMENT, 0), c_unitCountAlive);
    }
    gv_remainingStructureCount = lv_runningStructureTotal;
    if ((lv_runningStructureTotal == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateStructureCount_Init () {
    gt_UpdateStructureCount = TriggerCreate("gt_UpdateStructureCount_Func");
    TriggerAddEventTimePeriodic(gt_UpdateStructureCount, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Units
//--------------------------------------------------------------------------------------------------
bool gt_ControlUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto154551D0_g;
    int auto154551D0_u;
    unit auto154551D0_var;
    unitgroup auto395C6F79_g;
    int auto395C6F79_u;
    unit auto395C6F79_var;
    unitgroup autoEBE8D286_g;
    int autoEBE8D286_u;
    unit autoEBE8D286_var;
    unitgroup auto6A356E9E_g;
    int auto6A356E9E_u;
    unit auto6A356E9E_var;
    unitgroup autoD3FD7FBA_g;
    int autoD3FD7FBA_u;
    unit autoD3FD7FBA_var;
    unitgroup autoA1F0A4FB_g;
    int autoA1F0A4FB_u;
    unit autoA1F0A4FB_var;
    unitgroup auto1F60E326_g;
    int auto1F60E326_u;
    unit auto1F60E326_var;
    unitgroup auto7D3A340C_g;
    int auto7D3A340C_u;
    unit auto7D3A340C_var;
    unitgroup auto0904BBC7_g;
    int auto0904BBC7_u;
    unit auto0904BBC7_var;
    unitgroup auto564109BB_g;
    int auto564109BB_u;
    unit auto564109BB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == UnitFromId(2100018978))) {
        auto0904BBC7_g = UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0904BBC7_u = UnitGroupCount(auto0904BBC7_g, c_unitCountAll);
        for (;; auto0904BBC7_u -= 1) {
            auto0904BBC7_var = UnitGroupUnitFromEnd(auto0904BBC7_g, auto0904BBC7_u);
            if (auto0904BBC7_var == null) { break; }
            UnitSetPosition(auto0904BBC7_var, PointFromId(1779411589), false);
        }
        auto564109BB_g = UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto564109BB_u = UnitGroupCount(auto564109BB_g, c_unitCountAll);
        for (;; auto564109BB_u -= 1) {
            auto564109BB_var = UnitGroupUnitFromEnd(auto564109BB_g, auto564109BB_u);
            if (auto564109BB_var == null) { break; }
            UnitSetPosition(auto564109BB_var, PointFromId(1075209485), false);
        }
        if ((gv_bridges == false)) {
            UnitIssueOrder(UnitFromId(469359960), Order(AbilityCommand("ExtendingBridgeNWWide8Out", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(256626454), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(1443667272), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
            gv_bridges = true;
        }
        else {
            UnitIssueOrder(UnitFromId(469359960), Order(AbilityCommand("ExtendingBridgeNWWide8", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(256626454), Order(AbilityCommand("ExtendingBridgeNEWide8", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitFromId(1443667272), Order(AbilityCommand("ExtendingBridgeNEWide8", 0)), c_orderQueueReplace);
            gv_bridges = false;
        }
    }
    else {
        auto154551D0_g = UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto154551D0_u = UnitGroupCount(auto154551D0_g, c_unitCountAll);
        for (;; auto154551D0_u -= 1) {
            auto154551D0_var = UnitGroupUnitFromEnd(auto154551D0_g, auto154551D0_u);
            if (auto154551D0_var == null) { break; }
            UnitSetPosition(auto154551D0_var, PointFromId(1248656657), false);
        }
        auto395C6F79_g = UnitGroup(null, c_playerAny, RegionFromId(9), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto395C6F79_u = UnitGroupCount(auto395C6F79_g, c_unitCountAll);
        for (;; auto395C6F79_u -= 1) {
            auto395C6F79_var = UnitGroupUnitFromEnd(auto395C6F79_g, auto395C6F79_u);
            if (auto395C6F79_var == null) { break; }
            UnitSetPosition(auto395C6F79_var, PointFromId(2099230197), false);
        }
        autoEBE8D286_g = UnitGroup(null, c_playerAny, RegionFromId(10), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEBE8D286_u = UnitGroupCount(autoEBE8D286_g, c_unitCountAll);
        for (;; autoEBE8D286_u -= 1) {
            autoEBE8D286_var = UnitGroupUnitFromEnd(autoEBE8D286_g, autoEBE8D286_u);
            if (autoEBE8D286_var == null) { break; }
            UnitSetPosition(autoEBE8D286_var, PointFromId(760093088), false);
        }
        auto6A356E9E_g = UnitGroup(null, c_playerAny, RegionFromId(11), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6A356E9E_u = UnitGroupCount(auto6A356E9E_g, c_unitCountAll);
        for (;; auto6A356E9E_u -= 1) {
            auto6A356E9E_var = UnitGroupUnitFromEnd(auto6A356E9E_g, auto6A356E9E_u);
            if (auto6A356E9E_var == null) { break; }
            UnitSetPosition(auto6A356E9E_var, PointFromId(1159839325), false);
        }
        autoD3FD7FBA_g = UnitGroup(null, c_playerAny, RegionFromId(13), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD3FD7FBA_u = UnitGroupCount(autoD3FD7FBA_g, c_unitCountAll);
        for (;; autoD3FD7FBA_u -= 1) {
            autoD3FD7FBA_var = UnitGroupUnitFromEnd(autoD3FD7FBA_g, autoD3FD7FBA_u);
            if (autoD3FD7FBA_var == null) { break; }
            UnitSetPosition(autoD3FD7FBA_var, PointFromId(2039894826), false);
        }
        autoA1F0A4FB_g = UnitGroup(null, c_playerAny, RegionFromId(12), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA1F0A4FB_u = UnitGroupCount(autoA1F0A4FB_g, c_unitCountAll);
        for (;; autoA1F0A4FB_u -= 1) {
            autoA1F0A4FB_var = UnitGroupUnitFromEnd(autoA1F0A4FB_g, autoA1F0A4FB_u);
            if (autoA1F0A4FB_var == null) { break; }
            UnitSetPosition(autoA1F0A4FB_var, PointFromId(483004432), false);
        }
        if ((gv_doors == false)) {
            auto7D3A340C_g = UnitGroup("MoebiusLabDoorsThinLeft", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7D3A340C_u = UnitGroupCount(auto7D3A340C_g, c_unitCountAll);
            for (;; auto7D3A340C_u -= 1) {
                auto7D3A340C_var = UnitGroupUnitFromEnd(auto7D3A340C_g, auto7D3A340C_u);
                if (auto7D3A340C_var == null) { break; }
                UnitIssueOrder(auto7D3A340C_var, Order(AbilityCommand("MoebiusLabDoorsThinLeftLowered", 0)), c_orderQueueReplace);
            }
            gv_doors = true;
        }
        else {
            auto1F60E326_g = UnitGroup("MoebiusLabDoorsThinLeftLowered", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1F60E326_u = UnitGroupCount(auto1F60E326_g, c_unitCountAll);
            for (;; auto1F60E326_u -= 1) {
                auto1F60E326_var = UnitGroupUnitFromEnd(auto1F60E326_g, auto1F60E326_u);
                if (auto1F60E326_var == null) { break; }
                UnitIssueOrder(auto1F60E326_var, Order(AbilityCommand("MoebiusLabDoorsThinLeft", 0)), c_orderQueueReplace);
            }
            gv_doors = false;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ControlUnits_Init () {
    gt_ControlUnits = TriggerCreate("gt_ControlUnits_Func");
    TriggerAddEventUnitAbility(gt_ControlUnits, null, AbilityCommand("ControlUnitActivate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timers & Alerts
//--------------------------------------------------------------------------------------------------
bool gt_TimersAlerts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TimerAlert(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimersAlerts_Init () {
    gt_TimersAlerts = TriggerCreate("gt_TimersAlerts_Func");
    TriggerAddEventUnitAbility(gt_TimersAlerts, null, AbilityCommand("CommandedAbility", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_TimersAlerts, null, AbilityCommand("ControlUnitActivate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fix the Tarded Bridges
//--------------------------------------------------------------------------------------------------
bool gt_FixtheTardedBridges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bridges == false)) {
        UnitIssueOrder(UnitFromId(469359960), Order(AbilityCommand("ExtendingBridgeNWWide8", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(256626454), Order(AbilityCommand("ExtendingBridgeNEWide8", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1443667272), Order(AbilityCommand("ExtendingBridgeNEWide8", 0)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(UnitFromId(469359960), Order(AbilityCommand("ExtendingBridgeNWWide8Out", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(256626454), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1443667272), Order(AbilityCommand("ExtendingBridgeNEWide8Out", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FixtheTardedBridges_Init () {
    gt_FixtheTardedBridges = TriggerCreate("gt_FixtheTardedBridges_Func");
    TriggerAddEventTimePeriodic(gt_FixtheTardedBridges, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrasher Spawning
//--------------------------------------------------------------------------------------------------
bool gt_ThrasherSpawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ThrasherSpawn(RandomInt(1, 3), (8.0 * 60.0));
    gf_ThrasherSpawn(RandomInt(1, 3), (12.0 * 60.0));
    gf_ThrasherSpawn(RandomInt(1, 3), (15.5 * 60.0));
    gf_ThrasherSpawn(RandomInt(1, 3), (18.5 * 60.0));
    gf_ThrasherSpawn(RandomInt(1, 3), (21.0 * 60.0));
    gf_ThrasherSpawn(RandomInt(1, 3), (23.5 * 60.0));
    gf_ThrasherSpawn(RandomInt(1, 3), (26.0 * 60.0));
    gf_ThrasherSpawn(RandomInt(1, 3), (28.5 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThrasherSpawning_Init () {
    gt_ThrasherSpawning = TriggerCreate("gt_ThrasherSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Complete Bonus
//--------------------------------------------------------------------------------------------------
bool gt_CompleteBonus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_totalResources;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_totalResources = libNtve_gf_UnitGetPropertyResources(UnitFromId(1959611529), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(1382572473), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(820429894), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(1118113766), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(1415082218), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(532564398), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(944139218), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(819185607), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(1619778940), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(1524364200), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(879535902), c_unitPropCurrent);
    lv_totalResources += libNtve_gf_UnitGetPropertyResources(UnitFromId(1675033820), c_unitPropCurrent);
    if ((lv_totalResources <= 3000)) {
        TriggerExecute(gt_ObjectiveGatherHighYieldMineralsComplete, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CompleteBonus_Init () {
    gt_CompleteBonus = TriggerCreate("gt_CompleteBonus_Func");
    TriggerAddEventTimePeriodic(gt_CompleteBonus, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;

    // Automatic Variable Declarations
    unitgroup autoE13775EF_g;
    int autoE13775EF_u;
    unit autoE13775EF_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(lib37CC0EF2_gf_DefeatAnyPlayerBaseDead())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/32A293E2"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/9CF3D152"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
    }
    else {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/66E10DF0"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/86659B78"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
    }
    Wait(2.0, c_timeReal);
    autoE13775EF_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE13775EF_u = UnitGroupCount(autoE13775EF_g, c_unitCountAll);
    for (;; autoE13775EF_u -= 1) {
        autoE13775EF_var = UnitGroupUnitFromEnd(autoE13775EF_g, autoE13775EF_u);
        if (autoE13775EF_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoE13775EF_var, true);
    }
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_02_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_02_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }

    Wait(4.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DefendReminder", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveProtecttheControlTowerFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/45BB14EF"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromUnit(UnitFromId(1008223032)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
    TriggerAddEventTimer(gt_VictoryPrimaryObjectiveComplete, gv_objectiveTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveVictory", false, -1);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/994D9560"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/12EEFC12"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_AIAttackWaves, true, false);
    TriggerExecute(gt_ThrasherSpawning, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackSpawn[gv_pLAYER_01_USER][1] = RegionFromId(5);
    gv_attackSpawn[gv_pLAYER_02_USER][1] = RegionFromId(4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ClearWaveWarning((2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.5 * 60.0));
    gf_ClearWaveWarning((5.6 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (6.1 * 60.0));
    gf_ClearWaveWarning((9.6 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (10.1 * 60.0));
    gf_ClearWaveWarning((13.6 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (14.1 * 60.0));
    gf_ClearWaveWarning((17.6 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (18.1 * 60.0));
    gf_ClearWaveWarning((21.6 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (22.1 * 60.0));
    gf_ClearWaveWarning((25.6 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (26.1 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave01, (4.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave01, (5.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave01, (6.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave02, (7.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave02, (7.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave02, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave02, (8.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave02, (9.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave02, (9.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave02, (10.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (10.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (11.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (12.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (12.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (13.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (13.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave03, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (14.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (15.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (15.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (16.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (16.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (17.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (18.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (18.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (19.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (19.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave04, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (20.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (21.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (21.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (22.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (22.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (23.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (23.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (24.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (24.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave05, (25.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave06, (25.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave06, (26.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave06, (26.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave06, (27.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave06, (27.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_MainWave07, (28.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave02, (6.01 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave02, (6.01 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave02, (8.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave02, (8.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave02, (8.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave02, (8.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave03, (10.86 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave03, (10.86 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave03, (12.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave03, (12.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave03, (12.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave03, (12.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave04, (14.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave04, (14.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave04, (15.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave04, (15.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave04, (16.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave04, (16.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave04, (17.36 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave04, (17.36 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave04, (18.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave04, (18.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave04, (19.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave04, (19.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave04, (20.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave04, (20.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave05, (21.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave05, (21.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave05, (21.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave05, (21.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave05, (22.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave05, (22.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave05, (23.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave05, (23.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave05, (24.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave05, (24.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave05, (25.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave05, (25.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave06, (26.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave06, (26.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave06, (26.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave06, (26.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave06, (27.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave06, (27.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave07, (28.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave07, (28.61 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AltWave07, (29.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Alt2Wave07, (29.11 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave1, (12.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave2, (15.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave3, (17.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave4, (19.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave5, (21.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave6, (23.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave5, (25.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_BonusBaseAttackWave6, (27.2 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_MainWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1796069414), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1692084930), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainWave01_Init () {
    gt_MainWave01 = TriggerCreate("gt_MainWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_MainWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1796069414), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1692084930), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainWave02_Init () {
    gt_MainWave02 = TriggerCreate("gt_MainWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_MainWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    if ((RandomInt(1, 20) <= 2)) {
        UnitCreate(1, "HybridReaver", 0, 3, PointFromId(1585046594), 270.0);
        AIAttackWaveUseUnit(3, UnitLastCreated());
    }

    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1796069414), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1692084930), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainWave03_Init () {
    gt_MainWave03 = TriggerCreate("gt_MainWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_MainWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    if ((RandomInt(1, 20) <= 4)) {
        UnitCreate(1, "HybridReaver", 0, 3, PointFromId(1585046594), 270.0);
        AIAttackWaveUseUnit(3, UnitLastCreated());
    }

    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1796069414), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1692084930), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainWave04_Init () {
    gt_MainWave04 = TriggerCreate("gt_MainWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_MainWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    if ((RandomInt(1, 20) <= 7)) {
        UnitCreate(1, "HybridReaver", 0, 3, PointFromId(1585046594), 270.0);
        AIAttackWaveUseUnit(3, UnitLastCreated());
    }

    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1796069414), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1692084930), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainWave05_Init () {
    gt_MainWave05 = TriggerCreate("gt_MainWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_MainWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    if ((RandomInt(1, 20) <= 12)) {
        UnitCreate(1, "HybridReaver", 0, 3, PointFromId(1585046594), 270.0);
        AIAttackWaveUseUnit(3, UnitLastCreated());
    }

    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1796069414), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1692084930), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainWave06_Init () {
    gt_MainWave06 = TriggerCreate("gt_MainWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_MainWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    UnitCreate(1, "HybridReaver", 0, 3, PointFromId(1585046594), 270.0);
    AIAttackWaveUseUnit(3, UnitLastCreated());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1796069414), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1692084930), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainWave07_Init () {
    gt_MainWave07 = TriggerCreate("gt_MainWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AltWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1569202224), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AltWave02_Init () {
    gt_AltWave02 = TriggerCreate("gt_AltWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AltWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1569202224), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AltWave03_Init () {
    gt_AltWave03 = TriggerCreate("gt_AltWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AltWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1569202224), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AltWave04_Init () {
    gt_AltWave04 = TriggerCreate("gt_AltWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AltWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1569202224), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AltWave05_Init () {
    gt_AltWave05 = TriggerCreate("gt_AltWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AltWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1569202224), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AltWave06_Init () {
    gt_AltWave06 = TriggerCreate("gt_AltWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AltWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(3, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(1585046594), true);
    UnitCreate(1, "HybridReaver", 0, 3, PointFromId(1585046594), 270.0);
    AIAttackWaveUseUnit(3, UnitLastCreated());
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1569202224), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AltWave07_Init () {
    gt_AltWave07 = TriggerCreate("gt_AltWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt2 Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_Alt2Wave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(c_playerAny, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(308753178), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alt2Wave02_Init () {
    gt_Alt2Wave02 = TriggerCreate("gt_Alt2Wave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt2 Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_Alt2Wave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(c_playerAny, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(308753178), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alt2Wave03_Init () {
    gt_Alt2Wave03 = TriggerCreate("gt_Alt2Wave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt2 Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_Alt2Wave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(c_playerAny, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(308753178), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alt2Wave04_Init () {
    gt_Alt2Wave04 = TriggerCreate("gt_Alt2Wave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt2 Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_Alt2Wave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(c_playerAny, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(308753178), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alt2Wave05_Init () {
    gt_Alt2Wave05 = TriggerCreate("gt_Alt2Wave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt2 Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_Alt2Wave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(c_playerAny, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(308753178), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alt2Wave06_Init () {
    gt_Alt2Wave06 = TriggerCreate("gt_Alt2Wave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alt2 Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_Alt2Wave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(4, "VoidThrasher", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(c_playerAny, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, PointFromId(308753178), true);
    UnitCreate(1, "HybridReaver", 0, 3, PointFromId(308753178), 270.0);
    AIAttackWaveUseUnit(3, UnitLastCreated());
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Alt2Wave07_Init () {
    gt_Alt2Wave07 = TriggerCreate("gt_Alt2Wave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1777823849));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1777823849));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1777823849));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1777823849));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1777823849));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1777823849));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1777823849));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1777823849));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1777823849));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1777823849));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1777823849));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1777823849));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1777823849));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1777823849));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, RegionGetCenter(gv_attackSpawn[gv_warningSpawn][1]), true);
    UnitCreate(1, "HybridReaver", 0, 3, UnitGetPosition(UnitGroupRandomUnit(libCOMI_gf_LastCreatedCoopAttackForce(), c_unitCountAlive)), 270.0);
    AIAttackWaveUseUnit(3, UnitLastCreated());
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Base Attack Wave 1
//--------------------------------------------------------------------------------------------------
bool gt_BonusBaseAttackWave1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackWaveGroup;

    // Automatic Variable Declarations
    int auto7C63624A_val;

    // Variable Initialization
    lv_attackWaveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    auto7C63624A_val = PlayerDifficulty(4);
    if (auto7C63624A_val == 1) {
        UnitCreate(1, "Oracle", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (auto7C63624A_val == 2) {
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (auto7C63624A_val == 3) {
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (auto7C63624A_val == 4) {
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1196946763), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackWaveGroup, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusBaseAttackWave1_Init () {
    gt_BonusBaseAttackWave1 = TriggerCreate("gt_BonusBaseAttackWave1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Base Attack Wave 2
//--------------------------------------------------------------------------------------------------
bool gt_BonusBaseAttackWave2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackWaveGroup;

    // Automatic Variable Declarations
    int autoD6B75E5F_val;

    // Variable Initialization
    lv_attackWaveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    autoD6B75E5F_val = PlayerDifficulty(3);
    if (autoD6B75E5F_val == 1) {
        UnitCreate(1, "Oracle", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoD6B75E5F_val == 2) {
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoD6B75E5F_val == 3) {
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoD6B75E5F_val == 4) {
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1761049629), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackWaveGroup, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusBaseAttackWave2_Init () {
    gt_BonusBaseAttackWave2 = TriggerCreate("gt_BonusBaseAttackWave2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Base Attack Wave 3
//--------------------------------------------------------------------------------------------------
bool gt_BonusBaseAttackWave3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackWaveGroup;

    // Automatic Variable Declarations
    int autoB7CB57BA_val;

    // Variable Initialization
    lv_attackWaveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    autoB7CB57BA_val = PlayerDifficulty(4);
    if (autoB7CB57BA_val == 1) {
        UnitCreate(1, "Oracle", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Oracle", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoB7CB57BA_val == 2) {
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoB7CB57BA_val == 3) {
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoB7CB57BA_val == 4) {
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1196946763), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackWaveGroup, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusBaseAttackWave3_Init () {
    gt_BonusBaseAttackWave3 = TriggerCreate("gt_BonusBaseAttackWave3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Base Attack Wave 4
//--------------------------------------------------------------------------------------------------
bool gt_BonusBaseAttackWave4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackWaveGroup;

    // Automatic Variable Declarations
    int auto316A22D7_val;

    // Variable Initialization
    lv_attackWaveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    auto316A22D7_val = PlayerDifficulty(3);
    if (auto316A22D7_val == 1) {
        UnitCreate(1, "Oracle", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Oracle", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (auto316A22D7_val == 2) {
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (auto316A22D7_val == 3) {
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (auto316A22D7_val == 4) {
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1761049629), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackWaveGroup, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusBaseAttackWave4_Init () {
    gt_BonusBaseAttackWave4 = TriggerCreate("gt_BonusBaseAttackWave4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Base Attack Wave 5
//--------------------------------------------------------------------------------------------------
bool gt_BonusBaseAttackWave5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackWaveGroup;

    // Automatic Variable Declarations
    int autoC9382EF6_val;

    // Variable Initialization
    lv_attackWaveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    autoC9382EF6_val = PlayerDifficulty(4);
    if (autoC9382EF6_val == 1) {
        UnitCreate(1, "Oracle", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoC9382EF6_val == 2) {
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoC9382EF6_val == 3) {
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoC9382EF6_val == 4) {
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 4, PointFromId(308753178), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1196946763), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackWaveGroup, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusBaseAttackWave5_Init () {
    gt_BonusBaseAttackWave5 = TriggerCreate("gt_BonusBaseAttackWave5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Base Attack Wave 6
//--------------------------------------------------------------------------------------------------
bool gt_BonusBaseAttackWave6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackWaveGroup;

    // Automatic Variable Declarations
    int autoB3A062B9_val;

    // Variable Initialization
    lv_attackWaveGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1075310905));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1075310905));
    autoB3A062B9_val = PlayerDifficulty(3);
    if (autoB3A062B9_val == 1) {
        UnitCreate(1, "Oracle", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Phoenix", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoB3A062B9_val == 2) {
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoB3A062B9_val == 3) {
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else if (autoB3A062B9_val == 4) {
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "VoidRay", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
        UnitCreate(1, "Tempest", 0, 3, PointFromId(1585046594), 270.0);
        UnitGroupAdd(lv_attackWaveGroup, UnitLastCreated());
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1761049629), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackWaveGroup, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusBaseAttackWave6_Init () {
    gt_BonusBaseAttackWave6 = TriggerCreate("gt_BonusBaseAttackWave6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Protect the Control Tower - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtecttheControlTowerCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    gv_objectiveProtecttheControlTower = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    ObjectiveSetDescription(ObjectiveLastCreated(), StringExternal("Param/Value/A1E6EF56"));
    TriggerExecute(gt_ObjectiveProtecttheControlTowerUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtecttheControlTowerCreate_Init () {
    gt_ObjectiveProtecttheControlTowerCreate = TriggerCreate("gt_ObjectiveProtecttheControlTowerCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Protect the Control Tower - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtecttheControlTowerComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtecttheControlTowerCreate, true, false);
    ObjectiveSetState(gv_objectiveProtecttheControlTower, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtecttheControlTowerComplete_Init () {
    gt_ObjectiveProtecttheControlTowerComplete = TriggerCreate("gt_ObjectiveProtecttheControlTowerComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Protect the Control Tower - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtecttheControlTowerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveProtecttheControlTowerCreate, true, false);
    TextExpressionSetToken("Param/Expression/87565C70", "timerRemaining", libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(gv_objectiveTimer))));
    ObjectiveSetName(gv_objectiveProtecttheControlTower, TextExpressionAssemble("Param/Expression/87565C70"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtecttheControlTowerUpdate_Init () {
    gt_ObjectiveProtecttheControlTowerUpdate = TriggerCreate("gt_ObjectiveProtecttheControlTowerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Protect the Control Tower - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveProtecttheControlTowerFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveProtecttheControlTowerCreate, true, false);
    ObjectiveSetState(gv_objectiveProtecttheControlTower, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveProtecttheControlTowerFailed_Init () {
    gt_ObjectiveProtecttheControlTowerFailed = TriggerCreate("gt_ObjectiveProtecttheControlTowerFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather High Yield Minerals - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherHighYieldMineralsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    gv_objectiveGatherHighYieldMinerals = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 7);
    ObjectiveSetDescription(ObjectiveLastCreated(), StringExternal("Param/Value/C347084B"));
    TriggerExecute(gt_ObjectiveGatherHighYieldMineralsUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherHighYieldMineralsCreate_Init () {
    gt_ObjectiveGatherHighYieldMineralsCreate = TriggerCreate("gt_ObjectiveGatherHighYieldMineralsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather High Yield Minerals - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherHighYieldMineralsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGatherHighYieldMineralsCreate, true, false);
    ObjectiveSetState(gv_objectiveGatherHighYieldMinerals, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherHighYieldMineralsComplete_Init () {
    gt_ObjectiveGatherHighYieldMineralsComplete = TriggerCreate("gt_ObjectiveGatherHighYieldMineralsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather High Yield Minerals - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherHighYieldMineralsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveGatherHighYieldMineralsCreate, true, false);
    TextExpressionSetToken("Param/Expression/EA46F879", "timerRemaining", IntToText((((((libNtve_gf_UnitGetPropertyResources(UnitFromId(944139218), c_unitPropCurrent) + libNtve_gf_UnitGetPropertyResources(UnitFromId(819185607), c_unitPropCurrent)) + (libNtve_gf_UnitGetPropertyResources(UnitFromId(1619778940), c_unitPropCurrent) + libNtve_gf_UnitGetPropertyResources(UnitFromId(1524364200), c_unitPropCurrent))) + ((libNtve_gf_UnitGetPropertyResources(UnitFromId(879535902), c_unitPropCurrent) + libNtve_gf_UnitGetPropertyResources(UnitFromId(1675033820), c_unitPropCurrent)) + (libNtve_gf_UnitGetPropertyResources(UnitFromId(1959611529), c_unitPropCurrent) + libNtve_gf_UnitGetPropertyResources(UnitFromId(1382572473), c_unitPropCurrent)))) + ((libNtve_gf_UnitGetPropertyResources(UnitFromId(820429894), c_unitPropCurrent) + libNtve_gf_UnitGetPropertyResources(UnitFromId(1118113766), c_unitPropCurrent)) + (libNtve_gf_UnitGetPropertyResources(UnitFromId(1415082218), c_unitPropCurrent) + libNtve_gf_UnitGetPropertyResources(UnitFromId(532564398), c_unitPropCurrent)))) - 3000)));
    ObjectiveSetName(gv_objectiveGatherHighYieldMinerals, TextExpressionAssemble("Param/Expression/EA46F879"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherHighYieldMineralsUpdate_Init () {
    gt_ObjectiveGatherHighYieldMineralsUpdate = TriggerCreate("gt_ObjectiveGatherHighYieldMineralsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_BankPreloading_Init();
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_DebugCantFail_Init();
    gt_StartGameQ_Init();
    gt_ObjectiveTimerWindow_Init();
    gt_UpdateStructureCount_Init();
    gt_ControlUnits_Init();
    gt_TimersAlerts_Init();
    gt_FixtheTardedBridges_Init();
    gt_ThrasherSpawning_Init();
    gt_CompleteBonus_Init();
    gt_EnemyAttackingQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_StartAI_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_MainWave01_Init();
    gt_MainWave02_Init();
    gt_MainWave03_Init();
    gt_MainWave04_Init();
    gt_MainWave05_Init();
    gt_MainWave06_Init();
    gt_MainWave07_Init();
    gt_AltWave02_Init();
    gt_AltWave03_Init();
    gt_AltWave04_Init();
    gt_AltWave05_Init();
    gt_AltWave06_Init();
    gt_AltWave07_Init();
    gt_Alt2Wave02_Init();
    gt_Alt2Wave03_Init();
    gt_Alt2Wave04_Init();
    gt_Alt2Wave05_Init();
    gt_Alt2Wave06_Init();
    gt_Alt2Wave07_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_BonusBaseAttackWave1_Init();
    gt_BonusBaseAttackWave2_Init();
    gt_BonusBaseAttackWave3_Init();
    gt_BonusBaseAttackWave4_Init();
    gt_BonusBaseAttackWave5_Init();
    gt_BonusBaseAttackWave6_Init();
    gt_ObjectiveProtecttheControlTowerCreate_Init();
    gt_ObjectiveProtecttheControlTowerComplete_Init();
    gt_ObjectiveProtecttheControlTowerUpdate_Init();
    gt_ObjectiveProtecttheControlTowerFailed_Init();
    gt_ObjectiveGatherHighYieldMineralsCreate_Init();
    gt_ObjectiveGatherHighYieldMineralsComplete_Init();
    gt_ObjectiveGatherHighYieldMineralsUpdate_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
