//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Oblivion Express
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03 = 8;
const int gv_pLAYER_04 = 9;
const int gv_pLAYER_03_AttackWaves_P1 = 8;
const int gv_pLAYER_04_AttackWaves_P2 = 9;
const int gv_pLAYER_07_TRAIN = 7;
const int gv_c_SpecialTrainEscort_Max = 4;
const int gv_c_MaxTrainCount = 15;
const int gv_c_MaxTrainEscortCount = 128;
const int gv_c_MaxTrainCarCount = 32;
const fixed gv_tRAIN_CAR_SEPERATION = 0.1;
const fixed gv_tRAIN_RADIUS = 1.75;
const int gv_c_FastTrainBottomLane_Total = 2;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_TrainEscort {
    unit lv_escort;
    string lv_unitType;
    int lv_escortCar;
    fixed lv_polarRadius;
    fixed lv_polarAngle;
    point lv_waitPosition;
};

struct gs_RECORD_Train {
    unit[gv_c_MaxTrainCarCount + 1] lv_trainCars;
    int lv_numberOfCars;
    int lv_lastCar;
    int lv_tunnel;
    int lv_spawnWave;
    fixed lv_maxLife;
    fixed lv_speedMultiplier;
    gs_RECORD_TrainEscort[gv_c_MaxTrainEscortCount + 1] lv_escorts;
    int lv_numberOfEscorts;
    wave lv_escortWave;
    bool lv_trainAlive;
    int lv_trainType;
    bool lv_initialized;
    int lv_trainStatus;
    fixed lv_trainMaxSpeed;
    unitgroup lv_trainCarsGroup;
};

struct gs_RECORD_TrainStation {
    point lv_position;
    int lv_state;
};

struct gs_RECORD_Charger {
    point lv_position;
    int lv_tunnel;
    int lv_numberOfCharges;
    int lv_state;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_TrainEvents_TrainEvent00Start = 0;
const int ge_TrainEvents_TrainEvent01 = 1;
const int ge_TrainEvents_TrainEvent02 = 2;
const int ge_TrainEvents_TrainEvent03 = 3;
const int ge_TrainEvents_TrainEvent04 = 4;
const int ge_TrainEvents_TrainEvent05 = 5;
const int ge_TrainEvents_TrainEvent06 = 6;
const int ge_TrainEvents_TrainEvent07 = 7;
const int ge_TrainEvents_TrainEvent08 = 8;
const int ge_TrainEvents_TrainEventListEnd = 9;
const int ge_PRESET_Tunnel__None = 0;
const int ge_PRESET_Tunnel_Top = 1;
const int ge_PRESET_Tunnel_Middle = 2;
const int ge_PRESET_Tunnel_Bottom = 3;
const int ge_PRESET_TrainType__None = 0;
const int ge_PRESET_TrainType_Soloable = 1;
const int ge_PRESET_TrainType_CoopNeeded = 2;
const int ge_PRESET_TrainType_BonusObjective = 3;
const int ge_PRESET_TrainStatus__Uninitialized = 0;
const int ge_PRESET_TrainStatus_Spawning = 1;
const int ge_PRESET_TrainStatus_Active = 2;
const int ge_PRESET_TrainStatus_Missed = 3;
const int ge_PRESET_TrainStatus_Destroyed = 4;
const int ge_PRESET_TrainStationState_Active = 0;
const int ge_PRESET_TrainStationState_Transitioning = 1;
const int ge_PRESET_TrainStationState_Inactive = 2;
const int ge_PRESET_ChargeState_Active = 0;
const int ge_PRESET_ChargeState_Inactive = 1;
const int ge_PRESET_ChargeState_Pulsing = 2;
const int ge_AttackDirection_Left = 0;
const int ge_AttackDirection_Right = 1;
const int ge_AttackDirection_Expansions = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
playergroup gv_aLLY_GROUP;
playergroup gv_eNEMY_GROUP;
int gv_c_AttackWavePrepTime;
string gv_mapMusicTrack;
int gv_leaderboardTrainScore;
int gv_leaderboardBonusScoreFinal;
int gv_leaderboardBonusScoreFinal2;
timer[11] gv_launchTrainTimers;
trigger[gv_c_MaxTrainCount + 1] gv_trainEventMap;
playergroup gv_attackWaveAIPlayers;
int[gv_c_SpecialTrainEscort_Max + 1] gv_specialTrainEscorts_Count;
string[gv_c_SpecialTrainEscort_Max + 1] gv_specialTrainEscorts_Type;
int gv_specialTrainEscorts_Spawn;
int gv_trainsNeeded;
gs_RECORD_Train[gv_c_MaxTrainCount + 1] gv_trainList;
point[256] gv_trainPath;
int gv_currentWave;
int gv_trainsDestroyed;
timer gv_nextTrainTimer;
unit gv_trainCarToAnimate;
fixed gv_trainCarToAnimateBreakPoint;
int gv_trainPathMidStart;
int gv_trainPathBottomStart;
int gv_numberOfTrainPathPoints;
int gv_trainToBeEscorted;
int gv_trainBossBarIndex;
fixed gv_trainDifficulty_Life;
fixed gv_trainDifficulty_LifeArmored;
fixed gv_trainDifficulty_LifeBObj;
fixed gv_trainDifficulty_Speed;
fixed gv_trainDifficulty_SpeedBObj;
fixed gv_trainDifficulty_SpeedArmored;
int gv_trainDifficulty_CarCount;
int gv_trainDifficulty_CarCountArmored;
fixed gv_trainDifficulty_LifeIncreasePerWave;
bool[4] gv_trainPathInUse;
point gv_lastTrainLocation;
int[7] gv_trainTypeCount;
int gv_revealTrainType_Dialog;
int gv_revealTrainType_DialogTrainType;
timer[gv_c_FastTrainBottomLane_Total + 1] gv_bonusObjectiveTrainTimer;
unitgroup gv_ignoreAoEDamage;
fixed[3] gv_runningTrainDamage;
fixed[gv_c_MaxTrainCount + 1] gv_trainLastKnownLife;
int gv_trainNextID;
gs_RECORD_TrainStation[16] gv_trainStations;
int gv_numberOfTrainStations;
int gv_currentTrainStationGlobal;
gs_RECORD_Charger[64] gv_chargers;
int gv_numberOfChargers;
bool gv_finalStageLinePlayed;
bool gv_firstTrainSpawn;
bool gv_firstTrainEscape;
int gv_objective_TheGreatTrainRobbery;
int gv_objective_DontMissTrains;
int gv_trainsMissed;
int gv_trainsMissed_Max;
int gv_objective_FastTrainBottomLane;
int gv_fastTrainBottomLane_Destroyed;
int gv_fastTrainBottomLane_Escaped;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_aLLY_GROUP = PlayerGroupEmpty();
    gv_eNEMY_GROUP = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_launchTrainTimers[init_i] = TimerCreate();
    }
    gv_attackWaveAIPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_c_MaxTrainCount; init_i += 1) {
        gv_trainList[init_i].lv_numberOfCars = 8;
        gv_trainList[init_i].lv_tunnel = ge_PRESET_Tunnel_Top;
        gv_trainList[init_i].lv_spawnWave = 1;
        gv_trainList[init_i].lv_maxLife = 25000.0;
        gv_trainList[init_i].lv_speedMultiplier = 1.0;
        for (init_i1 = 0; init_i1 <= gv_c_MaxTrainEscortCount; init_i1 += 1) {
            gv_trainList[init_i].lv_escorts[init_i1].lv_unitType = "Marine";
        }
        gv_trainList[init_i].lv_trainType = ge_PRESET_TrainType__None;
        gv_trainList[init_i].lv_trainStatus = ge_PRESET_TrainStatus__Uninitialized;
        gv_trainList[init_i].lv_trainCarsGroup = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 255; init_i += 1) {
        gv_trainPath[init_i] = PointFromId(239);
    }
    gv_currentWave = 1;
    gv_nextTrainTimer = TimerCreate();
    gv_revealTrainType_Dialog = c_invalidDialogId;
    gv_revealTrainType_DialogTrainType = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_c_FastTrainBottomLane_Total; init_i += 1) {
        gv_bonusObjectiveTrainTimer[init_i] = TimerCreate();
    }
    gv_ignoreAoEDamage = UnitGroupEmpty();
    gv_trainNextID = 1;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_trainStations[init_i].lv_state = ge_PRESET_TrainStationState_Inactive;
    }
    for (init_i = 0; init_i <= 63; init_i += 1) {
        gv_chargers[init_i].lv_tunnel = ge_PRESET_Tunnel_Top;
        gv_chargers[init_i].lv_state = ge_PRESET_ChargeState_Inactive;
    }
    gv_firstTrainSpawn = true;
    gv_firstTrainEscape = true;
    gv_objective_TheGreatTrainRobbery = c_invalidObjectiveId;
    gv_objective_DontMissTrains = c_invalidObjectiveId;
    gv_objective_FastTrainBottomLane = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_IncreaseTrainLife ();
void gf_SendAttackWaveatMissionTime (trigger lp_triggerToExecute, fixed lp_missionTimeToExecute);
void gf_LaunchTrainatTime (trigger lp_triggerToExecute, fixed lp_time);
void gf_DoEventatMissionTime (trigger lp_triggerToExecute, fixed lp_missionTimeToExecute);
void gf_SetSpawnandGatherPointforAIAttackWave (playergroup lp_players, point lp_spawnGather);
void gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint);
void gf_ActivatePingforTrainEngine (unit lp_trainCar);
point gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex);
void gf_SpawnaTrain (int lp_tunnel, int lp_trainType, int lp_trainListIndex);
void gf_AssignEscortsToTrainFront (int lp_trainIndex, unitgroup lp_escortGroup, int lp_trainTunnel);
void gf_SpawnTrainCarDamagedUnits (unit lp_trainCar, fixed lp_breakPoint);
void gf_TrainCarPing (unit lp_trainCar);
void gf_TrainDeath (unit lp_trainEngine, int lp_trainListIndex);
int gf_NextAvailableTrainListIndex ();
int gf_RandomTunnel (int lp_exclude);
void gf_RevealTrainLane (int lp_tunnel);
text gf_GetTrainTypeName (int lp_trainType);
void gf_InitializeCharger (point lp_position, int lp_tunnel, int lp_index);
void gf_SetupAttackPath (playergroup lp_attackingPlayers, int lp_attackVector);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init03LoadingComplete;
trigger gt_Init05Units;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;
trigger gt_EventController;
trigger gt_AIEvent01AttackWave4minLeftSide;
trigger gt_TrainEvent01TrainTopLane5min;
trigger gt_AIEvent02AttackWave6minRightSide;
trigger gt_AIEvent03AttackWave7minLeftSide;
trigger gt_TrainEvent02TrainMidLane8min;
trigger gt_AIEvent04AttackWave10minRightSide;
trigger gt_TrainEvent03TrainTopLane11min;
trigger gt_AIEvent0412minBunker;
trigger gt_AIEvent05AttackWave13minLeftSideExpo;
trigger gt_TrainEvent04TrainTopMidLane14min;
trigger gt_AIEvent06AttackWave16minLeftSide;
trigger gt_TrainEvent05TrainMidLane17min;
trigger gt_AIEvent07AttackWave19minRightSideExpo;
trigger gt_TrainEvent06TraintopMidLane20min;
trigger gt_AIEvent08AttackWave22minLeftSide;
trigger gt_TrainEvent07TrainMidLane23min;
trigger gt_AIEvent09AttackWave24minRightSide;
trigger gt_TrainEvent08TrainDoubleSingle25min;
trigger gt_TrainPathInitialization;
trigger gt_TrainPathInitializationForward;
trigger gt_TrainPathInitializationBackward;
trigger gt_SpawnEscorts;
trigger gt_TrainMovement;
trigger gt_TrainDespawn;
trigger gt_EscortDespawn;
trigger gt_TrainCarDamageAnimationController;
trigger gt_BonusObjectiveTrain01;
trigger gt_BonusObjectiveTrain02;
trigger gt_ScoreScreenTrainDamageTaken;
trigger gt_InitializeTrainStations;
trigger gt_InitializeChargers;
trigger gt_TrainStationController;
trigger gt_ChargePulseController;
trigger gt_ActivateStation;
trigger gt_DeactivateStation;
trigger gt_TrainSpawnAnimations;
trigger gt_TrainDespawnAnimationsTop;
trigger gt_TrainDespawnAnimationsMid;
trigger gt_TrainDespawnAnimationsBottom;
trigger gt_RevealBottomLane;
trigger gt_RevealMiddleLane;
trigger gt_RevealTopLane;
trigger gt_TrainEscapingTopQ;
trigger gt_TrainEscapingBottomQ;
trigger gt_TrainSpawnedQ;
trigger gt_TrainSpawnedAlmostDoneQ;
trigger gt_TrainSpawnedFinalStageQ;
trigger gt_TrainSpawnedQ2;
trigger gt_TrainSpawnedQ3;
trigger gt_TrainSpawnedQ4;
trigger gt_TrainSpawnedQ5;
trigger gt_BonusTrainDestroyedQ;
trigger gt_BonusTrainSpawned01Q;
trigger gt_BonusTrainSpawned02Q;
trigger gt_IncomingAttackWaveQ;
trigger gt_TrainVictoryQ;
trigger gt_ExpansionBulliesStructures;
trigger gt_ExpansionBulliesUnits;
trigger gt_BunkerDeath;
trigger gt_RunFortifyTrackswithDefenses;
trigger gt_TipReadyQ;
trigger gt_DefeatTooManyTrainsMissed;
trigger gt_VictoryTrainsDestroyedCompleted;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_ObjectiveTheGreatTrainRobberyCreate;
trigger gt_ObjectiveTheGreatTrainRobberyUpdate;
trigger gt_ObjectiveTheGreatTrainRobberyComplete;
trigger gt_ObjectiveTheGreatTrainRobberyFailed;
trigger gt_ObjectiveDontMissTrainsCreate;
trigger gt_ObjectiveDontMissTrainsUpdate;
trigger gt_ObjectiveDontMissTrainsComplete;
trigger gt_ObjectiveDontMissTrainsFailed;
trigger gt_ObjectiveFastTrainBottomLaneCreate;
trigger gt_ObjectiveFastTrainBottomLaneUpdate;
trigger gt_ObjectiveFastTrainBottomLaneComplete;
trigger gt_ObjectiveFastTrainBottomLaneFailed;
trigger gt_VictoryQ;
trigger gt_VictoryFanfare;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_IncreaseTrainLife () {
    // Automatic Variable Declarations
    // Implementation
    gv_trainDifficulty_Life += gv_trainDifficulty_LifeIncreasePerWave;
    gv_trainDifficulty_LifeArmored = (gv_trainDifficulty_Life * 2.0);
    gv_trainDifficulty_LifeBObj = (gv_trainDifficulty_Life * 1.25);
}

trigger auto_gf_SendAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_SendAttackWaveatMissionTime_lp_triggerToExecute;
fixed auto_gf_SendAttackWaveatMissionTime_lp_missionTimeToExecute;

void gf_SendAttackWaveatMissionTime (trigger lp_triggerToExecute, fixed lp_missionTimeToExecute) {
    auto_gf_SendAttackWaveatMissionTime_lp_triggerToExecute = lp_triggerToExecute;
    auto_gf_SendAttackWaveatMissionTime_lp_missionTimeToExecute = lp_missionTimeToExecute;

    if (auto_gf_SendAttackWaveatMissionTime_Trigger == null) {
        auto_gf_SendAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_SendAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_SendAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_triggerToExecute = auto_gf_SendAttackWaveatMissionTime_lp_triggerToExecute;
    fixed lp_missionTimeToExecute = auto_gf_SendAttackWaveatMissionTime_lp_missionTimeToExecute;

    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= (lp_missionTimeToExecute - gv_c_AttackWavePrepTime)))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_triggerToExecute, true, false);
    }

    return true;
}

void gf_LaunchTrainatTime (trigger lp_triggerToExecute, fixed lp_time) {
    // Variable Declarations
    int lv_eventIter;

    // Automatic Variable Declarations
    int auto160A1BE6_ae;
    const int auto160A1BE6_ai = 1;

    // Variable Initialization

    // Implementation
    auto160A1BE6_ae = ge_TrainEvents_TrainEventListEnd;
    lv_eventIter = ge_TrainEvents_TrainEvent00Start;
    for ( ; ( (auto160A1BE6_ai >= 0 && lv_eventIter <= auto160A1BE6_ae) || (auto160A1BE6_ai < 0 && lv_eventIter >= auto160A1BE6_ae) ) ; lv_eventIter += auto160A1BE6_ai ) {
        if ((gv_trainEventMap[lv_eventIter] == lp_triggerToExecute)) {
            TimerStart(gv_launchTrainTimers[lv_eventIter], lp_time, false, c_timeAI);
            return ;
        }

    }
    breakpoint;
}

trigger auto_gf_DoEventatMissionTime_Trigger = null;
trigger auto_gf_DoEventatMissionTime_lp_triggerToExecute;
fixed auto_gf_DoEventatMissionTime_lp_missionTimeToExecute;

void gf_DoEventatMissionTime (trigger lp_triggerToExecute, fixed lp_missionTimeToExecute) {
    auto_gf_DoEventatMissionTime_lp_triggerToExecute = lp_triggerToExecute;
    auto_gf_DoEventatMissionTime_lp_missionTimeToExecute = lp_missionTimeToExecute;

    if (auto_gf_DoEventatMissionTime_Trigger == null) {
        auto_gf_DoEventatMissionTime_Trigger = TriggerCreate("auto_gf_DoEventatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoEventatMissionTime_Trigger, false, false);
}

bool auto_gf_DoEventatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_triggerToExecute = auto_gf_DoEventatMissionTime_lp_triggerToExecute;
    fixed lp_missionTimeToExecute = auto_gf_DoEventatMissionTime_lp_missionTimeToExecute;

    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionTimeToExecute))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_triggerToExecute, true, false);
    }

    return true;
}

void gf_SetSpawnandGatherPointforAIAttackWave (playergroup lp_players, point lp_spawnGather) {
    // Variable Declarations
    int lv_playerIter;

    // Automatic Variable Declarations
    playergroup auto2ED2CEE5_g;

    // Variable Initialization

    // Implementation
    auto2ED2CEE5_g = lp_players;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto2ED2CEE5_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lv_playerIter] = lp_spawnGather;
        libCOMI_gf_SetCoopAIGatherPoint(lv_playerIter, lp_spawnGather);
    }
}

void gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint) {
    // Automatic Variable Declarations
    // Implementation
    gv_trainCarToAnimate = lp_trainCar;
    gv_trainCarToAnimateBreakPoint = lp_breakPoint;
    TriggerExecute(gt_TrainCarDamageAnimationController, true, false);
}

trigger auto_gf_ActivatePingforTrainEngine_Trigger = null;
unit auto_gf_ActivatePingforTrainEngine_lp_trainCar;

void gf_ActivatePingforTrainEngine (unit lp_trainCar) {
    auto_gf_ActivatePingforTrainEngine_lp_trainCar = lp_trainCar;

    if (auto_gf_ActivatePingforTrainEngine_Trigger == null) {
        auto_gf_ActivatePingforTrainEngine_Trigger = TriggerCreate("auto_gf_ActivatePingforTrainEngine_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivatePingforTrainEngine_Trigger, false, false);
}

bool auto_gf_ActivatePingforTrainEngine_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainCar = auto_gf_ActivatePingforTrainEngine_lp_trainCar;

    // Variable Declarations
    int lv_trainPingLocal;
    int lv_trainIndexLocal;
    int lv_trainCarIndexLocal;

    // Automatic Variable Declarations
    const int auto7FBD71EA_ae = gv_c_MaxTrainCount;
    const int auto7FBD71EA_ai = 1;

    // Variable Initialization
    lv_trainPingLocal = c_invalidPingId;

    // Implementation
    lv_trainIndexLocal = 1;
    for ( ; ( (auto7FBD71EA_ai >= 0 && lv_trainIndexLocal <= auto7FBD71EA_ae) || (auto7FBD71EA_ai < 0 && lv_trainIndexLocal >= auto7FBD71EA_ae) ) ; lv_trainIndexLocal += auto7FBD71EA_ai ) {
        if ((gv_trainList[lv_trainIndexLocal].lv_trainCars[1] == lp_trainCar)) {
            break;
        }

    }
    if ((gv_trainList[lv_trainIndexLocal].lv_trainType != ge_PRESET_TrainType_BonusObjective)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lp_trainCar), StringExternal("Param/Value/D525E40E"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lp_trainCar), StringExternal("Param/Value/35712537"));
    }
    lv_trainPingLocal = PingLastCreated();
    PingSetUnit(lv_trainPingLocal, lp_trainCar);
    TextExpressionSetToken("Param/Expression/47029DA4", "TrainTypeName", gf_GetTrainTypeName(gv_trainList[lv_trainIndexLocal].lv_trainType));
    PingSetTooltip(lv_trainPingLocal, TextExpressionAssemble("Param/Expression/47029DA4"));
    lv_trainCarIndexLocal = 1;
    while (true) {
        if ((lv_trainCarIndexLocal <= gv_c_MaxTrainCarCount) && (gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_trainCarIndexLocal] != null)) {
            if ((UnitIsAlive(gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_trainCarIndexLocal]) == false)) {
                lv_trainCarIndexLocal += 1;
                continue;
            }
            else {
                PingSetUnit(lv_trainPingLocal, gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_trainCarIndexLocal]);
            }
        }
        else {
            break;
        }
        Wait(0.1, c_timeGame);
    }
    PingDestroy(lv_trainPingLocal);
    return true;
}

point gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex) {
    // Variable Declarations
    fixed lv_seperationDistanceLocal;
    int lv_iLocal;
    point lv_currentPointLocal;
    int lv_currentTargetLocal;
    fixed lv_distanceRemainingLocal;

    // Automatic Variable Declarations
    int auto9E7AD11F_ae;
    const int auto9E7AD11F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_seperationDistanceLocal = (gv_tRAIN_CAR_SEPERATION + (2.0 * gv_tRAIN_RADIUS));
    lv_currentPointLocal = gv_trainPath[lp_pathIndex];
    lv_currentTargetLocal = (lp_pathIndex + 1);
    if ((lp_trainCar <= 1)) {
        return gv_trainPath[lp_pathIndex];
    }

    auto9E7AD11F_ae = lp_trainCar;
    lv_iLocal = 2;
    for ( ; ( (auto9E7AD11F_ai >= 0 && lv_iLocal <= auto9E7AD11F_ae) || (auto9E7AD11F_ai < 0 && lv_iLocal >= auto9E7AD11F_ae) ) ; lv_iLocal += auto9E7AD11F_ai ) {
        lv_distanceRemainingLocal = lv_seperationDistanceLocal;
        if ((lv_seperationDistanceLocal <= DistanceBetweenPoints(lv_currentPointLocal, gv_trainPath[(lv_currentTargetLocal - 1)]))) {
            lv_currentPointLocal = PointWithOffsetPolar(lv_currentPointLocal, lv_seperationDistanceLocal, AngleBetweenPoints(lv_currentPointLocal, gv_trainPath[(lv_currentTargetLocal - 1)]));
        }
        else {
            while (true) {
                lv_distanceRemainingLocal = (lv_distanceRemainingLocal - DistanceBetweenPoints(lv_currentPointLocal, gv_trainPath[(lv_currentTargetLocal - 1)]));
                lv_currentTargetLocal -= 1;
                if ((lv_currentTargetLocal < 1)) {
                    return gv_trainPath[lp_pathIndex];
                }

                if ((lv_distanceRemainingLocal <= DistanceBetweenPoints(gv_trainPath[lv_currentTargetLocal], gv_trainPath[(lv_currentTargetLocal - 1)]))) {
                    lv_currentPointLocal = PointWithOffsetPolar(gv_trainPath[lv_currentTargetLocal], lv_distanceRemainingLocal, AngleBetweenPoints(gv_trainPath[lv_currentTargetLocal], gv_trainPath[(lv_currentTargetLocal - 1)]));
                    break;
                }

            }
        }
    }
    PointSetFacing(lv_currentPointLocal, AngleBetweenPoints(lv_currentPointLocal, gv_trainPath[lv_currentTargetLocal]));
    return lv_currentPointLocal;
}

trigger auto_gf_SpawnaTrain_Trigger = null;
int auto_gf_SpawnaTrain_lp_tunnel;
int auto_gf_SpawnaTrain_lp_trainType;
int auto_gf_SpawnaTrain_lp_trainListIndex;

void gf_SpawnaTrain (int lp_tunnel, int lp_trainType, int lp_trainListIndex) {
    auto_gf_SpawnaTrain_lp_tunnel = lp_tunnel;
    auto_gf_SpawnaTrain_lp_trainType = lp_trainType;
    auto_gf_SpawnaTrain_lp_trainListIndex = lp_trainListIndex;

    if (auto_gf_SpawnaTrain_Trigger == null) {
        auto_gf_SpawnaTrain_Trigger = TriggerCreate("auto_gf_SpawnaTrain_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnaTrain_Trigger, false, false);
}

bool auto_gf_SpawnaTrain_TriggerFunc (bool testConds, bool runActions) {
    int lp_tunnel = auto_gf_SpawnaTrain_lp_tunnel;
    int lp_trainType = auto_gf_SpawnaTrain_lp_trainType;
    int lp_trainListIndex = auto_gf_SpawnaTrain_lp_trainListIndex;

    // Variable Declarations
    int lv_currentCarLocal;
    point lv_spawnLocationLocal;
    int lv_initialCustomValueLocal;
    string lv_trainCarTypeLocal;
    fixed lv_thisTrainSpeedLocal;
    fixed lv_thisTrainLifeLocal;
    int lv_thisNumberOfCarsLocal;
    int lv_trainID;
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    int autoFED8F9DD_val;
    int autoCE386571_val;
    int auto2D67569D_ae;
    const int auto2D67569D_ai = 1;
    int autoE80775C6_val;

    // Variable Initialization
    lv_trainID = gv_trainNextID;
    lv_trainCars = UnitGroupEmpty();

    // Implementation
    gv_trainNextID += 1;
    gv_trainList[lp_trainListIndex].lv_initialized = true;
    gv_trainList[lp_trainListIndex].lv_trainStatus = ge_PRESET_TrainStatus_Spawning;
    gv_trainList[lp_trainListIndex].lv_trainAlive = true;
    gv_trainList[lp_trainListIndex].lv_spawnWave = gv_currentWave;
    gv_trainList[lp_trainListIndex].lv_tunnel = lp_tunnel;
    gv_trainList[lp_trainListIndex].lv_trainType = lp_trainType;
    gv_trainTypeCount[(lp_trainType)] += 1;
    autoFED8F9DD_val = lp_trainType;
    if (autoFED8F9DD_val == ge_PRESET_TrainType_CoopNeeded) {
        lv_thisTrainLifeLocal = gv_trainDifficulty_LifeArmored;
        lv_thisTrainSpeedLocal = gv_trainDifficulty_SpeedArmored;
        lv_thisNumberOfCarsLocal = gv_trainDifficulty_CarCountArmored;
    }
    else if (autoFED8F9DD_val == ge_PRESET_TrainType_BonusObjective) {
        lv_thisTrainLifeLocal = gv_trainDifficulty_LifeBObj;
        lv_thisTrainSpeedLocal = gv_trainDifficulty_SpeedBObj;
        lv_thisNumberOfCarsLocal = gv_trainDifficulty_CarCount;
    }
    else {
        lv_thisTrainLifeLocal = gv_trainDifficulty_Life;
        lv_thisTrainSpeedLocal = gv_trainDifficulty_Speed;
        lv_thisNumberOfCarsLocal = gv_trainDifficulty_CarCount;
    }
    gv_trainList[lp_trainListIndex].lv_numberOfCars = lv_thisNumberOfCarsLocal;
    autoCE386571_val = lp_tunnel;
    if (autoCE386571_val == ge_PRESET_Tunnel_Top) {
        lv_spawnLocationLocal = PointFromId(345);
        lv_initialCustomValueLocal = 1;
    }
    else if (autoCE386571_val == ge_PRESET_Tunnel_Middle) {
        lv_spawnLocationLocal = PointFromId(486);
        lv_initialCustomValueLocal = gv_trainPathMidStart;
    }
    else if (autoCE386571_val == ge_PRESET_Tunnel_Bottom) {
        lv_spawnLocationLocal = PointFromId(487);
        lv_initialCustomValueLocal = gv_trainPathBottomStart;
    }
    else {
    }
    TriggerExecute(gt_TrainSpawnAnimations, true, false);
    auto2D67569D_ae = lv_thisNumberOfCarsLocal;
    lv_currentCarLocal = 1;
    for ( ; ( (auto2D67569D_ai >= 0 && lv_currentCarLocal <= auto2D67569D_ae) || (auto2D67569D_ai < 0 && lv_currentCarLocal >= auto2D67569D_ae) ) ; lv_currentCarLocal += auto2D67569D_ai ) {
        if ((lv_currentCarLocal != 1) && (UnitIsAlive(gv_trainList[lp_trainListIndex].lv_trainCars[1]) == false)) {
            return true;
        }

        if ((lv_currentCarLocal == 1)) {
            autoE80775C6_val = lp_trainType;
            if (autoE80775C6_val == ge_PRESET_TrainType_BonusObjective) {
                lv_trainCarTypeLocal = "TarsonisEngineFast";
            }
            else {
                lv_trainCarTypeLocal = "TarsonisEngine";
            }
        }
        else {
            if ((lp_trainType == ge_PRESET_TrainType_CoopNeeded) && (lv_currentCarLocal == 2)) {
                lv_trainCarTypeLocal = "TarsonisEngine";
            }
            else {
                if ((lv_thisNumberOfCarsLocal == lv_currentCarLocal)) {
                    lv_trainCarTypeLocal = "Caboose";
                }
                else {
                    lv_trainCarTypeLocal = "FreightCar";
                }
            }
        }
        libNtve_gf_CreateUnitsAtPoint2(1, lv_trainCarTypeLocal, c_unitCreateIgnorePlacement, gv_pLAYER_07_TRAIN, lv_spawnLocationLocal);
        gv_trainList[lp_trainListIndex].lv_trainCars[lv_currentCarLocal] = UnitLastCreated();
        UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lv_initialCustomValueLocal));
        UnitSetCustomValue(UnitLastCreated(), 2, IntToFixed(lv_trainID));
        if ((lp_trainType != ge_PRESET_TrainType_BonusObjective)) {
            UnitSetCustomValue(UnitLastCreated(), 1, IntToFixed(gv_currentWave));
        }

        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_thisTrainSpeedLocal);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_thisTrainLifeLocal);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_thisTrainLifeLocal);
        if ((lv_currentCarLocal > 1)) {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, UnitGetPropertyFixed(gv_trainList[lp_trainListIndex].lv_trainCars[1], c_unitPropLife, c_unitPropCurrent));
        }
        else {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        }
        UnitGroupAdd(lv_trainCars, UnitLastCreated());
        gf_TrainCarPing(UnitLastCreated());
        if ((lv_currentCarLocal > 1)) {
            ActorLookAtStart(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Chest", 100, 0.0, libNtve_gf_MainActorofUnit(gv_trainList[lp_trainListIndex].lv_trainCars[(lv_currentCarLocal - 1)]));
        }
        else {
            gv_trainList[lp_trainListIndex].lv_trainCarsGroup = lv_trainCars;
            libCOMI_gf_SynchronizeConjoinedTrainHealth(lv_trainCars, lv_thisTrainLifeLocal);
        }
        gf_PlayDamagedAnimationsforTrainCar(UnitLastCreated(), ((100.0 / (lv_thisNumberOfCarsLocal + 1.0)) * IntToFixed(lv_currentCarLocal)));
        if ((gv_currentWave > 2) && (lp_trainType != ge_PRESET_TrainType_BonusObjective) && ((lv_currentCarLocal == 2) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 1, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 1, 1, 1, 1) == 1) && (lv_currentCarLocal == 3)) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 0, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 0, 1, 1, 1) == 1) && (lv_currentCarLocal == 6)) || (lv_currentCarLocal == 8) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 1, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 1, 1, 1, 1) == 1) && (lv_currentCarLocal == 9)) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 0, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 0, 1, 1, 1) == 1) && (lv_currentCarLocal == 12)))) {
            gf_SpawnTrainCarDamagedUnits(UnitLastCreated(), ((100.0 / (lv_thisNumberOfCarsLocal + 1.0)) * IntToFixed(lv_currentCarLocal)));
        }

        if ((lv_thisNumberOfCarsLocal == lv_currentCarLocal)) {
            gv_trainList[lp_trainListIndex].lv_lastCar = lv_currentCarLocal;
        }

        if ((lv_currentCarLocal == 1)) {
            gv_trainLastKnownLife[lp_trainListIndex] = UnitGetPropertyFixed(gv_trainList[lp_trainListIndex].lv_trainCars[lv_currentCarLocal], c_unitPropLifeMax, c_unitPropCurrent);
            gf_ActivatePingforTrainEngine(UnitLastCreated());
            gv_trainToBeEscorted = lp_trainListIndex;
            if ((lp_trainType != ge_PRESET_TrainType_BonusObjective)) {
                TriggerExecute(gt_SpawnEscorts, true, false);
            }

            gf_TrainDeath(UnitLastCreated(), lp_trainListIndex);
        }

        Wait(((gv_tRAIN_CAR_SEPERATION + (gv_tRAIN_RADIUS * 2.0)) / lv_thisTrainSpeedLocal), c_timeGame);
        if ((lv_trainCarTypeLocal == "TarsonisEngine")) {
            Wait(0.4, c_timeGame);
        }

    }
    gv_trainList[lp_trainListIndex].lv_trainStatus = ge_PRESET_TrainStatus_Active;
    gv_trainPathInUse[(lp_tunnel)] = true;
    return true;
}

void gf_AssignEscortsToTrainFront (int lp_trainIndex, unitgroup lp_escortGroup, int lp_trainTunnel) {
    // Variable Declarations
    fixed lv_angleToExitLocal;
    unit lv_escortIterLocal;
    fixed lv_distanceFromTrainCarLocal;
    fixed lv_distanceFromTrainCarIncreaseLocal;
    int lv_escortsPerRowLocal;
    int lv_escortsPerRowIterLocal;
    point lv_baseEscortOffsetLocal;
    point lv_escortOffsetLocal;
    fixed lv_escortAngleLocal;
    fixed lv_escortBufferLocal;
    point lv_startLocationLocal;

    // Automatic Variable Declarations
    int auto55B97BBB_val;
    string autoD507E854_val;
    unitgroup auto374C09A9_g;
    int auto374C09A9_u;

    // Variable Initialization

    // Implementation
    lv_escortsPerRowLocal = 3;
    auto55B97BBB_val = gv_trainList[lp_trainIndex].lv_tunnel;
    if (auto55B97BBB_val == ge_PRESET_Tunnel_Top) {
        lv_startLocationLocal = gf_ExpectedPositionofTrainCar(1, 8);
    }
    else if (auto55B97BBB_val == ge_PRESET_Tunnel_Middle) {
        lv_startLocationLocal = gf_ExpectedPositionofTrainCar(1, (gv_trainPathMidStart + 7));
    }
    else if (auto55B97BBB_val == ge_PRESET_Tunnel_Bottom) {
        lv_startLocationLocal = gf_ExpectedPositionofTrainCar(1, (gv_trainPathBottomStart + 13));
    }
    else {
    }
    autoD507E854_val = PlayerRace(gv_pLAYER_07_TRAIN);
    if (autoD507E854_val == "Terr") {
        lv_distanceFromTrainCarLocal = 2.0;
        lv_distanceFromTrainCarIncreaseLocal = 2.0;
        lv_escortBufferLocal = 1.0;
    }
    else if (autoD507E854_val == "Prot") {
        lv_distanceFromTrainCarLocal = 1.5;
        lv_distanceFromTrainCarIncreaseLocal = 2.5;
        lv_escortBufferLocal = 1.5;
    }
    else {
        lv_distanceFromTrainCarLocal = 1.0;
        lv_distanceFromTrainCarIncreaseLocal = 1.0;
        lv_escortBufferLocal = 1.0;
    }
    lv_angleToExitLocal = PointGetFacing(lv_startLocationLocal);
    lv_escortAngleLocal = 90.0;
    lv_escortsPerRowIterLocal = 0;
    auto374C09A9_g = lp_escortGroup;
    auto374C09A9_u = UnitGroupCount(auto374C09A9_g, c_unitCountAll);
    for (;; auto374C09A9_u -= 1) {
        lv_escortIterLocal = UnitGroupUnitFromEnd(auto374C09A9_g, auto374C09A9_u);
        if (lv_escortIterLocal == null) { break; }
        if ((gv_trainList[lp_trainIndex].lv_numberOfEscorts < gv_c_MaxTrainEscortCount)) {
            gv_trainList[lp_trainIndex].lv_numberOfEscorts += 1;
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_escort = lv_escortIterLocal;
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_unitType = UnitGetType(lv_escortIterLocal);
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_escortCar = 1;
            lv_escortAngleLocal += 180.0;
            if ((lv_escortsPerRowIterLocal > lv_escortsPerRowLocal)) {
                lv_escortsPerRowIterLocal = 0;
                lv_distanceFromTrainCarLocal += lv_distanceFromTrainCarIncreaseLocal;
            }
            else {
                lv_escortsPerRowIterLocal += 1;
            }
            if ((PlayerRace(gv_pLAYER_07_TRAIN) == "Zerg")) {
                lv_baseEscortOffsetLocal = PointWithOffsetPolar(lv_startLocationLocal, (lv_distanceFromTrainCarLocal + RandomFixed(-1.5, 1.5)), (lv_angleToExitLocal + RandomFixed(-15.0, 15.0)));
                lv_escortOffsetLocal = PointWithOffsetPolar(lv_baseEscortOffsetLocal, (lv_escortBufferLocal * lv_escortsPerRowIterLocal), (lv_escortAngleLocal + lv_angleToExitLocal));
            }
            else {
                lv_baseEscortOffsetLocal = PointWithOffsetPolar(lv_startLocationLocal, lv_distanceFromTrainCarLocal, lv_angleToExitLocal);
                lv_escortOffsetLocal = PointWithOffsetPolar(lv_baseEscortOffsetLocal, (lv_escortBufferLocal * lv_escortsPerRowIterLocal), (lv_escortAngleLocal + lv_angleToExitLocal));
            }
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_polarRadius = DistanceBetweenPoints(lv_startLocationLocal, lv_escortOffsetLocal);
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_polarAngle = (AngleBetweenPoints(lv_startLocationLocal, lv_escortOffsetLocal) - lv_angleToExitLocal);
        }
        else {
            AIAttackWaveUseUnit(gv_pLAYER_07_TRAIN, lv_escortIterLocal);
        }
    }
}

trigger auto_gf_SpawnTrainCarDamagedUnits_Trigger = null;
unit auto_gf_SpawnTrainCarDamagedUnits_lp_trainCar;
fixed auto_gf_SpawnTrainCarDamagedUnits_lp_breakPoint;

void gf_SpawnTrainCarDamagedUnits (unit lp_trainCar, fixed lp_breakPoint) {
    auto_gf_SpawnTrainCarDamagedUnits_lp_trainCar = lp_trainCar;
    auto_gf_SpawnTrainCarDamagedUnits_lp_breakPoint = lp_breakPoint;

    if (auto_gf_SpawnTrainCarDamagedUnits_Trigger == null) {
        auto_gf_SpawnTrainCarDamagedUnits_Trigger = TriggerCreate("auto_gf_SpawnTrainCarDamagedUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnTrainCarDamagedUnits_Trigger, false, false);
}

bool auto_gf_SpawnTrainCarDamagedUnits_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainCar = auto_gf_SpawnTrainCarDamagedUnits_lp_trainCar;
    fixed lp_breakPoint = auto_gf_SpawnTrainCarDamagedUnits_lp_breakPoint;

    // Variable Declarations
    point lv_PointAheadOfCar;
    point lv_PointOffSetAndAhead;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_trainCar) == false)) {
            return true;
        }

        if ((UnitGetPropertyFixed(lp_trainCar, c_unitPropLifePercent, c_unitPropCurrent) <= lp_breakPoint)) {
            break;
        }

    }
    Wait(2.0, c_timeAI);
    if ((UnitIsAlive(lp_trainCar) == false)) {
        return true;
    }

    lv_PointAheadOfCar = PointWithOffsetPolar(UnitGetPosition(lp_trainCar), 6.0, UnitGetFacing(lp_trainCar));
    lv_PointOffSetAndAhead = PointWithOffsetPolar(lv_PointAheadOfCar, 3.0, (UnitGetFacing(lp_trainCar) + 90.0));
    UnitIssueOrder(lp_trainCar, OrderTargetingPoint(AbilityCommand("HybridRelease", 0), lv_PointOffSetAndAhead), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    if ((UnitIsAlive(lp_trainCar) == false)) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        UnitCreate(1, "HybridDestroyer", 0, gv_pLAYER_07_TRAIN, lv_PointOffSetAndAhead, (UnitGetFacing(lp_trainCar) + 90.0));
    }
    else {
        UnitCreate(1, "HybridDestroyer", 0, gv_pLAYER_07_TRAIN, lv_PointOffSetAndAhead, (UnitGetFacing(lp_trainCar) - 90.0));
    }
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    return true;
}

trigger auto_gf_TrainCarPing_Trigger = null;
unit auto_gf_TrainCarPing_lp_trainCar;

void gf_TrainCarPing (unit lp_trainCar) {
    auto_gf_TrainCarPing_lp_trainCar = lp_trainCar;

    if (auto_gf_TrainCarPing_Trigger == null) {
        auto_gf_TrainCarPing_Trigger = TriggerCreate("auto_gf_TrainCarPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrainCarPing_Trigger, false, false);
}

bool auto_gf_TrainCarPing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainCar = auto_gf_TrainCarPing_lp_trainCar;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_trainCar), 270.0, "PingNumeric0", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.25);
    PingSetUnit(PingLastCreated(), lp_trainCar);
    while ((UnitIsAlive(lp_trainCar) == true)) {
        PingSetRotation(PingLastCreated(), UnitGetFacing(lp_trainCar));
        Wait(0.1, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_TrainDeath_Trigger = null;
unit auto_gf_TrainDeath_lp_trainEngine;
int auto_gf_TrainDeath_lp_trainListIndex;

void gf_TrainDeath (unit lp_trainEngine, int lp_trainListIndex) {
    auto_gf_TrainDeath_lp_trainEngine = lp_trainEngine;
    auto_gf_TrainDeath_lp_trainListIndex = lp_trainListIndex;

    if (auto_gf_TrainDeath_Trigger == null) {
        auto_gf_TrainDeath_Trigger = TriggerCreate("auto_gf_TrainDeath_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrainDeath_Trigger, false, false);
}

bool auto_gf_TrainDeath_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainEngine = auto_gf_TrainDeath_lp_trainEngine;
    int lp_trainListIndex = auto_gf_TrainDeath_lp_trainListIndex;

    // Variable Declarations
    point lv_lastKnownEngineLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        if ((UnitIsValid(lp_trainEngine) == true)) {
            lv_lastKnownEngineLocation = UnitGetPosition(lp_trainEngine);
        }

        if ((UnitIsAlive(lp_trainEngine) == false)) {
            break;
        }

        Wait(0.5, c_timeAI);
    }
    if ((gv_trainList[lp_trainListIndex].lv_trainStatus != ge_PRESET_TrainStatus_Spawning)) {
        while (!((UnitIsAlive(gv_trainList[lp_trainListIndex].lv_trainCars[gv_trainList[lp_trainListIndex].lv_lastCar]) == false))) {
            Wait(0.5, c_timeAI);
        }
    }

    if ((gv_trainList[lp_trainListIndex].lv_trainStatus == ge_PRESET_TrainStatus_Missed)) {
        return true;
    }

    if ((gv_trainList[lp_trainListIndex].lv_trainType == ge_PRESET_TrainType_BonusObjective)) {
        gv_fastTrainBottomLane_Destroyed += 1;
        gv_fastTrainBottomLane_Escaped -= 1;
        gv_trainList[lp_trainListIndex].lv_trainAlive = false;
        gv_trainList[lp_trainListIndex].lv_trainStatus = ge_PRESET_TrainStatus_Destroyed;
        gv_trainPathInUse[(gv_trainList[lp_trainListIndex].lv_tunnel)] = false;
        TriggerExecute(gt_ObjectiveFastTrainBottomLaneUpdate, true, false);
        if ((gv_fastTrainBottomLane_Destroyed >= gv_c_FastTrainBottomLane_Total)) {
            TriggerExecute(gt_BonusTrainDestroyedQ, true, false);
            TriggerExecute(gt_ObjectiveFastTrainBottomLaneComplete, true, false);
        }

        return true;
    }

    gv_trainsDestroyed += 1;
    TriggerExecute(gt_TrainSpawnedQ2, true, false);
    gv_trainList[lp_trainListIndex].lv_trainAlive = false;
    gv_trainList[lp_trainListIndex].lv_trainStatus = ge_PRESET_TrainStatus_Destroyed;
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyUpdate, true, false);
    gv_lastTrainLocation = lv_lastKnownEngineLocation;
    gv_trainPathInUse[(gv_trainList[lp_trainListIndex].lv_tunnel)] = false;
    if ((gv_trainsDestroyed >= 6)) {
        libCOMI_gf_SetMissionEffort(100.0);
    }
    else {
        libCOMI_gf_SetMissionEffort((gv_trainsDestroyed * 15.0));
    }
    if ((gv_trainsDestroyed == gv_trainsNeeded)) {
        TriggerExecute(gt_TrainVictoryQ, true, false);
        TriggerExecute(gt_VictoryTrainsDestroyedCompleted, true, false);
    }

    return true;
}

int gf_NextAvailableTrainListIndex () {
    // Variable Declarations
    int lv_arrayIter;

    // Automatic Variable Declarations
    const int autoE19BADB2_ae = gv_c_MaxTrainCount;
    const int autoE19BADB2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_arrayIter = 1;
    for ( ; ( (autoE19BADB2_ai >= 0 && lv_arrayIter <= autoE19BADB2_ae) || (autoE19BADB2_ai < 0 && lv_arrayIter >= autoE19BADB2_ae) ) ; lv_arrayIter += autoE19BADB2_ai ) {
        if ((gv_trainList[lv_arrayIter].lv_initialized == false)) {
            return lv_arrayIter;
        }

    }
    return -1;
}

int gf_RandomTunnel (int lp_exclude) {
    int init_i;

    // Variable Declarations
    int[4] lv_returnTunnel;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_returnTunnel[init_i] = ge_PRESET_Tunnel__None;
    }

    // Implementation
    if ((lp_exclude != ge_PRESET_Tunnel_Top)) {
        lv_index += 1;
        lv_returnTunnel[lv_index] = ge_PRESET_Tunnel_Top;
    }

    if ((lp_exclude != ge_PRESET_Tunnel_Middle)) {
        lv_index += 1;
        lv_returnTunnel[lv_index] = ge_PRESET_Tunnel_Middle;
    }

    if ((lp_exclude != ge_PRESET_Tunnel_Bottom)) {
        lv_index += 1;
        lv_returnTunnel[lv_index] = ge_PRESET_Tunnel_Bottom;
    }

    return lv_returnTunnel[RandomInt(1, lv_index)];
}

trigger auto_gf_RevealTrainLane_Trigger = null;
int auto_gf_RevealTrainLane_lp_tunnel;

void gf_RevealTrainLane (int lp_tunnel) {
    auto_gf_RevealTrainLane_lp_tunnel = lp_tunnel;

    if (auto_gf_RevealTrainLane_Trigger == null) {
        auto_gf_RevealTrainLane_Trigger = TriggerCreate("auto_gf_RevealTrainLane_TriggerFunc");
    }

    TriggerExecute(auto_gf_RevealTrainLane_Trigger, false, false);
}

bool auto_gf_RevealTrainLane_TriggerFunc (bool testConds, bool runActions) {
    int lp_tunnel = auto_gf_RevealTrainLane_lp_tunnel;

    // Automatic Variable Declarations
    fixed autoB3BFE9A3_at;
    int autoD675D94B_val;

    // Implementation
    autoB3BFE9A3_at = 0;
    while (!((gv_trainPathInUse[(lp_tunnel)] == false)) && autoB3BFE9A3_at <= 90.0) {
        Wait(0.5, c_timeAI);
        autoB3BFE9A3_at = autoB3BFE9A3_at + 0.5;
    }
    autoD675D94B_val = lp_tunnel;
    if (autoD675D94B_val == ge_PRESET_Tunnel_Top) {
        TriggerExecute(gt_RevealTopLane, true, false);
    }
    else if (autoD675D94B_val == ge_PRESET_Tunnel_Middle) {
        TriggerExecute(gt_RevealMiddleLane, true, false);
    }
    else if (autoD675D94B_val == ge_PRESET_Tunnel_Bottom) {
        TriggerExecute(gt_RevealBottomLane, true, false);
    }
    else {
    }
    return true;
}

text gf_GetTrainTypeName (int lp_trainType) {
    // Automatic Variable Declarations
    int autoFCCC4378_val;

    // Implementation
    autoFCCC4378_val = lp_trainType;
    if (autoFCCC4378_val == ge_PRESET_TrainType_CoopNeeded) {
        return StringExternal("Param/Value/888EA6E6");
    }
    else if (autoFCCC4378_val == ge_PRESET_TrainType_Soloable) {
        return StringExternal("Param/Value/A9E02AEF");
    }
    else if (autoFCCC4378_val == ge_PRESET_TrainType_BonusObjective) {
        return StringExternal("Param/Value/549D9190");
    }
    else {
    }
    return StringExternal("Param/Value/EC260B31");
}

void gf_InitializeCharger (point lp_position, int lp_tunnel, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    gv_chargers[lp_index].lv_position = lp_position;
    gv_chargers[lp_index].lv_tunnel = lp_tunnel;
}

void gf_SetupAttackPath (playergroup lp_attackingPlayers, int lp_attackVector) {
    // Variable Declarations
    int lv_playerIter;

    // Automatic Variable Declarations
    playergroup autoB78CF957_g;
    int auto92373F40_val;

    // Variable Initialization

    // Implementation
    autoB78CF957_g = lp_attackingPlayers;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoB78CF957_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        auto92373F40_val = lp_attackVector;
        if (auto92373F40_val == ge_AttackDirection_Left) {
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(2290), false);
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(2291), false);
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(2292), false);
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(2293), false);
        }
        else if (auto92373F40_val == ge_AttackDirection_Expansions) {
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(2290), false);
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(2291), false);
            AIAttackWaveAddWaypoint(lv_playerIter, RegionGetCenter(RegionFromId(4)), false);
        }
        else if (auto92373F40_val == ge_AttackDirection_Right) {
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(438), false);
            AIAttackWaveAddWaypoint(lv_playerIter, PointFromId(506), false);
        }
        else {
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("AC_TarsonisTrain", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) > 1)) {
        gv_pLAYER_02_USER = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 2);
    }
    else {
        gv_pLAYER_02_USER = gv_pLAYER_01_USER;
    }
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIter;
    int lv_trainPathIter;
    int lv_creepTumorAngle;
    unitgroup lv_rocksBig;
    unitgroup lv_rocksSmall;

    // Automatic Variable Declarations
    unitgroup auto706F7B09_g;
    int auto706F7B09_u;
    unit auto706F7B09_var;
    playergroup auto8E332265_g;
    unitgroup auto57E18BE7_g;
    int auto57E18BE7_u;
    unit auto57E18BE7_var;
    unitgroup auto58948D49_g;
    int auto58948D49_u;
    unit auto58948D49_var;

    // Variable Initialization
    lv_rocksBig = UnitGroupEmpty();
    lv_rocksSmall = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PreloadUnit("TarsonisEngineFast", false);
    TriggerExecute(gt_TrainPathInitialization, true, false);
    TriggerExecute(gt_InitializeTrainStations, true, false);
    TriggerExecute(gt_InitializeChargers, true, false);
    auto706F7B09_g = UnitGroup("AutoTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto706F7B09_u = UnitGroupCount(auto706F7B09_g, c_unitCountAll);
    for (;; auto706F7B09_u -= 1) {
        auto706F7B09_var = UnitGroupUnitFromEnd(auto706F7B09_g, auto706F7B09_u);
        if (auto706F7B09_var == null) { break; }
        UnitBehaviorRemove(auto706F7B09_var, "AutoTurretTimedLife", 1);
    }
    auto8E332265_g = gv_eNEMY_GROUP;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto8E332265_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        auto57E18BE7_g = UnitGroup("Overlord", lv_playerIter, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto57E18BE7_u = UnitGroupCount(auto57E18BE7_g, c_unitCountAll);
        for (;; auto57E18BE7_u -= 1) {
            auto57E18BE7_var = UnitGroupUnitFromEnd(auto57E18BE7_g, auto57E18BE7_u);
            if (auto57E18BE7_var == null) { break; }
            UnitBehaviorAddPlayer(auto57E18BE7_var, "CritterWanderLeash", UnitGetOwner(auto57E18BE7_var), 1);
        }
        auto58948D49_g = UnitGroup("Scourge", lv_playerIter, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto58948D49_u = UnitGroupCount(auto58948D49_g, c_unitCountAll);
        for (;; auto58948D49_u -= 1) {
            auto58948D49_var = UnitGroupUnitFromEnd(auto58948D49_g, auto58948D49_u);
            if (auto58948D49_var == null) { break; }
            UnitBehaviorAddPlayer(auto58948D49_var, "CritterWander", UnitGetOwner(auto58948D49_var), 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetBackground(c_backgroundFixed, null, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mechanicVitalityModifier;
    string[7] lv_hybridUnitsToModify;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_trainsNeeded = 9;
    gv_trainsMissed_Max = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 3, 3, 2, 2, 2);
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_TarsonisTrain_Primary02", gv_trainsMissed_Max);
    gv_trainDifficulty_Life = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 600.0, 1200.0, 2800.0, 4200.0, 6000.0, 8000.0);
    gv_trainDifficulty_Speed = 1.25;
    gv_trainDifficulty_CarCount = 7;
    gv_trainDifficulty_LifeArmored = (gv_trainDifficulty_Life * 1.8);
    gv_trainDifficulty_SpeedArmored = (gv_trainDifficulty_Speed * 1.0);
    gv_trainDifficulty_CarCountArmored = 13;
    gv_trainDifficulty_LifeBObj = (gv_trainDifficulty_Life * 1.25);
    gv_trainDifficulty_SpeedBObj = 1.3;
    gv_trainDifficulty_LifeIncreasePerWave = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 100.0, 200.0, 500.0, 1000.0, 2500.0, 3000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetCoopAIGatherPoint(gv_pLAYER_03_AttackWaves_P1, PointFromId(2558));
    libCOMI_gf_SetCoopAIGatherPoint(gv_pLAYER_04_AttackWaves_P2, PointFromId(2564));
    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_07_TRAIN, libCOMI_gv_cM_CoopAIPlayer_Commander[gv_pLAYER_03_AttackWaves_P1]);
    AICampaignStart(gv_pLAYER_07_TRAIN);
    libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(PlayerGroupSingle(gv_pLAYER_07_TRAIN), false);
    TriggerExecute(gt_ExpansionBulliesStructures, true, false);
    TriggerExecute(gt_ExpansionBulliesUnits, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto77D35FDB_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_EventController, true, false);
    Wait(5.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyCreate, true, true);
    TriggerExecute(gt_ObjectiveDontMissTrainsCreate, true, true);
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto77D35FDB_val = RandomInt(1, 3);
    if (auto77D35FDB_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro1OE", true, -1);
    }
    else if (auto77D35FDB_val == 2) {
        libCOMI_gf_SendMissionTransmission("Intro2OE", true, -1);
    }
    else if (auto77D35FDB_val == 3) {
        libCOMI_gf_SendMissionTransmission("Intro3OE", true, -1);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Controller
//--------------------------------------------------------------------------------------------------
bool gt_EventController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_attackWaveAIPlayers, gv_pLAYER_03_AttackWaves_P1);
    PlayerGroupAdd(gv_attackWaveAIPlayers, gv_pLAYER_04_AttackWaves_P2);
    gv_trainEventMap[ge_TrainEvents_TrainEvent01] = gt_TrainEvent01TrainTopLane5min;
    gv_trainEventMap[ge_TrainEvents_TrainEvent02] = gt_TrainEvent02TrainMidLane8min;
    gv_trainEventMap[ge_TrainEvents_TrainEvent03] = gt_TrainEvent03TrainTopLane11min;
    gv_trainEventMap[ge_TrainEvents_TrainEvent04] = gt_TrainEvent04TrainTopMidLane14min;
    gv_trainEventMap[ge_TrainEvents_TrainEvent05] = gt_TrainEvent05TrainMidLane17min;
    gv_trainEventMap[ge_TrainEvents_TrainEvent06] = gt_TrainEvent06TraintopMidLane20min;
    gv_trainEventMap[ge_TrainEvents_TrainEvent07] = gt_TrainEvent07TrainMidLane23min;
    gv_trainEventMap[ge_TrainEvents_TrainEvent08] = gt_TrainEvent08TrainDoubleSingle25min;
    gf_SendAttackWaveatMissionTime(gt_AIEvent01AttackWave4minLeftSide, (4.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent01TrainTopLane5min, (5.0 * 60.0));
    gf_SendAttackWaveatMissionTime(gt_AIEvent02AttackWave6minRightSide, (6.0 * 60.0));
    gf_SendAttackWaveatMissionTime(gt_AIEvent03AttackWave7minLeftSide, (7.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent02TrainMidLane8min, (8.0 * 60.0));
    gf_SendAttackWaveatMissionTime(gt_AIEvent04AttackWave10minRightSide, (10.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent03TrainTopLane11min, (11.0 * 60.0));
    TimerStart(gv_bonusObjectiveTrainTimer[1], (12.0 * 60.0), false, c_timeAI);
    gf_DoEventatMissionTime(gt_AIEvent0412minBunker, (12.0 * 60.0));
    gf_SendAttackWaveatMissionTime(gt_AIEvent05AttackWave13minLeftSideExpo, (13.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent04TrainTopMidLane14min, (14.0 * 60.0));
    gf_SendAttackWaveatMissionTime(gt_AIEvent06AttackWave16minLeftSide, (16.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent05TrainMidLane17min, (17.0 * 60.0));
    gf_SendAttackWaveatMissionTime(gt_AIEvent07AttackWave19minRightSideExpo, (19.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent06TraintopMidLane20min, (20.0 * 60.0));
    TimerStart(gv_bonusObjectiveTrainTimer[2], (21.0 * 60.0), false, c_timeAI);
    gf_SendAttackWaveatMissionTime(gt_AIEvent08AttackWave22minLeftSide, (22.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent07TrainMidLane23min, (23.0 * 60.0));
    gf_SendAttackWaveatMissionTime(gt_AIEvent09AttackWave24minRightSide, (24.0 * 60.0));
    gf_LaunchTrainatTime(gt_TrainEvent08TrainDoubleSingle25min, (25.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EventController_Init () {
    gt_EventController = TriggerCreate("gt_EventController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 01 - Attack Wave (4 min) - Left Side
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent01AttackWave4minLeftSide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_AttackWaves_P1) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_AttackWaves_P1) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_AttackWaves_P2) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_AttackWaves_P2) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_gatherLocation = PointFromId(2558);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_AttackWaves_P1, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_AttackWaves_P2, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Left);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent01AttackWave4minLeftSide_Init () {
    gt_AIEvent01AttackWave4minLeftSide = TriggerCreate("gt_AIEvent01AttackWave4minLeftSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 01 - Train Top Lane (5 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent01TrainTopLane5min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentWave = 1;
    gf_RevealTrainLane(ge_PRESET_Tunnel_Top);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Top, ge_PRESET_TrainType_Soloable, gf_NextAvailableTrainListIndex());
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_TrainSpawnedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent01TrainTopLane5min_Init () {
    gt_TrainEvent01TrainTopLane5min = TriggerCreate("gt_TrainEvent01TrainTopLane5min_Func");
    TriggerAddEventTimer(gt_TrainEvent01TrainTopLane5min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent01]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 02 - Attack Wave (6 min) - Right Side
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent02AttackWave6minRightSide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_gatherLocation = PointFromId(2564);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_AttackWaves_P1, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_AttackWaves_P2, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Right);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent02AttackWave6minRightSide_Init () {
    gt_AIEvent02AttackWave6minRightSide = TriggerCreate("gt_AIEvent02AttackWave6minRightSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 03 - Attack Wave (7 min) - Left Side
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent03AttackWave7minLeftSide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_gatherLocation = PointFromId(2558);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_AttackWaves_P1, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_AttackWaves_P2, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Left);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent03AttackWave7minLeftSide_Init () {
    gt_AIEvent03AttackWave7minLeftSide = TriggerCreate("gt_AIEvent03AttackWave7minLeftSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 02 - Train Mid Lane (8 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent02TrainMidLane8min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IncreaseTrainLife();
    gv_currentWave = 2;
    gf_RevealTrainLane(ge_PRESET_Tunnel_Middle);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Middle, ge_PRESET_TrainType_CoopNeeded, gf_NextAvailableTrainListIndex());
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_TrainSpawnedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent02TrainMidLane8min_Init () {
    gt_TrainEvent02TrainMidLane8min = TriggerCreate("gt_TrainEvent02TrainMidLane8min_Func");
    TriggerAddEventTimer(gt_TrainEvent02TrainMidLane8min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent02]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 04 - Attack Wave (10 min) - Right Side
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent04AttackWave10minRightSide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_gatherLocation = PointFromId(2564);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_AttackWaves_P1, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_AttackWaves_P2, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Right);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent04AttackWave10minRightSide_Init () {
    gt_AIEvent04AttackWave10minRightSide = TriggerCreate("gt_AIEvent04AttackWave10minRightSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 03 - Train Top Lane (11 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent03TrainTopLane11min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IncreaseTrainLife();
    gv_currentWave = 3;
    gf_SpawnaTrain(ge_PRESET_Tunnel_Top, ge_PRESET_TrainType_CoopNeeded, gf_NextAvailableTrainListIndex());
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_TrainSpawnedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent03TrainTopLane11min_Init () {
    gt_TrainEvent03TrainTopLane11min = TriggerCreate("gt_TrainEvent03TrainTopLane11min_Func");
    TriggerAddEventTimer(gt_TrainEvent03TrainTopLane11min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent03]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 04 (12 min) - Bunker
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent0412minBunker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetDifficulty(gv_pLAYER_03, c_diffAutoLoadBunkers, true);
    AISetDifficulty(gv_pLAYER_04, c_diffAutoLoadBunkers, true);
    TriggerExecute(gt_RunFortifyTrackswithDefenses, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent0412minBunker_Init () {
    gt_AIEvent0412minBunker = TriggerCreate("gt_AIEvent0412minBunker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 05 - Attack Wave (13 min) - Left Side - Expo
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent05AttackWave13minLeftSideExpo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    bool lv_attackExpansion;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_gatherLocation = PointFromId(2558);
    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_03_AttackWaves_P1, c_unitAllianceEnemy, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_attackExpansion = true;
    }
    else {
        lv_attackExpansion = false;
    }
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AttackWaves_P1, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AttackWaves_P2, PlayerGroupSingle(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    if ((lv_attackExpansion == true)) {
        gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Expansions);
    }
    else {
        gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Left);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent05AttackWave13minLeftSideExpo_Init () {
    gt_AIEvent05AttackWave13minLeftSideExpo = TriggerCreate("gt_AIEvent05AttackWave13minLeftSideExpo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 04 - Train Top/Mid Lane (14 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent04TrainTopMidLane14min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IncreaseTrainLife();
    gv_currentWave = 4;
    gf_SpawnaTrain(ge_PRESET_Tunnel_Top, ge_PRESET_TrainType_Soloable, gf_NextAvailableTrainListIndex());
    gf_SpawnaTrain(ge_PRESET_Tunnel_Middle, ge_PRESET_TrainType_Soloable, gf_NextAvailableTrainListIndex());
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_TrainSpawnedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent04TrainTopMidLane14min_Init () {
    gt_TrainEvent04TrainTopMidLane14min = TriggerCreate("gt_TrainEvent04TrainTopMidLane14min_Func");
    TriggerAddEventTimer(gt_TrainEvent04TrainTopMidLane14min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent04]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 06 - Attack Wave (16 min) - Left Side
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent06AttackWave16minLeftSide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_gatherLocation = PointFromId(2558);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Left);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent06AttackWave16minLeftSide_Init () {
    gt_AIEvent06AttackWave16minLeftSide = TriggerCreate("gt_AIEvent06AttackWave16minLeftSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 05 - Train Mid Lane (17 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent05TrainMidLane17min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IncreaseTrainLife();
    gv_currentWave = 5;
    gf_SpawnaTrain(ge_PRESET_Tunnel_Middle, ge_PRESET_TrainType_CoopNeeded, gf_NextAvailableTrainListIndex());
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_TrainSpawnedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent05TrainMidLane17min_Init () {
    gt_TrainEvent05TrainMidLane17min = TriggerCreate("gt_TrainEvent05TrainMidLane17min_Func");
    TriggerAddEventTimer(gt_TrainEvent05TrainMidLane17min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent05]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 07 - Attack Wave (19 min) - Right Side - Expo
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent07AttackWave19minRightSideExpo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    point[4] lv_attackWaypoints;
    int lv_waypointsIter;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    lv_gatherLocation = PointFromId(2564);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_AttackWaves_P1, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_AttackWaves_P2, PlayerGroupSingle(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Right);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent07AttackWave19minRightSideExpo_Init () {
    gt_AIEvent07AttackWave19minRightSideExpo = TriggerCreate("gt_AIEvent07AttackWave19minRightSideExpo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 06 - Train top/Mid Lane (20 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent06TraintopMidLane20min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IncreaseTrainLife();
    gv_currentWave = 6;
    gv_specialTrainEscorts_Spawn = 1;
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 1)) {
        gv_specialTrainEscorts_Type[1] = "HybridReaver";
    }
    else {
        gv_specialTrainEscorts_Type[1] = "HybridDestroyer";
    }
    gv_specialTrainEscorts_Count[1] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 3, 3);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Top, ge_PRESET_TrainType_CoopNeeded, gf_NextAvailableTrainListIndex());
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Middle, ge_PRESET_TrainType_CoopNeeded, gf_NextAvailableTrainListIndex());
    TriggerExecute(gt_TrainSpawnedAlmostDoneQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent06TraintopMidLane20min_Init () {
    gt_TrainEvent06TraintopMidLane20min = TriggerCreate("gt_TrainEvent06TraintopMidLane20min_Func");
    TriggerAddEventTimer(gt_TrainEvent06TraintopMidLane20min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent06]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 08 - Attack Wave (22 min) - Left Side
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent08AttackWave22minLeftSide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    bool lv_attackExpansion;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_gatherLocation = PointFromId(2558);
    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_03_AttackWaves_P1, c_unitAllianceEnemy, RegionFromId(4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_attackExpansion = true;
    }
    else {
        lv_attackExpansion = false;
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_AttackWaves_P1, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_AttackWaves_P2, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    if ((lv_attackExpansion == true)) {
        gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Expansions);
    }
    else {
        gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Left);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent08AttackWave22minLeftSide_Init () {
    gt_AIEvent08AttackWave22minLeftSide = TriggerCreate("gt_AIEvent08AttackWave22minLeftSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 07 - Train Mid Lane (23 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent07TrainMidLane23min_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainLane;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IncreaseTrainLife();
    gv_currentWave = 7;
    gv_specialTrainEscorts_Spawn = 1;
    gv_specialTrainEscorts_Type[1] = "HybridBehemoth";
    gv_specialTrainEscorts_Count[1] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2);
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 1)) {
        gv_specialTrainEscorts_Type[2] = "HybridReaver";
    }
    else {
        gv_specialTrainEscorts_Type[2] = "HybridDestroyer";
    }
    gv_specialTrainEscorts_Count[2] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 4, 4);
    lv_trainLane = ge_PRESET_Tunnel_Middle;
    gf_SpawnaTrain(lv_trainLane, ge_PRESET_TrainType_CoopNeeded, gf_NextAvailableTrainListIndex());
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_TrainSpawnedFinalStageQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent07TrainMidLane23min_Init () {
    gt_TrainEvent07TrainMidLane23min = TriggerCreate("gt_TrainEvent07TrainMidLane23min_Func");
    TriggerAddEventTimer(gt_TrainEvent07TrainMidLane23min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent07]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Event 09 - Attack Wave (24 min) - Right Side
//--------------------------------------------------------------------------------------------------
bool gt_AIEvent09AttackWave24minRightSide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techSize;
    point lv_gatherLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techSize = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_gatherLocation = PointFromId(2564);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_AttackWaves_P1, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_AttackWaves_P2, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_AttackWaves_P1, gv_pLAYER_04_AttackWaves_P2, lv_resourceSize, lv_techSize, lv_gatherLocation, true);
    gf_SetupAttackPath(gv_attackWaveAIPlayers, ge_AttackDirection_Right);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIEvent09AttackWave24minRightSide_Init () {
    gt_AIEvent09AttackWave24minRightSide = TriggerCreate("gt_AIEvent09AttackWave24minRightSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 08 - Train Double/Single (25 min)
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent08TrainDoubleSingle25min_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainLane;
    int lv_trainCurrentIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentWave = 8;
    TriggerExecute(gt_TrainSpawnedFinalStageQ, true, false);
    if (((gv_trainsNeeded - gv_trainsDestroyed) == 1)) {
        gv_specialTrainEscorts_Spawn = 1;
        gv_specialTrainEscorts_Type[1] = "HybridBehemoth";
        gv_specialTrainEscorts_Count[1] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2);
        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) == 1) || (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) == 1))) {
            gv_specialTrainEscorts_Type[2] = "HybridReaver";
        }
        else {
            gv_specialTrainEscorts_Type[2] = "HybridDestroyer";
        }
        gv_specialTrainEscorts_Count[2] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 2, 2, 3, 3);
        lv_trainLane = gf_RandomTunnel(ge_PRESET_Tunnel_Bottom);
        lv_trainCurrentIndex = gf_NextAvailableTrainListIndex();
        gf_SpawnaTrain(lv_trainLane, ge_PRESET_TrainType_CoopNeeded, lv_trainCurrentIndex);
        if (((gv_trainsMissed_Max - gv_trainsMissed) > 1)) {
            while (!((gv_trainList[lv_trainCurrentIndex].lv_initialized == true) && (gv_trainList[lv_trainCurrentIndex].lv_trainStatus == ge_PRESET_TrainStatus_Missed))) {
                Wait(1.0, c_timeAI);
            }
            TriggerExecute(gt_TrainEvent08TrainDoubleSingle25min, true, false);
        }

    }
    else {
        gv_specialTrainEscorts_Spawn = 2;
        gv_specialTrainEscorts_Type[1] = "HybridReaver";
        gv_specialTrainEscorts_Count[1] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 2, 4, 4);
        gf_SpawnaTrain(ge_PRESET_Tunnel_Top, ge_PRESET_TrainType_Soloable, gf_NextAvailableTrainListIndex());
        SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        gf_SpawnaTrain(ge_PRESET_Tunnel_Middle, ge_PRESET_TrainType_Soloable, gf_NextAvailableTrainListIndex());
        SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent08TrainDoubleSingle25min_Init () {
    gt_TrainEvent08TrainDoubleSingle25min = TriggerCreate("gt_TrainEvent08TrainDoubleSingle25min_Func");
    TriggerAddEventTimer(gt_TrainEvent08TrainDoubleSingle25min, gv_launchTrainTimers[ge_TrainEvents_TrainEvent08]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Path Initialization
//--------------------------------------------------------------------------------------------------
bool gt_TrainPathInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        TriggerExecute(gt_TrainPathInitializationForward, true, false);
    }
    else {
        TriggerExecute(gt_TrainPathInitializationBackward, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainPathInitialization_Init () {
    gt_TrainPathInitialization = TriggerCreate("gt_TrainPathInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Path Initialization Forward
//--------------------------------------------------------------------------------------------------
bool gt_TrainPathInitializationForward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_trainPath[0] = PointFromId(345);
    lv_iLocal = 1;
    gv_trainPath[lv_iLocal] = PointFromId(239);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(240);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(241);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(242);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(243);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(244);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2159);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(245);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2160);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(246);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2161);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(247);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2162);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(248);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(249);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2163);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(250);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2165);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(251);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2164);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(252);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2166);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(253);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2167);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(254);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2168);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(255);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(256);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2169);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(257);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2170);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(258);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2171);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(259);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(260);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(261);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2172);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(262);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2173);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(263);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(264);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2174);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(265);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2175);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(266);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2176);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(267);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(489);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(490);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(491);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(7);
    gv_trainPathMidStart = lv_iLocal;
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(424);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(442);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(443);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(444);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2177);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(445);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2178);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(446);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2179);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(447);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2180);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(448);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2181);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(449);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2182);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(450);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2183);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(451);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2184);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(456);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2185);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(457);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2186);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(458);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2187);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(459);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2188);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(460);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2189);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(461);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2190);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(484);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2191);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(485);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2192);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(492);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(1412);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(493);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2193);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(494);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2194);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(495);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2195);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(496);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(497);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2196);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(498);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2197);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(499);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(500);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(501);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(502);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(503);
    gv_trainPathBottomStart = lv_iLocal;
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2198);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(504);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2199);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(268);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2200);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(269);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2201);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(270);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2202);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(271);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2203);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(272);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2204);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(273);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2205);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(274);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2206);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(275);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2207);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2208);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(276);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2209);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(277);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2210);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(278);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2211);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(279);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(280);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2212);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2213);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2214);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(281);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2215);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(282);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2216);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(283);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2217);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(284);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2218);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(285);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2219);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(286);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2220);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(287);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2221);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2222);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(288);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(289);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2223);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(290);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2224);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(291);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2225);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(292);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(293);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(294);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(295);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(296);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(297);
    gv_numberOfTrainPathPoints = lv_iLocal;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainPathInitializationForward_Init () {
    gt_TrainPathInitializationForward = TriggerCreate("gt_TrainPathInitializationForward_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Path Initialization Backward
//--------------------------------------------------------------------------------------------------
bool gt_TrainPathInitializationBackward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    point lv_tempPointLocal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempPointLocal = RegionGetCenter(RegionPlayableMap());

    // Actions
    if (!runActions) {
        return true;
    }

    PointSet(lv_tempPointLocal, PointFromId(345));
    PointSet(PointFromId(345), PointFromId(1225));
    PointSet(PointFromId(1225), lv_tempPointLocal);
    PointSet(lv_tempPointLocal, PointFromId(486));
    PointSet(PointFromId(486), PointFromId(1224));
    PointSet(PointFromId(1224), lv_tempPointLocal);
    PointSet(lv_tempPointLocal, PointFromId(487));
    PointSet(PointFromId(487), PointFromId(1223));
    PointSet(PointFromId(1223), lv_tempPointLocal);
    PointSet(PointFromId(534), PointFromId(709));
    PointSet(PointFromId(535), PointFromId(720));
    PointSet(PointFromId(533), PointFromId(722));
    PointSet(PointFromId(531), PointFromId(723));
    PointSet(PointFromId(532), PointFromId(723));
    PointSet(PointFromId(530), PointFromId(863));
    gv_trainPath[0] = PointFromId(345);
    lv_iLocal = 1;
    gv_trainPath[lv_iLocal] = PointFromId(491);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(490);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(489);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(267);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2176);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(266);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2175);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(265);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2174);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(264);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(263);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2173);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(262);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2172);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(261);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(260);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(259);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2171);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(258);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2170);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(257);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2169);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(256);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(255);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2168);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(254);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2167);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(253);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2166);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(252);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2164);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(251);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2165);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(250);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2163);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(249);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(248);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2162);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(247);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2161);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(246);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2160);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(245);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2159);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(244);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(243);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(242);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(241);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(240);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(239);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(502);
    gv_trainPathMidStart = lv_iLocal;
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(501);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(500);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(499);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2197);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(498);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2196);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(497);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(496);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2195);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(495);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2194);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(494);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2193);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(493);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(1412);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(492);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2192);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(485);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2191);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(484);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2190);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(461);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2189);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(460);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2188);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(459);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2187);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(458);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2186);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(457);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2185);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(456);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2184);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(451);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2183);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(450);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2182);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(449);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2181);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(448);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2180);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(447);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2179);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(446);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2178);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(445);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2177);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(444);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(443);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(442);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(424);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(7);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(297);
    gv_trainPathBottomStart = lv_iLocal;
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(296);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(295);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(294);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(293);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(292);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2225);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(291);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2224);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(290);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2223);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(289);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(288);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2222);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2221);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(287);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2220);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(286);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2219);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(285);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2218);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(284);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2217);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(283);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2216);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(282);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2215);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(281);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2214);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2213);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2212);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(280);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(279);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2211);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(278);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2210);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(277);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2209);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(276);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2208);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2207);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(275);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2206);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(274);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2205);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(273);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2204);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(272);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2203);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(271);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2202);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(270);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2201);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(269);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2200);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(268);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2199);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(504);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(2198);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPath[lv_iLocal] = PointFromId(503);
    gv_numberOfTrainPathPoints = lv_iLocal;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainPathInitializationBackward_Init () {
    gt_TrainPathInitializationBackward = TriggerCreate("gt_TrainPathInitializationBackward_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Escorts
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEscorts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_groundSpawnPoint1Local;
    point lv_groundSpawnPoint2Local;
    point lv_airSpawnPointLocal;
    int lv_trainIndexLocal;
    int lv_iLocal;
    point lv_escortSpawnPointLocal;
    int lv_escortPlayerLocal;
    unitgroup lv_escortGroupLocal;
    int lv_escortCountLocal;
    unitgroup lv_trainEscortsNextToCarsLocal;
    unitgroup lv_trainEscortsInFrontOfTrainLocal;
    int lv_specialEscortIterLocal;
    int lv_resourceLevelLocal;
    int lv_techLevelLocal;
    int lv_carToEscortLocal;
    fixed lv_carToEscortDistanceLocal;
    unitgroup lv_airEscorts;
    int lv_airEscortIter;

    // Automatic Variable Declarations
    int auto19BA8FCD_val;
    const int auto2F5F2BB3_ae = gv_c_SpecialTrainEscort_Max;
    const int auto2F5F2BB3_ai = 1;
    int auto33B017F4_val;
    unitgroup auto2FA208D0_g;
    int auto2FA208D0_u;
    unit auto2FA208D0_var;
    unitgroup auto30CE6557_g;
    int auto30CE6557_u;
    unit auto30CE6557_var;
    int autoB90DC3E4_ae;
    const int autoB90DC3E4_ai = 1;
    int autoB3C31EB2_val;
    const int auto38793687_ae = 1;
    const int auto38793687_ai = -1;
    int auto788B0C12_ae;
    const int auto788B0C12_ai = 1;
    int auto099CB889_ae;
    const int auto099CB889_ai = 1;
    int auto0F8EF654_ae;
    const int auto0F8EF654_ai = 1;

    // Variable Initialization
    lv_escortGroupLocal = UnitGroupEmpty();
    lv_trainEscortsNextToCarsLocal = UnitGroupEmpty();
    lv_trainEscortsInFrontOfTrainLocal = UnitGroupEmpty();
    lv_airEscorts = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainIndexLocal = gv_trainToBeEscorted;
    if ((lv_trainIndexLocal == 0)) {
        return true;
    }

    auto19BA8FCD_val = gv_trainList[lv_trainIndexLocal].lv_tunnel;
    if (auto19BA8FCD_val == ge_PRESET_Tunnel_Top) {
        lv_groundSpawnPoint1Local = PointFromId(531);
        lv_groundSpawnPoint2Local = PointFromId(532);
        lv_airSpawnPointLocal = PointFromId(530);
        lv_escortPlayerLocal = gv_pLAYER_07_TRAIN;
    }
    else if (auto19BA8FCD_val == ge_PRESET_Tunnel_Middle) {
        lv_groundSpawnPoint1Local = PointFromId(534);
        lv_groundSpawnPoint2Local = PointFromId(535);
        lv_airSpawnPointLocal = PointFromId(533);
        lv_escortPlayerLocal = gv_pLAYER_07_TRAIN;
    }
    else if (auto19BA8FCD_val == ge_PRESET_Tunnel_Bottom) {
        lv_groundSpawnPoint1Local = PointFromId(537);
        lv_groundSpawnPoint2Local = PointFromId(546);
        lv_airSpawnPointLocal = PointFromId(536);
        lv_escortPlayerLocal = gv_pLAYER_07_TRAIN;
    }
    else {
    }
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lv_escortPlayerLocal] = lv_groundSpawnPoint1Local;
    if ((gv_specialTrainEscorts_Spawn > 0)) {
        gv_specialTrainEscorts_Spawn -= 1;
        lv_specialEscortIterLocal = 1;
        for ( ; ( (auto2F5F2BB3_ai >= 0 && lv_specialEscortIterLocal <= auto2F5F2BB3_ae) || (auto2F5F2BB3_ai < 0 && lv_specialEscortIterLocal >= auto2F5F2BB3_ae) ) ; lv_specialEscortIterLocal += auto2F5F2BB3_ai ) {
            if ((gv_specialTrainEscorts_Type[lv_specialEscortIterLocal] != null)) {
                UnitCreate(gv_specialTrainEscorts_Count[lv_specialEscortIterLocal], gv_specialTrainEscorts_Type[lv_specialEscortIterLocal], 0, lv_escortPlayerLocal, lv_groundSpawnPoint1Local, 270.0);
                UnitGroupAddUnitGroup(lv_trainEscortsNextToCarsLocal, UnitLastCreatedGroup());
            }

        }
    }

    auto33B017F4_val = gv_currentWave;
    if (auto33B017F4_val == 1) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto33B017F4_val == 2) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto33B017F4_val == 3) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (auto33B017F4_val == 4) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else if (auto33B017F4_val == 5) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else if (auto33B017F4_val == 6) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (auto33B017F4_val == 7) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else if (auto33B017F4_val == 8) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_escortPlayerLocal, c_playerAny, lv_resourceLevelLocal, lv_techLevelLocal, lv_groundSpawnPoint1Local, true);
    UnitGroupAddUnitGroup(lv_trainEscortsNextToCarsLocal, libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_escortPlayerLocal, c_playerAny, lv_resourceLevelLocal, lv_techLevelLocal, lv_groundSpawnPoint2Local, true);
    UnitGroupAddUnitGroup(lv_trainEscortsInFrontOfTrainLocal, libCOMI_gf_LastCreatedCoopAttackForce());
    UnitGroupAddUnitGroup(lv_airEscorts, UnitGroupFilter(null, c_playerAny, lv_trainEscortsInFrontOfTrainLocal, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_airEscorts, UnitGroupFilter(null, c_playerAny, lv_trainEscortsNextToCarsLocal, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(lv_trainEscortsInFrontOfTrainLocal, lv_airEscorts);
    UnitGroupRemoveUnitGroup(lv_trainEscortsNextToCarsLocal, lv_airEscorts);
    lv_carToEscortLocal = 1;
    lv_carToEscortDistanceLocal = 2.0;
    auto2FA208D0_g = lv_trainEscortsNextToCarsLocal;
    auto2FA208D0_u = UnitGroupCount(auto2FA208D0_g, c_unitCountAll);
    for (;; auto2FA208D0_u -= 1) {
        auto2FA208D0_var = UnitGroupUnitFromEnd(auto2FA208D0_g, auto2FA208D0_u);
        if (auto2FA208D0_var == null) { break; }
        if ((gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts < gv_c_MaxTrainEscortCount)) {
            gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts += 1;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escort = auto2FA208D0_var;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_unitType = UnitGetType(auto2FA208D0_var);
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escortCar = lv_carToEscortLocal;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarRadius = lv_carToEscortDistanceLocal;
            if ((ModF(gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts, 2.0) == 0.0)) {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 90.0;
                if ((PlayerRace(lv_escortPlayerLocal) == "Zerg")) {
                    gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle += RandomFixed(-15.0, 15.0);
                    lv_carToEscortDistanceLocal += RandomFixed(-1.0, 1.0);
                }

            }
            else {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 270.0;
                lv_carToEscortDistanceLocal += (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto2FA208D0_var), "Radius", gv_pLAYER_07_TRAIN)) + 1.0);
                if ((PlayerRace(lv_escortPlayerLocal) == "Zerg")) {
                    gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle += RandomFixed(-15.0, 15.0);
                    lv_carToEscortDistanceLocal += RandomFixed(-1.0, 1.0);
                }

                if ((lv_carToEscortDistanceLocal > 4.0)) {
                    lv_carToEscortDistanceLocal = 2.0;
                    if (lv_carToEscortLocal >= (gv_trainList[lv_trainIndexLocal].lv_numberOfCars - 4)) {
                        lv_carToEscortLocal = 1;
                    }
                    else {
                        lv_carToEscortLocal = lv_carToEscortLocal + 1;
                    }
                }

            }
        }
        else {
            AIAttackWaveUseUnit(lv_escortPlayerLocal, auto2FA208D0_var);
        }
    }
    gf_AssignEscortsToTrainFront(lv_trainIndexLocal, lv_trainEscortsInFrontOfTrainLocal, gv_trainList[lv_trainIndexLocal].lv_tunnel);
    auto30CE6557_g = lv_airEscorts;
    auto30CE6557_u = UnitGroupCount(auto30CE6557_g, c_unitCountAll);
    for (;; auto30CE6557_u -= 1) {
        auto30CE6557_var = UnitGroupUnitFromEnd(auto30CE6557_g, auto30CE6557_u);
        if (auto30CE6557_var == null) { break; }
        if ((gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts < gv_c_MaxTrainEscortCount)) {
            gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts += 1;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escort = auto30CE6557_var;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_unitType = UnitGetType(auto30CE6557_var);
            if ((ModF(gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts, 2.0) == 0.0)) {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 90.0;
            }
            else {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 270.0;
                lv_carToEscortDistanceLocal += (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto30CE6557_var), "Radius", gv_pLAYER_07_TRAIN)) + 1.0);
                if ((lv_carToEscortDistanceLocal > 3.0)) {
                    lv_carToEscortDistanceLocal = 2.0;
                    if (lv_carToEscortLocal >= (gv_trainList[lv_trainIndexLocal].lv_numberOfCars - 3)) {
                        lv_carToEscortLocal = 2;
                    }
                    else {
                        lv_carToEscortLocal = lv_carToEscortLocal + 1;
                    }
                }

            }
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escortCar = lv_carToEscortLocal;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarRadius = lv_carToEscortDistanceLocal;
        }
        else {
            AIAttackWaveUseUnit(lv_escortPlayerLocal, auto30CE6557_var);
        }
    }
    autoB90DC3E4_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
    lv_iLocal = 1;
    for ( ; ( (autoB90DC3E4_ai >= 0 && lv_iLocal <= autoB90DC3E4_ae) || (autoB90DC3E4_ai < 0 && lv_iLocal >= autoB90DC3E4_ae) ) ; lv_iLocal += autoB90DC3E4_ai ) {
        autoB3C31EB2_val = gv_trainList[lv_trainIndexLocal].lv_tunnel;
        if (autoB3C31EB2_val == ge_PRESET_Tunnel_Top) {
            gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar, 8);
        }
        else if (autoB3C31EB2_val == ge_PRESET_Tunnel_Middle) {
            gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar, (gv_trainPathMidStart + 7));
        }
        else if (autoB3C31EB2_val == ge_PRESET_Tunnel_Bottom) {
            gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar, (gv_trainPathBottomStart + 13));
        }
        else {
        }
    }
    lv_iLocal = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
    for ( ; ( (auto38793687_ai >= 0 && lv_iLocal <= auto38793687_ae) || (auto38793687_ai < 0 && lv_iLocal >= auto38793687_ae) ) ; lv_iLocal += auto38793687_ai ) {
        if ((libCOMI_gf_UnitMoverExists(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_unitType, "Fly") == false)) {
            if ((ModI(lv_iLocal, 2) == 0)) {
                lv_escortSpawnPointLocal = lv_groundSpawnPoint1Local;
            }
            else {
                lv_escortSpawnPointLocal = lv_groundSpawnPoint2Local;
            }
        }
        else {
            lv_escortSpawnPointLocal = lv_airSpawnPointLocal;
        }
        UnitSetPosition(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, lv_escortSpawnPointLocal, false);
        UnitSetPropertyFixed(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, c_unitPropEnergyPercent, 100.0);
        AISetUnitScriptControlled(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, true);
        UnitIssueOrder(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarRadius, (PointGetFacing(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition) + gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarAngle))), c_orderQueueReplace);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto788B0C12_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
        lv_iLocal = 1;
        for ( ; ( (auto788B0C12_ai >= 0 && lv_iLocal <= auto788B0C12_ae) || (auto788B0C12_ai < 0 && lv_iLocal >= auto788B0C12_ae) ) ; lv_iLocal += auto788B0C12_ai ) {
            UnitIssueOrder(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarRadius, (PointGetFacing(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition) + gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarAngle))), c_orderQueueReplace);
        }
        if ((UnitIsAlive(gv_trainList[lv_trainIndexLocal].lv_trainCars[1]) == false)) {
            return true;
        }

        if ((RegionContainsPoint(RegionCircle(gv_trainList[lv_trainIndexLocal].lv_escorts[1].lv_waitPosition, 2.0), UnitGetPosition(gv_trainList[lv_trainIndexLocal].lv_trainCars[1])) == true)) {
            auto099CB889_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfCars;
            lv_iLocal = 1;
            for ( ; ( (auto099CB889_ai >= 0 && lv_iLocal <= auto099CB889_ae) || (auto099CB889_ai < 0 && lv_iLocal >= auto099CB889_ae) ) ; lv_iLocal += auto099CB889_ai ) {
                UnitGroupAdd(lv_escortGroupLocal, gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_iLocal]);
            }
            AIAttackWaveSetTargetEscortNL(lv_escortPlayerLocal, lv_escortGroupLocal, 1);
            auto0F8EF654_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
            lv_iLocal = 1;
            for ( ; ( (auto0F8EF654_ai >= 0 && lv_iLocal <= auto0F8EF654_ae) || (auto0F8EF654_ai < 0 && lv_iLocal >= auto0F8EF654_ae) ) ; lv_iLocal += auto0F8EF654_ai ) {
                if ((UnitIsAlive(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort) == true)) {
                    AISetUnitScriptControlled(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, false);
                    AIAttackWaveAddEscortUnit(lv_escortPlayerLocal, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, gv_trainList[lv_trainIndexLocal].lv_trainCars[gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar], gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarRadius, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarAngle);
                    lv_escortCountLocal += 1;
                }

            }
            if ((lv_escortCountLocal > 0)) {
                AIAttackWaveSend(lv_escortPlayerLocal, 0, false);
                gv_trainList[lv_trainIndexLocal].lv_escortWave = WaveLastCreated();
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEscorts_Init () {
    gt_SpawnEscorts = TriggerCreate("gt_SpawnEscorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Movement
//--------------------------------------------------------------------------------------------------
bool gt_TrainMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    unitgroup auto005D2B42_g;
    int auto005D2B42_u;
    unit auto005D2B42_var;
    unitgroup auto499A4BF2_g;
    int auto499A4BF2_u;
    unit auto499A4BF2_var;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto005D2B42_g = UnitGroup(null, gv_pLAYER_07_TRAIN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto005D2B42_u = UnitGroupCount(auto005D2B42_g, c_unitCountAll);
    for (;; auto005D2B42_u -= 1) {
        auto005D2B42_var = UnitGroupUnitFromEnd(auto005D2B42_g, auto005D2B42_u);
        if (auto005D2B42_var == null) { break; }
        if (((UnitGetType(auto005D2B42_var) == "Caboose") || (UnitGetType(auto005D2B42_var) == "FreightCar") || (UnitGetType(auto005D2B42_var) == "TarsonisEngine") || (UnitGetType(auto005D2B42_var) == "TarsonisEngineFast"))) {
            UnitGroupAdd(lv_trainCars, auto005D2B42_var);
        }

    }
    auto499A4BF2_g = lv_trainCars;
    auto499A4BF2_u = UnitGroupCount(auto499A4BF2_g, c_unitCountAll);
    for (;; auto499A4BF2_u -= 1) {
        auto499A4BF2_var = UnitGroupUnitFromEnd(auto499A4BF2_g, auto499A4BF2_u);
        if (auto499A4BF2_var == null) { break; }
        if ((RegionContainsPoint(RegionCircle(gv_trainPath[FixedToInt(UnitGetCustomValue(auto499A4BF2_var, 0))], 0.5), UnitGetPosition(auto499A4BF2_var)) == true)) {
            if ((FixedToInt(UnitGetCustomValue(auto499A4BF2_var, 0)) < 255)) {
                UnitSetCustomValue(auto499A4BF2_var, 0, (UnitGetCustomValue(auto499A4BF2_var, 0) + 1.0));
            }

        }

        UnitIssueOrder(auto499A4BF2_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto499A4BF2_var), 1.0, AngleBetweenPoints(UnitGetPosition(auto499A4BF2_var), gv_trainPath[FixedToInt(UnitGetCustomValue(auto499A4BF2_var, 0))]))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainMovement_Init () {
    gt_TrainMovement = TriggerCreate("gt_TrainMovement_Func");
    TriggerAddEventTimePeriodic(gt_TrainMovement, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_trainIter;
    int lv_carIter;
    bool lv_carFound;

    // Automatic Variable Declarations
    const int auto7BE31D20_ae = gv_c_MaxTrainCount;
    const int auto7BE31D20_ai = 1;
    int autoE04F5785_ae;
    const int autoE04F5785_ai = 1;
    int auto49BE1DDE_ae;
    const int auto49BE1DDE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_TRAIN))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Caboose") || (UnitGetType(EventUnit()) == "FreightCar") || (UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainIter = 1;
    for ( ; ( (auto7BE31D20_ai >= 0 && lv_trainIter <= auto7BE31D20_ae) || (auto7BE31D20_ai < 0 && lv_trainIter >= auto7BE31D20_ae) ) ; lv_trainIter += auto7BE31D20_ai ) {
        autoE04F5785_ae = gv_trainList[lv_trainIter].lv_lastCar;
        lv_carIter = 1;
        for ( ; ( (autoE04F5785_ai >= 0 && lv_carIter <= autoE04F5785_ae) || (autoE04F5785_ai < 0 && lv_carIter >= autoE04F5785_ae) ) ; lv_carIter += autoE04F5785_ai ) {
            if ((gv_trainList[lv_trainIter].lv_trainCars[lv_carIter] == EventUnit())) {
                lv_trainIndex = lv_trainIter;
                lv_carFound = true;
                break;
            }

        }
        if ((lv_carFound == true)) {
            break;
        }

    }
    gv_trainPathInUse[gv_trainList[lv_trainIndex].lv_tunnel] = false;
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitGetType(EventUnit()) == "Caboose")) {
        gv_trainList[lv_trainIndex].lv_trainStatus = ge_PRESET_TrainStatus_Missed;
        if ((gv_trainList[lv_trainIndex].lv_trainType != ge_PRESET_TrainType_BonusObjective)) {
            gv_trainsMissed += 1;
            TriggerExecute(gt_ObjectiveDontMissTrainsUpdate, true, false);
            if ((gv_trainsMissed == gv_trainsMissed_Max)) {
                TriggerExecute(gt_DefeatTooManyTrainsMissed, true, false);
            }
            else {
                if ((gv_trainsMissed == 2)) {
                    TriggerExecute(gt_TrainSpawnedQ5, true, false);
                }
                else {
                    if ((gv_trainsMissed == 1)) {
                        TriggerExecute(gt_TrainSpawnedQ4, true, false);
                    }

                }
            }
        }

    }

    UnitGroupRemove(gv_trainList[lv_trainIndex].lv_trainCarsGroup, EventUnit());
    UnitBehaviorRemove(EventUnit(), "ConjoinedTrainCar", 1);
    UnitRemove(EventUnit());
    if ((lv_trainIndex > 0)) {
        auto49BE1DDE_ae = gv_trainList[lv_trainIndex].lv_lastCar;
        lv_trainIter = 2;
        for ( ; ( (auto49BE1DDE_ai >= 0 && lv_trainIter <= auto49BE1DDE_ae) || (auto49BE1DDE_ai < 0 && lv_trainIter >= auto49BE1DDE_ae) ) ; lv_trainIter += auto49BE1DDE_ai ) {
            gv_trainList[lv_trainIndex].lv_trainCars[(lv_trainIter - 1)] = gv_trainList[lv_trainIndex].lv_trainCars[lv_trainIter];
        }
        gv_trainList[lv_trainIndex].lv_lastCar -= 1;
        if ((UnitIsAlive(gv_trainList[gv_trainBossBarIndex].lv_trainCars[1]) == false)) {
            gv_trainList[lv_trainIndex].lv_trainAlive = false;
        }

        if ((lv_trainIndex == gv_trainBossBarIndex)) {
            if ((UnitIsAlive(gv_trainList[gv_trainBossBarIndex].lv_trainCars[1]) == true)) {
                libNtve_gf_SetBossBarBoss(1, gv_trainList[gv_trainBossBarIndex].lv_trainCars[1], true);
            }
            else {
                libNtve_gf_ShowHideBossBar(false, 1);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawn_Init () {
    gt_TrainDespawn = TriggerCreate("gt_TrainDespawn_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Despawn
//--------------------------------------------------------------------------------------------------
bool gt_EscortDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    unitgroup lv_escortGroup;
    int lv_i;
    point lv_exitPoint;
    unit lv_escortIter;

    // Automatic Variable Declarations
    const int autoAB191ABE_ae = gv_c_MaxTrainCount;
    const int autoAB191ABE_ai = 1;
    int auto806C41E4_ae;
    const int auto806C41E4_ai = 1;
    unitgroup autoB521141F_g;
    int autoB521141F_u;
    int auto6F335F7E_val;
    int auto52611589_ae;
    const int auto52611589_ai = 1;
    unitgroup autoD8F20539_g;
    int autoD8F20539_u;

    // Variable Initialization
    lv_escortGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_07_TRAIN))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoAB191ABE_ai >= 0 && lv_i <= autoAB191ABE_ae) || (autoAB191ABE_ai < 0 && lv_i >= autoAB191ABE_ae) ) ; lv_i += autoAB191ABE_ai ) {
        if ((gv_trainList[lv_i].lv_trainCars[1] == EventUnit())) {
            lv_trainIndex = lv_i;
            break;
        }

    }
    auto806C41E4_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
    lv_i = 1;
    for ( ; ( (auto806C41E4_ai >= 0 && lv_i <= auto806C41E4_ae) || (auto806C41E4_ai < 0 && lv_i >= auto806C41E4_ae) ) ; lv_i += auto806C41E4_ai ) {
        if ((UnitIsAlive(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
            UnitGroupAdd(lv_escortGroup, gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort);
            if ((ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) >= 20.0) && (ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) <= 160.0)) {
                UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]) + 90.0))), c_orderQueueReplace);
            }
            else {
                if ((ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) >= 200.0) && (ModF(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_polarAngle, 360.0) <= 340.0)) {
                    UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]) + 270.0))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]), 4.0, (UnitGetFacing(gv_trainList[lv_trainIndex].lv_trainCars[gv_trainList[lv_trainIndex].lv_lastCar]) + 180.0))), c_orderQueueReplace);
                }
            }
        }

    }
    if ((AIWaveGetUnits(gv_trainList[lv_trainIndex].lv_escortWave) != null)) {
        autoB521141F_g = AIWaveGetUnits(gv_trainList[lv_trainIndex].lv_escortWave);
        autoB521141F_u = UnitGroupCount(autoB521141F_g, c_unitCountAll);
        for (;; autoB521141F_u -= 1) {
            lv_escortIter = UnitGroupUnitFromEnd(autoB521141F_g, autoB521141F_u);
            if (lv_escortIter == null) { break; }
            UnitGroupAdd(lv_escortGroup, lv_escortIter);
            UnitIssueOrder(lv_escortIter, Order(AbilityCommand("stop", 0)), c_orderQueueAddToEnd);
        }
    }

    AIWaveDelete(gv_trainList[lv_trainIndex].lv_escortWave);
    while (!((UnitIsAlive(gv_trainList[lv_trainIndex].lv_trainCars[1]) == false))) {
        Wait(1.0, c_timeAI);
    }
    auto6F335F7E_val = gv_trainList[lv_trainIndex].lv_tunnel;
    if (auto6F335F7E_val == ge_PRESET_Tunnel_Top) {
        lv_exitPoint = PointFromId(1225);
    }
    else if (auto6F335F7E_val == ge_PRESET_Tunnel_Middle) {
        lv_exitPoint = PointFromId(1224);
    }
    else if (auto6F335F7E_val == ge_PRESET_Tunnel_Bottom) {
        lv_exitPoint = PointFromId(1223);
    }
    else {
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto52611589_ae = gv_trainList[lv_trainIndex].lv_numberOfEscorts;
        lv_i = 1;
        for ( ; ( (auto52611589_ai >= 0 && lv_i <= auto52611589_ae) || (auto52611589_ai < 0 && lv_i >= auto52611589_ae) ) ; lv_i += auto52611589_ai ) {
            if ((UnitIsAlive(gv_trainList[lv_trainIndex].lv_escorts[lv_i].lv_escort) == true)) {
                lv_i = 0;
                break;
            }

        }
        if ((lv_i != 0)) {
            return true;
        }

        autoD8F20539_g = lv_escortGroup;
        autoD8F20539_u = UnitGroupCount(autoD8F20539_g, c_unitCountAll);
        for (;; autoD8F20539_u -= 1) {
            lv_escortIter = UnitGroupUnitFromEnd(autoD8F20539_g, autoD8F20539_u);
            if (lv_escortIter == null) { break; }
            if ((libNtve_gf_UnitInRegion(lv_escortIter, RegionCircle(lv_exitPoint, 5.0)) == true)) {
                UnitRemove(lv_escortIter);
            }
            else {
                UnitIssueOrder(lv_escortIter, OrderTargetingPoint(AbilityCommand("attack", 0), lv_exitPoint), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortDespawn_Init () {
    gt_EscortDespawn = TriggerCreate("gt_EscortDespawn_Func");
    TriggerAddEventUnitRegion(gt_EscortDespawn, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Car Damage Animation Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainCarDamageAnimationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainCarToAnimate_LOCAL;
    fixed lv_trainCarToAnimateBreakPoint_LOCAL;

    // Automatic Variable Declarations
    int auto29FF27A9_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainCarToAnimate_LOCAL = gv_trainCarToAnimate;
    lv_trainCarToAnimateBreakPoint_LOCAL = gv_trainCarToAnimateBreakPoint;
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }

        if ((UnitGetPropertyFixed(lv_trainCarToAnimate_LOCAL, c_unitPropLifePercent, c_unitPropCurrent) <= lv_trainCarToAnimateBreakPoint_LOCAL)) {
            break;
        }

    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("SiegeTank_Explode", -1), PlayerGroupAll(), lv_trainCarToAnimate_LOCAL, 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }

        auto29FF27A9_val = RandomInt(1, 4);
        if (auto29FF27A9_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.167, c_timeGame);
        }
        else if (auto29FF27A9_val == 2) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 01", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.333, c_timeGame);
        }
        else if (auto29FF27A9_val == 3) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 02", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(2.0, c_timeGame);
        }
        else if (auto29FF27A9_val == 4) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 03", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.5, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainCarDamageAnimationController_Init () {
    gt_TrainCarDamageAnimationController = TriggerCreate("gt_TrainCarDamageAnimationController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Train 01
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveTrain01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFastTrainBottomLaneCreate, true, false);
    TriggerExecute(gt_BonusTrainSpawned01Q, true, false);
    gf_RevealTrainLane(ge_PRESET_Tunnel_Bottom);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Bottom, ge_PRESET_TrainType_BonusObjective, gf_NextAvailableTrainListIndex());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveTrain01_Init () {
    gt_BonusObjectiveTrain01 = TriggerCreate("gt_BonusObjectiveTrain01_Func");
    TriggerAddEventTimer(gt_BonusObjectiveTrain01, gv_bonusObjectiveTrainTimer[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Train 02
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveTrain02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFastTrainBottomLaneCreate, true, false);
    TriggerExecute(gt_BonusTrainSpawned02Q, true, false);
    gf_RevealTrainLane(ge_PRESET_Tunnel_Bottom);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Bottom, ge_PRESET_TrainType_BonusObjective, gf_NextAvailableTrainListIndex());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveTrain02_Init () {
    gt_BonusObjectiveTrain02 = TriggerCreate("gt_BonusObjectiveTrain02_Func");
    TriggerAddEventTimer(gt_BonusObjectiveTrain02, gv_bonusObjectiveTrainTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen - Train Damage Taken
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenTrainDamageTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_carIndex;
    int lv_damagedTrainIndex;

    // Automatic Variable Declarations
    const int auto1AAD1D8C_ae = gv_c_MaxTrainCount;
    const int auto1AAD1D8C_ai = 1;
    const int auto6A31541D_ae = gv_c_MaxTrainCarCount;
    const int auto6A31541D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() == gv_pLAYER_01_USER) || (EventUnitDamageSourcePlayer() == gv_pLAYER_02_USER)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast") || (UnitGetType(EventUnit()) == "FreightCar") || (UnitGetType(EventUnit()) == "Caboose")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainIndex = 1;
    for ( ; ( (auto1AAD1D8C_ai >= 0 && lv_trainIndex <= auto1AAD1D8C_ae) || (auto1AAD1D8C_ai < 0 && lv_trainIndex >= auto1AAD1D8C_ae) ) ; lv_trainIndex += auto1AAD1D8C_ai ) {
        lv_carIndex = 1;
        for ( ; ( (auto6A31541D_ai >= 0 && lv_carIndex <= auto6A31541D_ae) || (auto6A31541D_ai < 0 && lv_carIndex >= auto6A31541D_ae) ) ; lv_carIndex += auto6A31541D_ai ) {
            if ((gv_trainList[lv_trainIndex].lv_trainCars[lv_carIndex] == EventUnit())) {
                lv_damagedTrainIndex = lv_trainIndex;
                break;
            }

        }
        if ((lv_damagedTrainIndex != 0)) {
            break;
        }

    }
    gv_runningTrainDamage[EventUnitDamageSourcePlayer()] += (gv_trainLastKnownLife[lv_damagedTrainIndex]-UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
    PlayerScoreValueSetFromFixed(EventUnitDamageSourcePlayer(), "TarsonisTrainDamage", gv_runningTrainDamage[EventUnitDamageSourcePlayer()]);
    gv_trainLastKnownLife[lv_damagedTrainIndex] = UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenTrainDamageTaken_Init () {
    gt_ScoreScreenTrainDamageTaken = TriggerCreate("gt_ScoreScreenTrainDamageTaken_Func");
    TriggerAddEventUnitDamaged(gt_ScoreScreenTrainDamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Train Stations
//--------------------------------------------------------------------------------------------------
bool gt_InitializeTrainStations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gv_trainStations[lv_i].lv_position = PointFromId(1325);
    lv_i += 1;
    gv_trainStations[lv_i].lv_position = PointFromId(1413);
    lv_i += 1;
    gv_trainStations[lv_i].lv_position = PointFromId(1486);
    gv_numberOfTrainStations = lv_i;
    TriggerExecute(gt_TrainStationController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeTrainStations_Init () {
    gt_InitializeTrainStations = TriggerCreate("gt_InitializeTrainStations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Chargers
//--------------------------------------------------------------------------------------------------
bool gt_InitializeChargers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    gf_InitializeCharger(PointFromId(1542), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1546), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1547), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1548), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1549), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1550), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1551), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1552), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1553), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1624), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1625), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1630), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1631), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1636), ge_PRESET_Tunnel_Top, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1637), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1915), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1943), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1944), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1945), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1946), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1947), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1948), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1949), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1950), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1951), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1952), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1953), ge_PRESET_Tunnel_Middle, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1954), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1955), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1956), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1957), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1958), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1959), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1960), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1961), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1962), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1963), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1964), ge_PRESET_Tunnel_Bottom, lv_i);
    lv_i += 1;
    gf_InitializeCharger(PointFromId(1965), ge_PRESET_Tunnel_Bottom, lv_i);
    gv_numberOfChargers = lv_i;
    TriggerExecute(gt_ChargePulseController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeChargers_Init () {
    gt_InitializeChargers = TriggerCreate("gt_InitializeChargers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Station Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainStationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoA10C9F58_ae;
    const int autoA10C9F58_ai = 1;
    int autoF18F5B4B_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        autoA10C9F58_ae = gv_numberOfTrainStations;
        lv_i = 1;
        for ( ; ( (autoA10C9F58_ai >= 0 && lv_i <= autoA10C9F58_ae) || (autoA10C9F58_ai < 0 && lv_i >= autoA10C9F58_ae) ) ; lv_i += autoA10C9F58_ai ) {
            autoF18F5B4B_val = gv_trainStations[lv_i].lv_state;
            if (autoF18F5B4B_val == ge_PRESET_TrainStationState_Inactive) {
                if (((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                    gv_currentTrainStationGlobal = lv_i;
                    TriggerExecute(gt_ActivateStation, true, false);
                }

            }
            else if (autoF18F5B4B_val == ge_PRESET_TrainStationState_Active) {
                if ((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_07_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    gv_currentTrainStationGlobal = lv_i;
                    if ((gv_trainsMissed <= 2)) {
                        TriggerExecute(gt_DeactivateStation, true, false);
                    }

                }

            }
            else {
            }
        }
        if ((libCOMI_gf_GameIsOver() == true)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainStationController_Init () {
    gt_TrainStationController = TriggerCreate("gt_TrainStationController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charge Pulse Controller
//--------------------------------------------------------------------------------------------------
bool gt_ChargePulseController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto2ED92885_ae;
    const int auto2ED92885_ai = 1;
    int auto39736B00_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        auto2ED92885_ae = gv_numberOfChargers;
        lv_i = 1;
        for ( ; ( (auto2ED92885_ai >= 0 && lv_i <= auto2ED92885_ae) || (auto2ED92885_ai < 0 && lv_i >= auto2ED92885_ae) ) ; lv_i += auto2ED92885_ai ) {
            auto39736B00_val = gv_chargers[lv_i].lv_state;
            if (auto39736B00_val == ge_PRESET_ChargeState_Active) {
                if (((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                    gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Pulsing;
                    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Spell", c_animFlagPlayForever, c_animTimeDefault);
                }

            }
            else if (auto39736B00_val == ge_PRESET_ChargeState_Pulsing) {
                if ((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_07_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Active;
                    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                }

            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChargePulseController_Init () {
    gt_ChargePulseController = TriggerCreate("gt_ChargePulseController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Station
//--------------------------------------------------------------------------------------------------
bool gt_ActivateStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentTrainStationLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTrainStationLocal = gv_currentTrainStationGlobal;
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Transitioning;
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand Work Start", 0, c_animTimeDefault);
    Wait(1.0, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Active;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateStation_Init () {
    gt_ActivateStation = TriggerCreate("gt_ActivateStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Station
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentTrainStationLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTrainStationLocal = gv_currentTrainStationGlobal;
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Transitioning;
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand Work End", 0, c_animTimeDefault);
    Wait(1.0, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Inactive;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateStation_Init () {
    gt_DeactivateStation = TriggerCreate("gt_DeactivateStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawn Animations
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int[16] lv_trainsThatAreSpawningLocal;
    int lv_numberOfTrainsThatAreSpawningLocal;
    bool lv_topLocal;
    bool lv_middleLocal;
    bool lv_bottomLocal;

    // Automatic Variable Declarations
    const int auto6BAA92F4_ae = gv_c_MaxTrainCount;
    const int auto6BAA92F4_ai = 1;
    int auto7AB7BE83_ae;
    const int auto7AB7BE83_ai = 1;
    int auto9D83BBF1_val;
    int autoD645FD05_ae;
    const int autoD645FD05_ai = 1;
    int auto023C3302_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iLocal = 1;
    for ( ; ( (auto6BAA92F4_ai >= 0 && lv_iLocal <= auto6BAA92F4_ae) || (auto6BAA92F4_ai < 0 && lv_iLocal >= auto6BAA92F4_ae) ) ; lv_iLocal += auto6BAA92F4_ai ) {
        if ((gv_trainList[lv_iLocal].lv_spawnWave == gv_currentWave)) {
            lv_numberOfTrainsThatAreSpawningLocal += 1;
            lv_trainsThatAreSpawningLocal[lv_numberOfTrainsThatAreSpawningLocal] = lv_iLocal;
        }

    }
    auto7AB7BE83_ae = lv_numberOfTrainsThatAreSpawningLocal;
    lv_iLocal = 1;
    for ( ; ( (auto7AB7BE83_ai >= 0 && lv_iLocal <= auto7AB7BE83_ae) || (auto7AB7BE83_ai < 0 && lv_iLocal >= auto7AB7BE83_ae) ) ; lv_iLocal += auto7AB7BE83_ai ) {
        auto9D83BBF1_val = gv_trainList[lv_trainsThatAreSpawningLocal[lv_iLocal]].lv_tunnel;
        if (auto9D83BBF1_val == ge_PRESET_Tunnel_Top) {
            lv_topLocal = true;
        }
        else if (auto9D83BBF1_val == ge_PRESET_Tunnel_Middle) {
            lv_middleLocal = true;
        }
        else if (auto9D83BBF1_val == ge_PRESET_Tunnel_Bottom) {
            lv_bottomLocal = true;
        }
        else {
        }
    }
    autoD645FD05_ae = gv_numberOfChargers;
    lv_iLocal = 1;
    for ( ; ( (autoD645FD05_ai >= 0 && lv_iLocal <= autoD645FD05_ae) || (autoD645FD05_ai < 0 && lv_iLocal >= autoD645FD05_ae) ) ; lv_iLocal += autoD645FD05_ai ) {
        auto023C3302_val = gv_chargers[lv_iLocal].lv_tunnel;
        if (auto023C3302_val == ge_PRESET_Tunnel_Top) {
            if ((lv_topLocal == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else if (auto023C3302_val == ge_PRESET_Tunnel_Middle) {
            if ((lv_middleLocal == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else if (auto023C3302_val == ge_PRESET_Tunnel_Bottom) {
            if ((lv_bottomLocal == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else {
        }
    }
    if ((lv_topLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_middleLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_bottomLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    Wait(3.333, c_timeAI);
    if ((lv_topLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_middleLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_bottomLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    }

    Wait(60.0, c_timeAI);
    if ((lv_topLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_middleLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    if ((lv_bottomLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand End Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    }

    Wait(3.333, c_timeAI);
    if ((lv_topLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(345), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_middleLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(486), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }

    if ((lv_bottomLocal == true)) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(487), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnAnimations_Init () {
    gt_TrainSpawnAnimations = TriggerCreate("gt_TrainSpawnAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn Animations Top
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawnAnimationsTop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    while (!((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    Wait(3.0, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(491), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawnAnimationsTop_Init () {
    gt_TrainDespawnAnimationsTop = TriggerCreate("gt_TrainDespawnAnimationsTop_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawnAnimationsTop, null, RegionCircle(PointFromId(491), 16.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn Animations Mid
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawnAnimationsMid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    while (!((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    Wait(3.0, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(502), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawnAnimationsMid_Init () {
    gt_TrainDespawnAnimationsMid = TriggerCreate("gt_TrainDespawnAnimationsMid_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawnAnimationsMid, null, RegionCircle(PointFromId(502), 16.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn Animations Bottom
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawnAnimationsBottom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    while (!((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_07_TRAIN, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeAI);
    }
    gv_fastTrainBottomLane_Escaped += 1;
    Wait(3.0, c_timeAI);
    if ((gv_fastTrainBottomLane_Escaped == gv_c_FastTrainBottomLane_Total)) {
        TriggerExecute(gt_ObjectiveFastTrainBottomLaneFailed, true, false);
    }

    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.333, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(PointFromId(297), 16.0), "TrainDockingDoor", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawnAnimationsBottom_Init () {
    gt_TrainDespawnAnimationsBottom = TriggerCreate("gt_TrainDespawnAnimationsBottom_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawnAnimationsBottom, null, RegionCircle(PointFromId(297), 16.0), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Bottom Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealBottomLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int lv_currentPingPointLocal;

    // Automatic Variable Declarations
    int auto65AE96E0_ae;
    const int auto65AE96E0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPointLocal = 0;
    auto65AE96E0_ae = gv_numberOfTrainPathPoints;
    lv_iLocal = gv_trainPathBottomStart;
    for ( ; ( (auto65AE96E0_ai >= 0 && lv_iLocal <= auto65AE96E0_ae) || (auto65AE96E0_ai < 0 && lv_iLocal >= auto65AE96E0_ae) ) ; lv_iLocal += auto65AE96E0_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPointLocal], gv_trainPath[lv_iLocal]) > 4.0)) {
            lv_currentPingPointLocal = lv_iLocal;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPointLocal], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealBottomLane_Init () {
    gt_RevealBottomLane = TriggerCreate("gt_RevealBottomLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Middle Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealMiddleLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int lv_currentPingPointLocal;

    // Automatic Variable Declarations
    int auto76C315BA_ae;
    const int auto76C315BA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPointLocal = 0;
    auto76C315BA_ae = (gv_trainPathBottomStart - 1);
    lv_iLocal = gv_trainPathMidStart;
    for ( ; ( (auto76C315BA_ai >= 0 && lv_iLocal <= auto76C315BA_ae) || (auto76C315BA_ai < 0 && lv_iLocal >= auto76C315BA_ae) ) ; lv_iLocal += auto76C315BA_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPointLocal], gv_trainPath[lv_iLocal]) > 4.0)) {
            lv_currentPingPointLocal = lv_iLocal;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPointLocal], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealMiddleLane_Init () {
    gt_RevealMiddleLane = TriggerCreate("gt_RevealMiddleLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Top Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealTopLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int lv_currentPingPointLocal;

    // Automatic Variable Declarations
    int auto05D816F8_ae;
    const int auto05D816F8_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPointLocal = 0;
    auto05D816F8_ae = (gv_trainPathMidStart - 1);
    lv_iLocal = 1;
    for ( ; ( (auto05D816F8_ai >= 0 && lv_iLocal <= auto05D816F8_ae) || (auto05D816F8_ai < 0 && lv_iLocal >= auto05D816F8_ae) ) ; lv_iLocal += auto05D816F8_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPointLocal], gv_trainPath[lv_iLocal]) > 4.0)) {
            lv_currentPingPointLocal = lv_iLocal;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPointLocal], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealTopLane_Init () {
    gt_RevealTopLane = TriggerCreate("gt_RevealTopLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escaping Top Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscapingTopQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transmissionTrainLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_transmissionTrainLocal = UnitGroupUnit(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(5)), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ReverseEscortEscaping", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscapingTopQ_Init () {
    gt_TrainEscapingTopQ = TriggerCreate("gt_TrainEscapingTopQ_Func");
    TriggerAddEventTimePeriodic(gt_TrainEscapingTopQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escaping Bottom Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscapingBottomQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_07_TRAIN, RegionCircle(PointFromId(497), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(497), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ReverseEscortEscaping", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscapingBottomQ_Init () {
    gt_TrainEscapingBottomQ = TriggerCreate("gt_TrainEscapingBottomQ_Func");
    TriggerAddEventTimePeriodic(gt_TrainEscapingBottomQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawned Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstTrainSpawn == true)) {
        gv_firstTrainSpawn = false;
        libCOMI_gf_SendMissionTransmission("FirstTrainDetected", true, -1);
    }
    else {
        if (((gv_currentWave == 4) || (gv_currentWave == 6) || (gv_currentWave == 8))) {
            libCOMI_gf_SendMissionTransmission("MultipleTrainsRepeat", true, -1);
        }
        else {
            libCOMI_gf_SendMissionTransmission("TrainDetectedRepeat", true, -1);
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(15.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ_Init () {
    gt_TrainSpawnedQ = TriggerCreate("gt_TrainSpawnedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawned Almost Done Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedAlmostDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedAlmostDoneQ_Init () {
    gt_TrainSpawnedAlmostDoneQ = TriggerCreate("gt_TrainSpawnedAlmostDoneQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawned Final Stage Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedFinalStageQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_finalStageLinePlayed == false) && (gv_trainsDestroyed > 6)) {
        gv_finalStageLinePlayed = true;
        libCOMI_gf_SendMissionTransmission("NearCompleteOE", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("TrainDetectedRepeat", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedFinalStageQ_Init () {
    gt_TrainSpawnedFinalStageQ = TriggerCreate("gt_TrainSpawnedFinalStageQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    if ((gv_trainsDestroyed == 4)) {
        TriggerExecute(gt_TrainSpawnedQ3, true, false);
    }
    else {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ReverseEscortDestroyed", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ2_Init () {
    gt_TrainSpawnedQ2 = TriggerCreate("gt_TrainSpawnedQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Half Way Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HalfwayCompleteOE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ3_Init () {
    gt_TrainSpawnedQ3 = TriggerCreate("gt_TrainSpawnedQ3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Train Escapes Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FailingWarningOE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ4_Init () {
    gt_TrainSpawnedQ4 = TriggerCreate("gt_TrainSpawnedQ4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Second Train Escapes Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("NearFailingWarningOE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ5_Init () {
    gt_TrainSpawnedQ5 = TriggerCreate("gt_TrainSpawnedQ5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Train Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusTrainDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveSuccess", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTrainDestroyedQ_Init () {
    gt_BonusTrainDestroyedQ = TriggerCreate("gt_BonusTrainDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Train Spawned 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusTrainSpawned01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTrainFirst", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTrainSpawned01Q_Init () {
    gt_BonusTrainSpawned01Q = TriggerCreate("gt_BonusTrainSpawned01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Train Spawned 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusTrainSpawned02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTrainRepeat", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTrainSpawned02Q_Init () {
    gt_BonusTrainSpawned02Q = TriggerCreate("gt_BonusTrainSpawned02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incoming Attack Wave Q
//--------------------------------------------------------------------------------------------------
bool gt_IncomingAttackWaveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(1, 2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncomingAttackWaveQ_Init () {
    gt_IncomingAttackWaveQ = TriggerCreate("gt_IncomingAttackWaveQ_Func");
    TriggerAddEventPlayerAIWave(gt_IncomingAttackWaveQ, gv_pLAYER_03_AttackWaves_P1);
    TriggerAddEventPlayerAIWave(gt_IncomingAttackWaveQ, gv_pLAYER_04_AttackWaves_P2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainVictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("VictoryOE", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainVictoryQ_Init () {
    gt_TrainVictoryQ = TriggerCreate("gt_TrainVictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion Bullies - Structures
//--------------------------------------------------------------------------------------------------
bool gt_ExpansionBulliesStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string[3] lv_townHallType;
    point[3] lv_townHallLocation;
    string[3] lv_vespeneCollectorType;
    point[3][2] lv_vespeneCollectorLocation;
    playergroup lv_expansionBullies;
    int lv_expansionBulliesIter;
    int lv_player;
    string[3] lv_workerType;

    // Automatic Variable Declarations
    int auto166C4221_ae;
    const int auto166C4221_ai = 1;
    string autoE9F61DCE_val;

    // Variable Initialization
    lv_expansionBullies = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(136)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(137)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_expansionBullies, gv_pLAYER_03);
    PlayerGroupAdd(lv_expansionBullies, gv_pLAYER_04);
    lv_townHallLocation[1] = PointFromId(943);
    lv_townHallLocation[2] = PointFromId(1565);
    lv_vespeneCollectorLocation[1][0] = UnitGetPosition(UnitFromId(364));
    lv_vespeneCollectorLocation[1][1] = UnitGetPosition(UnitFromId(325));
    lv_vespeneCollectorLocation[2][0] = UnitGetPosition(UnitFromId(146));
    lv_vespeneCollectorLocation[2][1] = UnitGetPosition(UnitFromId(1105));
    auto166C4221_ae = PlayerGroupCount(lv_expansionBullies);
    lv_expansionBulliesIter = 1;
    for ( ; ( (auto166C4221_ai >= 0 && lv_expansionBulliesIter <= auto166C4221_ae) || (auto166C4221_ai < 0 && lv_expansionBulliesIter >= auto166C4221_ae) ) ; lv_expansionBulliesIter += auto166C4221_ai ) {
        lv_player = PlayerGroupPlayer(lv_expansionBullies, lv_expansionBulliesIter);
        autoE9F61DCE_val = PlayerRace(lv_player);
        if (autoE9F61DCE_val == "Prot") {
            lv_townHallType[lv_expansionBulliesIter] = "Nexus";
            lv_vespeneCollectorType[lv_expansionBulliesIter] = "Assimilator";
            lv_workerType[lv_expansionBulliesIter] = "Probe";
        }
        else if (autoE9F61DCE_val == "Terr") {
            lv_townHallType[lv_expansionBulliesIter] = "CommandCenter";
            lv_vespeneCollectorType[lv_expansionBulliesIter] = "Refinery";
            lv_workerType[lv_expansionBulliesIter] = "SCV";
        }
        else if (autoE9F61DCE_val == "Zerg") {
            lv_townHallType[lv_expansionBulliesIter] = "Lair";
            lv_vespeneCollectorType[lv_expansionBulliesIter] = "Extractor";
            lv_workerType[lv_expansionBulliesIter] = "Drone";
        }
        else {
            lv_townHallType[lv_expansionBulliesIter] = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_StructureMain, lv_player);
            lv_vespeneCollectorType[lv_expansionBulliesIter] = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_StructureRefinery, lv_player);
            lv_workerType[lv_expansionBulliesIter] = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Worker, lv_player);
        }
        UnitCreate(1, lv_townHallType[lv_expansionBulliesIter], 0, lv_player, lv_townHallLocation[lv_expansionBulliesIter], 270.0);
        UnitCreate(1, lv_vespeneCollectorType[lv_expansionBulliesIter], c_unitCreateConstruct | c_unitCreateIgnorePlacement, lv_player, lv_vespeneCollectorLocation[lv_expansionBulliesIter][0], 270.0);
        UnitCreate(1, lv_vespeneCollectorType[lv_expansionBulliesIter], c_unitCreateConstruct | c_unitCreateIgnorePlacement, lv_player, lv_vespeneCollectorLocation[lv_expansionBulliesIter][1], 270.0);
        UnitCreate(9, lv_workerType[lv_expansionBulliesIter], 0, lv_player, lv_townHallLocation[lv_expansionBulliesIter], 270.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpansionBulliesStructures_Init () {
    gt_ExpansionBulliesStructures = TriggerCreate("gt_ExpansionBulliesStructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Expansion Bullies - Units
//--------------------------------------------------------------------------------------------------
bool gt_ExpansionBulliesUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int[3] lv_attackingPlayers;
    region[3] lv_patrolArea;

    // Automatic Variable Declarations
    const int auto68612B37_ae = 2;
    int auto68612B37_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(136)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(137)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_attackingPlayers[1] = gv_pLAYER_03;
    lv_attackingPlayers[2] = gv_pLAYER_04;
    lv_patrolArea[1] = RegionFromId(6);
    lv_patrolArea[2] = RegionFromId(6);
    TriggerEnable(gt_IncomingAttackWaveQ, false);
    auto68612B37_var = 1;
    for ( ; auto68612B37_var <= auto68612B37_ae; auto68612B37_var += 1 ) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_attackingPlayers[auto68612B37_var], c_playerAny, lv_resourceBucket, lv_techBucket, RegionGetCenter(lv_patrolArea[auto68612B37_var]), true);
        AIAttackWaveSetTargetRegion(lv_attackingPlayers[auto68612B37_var], lv_patrolArea[auto68612B37_var], 0);
        AIAttackWaveUseGroup(lv_attackingPlayers[auto68612B37_var], libCOMI_gf_LastCreatedCoopAttackForce());
        AIAttackWaveSend(lv_attackingPlayers[auto68612B37_var], 0, false);
        libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
    }
    Wait(5.0, c_timeAI);
    TriggerEnable(gt_IncomingAttackWaveQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpansionBulliesUnits_Init () {
    gt_ExpansionBulliesUnits = TriggerCreate("gt_ExpansionBulliesUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bunker Death
//--------------------------------------------------------------------------------------------------
bool gt_BunkerDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(1)) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Bunker") || (UnitGetType(EventUnit()) == "GreaterNydusWorm") || (UnitGetType(EventUnit()) == "SpineCrawler") || (UnitGetType(EventUnit()) == "Pylon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIToggleBulliesInRegion(UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 8.0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerDeath_Init () {
    gt_BunkerDeath = TriggerCreate("gt_BunkerDeath_Func");
    TriggerAddEventUnitDied(gt_BunkerDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Fortify Tracks with Defenses
//--------------------------------------------------------------------------------------------------
bool gt_RunFortifyTrackswithDefenses_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIResetBullyRebuildCountsInRegion(gv_pLAYER_04, RegionFromId(1));
    AIResetBullyRebuildCountsInRegion(gv_pLAYER_03, RegionFromId(1));
    AIToggleBulliesInRegion(gv_pLAYER_04, RegionFromId(1), true);
    AIToggleBulliesInRegion(gv_pLAYER_03, RegionFromId(1), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunFortifyTrackswithDefenses_Init () {
    gt_RunFortifyTrackswithDefenses = TriggerCreate("gt_RunFortifyTrackswithDefenses_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_DisplayMissionTip();
    Wait(libCOMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat - Too Many Trains Missed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTooManyTrainsMissed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    camerainfo lv_defeatCamera;
    point lv_cameraTarget;
    int lv_trainPathIndex;

    // Automatic Variable Declarations
    unitgroup auto5A7EF8DC_g;
    int auto5A7EF8DC_u;
    unit auto5A7EF8DC_var;
    int auto1FC1AFA0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DefeatOE", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveDontMissTrainsFailed, true, false);
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/56C01A60"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/1DCD5E6F"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    auto5A7EF8DC_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5A7EF8DC_u = UnitGroupCount(auto5A7EF8DC_g, c_unitCountAll);
    for (;; auto5A7EF8DC_u -= 1) {
        auto5A7EF8DC_var = UnitGroupUnitFromEnd(auto5A7EF8DC_g, auto5A7EF8DC_u);
        if (auto5A7EF8DC_var == null) { break; }
        UnitIssueOrder(auto5A7EF8DC_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_AttackWaves_P1, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_AttackWaves_P2, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_TRAIN, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_03_AttackWaves_P1, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_03, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_04_AttackWaves_P2, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_04, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_07_TRAIN, libNtve_ge_AllianceSetting_Ally);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    auto1FC1AFA0_val = gv_currentTrainStationGlobal;
    if (auto1FC1AFA0_val == 1) {
        lv_defeatCamera = CameraInfoFromId(2227);
    }
    else if (auto1FC1AFA0_val == 2) {
        lv_defeatCamera = CameraInfoFromId(2228);
    }
    else if (auto1FC1AFA0_val == 3) {
        lv_defeatCamera = CameraInfoFromId(2229);
    }
    else {
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(CameraInfoGetTarget(lv_defeatCamera), 10.0), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(CameraInfoGetTarget(lv_defeatCamera), 10.0), 0.0, false);
    CameraApplyInfo(gv_pLAYER_01_USER, lv_defeatCamera, 2.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_02_USER, lv_defeatCamera, 2.0, -1, 10.0, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(CameraInfoGetTarget(lv_defeatCamera), 10.0), "TrainDockingDoor", c_animNameDefault, "Stand Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatTooManyTrainsMissed_Init () {
    gt_DefeatTooManyTrainsMissed = TriggerCreate("gt_DefeatTooManyTrainsMissed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Trains Destroyed Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTrainsDestroyedCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTrainsDestroyedCompleted_Init () {
    gt_VictoryTrainsDestroyedCompleted = TriggerCreate("gt_VictoryTrainsDestroyedCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyComplete, true, false);
    TriggerExecute(gt_ObjectiveDontMissTrainsComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendVictoryTransmission("VictoryOE");
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_lastTrainLocation, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_lastTrainLocation, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/F89835CB"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/76788AB0"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((ObjectiveGetState(gv_objective_FastTrainBottomLane) != c_objectiveStateCompleted)) {
        TriggerExecute(gt_ObjectiveFastTrainBottomLaneFailed, true, false);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddTrackedStatistic("TarsonisTrainDamage");
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Great Train Robbery - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheGreatTrainRobberyCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_TarsonisTrain_Primary01");
    gv_objective_TheGreatTrainRobbery = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheGreatTrainRobberyCreate_Init () {
    gt_ObjectiveTheGreatTrainRobberyCreate = TriggerCreate("gt_ObjectiveTheGreatTrainRobberyCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Great Train Robbery - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheGreatTrainRobberyUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_TarsonisTrain_Primary01", gv_trainsDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheGreatTrainRobberyUpdate_Init () {
    gt_ObjectiveTheGreatTrainRobberyUpdate = TriggerCreate("gt_ObjectiveTheGreatTrainRobberyUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Great Train Robbery - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheGreatTrainRobberyComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyCreate, true, false);
    ObjectiveSetState(gv_objective_TheGreatTrainRobbery, c_objectiveStateCompleted);
    TriggerExecute(gt_ObjectiveDontMissTrainsComplete, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheGreatTrainRobberyComplete_Init () {
    gt_ObjectiveTheGreatTrainRobberyComplete = TriggerCreate("gt_ObjectiveTheGreatTrainRobberyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - The Great Train Robbery - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTheGreatTrainRobberyFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveTheGreatTrainRobberyCreate, true, false);
    ObjectiveSetState(gv_objective_TheGreatTrainRobbery, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTheGreatTrainRobberyFailed_Init () {
    gt_ObjectiveTheGreatTrainRobberyFailed = TriggerCreate("gt_ObjectiveTheGreatTrainRobberyFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Miss Trains - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontMissTrainsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_TarsonisTrain_Primary02");
    gv_objective_DontMissTrains = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontMissTrainsCreate_Init () {
    gt_ObjectiveDontMissTrainsCreate = TriggerCreate("gt_ObjectiveDontMissTrainsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Miss Trains - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontMissTrainsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDontMissTrainsCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_TarsonisTrain_Primary02", gv_trainsMissed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontMissTrainsUpdate_Init () {
    gt_ObjectiveDontMissTrainsUpdate = TriggerCreate("gt_ObjectiveDontMissTrainsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Miss Trains - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontMissTrainsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontMissTrainsCreate, true, false);
    ObjectiveSetState(gv_objective_DontMissTrains, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontMissTrainsComplete_Init () {
    gt_ObjectiveDontMissTrainsComplete = TriggerCreate("gt_ObjectiveDontMissTrainsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Miss Trains - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontMissTrainsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontMissTrainsCreate, true, false);
    ObjectiveSetState(gv_objective_DontMissTrains, c_objectiveStateFailed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontMissTrainsFailed_Init () {
    gt_ObjectiveDontMissTrainsFailed = TriggerCreate("gt_ObjectiveDontMissTrainsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - FastTrainBottomLane - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFastTrainBottomLaneCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_objectivePanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objectivePanel = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_CreateObjectiveCampaign("AC_TarsonisTrain_Bonus01");
    gv_objective_FastTrainBottomLane = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFastTrainBottomLaneCreate_Init () {
    gt_ObjectiveFastTrainBottomLaneCreate = TriggerCreate("gt_ObjectiveFastTrainBottomLaneCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - FastTrainBottomLane - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFastTrainBottomLaneUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveFastTrainBottomLaneCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_TarsonisTrain_Bonus01", gv_fastTrainBottomLane_Destroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFastTrainBottomLaneUpdate_Init () {
    gt_ObjectiveFastTrainBottomLaneUpdate = TriggerCreate("gt_ObjectiveFastTrainBottomLaneUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - FastTrainBottomLane - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFastTrainBottomLaneComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFastTrainBottomLaneCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_TarsonisTrain_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFastTrainBottomLaneComplete_Init () {
    gt_ObjectiveFastTrainBottomLaneComplete = TriggerCreate("gt_ObjectiveFastTrainBottomLaneComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - FastTrainBottomLane - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFastTrainBottomLaneFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFastTrainBottomLaneCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_TarsonisTrain_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFastTrainBottomLaneFailed_Init () {
    gt_ObjectiveFastTrainBottomLaneFailed = TriggerCreate("gt_ObjectiveFastTrainBottomLaneFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictoryFanfare, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfare_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(gv_pLAYER_01_USER);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    Wait(1.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfare_Init () {
    gt_VictoryFanfare = TriggerCreate("gt_VictoryFanfare_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init05Units_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
    gt_EventController_Init();
    gt_AIEvent01AttackWave4minLeftSide_Init();
    gt_TrainEvent01TrainTopLane5min_Init();
    gt_AIEvent02AttackWave6minRightSide_Init();
    gt_AIEvent03AttackWave7minLeftSide_Init();
    gt_TrainEvent02TrainMidLane8min_Init();
    gt_AIEvent04AttackWave10minRightSide_Init();
    gt_TrainEvent03TrainTopLane11min_Init();
    gt_AIEvent0412minBunker_Init();
    gt_AIEvent05AttackWave13minLeftSideExpo_Init();
    gt_TrainEvent04TrainTopMidLane14min_Init();
    gt_AIEvent06AttackWave16minLeftSide_Init();
    gt_TrainEvent05TrainMidLane17min_Init();
    gt_AIEvent07AttackWave19minRightSideExpo_Init();
    gt_TrainEvent06TraintopMidLane20min_Init();
    gt_AIEvent08AttackWave22minLeftSide_Init();
    gt_TrainEvent07TrainMidLane23min_Init();
    gt_AIEvent09AttackWave24minRightSide_Init();
    gt_TrainEvent08TrainDoubleSingle25min_Init();
    gt_TrainPathInitialization_Init();
    gt_TrainPathInitializationForward_Init();
    gt_TrainPathInitializationBackward_Init();
    gt_SpawnEscorts_Init();
    gt_TrainMovement_Init();
    gt_TrainDespawn_Init();
    gt_EscortDespawn_Init();
    gt_TrainCarDamageAnimationController_Init();
    gt_BonusObjectiveTrain01_Init();
    gt_BonusObjectiveTrain02_Init();
    gt_ScoreScreenTrainDamageTaken_Init();
    gt_InitializeTrainStations_Init();
    gt_InitializeChargers_Init();
    gt_TrainStationController_Init();
    gt_ChargePulseController_Init();
    gt_ActivateStation_Init();
    gt_DeactivateStation_Init();
    gt_TrainSpawnAnimations_Init();
    gt_TrainDespawnAnimationsTop_Init();
    gt_TrainDespawnAnimationsMid_Init();
    gt_TrainDespawnAnimationsBottom_Init();
    gt_RevealBottomLane_Init();
    gt_RevealMiddleLane_Init();
    gt_RevealTopLane_Init();
    gt_TrainEscapingTopQ_Init();
    gt_TrainEscapingBottomQ_Init();
    gt_TrainSpawnedQ_Init();
    gt_TrainSpawnedAlmostDoneQ_Init();
    gt_TrainSpawnedFinalStageQ_Init();
    gt_TrainSpawnedQ2_Init();
    gt_TrainSpawnedQ3_Init();
    gt_TrainSpawnedQ4_Init();
    gt_TrainSpawnedQ5_Init();
    gt_BonusTrainDestroyedQ_Init();
    gt_BonusTrainSpawned01Q_Init();
    gt_BonusTrainSpawned02Q_Init();
    gt_IncomingAttackWaveQ_Init();
    gt_TrainVictoryQ_Init();
    gt_ExpansionBulliesStructures_Init();
    gt_ExpansionBulliesUnits_Init();
    gt_BunkerDeath_Init();
    gt_RunFortifyTrackswithDefenses_Init();
    gt_TipReadyQ_Init();
    gt_DefeatTooManyTrainsMissed_Init();
    gt_VictoryTrainsDestroyedCompleted_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_ObjectiveTheGreatTrainRobberyCreate_Init();
    gt_ObjectiveTheGreatTrainRobberyUpdate_Init();
    gt_ObjectiveTheGreatTrainRobberyComplete_Init();
    gt_ObjectiveTheGreatTrainRobberyFailed_Init();
    gt_ObjectiveDontMissTrainsCreate_Init();
    gt_ObjectiveDontMissTrainsUpdate_Init();
    gt_ObjectiveDontMissTrainsComplete_Init();
    gt_ObjectiveDontMissTrainsFailed_Init();
    gt_ObjectiveFastTrainBottomLaneCreate_Init();
    gt_ObjectiveFastTrainBottomLaneUpdate_Init();
    gt_ObjectiveFastTrainBottomLaneComplete_Init();
    gt_ObjectiveFastTrainBottomLaneFailed_Init();
    gt_VictoryQ_Init();
    gt_VictoryFanfare_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
