//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Temple of the Past
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_c_ThrasherCountTotal = 17;
const int gv_c_ArrayOffset = 3;
const int gv_pLAYER_03_ENEMY_WAVE1 = 13;
const int gv_pLAYER_04_ENEMY_WAVE2 = 14;
const int gv_pLAYER_05_ENEMY_TRICKLE1 = 13;
const int gv_pLAYER_06_ENEMY_TRICKLE2 = 14;
const int gv_pLAYER_07_TEMPLE = 7;
const int gv_pLAYER_08_THRASHERS = 8;
const int gv_pLAYER_09_ROCK = 9;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_AIAttackVector__None = 0;
const int ge_AIAttackVector_MainRamp_BottomLeft = 1;
const int ge_AIAttackVector_P1Ramp_TopLeft = 2;
const int ge_AIAttackVector_P2Ramp_BottomRight = 3;
const int ge_AIAttackVector_AirRamp_TopRight = 4;
const int ge_WaveB_09mins_Branch_Type__None = 0;
const int ge_WaveB_09mins_Branch_Type_TopLeftFirst = 1;
const int ge_WaveB_09mins_Branch_Type_BottomRightFirst = 2;
const int ge_WaveB_18mins_Branch_Type__None = 0;
const int ge_WaveB_18mins_Branch_Type_SplitAttack = 1;
const int ge_WaveB_18mins_Branch_Type_CenterAttack = 2;
const int ge_PersistentAttackLevel_Level_00 = 0;
const int ge_PersistentAttackLevel_Level_01 = 1;
const int ge_PersistentAttackLevel_Level_02 = 2;
const int ge_PersistentAttackLevel_Level_03 = 3;
const int ge_PersistentAttackLevel_Level_04 = 4;
const int ge_PersistentAttackLevel_Level_05 = 5;
const int ge_UntitledPreset001_VoidThrasher_TargetedBombard = 0;
const int ge_UntitledPreset001_VoidThrasher_LightningBreath = 1;
const int ge_RevealRegions_Revealer_Base = 0;
const int ge_RevealRegions_Revealer_BaseExtended = 1;
const int ge_RevealRegions_Revealer_BottomLeft = 2;
const int ge_RevealRegions_Revealer_BottomRight = 3;
const int ge_RevealRegions_Revealer_TopLeft = 4;
const int ge_RevealRegions_Revealer_TopRight = 5;
const int ge_VoidThrasherLevel_Level01 = 0;
const int ge_VoidThrasherLevel_Level02 = 1;
const int ge_VoidThrasherLevel_Level03 = 2;
const int ge_VoidThrasherLevel_Level04 = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_objectiveRescueStalkers;
int gv_objectiveDestroyZenithStonesKilled;
int gv_objectiveDestroyZergBase;
string gv_hybridMajor;
string gv_hybridMinor;
bool gv_attackPatternSet;
string gv_attackWavePattern;
int gv_waveB_09mins_Branch;
int gv_waveB_18mins_Branch;
int gv_persistentAttackLevel;
bool gv_firstAttackWave;
unitgroup gv_flyingAwayUnits;
unit[gv_c_ThrasherCountTotal + 1] gv_thrasherUnit;
timer[gv_c_ThrasherCountTotal + 1][3] gv_thrasherAttackCooldown;
revealer[3][7] gv_revealers;
timer gv_victoryTimer_AlmostDone;
timer gv_victoryTimer_50;
timer gv_victoryTimer_75;
timer gv_victoryTimer;
fixed gv_voidThrasher_ShieldsIncrease;
fixed gv_voidThrasher_LifeIncrease;
fixed gv_thrasherAttackCooldown_Bombardment;
fixed gv_thrasherAttackCooldown_LightningBreath;
string gv_c_ThrasherUnitType;
bool gv_bonusActive;
unit gv_c_TempleObjective;
int gv_trasherNumber;
bool[11] gv_thrasherAlive;
int gv_leaderboardThrasherScoreFinal;
int gv_leaderboardBonusScoreFinal;
int gv_leaderboardObjectiveScoreFinal;
int gv_optionsDialog;
int gv_optionsDialogTitle;
int[4] gv_optionsDialogLabels;
int[4] gv_optionsDialogMenus;
int gv_optionsDialogAccept;
bank gv_savedBank;
string gv_bankSection;
int gv_options_Pattern;
string gv_options_Pattern_Key;
int gv_options_Hybrid;
string gv_options_Hybrid_Key;
int gv_options_Attacks;
string gv_options_Attacks_Key;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
string gv_mapMusicTrack;
playergroup gv_enemyPlayerGroup;
unitgroup gv_templeWalls;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_attackWavePattern = "";
    gv_persistentAttackLevel = ge_PersistentAttackLevel_Level_00;
    gv_firstAttackWave = true;
    gv_flyingAwayUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_c_ThrasherCountTotal; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_thrasherAttackCooldown[init_i][init_j] = TimerCreate();
        }
    }
    gv_victoryTimer_AlmostDone = TimerCreate();
    gv_victoryTimer_50 = TimerCreate();
    gv_victoryTimer_75 = TimerCreate();
    gv_victoryTimer = TimerCreate();
    gv_thrasherAttackCooldown_LightningBreath = 10.0;
    gv_c_ThrasherUnitType = "VoidThrasher";
    gv_c_TempleObjective = UnitFromId(19);
    gv_optionsDialog = c_invalidDialogId;
    gv_optionsDialogTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionsDialogMenus[init_i] = c_invalidDialogControlId;
    }
    gv_optionsDialogAccept = c_invalidDialogControlId;
    gv_bankSection = "TotP";
    gv_options_Pattern = 1;
    gv_options_Pattern_Key = "pattern";
    gv_options_Hybrid_Key = "hybrid";
    gv_options_Attacks = 1;
    gv_options_Attacks_Key = "attacks";
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_templeWalls = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
point gf_AttackVectorSpawnPoint (int lp_attackVector);
void gf_RunTriggerAtMissionTime (trigger lp_trigger, fixed lp_missionTime);
void gf_SetPersistentAttackLevel (int lp_persistentAttackLevel);
void gf_SendAttackgatherfor (int lp_attackVector, fixed lp_gatherFor, int lp_resourceSize, int lp_techLevel);
int gf_GetVoidThrasherIndex (unit lp_thrasher);
timer gf_GetVoidThrasherAttackCooldown (unit lp_thrasher, int lp_thrasherAttack);
int gf_SetVoidThrasherIndex ();
void gf_VoidThrasherAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup);
void gf_CreateVoidThrasher (unit lp_voidRift, int lp_thrasherLevel);
void gf_ExporeUnexploreAreaforPlayerGroup (playergroup lp_players, bool lp_state, region lp_area, bool lp_checkCliffLevel);
point gf_GetWaveStagingPosition (int lp_attackVector);
void gf_CreateNewAttackVectorAlertPingLine (point lp_lineStart, point lp_lineEnd);
void gf_RevealAreaWhileUnitGroupisAlive (unitgroup lp_triggeringUnits, region lp_revealedRegion);
void gf_DropAttackWithPing (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ObjectiveDestroyZenithStonesCreate;
trigger gt_ObjectiveDestroyZenithStonesComplete;
trigger gt_ObjectiveDestroyZenithStonesUpdate;
trigger gt_ObjectiveDestroyZenithStonesFailed;
trigger gt_ObjectiveDefendTempleCreate;
trigger gt_ObjectiveDefendTempleUpdate;
trigger gt_ObjectiveDefendTempleComplete;
trigger gt_ObjectiveDefendTempleFailed;
trigger gt_AlertMainRamp01mins;
trigger gt_AlertP1Ramp;
trigger gt_AlertP2Ramp;
trigger gt_AlertAirRamp;
trigger gt_RunAttackWavesA;
trigger gt_AttackWaveA03mins;
trigger gt_AttackWaveA06mins;
trigger gt_AttackWaveA09mins;
trigger gt_AttackWaveA12mins;
trigger gt_AttackWaveA15mins;
trigger gt_AttackWaveA18mins;
trigger gt_AttackWaveA20mins;
trigger gt_AttackWaveA22mins;
trigger gt_RunAttackWavesB;
trigger gt_AttackWaveB03mins;
trigger gt_AttackWaveB06mins;
trigger gt_AttackWaveB09mins;
trigger gt_AttackWaveB12mins;
trigger gt_AttackWaveB15mins;
trigger gt_AttackWaveB18mins;
trigger gt_AttackWaveB20mins;
trigger gt_AttackWaveB22mins;
trigger gt_RemoveUsedTransports;
trigger gt_AIGiveResources;
trigger gt_ExtraThrasherBreathAttacks;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareTempleAnimations;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_ScoreScreenTempleLifeLeft;
trigger gt_AttackWaveIncomingQ;
trigger gt_BonusObjectiveRevealQ;
trigger gt_BonusObjectiveTwoRemainQ;
trigger gt_BonusObjectiveOneRemainQ;
trigger gt_BonusObjectiveCompleteQ;
trigger gt_HybridDetectedAllDifQ;
trigger gt_HybridDetectedHighDifQ;
trigger gt_PrimaryObjectiveAlmostDoneQ;
trigger gt_PrimaryObjectiveAlmostDone50Q;
trigger gt_PrimaryObjectiveAlmostDone75Q;
trigger gt_TempleUnderAttackQ;
trigger gt_TempleCriticalQ;
trigger gt_TempleWarning50Q;
trigger gt_TempleWarning25Q;
trigger gt_VoidTrasherAttackingQ;
trigger gt_VoidTrasherAppearsQ;
trigger gt_VoidTrasherAppears2XQ;
trigger gt_VoidTrasherDeathQ;
trigger gt_SurpriseAttackQ;
trigger gt_VoidThrasherAttackWave;
trigger gt_StartBonusObjective;
trigger gt_BonusObjectiveSpotted;
trigger gt_BonusObjectiveDies;
trigger gt_TempleAnimation;
trigger gt_UpdateMainObjectiveTextTimer;
trigger gt_TempleRocksUnderAttackMain;
trigger gt_TempleRocksUnderAttackP1Ramp;
trigger gt_TempleRocksUnderAttackP2Ramp;
trigger gt_VictoryProgressVisualization;
trigger gt_VoidThrasherMissiles;
trigger gt_Init02LoadingComplete;
trigger gt_Init03Players;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartAIRNG;
trigger gt_StartGameQ;
trigger gt_CreateOptionsDialog;
trigger gt_OpenOptions;
trigger gt_CloseOptions;
trigger gt_RunAttackWavesARNG;
trigger gt_RunAttackWavesBRNG;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
point gf_AttackVectorSpawnPoint (int lp_attackVector) {
    // Variable Declarations
    point lv_returnPoint;

    // Automatic Variable Declarations
    int auto20FD7385_val;

    // Variable Initialization

    // Implementation
    auto20FD7385_val = lp_attackVector;
    if (auto20FD7385_val == ge_AIAttackVector_MainRamp_BottomLeft) {
        lv_returnPoint = PointFromId(2151);
    }
    else if (auto20FD7385_val == ge_AIAttackVector_P1Ramp_TopLeft) {
        lv_returnPoint = PointFromId(2152);
    }
    else if (auto20FD7385_val == ge_AIAttackVector_P2Ramp_BottomRight) {
        lv_returnPoint = PointFromId(2153);
    }
    else if (auto20FD7385_val == ge_AIAttackVector_AirRamp_TopRight) {
        lv_returnPoint = PointFromId(2154);
    }
    else {
        lv_returnPoint = null;
    }
    return lv_returnPoint;
}

void gf_RunTriggerAtMissionTime (trigger lp_trigger, fixed lp_missionTime) {
    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_trigger, true, false);
    }

}

void gf_SetPersistentAttackLevel (int lp_persistentAttackLevel) {
    // Automatic Variable Declarations
    // Implementation
    gv_persistentAttackLevel = lp_persistentAttackLevel;
}

trigger auto_gf_SendAttackgatherfor_Trigger = null;
int auto_gf_SendAttackgatherfor_lp_attackVector;
fixed auto_gf_SendAttackgatherfor_lp_gatherFor;
int auto_gf_SendAttackgatherfor_lp_resourceSize;
int auto_gf_SendAttackgatherfor_lp_techLevel;

void gf_SendAttackgatherfor (int lp_attackVector, fixed lp_gatherFor, int lp_resourceSize, int lp_techLevel) {
    auto_gf_SendAttackgatherfor_lp_attackVector = lp_attackVector;
    auto_gf_SendAttackgatherfor_lp_gatherFor = lp_gatherFor;
    auto_gf_SendAttackgatherfor_lp_resourceSize = lp_resourceSize;
    auto_gf_SendAttackgatherfor_lp_techLevel = lp_techLevel;

    if (auto_gf_SendAttackgatherfor_Trigger == null) {
        auto_gf_SendAttackgatherfor_Trigger = TriggerCreate("auto_gf_SendAttackgatherfor_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendAttackgatherfor_Trigger, false, false);
}

bool auto_gf_SendAttackgatherfor_TriggerFunc (bool testConds, bool runActions) {
    int lp_attackVector = auto_gf_SendAttackgatherfor_lp_attackVector;
    fixed lp_gatherFor = auto_gf_SendAttackgatherfor_lp_gatherFor;
    int lp_resourceSize = auto_gf_SendAttackgatherfor_lp_resourceSize;
    int lp_techLevel = auto_gf_SendAttackgatherfor_lp_techLevel;

    // Variable Declarations
    unitgroup lv_attackGroup;
    unitgroup lv_attackGroup_Air;
    unit lv_attackGroupIter;
    unitgroup lv_playerAttackGroup;
    unitgroup lv_playerAttackGroup_Air;
    int lv_row_count;
    int lv_col_count;
    int lv_row_iter;
    int lv_col_iter;
    int lv_row_max;
    int lv_col_max;
    int lv_row_min;
    int lv_col_min;
    int lv_unitGroupIndex;
    point lv_gather;
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_transportCount;
    string lv_transportType;
    unitgroup lv_transportExistingGroup;
    unit lv_transportIter;
    fixed lv_transportHeight;
    timer lv_gatherTimer;
    playergroup lv_attackingPlayers;
    int lv_attackingPlayerIter;
    point lv_spawnLocation;
    int lv_attackTargetType;

    // Automatic Variable Declarations
    unitgroup auto318E1489_g;
    int auto318E1489_u;
    unitgroup auto14E91BA2_g;
    int auto14E91BA2_u;
    playergroup auto2F04C3F1_g;
    unitgroup autoF1251088_g;
    int autoF1251088_u;
    fixed auto6237F526_at;
    playergroup auto62AE8840_g;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_attackGroup_Air = UnitGroupEmpty();
    lv_playerAttackGroup = UnitGroupEmpty();
    lv_playerAttackGroup_Air = UnitGroupEmpty();
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_transportExistingGroup = UnitGroupEmpty();
    lv_gatherTimer = TimerCreate();
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackTargetType = libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleSideRamp;

    // Implementation
    lv_gather = gf_GetWaveStagingPosition(lp_attackVector);
    lv_resourceBucket = lp_resourceSize;
    lv_techBucket = lp_techLevel;
    if ((lp_attackVector == ge_AIAttackVector_AirRamp_TopRight)) {
        lv_attackTargetType = libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleAirRamp;
    }
    else if ((lp_attackVector == ge_AIAttackVector_MainRamp_BottomLeft)) {
        lv_attackTargetType = libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleMainRamp;
    }
    else if (true) {
        lv_attackTargetType = libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleSideRamp;
    }
    lv_spawnLocation = gf_AttackVectorSpawnPoint(lp_attackVector);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_03_ENEMY_WAVE1);
    PlayerGroupAdd(lv_attackingPlayers, gv_pLAYER_04_ENEMY_WAVE2);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY_WAVE1, gv_pLAYER_04_ENEMY_WAVE2, lv_resourceBucket, lv_techBucket, lv_spawnLocation, true);
    lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    AISetGroupScriptControlled(lv_attackGroup, true);
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_attackGroup_Air = UnitGroupFilterPlane(lv_attackGroup, c_planeAir, 0);
    UnitGroupRemoveUnitGroup(lv_attackGroup, lv_attackGroup_Air);
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) > 0)) {
        if ((lp_attackVector != ge_AIAttackVector_AirRamp_TopRight)) {
            lv_col_count = FixedToInt(SquareRoot(UnitGroupCount(lv_attackGroup, c_unitCountAlive)));
            lv_col_count = MinI(lv_col_count, 4);
            lv_row_count = FixedToInt((UnitGroupCount(lv_attackGroup, c_unitCountAlive) / lv_col_count));
            lv_row_min = (1 - FixedToInt((lv_row_count / 2.0)));
            lv_col_min = (1 - FixedToInt((lv_col_count / 2.0)));
            lv_row_max = (lv_row_count + lv_row_iter);
            lv_col_max = (lv_col_count + lv_col_iter);
            lv_row_iter = lv_row_min;
            lv_col_iter = (lv_col_min - 1);
            auto318E1489_g = lv_attackGroup;
            auto318E1489_u = UnitGroupCount(auto318E1489_g, c_unitCountAll);
            for (;; auto318E1489_u -= 1) {
                lv_attackGroupIter = UnitGroupUnitFromEnd(auto318E1489_g, auto318E1489_u);
                if (lv_attackGroupIter == null) { break; }
                if ((PlayerRace(UnitGetOwner(lv_attackGroupIter)) != "Zerg")) {
                    lv_unitGroupIndex += 1;
                    lv_col_iter += 1;
                    if ((lv_col_iter >= lv_col_max)) {
                        lv_col_iter = lv_col_min;
                        lv_row_iter += 1;
                    }

                    UnitIssueOrder(lv_attackGroupIter, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(lv_gather, (((2.0 * lv_col_iter) * Cos((PointGetFacing(lv_gather) + 90.0))) - ((2.0 * lv_row_iter) * Sin((PointGetFacing(lv_gather) + 90.0)))), (((2.0 * lv_col_iter) * Sin((PointGetFacing(lv_gather) + 90.0))) + ((2.0 * lv_row_iter) * Cos((PointGetFacing(lv_gather) + 90.0)))))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_attackGroupIter, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(lv_gather, 8.0))), c_orderQueueReplace);
                }
            }
        }
        else {
            UnitGroupIssueOrder(lv_attackGroup, OrderTargetingPoint(AbilityCommand("attack", 0), lv_gather), c_orderQueueReplace);
        }
    }

    if ((UnitGroupCount(lv_attackGroup_Air, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lv_attackGroup_Air, OrderTargetingPoint(AbilityCommand("attack", 0), lv_gather), c_orderQueueReplace);
        auto14E91BA2_g = UnitGroupFilter("Scourge", c_playerAny, lv_attackGroup_Air, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto14E91BA2_u = UnitGroupCount(auto14E91BA2_g, c_unitCountAll);
        for (;; auto14E91BA2_u -= 1) {
            lv_attackGroupIter = UnitGroupUnitFromEnd(auto14E91BA2_g, auto14E91BA2_u);
            if (lv_attackGroupIter == null) { break; }
            UnitIssueOrder(lv_attackGroupIter, Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
        }
    }

    if ((lp_attackVector == ge_AIAttackVector_AirRamp_TopRight)) {
        auto2F04C3F1_g = lv_attackingPlayers;
        lv_attackingPlayerIter = -1;
        while (true) {
            lv_attackingPlayerIter = PlayerGroupNextPlayer(auto2F04C3F1_g, lv_attackingPlayerIter);
            if (lv_attackingPlayerIter < 0) { break; }
            AITransportSetReturn(lv_attackingPlayerIter, RegionGetCenter(RegionFromId(15)));
            lv_transportType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, lv_attackingPlayerIter);
            lv_transportCount = (2 + CeilingI((UnitGroupCount(UnitGroupFilterPlayer(lv_attackGroup, lv_attackingPlayerIter, 0), c_unitCountAlive) / 2.0)));
            if ((lv_transportCount > 0)) {
                UnitCreate(lv_transportCount, lv_transportType, 0, lv_attackingPlayerIter, lv_gather, libNtve_gf_RandomAngle());
                autoF1251088_g = UnitLastCreatedGroup();
                autoF1251088_u = UnitGroupCount(autoF1251088_g, c_unitCountAll);
                for (;; autoF1251088_u -= 1) {
                    lv_transportIter = UnitGroupUnitFromEnd(autoF1251088_g, autoF1251088_u);
                    if (lv_transportIter == null) { break; }
                    lv_transportHeight = (UnitGetHeight(lv_transportIter) + RandomFixed(-0.5, 0.5));
                    UnitSetHeight(lv_transportIter, 16.0, 0.0);
                    UnitSetHeight(lv_transportIter, lv_transportHeight, (3.0 + RandomFixed(-0.5, 0.5)));
                }
                UnitGroupAddUnitGroup(lv_transportExistingGroup, UnitLastCreatedGroup());
            }

            AISetGroupScriptControlled(lv_transportExistingGroup, true);
            UnitGroupAddUnitGroup(lv_attackGroup_Air, lv_transportExistingGroup);
        }
    }

    TimerStart(lv_gatherTimer, lp_gatherFor, false, c_timeAI);
    auto6237F526_at = 0;
    while (!((TimerGetRemaining(lv_gatherTimer) <= 0.0) && ((UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup, RegionCircle(lv_gather, 5.0), 0), c_unitCountAlive) > 1) || (UnitGroupCount(UnitGroupFilterRegion(lv_attackGroup_Air, RegionCircle(lv_gather, 5.0), 0), c_unitCountAlive) > 1))) && auto6237F526_at <= (lp_gatherFor + 3.0)) {
        Wait(1.0, c_timeAI);
        auto6237F526_at = auto6237F526_at + 1.0;
    }
    Wait(2.0, c_timeAI);
    auto62AE8840_g = lv_attackingPlayers;
    lv_attackingPlayerIter = -1;
    while (true) {
        lv_attackingPlayerIter = PlayerGroupNextPlayer(auto62AE8840_g, lv_attackingPlayerIter);
        if (lv_attackingPlayerIter < 0) { break; }
        lv_playerAttackGroup = UnitGroupFilterPlayer(lv_attackGroup, lv_attackingPlayerIter, 0);
        lv_playerAttackGroup_Air = UnitGroupFilterPlayer(lv_attackGroup_Air, lv_attackingPlayerIter, 0);
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(lv_attackingPlayerIter, lv_playerAttackGroup, lv_gather, lv_attackTargetType);
        AIAttackWaveUseGroup(lv_attackingPlayerIter, lv_playerAttackGroup);
        AIAttackWaveUseGroup(lv_attackingPlayerIter, lv_playerAttackGroup_Air);
        AIAttackWaveSetGatherPoint(lv_attackingPlayerIter, lv_gather);
        AIAttackWaveSetTargetUnit(lv_attackingPlayerIter, gv_c_TempleObjective);
        if ((lp_attackVector == ge_AIAttackVector_AirRamp_TopRight)) {
            AIAttackWaveAddWaypoint(lv_attackingPlayerIter, PointFromId(1357), false);
            AIAttackWaveAddWaypoint(lv_attackingPlayerIter, PointFromId(1358), false);
        }

        AIAttackWaveSend(lv_attackingPlayerIter, 0, true);
        libCOMI_gf_AmonPlayersWave(lv_playerAttackGroup);
    }
    return true;
}

int gf_GetVoidThrasherIndex (unit lp_thrasher) {
    // Variable Declarations
    int lv_unitIter;

    // Automatic Variable Declarations
    const int auto6779915B_ae = gv_c_ThrasherCountTotal;
    const int auto6779915B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIter = 1;
    for ( ; ( (auto6779915B_ai >= 0 && lv_unitIter <= auto6779915B_ae) || (auto6779915B_ai < 0 && lv_unitIter >= auto6779915B_ae) ) ; lv_unitIter += auto6779915B_ai ) {
        if (((gv_thrasherUnit[lv_unitIter] == lp_thrasher))) {
            return lv_unitIter;
        }

    }
    return -1;
}

timer gf_GetVoidThrasherAttackCooldown (unit lp_thrasher, int lp_thrasherAttack) {
    // Variable Declarations
    int lv_unitIter;

    // Automatic Variable Declarations
    const int autoBE232D79_ae = gv_c_ThrasherCountTotal;
    const int autoBE232D79_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIter = 1;
    for ( ; ( (autoBE232D79_ai >= 0 && lv_unitIter <= autoBE232D79_ae) || (autoBE232D79_ai < 0 && lv_unitIter >= autoBE232D79_ae) ) ; lv_unitIter += autoBE232D79_ai ) {
        if ((gv_thrasherUnit[lv_unitIter] == lp_thrasher)) {
            return gv_thrasherAttackCooldown[lv_unitIter][(lp_thrasherAttack)];
        }

    }
    return null;
}

int gf_SetVoidThrasherIndex () {
    // Variable Declarations
    int lv_unitIter;

    // Automatic Variable Declarations
    const int auto4C8DC857_ae = gv_c_ThrasherCountTotal;
    const int auto4C8DC857_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIter = 1;
    for ( ; ( (auto4C8DC857_ai >= 0 && lv_unitIter <= auto4C8DC857_ae) || (auto4C8DC857_ai < 0 && lv_unitIter >= auto4C8DC857_ae) ) ; lv_unitIter += auto4C8DC857_ai ) {
        if ((gv_thrasherUnit[lv_unitIter] == null)) {
            return lv_unitIter;
        }

    }
    return -1;
}

void gf_VoidThrasherAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    // Variable Declarations
    const bool lv_c_BombardObjective = true;
    timer lv_attackCooldown_Bombard;
    timer lv_attackCooldown_LightningBreath;
    unitgroup lv_threatGroup;
    point lv_target;
    unit lv_highestVitalityUnit;
    fixed lv_highestVitality;
    unit lv_testUnit;
    fixed lv_testVitality;
    int lv_targetPlayer;
    int lv_minScoreIter;
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup auto676C3262_g;
    int auto676C3262_u;
    const int autoA9E3129C_ae = 0;
    const int autoA9E3129C_ai = -1;
    unitgroup auto36531102_g;
    int auto36531102_u;

    // Variable Initialization
    lv_attackCooldown_Bombard = TimerCreate();
    lv_attackCooldown_LightningBreath = TimerCreate();
    lv_threatGroup = UnitGroupEmpty();

    // Implementation
    lv_attackCooldown_Bombard = gf_GetVoidThrasherAttackCooldown(lp_aiUnit, ge_UntitledPreset001_VoidThrasher_TargetedBombard);
    lv_attackCooldown_LightningBreath = gf_GetVoidThrasherAttackCooldown(lp_aiUnit, ge_UntitledPreset001_VoidThrasher_LightningBreath);
    lv_threatGroup = UnitGroupFilterAlliance(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_aiUnit), CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VoidThrasherLightningAoE", "Range[" + IntToString(0) + "]", c_playerAny)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), lp_player, c_unitAllianceEnemy, 0);
    UnitGroupRemoveUnitGroup(lv_threatGroup, gv_templeWalls);
    auto676C3262_g = lv_threatGroup;
    auto676C3262_u = UnitGroupCount(auto676C3262_g, c_unitCountAll);
    for (;; auto676C3262_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(auto676C3262_g, auto676C3262_u);
        if (lv_pickedUnit == null) { break; }
        if (((UnitGetType(lv_pickedUnit) == "Observer") || (UnitGetType(lv_pickedUnit) == "Overseer"))) {
            UnitGroupRemove(lv_threatGroup, lv_pickedUnit);
        }

    }
    if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0)) {
        if ((TimerGetRemaining(lv_attackCooldown_LightningBreath) <= 0.0)) {
            lv_minScoreIter = 4;
            for ( ; ( (autoA9E3129C_ai >= 0 && lv_minScoreIter <= autoA9E3129C_ae) || (autoA9E3129C_ai < 0 && lv_minScoreIter >= autoA9E3129C_ae) ) ; lv_minScoreIter += autoA9E3129C_ai ) {
                lv_target = AIBestTargetPoint(lv_threatGroup, 1, 30, lv_minScoreIter, 2.2, UnitGetPosition(lp_aiUnit), CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VoidThrasherLightningAoE", "Range[" + IntToString(0) + "]", c_playerAny), c_unitAttributeNone);
                if ((lv_target != null)) {
                    TimerStart(lv_attackCooldown_LightningBreath, gv_thrasherAttackCooldown_LightningBreath, false, c_timeAI);
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), lv_target));
                }

            }
        }

    }
    else if (true) {
        if ((TimerGetRemaining(lv_attackCooldown_Bombard) <= 0.0)) {
            TimerStart(lv_attackCooldown_Bombard, (gv_thrasherAttackCooldown_Bombardment * RandomFixed(0.95, 1.05)), false, c_timeAI);
            if ((lv_c_BombardObjective == true)) {
                TriggerExecute(gt_VoidTrasherAttackingQ, true, false);
                libNtve_gf_AICast(lp_aiUnit, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_c_TempleObjective));
            }
            else {
                lv_targetPlayer = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
                lv_threatGroup = UnitGroup(null, lv_targetPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto36531102_g = lv_threatGroup;
                auto36531102_u = UnitGroupCount(auto36531102_g, c_unitCountAll);
                for (;; auto36531102_u -= 1) {
                    lv_testUnit = UnitGroupUnitFromEnd(auto36531102_g, auto36531102_u);
                    if (lv_testUnit == null) { break; }
                    lv_testVitality = UnitGetPropertyFixed(lv_testUnit, c_unitPropVitality, c_unitPropNormal);
                    if ((lv_testVitality > lv_highestVitality)) {
                        lv_highestVitality = lv_testVitality;
                        lv_highestVitalityUnit = lv_testUnit;
                    }
                    else {
                        if ((lv_testVitality == lv_highestVitality)) {
                            if ((UnitGetPropertyFixed(lv_testUnit, c_unitPropVitality, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestVitalityUnit, c_unitPropVitality, c_unitPropCurrent))) {
                                lv_highestVitality = lv_testVitality;
                                lv_highestVitalityUnit = lv_testUnit;
                            }

                        }

                    }
                }
                libNtve_gf_AICast(lp_aiUnit, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), lv_highestVitalityUnit));
            }
        }

    }
}

trigger auto_gf_CreateVoidThrasher_Trigger = null;
unit auto_gf_CreateVoidThrasher_lp_voidRift;
int auto_gf_CreateVoidThrasher_lp_thrasherLevel;

void gf_CreateVoidThrasher (unit lp_voidRift, int lp_thrasherLevel) {
    auto_gf_CreateVoidThrasher_lp_voidRift = lp_voidRift;
    auto_gf_CreateVoidThrasher_lp_thrasherLevel = lp_thrasherLevel;

    if (auto_gf_CreateVoidThrasher_Trigger == null) {
        auto_gf_CreateVoidThrasher_Trigger = TriggerCreate("auto_gf_CreateVoidThrasher_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateVoidThrasher_Trigger, false, false);
}

bool auto_gf_CreateVoidThrasher_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidRift = auto_gf_CreateVoidThrasher_lp_voidRift;
    int lp_thrasherLevel = auto_gf_CreateVoidThrasher_lp_thrasherLevel;

    // Variable Declarations
    point lv_spawnLocation;
    region lv_terrainHideRegion;
    int lv_localThrasherNumber;

    // Automatic Variable Declarations
    int auto5DF470A8_val;

    // Variable Initialization

    // Implementation
    if (((lp_voidRift == null) || (UnitIsAlive(lp_voidRift) == false) || (UnitIsAlive(gv_c_TempleObjective) == false) || (libCOMI_gf_GameIsOver() == true))) {
        return true;
    }

    lv_spawnLocation = UnitGetPosition(lp_voidRift);
    lv_terrainHideRegion = RegionRect((PointGetX(lv_spawnLocation) - 2.0), (PointGetY(lv_spawnLocation) - 2.0), (PointGetX(lv_spawnLocation) + 2.0), (PointGetY(lv_spawnLocation) + 2.0));
    UnitRemove(lp_voidRift);
    Wait(0.0625, c_timeAI);
    UnitCreate(1, gv_c_ThrasherUnitType, c_unitCreateIgnorePlacement, gv_pLAYER_08_THRASHERS, UnitGetPosition(lp_voidRift), AngleBetweenPoints(UnitGetPosition(lp_voidRift), UnitGetPosition(gv_c_TempleObjective)));
    gv_trasherNumber += 1;
    gv_thrasherAlive[gv_trasherNumber] = true;
    lv_localThrasherNumber = gv_trasherNumber;
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_c_ThrasherUnitType, "LifeMax", gv_pLAYER_08_THRASHERS) + gv_voidThrasher_LifeIncrease * (lp_thrasherLevel)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_c_ThrasherUnitType, "ShieldsMax", gv_pLAYER_08_THRASHERS) + gv_voidThrasher_ShieldsIncrease * (lp_thrasherLevel)));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitLastCreated()), 6.0), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitLastCreated()), 6.0), true, false);
    AISetUnitScriptControlled(UnitLastCreated(), true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    AnimWait(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 1.0, c_animationOffsetStart);
    TerrainShowRegion(lv_terrainHideRegion, false);
    AnimWait(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.0, c_animationOffsetEnd);
    AISetUnitScriptControlled(UnitLastCreated(), false);
    auto5DF470A8_val = lp_thrasherLevel;
    if (auto5DF470A8_val == ge_VoidThrasherLevel_Level01) {
        gv_thrasherAttackCooldown_Bombardment = 2.0;
    }
    else if (auto5DF470A8_val == ge_VoidThrasherLevel_Level02) {
        gv_thrasherAttackCooldown_Bombardment = 1.75;
    }
    else if (auto5DF470A8_val == ge_VoidThrasherLevel_Level03) {
        gv_thrasherAttackCooldown_Bombardment = 1.6;
    }
    else if (auto5DF470A8_val == ge_VoidThrasherLevel_Level04) {
        gv_thrasherAttackCooldown_Bombardment = 1.5;
    }
    else {
    }
    gv_thrasherUnit[gf_SetVoidThrasherIndex()] = UnitLastCreated();
    AIAttackWaveUseUnit(gv_pLAYER_08_THRASHERS, UnitLastCreated());
    AIAttackWaveSend(gv_pLAYER_08_THRASHERS, 0, true);
    while (!((UnitIsAlive(UnitLastCreated()) == false))) {
        Wait(1.0, c_timeGame);
    }
    TerrainShowRegion(lv_terrainHideRegion, true);
    gv_thrasherAlive[lv_localThrasherNumber] = false;
    TriggerExecute(gt_VoidTrasherDeathQ, true, false);
    return true;
}

void gf_ExporeUnexploreAreaforPlayerGroup (playergroup lp_players, bool lp_state, region lp_area, bool lp_checkCliffLevel) {
    // Variable Declarations
    int lv_l_playerIter;

    // Automatic Variable Declarations
    playergroup auto02ABAB04_g;

    // Variable Initialization

    // Implementation
    auto02ABAB04_g = lp_players;
    lv_l_playerIter = -1;
    while (true) {
        lv_l_playerIter = PlayerGroupNextPlayer(auto02ABAB04_g, lv_l_playerIter);
        if (lv_l_playerIter < 0) { break; }
        VisExploreArea(lv_l_playerIter, lp_area, lp_state, lp_checkCliffLevel);
    }
}

point gf_GetWaveStagingPosition (int lp_attackVector) {
    // Automatic Variable Declarations
    int auto63BFEA97_val;

    // Implementation
    auto63BFEA97_val = lp_attackVector;
    if (auto63BFEA97_val == ge_AIAttackVector_AirRamp_TopRight) {
        return PointFromId(54);
    }
    else if (auto63BFEA97_val == ge_AIAttackVector_P1Ramp_TopLeft) {
        return PointFromId(49);
    }
    else if (auto63BFEA97_val == ge_AIAttackVector_MainRamp_BottomLeft) {
        return PointFromId(43);
    }
    else if (auto63BFEA97_val == ge_AIAttackVector_P2Ramp_BottomRight) {
        return PointFromId(47);
    }
    else {
        return null;
    }
}

trigger auto_gf_CreateNewAttackVectorAlertPingLine_Trigger = null;
point auto_gf_CreateNewAttackVectorAlertPingLine_lp_lineStart;
point auto_gf_CreateNewAttackVectorAlertPingLine_lp_lineEnd;

void gf_CreateNewAttackVectorAlertPingLine (point lp_lineStart, point lp_lineEnd) {
    auto_gf_CreateNewAttackVectorAlertPingLine_lp_lineStart = lp_lineStart;
    auto_gf_CreateNewAttackVectorAlertPingLine_lp_lineEnd = lp_lineEnd;

    if (auto_gf_CreateNewAttackVectorAlertPingLine_Trigger == null) {
        auto_gf_CreateNewAttackVectorAlertPingLine_Trigger = TriggerCreate("auto_gf_CreateNewAttackVectorAlertPingLine_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateNewAttackVectorAlertPingLine_Trigger, false, false);
}

bool auto_gf_CreateNewAttackVectorAlertPingLine_TriggerFunc (bool testConds, bool runActions) {
    point lp_lineStart = auto_gf_CreateNewAttackVectorAlertPingLine_lp_lineStart;
    point lp_lineEnd = auto_gf_CreateNewAttackVectorAlertPingLine_lp_lineEnd;

    int init_i;

    // Variable Declarations
    fixed lv_l_distancebetweenlaunchandevac;
    int[32] lv_l_pings;
    int lv_l_foreachint_i;
    int lv_l_distancechunks;
    fixed lv_l_distbwpings;
    fixed lv_l_delaybetweencreatingnewping;
    fixed lv_l_pinglifetime;

    // Automatic Variable Declarations
    int auto9B46C46D_ae;
    const int auto9B46C46D_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 31; init_i += 1) {
        lv_l_pings[init_i] = c_invalidPingId;
    }
    lv_l_distbwpings = 12.0;
    lv_l_delaybetweencreatingnewping = 0.1;
    lv_l_pinglifetime = 4.0;

    // Implementation
    lv_l_distancebetweenlaunchandevac = DistanceBetweenPoints(lp_lineStart, lp_lineEnd);
    lv_l_distancechunks = FixedToInt((lv_l_distancebetweenlaunchandevac / lv_l_distbwpings));
    lv_l_distancechunks -= 1;
    auto9B46C46D_ae = lv_l_distancechunks;
    lv_l_foreachint_i = 1;
    for ( ; ( (auto9B46C46D_ai >= 0 && lv_l_foreachint_i <= auto9B46C46D_ae) || (auto9B46C46D_ai < 0 && lv_l_foreachint_i >= auto9B46C46D_ae) ) ; lv_l_foreachint_i += auto9B46C46D_ai ) {
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", libNtve_gf_PointOffsetTowardsPoint(lp_lineStart, (lv_l_distbwpings * IntToFixed(lv_l_foreachint_i)), lp_lineEnd), ColorWithAlpha(100.00, 0.00, 0.00, 24.71), lv_l_pinglifetime, AngleBetweenPoints(lp_lineStart, lp_lineEnd));
        PingSetScale(PingLastCreated(), 0.5);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F77A0E1B"));
        lv_l_pings[lv_l_foreachint_i] = PingLastCreated();
        Wait(lv_l_delaybetweencreatingnewping, c_timeReal);
    }
    Wait(lv_l_pinglifetime, c_timeReal);
    return true;
}

trigger auto_gf_RevealAreaWhileUnitGroupisAlive_Trigger = null;
unitgroup auto_gf_RevealAreaWhileUnitGroupisAlive_lp_triggeringUnits;
region auto_gf_RevealAreaWhileUnitGroupisAlive_lp_revealedRegion;

void gf_RevealAreaWhileUnitGroupisAlive (unitgroup lp_triggeringUnits, region lp_revealedRegion) {
    auto_gf_RevealAreaWhileUnitGroupisAlive_lp_triggeringUnits = lp_triggeringUnits;
    auto_gf_RevealAreaWhileUnitGroupisAlive_lp_revealedRegion = lp_revealedRegion;

    if (auto_gf_RevealAreaWhileUnitGroupisAlive_Trigger == null) {
        auto_gf_RevealAreaWhileUnitGroupisAlive_Trigger = TriggerCreate("auto_gf_RevealAreaWhileUnitGroupisAlive_TriggerFunc");
    }

    TriggerExecute(auto_gf_RevealAreaWhileUnitGroupisAlive_Trigger, false, false);
}

bool auto_gf_RevealAreaWhileUnitGroupisAlive_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_triggeringUnits = auto_gf_RevealAreaWhileUnitGroupisAlive_lp_triggeringUnits;
    region lp_revealedRegion = auto_gf_RevealAreaWhileUnitGroupisAlive_lp_revealedRegion;

    // Variable Declarations
    revealer lv_l_Revealer01;
    revealer lv_l_Revealer02;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    VisRevealerCreate(gv_pLAYER_01_USER, lp_revealedRegion);
    lv_l_Revealer01 = VisRevealerLastCreated();
    VisRevealerCreate(gv_pLAYER_02_USER, lp_revealedRegion);
    lv_l_Revealer02 = VisRevealerLastCreated();
    while (!((libNtve_gf_UnitGroupIsDead(lp_triggeringUnits) == true))) {
        Wait(0.5, c_timeAI);
    }
    Wait(2.0, c_timeGame);
    VisRevealerDestroy(lv_l_Revealer01);
    VisRevealerDestroy(lv_l_Revealer02);
    return true;
}

trigger auto_gf_DropAttackWithPing_Trigger = null;
int auto_gf_DropAttackWithPing_lp_player;
int auto_gf_DropAttackWithPing_lp_resourceSize;
int auto_gf_DropAttackWithPing_lp_techLevel;
point auto_gf_DropAttackWithPing_lp_dropPoint;
point auto_gf_DropAttackWithPing_lp_attackPoint;

void gf_DropAttackWithPing (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint) {
    auto_gf_DropAttackWithPing_lp_player = lp_player;
    auto_gf_DropAttackWithPing_lp_resourceSize = lp_resourceSize;
    auto_gf_DropAttackWithPing_lp_techLevel = lp_techLevel;
    auto_gf_DropAttackWithPing_lp_dropPoint = lp_dropPoint;
    auto_gf_DropAttackWithPing_lp_attackPoint = lp_attackPoint;

    if (auto_gf_DropAttackWithPing_Trigger == null) {
        auto_gf_DropAttackWithPing_Trigger = TriggerCreate("auto_gf_DropAttackWithPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropAttackWithPing_Trigger, false, false);
}

bool auto_gf_DropAttackWithPing_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_DropAttackWithPing_lp_player;
    int lp_resourceSize = auto_gf_DropAttackWithPing_lp_resourceSize;
    int lp_techLevel = auto_gf_DropAttackWithPing_lp_techLevel;
    point lp_dropPoint = auto_gf_DropAttackWithPing_lp_dropPoint;
    point lp_attackPoint = auto_gf_DropAttackWithPing_lp_attackPoint;

    // Variable Declarations
    unitgroup lv_attackGroup;
    unit lv_attackGroupIter;

    // Automatic Variable Declarations
    unitgroup auto8C51FC78_g;
    int auto8C51FC78_u;

    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();

    // Implementation
    TriggerExecute(gt_SurpriseAttackQ, true, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", lp_dropPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CA7B6AE2"));
    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lp_player, lp_resourceSize, lp_techLevel, lp_dropPoint);
    auto8C51FC78_g = UnitGroupFilter("Scourge", c_playerAny, lv_attackGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8C51FC78_u = UnitGroupCount(auto8C51FC78_g, c_unitCountAll);
    for (;; auto8C51FC78_u -= 1) {
        lv_attackGroupIter = UnitGroupUnitFromEnd(auto8C51FC78_g, auto8C51FC78_u);
        if (lv_attackGroupIter == null) { break; }
        UnitIssueOrder(lv_attackGroupIter, Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
    }
    Wait(1.0, c_timeAI);
    AIAttackWaveSetTargetUnit(lp_player, gv_c_TempleObjective);
    AIAttackWaveSetGatherPoint(lp_player, lp_dropPoint);
    AIAttackWaveUseGroup(lp_player, lv_attackGroup);
    AIAttackWaveSend(lp_player, 0, false);
    libCOMI_gf_AmonPlayersWave(lv_attackGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy ZenithStones Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZenithStonesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CreateObjectiveCampaign("AC_ShakurasTemple_Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZenithStonesCreate_Init () {
    gt_ObjectiveDestroyZenithStonesCreate = TriggerCreate("gt_ObjectiveDestroyZenithStonesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy ZenithStones Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZenithStonesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyZenithStonesCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_ShakurasTemple_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZenithStonesComplete_Init () {
    gt_ObjectiveDestroyZenithStonesComplete = TriggerCreate("gt_ObjectiveDestroyZenithStonesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy ZenithStones Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZenithStonesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyZenithStonesCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_ShakurasTemple_Bonus01", gv_objectiveDestroyZenithStonesKilled);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZenithStonesUpdate_Init () {
    gt_ObjectiveDestroyZenithStonesUpdate = TriggerCreate("gt_ObjectiveDestroyZenithStonesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy ZenithStones Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyZenithStonesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyZenithStonesCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_ShakurasTemple_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyZenithStonesFailed_Init () {
    gt_ObjectiveDestroyZenithStonesFailed = TriggerCreate("gt_ObjectiveDestroyZenithStonesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Temple Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendTempleCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_ShakurasTemple_Primary01", StringToText(""));
    libCOMI_gf_CreateObjectiveCampaign("AC_ShakurasTemple_Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendTempleCreate_Init () {
    gt_ObjectiveDefendTempleCreate = TriggerCreate("gt_ObjectiveDefendTempleCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Temple Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendTempleUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDefendTempleCreate, true, false);
    if ((TimerGetRemaining(gv_victoryTimer) > 0.0)) {
        TextExpressionSetToken("Param/Expression/B1A1C983", "timer", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_victoryTimer))));
        libCOMI_gf_SetMissionObjectiveCustomText("AC_ShakurasTemple_Primary01", TextExpressionAssemble("Param/Expression/B1A1C983"));
    }
    else {
        libCOMI_gf_SetMissionObjectiveCustomText("AC_ShakurasTemple_Primary01", TextExpressionAssemble("Param/Expression/82CD90E0"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendTempleUpdate_Init () {
    gt_ObjectiveDefendTempleUpdate = TriggerCreate("gt_ObjectiveDefendTempleUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Temple Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendTempleComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefendTempleCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_ShakurasTemple_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendTempleComplete_Init () {
    gt_ObjectiveDefendTempleComplete = TriggerCreate("gt_ObjectiveDefendTempleComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Defend Temple Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDefendTempleFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDefendTempleCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_ShakurasTemple_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDefendTempleFailed_Init () {
    gt_ObjectiveDefendTempleFailed = TriggerCreate("gt_ObjectiveDefendTempleFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alert Main Ramp 01 mins
//--------------------------------------------------------------------------------------------------
bool gt_AlertMainRamp01mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_l_AttackWall;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_l_AttackWall = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_l_AttackWall, UnitFromId(1217));
    gf_RevealAreaWhileUnitGroupisAlive(lv_l_AttackWall, RegionFromId(12));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlertMainRamp01mins_Init () {
    gt_AlertMainRamp01mins = TriggerCreate("gt_AlertMainRamp01mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alert P1 Ramp
//--------------------------------------------------------------------------------------------------
bool gt_AlertP1Ramp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_l_AttackWall;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_l_AttackWall = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_l_AttackWall, UnitFromId(2007));
    gf_RevealAreaWhileUnitGroupisAlive(lv_l_AttackWall, RegionFromId(14));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlertP1Ramp_Init () {
    gt_AlertP1Ramp = TriggerCreate("gt_AlertP1Ramp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alert P2 Ramp
//--------------------------------------------------------------------------------------------------
bool gt_AlertP2Ramp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_l_AttackWall;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_l_AttackWall = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_l_AttackWall, UnitFromId(1216));
    gf_RevealAreaWhileUnitGroupisAlive(lv_l_AttackWall, RegionFromId(13));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlertP2Ramp_Init () {
    gt_AlertP2Ramp = TriggerCreate("gt_AlertP2Ramp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alert Air Ramp
//--------------------------------------------------------------------------------------------------
bool gt_AlertAirRamp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlertAirRamp_Init () {
    gt_AlertAirRamp = TriggerCreate("gt_AlertAirRamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Attack Waves A
//--------------------------------------------------------------------------------------------------
bool gt_RunAttackWavesA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto349D76F1_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto349D76F1_val = PlayerRace(gv_pLAYER_03_ENEMY_WAVE1);
    if (auto349D76F1_val == "Prot") {
        gv_hybridMajor = "HybridBehemoth";
        gv_hybridMinor = "HybridReaver";
    }
    else if (auto349D76F1_val == "Zerg") {
        gv_hybridMajor = "HybridDominatorVoid";
        gv_hybridMinor = "HybridDestroyer";
    }
    else if (auto349D76F1_val == "Terr") {
        if ((RandomInt(0, 1) == 1)) {
            gv_hybridMajor = "HybridBehemoth";
            gv_hybridMinor = "HybridDestroyer";
        }
        else {
            gv_hybridMajor = "HybridDominatorVoid";
            gv_hybridMinor = "HybridReaver";
        }
    }
    else {
    }
    gf_RunTriggerAtMissionTime(gt_AttackWaveA03mins, (3.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA06mins, (6.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA09mins, (9.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA12mins, (12.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AlertAirRamp, (14.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA15mins, (15.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA18mins, (18.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA20mins, (20.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA22mins, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAttackWavesA_Init () {
    gt_RunAttackWavesA = TriggerCreate("gt_RunAttackWavesA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 03 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA03mins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_AttackWaveIncomingQ, true, false);
    Wait(60.0, c_timeAI);
    gv_firstAttackWave = false;
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 30.0, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA03mins_Init () {
    gt_AttackWaveA03mins = TriggerCreate("gt_AttackWaveA03mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 06 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA06mins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto06456A79_g;
    int auto06456A79_var;
    unitgroup auto2DC296B0_g;
    int auto2DC296B0_u;
    unit auto2DC296B0_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto06456A79_g = gv_enemyPlayerGroup;
    auto06456A79_var = -1;
    while (true) {
        auto06456A79_var = PlayerGroupNextPlayer(auto06456A79_g, auto06456A79_var);
        if (auto06456A79_var < 0) { break; }
        AIToggleBulliesInRegion(auto06456A79_var, RegionFromId(1), true);
    }
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    auto2DC296B0_g = UnitLastCreatedGroup();
    auto2DC296B0_u = UnitGroupCount(auto2DC296B0_g, c_unitCountAll);
    for (;; auto2DC296B0_u -= 1) {
        auto2DC296B0_var = UnitGroupUnitFromEnd(auto2DC296B0_g, auto2DC296B0_u);
        if (auto2DC296B0_var == null) { break; }
        libNtve_gf_AICast(auto2DC296B0_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_MainRamp_BottomLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto2DC296B0_var), auto2DC296B0_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedHighDifQ, true, false);
    Wait(30.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    Wait(45.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    Wait(45.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(222), ge_VoidThrasherLevel_Level01);
    TriggerExecute(gt_VoidTrasherAppearsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA06mins_Init () {
    gt_AttackWaveA06mins = TriggerCreate("gt_AttackWaveA06mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 09 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA09mins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6D8340B9_g;
    int auto6D8340B9_var;
    unitgroup auto335FB38B_g;
    int auto335FB38B_u;
    unit auto335FB38B_var;
    unitgroup auto91DA0A3C_g;
    int auto91DA0A3C_u;
    unit auto91DA0A3C_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D8340B9_g = gv_enemyPlayerGroup;
    auto6D8340B9_var = -1;
    while (true) {
        auto6D8340B9_var = PlayerGroupNextPlayer(auto6D8340B9_g, auto6D8340B9_var);
        if (auto6D8340B9_var < 0) { break; }
        AIToggleBulliesInRegion(auto6D8340B9_var, RegionFromId(2), true);
        AIToggleBulliesInRegion(auto6D8340B9_var, RegionFromId(7), true);
        AIToggleBulliesInRegion(auto6D8340B9_var, RegionFromId(4), true);
    }
    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_01);
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(60.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 1, 1, 1, 1, 2, 3), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    auto335FB38B_g = UnitLastCreatedGroup();
    auto335FB38B_u = UnitGroupCount(auto335FB38B_g, c_unitCountAll);
    for (;; auto335FB38B_u -= 1) {
        auto335FB38B_var = UnitGroupUnitFromEnd(auto335FB38B_g, auto335FB38B_u);
        if (auto335FB38B_var == null) { break; }
        libNtve_gf_AICast(auto335FB38B_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P1Ramp_TopLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto335FB38B_var), auto335FB38B_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 1, 1, 2, 2, 3, 3), gv_hybridMinor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    auto91DA0A3C_g = UnitLastCreatedGroup();
    auto91DA0A3C_u = UnitGroupCount(auto91DA0A3C_g, c_unitCountAll);
    for (;; auto91DA0A3C_u -= 1) {
        auto91DA0A3C_var = UnitGroupUnitFromEnd(auto91DA0A3C_g, auto91DA0A3C_u);
        if (auto91DA0A3C_var == null) { break; }
        libNtve_gf_AICast(auto91DA0A3C_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P2Ramp_BottomRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto91DA0A3C_var), auto91DA0A3C_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    Wait(45.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(30.0, c_timeAI);
    libCOMI_gf_SetMissionEffort(25.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA09mins_Init () {
    gt_AttackWaveA09mins = TriggerCreate("gt_AttackWaveA09mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 12 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA12mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hybrid;

    // Automatic Variable Declarations
    playergroup autoF9AE1C2A_g;
    int autoF9AE1C2A_var;
    unitgroup autoC8310F44_g;
    int autoC8310F44_u;
    unit autoC8310F44_var;

    // Variable Initialization
    lv_hybrid = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9AE1C2A_g = gv_enemyPlayerGroup;
    autoF9AE1C2A_var = -1;
    while (true) {
        autoF9AE1C2A_var = PlayerGroupNextPlayer(autoF9AE1C2A_g, autoF9AE1C2A_var);
        if (autoF9AE1C2A_var < 0) { break; }
        if ((libCOMI_gf_GetMissionDifficulty() != 1)) {
            AIToggleBulliesInRegion(autoF9AE1C2A_var, RegionFromId(3), true);
        }

        AIToggleBulliesInRegion(autoF9AE1C2A_var, RegionFromId(8), true);
        AIToggleBulliesInRegion(autoF9AE1C2A_var, RegionFromId(5), true);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(30.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 0, 1, 1), gv_hybridMajor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybrid, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 3, 4), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybrid, UnitLastCreatedGroup());
    autoC8310F44_g = lv_hybrid;
    autoC8310F44_u = UnitGroupCount(autoC8310F44_g, c_unitCountAll);
    for (;; autoC8310F44_u -= 1) {
        autoC8310F44_var = UnitGroupUnitFromEnd(autoC8310F44_g, autoC8310F44_u);
        if (autoC8310F44_var == null) { break; }
        libNtve_gf_AICast(autoC8310F44_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_MainRamp_BottomLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(autoC8310F44_var), autoC8310F44_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    Wait(30.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    Wait(30.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(224), ge_VoidThrasherLevel_Level02);
    TriggerExecute(gt_VoidTrasherAppearsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA12mins_Init () {
    gt_AttackWaveA12mins = TriggerCreate("gt_AttackWaveA12mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 15 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA15mins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB9D7165F_g;
    int autoB9D7165F_u;
    unit autoB9D7165F_var;
    unitgroup auto047EC0CC_g;
    int auto047EC0CC_u;
    unit auto047EC0CC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_02);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_AirRamp_TopRight), 270.0);
    autoB9D7165F_g = UnitLastCreatedGroup();
    autoB9D7165F_u = UnitGroupCount(autoB9D7165F_g, c_unitCountAll);
    for (;; autoB9D7165F_u -= 1) {
        autoB9D7165F_var = UnitGroupUnitFromEnd(autoB9D7165F_g, autoB9D7165F_u);
        if (autoB9D7165F_var == null) { break; }
        libNtve_gf_AICast(autoB9D7165F_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_AirRamp_TopRight)));
        AIAttackWaveUseUnit(UnitGetOwner(autoB9D7165F_var), autoB9D7165F_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 3.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    TriggerExecute(gt_HybridDetectedHighDifQ, true, false);
    Wait(20.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_AirRamp_TopRight), 270.0);
    auto047EC0CC_g = UnitLastCreatedGroup();
    auto047EC0CC_u = UnitGroupCount(auto047EC0CC_g, c_unitCountAll);
    for (;; auto047EC0CC_u -= 1) {
        auto047EC0CC_var = UnitGroupUnitFromEnd(auto047EC0CC_g, auto047EC0CC_u);
        if (auto047EC0CC_var == null) { break; }
        libNtve_gf_AICast(auto047EC0CC_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_AirRamp_TopRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto047EC0CC_var), auto047EC0CC_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 5.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    Wait(50.0, c_timeAI);
    gf_DropAttackWithPing(gv_pLAYER_03_ENEMY_WAVE1, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(12), UnitGetPosition(gv_c_TempleObjective));
    Wait(30.0, c_timeAI);
    gf_DropAttackWithPing(gv_pLAYER_04_ENEMY_WAVE2, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(21), UnitGetPosition(gv_c_TempleObjective));
    Wait(15.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(1224), ge_VoidThrasherLevel_Level03);
    TriggerExecute(gt_VoidTrasherAppearsQ, true, false);
    libCOMI_gf_SetMissionEffort(50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA15mins_Init () {
    gt_AttackWaveA15mins = TriggerCreate("gt_AttackWaveA15mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 18 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA18mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hybridGroup;

    // Automatic Variable Declarations
    playergroup auto5DC44751_g;
    int auto5DC44751_var;
    unitgroup auto36B82DBD_g;
    int auto36B82DBD_u;
    unit auto36B82DBD_var;
    unitgroup auto1922C864_g;
    int auto1922C864_u;
    unit auto1922C864_var;

    // Variable Initialization
    lv_hybridGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DC44751_g = gv_enemyPlayerGroup;
    auto5DC44751_var = -1;
    while (true) {
        auto5DC44751_var = PlayerGroupNextPlayer(auto5DC44751_g, auto5DC44751_var);
        if (auto5DC44751_var < 0) { break; }
        if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
            AIToggleBulliesInRegion(auto5DC44751_var, RegionFromId(10), true);
            AIToggleBulliesInRegion(auto5DC44751_var, RegionFromId(6), true);
        }

    }
    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_04);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 2, 3), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    auto36B82DBD_g = lv_hybridGroup;
    auto36B82DBD_u = UnitGroupCount(auto36B82DBD_g, c_unitCountAll);
    for (;; auto36B82DBD_u -= 1) {
        auto36B82DBD_var = UnitGroupUnitFromEnd(auto36B82DBD_g, auto36B82DBD_u);
        if (auto36B82DBD_var == null) { break; }
        libNtve_gf_AICast(auto36B82DBD_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P1Ramp_TopLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto36B82DBD_var), auto36B82DBD_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    lv_hybridGroup = UnitGroupEmpty();
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 2, 3), "HybridNemesis", 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    auto1922C864_g = lv_hybridGroup;
    auto1922C864_u = UnitGroupCount(auto1922C864_g, c_unitCountAll);
    for (;; auto1922C864_u -= 1) {
        auto1922C864_var = UnitGroupUnitFromEnd(auto1922C864_g, auto1922C864_u);
        if (auto1922C864_var == null) { break; }
        libNtve_gf_AICast(auto1922C864_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P2Ramp_BottomRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto1922C864_var), auto1922C864_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 30.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(60.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA18mins_Init () {
    gt_AttackWaveA18mins = TriggerCreate("gt_AttackWaveA18mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 20 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA20mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_startingDropAngleFromTemple;
    int lv_dropLocationTotal;
    point[5] lv_dropLocations;
    int lv_dropLocationIter;
    point lv_dropLocationTemp;

    // Automatic Variable Declarations
    const int auto44E76F9D_n = 3;
    int auto44E76F9D_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_03);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    Wait(15.0, c_timeGame);
    lv_dropLocationTotal = 4;
    lv_dropLocations[1] = PointFromId(2180);
    lv_dropLocations[2] = PointFromId(2192);
    lv_dropLocations[3] = PointFromId(2208);
    lv_dropLocations[4] = PointFromId(2209);
    for (auto44E76F9D_i = 1; auto44E76F9D_i <= auto44E76F9D_n; auto44E76F9D_i += 1) {
        lv_dropLocationIter = RandomInt(1, (lv_dropLocationTotal - 1));
        lv_dropLocationTemp = lv_dropLocations[lv_dropLocationTotal];
        lv_dropLocations[lv_dropLocationTotal] = lv_dropLocations[lv_dropLocationIter];
        lv_dropLocations[lv_dropLocationIter] = lv_dropLocations[lv_dropLocationTotal];
    }
    lv_dropLocationIter = 1;
    if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
        gf_DropAttackWithPing(gv_pLAYER_03_ENEMY_WAVE1, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
        Wait(RandomFixed(0.5, 1.0), c_timeAI);
        gf_DropAttackWithPing(gv_pLAYER_04_ENEMY_WAVE2, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
        TriggerExecute(gt_SurpriseAttackQ, true, false);
    }
    else {
        gf_DropAttackWithPing(gv_pLAYER_03_ENEMY_WAVE1, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
        Wait(RandomFixed(0.5, 1.0), c_timeAI);
        gf_DropAttackWithPing(gv_pLAYER_04_ENEMY_WAVE2, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
        TriggerExecute(gt_SurpriseAttackQ, true, false);
    }
    lv_dropLocationIter += 1;
    Wait(30.0, c_timeAI);
    gf_DropAttackWithPing(gv_pLAYER_03_ENEMY_WAVE1, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
    Wait(RandomFixed(0.5, 1.0), c_timeAI);
    gf_DropAttackWithPing(gv_pLAYER_04_ENEMY_WAVE2, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
    lv_dropLocationIter += 1;
    Wait(30.0, c_timeAI);
    if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
        gf_DropAttackWithPing(gv_pLAYER_03_ENEMY_WAVE1, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
        Wait(RandomFixed(0.5, 1.0), c_timeAI);
        gf_DropAttackWithPing(gv_pLAYER_04_ENEMY_WAVE2, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
    }

    lv_dropLocationIter += 1;
    Wait(15.0, c_timeAI);
    gf_DropAttackWithPing(gv_pLAYER_03_ENEMY_WAVE1, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
    Wait(RandomFixed(0.5, 1.0), c_timeAI);
    gf_DropAttackWithPing(gv_pLAYER_04_ENEMY_WAVE2, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionRandomPoint(RegionCircle(lv_dropLocations[lv_dropLocationIter], 5.0)), UnitGetPosition(gv_c_TempleObjective));
    TriggerExecute(gt_SurpriseAttackQ, true, false);
    Wait(30.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA20mins_Init () {
    gt_AttackWaveA20mins = TriggerCreate("gt_AttackWaveA20mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 22 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA22mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_l_HybridGroup;

    // Automatic Variable Declarations
    unitgroup auto2B5DBB5E_g;
    int auto2B5DBB5E_u;
    unit auto2B5DBB5E_var;
    unitgroup autoFB0C27FF_g;
    int autoFB0C27FF_u;
    unit autoFB0C27FF_var;

    // Variable Initialization
    lv_l_HybridGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_04);
    Wait(30.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(2008), ge_VoidThrasherLevel_Level04);
    gf_CreateVoidThrasher(UnitFromId(2006), ge_VoidThrasherLevel_Level04);
    TriggerExecute(gt_VoidTrasherAppears2XQ, true, false);
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06);
    Wait(60.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_l_HybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 4, 4), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_l_HybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 2, 3, 3), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_l_HybridGroup, UnitLastCreatedGroup());
    auto2B5DBB5E_g = lv_l_HybridGroup;
    auto2B5DBB5E_u = UnitGroupCount(auto2B5DBB5E_g, c_unitCountAll);
    for (;; auto2B5DBB5E_u -= 1) {
        auto2B5DBB5E_var = UnitGroupUnitFromEnd(auto2B5DBB5E_g, auto2B5DBB5E_u);
        if (auto2B5DBB5E_var == null) { break; }
        libNtve_gf_AICast(auto2B5DBB5E_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P1Ramp_TopLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto2B5DBB5E_var), auto2B5DBB5E_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    lv_l_HybridGroup = UnitGroupEmpty();
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_l_HybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_l_HybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 2, 3, 3), "HybridNemesis", 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_l_HybridGroup, UnitLastCreatedGroup());
    autoFB0C27FF_g = lv_l_HybridGroup;
    autoFB0C27FF_u = UnitGroupCount(autoFB0C27FF_g, c_unitCountAll);
    for (;; autoFB0C27FF_u -= 1) {
        autoFB0C27FF_var = UnitGroupUnitFromEnd(autoFB0C27FF_g, autoFB0C27FF_u);
        if (autoFB0C27FF_var == null) { break; }
        libNtve_gf_AICast(autoFB0C27FF_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P2Ramp_BottomRight)));
        AIAttackWaveUseUnit(UnitGetOwner(autoFB0C27FF_var), autoFB0C27FF_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(45.0, c_timeAI);
    libCOMI_gf_SetMissionEffort(100.0);
    Wait(15.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA22mins_Init () {
    gt_AttackWaveA22mins = TriggerCreate("gt_AttackWaveA22mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Attack Waves B
//--------------------------------------------------------------------------------------------------
bool gt_RunAttackWavesB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoFB531B34_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFB531B34_val = PlayerRace(gv_pLAYER_03_ENEMY_WAVE1);
    if (autoFB531B34_val == "Prot") {
        gv_hybridMajor = "HybridDominatorVoid";
        gv_hybridMinor = "HybridNemesis";
    }
    else if (autoFB531B34_val == "Zerg") {
        gv_hybridMajor = "HybridBehemoth";
        gv_hybridMinor = "HybridNemesis";
    }
    else if (autoFB531B34_val == "Terr") {
        if ((RandomInt(0, 1) == 1)) {
            gv_hybridMajor = "HybridBehemoth";
        }
        else {
            gv_hybridMajor = "HybridDominatorVoid";
        }
        gv_hybridMinor = "HybridNemesis";
    }
    else {
    }
    gf_RunTriggerAtMissionTime(gt_AttackWaveB03mins, (3.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB06mins, (6.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB09mins, (9.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB12mins, (12.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AlertAirRamp, (14.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB15mins, (15.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB18mins, (18.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB20mins, (20.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB22mins, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAttackWavesB_Init () {
    gt_RunAttackWavesB = TriggerCreate("gt_RunAttackWavesB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 03 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB03mins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 10.0, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_AttackWaveIncomingQ, true, false);
    Wait(60.0, c_timeAI);
    gv_firstAttackWave = false;
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 30.0, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB03mins_Init () {
    gt_AttackWaveB03mins = TriggerCreate("gt_AttackWaveB03mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 06 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB06mins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE7A87C55_g;
    int autoE7A87C55_var;
    unitgroup auto25229E0C_g;
    int auto25229E0C_u;
    unit auto25229E0C_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7A87C55_g = gv_enemyPlayerGroup;
    autoE7A87C55_var = -1;
    while (true) {
        autoE7A87C55_var = PlayerGroupNextPlayer(autoE7A87C55_g, autoE7A87C55_var);
        if (autoE7A87C55_var < 0) { break; }
        AIToggleBulliesInRegion(autoE7A87C55_var, RegionFromId(1), true);
    }
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    auto25229E0C_g = UnitLastCreatedGroup();
    auto25229E0C_u = UnitGroupCount(auto25229E0C_g, c_unitCountAll);
    for (;; auto25229E0C_u -= 1) {
        auto25229E0C_var = UnitGroupUnitFromEnd(auto25229E0C_g, auto25229E0C_u);
        if (auto25229E0C_var == null) { break; }
        libNtve_gf_AICast(auto25229E0C_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_MainRamp_BottomLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto25229E0C_var), auto25229E0C_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedHighDifQ, true, false);
    Wait(30.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    Wait(45.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    Wait(45.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(222), ge_VoidThrasherLevel_Level01);
    TriggerExecute(gt_VoidTrasherAppearsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB06mins_Init () {
    gt_AttackWaveB06mins = TriggerCreate("gt_AttackWaveB06mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 09 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB09mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rampVector;

    // Automatic Variable Declarations
    playergroup auto93CBA863_g;
    int auto93CBA863_var;
    unitgroup auto8633BC52_g;
    int auto8633BC52_u;
    unit auto8633BC52_var;
    unitgroup auto72A255FD_g;
    int auto72A255FD_u;
    unit auto72A255FD_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto93CBA863_g = gv_enemyPlayerGroup;
    auto93CBA863_var = -1;
    while (true) {
        auto93CBA863_var = PlayerGroupNextPlayer(auto93CBA863_g, auto93CBA863_var);
        if (auto93CBA863_var < 0) { break; }
        AIToggleBulliesInRegion(auto93CBA863_var, RegionFromId(2), true);
        AIToggleBulliesInRegion(auto93CBA863_var, RegionFromId(7), true);
        AIToggleBulliesInRegion(auto93CBA863_var, RegionFromId(4), true);
    }
    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_01);
    if ((gv_waveB_09mins_Branch == ge_WaveB_09mins_Branch_Type_TopLeftFirst)) {
        lv_rampVector = ge_AIAttackVector_P1Ramp_TopLeft;
    }
    else {
        lv_rampVector = ge_AIAttackVector_P2Ramp_BottomRight;
    }
    gf_SendAttackgatherfor(lv_rampVector, 10.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    gf_SendAttackgatherfor(lv_rampVector, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(60.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 1, 1, 1, 1, 2, 3), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    auto8633BC52_g = UnitLastCreatedGroup();
    auto8633BC52_u = UnitGroupCount(auto8633BC52_g, c_unitCountAll);
    for (;; auto8633BC52_u -= 1) {
        auto8633BC52_var = UnitGroupUnitFromEnd(auto8633BC52_g, auto8633BC52_u);
        if (auto8633BC52_var == null) { break; }
        libNtve_gf_AICast(auto8633BC52_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P1Ramp_TopLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto8633BC52_var), auto8633BC52_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 1, 1, 2, 2, 3, 3), gv_hybridMinor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    auto72A255FD_g = UnitLastCreatedGroup();
    auto72A255FD_u = UnitGroupCount(auto72A255FD_g, c_unitCountAll);
    for (;; auto72A255FD_u -= 1) {
        auto72A255FD_var = UnitGroupUnitFromEnd(auto72A255FD_g, auto72A255FD_u);
        if (auto72A255FD_var == null) { break; }
        libNtve_gf_AICast(auto72A255FD_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P2Ramp_BottomRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto72A255FD_var), auto72A255FD_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    Wait(45.0, c_timeAI);
    if ((gv_waveB_09mins_Branch == ge_WaveB_09mins_Branch_Type_TopLeftFirst)) {
        lv_rampVector = ge_AIAttackVector_P2Ramp_BottomRight;
    }
    else {
        lv_rampVector = ge_AIAttackVector_P1Ramp_TopLeft;
    }
    gf_SendAttackgatherfor(lv_rampVector, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    gf_SendAttackgatherfor(lv_rampVector, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    Wait(30.0, c_timeAI);
    libCOMI_gf_SetMissionEffort(25.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB09mins_Init () {
    gt_AttackWaveB09mins = TriggerCreate("gt_AttackWaveB09mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 12 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB12mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hybrid;

    // Automatic Variable Declarations
    playergroup autoCC59670B_g;
    int autoCC59670B_var;
    unitgroup auto9454D560_g;
    int auto9454D560_u;
    unit auto9454D560_var;

    // Variable Initialization
    lv_hybrid = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC59670B_g = gv_enemyPlayerGroup;
    autoCC59670B_var = -1;
    while (true) {
        autoCC59670B_var = PlayerGroupNextPlayer(autoCC59670B_g, autoCC59670B_var);
        if (autoCC59670B_var < 0) { break; }
        if ((libCOMI_gf_GetMissionDifficulty() != 1)) {
            AIToggleBulliesInRegion(autoCC59670B_var, RegionFromId(3), true);
        }

        AIToggleBulliesInRegion(autoCC59670B_var, RegionFromId(8), true);
        AIToggleBulliesInRegion(autoCC59670B_var, RegionFromId(5), true);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(30.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 0, 1, 1), gv_hybridMajor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybrid, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 3, 4), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybrid, UnitLastCreatedGroup());
    auto9454D560_g = lv_hybrid;
    auto9454D560_u = UnitGroupCount(auto9454D560_g, c_unitCountAll);
    for (;; auto9454D560_u -= 1) {
        auto9454D560_var = UnitGroupUnitFromEnd(auto9454D560_g, auto9454D560_u);
        if (auto9454D560_var == null) { break; }
        libNtve_gf_AICast(auto9454D560_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_MainRamp_BottomLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto9454D560_var), auto9454D560_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    Wait(50.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    Wait(10.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(224), ge_VoidThrasherLevel_Level02);
    TriggerExecute(gt_VoidTrasherAppearsQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB12mins_Init () {
    gt_AttackWaveB12mins = TriggerCreate("gt_AttackWaveB12mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 15 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB15mins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0B5EFE80_g;
    int auto0B5EFE80_u;
    unit auto0B5EFE80_var;
    unitgroup auto8C3ED981_g;
    int auto8C3ED981_u;
    unit auto8C3ED981_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_02);
    gf_DropAttackWithPing(gv_pLAYER_03_ENEMY_WAVE1, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(12), UnitGetPosition(gv_c_TempleObjective));
    Wait(30.0, c_timeAI);
    gf_DropAttackWithPing(gv_pLAYER_04_ENEMY_WAVE2, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(21), UnitGetPosition(gv_c_TempleObjective));
    Wait(15.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(1224), ge_VoidThrasherLevel_Level03);
    TriggerExecute(gt_VoidTrasherAppearsQ, true, false);
    Wait(50.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_AirRamp_TopRight), 270.0);
    auto0B5EFE80_g = UnitLastCreatedGroup();
    auto0B5EFE80_u = UnitGroupCount(auto0B5EFE80_g, c_unitCountAll);
    for (;; auto0B5EFE80_u -= 1) {
        auto0B5EFE80_var = UnitGroupUnitFromEnd(auto0B5EFE80_g, auto0B5EFE80_u);
        if (auto0B5EFE80_var == null) { break; }
        libNtve_gf_AICast(auto0B5EFE80_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_AirRamp_TopRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto0B5EFE80_var), auto0B5EFE80_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 3.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    TriggerExecute(gt_HybridDetectedHighDifQ, true, false);
    Wait(20.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_AirRamp_TopRight), 270.0);
    auto8C3ED981_g = UnitLastCreatedGroup();
    auto8C3ED981_u = UnitGroupCount(auto8C3ED981_g, c_unitCountAll);
    for (;; auto8C3ED981_u -= 1) {
        auto8C3ED981_var = UnitGroupUnitFromEnd(auto8C3ED981_g, auto8C3ED981_u);
        if (auto8C3ED981_var == null) { break; }
        libNtve_gf_AICast(auto8C3ED981_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_AirRamp_TopRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto8C3ED981_var), auto8C3ED981_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 5.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    libCOMI_gf_SetMissionEffort(50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB15mins_Init () {
    gt_AttackWaveB15mins = TriggerCreate("gt_AttackWaveB15mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 18 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB18mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rampVectorA;
    int lv_rampVectorB;
    unitgroup lv_hybridGroup;

    // Automatic Variable Declarations
    playergroup autoF91D0388_g;
    int autoF91D0388_var;
    unitgroup auto7847DC46_g;
    int auto7847DC46_u;
    unit auto7847DC46_var;
    unitgroup autoA621BD77_g;
    int autoA621BD77_u;
    unit autoA621BD77_var;

    // Variable Initialization
    lv_hybridGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoF91D0388_g = gv_enemyPlayerGroup;
    autoF91D0388_var = -1;
    while (true) {
        autoF91D0388_var = PlayerGroupNextPlayer(autoF91D0388_g, autoF91D0388_var);
        if (autoF91D0388_var < 0) { break; }
        if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
            AIToggleBulliesInRegion(autoF91D0388_var, RegionFromId(10), true);
            AIToggleBulliesInRegion(autoF91D0388_var, RegionFromId(6), true);
        }

    }
    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_04);
    if ((gv_waveB_18mins_Branch == ge_WaveB_18mins_Branch_Type_SplitAttack)) {
        lv_rampVectorA = ge_AIAttackVector_P1Ramp_TopLeft;
        lv_rampVectorB = ge_AIAttackVector_P2Ramp_BottomRight;
    }
    else {
        lv_rampVectorA = ge_AIAttackVector_MainRamp_BottomLeft;
        lv_rampVectorB = ge_AIAttackVector_MainRamp_BottomLeft;
    }
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(lv_rampVectorA), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(lv_rampVectorA), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 2, 3), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(lv_rampVectorA), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    auto7847DC46_g = lv_hybridGroup;
    auto7847DC46_u = UnitGroupCount(auto7847DC46_g, c_unitCountAll);
    for (;; auto7847DC46_u -= 1) {
        auto7847DC46_var = UnitGroupUnitFromEnd(auto7847DC46_g, auto7847DC46_u);
        if (auto7847DC46_var == null) { break; }
        libNtve_gf_AICast(auto7847DC46_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(lv_rampVectorA)));
        AIAttackWaveUseUnit(UnitGetOwner(auto7847DC46_var), auto7847DC46_var);
    }
    gf_SendAttackgatherfor(lv_rampVectorA, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    Wait(15.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    lv_hybridGroup = UnitGroupEmpty();
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(lv_rampVectorB), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(lv_rampVectorB), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 2, 3), "HybridNemesis", 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(lv_rampVectorB), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    autoA621BD77_g = lv_hybridGroup;
    autoA621BD77_u = UnitGroupCount(autoA621BD77_g, c_unitCountAll);
    for (;; autoA621BD77_u -= 1) {
        autoA621BD77_var = UnitGroupUnitFromEnd(autoA621BD77_g, autoA621BD77_u);
        if (autoA621BD77_var == null) { break; }
        libNtve_gf_AICast(autoA621BD77_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(lv_rampVectorB)));
        AIAttackWaveUseUnit(UnitGetOwner(autoA621BD77_var), autoA621BD77_var);
    }
    gf_SendAttackgatherfor(lv_rampVectorB, 30.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(60.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB18mins_Init () {
    gt_AttackWaveB18mins = TriggerCreate("gt_AttackWaveB18mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 20 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB20mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hybrid;

    // Automatic Variable Declarations
    unitgroup auto8233ECB2_g;
    int auto8233ECB2_u;
    unit auto8233ECB2_var;
    unitgroup auto459BED23_g;
    int auto459BED23_u;
    unit auto459BED23_var;
    unitgroup auto5F9A261E_g;
    int auto5F9A261E_u;
    unit auto5F9A261E_var;

    // Variable Initialization
    lv_hybrid = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateVoidThrasher(UnitFromId(1348), ge_VoidThrasherLevel_Level04);
    TriggerExecute(gt_VoidTrasherAppearsQ, true, false);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 1, 1), gv_hybridMajor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybrid, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 3, 4), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_MainRamp_BottomLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybrid, UnitLastCreatedGroup());
    auto8233ECB2_g = lv_hybrid;
    auto8233ECB2_u = UnitGroupCount(auto8233ECB2_g, c_unitCountAll);
    for (;; auto8233ECB2_u -= 1) {
        auto8233ECB2_var = UnitGroupUnitFromEnd(auto8233ECB2_g, auto8233ECB2_u);
        if (auto8233ECB2_var == null) { break; }
        libNtve_gf_AICast(auto8233ECB2_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_MainRamp_BottomLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto8233ECB2_var), auto8233ECB2_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 20.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    Wait(20.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_AirRamp_TopRight), 270.0);
    auto459BED23_g = UnitLastCreatedGroup();
    auto459BED23_u = UnitGroupCount(auto459BED23_g, c_unitCountAll);
    for (;; auto459BED23_u -= 1) {
        auto459BED23_var = UnitGroupUnitFromEnd(auto459BED23_g, auto459BED23_u);
        if (auto459BED23_var == null) { break; }
        libNtve_gf_AICast(auto459BED23_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_AirRamp_TopRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto459BED23_var), auto459BED23_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(20.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_AirRamp_TopRight), 270.0);
    auto5F9A261E_g = UnitLastCreatedGroup();
    auto5F9A261E_u = UnitGroupCount(auto5F9A261E_g, c_unitCountAll);
    for (;; auto5F9A261E_u -= 1) {
        auto5F9A261E_var = UnitGroupUnitFromEnd(auto5F9A261E_g, auto5F9A261E_u);
        if (auto5F9A261E_var == null) { break; }
        libNtve_gf_AICast(auto5F9A261E_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_AirRamp_TopRight)));
        AIAttackWaveUseUnit(UnitGetOwner(auto5F9A261E_var), auto5F9A261E_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_AirRamp_TopRight, 10.0, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB20mins_Init () {
    gt_AttackWaveB20mins = TriggerCreate("gt_AttackWaveB20mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 22 mins
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB22mins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_hybridGroup;

    // Automatic Variable Declarations
    unitgroup auto2198EA03_g;
    int auto2198EA03_u;
    unit auto2198EA03_var;
    unitgroup autoF158E067_g;
    int autoF158E067_u;
    unit autoF158E067_var;

    // Variable Initialization
    lv_hybridGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_04);
    Wait(30.0, c_timeAI);
    gf_CreateVoidThrasher(UnitFromId(2008), ge_VoidThrasherLevel_Level04);
    gf_CreateVoidThrasher(UnitFromId(2006), ge_VoidThrasherLevel_Level04);
    TriggerExecute(gt_VoidTrasherAppears2XQ, true, false);
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid);
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06);
    Wait(60.0, c_timeAI);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 4, 4, 4), gv_hybridMinor, 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 2, 3, 3), "HybridNemesis", 0, gv_pLAYER_03_ENEMY_WAVE1, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P1Ramp_TopLeft), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    auto2198EA03_g = lv_hybridGroup;
    auto2198EA03_u = UnitGroupCount(auto2198EA03_g, c_unitCountAll);
    for (;; auto2198EA03_u -= 1) {
        auto2198EA03_var = UnitGroupUnitFromEnd(auto2198EA03_g, auto2198EA03_u);
        if (auto2198EA03_var == null) { break; }
        libNtve_gf_AICast(auto2198EA03_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P1Ramp_TopLeft)));
        AIAttackWaveUseUnit(UnitGetOwner(auto2198EA03_var), auto2198EA03_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    Wait(10.0, c_timeAI);
    TriggerExecute(gt_HybridDetectedAllDifQ, true, false);
    lv_hybridGroup = UnitGroupEmpty();
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), gv_hybridMajor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 2, 3, 3, 3, 3), gv_hybridMinor, 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 2, 3, 3), "HybridNemesis", 0, gv_pLAYER_04_ENEMY_WAVE2, gf_AttackVectorSpawnPoint(ge_AIAttackVector_P2Ramp_BottomRight), 270.0);
    UnitGroupAddUnitGroup(lv_hybridGroup, UnitLastCreatedGroup());
    autoF158E067_g = lv_hybridGroup;
    autoF158E067_u = UnitGroupCount(autoF158E067_g, c_unitCountAll);
    for (;; autoF158E067_u -= 1) {
        autoF158E067_var = UnitGroupUnitFromEnd(autoF158E067_g, autoF158E067_u);
        if (autoF158E067_var == null) { break; }
        libNtve_gf_AICast(autoF158E067_var, OrderTargetingPoint(AbilityCommand("attack", 0), gf_GetWaveStagingPosition(ge_AIAttackVector_P2Ramp_BottomRight)));
        AIAttackWaveUseUnit(UnitGetOwner(autoF158E067_var), autoF158E067_var);
    }
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    Wait(45.0, c_timeAI);
    libCOMI_gf_SetMissionEffort(100.0);
    Wait(15.0, c_timeAI);
    gf_SendAttackgatherfor(ge_AIAttackVector_P1Ramp_TopLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late);
    gf_SendAttackgatherfor(ge_AIAttackVector_P2Ramp_BottomRight, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06);
    gf_SendAttackgatherfor(ge_AIAttackVector_MainRamp_BottomLeft, 15.0, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB22mins_Init () {
    gt_AttackWaveB22mins = TriggerCreate("gt_AttackWaveB22mins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Used Transports
//--------------------------------------------------------------------------------------------------
bool gt_RemoveUsedTransports_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_flyAwayUnits;

    // Automatic Variable Declarations
    playergroup auto5638A0D0_g;
    int auto5638A0D0_var;
    unitgroup autoE9AC8BE4_g;
    int autoE9AC8BE4_u;
    unit autoE9AC8BE4_var;
    unitgroup auto2AE0217E_g;
    int auto2AE0217E_u;
    unit auto2AE0217E_var;
    unitgroup autoA07D94C4_g;
    int autoA07D94C4_u;
    unit autoA07D94C4_var;

    // Variable Initialization
    lv_flyAwayUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto5638A0D0_g = gv_enemyPlayerGroup;
    auto5638A0D0_var = -1;
    while (true) {
        auto5638A0D0_var = PlayerGroupNextPlayer(auto5638A0D0_g, auto5638A0D0_var);
        if (auto5638A0D0_var < 0) { break; }
        UnitGroupAddUnitGroup(lv_flyAwayUnits, UnitGroup(null, auto5638A0D0_var, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    autoE9AC8BE4_g = lv_flyAwayUnits;
    autoE9AC8BE4_u = UnitGroupCount(autoE9AC8BE4_g, c_unitCountAll);
    for (;; autoE9AC8BE4_u -= 1) {
        autoE9AC8BE4_var = UnitGroupUnitFromEnd(autoE9AC8BE4_g, autoE9AC8BE4_u);
        if (autoE9AC8BE4_var == null) { break; }
        if ((UnitGetType(autoE9AC8BE4_var) != libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, UnitGetOwner(autoE9AC8BE4_var)))) {
            UnitGroupRemove(lv_flyAwayUnits, autoE9AC8BE4_var);
        }

    }
    UnitGroupRemoveUnitGroup(lv_flyAwayUnits, gv_flyingAwayUnits);
    UnitGroupAddUnitGroup(gv_flyingAwayUnits, lv_flyAwayUnits);
    auto2AE0217E_g = lv_flyAwayUnits;
    auto2AE0217E_u = UnitGroupCount(auto2AE0217E_g, c_unitCountAll);
    for (;; auto2AE0217E_u -= 1) {
        auto2AE0217E_var = UnitGroupUnitFromEnd(auto2AE0217E_g, auto2AE0217E_u);
        if (auto2AE0217E_var == null) { break; }
        UnitSetHeight(auto2AE0217E_var, 16.0, (3.0 + RandomFixed(-1.0, 1.0)));
    }
    Wait(3.0, c_timeAI);
    autoA07D94C4_g = lv_flyAwayUnits;
    autoA07D94C4_u = UnitGroupCount(autoA07D94C4_g, c_unitCountAll);
    for (;; autoA07D94C4_u -= 1) {
        autoA07D94C4_var = UnitGroupUnitFromEnd(autoA07D94C4_g, autoA07D94C4_u);
        if (autoA07D94C4_var == null) { break; }
        UnitRemove(autoA07D94C4_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveUsedTransports_Init () {
    gt_RemoveUsedTransports = TriggerCreate("gt_RemoveUsedTransports_Func");
    TriggerAddEventTimePeriodic(gt_RemoveUsedTransports, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC27520CD_g;
    int autoC27520CD_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC27520CD_g = gv_enemyPlayerGroup;
    autoC27520CD_var = -1;
    while (true) {
        autoC27520CD_var = PlayerGroupNextPlayer(autoC27520CD_g, autoC27520CD_var);
        if (autoC27520CD_var < 0) { break; }
        PlayerModifyPropertyInt(autoC27520CD_var, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        PlayerModifyPropertyInt(autoC27520CD_var, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extra Thrasher Breath Attacks
//--------------------------------------------------------------------------------------------------
bool gt_ExtraThrasherBreathAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_extraDifficultyDamage;

    // Automatic Variable Declarations
    int auto512CDAF4_ae;
    const int auto512CDAF4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto512CDAF4_ae = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 3, 3);
    lv_extraDifficultyDamage = 0;
    for ( ; ( (auto512CDAF4_ai >= 0 && lv_extraDifficultyDamage <= auto512CDAF4_ae) || (auto512CDAF4_ai < 0 && lv_extraDifficultyDamage >= auto512CDAF4_ae) ) ; lv_extraDifficultyDamage += auto512CDAF4_ai ) {
        UnitCreateEffectPoint(EventUnit(), "VoidThrasherLightningAoECreatePersistentDelay", EventUnitTargetPoint());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtraThrasherBreathAttacks_Init () {
    gt_ExtraThrasherBreathAttacks = TriggerCreate("gt_ExtraThrasherBreathAttacks_Func");
    TriggerAddEventUnitAbility(gt_ExtraThrasherBreathAttacks, null, AbilityCommand("VoidThrasherLightningAoE", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetState(UnitFromId(19), c_unitStateInvulnerable, true);
    TriggerExecute(gt_ObjectiveDefendTempleComplete, true, true);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryST");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/05AC7717"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoFromId(320), 2.0);
    TriggerExecute(gt_VictoryFanfareTempleAnimations, true, false);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
    TriggerAddEventTimer(gt_VictorySequence, gv_victoryTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Temple Animations
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareTempleAnimations_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("Xelnaga_Vision_Temple_StandWorkStart_A", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), "StandWorkStart", "Stand Work Start", c_animFlagPlayForever, c_animTimeDefault);
    AnimWait(libNtve_gf_MainActorofUnit(UnitFromId(19)), "StandWorkStart", 0.0, c_animationOffsetEnd);
    SoundPlayForPlayer(SoundLink("Xelnaga_Vision_Temple_StandWorkStart_B", 0), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), "StandWorkStartA", "Stand Work Start A", c_animFlagPlayForever, c_animTimeDefault);
    AnimWait(libNtve_gf_MainActorofUnit(UnitFromId(19)), "StandWorkStartA", 0.0, c_animationOffsetEnd);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), "StandWorkStartB", "Stand Work Start B", c_animFlagPlayForever, c_animTimeDefault);
    AnimWait(libNtve_gf_MainActorofUnit(UnitFromId(19)), "StandWorkStartB", 0.0, c_animationOffsetEnd);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), c_animNameDefault, "Stand Work Start C", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareTempleAnimations_Init () {
    gt_VictoryFanfareTempleAnimations = TriggerCreate("gt_VictoryFanfareTempleAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF6241CBA_g;
    int autoF6241CBA_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign(0, true);
    libCOMI_gf_SetSingularBossBarMaximumValueVoidCampaign(FixedToInt(UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLifeMax, c_unitPropCurrent)), true);
    TriggerExecute(gt_ObjectiveDefendTempleFailed, true, false);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatST", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/638EB4A1"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(UnitGetPosition(EventUnit()), 1.5);
    autoF6241CBA_g = PlayerGroupAll();
    autoF6241CBA_var = -1;
    while (true) {
        autoF6241CBA_var = PlayerGroupNextPlayer(autoF6241CBA_g, autoF6241CBA_var);
        if (autoF6241CBA_var < 0) { break; }
        CameraShake(autoF6241CBA_var, "Massive", "Earthquake", 1.5, 1.5, 5.0);
    }
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_c_TempleObjective"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen - Temple Life Left
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenTempleLifeLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, "ShakurasTempleLife", UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLife, c_unitPropCurrent));
    PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, "ShakurasTempleLife", UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLife, c_unitPropCurrent));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenTempleLifeLeft_Init () {
    gt_ScoreScreenTempleLifeLeft = TriggerCreate("gt_ScoreScreenTempleLifeLeft_Func");
    TriggerAddEventUnitDamaged(gt_ScoreScreenTempleLifeLeft, UnitRefFromVariable("gv_c_TempleObjective"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveIncomingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(1, 2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveIncomingQ_Init () {
    gt_AttackWaveIncomingQ = TriggerCreate("gt_AttackWaveIncomingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRevealQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRevealQ_Init () {
    gt_BonusObjectiveRevealQ = TriggerCreate("gt_BonusObjectiveRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Two Remain Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveTwoRemainQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_objectiveDestroyZenithStonesKilled == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusTwoLeftST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveTwoRemainQ_Init () {
    gt_BonusObjectiveTwoRemainQ = TriggerCreate("gt_BonusObjectiveTwoRemainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective One Remain Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveOneRemainQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_objectiveDestroyZenithStonesKilled == 2))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusOneLeftST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveOneRemainQ_Init () {
    gt_BonusObjectiveOneRemainQ = TriggerCreate("gt_BonusObjectiveOneRemainQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCompleteQ_Init () {
    gt_BonusObjectiveCompleteQ = TriggerCreate("gt_BonusObjectiveCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid DetectedAllDif Q
//--------------------------------------------------------------------------------------------------
bool gt_HybridDetectedAllDifQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridDetectedAllDifQ_Init () {
    gt_HybridDetectedAllDifQ = TriggerCreate("gt_HybridDetectedAllDifQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid DetectedHighDif Q
//--------------------------------------------------------------------------------------------------
bool gt_HybridDetectedHighDifQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 2))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridDetectedHighDifQ_Init () {
    gt_HybridDetectedHighDifQ = TriggerCreate("gt_HybridDetectedHighDifQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Almost Done Q
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveAlmostDoneQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("FinalCompleteST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveAlmostDoneQ_Init () {
    gt_PrimaryObjectiveAlmostDoneQ = TriggerCreate("gt_PrimaryObjectiveAlmostDoneQ_Func");
    TriggerAddEventTimer(gt_PrimaryObjectiveAlmostDoneQ, gv_victoryTimer_AlmostDone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Almost Done 50 Q
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveAlmostDone50Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HalfwayCompleteST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveAlmostDone50Q_Init () {
    gt_PrimaryObjectiveAlmostDone50Q = TriggerCreate("gt_PrimaryObjectiveAlmostDone50Q_Func");
    TriggerAddEventTimer(gt_PrimaryObjectiveAlmostDone50Q, gv_victoryTimer_50);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primary Objective Almost Done 75 Q
//--------------------------------------------------------------------------------------------------
bool gt_PrimaryObjectiveAlmostDone75Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("NearCompleteST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimaryObjectiveAlmostDone75Q_Init () {
    gt_PrimaryObjectiveAlmostDone75Q = TriggerCreate("gt_PrimaryObjectiveAlmostDone75Q_Func");
    TriggerAddEventTimer(gt_PrimaryObjectiveAlmostDone75Q, gv_victoryTimer_75);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Under Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleUnderAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlSendAnimationEvent(libCOMI_gv_cU_BB_Panel, PlayerGroupAll(), "Danger");
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TempleUnderAttackST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(15.0, c_timeAI);
    DialogControlSendAnimationEvent(libCOMI_gv_cU_BB_Panel, PlayerGroupAll(), "DangerStop");
    Wait(180.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleUnderAttackQ_Init () {
    gt_TempleUnderAttackQ = TriggerCreate("gt_TempleUnderAttackQ_Func");
    TriggerAddEventUnitAttacked2(gt_TempleUnderAttackQ, UnitRefFromVariable("gv_c_TempleObjective"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Critical Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleCriticalQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLifePercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TempleCriticalHealthST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleCriticalQ_Init () {
    gt_TempleCriticalQ = TriggerCreate("gt_TempleCriticalQ_Func");
    TriggerAddEventUnitAttacked2(gt_TempleCriticalQ, UnitRefFromVariable("gv_c_TempleObjective"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Warning 50 Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleWarning50Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TempleHalfHealthST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleWarning50Q_Init () {
    gt_TempleWarning50Q = TriggerCreate("gt_TempleWarning50Q_Func");
    TriggerAddEventUnitAttacked2(gt_TempleWarning50Q, UnitRefFromVariable("gv_c_TempleObjective"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Warning 25 Q
//--------------------------------------------------------------------------------------------------
bool gt_TempleWarning25Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TempleLowHealthST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleWarning25Q_Init () {
    gt_TempleWarning25Q = TriggerCreate("gt_TempleWarning25Q_Func");
    TriggerAddEventUnitAttacked2(gt_TempleWarning25Q, UnitRefFromVariable("gv_c_TempleObjective"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Trasher Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidTrasherAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC3D75AF9_g;
    int autoC3D75AF9_u;
    unit autoC3D75AF9_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    autoC3D75AF9_g = UnitGroup(gv_c_ThrasherUnitType, gv_pLAYER_08_THRASHERS, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC3D75AF9_u = UnitGroupCount(autoC3D75AF9_g, c_unitCountAll);
    for (;; autoC3D75AF9_u -= 1) {
        autoC3D75AF9_var = UnitGroupUnitFromEnd(autoC3D75AF9_g, autoC3D75AF9_u);
        if (autoC3D75AF9_var == null) { break; }
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(autoC3D75AF9_var), 2.0, Color(100.00, 0.00, 0.00));
    }
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("VoidThrasherAttackST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTrasherAttackingQ_Init () {
    gt_VoidTrasherAttackingQ = TriggerCreate("gt_VoidTrasherAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Trasher Appears Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidTrasherAppearsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_VoidTrasherAttackingQ, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("VoidThrasherAttackST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(45.0, c_timeAI);
    TriggerEnable(gt_VoidTrasherAppearsQ, true);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTrasherAppearsQ_Init () {
    gt_VoidTrasherAppearsQ = TriggerCreate("gt_VoidTrasherAppearsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Trasher Appears 2X Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidTrasherAppears2XQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_VoidTrasherAttackingQ, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("VoidThrasherSummonST", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(45.0, c_timeAI);
    TriggerEnable(gt_VoidTrasherAppears2XQ, true);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTrasherAppears2XQ_Init () {
    gt_VoidTrasherAppears2XQ = TriggerCreate("gt_VoidTrasherAppears2XQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Trasher Death Q
//--------------------------------------------------------------------------------------------------
bool gt_VoidTrasherDeathQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("VoidThrasherDeath", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(45.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTrasherDeathQ_Init () {
    gt_VoidTrasherDeathQ = TriggerCreate("gt_VoidTrasherDeathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surprise Attack Q
//--------------------------------------------------------------------------------------------------
bool gt_SurpriseAttackQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto263C0F03_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto263C0F03_val = PlayerRace(gv_pLAYER_03_ENEMY_WAVE1);
    if (auto263C0F03_val == "Prot") {
        libCOMI_gf_SendMissionTransmission("EnemyWarningWarpIn", true, -1);
    }
    else if (auto263C0F03_val == "Terr") {
        libCOMI_gf_SendMissionTransmission("EnemyWarningDropPods", true, -1);
    }
    else if (auto263C0F03_val == "Zerg") {
        libCOMI_gf_SendMissionTransmission("EnemyWarningDropPods", true, -1);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(10.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurpriseAttackQ_Init () {
    gt_SurpriseAttackQ = TriggerCreate("gt_SurpriseAttackQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridAttackPing;
    unitgroup lv_hybridGroup;
    wave lv_wave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hybridAttackPing = c_invalidPingId;
    lv_hybridGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wave = EventPlayerWave();
    if ((lv_wave == null)) {
        breakpoint;
        return true;
    }

    lv_hybridGroup = AIWaveGetUnits(EventPlayerWave());
    if ((lv_hybridGroup == null)) {
        breakpoint;
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilter(gv_c_ThrasherUnitType, c_playerAny, lv_hybridGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), StringExternal("Param/Value/6495FA4E"));
        PingSetScale(PingLastCreated(), 1.0);
        PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave())), StringExternal("Param/Value/C9F1A331"));
        PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
    }
    lv_hybridAttackPing = PingLastCreated();
    if ((lv_hybridAttackPing == c_invalidPingId)) {
        breakpoint;
    }

    while ((libCOMI_gf_GameIsOver() == false) && (libNtve_gf_UnitGroupIsDead(lv_hybridGroup) == false)) {
        PingSetPosition(lv_hybridAttackPing, UnitGroupCenterOfGroup(lv_hybridGroup));
        Wait(0.5, c_timeAI);
    }
    PingDestroy(lv_hybridAttackPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherAttackWave_Init () {
    gt_VoidThrasherAttackWave = TriggerCreate("gt_VoidThrasherAttackWave_Func");
    TriggerAddEventPlayerAIWave(gt_VoidThrasherAttackWave, gv_pLAYER_08_THRASHERS);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bonusObjective;

    // Automatic Variable Declarations
    unitgroup auto4E4E1A41_g;
    int auto4E4E1A41_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_bonusActive == false))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusActive = true;
    TriggerExecute(gt_BonusObjectiveRevealQ, true, false);
    TriggerExecute(gt_ObjectiveDestroyZenithStonesCreate, true, false);
    auto4E4E1A41_g = UnitGroup("ZenithStone", gv_pLAYER_08_THRASHERS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E4E1A41_u = UnitGroupCount(auto4E4E1A41_g, c_unitCountAll);
    for (;; auto4E4E1A41_u -= 1) {
        lv_bonusObjective = UnitGroupUnitFromEnd(auto4E4E1A41_g, auto4E4E1A41_u);
        if (lv_bonusObjective == null) { break; }
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lv_bonusObjective), StringExternal("Param/Value/F6BE60D1"));
        libHots_gf_StorePingForUnit(lv_bonusObjective, 1, PingLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective_Init () {
    gt_StartBonusObjective = TriggerCreate("gt_StartBonusObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Spotted
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSpotted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_StartBonusObjective, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSpotted_Init () {
    gt_BonusObjectiveSpotted = TriggerCreate("gt_BonusObjectiveSpotted_Func");
    TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(210)), 15.0, true);
    TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(1060)), 15.0, true);
    TriggerAddEventUnitRangePoint(gt_BonusObjectiveSpotted, null, UnitGetPosition(UnitFromId(1173)), 15.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_objectiveDestroyZenithStonesKilled += 1;
    TriggerExecute(gt_ObjectiveDestroyZenithStonesUpdate, true, false);
    if ((gv_objectiveDestroyZenithStonesKilled >= 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_ObjectiveDestroyZenithStonesComplete, true, false);
        TriggerExecute(gt_BonusObjectiveCompleteQ, true, false);
    }
    else {
        TriggerExecute(gt_BonusObjectiveOneRemainQ, true, false);
        TriggerExecute(gt_BonusObjectiveTwoRemainQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveDies_Init () {
    gt_BonusObjectiveDies = TriggerCreate("gt_BonusObjectiveDies_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveDies, UnitRefFromUnit(UnitFromId(210)));
    TriggerAddEventUnitDied(gt_BonusObjectiveDies, UnitRefFromUnit(UnitFromId(1060)));
    TriggerAddEventUnitDied(gt_BonusObjectiveDies, UnitRefFromUnit(UnitFromId(1173)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Animation
//--------------------------------------------------------------------------------------------------
bool gt_TempleAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), "PlayBirth", "Birth", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    AnimWait(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), "PlayBirth", 0.0, c_animationOffsetEnd);
    libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), "Inferior");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_c_TempleObjective), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    while (!((UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLife, c_unitPropCurrent) <= 1000.0))) {
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleAnimation_Init () {
    gt_TempleAnimation = TriggerCreate("gt_TempleAnimation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Main Objective Text Timer
//--------------------------------------------------------------------------------------------------
bool gt_UpdateMainObjectiveTextTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        TriggerExecute(gt_ObjectiveDefendTempleUpdate, true, false);
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateMainObjectiveTextTimer_Init () {
    gt_UpdateMainObjectiveTextTimer = TriggerCreate("gt_UpdateMainObjectiveTextTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Rocks Under Attack Main
//--------------------------------------------------------------------------------------------------
bool gt_TempleRocksUnderAttackMain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleRocksUnderAttackMain_Init () {
    gt_TempleRocksUnderAttackMain = TriggerCreate("gt_TempleRocksUnderAttackMain_Func");
    TriggerAddEventUnitAttacked2(gt_TempleRocksUnderAttackMain, UnitRefFromUnit(UnitFromId(1217)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Rocks Under Attack P1 Ramp
//--------------------------------------------------------------------------------------------------
bool gt_TempleRocksUnderAttackP1Ramp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleRocksUnderAttackP1Ramp_Init () {
    gt_TempleRocksUnderAttackP1Ramp = TriggerCreate("gt_TempleRocksUnderAttackP1Ramp_Func");
    TriggerAddEventUnitAttacked2(gt_TempleRocksUnderAttackP1Ramp, UnitRefFromUnit(UnitFromId(2007)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple Rocks Under Attack P2 Ramp
//--------------------------------------------------------------------------------------------------
bool gt_TempleRocksUnderAttackP2Ramp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleRocksUnderAttackP2Ramp_Init () {
    gt_TempleRocksUnderAttackP2Ramp = TriggerCreate("gt_TempleRocksUnderAttackP2Ramp_Func");
    TriggerAddEventUnitAttacked2(gt_TempleRocksUnderAttackP2Ramp, UnitRefFromUnit(UnitFromId(1216)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Progress Visualization
//--------------------------------------------------------------------------------------------------
bool gt_VictoryProgressVisualization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((TimerGetRemaining(gv_victoryTimer) < (TimerGetDuration(gv_victoryTimer) * 0.9)))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault);
    while (!((TimerGetRemaining(gv_victoryTimer) < (TimerGetDuration(gv_victoryTimer) * 0.7)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage1"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage1"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    Wait(5.0, c_timeGame);
    while (!((TimerGetRemaining(gv_victoryTimer) < (TimerGetDuration(gv_victoryTimer) * 0.6)))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_PShakuras02_HighIntensity_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    SoundSetVolume(SoundLastPlayed(), 60.0);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy_Fast", c_animNameDefault);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy_Fast", c_animNameDefault);
    while (!((TimerGetRemaining(gv_victoryTimer) < (TimerGetDuration(gv_victoryTimer) * 0.5)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage2"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage2"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    Wait(5.0, c_timeGame);
    while (!((TimerGetRemaining(gv_victoryTimer) < (TimerGetDuration(gv_victoryTimer) * 0.4)))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    SoundSetVolume(SoundLastPlayed(), 100.0);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy_Fast", c_animNameDefault);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy_Fast", c_animNameDefault);
    libNtve_gf_ClearAnimationOnDoodadsInRegion(RegionEntireMap(), "Wind_Storm", c_animNameDefault);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionEntireMap(), "LightningBolt");
    while (!((TimerGetRemaining(gv_victoryTimer) < (TimerGetDuration(gv_victoryTimer) * 0.3)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage3"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage3"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    Wait(5.0, c_timeGame);
    while (!((TimerGetRemaining(gv_victoryTimer) < (TimerGetDuration(gv_victoryTimer) * 0.2)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage4"), "Shakuras_XelNaga_Pyramid", RegionPlayableMap());
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Stage4"), "Shakuras_XelNaga_GroundPlates", RegionPlayableMap());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryProgressVisualization_Init () {
    gt_VictoryProgressVisualization = TriggerCreate("gt_VictoryProgressVisualization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Missiles
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_l_MissileUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KaiserWormScourgeMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_l_MissileUnit = EventUnit();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "KaiserWormScourgeMissile", UnitGetPosition(lv_l_MissileUnit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, UnitGetFacing(lv_l_MissileUnit));
    libHots_gf_StorePingForUnit(lv_l_MissileUnit, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), lv_l_MissileUnit);
    PingSetScale(PingLastCreated(), 0.075);
    while (!((UnitIsAlive(EventUnit()) == false))) {
        Wait(0.0625, c_timeGame);
    }
    PingDestroy(libHots_gf_PingStoredForUnit(lv_l_MissileUnit, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherMissiles_Init () {
    gt_VoidThrasherMissiles = TriggerCreate("gt_VoidThrasherMissiles_Func");
    TriggerAddEventUnitRegion(gt_VoidThrasherMissiles, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init02LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init03Players, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAIRNG, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02LoadingComplete_Init () {
    gt_Init02LoadingComplete = TriggerCreate("gt_Init02LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init02LoadingComplete, libCOMI_gv_mISSIONREADY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init03Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIter;
    playergroup lv_nonPlayerSharedVision;

    // Automatic Variable Declarations
    playergroup autoC8CC7E72_g;
    int autoC8CC7E72_var;
    playergroup autoF10EB87B_g;

    // Variable Initialization
    lv_nonPlayerSharedVision = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    libNtve_gf_SetUpgradeLevelForPlayer(gv_pLAYER_07_TEMPLE, "CoopNPCPlayer", 1);
    autoC8CC7E72_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoC8CC7E72_var = -1;
    while (true) {
        autoC8CC7E72_var = PlayerGroupNextPlayer(autoC8CC7E72_g, autoC8CC7E72_var);
        if (autoC8CC7E72_var < 0) { break; }
        libNtve_gf_SetAlliance(autoC8CC7E72_var, gv_pLAYER_09_ROCK, libNtve_ge_AllianceSetting_Neutral);
    }
    autoF10EB87B_g = libCOMI_gf_GetEnemyPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoF10EB87B_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        PlayerGroupAdd(gv_enemyPlayerGroup, lv_playerIter);
        libNtve_gf_SetAlliance(gv_pLAYER_09_ROCK, lv_playerIter, libNtve_ge_AllianceSetting_Enemy);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Players_Init () {
    gt_Init03Players = TriggerCreate("gt_Init03Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_rocksBig;
    unitgroup lv_rocksSmall;

    // Automatic Variable Declarations
    playergroup auto350DE223_g;
    int auto350DE223_var;
    unitgroup auto260B976C_g;
    int auto260B976C_u;
    unit auto260B976C_var;
    unitgroup autoCF2ED3E8_g;
    int autoCF2ED3E8_u;
    unit autoCF2ED3E8_var;

    // Variable Initialization
    lv_rocksBig = UnitGroupEmpty();
    lv_rocksSmall = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetTacticalAIThink(gv_pLAYER_08_THRASHERS, gv_c_ThrasherUnitType, "VoidThrasherAIThink", false);
    auto350DE223_g = gv_enemyPlayerGroup;
    auto350DE223_var = -1;
    while (true) {
        auto350DE223_var = PlayerGroupNextPlayer(auto350DE223_g, auto350DE223_var);
        if (auto350DE223_var < 0) { break; }
        auto260B976C_g = UnitGroup("Bunker", auto350DE223_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto260B976C_u = UnitGroupCount(auto260B976C_g, c_unitCountAll);
        for (;; auto260B976C_u -= 1) {
            auto260B976C_var = UnitGroupUnitFromEnd(auto260B976C_g, auto260B976C_u);
            if (auto260B976C_var == null) { break; }
            UnitCargoCreate(auto260B976C_var, "Marauder", 1);
            UnitCargoCreate(auto260B976C_var, "Marine", 2);
        }
    }
    UnitGroupAdd(gv_templeWalls, UnitFromId(1217));
    UnitGroupAdd(gv_templeWalls, UnitFromId(2007));
    UnitGroupAdd(gv_templeWalls, UnitFromId(1216));
    autoCF2ED3E8_g = gv_templeWalls;
    autoCF2ED3E8_u = UnitGroupCount(autoCF2ED3E8_g, c_unitCountAll);
    for (;; autoCF2ED3E8_u -= 1) {
        autoCF2ED3E8_var = UnitGroupUnitFromEnd(autoCF2ED3E8_g, autoCF2ED3E8_u);
        if (autoCF2ED3E8_var == null) { break; }
        UnitSetInfoTip(autoCF2ED3E8_var, StringExternal("Param/Value/CBB2C6B3"));
    }
    UnitSetState(gv_c_TempleObjective, c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8D1A4E90_ae;
    int auto8D1A4E90_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8D1A4E90_ae = gv_pLAYER_02_USER;
    auto8D1A4E90_var = gv_pLAYER_01_USER;
    for ( ; auto8D1A4E90_var <= auto8D1A4E90_ae; auto8D1A4E90_var += 1 ) {
        VisRevealerCreate(auto8D1A4E90_var, RegionFromId(28));
        gv_revealers[auto8D1A4E90_var][ge_RevealRegions_Revealer_Base] = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), true);
        VisRevealerCreate(auto8D1A4E90_var, RegionFromId(9));
        gv_revealers[auto8D1A4E90_var][ge_RevealRegions_Revealer_BaseExtended] = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), false);
        VisRevealerCreate(auto8D1A4E90_var, RegionFromId(38));
        gv_revealers[auto8D1A4E90_var][ge_RevealRegions_Revealer_BottomRight] = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), false);
        VisRevealerCreate(auto8D1A4E90_var, RegionFromId(37));
        gv_revealers[auto8D1A4E90_var][ge_RevealRegions_Revealer_TopLeft] = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), false);
        VisRevealerCreate(auto8D1A4E90_var, RegionFromId(39));
        gv_revealers[auto8D1A4E90_var][ge_RevealRegions_Revealer_TopRight] = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), false);
        libLbty_gf_AutoRevealRegion(RegionFromId(18), RegionFromId(19), auto8D1A4E90_var);
        libLbty_gf_AutoRevealRegion(RegionFromId(16), RegionFromId(17), auto8D1A4E90_var);
        libLbty_gf_AutoRevealRegion(RegionFromId(22), RegionFromId(23), auto8D1A4E90_var);
        libLbty_gf_AutoRevealRegion(RegionFromId(20), RegionFromId(21), auto8D1A4E90_var);
    }
    gf_ExporeUnexploreAreaforPlayerGroup(libCOMI_gf_HumanPlayers(), true, RegionFromId(11), false);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "LightningBolt");
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Wind_Storm", c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Windy_Fast", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionEntireMap(), "Fog_Shakuras_Thick_Windy_Fast", c_animNameDefault, "Death", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;

    // Automatic Variable Declarations
    unitgroup auto42F61B5E_g;
    int auto42F61B5E_u;
    unit auto42F61B5E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_voidThrasher_LifeIncrease = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 0.0, 50.0, 500.0, 750.0, 1000.0, 1500.0);
    gv_voidThrasher_ShieldsIncrease = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 0.0, 50.0, 1000.0, 1500.0, 2000.0, 3000.0);
    UnitSetPropertyFixed(gv_c_TempleObjective, c_unitPropLifeMax, libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 6000.0, 5000.0, 4000.0, 3000.0, 2000.0, 1000.0));
    UnitSetPropertyFixed(gv_c_TempleObjective, c_unitPropLifePercent, 100.0);
    lv_bonusObjectiveLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 2000.0, 3000.0, 5000.0, 6000.0, 7000.0, 8000.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "ZenithStone", "LifeMax", gv_pLAYER_08_THRASHERS, FixedToString(lv_bonusObjectiveLife, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "ZenithStone", "LifeStart", gv_pLAYER_08_THRASHERS, FixedToString(lv_bonusObjectiveLife, c_fixedPrecisionAny));
    auto42F61B5E_g = gv_templeWalls;
    auto42F61B5E_u = UnitGroupCount(auto42F61B5E_g, c_unitCountAll);
    for (;; auto42F61B5E_u -= 1) {
        auto42F61B5E_var = UnitGroupUnitFromEnd(auto42F61B5E_g, auto42F61B5E_u);
        if (auto42F61B5E_var == null) { break; }
        UnitSetPropertyFixed(auto42F61B5E_var, c_unitPropLifeMax, libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 1500.0, 1500.0, 1000.0, 500.0, 500.0, 500.0));
        UnitSetPropertyFixed(auto42F61B5E_var, c_unitPropLifePercent, 100.0);
    }
    PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, "ShakurasTempleLife", UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLife, c_unitPropCurrent));
    PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, "ShakurasTempleLife", UnitGetPropertyFixed(gv_c_TempleObjective, c_unitPropLife, c_unitPropCurrent));
    if ((gv_attackWavePattern == "")) {
        if ((RandomFixed(0.0, 100.0) <= 50.0)) {
            gv_attackWavePattern = "A";
        }
        else {
            gv_attackWavePattern = "B";
        }
    }

    if ((gv_waveB_09mins_Branch == ge_WaveB_09mins_Branch_Type__None)) {
        if ((RandomFixed(0.0, 100.0) <= 50.0)) {
            gv_waveB_09mins_Branch = ge_WaveB_09mins_Branch_Type_BottomRightFirst;
        }
        else {
            gv_waveB_09mins_Branch = ge_WaveB_09mins_Branch_Type_TopLeftFirst;
        }
    }

    if ((gv_waveB_18mins_Branch == ge_WaveB_18mins_Branch_Type__None)) {
        if ((RandomFixed(0.0, 100.0) <= 50.0)) {
            gv_waveB_18mins_Branch = ge_WaveB_18mins_Branch_Type_CenterAttack;
        }
        else {
            gv_waveB_18mins_Branch = ge_WaveB_18mins_Branch_Type_SplitAttack;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI RNG
//--------------------------------------------------------------------------------------------------
bool gt_StartAIRNG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup autoFDB43E4D_g;
    int autoFDB43E4D_var;
    int auto3FFFFBD3_val;
    string auto16F27145_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_08_THRASHERS);
    autoFDB43E4D_g = gv_enemyPlayerGroup;
    autoFDB43E4D_var = -1;
    while (true) {
        autoFDB43E4D_var = PlayerGroupNextPlayer(autoFDB43E4D_g, autoFDB43E4D_var);
        if (autoFDB43E4D_var < 0) { break; }
        AIAttackWaveSetTargetUnit(autoFDB43E4D_var, gv_c_TempleObjective);
        AISetDifficulty(autoFDB43E4D_var, c_diffWaveLeashing, false);
        AISetBullyRebuildDelay(60.0, 60.0, autoFDB43E4D_var);
    }
    auto3FFFFBD3_val = gv_options_Pattern;
    if (auto3FFFFBD3_val == 2) {
        TriggerExecute(gt_RunAttackWavesARNG, true, false);
    }
    else if (auto3FFFFBD3_val == 3) {
        TriggerExecute(gt_RunAttackWavesBRNG, true, false);
    }
    else {
        auto16F27145_val = gv_attackWavePattern;
        if (auto16F27145_val == "A") {
            TriggerExecute(gt_RunAttackWavesARNG, true, false);
        }
        else if (auto16F27145_val == "B") {
            TriggerExecute(gt_RunAttackWavesBRNG, true, false);
        }
        else {
        }
    }
    gv_attackPatternSet = true;
    gf_SetPersistentAttackLevel(ge_PersistentAttackLevel_Level_00);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAIRNG_Init () {
    gt_StartAIRNG = TriggerCreate("gt_StartAIRNG_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4480348C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TempleAnimation, true, false);
    TriggerExecute(gt_AlertMainRamp01mins, true, false);
    TriggerExecute(gt_AlertP1Ramp, true, false);
    TriggerExecute(gt_AlertP2Ramp, true, false);
    TriggerExecute(gt_VictoryProgressVisualization, true, false);
    TimerStart(gv_victoryTimer, (26.18 * 60.0), false, c_timeGame);
    TimerStart(gv_victoryTimer_AlmostDone, (TimerGetDuration(gv_victoryTimer) - 240.0), false, c_timeGame);
    TimerStart(gv_victoryTimer_50, (TimerGetDuration(gv_victoryTimer) * 0.5), false, c_timeGame);
    TimerStart(gv_victoryTimer_75, (TimerGetDuration(gv_victoryTimer) * 0.25), false, c_timeGame);
    Wait(5.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDefendTempleCreate, true, true);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_c_TempleObjective), StringExternal("Param/Value/0C4C7530"));
    Wait(2.0, c_timeAI);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto4480348C_val = RandomInt(1, 3);
    if (auto4480348C_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro1ST", true, -1);
    }
    else if (auto4480348C_val == 2) {
        libCOMI_gf_SendMissionTransmission("Intro2ST", true, -1);
    }
    else if (auto4480348C_val == 3) {
        libCOMI_gf_SendMissionTransmission("Intro3ST", true, -1);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerExecute(gt_UpdateMainObjectiveTextTimer, true, false);
    libCOMI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\btn-unit-xelnaga-shakurasxelnagatemple.dds", StringExternal("Param/Value/8B236E8C"), 100);
    libCOMI_gf_SetSingularBossBarBossVoidCampaign(gv_c_TempleObjective, true);
    Wait(540.0, c_timeAI);
    TriggerExecute(gt_StartBonusObjective, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Options Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateOptionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_numOptions;

    // Automatic Variable Declarations
    int auto6A74540D_ae;
    const int auto6A74540D_ai = 1;
    int auto60E53E59_ae;
    const int auto60E53E59_ai = 1;

    // Variable Initialization
    lv_numOptions = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(700, (220+(lv_numOptions*70)), c_anchorCenter, 0, 0, true);
    gv_optionsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_optionsDialog, 700, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/5FC34783"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_optionsDialogTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_optionsDialogTitle, "BattlenetDialogTitle", PlayerGroupAll());
    auto6A74540D_ae = (lv_numOptions-1);
    lv_i = 0;
    for ( ; ( (auto6A74540D_ai >= 0 && lv_i <= auto6A74540D_ae) || (auto6A74540D_ai < 0 && lv_i >= auto6A74540D_ae) ) ; lv_i += auto6A74540D_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 80, (120+(lv_i*70)), IntToText(lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_optionsDialogLabels[lv_i] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[0], StringExternal("Param/Value/F26EC3C6"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[1], StringExternal("Param/Value/170095FE"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_optionsDialogLabels[2], StringExternal("Param/Value/CA2513D5"), PlayerGroupAll());
    auto60E53E59_ae = (lv_numOptions-1);
    lv_i = 0;
    for ( ; ( (auto60E53E59_ai >= 0 && lv_i <= auto60E53E59_ae) || (auto60E53E59_ai < 0 && lv_i >= auto60E53E59_ae) ) ; lv_i += auto60E53E59_ai ) {
        DialogControlCreate(gv_optionsDialog, c_triggerControlTypePulldown);
        gv_optionsDialogMenus[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(gv_optionsDialogMenus[lv_i], PlayerGroupAll(), c_anchorTopLeft, 380, (100+(lv_i*70)));
        DialogControlAddItem(gv_optionsDialogMenus[lv_i], PlayerGroupAll(), StringExternal("Param/Value/6C9BE827"));
    }
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/200BD9B0"));
    DialogControlAddItem(gv_optionsDialogMenus[0], PlayerGroupAll(), StringExternal("Param/Value/90131169"));
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/1AC27CBA"));
    DialogControlAddItem(gv_optionsDialogMenus[1], PlayerGroupAll(), StringExternal("Param/Value/E3814275"));
    DialogControlRemoveAllItems(gv_optionsDialogMenus[2], PlayerGroupAll());
    DialogControlAddItem(gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/61CA15AD"));
    DialogControlAddItem(gv_optionsDialogMenus[2], PlayerGroupAll(), StringExternal("Param/Value/1920CE53"));
    DialogControlSelectItem(gv_optionsDialogMenus[0], PlayerGroupAll(), (gv_options_Pattern+1));
    DialogControlSelectItem(gv_optionsDialogMenus[1], PlayerGroupAll(), (gv_options_Hybrid+1));
    DialogControlSelectItem(gv_optionsDialogMenus[2], PlayerGroupAll(), (gv_options_Attacks+1));
    libNtve_gf_CreateDialogItemButton(gv_optionsDialog, 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/4B8FAF44"), "");
    gv_optionsDialogAccept = DialogControlLastCreated();
    DialogSetRenderPriority(gv_optionsDialog, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateOptionsDialog_Init () {
    gt_CreateOptionsDialog = TriggerCreate("gt_CreateOptionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Options
//--------------------------------------------------------------------------------------------------
bool gt_OpenOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_optionsDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenOptions_Init () {
    gt_OpenOptions = TriggerCreate("gt_OpenOptions_Func");
    TriggerAddEventChatMessage(gt_OpenOptions, c_playerAny, "-options", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Options
//--------------------------------------------------------------------------------------------------
bool gt_CloseOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsDialogAccept))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromInt(gv_savedBank, gv_bankSection, gv_options_Pattern_Key, (DialogControlGetSelectedItem(gv_optionsDialogMenus[0], 1)-1));
    gv_options_Pattern = DialogControlGetSelectedItem(gv_optionsDialogMenus[0], 1);
    BankValueSetFromInt(gv_savedBank, gv_bankSection, gv_options_Hybrid_Key, (DialogControlGetSelectedItem(gv_optionsDialogMenus[1], 1)-1));
    gv_options_Hybrid = DialogControlGetSelectedItem(gv_optionsDialogMenus[1], 1);
    BankValueSetFromInt(gv_savedBank, gv_bankSection, gv_options_Attacks_Key, (DialogControlGetSelectedItem(gv_optionsDialogMenus[2], 1)-1));
    gv_options_Attacks = DialogControlGetSelectedItem(gv_optionsDialogMenus[2], 1);
    BankSave(gv_savedBank);
    DialogSetVisible(gv_optionsDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseOptions_Init () {
    gt_CloseOptions = TriggerCreate("gt_CloseOptions_Func");
    TriggerAddEventDialogControl(gt_CloseOptions, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Attack Waves A RNG
//--------------------------------------------------------------------------------------------------
bool gt_RunAttackWavesARNG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto1D9606A8_val;
    int auto20556151_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1D9606A8_val = PlayerRace(gv_pLAYER_03_ENEMY_WAVE1);
    if (auto1D9606A8_val == "Prot") {
        gv_hybridMajor = "HybridBehemoth";
        gv_hybridMinor = "HybridReaver";
    }
    else if (auto1D9606A8_val == "Zerg") {
        gv_hybridMajor = "HybridDominatorVoid";
        gv_hybridMinor = "HybridDestroyer";
    }
    else if (auto1D9606A8_val == "Terr") {
        auto20556151_val = gv_options_Hybrid;
        if (auto20556151_val == 1) {
            gv_hybridMajor = "HybridDominatorVoid";
            gv_hybridMinor = "HybridReaver";
        }
        else if (auto20556151_val == 2) {
            gv_hybridMajor = "HybridBehemoth";
            gv_hybridMinor = "HybridDestroyer";
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                gv_hybridMajor = "HybridBehemoth";
                gv_hybridMinor = "HybridDestroyer";
            }
            else {
                gv_hybridMajor = "HybridDominatorVoid";
                gv_hybridMinor = "HybridReaver";
            }
        }
    }
    else {
    }
    gf_RunTriggerAtMissionTime(gt_AttackWaveA03mins, (3.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA06mins, (6.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA09mins, (9.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA12mins, (12.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AlertAirRamp, (14.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA15mins, (15.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA18mins, (18.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA20mins, (20.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveA22mins, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAttackWavesARNG_Init () {
    gt_RunAttackWavesARNG = TriggerCreate("gt_RunAttackWavesARNG_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Attack Waves B RNG
//--------------------------------------------------------------------------------------------------
bool gt_RunAttackWavesBRNG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto98C95B62_val;
    int autoD6CC8D40_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto98C95B62_val = PlayerRace(gv_pLAYER_03_ENEMY_WAVE1);
    if (auto98C95B62_val == "Prot") {
        gv_hybridMajor = "HybridDominatorVoid";
        gv_hybridMinor = "HybridNemesis";
    }
    else if (auto98C95B62_val == "Zerg") {
        gv_hybridMajor = "HybridBehemoth";
        gv_hybridMinor = "HybridNemesis";
    }
    else if (auto98C95B62_val == "Terr") {
        gv_hybridMinor = "HybridNemesis";
        autoD6CC8D40_val = gv_options_Hybrid;
        if (autoD6CC8D40_val == 1) {
            gv_hybridMajor = "HybridDominatorVoid";
        }
        else if (autoD6CC8D40_val == 2) {
            gv_hybridMajor = "HybridBehemoth";
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                gv_hybridMajor = "HybridBehemoth";
            }
            else {
                gv_hybridMajor = "HybridDominatorVoid";
            }
        }
    }
    else {
    }
    gf_RunTriggerAtMissionTime(gt_AttackWaveB03mins, (3.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB06mins, (6.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB09mins, (9.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB12mins, (12.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AlertAirRamp, (14.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB15mins, (15.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB18mins, (18.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB20mins, (20.0 * 60.0));
    gf_RunTriggerAtMissionTime(gt_AttackWaveB22mins, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunAttackWavesBRNG_Init () {
    gt_RunAttackWavesBRNG = TriggerCreate("gt_RunAttackWavesBRNG_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ObjectiveDestroyZenithStonesCreate_Init();
    gt_ObjectiveDestroyZenithStonesComplete_Init();
    gt_ObjectiveDestroyZenithStonesUpdate_Init();
    gt_ObjectiveDestroyZenithStonesFailed_Init();
    gt_ObjectiveDefendTempleCreate_Init();
    gt_ObjectiveDefendTempleUpdate_Init();
    gt_ObjectiveDefendTempleComplete_Init();
    gt_ObjectiveDefendTempleFailed_Init();
    gt_AlertMainRamp01mins_Init();
    gt_AlertP1Ramp_Init();
    gt_AlertP2Ramp_Init();
    gt_AlertAirRamp_Init();
    gt_RunAttackWavesA_Init();
    gt_AttackWaveA03mins_Init();
    gt_AttackWaveA06mins_Init();
    gt_AttackWaveA09mins_Init();
    gt_AttackWaveA12mins_Init();
    gt_AttackWaveA15mins_Init();
    gt_AttackWaveA18mins_Init();
    gt_AttackWaveA20mins_Init();
    gt_AttackWaveA22mins_Init();
    gt_RunAttackWavesB_Init();
    gt_AttackWaveB03mins_Init();
    gt_AttackWaveB06mins_Init();
    gt_AttackWaveB09mins_Init();
    gt_AttackWaveB12mins_Init();
    gt_AttackWaveB15mins_Init();
    gt_AttackWaveB18mins_Init();
    gt_AttackWaveB20mins_Init();
    gt_AttackWaveB22mins_Init();
    gt_RemoveUsedTransports_Init();
    gt_AIGiveResources_Init();
    gt_ExtraThrasherBreathAttacks_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareTempleAnimations_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_ScoreScreenTempleLifeLeft_Init();
    gt_AttackWaveIncomingQ_Init();
    gt_BonusObjectiveRevealQ_Init();
    gt_BonusObjectiveTwoRemainQ_Init();
    gt_BonusObjectiveOneRemainQ_Init();
    gt_BonusObjectiveCompleteQ_Init();
    gt_HybridDetectedAllDifQ_Init();
    gt_HybridDetectedHighDifQ_Init();
    gt_PrimaryObjectiveAlmostDoneQ_Init();
    gt_PrimaryObjectiveAlmostDone50Q_Init();
    gt_PrimaryObjectiveAlmostDone75Q_Init();
    gt_TempleUnderAttackQ_Init();
    gt_TempleCriticalQ_Init();
    gt_TempleWarning50Q_Init();
    gt_TempleWarning25Q_Init();
    gt_VoidTrasherAttackingQ_Init();
    gt_VoidTrasherAppearsQ_Init();
    gt_VoidTrasherAppears2XQ_Init();
    gt_VoidTrasherDeathQ_Init();
    gt_SurpriseAttackQ_Init();
    gt_VoidThrasherAttackWave_Init();
    gt_StartBonusObjective_Init();
    gt_BonusObjectiveSpotted_Init();
    gt_BonusObjectiveDies_Init();
    gt_TempleAnimation_Init();
    gt_UpdateMainObjectiveTextTimer_Init();
    gt_TempleRocksUnderAttackMain_Init();
    gt_TempleRocksUnderAttackP1Ramp_Init();
    gt_TempleRocksUnderAttackP2Ramp_Init();
    gt_VictoryProgressVisualization_Init();
    gt_VoidThrasherMissiles_Init();
    gt_Init02LoadingComplete_Init();
    gt_Init03Players_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartAIRNG_Init();
    gt_StartGameQ_Init();
    gt_CreateOptionsDialog_Init();
    gt_OpenOptions_Init();
    gt_CloseOptions_Init();
    gt_RunAttackWavesARNG_Init();
    gt_RunAttackWavesBRNG_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
