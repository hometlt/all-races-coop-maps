//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Primal Ascension
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Hybrid Wave AI
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }
    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave2_enabled;
wave[17] aiF917F4D7_wave2_lastWave;
trigger aiF917F4D7_wave2_trigger = null;
int aiF917F4D7_wave2_runPlayer;
playergroup aiF917F4D7_wave2_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave2_enabled[init_i] = true;
        aiF917F4D7_wave2_lastWave[init_i] = null;
    }
    aiF917F4D7_wave2_trigger = TriggerCreate("aiF917F4D7_wave2_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave2_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave2_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave2_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave2_runPlayer;
    playergroup target = aiF917F4D7_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave2_runPlayer = p;
    aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave3_enabled;
wave[17] aiF917F4D7_wave3_lastWave;
trigger aiF917F4D7_wave3_trigger = null;
int aiF917F4D7_wave3_runPlayer;
playergroup aiF917F4D7_wave3_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave3_enabled[init_i] = true;
        aiF917F4D7_wave3_lastWave[init_i] = null;
    }
    aiF917F4D7_wave3_trigger = TriggerCreate("aiF917F4D7_wave3_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave3_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave3_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave3_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave3_runPlayer;
    playergroup target = aiF917F4D7_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave3_runPlayer = p;
    aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave4_enabled;
wave[17] aiF917F4D7_wave4_lastWave;
trigger aiF917F4D7_wave4_trigger = null;
int aiF917F4D7_wave4_runPlayer;
playergroup aiF917F4D7_wave4_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave4_enabled[init_i] = true;
        aiF917F4D7_wave4_lastWave[init_i] = null;
    }
    aiF917F4D7_wave4_trigger = TriggerCreate("aiF917F4D7_wave4_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave4_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave4_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave4_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave4_runPlayer;
    playergroup target = aiF917F4D7_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave4_runPlayer = p;
    aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave5_enabled;
wave[17] aiF917F4D7_wave5_lastWave;
trigger aiF917F4D7_wave5_trigger = null;
int aiF917F4D7_wave5_runPlayer;
playergroup aiF917F4D7_wave5_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave5_enabled[init_i] = true;
        aiF917F4D7_wave5_lastWave[init_i] = null;
    }
    aiF917F4D7_wave5_trigger = TriggerCreate("aiF917F4D7_wave5_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave5_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave5_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave5_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave5_runPlayer;
    playergroup target = aiF917F4D7_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave5_runPlayer = p;
    aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave6_enabled;
wave[17] aiF917F4D7_wave6_lastWave;
trigger aiF917F4D7_wave6_trigger = null;
int aiF917F4D7_wave6_runPlayer;
playergroup aiF917F4D7_wave6_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave6_enabled[init_i] = true;
        aiF917F4D7_wave6_lastWave[init_i] = null;
    }
    aiF917F4D7_wave6_trigger = TriggerCreate("aiF917F4D7_wave6_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave6_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave6_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave6_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave6_runPlayer;
    playergroup target = aiF917F4D7_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave6_runPlayer = p;
    aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave7_enabled;
wave[17] aiF917F4D7_wave7_lastWave;
trigger aiF917F4D7_wave7_trigger = null;
int aiF917F4D7_wave7_runPlayer;
playergroup aiF917F4D7_wave7_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave7_enabled[init_i] = true;
        aiF917F4D7_wave7_lastWave[init_i] = null;
    }
    aiF917F4D7_wave7_trigger = TriggerCreate("aiF917F4D7_wave7_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave7_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave7_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave7_runPlayer;
    playergroup target = aiF917F4D7_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;
    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 180; }
    if (d == 2) { ta = 180; }
    if (d == 3) { ta = 180; }
    if (d == 4) { ta = 180; }
    if (d == 5) { ta = 180; }
    if (d == 6) { ta = 180; }
    tg = 0;
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave7_runPlayer = p;
    aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
    if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
    if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
    if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
    if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
    if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
    if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
    if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
    if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
    if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
    if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
    if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    return null;
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
    if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
    if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
    if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
    if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
    if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
    if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
    if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
    if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
    if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
    if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
    if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;
    if (p < 0 || p >= 16) {
        return false;
    }
    aiF917F4D7_wave1_run(p, target, true);
    aiF917F4D7_wave2_run(p, target, true);
    aiF917F4D7_wave3_run(p, target, true);
    aiF917F4D7_wave4_run(p, target, true);
    aiF917F4D7_wave5_run(p, target, true);
    aiF917F4D7_wave6_run(p, target, true);
    aiF917F4D7_wave7_run(p, target, true);
    while (true) {
        aiF917F4D7_wave7_run(p, target, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enable(p, val);
    aiF917F4D7_wave2_enable(p, val);
    aiF917F4D7_wave3_enable(p, val);
    aiF917F4D7_wave4_enable(p, val);
    aiF917F4D7_wave5_enable(p, val);
    aiF917F4D7_wave6_enable(p, val);
    aiF917F4D7_wave7_enable(p, val);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);
    TriggerStop(aiF917F4D7_wave1_trigger);
    TriggerStop(aiF917F4D7_wave2_trigger);
    TriggerStop(aiF917F4D7_wave3_trigger);
    TriggerStop(aiF917F4D7_wave4_trigger);
    TriggerStop(aiF917F4D7_wave5_trigger);
    TriggerStop(aiF917F4D7_wave6_trigger);
    TriggerStop(aiF917F4D7_wave7_trigger);
}
//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}
//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;
    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_wave2_init();
        aiF917F4D7_wave3_init();
        aiF917F4D7_wave4_init();
        aiF917F4D7_wave5_init();
        aiF917F4D7_wave6_init();
        aiF917F4D7_wave7_init();
        aiF917F4D7_waves_init();
        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(0);
        }
        aiF917F4D7_initialized = true;
    }
    AICampaignStart(p);
}
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC 2017: Primal Ascension
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 3;
const int gv_pLAYER_04_ENEMY = 4;
const int gv_pLAYER_05_PRIMALZERG = 5;
const int gv_pLAYER_06_EGGS = 6;
const int gv_pLAYER_07_BOSSESNEUTRAL = 7;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
int gv_bossesDead;
int gv_eggsDead;
unitgroup[5] gv_bossGroup;
int[5] gv_bossGroupTimeToAwaken;
point gv_lastDestroyedEggPoint;
unit gv_bossDevastator;
int gv_bossDevastatorPing;
unit gv_bossSkiver;
int gv_bossSkiverPing;
unit gv_bossCarnozor;
int gv_bossCarnozorPing;
point[9] gv_carnozorTowerPoint;
unit gv_bossMothmam;
int gv_bossMothmamPing;
unit gv_bossKhailu;
int gv_bossKhailuPing;
point[20] gv_khailuCloudPoints;
unit gv_bossUldra;
int gv_bossUldraPing;
point[66] gv_uldraFireballPoints;
point[10] gv_uldraTunnelPoints;
int gv_uldraTunnelPointTarget;
int gv_uldraTunnelPointCurrent;
unit gv_uldraCollisionDummy;
unitgroup[5] gv_voidCrystalsGroup;
int gv_voidCrystalsGroupWithTwin;
int[5] gv_voidCrystalsGroupAbility;
unit[5] gv_ashWorm;
int[5] gv_ashWormTimeToAwaken;
point[5][5] gv_ashWormTunnelPoint;
int[5] gv_ashWormTunnelPointTarget;
unit[5] gv_ashWormCollisionDummy;
int[5] gv_ashWormPing;
region[3][3] gv_attackSpawn;
point gv_attackWaypoint;
actor[3][4] gv_rockTowerBriefingUnitSelect;
int gv_customValuePosX;
int gv_customValuePosY;
timer gv_startBonusObjective1;
timer gv_biomassExpireTimer1;
int gv_biomassPing1;
unit[4] gv_biomass1RockTower;
point[4] gv_biomass1CavePoint;
unitgroup gv_biomassPrimalZergGroup1;
bool gv_biomass1PrimalZergReplacing;
int gv_ascendantAttackedOneCrystal;
int gv_ascendantAttackedMultipleCrystals;
point gv_victoryCompletePan;
int gv_objectiveSlayPackAscendants;
int gv_objectiveDoNotLet20EggsBeDrained;
int gv_objectiveRescueStalkers;
void InitGlobals () {
    int init_i;
    gv_enemyGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_bossGroup[init_i] = UnitGroupEmpty();
    }
    gv_bossDevastatorPing = c_invalidPingId;
    gv_bossSkiverPing = c_invalidPingId;
    gv_bossCarnozorPing = c_invalidPingId;
    gv_bossMothmamPing = c_invalidPingId;
    gv_bossKhailuPing = c_invalidPingId;
    gv_bossUldraPing = c_invalidPingId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_voidCrystalsGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_ashWormPing[init_i] = c_invalidPingId;
    }
    gv_customValuePosX = 1;
    gv_customValuePosY = 2;
    gv_startBonusObjective1 = TimerCreate();
    gv_biomassExpireTimer1 = TimerCreate();
    gv_biomassPing1 = c_invalidPingId;
    gv_biomassPrimalZergGroup1 = UnitGroupEmpty();
    gv_ascendantAttackedOneCrystal = 1;
    gv_ascendantAttackedMultipleCrystals = 1;
    gv_objectiveSlayPackAscendants = c_invalidObjectiveId;
    gv_objectiveDoNotLet20EggsBeDrained = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------

void gf_CreateProgressBarForBoss (unit lp_boss, int lp_time, fixed lp_progressBarHeight);
void gf_SetupAIForBoss (unit lp_boss);
void gf_BossSpawnEggs (int lp_zerglingEggs, int lp_hydraliskEggs, int lp_ultraliskEggs, region lp_region, int lp_player, unit lp_boss);
bool gf_PlayersHaveUnitsInRegion (region lp_region);
unitgroup gf_GetPlayersUnitsInRegion (region lp_region, region lp_negativeRegion);
void gf_BossDevastatorCreatePing (bool lp_dormant);
void gf_BossDevastatorAI (unit lp_boss, region lp_bossArea);
void gf_BossDevastatorCorrosiveBileLine (unit lp_boss, region lp_bossArea);
void gf_BossDevastatorCorrosiveBileBombardment (unit lp_boss, region lp_bossArea);
void gf_BossDevastatorBurrowShockwave (unit lp_boss, region lp_bossArea);
void gf_BossDevastatorAttackEggs (unit lp_boss, region lp_bossArea, point lp_bossLeashPoint);
void gf_BossSkiverCreatePing (bool lp_dormant);
void gf_BossSkiverAI (unit lp_boss, region lp_bossArea);
void gf_BossSkiverSpinesCircle (unit lp_boss, region lp_bossArea);
void gf_BossSkiverLeap (unit lp_boss, region lp_bossArea);
void gf_BossSkiverSpinesAngle (unit lp_boss, region lp_bossArea);
void gf_BossSkiverAttackEggs (unit lp_boss, region lp_bossArea, point lp_bossLeashPoint);
void gf_BossCarnozorCreatePing (bool lp_dormant);
void gf_BossCarnozorAI (unit lp_boss, region lp_bossAbilityArea);
void gf_BossCarnozorBomb (unit lp_boss, region lp_bossArea);
void gf_BossCarnozorSporeRays (unit lp_boss, region lp_bossArea);
void gf_BossCarnozorTower (unit lp_boss, region lp_bossArea);
void gf_BossCarnozorAttackEggs (unit lp_boss, region lp_bossArea);
void gf_BossMothmamCreatePing (bool lp_dormant);
void gf_BossMothmamAI (unit lp_boss, region lp_bossArea);
void gf_BossMothmamAbduct (unit lp_boss);
void gf_BossMothmamSpawnEggs (unit lp_boss, region lp_bossArea);
void gf_BossMothmamSpineVolley (unit lp_boss, region lp_bossArea);
void gf_BossMothmamAttackEggs (unit lp_boss, region lp_bossArea);
void gf_BossKhailuCreatePing (bool lp_dormant);
void gf_BossKhailuAI (unit lp_boss, region lp_bossArea);
void gf_BossKhailuBomb (unit lp_boss, region lp_bossArea);
void gf_BossKhailuSpawnEggs (unit lp_boss, region lp_bossArea);
void gf_BossKhailuMultipleClouds (unit lp_boss, region lp_bossArea);
void gf_BossKhailuAttackEggs (unit lp_boss, region lp_bossArea);
void gf_BossUldraCreatePing (bool lp_dormant);
void gf_VoidCrystalPatrol (unit lp_voidCrystal, unit lp_boss, bool lp_clockwise);
void gf_VoidCrystalHeal (unit lp_voidCrystal, unit lp_boss);
void gf_VoidCrystalActivate (unit lp_boss, fixed lp_bossLifePercent, int lp_bossGroup);
void gf_VoidCrystalCreatePing (unit lp_voidCrystal);
void gf_VoidCrystalUpdateBossInfo (unit lp_boss, unitgroup lp_voidCrystalGroup);
void gf_VoidCrystalActivateAbility (unit lp_voidCrystal, int lp_groupID);
void gf_VoidCrystalCloak (unit lp_voidCrystal, int lp_groupID);
void gf_VoidCrystalSpawn (unit lp_voidCrystal, int lp_groupID);
void gf_AshWormCreate (int lp_iD);
void gf_AshWormCreatePing (unit lp_ashWorm, int lp_iD);
void gf_CreateProgressBarForAshWorm (point lp_point, int lp_time, fixed lp_progressBarHeight, int lp_iD);
void gf_AshWormAI (int lp_iD);
void gf_AshWormAttackEggs (int lp_iD);
void gf_AshWormTunnel (int lp_iD);
point gf_GetSpawnLocation (bool lp_expansionFirst);
void gf_SendAttackWave (int lp_resourceBucket, int lp_techBucket, bool lp_expansionsFirst);
void gf_TransmissionIncomingAshWormQ (int lp_iD);
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_DEBUGAshWorm1;
trigger gt_DEBUGAshWorm2;
trigger gt_DEBUGAshWorm3;
trigger gt_DEBUGAshWorm4;
trigger gt_DEBUGVC;
trigger gt_DEBUGKillPrimal;
trigger gt_DEBUGBonus;
trigger gt_DEBUGWin;
trigger gt_DEBUGLoss;
trigger gt_StartGameQ;
trigger gt_BossSpawnEggsTimedLife;
trigger gt_BossesSetVariables;
trigger gt_BossesUpdateWakeTime;
trigger gt_BossesStartAIs;
trigger gt_BossDies;
trigger gt_EggDies;
trigger gt_CollectEssenceMissiles;
trigger gt_BossDevastatorStartTimer;
trigger gt_BossDevastatorStartAI;
trigger gt_BossSkiverStartTimer;
trigger gt_BossSkiverStartAI;
trigger gt_BossCarnozorStartTimer;
trigger gt_BossCarnozorStartAI;
trigger gt_BossCarnozorSlimeTowerTimedLife;
trigger gt_BossMothmamStartTimer;
trigger gt_BossMothmamStartAI;
trigger gt_BossKhailuStartTimer;
trigger gt_BossKhailuStartAI;
trigger gt_BossUldraStartTimer;
trigger gt_BossUldraStartAI;
trigger gt_BossUldraAI;
trigger gt_BossUldraMultipleFireballs;
trigger gt_BossUldraTunnelEggs;
trigger gt_BossUldraFirebreath;
trigger gt_BossUldraAttackEggs;
trigger gt_VoidCrystalDies;
trigger gt_VoidCrystalsSetAbilities;
trigger gt_AshWormSetVariables;
trigger gt_AshWormStartAIs;
trigger gt_AshWormUpdateWakeTime;
trigger gt_AshWormDies;
trigger gt_StartAI;
trigger gt_SetupSpawnLocations;
trigger gt_BonusSetVariables;
trigger gt_BonusStart;
trigger gt_Biomass1Init;
trigger gt_Biomass1TimerUpdate;
trigger gt_Biomass1ProgressCheck;
trigger gt_Biomass1PrimalZergDies;
trigger gt_Biomass1RockTower1Dies;
trigger gt_Biomass1RockTower2Dies;
trigger gt_Biomass1RockTower3Dies;
trigger gt_Biomass1RemoveStuff;
trigger gt_FindSecret;
trigger gt_TransmissionIntroduction1Q;
trigger gt_TransmissionIntroduction2Q;
trigger gt_TransmissionAscendantsLieDormantQ;
trigger gt_TransmissionAwakensSoonDevastatorQ;
trigger gt_TransmissionAwakensSoonSkiverQ;
trigger gt_TransmissionAwakensSoonCarnozorQ;
trigger gt_TransmissionAwakensSoonMothmamKhailuQ;
trigger gt_TransmissionAwakensSoonUldraQ;
trigger gt_TransmissionAwakenedDevastatorSkiverQ;
trigger gt_TransmissionAwakenedCarnozorQ;
trigger gt_TransmissionAwakenedMothmamKhailuQ;
trigger gt_TransmissionAwakenedUldraQ;
trigger gt_TransmissionAscendantAttackedOneCrystalQ;
trigger gt_TransmissionAscendantAttackedMultipleCrystalsQ;
trigger gt_TransmissionVoidCrystalsDestroyedDevastatorSkiverQ;
trigger gt_TransmissionVoidCrystalsDestroyedCarnozorQ;
trigger gt_TransmissionVoidCrystalsDestroyedMothmamKhailuQ;
trigger gt_TransmissionVoidCrystalsDestroyedUldraQ;
trigger gt_TransmissionAscendantKilledDevastatorSkiverQ;
trigger gt_TransmissionAscendantKilledCarnozorQ;
trigger gt_TransmissionAscendantKilledMothmamKhailuQ;
trigger gt_TransmissionAscendantKilledUldraQ;
trigger gt_TransmissionLostEggs05Q;
trigger gt_TransmissionLostEggs10Q;
trigger gt_TransmissionLostEggs15Q;
trigger gt_TransmissionBonusStartQ;
trigger gt_TransmissionBonusFirstWarningQ;
trigger gt_TransmissionBonusFinalWarningQ;
trigger gt_TransmissionBonusFailedQ;
trigger gt_TransmissionBonusCompleteQ;
trigger gt_TransmissionEnemyAttackingBasesQ;
trigger gt_TransmissionCloakedEnemiesQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_ObjectiveSlayPackAscendantsCreate;
trigger gt_ObjectiveSlayPackAscendantsComplete;
trigger gt_ObjectiveSlayPackAscendantsUpdate;
trigger gt_ObjectiveSlayPackAscendantsFailed;
trigger gt_ObjectiveAscendantsCantDrain20EggsCreate;
trigger gt_ObjectiveAscendantsCantDrain20EggsComplete;
trigger gt_ObjectiveAscendantsCantDrain20EggsUpdate;
trigger gt_ObjectiveAscendantsCantDrain20EggsFailed;
trigger gt_ObjectiveCollectBiomass1Create;
trigger gt_ObjectiveCollectBiomass1Complete;
trigger gt_ObjectiveCollectBiomass1Update;
trigger gt_ObjectiveCollectBiomass1Failed;
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
void gf_CreateProgressBarForBoss (unit lp_boss, int lp_time, fixed lp_progressBarHeight) {
    // Variable Declarations
    unit lv_progressBarUnit;
    int lv_timerMax;
    int lv_timerCount;
    // Variable Initialization
    lv_timerMax = lp_time;
    lv_timerCount = lp_time;
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false) && (UnitGetOwner(lp_boss) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitGetPropertyFixed(lp_boss, c_unitPropLife, c_unitPropCurrent) == UnitGetPropertyFixed(lp_boss, c_unitPropLifeMax, c_unitPropCurrent))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_boss), 4.0), 0.1, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_boss), 4.0), 0.1, false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, UnitGetPosition(lp_boss));
        lv_progressBarUnit = UnitLastCreated();
        UnitSetHeight(lv_progressBarUnit, lp_progressBarHeight, 0.0);
        libCOMI_gf_DisplayUnitProgressBar(lv_progressBarUnit, StringExternal("Param/Value/6676081E"), 0, lv_timerMax);
        libCOMI_gf_SetUnitProgressBarIsWideBar(lv_progressBarUnit, false);
        libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
        libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, lv_timerCount);
        UnitSetProgressStage(lv_progressBarUnit, 1, c_unitProgressStageResume);
        Wait(2.0, c_timeAI);
        while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_boss) == true) && (lv_timerCount > 0) && (UnitGetOwner(lp_boss) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitGetPropertyFixed(lp_boss, c_unitPropLife, c_unitPropCurrent) == UnitGetPropertyFixed(lp_boss, c_unitPropLifeMax, c_unitPropCurrent))) {
            libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
            libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, lv_timerCount);
            lv_timerCount -= 1;
            Wait(1.0, c_timeAI);
        }
        libCOMI_gf_ShowHideUnitProgressBar(lv_progressBarUnit, false);
        UnitRemove(lv_progressBarUnit);
        UnitClearInfoText(lp_boss);
        UnitSetState(lp_boss, c_unitStateTooltipable, false);
    }
}
void gf_SetupAIForBoss (unit lp_boss) {
    // Implementation
    UnitSetOwner(lp_boss, gv_pLAYER_05_PRIMALZERG, false);
    if (((UnitGetType(lp_boss) == "Devastator") || (UnitGetType(lp_boss) == "Skiver") || (UnitGetType(lp_boss) == "Mothmam") || (UnitGetType(lp_boss) == "Khailu"))) {
        UnitBehaviorAddPlayer(lp_boss, "MothmamWanderLeash", gv_pLAYER_05_PRIMALZERG, 1);
    }
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_boss, null, StringExternal("Param/Value/497B99F2"), null);
    UnitAbilityEnable(lp_boss, "attack", true);
}
trigger auto_gf_BossSpawnEggs_Trigger = null;
int auto_gf_BossSpawnEggs_lp_zerglingEggs;
int auto_gf_BossSpawnEggs_lp_hydraliskEggs;
int auto_gf_BossSpawnEggs_lp_ultraliskEggs;
region auto_gf_BossSpawnEggs_lp_region;
int auto_gf_BossSpawnEggs_lp_player;
unit auto_gf_BossSpawnEggs_lp_boss;
void gf_BossSpawnEggs (int lp_zerglingEggs, int lp_hydraliskEggs, int lp_ultraliskEggs, region lp_region, int lp_player, unit lp_boss) {
    auto_gf_BossSpawnEggs_lp_zerglingEggs = lp_zerglingEggs;
    auto_gf_BossSpawnEggs_lp_hydraliskEggs = lp_hydraliskEggs;
    auto_gf_BossSpawnEggs_lp_ultraliskEggs = lp_ultraliskEggs;
    auto_gf_BossSpawnEggs_lp_region = lp_region;
    auto_gf_BossSpawnEggs_lp_player = lp_player;
    auto_gf_BossSpawnEggs_lp_boss = lp_boss;
    if (auto_gf_BossSpawnEggs_Trigger == null) {
        auto_gf_BossSpawnEggs_Trigger = TriggerCreate("auto_gf_BossSpawnEggs_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossSpawnEggs_Trigger, false, false);
}
bool auto_gf_BossSpawnEggs_TriggerFunc (bool testConds, bool runActions) {
    int lp_zerglingEggs = auto_gf_BossSpawnEggs_lp_zerglingEggs;
    int lp_hydraliskEggs = auto_gf_BossSpawnEggs_lp_hydraliskEggs;
    int lp_ultraliskEggs = auto_gf_BossSpawnEggs_lp_ultraliskEggs;
    region lp_region = auto_gf_BossSpawnEggs_lp_region;
    int lp_player = auto_gf_BossSpawnEggs_lp_player;
    unit lp_boss = auto_gf_BossSpawnEggs_lp_boss;
    int auto7FA96295_n;
    int auto7FA96295_i;
    int auto987582FA_n;
    int auto987582FA_i;
    int autoD8178EE0_n;
    int autoD8178EE0_i;
    // Variable Declarations
    unitgroup lv_zerglingEggsUnitGroup;
    unitgroup lv_hydraliskEggsUnitGroup;
    unitgroup lv_ultraliskEggsUnitGroup;
    // Variable Initialization
    lv_zerglingEggsUnitGroup = UnitGroupEmpty();
    lv_hydraliskEggsUnitGroup = UnitGroupEmpty();
    lv_ultraliskEggsUnitGroup = UnitGroupEmpty();
    // Implementation
    auto7FA96295_n = lp_zerglingEggs;
    for (auto7FA96295_i = 1; auto7FA96295_i <= auto7FA96295_n; auto7FA96295_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "YagdraEggSmall", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(lp_region));
        UnitGroupAdd(lv_zerglingEggsUnitGroup, UnitLastCreated());
        if (((lp_boss == gv_bossMothmam) || (lp_boss == null))) {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(25.0, 25.0, 45.0, 50.0));
        }
        else {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(40.0, 40.0, 70.0, 90.0));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DutchTurretTimedLife", 15, 1);
    }
    auto987582FA_n = lp_hydraliskEggs;
    for (auto987582FA_i = 1; auto987582FA_i <= auto987582FA_n; auto987582FA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "YagdraEggSmall", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(lp_region));
        UnitGroupAdd(lv_hydraliskEggsUnitGroup, UnitLastCreated());
        if (((lp_boss == gv_bossMothmam) || (lp_boss == null))) {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(25.0, 25.0, 45.0, 50.0));
        }
        else {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(40.0, 40.0, 70.0, 90.0));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DutchTurretTimedLife", 15, 1);
    }
    autoD8178EE0_n = lp_ultraliskEggs;
    for (autoD8178EE0_i = 1; autoD8178EE0_i <= autoD8178EE0_n; autoD8178EE0_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "YagdraEggBig", c_unitCreateIgnorePlacement, lp_player, RegionRandomPoint(lp_region));
        UnitGroupAdd(lv_ultraliskEggsUnitGroup, UnitLastCreated());
        if (((lp_boss == gv_bossMothmam) || (lp_boss == null))) {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(150.0, 150.0, 150.0, 200.0));
        }
        else {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libNtve_gf_DifficultyValueFixed(250.0, 250.0, 250.0, 350.0));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DutchTurretTimedLife", 15, 1);
    }
    Wait(1.0, c_timeAI);
    UnitGroupLoopBegin(lv_zerglingEggsUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("YagdraEggTrain", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_hydraliskEggsUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("YagdraEggTrain", 1)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_ultraliskEggsUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("YagdraEggTrain", 2)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}
bool gf_PlayersHaveUnitsInRegion (region lp_region) {
    // Variable Declarations
    unitgroup lv_localUnitGroup;
    // Variable Initialization
    lv_localUnitGroup = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_localUnitGroup, UnitGroup(null, gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    UnitGroupAddUnitGroup(lv_localUnitGroup, UnitGroup(null, gv_pLAYER_02_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    if ((UnitGroupCount(lv_localUnitGroup, c_unitCountAlive) >= 1)) {
        return true;
    }
    else {
        return false;
    }
}
unitgroup gf_GetPlayersUnitsInRegion (region lp_region, region lp_negativeRegion) {
    // Variable Declarations
    unitgroup lv_localUnitGroup;
    // Variable Initialization
    lv_localUnitGroup = UnitGroupEmpty();
    // Implementation
    UnitGroupAddUnitGroup(lv_localUnitGroup, UnitGroup(null, gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    UnitGroupAddUnitGroup(lv_localUnitGroup, UnitGroup(null, gv_pLAYER_02_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    if ((lp_negativeRegion != null)) {
        UnitGroupRemoveUnitGroup(lv_localUnitGroup, UnitGroup(null, gv_pLAYER_01_USER, lp_negativeRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupRemoveUnitGroup(lv_localUnitGroup, UnitGroup(null, gv_pLAYER_02_USER, lp_negativeRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    return lv_localUnitGroup;
}
trigger auto_gf_BossDevastatorCreatePing_Trigger = null;
bool auto_gf_BossDevastatorCreatePing_lp_dormant;
void gf_BossDevastatorCreatePing (bool lp_dormant) {
    auto_gf_BossDevastatorCreatePing_lp_dormant = lp_dormant;
    if (auto_gf_BossDevastatorCreatePing_Trigger == null) {
        auto_gf_BossDevastatorCreatePing_Trigger = TriggerCreate("auto_gf_BossDevastatorCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossDevastatorCreatePing_Trigger, false, false);
}
bool auto_gf_BossDevastatorCreatePing_TriggerFunc (bool testConds, bool runActions) {
    bool lp_dormant = auto_gf_BossDevastatorCreatePing_lp_dormant;
    // Implementation
    PingDestroy(gv_bossDevastatorPing);
    if ((lp_dormant == true)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossDevastator), StringExternal("Param/Value/11B2CDF3"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossDevastator), StringExternal("Param/Value/9EC0CE38"));
    }
    gv_bossDevastatorPing = PingLastCreated();
    while ((UnitIsAlive(gv_bossDevastator) == true) && (gv_bossDevastator != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(gv_bossDevastatorPing, UnitGetPosition(gv_bossDevastator));
    }
    PingDestroy(gv_bossDevastatorPing);
    return true;
}
trigger auto_gf_BossDevastatorAI_Trigger = null;
unit auto_gf_BossDevastatorAI_lp_boss;
region auto_gf_BossDevastatorAI_lp_bossArea;
void gf_BossDevastatorAI (unit lp_boss, region lp_bossArea) {
    auto_gf_BossDevastatorAI_lp_boss = lp_boss;
    auto_gf_BossDevastatorAI_lp_bossArea = lp_bossArea;
    if (auto_gf_BossDevastatorAI_Trigger == null) {
        auto_gf_BossDevastatorAI_Trigger = TriggerCreate("auto_gf_BossDevastatorAI_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossDevastatorAI_Trigger, false, false);
}
bool auto_gf_BossDevastatorAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf_BossDevastatorAI_lp_boss;
    region lp_bossArea = auto_gf_BossDevastatorAI_lp_bossArea;
    // Implementation
    while ((UnitIsAlive(lp_boss) == true)) {
        gf_BossDevastatorCorrosiveBileLine(lp_boss, lp_bossArea);
        gf_BossDevastatorCorrosiveBileBombardment(lp_boss, lp_bossArea);
        gf_BossDevastatorBurrowShockwave(lp_boss, lp_bossArea);
        gf_BossDevastatorAttackEggs(lp_boss, lp_bossArea, RegionGetCenter(lp_bossArea));
    }
    return true;
}
void gf_BossDevastatorCorrosiveBileLine (unit lp_boss, region lp_bossArea) {
    int auto94ADFE75_n;
    int auto94ADFE75_i;
    // Variable Declarations
    fixed lv_localOffset;
    unit lv_localTargetUnit;
    point lv_localTargetPoint;
    unitgroup lv_localPlayersUnits;
    // Variable Initialization
    lv_localOffset = 1.0;
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        lv_localTargetUnit = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive);
        lv_localTargetPoint = UnitGetPosition(lv_localTargetUnit);
        auto94ADFE75_n = 5;
        for (auto94ADFE75_i = 1; auto94ADFE75_i <= auto94ADFE75_n; auto94ADFE75_i += 1) {
            lv_localOffset += 2.7;
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("DevastatorCorrosiveBile", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_boss), lv_localOffset, lv_localTargetPoint)), c_orderQueueReplace);
            Wait(0.1, c_timeAI);
        }
        Wait(4.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossDevastatorCorrosiveBileBombardment (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    unit lv_localTargetUnit;
    point lv_localTargetPoint;
    unitgroup lv_localPlayersUnits;
    // Variable Initialization
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        lv_localTargetUnit = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive);
        lv_localTargetPoint = UnitGetPosition(lv_localTargetUnit);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("DevastatorCorrosiveBile", 0), PointWithOffset(lv_localTargetPoint, 0.0, 0.0)), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("DevastatorCorrosiveBile", 0), PointWithOffset(lv_localTargetPoint, -2.7, 0.0)), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("DevastatorCorrosiveBile", 0), PointWithOffset(lv_localTargetPoint, 2.7, 0.0)), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("DevastatorCorrosiveBile", 0), PointWithOffset(lv_localTargetPoint, 0.0, 2.7)), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("DevastatorCorrosiveBile", 0), PointWithOffset(lv_localTargetPoint, 0.0, -2.7)), c_orderQueueReplace);
        Wait(4.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossDevastatorBurrowShockwave (unit lp_boss, region lp_bossArea) {
    fixed autoAA549C2C_at;
    playergroup auto4B058080_g;
    int auto4B058080_p;
    // Variable Declarations
    point lv_localUnburrowTargetPoint;
    actor lv_localTargetSplat;
    unitgroup lv_localPlayersUnits;
    int lv_indexPlayer;
    // Variable Initialization
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        lv_localUnburrowTargetPoint = UnitGetPosition(UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive));
        libNtve_gf_CreateModelAtPoint("DevastatorBurrowShockwaveTargetCursorSplat", lv_localUnburrowTargetPoint);
        lv_localTargetSplat = libNtve_gf_ActorLastCreated();
        ActorSend(lv_localTargetSplat, "SetScale 3.000000");
        ActorSend(lv_localTargetSplat, "SetTintColorBlendPair 255,255,0 255,255,0");
        Wait(3.0, c_timeAI);
        if ((UnitGetType(lp_boss) != "DevastatorBurrowed")) {
            UnitIssueOrder(lp_boss, Order(AbilityCommand("BurrowDevastatorDown", 0)), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("move", 0), lv_localUnburrowTargetPoint), c_orderQueueAddToEnd);
        autoAA549C2C_at = 0;
        while (!((libNtve_gf_UnitInRegion(lp_boss, RegionCircle(lv_localUnburrowTargetPoint, 1.0)) == true)) && autoAA549C2C_at <= 4.0) {
            Wait(1.0, c_timeAI);
            autoAA549C2C_at = autoAA549C2C_at + 1.0;
        }
        if ((UnitIsAlive(lp_boss) == true)) {
            auto4B058080_g = PlayerGroupAll(); 
            auto4B058080_p = 1;
            for ( ; auto4B058080_p <= PlayerGroupCount(auto4B058080_g) ; auto4B058080_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto4B058080_g, auto4B058080_p)) ) {
                lv_indexPlayer = PlayerGroupPlayer(auto4B058080_g, auto4B058080_p);
                if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_bossDevastator), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
                    CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.5);
                }
            }
            libNtve_gf_KillModel(lv_localTargetSplat);
            UnitIssueOrder(lp_boss, Order(AbilityCommand("BurrowDevastatorUp", 0)), c_orderQueueReplace);
            Wait(0.6, c_timeAI);
            UnitIssueOrder(lp_boss, Order(AbilityCommand("DevastatorShockwave", 0)), c_orderQueueReplace);
        }
        libNtve_gf_KillModel(lv_localTargetSplat);
        Wait(2.0, c_timeAI);
    }
    Wait(3.0, c_timeAI);
}
void gf_BossDevastatorAttackEggs (unit lp_boss, region lp_bossArea, point lp_bossLeashPoint) {
    playergroup autoDADBD4BB_g;
    int autoDADBD4BB_p;
    // Variable Declarations
    region lv_localLeashRegion;
    int lv_indexPlayer;
    // Variable Initialization
    // Implementation
    lv_localLeashRegion = RegionCircle(lp_bossLeashPoint, 8.0);
    if (((gf_PlayersHaveUnitsInRegion(lp_bossArea) == false) || (libNtve_gf_UnitInRegion(lp_boss, lv_localLeashRegion) == false))) {
        if ((UnitGetType(lp_boss) == "DevastatorBurrowed")) {
            autoDADBD4BB_g = PlayerGroupAll(); 
            autoDADBD4BB_p = 1;
            for ( ; autoDADBD4BB_p <= PlayerGroupCount(autoDADBD4BB_g) ; autoDADBD4BB_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoDADBD4BB_g, autoDADBD4BB_p)) ) {
                lv_indexPlayer = PlayerGroupPlayer(autoDADBD4BB_g, autoDADBD4BB_p);
                if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_bossDevastator), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
                    CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.5);
                }
            }
            UnitIssueOrder(lp_boss, Order(AbilityCommand("BurrowDevastatorUp", 0)), c_orderQueueReplace);
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("move", 0), lp_bossLeashPoint), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("move", 0), lp_bossLeashPoint), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
trigger auto_gf_BossSkiverCreatePing_Trigger = null;
bool auto_gf_BossSkiverCreatePing_lp_dormant;
void gf_BossSkiverCreatePing (bool lp_dormant) {
    auto_gf_BossSkiverCreatePing_lp_dormant = lp_dormant;
    if (auto_gf_BossSkiverCreatePing_Trigger == null) {
        auto_gf_BossSkiverCreatePing_Trigger = TriggerCreate("auto_gf_BossSkiverCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossSkiverCreatePing_Trigger, false, false);
}
bool auto_gf_BossSkiverCreatePing_TriggerFunc (bool testConds, bool runActions) {
    bool lp_dormant = auto_gf_BossSkiverCreatePing_lp_dormant;
    // Implementation
    PingDestroy(gv_bossSkiverPing);
    if ((lp_dormant == true)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossSkiver), StringExternal("Param/Value/4ED0358C"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossSkiver), StringExternal("Param/Value/AE4462C5"));
    }
    gv_bossSkiverPing = PingLastCreated();
    while ((UnitIsAlive(gv_bossSkiver) == true) && (gv_bossSkiver != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(gv_bossSkiverPing, UnitGetPosition(gv_bossSkiver));
    }
    PingDestroy(gv_bossSkiverPing);
    return true;
}
trigger auto_gf_BossSkiverAI_Trigger = null;
unit auto_gf_BossSkiverAI_lp_boss;
region auto_gf_BossSkiverAI_lp_bossArea;
void gf_BossSkiverAI (unit lp_boss, region lp_bossArea) {
    auto_gf_BossSkiverAI_lp_boss = lp_boss;
    auto_gf_BossSkiverAI_lp_bossArea = lp_bossArea;
    if (auto_gf_BossSkiverAI_Trigger == null) {
        auto_gf_BossSkiverAI_Trigger = TriggerCreate("auto_gf_BossSkiverAI_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossSkiverAI_Trigger, false, false);
}
bool auto_gf_BossSkiverAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf_BossSkiverAI_lp_boss;
    region lp_bossArea = auto_gf_BossSkiverAI_lp_bossArea;
    // Implementation
    while ((UnitIsAlive(lp_boss) == true)) {
        gf_BossSkiverSpinesCircle(lp_boss, lp_bossArea);
        gf_BossSkiverLeap(lp_boss, lp_bossArea);
        gf_BossSkiverSpinesAngle(lp_boss, lp_bossArea);
        gf_BossSkiverAttackEggs(lp_boss, lp_bossArea, RegionGetCenter(lp_bossArea));
    }
    return true;
}
void gf_BossSkiverSpinesCircle (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    unit lv_localTargetUnit;
    point lv_localTargetPoint;
    unitgroup lv_localPlayersUnits;
    fixed lv_localRotation;
    // Variable Initialization
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        if ((UnitGetType(lp_boss) != "ImpalerBurrowed2")) {
            UnitIssueOrder(lp_boss, Order(AbilityCommand("BurrowSkiver", 0)), c_orderQueueReplace);
        }
        while (!((UnitGetType(lp_boss) == "ImpalerBurrowed2"))) {
            Wait(1.0, c_timeAI);
        }
        Wait(2.0, c_timeAI);
        lv_localTargetUnit = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive);
        lv_localTargetPoint = UnitGetPosition(lv_localTargetUnit);
        lv_localRotation = AngleBetweenPoints(UnitGetPosition(lp_boss), lv_localTargetPoint);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 6.0, (lv_localRotation - 120.0))), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 3.0, (lv_localRotation - 105.0))), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), lv_localTargetPoint), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 3.0, (lv_localRotation + 105.0))), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 6.0, (lv_localRotation + 120.0))), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossSkiverLeap (unit lp_boss, region lp_bossArea) {
    playergroup auto71D01210_g;
    int auto71D01210_p;
    playergroup auto3CA84D31_g;
    int auto3CA84D31_p;
    // Variable Declarations
    int lv_indexPlayer;
    actor lv_localTargetSplat;
    unitgroup lv_localPlayersUnits;
    point lv_localLeapTargetPoint;
    // Variable Initialization
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        if ((UnitGetType(lp_boss) == "ImpalerBurrowed2")) {
            auto71D01210_g = PlayerGroupAll(); 
            auto71D01210_p = 1;
            for ( ; auto71D01210_p <= PlayerGroupCount(auto71D01210_g) ; auto71D01210_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto71D01210_g, auto71D01210_p)) ) {
                lv_indexPlayer = PlayerGroupPlayer(auto71D01210_g, auto71D01210_p);
                if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_bossSkiver), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
                    CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.5);
                }
            }
            UnitIssueOrder(lp_boss, Order(AbilityCommand("UnburrowSkiver", 0)), c_orderQueueReplace);
            while (!((UnitGetType(lp_boss) == "Skiver"))) {
                Wait(1.0, c_timeAI);
            }
        }
        lv_localLeapTargetPoint = UnitGetPosition(UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive));
        libNtve_gf_CreateModelAtPoint("DevastatorBurrowShockwaveTargetCursorSplat", lv_localLeapTargetPoint);
        lv_localTargetSplat = libNtve_gf_ActorLastCreated();
        ActorSend(lv_localTargetSplat, "SetScale 2.750000");
        Wait(4.0, c_timeAI);
        if ((UnitIsAlive(lp_boss) == true)) {
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("Leap", 0), lv_localLeapTargetPoint), c_orderQueueReplace);
            Wait(1.0, c_timeAI);
            auto3CA84D31_g = PlayerGroupAll(); 
            auto3CA84D31_p = 1;
            for ( ; auto3CA84D31_p <= PlayerGroupCount(auto3CA84D31_g) ; auto3CA84D31_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto3CA84D31_g, auto3CA84D31_p)) ) {
                lv_indexPlayer = PlayerGroupPlayer(auto3CA84D31_g, auto3CA84D31_p);
                if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_bossSkiver), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
                    CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.5);
                }
            }
        }
        libNtve_gf_KillModel(lv_localTargetSplat);
        Wait(1.0, c_timeAI);
    }
    Wait(3.0, c_timeAI);
}
void gf_BossSkiverSpinesAngle (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    unit lv_localTargetUnit;
    point lv_localTargetPoint;
    unitgroup lv_localPlayersUnits;
    fixed lv_localRotation;
    // Variable Initialization
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        if ((UnitGetType(lp_boss) != "ImpalerBurrowed2")) {
            UnitIssueOrder(lp_boss, Order(AbilityCommand("BurrowSkiver", 0)), c_orderQueueReplace);
        }
        while (!((UnitGetType(lp_boss) == "ImpalerBurrowed2"))) {
            Wait(1.0, c_timeAI);
        }
        Wait(2.0, c_timeAI);
        lv_localTargetUnit = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive);
        lv_localTargetPoint = UnitGetPosition(lv_localTargetUnit);
        lv_localRotation = AngleBetweenPoints(UnitGetPosition(lp_boss), lv_localTargetPoint);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, -1.5, 0.0)), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 1.5, (lv_localRotation - 30.0))), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 1.5, (lv_localRotation + 30.0))), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 4.5, (lv_localRotation - 30.0))), c_orderQueueReplace);
        Wait(0.1, c_timeAI);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("MutatedColonyAttack", 0), PointWithOffsetPolar(lv_localTargetPoint, 4.5, (lv_localRotation + 30.0))), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossSkiverAttackEggs (unit lp_boss, region lp_bossArea, point lp_bossLeashPoint) {
    playergroup auto11D7CCED_g;
    int auto11D7CCED_p;
    // Variable Declarations
    region lv_localLeashRegion;
    int lv_indexPlayer;
    // Variable Initialization
    // Implementation
    lv_localLeashRegion = RegionCircle(lp_bossLeashPoint, 8.0);
    if (((gf_PlayersHaveUnitsInRegion(lp_bossArea) == false) || (libNtve_gf_UnitInRegion(lp_boss, lv_localLeashRegion) == false))) {
        if ((UnitGetType(lp_boss) == "ImpalerBurrowed2")) {
            auto11D7CCED_g = PlayerGroupAll(); 
            auto11D7CCED_p = 1;
            for ( ; auto11D7CCED_p <= PlayerGroupCount(auto11D7CCED_g) ; auto11D7CCED_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto11D7CCED_g, auto11D7CCED_p)) ) {
                lv_indexPlayer = PlayerGroupPlayer(auto11D7CCED_g, auto11D7CCED_p);
                if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_bossSkiver), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
                    CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.5);
                }
            }
            UnitIssueOrder(lp_boss, Order(AbilityCommand("UnburrowSkiver", 0)), c_orderQueueReplace);
            while (!((UnitGetType(lp_boss) == "Skiver"))) {
                Wait(1.0, c_timeAI);
            }
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("move", 0), lp_bossLeashPoint), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("move", 0), lp_bossLeashPoint), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
trigger auto_gf_BossCarnozorCreatePing_Trigger = null;
bool auto_gf_BossCarnozorCreatePing_lp_dormant;
void gf_BossCarnozorCreatePing (bool lp_dormant) {
    auto_gf_BossCarnozorCreatePing_lp_dormant = lp_dormant;
    if (auto_gf_BossCarnozorCreatePing_Trigger == null) {
        auto_gf_BossCarnozorCreatePing_Trigger = TriggerCreate("auto_gf_BossCarnozorCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossCarnozorCreatePing_Trigger, false, false);
}
bool auto_gf_BossCarnozorCreatePing_TriggerFunc (bool testConds, bool runActions) {
    bool lp_dormant = auto_gf_BossCarnozorCreatePing_lp_dormant;
    // Implementation
    PingDestroy(gv_bossCarnozorPing);
    if ((lp_dormant == true)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossCarnozor), StringExternal("Param/Value/D135612E"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossCarnozor), StringExternal("Param/Value/76B7DB1A"));
    }
    gv_bossCarnozorPing = PingLastCreated();
    while ((UnitIsAlive(gv_bossCarnozor) == true) && (gv_bossCarnozor != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(gv_bossCarnozorPing, UnitGetPosition(gv_bossCarnozor));
    }
    PingDestroy(gv_bossCarnozorPing);
    return true;
}
trigger auto_gf_BossCarnozorAI_Trigger = null;
unit auto_gf_BossCarnozorAI_lp_boss;
region auto_gf_BossCarnozorAI_lp_bossAbilityArea;
void gf_BossCarnozorAI (unit lp_boss, region lp_bossAbilityArea) {
    auto_gf_BossCarnozorAI_lp_boss = lp_boss;
    auto_gf_BossCarnozorAI_lp_bossAbilityArea = lp_bossAbilityArea;
    if (auto_gf_BossCarnozorAI_Trigger == null) {
        auto_gf_BossCarnozorAI_Trigger = TriggerCreate("auto_gf_BossCarnozorAI_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossCarnozorAI_Trigger, false, false);
}
bool auto_gf_BossCarnozorAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf_BossCarnozorAI_lp_boss;
    region lp_bossAbilityArea = auto_gf_BossCarnozorAI_lp_bossAbilityArea;
    // Implementation
    while ((UnitIsAlive(lp_boss) == true)) {
        gf_BossCarnozorBomb(lp_boss, lp_bossAbilityArea);
        gf_BossCarnozorSporeRays(lp_boss, lp_bossAbilityArea);
        gf_BossCarnozorTower(lp_boss, lp_bossAbilityArea);
        gf_BossCarnozorAttackEggs(lp_boss, lp_bossAbilityArea);
    }
    return true;
}
void gf_BossCarnozorBomb (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    unit lv_localTargetUnit;
    point lv_localTargetPoint;
    unitgroup lv_localPlayersUnits;
    // Variable Initialization
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        lv_localTargetUnit = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive);
        lv_localTargetPoint = UnitGetPosition(lv_localTargetUnit);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("CarnozorBomb", 0), lv_localTargetPoint), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossCarnozorSporeRays (unit lp_boss, region lp_bossArea) {
    int autoED3F4DCE_n;
    int autoED3F4DCE_i;
    // Variable Declarations
    fixed lv_localDirection;
    // Variable Initialization
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        SoundPlayOnUnitForPlayer(SoundLink("PrimalLocustFlying_Birth", -1), c_maxPlayers, PlayerGroupAll(), lp_boss, 0.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_boss), c_animNameDefault, "Attack Burrow", 0, c_animTimeDefault);
        autoED3F4DCE_n = 8;
        for (autoED3F4DCE_i = 1; autoED3F4DCE_i <= autoED3F4DCE_n; autoED3F4DCE_i += 1) {
            UnitCreate(1, "SporeRay", 0, gv_pLAYER_05_PRIMALZERG, PointWithOffsetPolar(UnitGetPosition(lp_boss), 1.0, lv_localDirection), lv_localDirection);
            UnitSetHeight(UnitLastCreated(), 2.0, 0.0);
            UnitSetHeight(UnitLastCreated(), 5.5, 2.0);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SporeRayBeam", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_boss), 18.0, lv_localDirection)), c_orderQueueAddToEnd);
            UnitBehaviorAddPlayer(UnitLastCreated(), "LocustMPTimedLife", 15, 1);
            lv_localDirection += 45.0;
        }
        Wait(6.0, c_timeAI);
    }
    Wait(4.0, c_timeAI);
}
void gf_BossCarnozorTower (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    point lv_localTowerTarget;
    unit lv_carnozorCollisionDummy;
    // Variable Initialization
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        lv_localTowerTarget = gv_carnozorTowerPoint[RandomInt(1, 8)];
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanCollisionDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, lv_localTowerTarget);
        lv_carnozorCollisionDummy = UnitLastCreated();
        libNtve_gf_PauseUnit(lv_carnozorCollisionDummy, true);
        Wait(1.5, c_timeAI);
        UnitRemove(lv_carnozorCollisionDummy);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("CarnozorTowerBuild", 0), lv_localTowerTarget), c_orderQueueReplace);
        Wait(2.0, c_timeAI);
    }
    Wait(4.0, c_timeAI);
}
void gf_BossCarnozorAttackEggs (unit lp_boss, region lp_bossArea) {
    // Implementation
    if ((gf_PlayersHaveUnitsInRegion(lp_bossArea) == false)) {
        Wait(1.0, c_timeAI);
    }
    Wait(1.0, c_timeAI);
}
trigger auto_gf_BossMothmamCreatePing_Trigger = null;
bool auto_gf_BossMothmamCreatePing_lp_dormant;
void gf_BossMothmamCreatePing (bool lp_dormant) {
    auto_gf_BossMothmamCreatePing_lp_dormant = lp_dormant;
    if (auto_gf_BossMothmamCreatePing_Trigger == null) {
        auto_gf_BossMothmamCreatePing_Trigger = TriggerCreate("auto_gf_BossMothmamCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossMothmamCreatePing_Trigger, false, false);
}
bool auto_gf_BossMothmamCreatePing_TriggerFunc (bool testConds, bool runActions) {
    bool lp_dormant = auto_gf_BossMothmamCreatePing_lp_dormant;
    // Implementation
    PingDestroy(gv_bossMothmamPing);
    if ((lp_dormant == true)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossMothmam), StringExternal("Param/Value/D94F55E0"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossMothmam), StringExternal("Param/Value/00A12033"));
    }
    gv_bossMothmamPing = PingLastCreated();
    while ((UnitIsAlive(gv_bossMothmam) == true) && (gv_bossMothmam != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(gv_bossMothmamPing, UnitGetPosition(gv_bossMothmam));
    }
    PingDestroy(gv_bossMothmamPing);
    return true;
}
trigger auto_gf_BossMothmamAI_Trigger = null;
unit auto_gf_BossMothmamAI_lp_boss;
region auto_gf_BossMothmamAI_lp_bossArea;
void gf_BossMothmamAI (unit lp_boss, region lp_bossArea) {
    auto_gf_BossMothmamAI_lp_boss = lp_boss;
    auto_gf_BossMothmamAI_lp_bossArea = lp_bossArea;
    if (auto_gf_BossMothmamAI_Trigger == null) {
        auto_gf_BossMothmamAI_Trigger = TriggerCreate("auto_gf_BossMothmamAI_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossMothmamAI_Trigger, false, false);
}
bool auto_gf_BossMothmamAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf_BossMothmamAI_lp_boss;
    region lp_bossArea = auto_gf_BossMothmamAI_lp_bossArea;
    // Implementation
    while ((UnitIsAlive(lp_boss) == true)) {
        gf_BossMothmamAbduct(lp_boss);
        gf_BossMothmamSpawnEggs(lp_boss, lp_bossArea);
        gf_BossMothmamSpineVolley(lp_boss, lp_bossArea);
        gf_BossMothmamAttackEggs(lp_boss, lp_bossArea);
    }
    return true;
}
void gf_BossMothmamAbduct (unit lp_boss) {
    int autoDD5FCEA0_n;
    int autoDD5FCEA0_i;
    // Variable Declarations
    unit lv_localTargetUnit;
    region lv_localAbductArea;
    region lv_localAbducNegativeArea;
    unitgroup lv_localPlayersUnits;
    // Variable Initialization
    lv_localAbductArea = RegionCircle(UnitGetPosition(lp_boss), 16.0);
    lv_localAbducNegativeArea = RegionCircle(UnitGetPosition(lp_boss), 4.0);
    lv_localPlayersUnits = UnitGroupEmpty();
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lv_localAbductArea) == true)) {
        UnitWeaponRemove(lp_boss, "CollectEssence25");
        autoDD5FCEA0_n = 5;
        for (autoDD5FCEA0_i = 1; autoDD5FCEA0_i <= autoDD5FCEA0_n; autoDD5FCEA0_i += 1) {
            lv_localTargetUnit = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lv_localAbductArea, lv_localAbducNegativeArea), c_unitCountAlive);
            UnitIssueOrder(lp_boss, OrderTargetingUnit(AbilityCommand("Abduct", 0), lv_localTargetUnit), c_orderQueueAddToEnd);
        }
        Wait(4.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossMothmamSpawnEggs (unit lp_boss, region lp_bossArea) {
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_PRIMALZERG, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 5) && (UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        UnitWeaponRemove(lp_boss, "CollectEssence25");
        if ((RandomInt(1, 2) == 1)) {
            gf_BossSpawnEggs(5, 4, 0, RegionCircle(UnitGetPosition(lp_boss), 2.5), gv_pLAYER_05_PRIMALZERG, lp_boss);
        }
        else {
            gf_BossSpawnEggs(0, 3, 1, RegionCircle(UnitGetPosition(lp_boss), 2.0), gv_pLAYER_05_PRIMALZERG, lp_boss);
        }
        Wait(4.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossMothmamSpineVolley (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    unit lv_localTargetUnit;
    point lv_localTargetPoint;
    actor lv_localTargetSplat;
    // Variable Initialization
    // Implementation
    if ((gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        UnitWeaponRemove(lp_boss, "CollectEssence25");
        lv_localTargetUnit = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("attack", 2), UnitGetPosition(lv_localTargetUnit)), c_orderQueueReplace);
        lv_localTargetPoint = UnitGetPosition(lv_localTargetUnit);
        libNtve_gf_CreateModelAtPoint("KhailuBombRangeIndicator", lv_localTargetPoint);
        lv_localTargetSplat = libNtve_gf_ActorLastCreated();
        ActorSend(lv_localTargetSplat, "SetScale 0.750000");
        ActorSend(lv_localTargetSplat, "SetTintColor {0,255,0 1.500000}");
        Wait(6.0, c_timeAI);
        UnitIssueOrder(lp_boss, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_KillModel(lv_localTargetSplat);
        Wait(2.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossMothmamAttackEggs (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    region lv_localLeashRegion;
    // Variable Initialization
    // Implementation
    lv_localLeashRegion = RegionCircle(RegionGetCenter(lp_bossArea), 8.0);
    if ((gf_PlayersHaveUnitsInRegion(lp_bossArea) == false)) {
        UnitWeaponRemove(lp_boss, "CollectEssence25");
        UnitWeaponAdd(lp_boss, "CollectEssence25", null);
        if ((libNtve_gf_UnitInRegion(lp_boss, lv_localLeashRegion) == false)) {
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lp_bossArea)), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    Wait(1.0, c_timeAI);
}
trigger auto_gf_BossKhailuCreatePing_Trigger = null;
bool auto_gf_BossKhailuCreatePing_lp_dormant;
void gf_BossKhailuCreatePing (bool lp_dormant) {
    auto_gf_BossKhailuCreatePing_lp_dormant = lp_dormant;
    if (auto_gf_BossKhailuCreatePing_Trigger == null) {
        auto_gf_BossKhailuCreatePing_Trigger = TriggerCreate("auto_gf_BossKhailuCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossKhailuCreatePing_Trigger, false, false);
}
bool auto_gf_BossKhailuCreatePing_TriggerFunc (bool testConds, bool runActions) {
    bool lp_dormant = auto_gf_BossKhailuCreatePing_lp_dormant;
    // Implementation
    PingDestroy(gv_bossKhailuPing);
    if ((lp_dormant == true)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossKhailu), StringExternal("Param/Value/47CF74F4"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossKhailu), StringExternal("Param/Value/7F92A4C4"));
    }
    gv_bossKhailuPing = PingLastCreated();
    while ((UnitIsAlive(gv_bossKhailu) == true) && (gv_bossKhailu != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(gv_bossKhailuPing, UnitGetPosition(gv_bossKhailu));
    }
    PingDestroy(gv_bossKhailuPing);
    return true;
}
trigger auto_gf_BossKhailuAI_Trigger = null;
unit auto_gf_BossKhailuAI_lp_boss;
region auto_gf_BossKhailuAI_lp_bossArea;
void gf_BossKhailuAI (unit lp_boss, region lp_bossArea) {
    auto_gf_BossKhailuAI_lp_boss = lp_boss;
    auto_gf_BossKhailuAI_lp_bossArea = lp_bossArea;
    if (auto_gf_BossKhailuAI_Trigger == null) {
        auto_gf_BossKhailuAI_Trigger = TriggerCreate("auto_gf_BossKhailuAI_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossKhailuAI_Trigger, false, false);
}
bool auto_gf_BossKhailuAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf_BossKhailuAI_lp_boss;
    region lp_bossArea = auto_gf_BossKhailuAI_lp_bossArea;
    // Implementation
    while ((UnitIsAlive(lp_boss) == true)) {
        gf_BossKhailuBomb(lp_boss, lp_bossArea);
        gf_BossKhailuSpawnEggs(lp_boss, lp_bossArea);
        gf_BossKhailuMultipleClouds(lp_boss, lp_bossArea);
        gf_BossKhailuAttackEggs(lp_boss, lp_bossArea);
    }
    return true;
}
void gf_BossKhailuBomb (unit lp_boss, region lp_bossArea) {
    // Implementation
    if ((UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        UnitWeaponRemove(lp_boss, "CollectEssence25");
        UnitIssueOrder(lp_boss, Order(AbilityCommand("KhailuBomb", 0)), c_orderQueueReplace);
        Wait(6.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossKhailuSpawnEggs (unit lp_boss, region lp_bossArea) {
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_PRIMALZERG, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 5) && (UnitIsAlive(lp_boss) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        UnitWeaponRemove(lp_boss, "CollectEssence25");
        if ((RandomInt(1, 2) == 1)) {
            gf_BossSpawnEggs(5, 4, 0, RegionCircle(UnitGetPosition(lp_boss), 2.5), gv_pLAYER_05_PRIMALZERG, lp_boss);
        }
        else {
            gf_BossSpawnEggs(0, 3, 1, RegionCircle(UnitGetPosition(lp_boss), 2.0), gv_pLAYER_05_PRIMALZERG, lp_boss);
        }
        Wait(4.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossKhailuMultipleClouds (unit lp_boss, region lp_bossArea) {
    int autoE646D476_ae;
    int autoE646D476_ai;
    // Variable Declarations
    int lv_i;
    int lv_localShotsFired;
    unit lv_localTarget;
    point lv_localTargetPoint;
    // Variable Initialization
    // Implementation
    if ((UnitIsAlive(gv_bossKhailu) == true) && (gf_PlayersHaveUnitsInRegion(lp_bossArea) == true)) {
        UnitWeaponRemove(gv_bossUldra, "CollectEssence25");
        lv_localTarget = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(lp_bossArea, null), c_unitCountAlive);
        lv_localTargetPoint = UnitGetPosition(lv_localTarget);
        UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("KhailuCloud", 0), lv_localTargetPoint), c_orderQueueReplace);
        autoE646D476_ae = 19;
        autoE646D476_ai = 1;
        lv_i = 1;
        for ( ; ( (autoE646D476_ai >= 0 && lv_i <= autoE646D476_ae) || (autoE646D476_ai <= 0 && lv_i >= autoE646D476_ae) ) ; lv_i += autoE646D476_ai ) {
            if ((gf_PlayersHaveUnitsInRegion(RegionCircle(gv_khailuCloudPoints[lv_i], 3.0)) == true) && (RegionContainsPoint(RegionCircle(lv_localTargetPoint, 3.0), gv_khailuCloudPoints[lv_i]) == false) && (UnitIsAlive(gv_bossKhailu) == true) && (lv_localShotsFired < 2)) {
                Wait(3.0, c_timeAI);
                lv_localShotsFired += 1;
                UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("KhailuCloud", 0), gv_khailuCloudPoints[lv_i]), c_orderQueueReplace);
            }
        }
        Wait(2.0, c_timeAI);
    }
    Wait(2.0, c_timeAI);
}
void gf_BossKhailuAttackEggs (unit lp_boss, region lp_bossArea) {
    // Variable Declarations
    region lv_localLeashRegion;
    // Variable Initialization
    // Implementation
    lv_localLeashRegion = RegionCircle(RegionGetCenter(lp_bossArea), 8.0);
    if ((gf_PlayersHaveUnitsInRegion(lp_bossArea) == false)) {
        UnitWeaponRemove(lp_boss, "CollectEssence25");
        UnitWeaponAdd(lp_boss, "CollectEssence25", null);
        if ((libNtve_gf_UnitInRegion(lp_boss, lv_localLeashRegion) == false)) {
            UnitIssueOrder(lp_boss, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lp_bossArea)), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    Wait(1.0, c_timeAI);
}
trigger auto_gf_BossUldraCreatePing_Trigger = null;
bool auto_gf_BossUldraCreatePing_lp_dormant;
void gf_BossUldraCreatePing (bool lp_dormant) {
    auto_gf_BossUldraCreatePing_lp_dormant = lp_dormant;
    if (auto_gf_BossUldraCreatePing_Trigger == null) {
        auto_gf_BossUldraCreatePing_Trigger = TriggerCreate("auto_gf_BossUldraCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_BossUldraCreatePing_Trigger, false, false);
}
bool auto_gf_BossUldraCreatePing_TriggerFunc (bool testConds, bool runActions) {
    bool lp_dormant = auto_gf_BossUldraCreatePing_lp_dormant;
    // Implementation
    PingDestroy(gv_bossUldraPing);
    if ((lp_dormant == true)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossUldra), StringExternal("Param/Value/86C67B89"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossUldra), StringExternal("Param/Value/1BDCB158"));
    }
    gv_bossUldraPing = PingLastCreated();
    while ((UnitIsAlive(gv_bossUldra) == true) && (gv_bossUldra != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(gv_bossUldraPing, UnitGetPosition(gv_bossUldra));
    }
    PingDestroy(gv_bossUldraPing);
    return true;
}
trigger auto_gf_VoidCrystalPatrol_Trigger = null;
unit auto_gf_VoidCrystalPatrol_lp_voidCrystal;
unit auto_gf_VoidCrystalPatrol_lp_boss;
bool auto_gf_VoidCrystalPatrol_lp_clockwise;
void gf_VoidCrystalPatrol (unit lp_voidCrystal, unit lp_boss, bool lp_clockwise) {
    auto_gf_VoidCrystalPatrol_lp_voidCrystal = lp_voidCrystal;
    auto_gf_VoidCrystalPatrol_lp_boss = lp_boss;
    auto_gf_VoidCrystalPatrol_lp_clockwise = lp_clockwise;
    if (auto_gf_VoidCrystalPatrol_Trigger == null) {
        auto_gf_VoidCrystalPatrol_Trigger = TriggerCreate("auto_gf_VoidCrystalPatrol_TriggerFunc");
    }
    TriggerExecute(auto_gf_VoidCrystalPatrol_Trigger, false, false);
}
bool auto_gf_VoidCrystalPatrol_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidCrystal = auto_gf_VoidCrystalPatrol_lp_voidCrystal;
    unit lp_boss = auto_gf_VoidCrystalPatrol_lp_boss;
    bool lp_clockwise = auto_gf_VoidCrystalPatrol_lp_clockwise;
    int autoAF19B370_ae;
    int autoAF19B370_ai;
    fixed autoA67B7307_at;
    // Variable Declarations
    point lv_localOriginPoint;
    int lv_i;
    int lv_localOffset;
    fixed lv_localAngle;
    int lv_localAngleOffset;
    point[9] lv_localTargetPoint;
    int lv_start;
    int lv_end;
    int lv_incr;
    // Variable Initialization
    lv_localOriginPoint = UnitGetPosition(lp_voidCrystal);
    lv_localOffset = 10;
    lv_start = 1;
    lv_end = 8;
    lv_incr = 1;
    // Implementation
    UnitSetHeight(lp_voidCrystal, 3.75, 8.0);
    gf_VoidCrystalCreatePing(lp_voidCrystal);
    UnitSetState(lp_voidCrystal, c_unitStateTargetable, true);
    UnitSetState(lp_voidCrystal, c_unitStateSelectable, true);
    UnitSetState(lp_voidCrystal, c_unitStateStatusBar, true);
    UnitSetState(lp_voidCrystal, c_unitStateInvulnerable, false);
    UnitSetOwner(lp_voidCrystal, gv_pLAYER_05_PRIMALZERG, true);
    Wait(8.0, c_timeAI);
    UnitGroupLoopBegin(UnitGroup("VoidRiftUnselectable2", c_playerAny, RegionCircle(lv_localOriginPoint, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    lv_localAngle = AngleBetweenPoints(UnitGetPosition(lp_boss), UnitGetPosition(lp_voidCrystal));
    if ((lv_localAngle < 0.0)) {
        lv_localAngle += 360.0;
    }
    if ((lv_localAngle >= 0.0) && (lv_localAngle < 45.0)) {
        lv_localAngleOffset = 0;
    }
    if ((lv_localAngle >= 45.0) && (lv_localAngle < 90.0)) {
        lv_localAngleOffset = 1;
    }
    if ((lv_localAngle >= 90.0) && (lv_localAngle < 135.0)) {
        lv_localAngleOffset = 2;
    }
    if ((lv_localAngle >= 135.0) && (lv_localAngle < 180.0)) {
        lv_localAngleOffset = 3;
    }
    if ((lv_localAngle >= 180.0) && (lv_localAngle < 225.0)) {
        lv_localAngleOffset = 4;
    }
    if ((lv_localAngle >= 225.0) && (lv_localAngle < 270.0)) {
        lv_localAngleOffset = 5;
    }
    if ((lv_localAngle >= 270.0) && (lv_localAngle < 315.0)) {
        lv_localAngleOffset = 6;
    }
    if ((lv_localAngle >= 315.0) && (lv_localAngle < 360.0)) {
        lv_localAngleOffset = 7;
    }
    while ((UnitIsAlive(lp_voidCrystal) == true) && (UnitIsAlive(lp_boss) == true)) {
        if ((lp_clockwise == true)) {
            lv_start = 8;
            lv_end = 1;
            lv_incr = -1;
            lv_localOffset = 12;
        }
        autoAF19B370_ae = lv_end;
        autoAF19B370_ai = lv_incr;
        lv_i = lv_start;
        for ( ; ( (autoAF19B370_ai >= 0 && lv_i <= autoAF19B370_ae) || (autoAF19B370_ai <= 0 && lv_i >= autoAF19B370_ae) ) ; lv_i += autoAF19B370_ai ) {
            lv_localTargetPoint[1] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (45.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            lv_localTargetPoint[2] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (90.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            lv_localTargetPoint[3] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (135.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            lv_localTargetPoint[4] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (180.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            lv_localTargetPoint[5] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (225.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            lv_localTargetPoint[6] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (270.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            lv_localTargetPoint[7] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (315.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            lv_localTargetPoint[8] = PointWithOffsetPolar(UnitGetPosition(lp_boss), lv_localOffset, (0.0 + (IntToFixed(lv_localAngleOffset) * 45.0)));
            if ((UnitGetPropertyFixed(lp_boss, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0)) {
                UnitIssueOrder(lp_voidCrystal, OrderTargetingUnit(AbilityCommand("VoidCrystalHeal", 0), lp_boss), c_orderQueueReplace);
                Wait(0.5, c_timeAI);
            }
            UnitIssueOrder(lp_voidCrystal, OrderTargetingPoint(AbilityCommand("move", 0), lv_localTargetPoint[lv_i]), c_orderQueueReplace);
            if ((UnitGetPropertyFixed(lp_boss, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0)) {
                Wait(0.5, c_timeAI);
                UnitIssueOrder(lp_voidCrystal, OrderTargetingUnit(AbilityCommand("VoidCrystalHeal", 0), lp_boss), c_orderQueueReplace);
            }
            autoA67B7307_at = 0;
            while (!(((libNtve_gf_UnitInRegion(lp_voidCrystal, RegionCircle(lv_localTargetPoint[lv_i], 1.6)) == true) || (UnitIsAlive(lp_voidCrystal) == false) || (UnitIsAlive(lp_boss) == false))) && autoA67B7307_at <= 15.0) {
                Wait(1.0, c_timeAI);
                autoA67B7307_at = autoA67B7307_at + 1.0;
            }
        }
    }
    return true;
}
trigger auto_gf_VoidCrystalHeal_Trigger = null;
unit auto_gf_VoidCrystalHeal_lp_voidCrystal;
unit auto_gf_VoidCrystalHeal_lp_boss;
void gf_VoidCrystalHeal (unit lp_voidCrystal, unit lp_boss) {
    auto_gf_VoidCrystalHeal_lp_voidCrystal = lp_voidCrystal;
    auto_gf_VoidCrystalHeal_lp_boss = lp_boss;
    if (auto_gf_VoidCrystalHeal_Trigger == null) {
        auto_gf_VoidCrystalHeal_Trigger = TriggerCreate("auto_gf_VoidCrystalHeal_TriggerFunc");
    }
    TriggerExecute(auto_gf_VoidCrystalHeal_Trigger, false, false);
}
bool auto_gf_VoidCrystalHeal_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidCrystal = auto_gf_VoidCrystalHeal_lp_voidCrystal;
    unit lp_boss = auto_gf_VoidCrystalHeal_lp_boss;
    int auto94DB9059_ae;
    int auto94DB9059_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Implementation
    libNtve_gf_ChangeUnitDamage(lp_boss, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    auto94DB9059_ae = 100;
    auto94DB9059_ai = 1;
    lv_i = 1;
    for ( ; ( (auto94DB9059_ai >= 0 && lv_i <= auto94DB9059_ae) || (auto94DB9059_ai <= 0 && lv_i >= auto94DB9059_ae) ) ; lv_i += auto94DB9059_ai ) {
        UnitSetPropertyFixed(lp_boss, c_unitPropShieldsPercent, (UnitGetPropertyFixed(lp_boss, c_unitPropShieldsPercent, c_unitPropCurrent) + 1.0));
        Wait(0.04, c_timeAI);
    }
    libNtve_gf_ChangeUnitDamage(lp_boss, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    while ((UnitIsAlive(lp_voidCrystal) == true) && (UnitIsAlive(lp_boss) == true)) {
        if ((UnitGetPropertyFixed(lp_boss, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0)) {
            UnitIssueOrder(lp_voidCrystal, OrderTargetingUnit(AbilityCommand("VoidCrystalHeal", 0), lp_boss), c_orderQueueReplace);
        }
        Wait(0.2, c_timeAI);
    }
    return true;
}
trigger auto_gf_VoidCrystalActivate_Trigger = null;
unit auto_gf_VoidCrystalActivate_lp_boss;
fixed auto_gf_VoidCrystalActivate_lp_bossLifePercent;
int auto_gf_VoidCrystalActivate_lp_bossGroup;
void gf_VoidCrystalActivate (unit lp_boss, fixed lp_bossLifePercent, int lp_bossGroup) {
    auto_gf_VoidCrystalActivate_lp_boss = lp_boss;
    auto_gf_VoidCrystalActivate_lp_bossLifePercent = lp_bossLifePercent;
    auto_gf_VoidCrystalActivate_lp_bossGroup = lp_bossGroup;
    if (auto_gf_VoidCrystalActivate_Trigger == null) {
        auto_gf_VoidCrystalActivate_Trigger = TriggerCreate("auto_gf_VoidCrystalActivate_TriggerFunc");
    }
    TriggerExecute(auto_gf_VoidCrystalActivate_Trigger, false, false);
}
bool auto_gf_VoidCrystalActivate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf_VoidCrystalActivate_lp_boss;
    fixed lp_bossLifePercent = auto_gf_VoidCrystalActivate_lp_bossLifePercent;
    int lp_bossGroup = auto_gf_VoidCrystalActivate_lp_bossGroup;
    // Variable Declarations
    int lv_index;
    int lv_offset;
    unit lv_localCurrentVoidCrystal;
    // Variable Initialization
    lv_offset = 4;
    // Implementation
    while (!((UnitGetPropertyFixed(lp_boss, c_unitPropLifePercent, c_unitPropCurrent) <= lp_bossLifePercent))) {
        Wait(1.0, c_timeAI);
    }
    lv_localCurrentVoidCrystal = UnitGroupRandomUnit(UnitGroup("AmonCrystalEpilogue032", gv_pLAYER_07_BOSSESNEUTRAL, RegionCircle(UnitGetPosition(lp_boss), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    gf_VoidCrystalActivateAbility(lv_localCurrentVoidCrystal, lp_bossGroup);
    gf_VoidCrystalHeal(lv_localCurrentVoidCrystal, lp_boss);
    gf_VoidCrystalPatrol(lv_localCurrentVoidCrystal, lp_boss, false);
    if ((gv_voidCrystalsGroupWithTwin == lp_bossGroup)) {
        Wait(4.0, c_timeGame);
        lv_index += lv_offset;
        lv_localCurrentVoidCrystal = UnitGroupRandomUnit(UnitGroup("AmonCrystalEpilogue032", gv_pLAYER_07_BOSSESNEUTRAL, RegionCircle(UnitGetPosition(lp_boss), 32.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        gf_VoidCrystalActivateAbility(lv_localCurrentVoidCrystal, lp_bossGroup);
        gf_VoidCrystalHeal(lv_localCurrentVoidCrystal, lp_boss);
        gf_VoidCrystalPatrol(lv_localCurrentVoidCrystal, lp_boss, true);
    }
    return true;
}
trigger auto_gf_VoidCrystalCreatePing_Trigger = null;
unit auto_gf_VoidCrystalCreatePing_lp_voidCrystal;
void gf_VoidCrystalCreatePing (unit lp_voidCrystal) {
    auto_gf_VoidCrystalCreatePing_lp_voidCrystal = lp_voidCrystal;
    if (auto_gf_VoidCrystalCreatePing_Trigger == null) {
        auto_gf_VoidCrystalCreatePing_Trigger = TriggerCreate("auto_gf_VoidCrystalCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_VoidCrystalCreatePing_Trigger, false, false);
}
bool auto_gf_VoidCrystalCreatePing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidCrystal = auto_gf_VoidCrystalCreatePing_lp_voidCrystal;
    // Variable Declarations
    int lv_voidCrystalPing;
    // Variable Initialization
    lv_voidCrystalPing = c_invalidPingId;
    // Implementation
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingCircle", UnitGetPosition(lp_voidCrystal), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    lv_voidCrystalPing = PingLastCreated();
    PingSetTooltip(lv_voidCrystalPing, StringExternal("Param/Value/FB00B2D9"));
    PingSetScale(lv_voidCrystalPing, 0.3);
    PingSetRotation(lv_voidCrystalPing, 270.0);
    while ((UnitIsAlive(lp_voidCrystal) == true) && (lp_voidCrystal != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(lv_voidCrystalPing, UnitGetPosition(lp_voidCrystal));
    }
    PingDestroy(lv_voidCrystalPing);
    return true;
}
void gf_VoidCrystalUpdateBossInfo (unit lp_boss, unitgroup lp_voidCrystalGroup) {
    // Variable Declarations
    text lv_localName;
    // Variable Initialization
    lv_localName = StringExternal("Param/Value/5B95CAF6");
    // Implementation
    if ((UnitGetOwner(lp_boss) == gv_pLAYER_05_PRIMALZERG)) {
        if ((UnitGroupCount(UnitGroup("AmonCrystalEpilogue032", gv_pLAYER_05_PRIMALZERG, RegionCircle(UnitGetPosition(lp_boss), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
            libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_boss, null, lv_localName, StringExternal("Param/Value/742EE4CB"));
        }
        else {
            if ((UnitGroupCount(UnitGroup("AmonCrystalEpilogue032", gv_pLAYER_05_PRIMALZERG, RegionCircle(UnitGetPosition(lp_boss), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
                libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_boss, null, lv_localName, StringExternal("Param/Value/273C6483"));
            }
            else {
                libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_boss, null, lv_localName, null);
            }
        }
    }
}
trigger auto_gf_VoidCrystalActivateAbility_Trigger = null;
unit auto_gf_VoidCrystalActivateAbility_lp_voidCrystal;
int auto_gf_VoidCrystalActivateAbility_lp_groupID;
void gf_VoidCrystalActivateAbility (unit lp_voidCrystal, int lp_groupID) {
    auto_gf_VoidCrystalActivateAbility_lp_voidCrystal = lp_voidCrystal;
    auto_gf_VoidCrystalActivateAbility_lp_groupID = lp_groupID;
    if (auto_gf_VoidCrystalActivateAbility_Trigger == null) {
        auto_gf_VoidCrystalActivateAbility_Trigger = TriggerCreate("auto_gf_VoidCrystalActivateAbility_TriggerFunc");
    }
    TriggerExecute(auto_gf_VoidCrystalActivateAbility_Trigger, false, false);
}
bool auto_gf_VoidCrystalActivateAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidCrystal = auto_gf_VoidCrystalActivateAbility_lp_voidCrystal;
    int lp_groupID = auto_gf_VoidCrystalActivateAbility_lp_groupID;
    int auto4138F7FB_val;
    // Variable Declarations
    actor lv_localBriefingUnitSelect;
    // Variable Initialization
    // Implementation
    auto4138F7FB_val = gv_voidCrystalsGroupAbility[lp_groupID];
    if (auto4138F7FB_val == 1) {
        gf_VoidCrystalCloak(lp_voidCrystal, lp_groupID);
        TriggerExecute(gt_TransmissionCloakedEnemiesQ, true, false);
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_voidCrystal, StringExternal("Param/Value/70E5D096"), (UnitGetName(lp_voidCrystal) + StringExternal("Param/Value/B1520094")), StringExternal("Param/Value/DD265451"));
    }
    else if (auto4138F7FB_val == 2) {
        UnitBehaviorAddPlayer(lp_voidCrystal, "DamageAura", gv_pLAYER_07_BOSSESNEUTRAL, 1);
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_voidCrystal, StringExternal("Param/Value/6B0E5347"), (UnitGetName(lp_voidCrystal) + StringExternal("Param/Value/8E4BA4C8")), StringExternal("Param/Value/E8F24151"));
    }
    else if (auto4138F7FB_val == 3) {
        UnitBehaviorAddPlayer(lp_voidCrystal, "SlowAura", gv_pLAYER_07_BOSSESNEUTRAL, 1);
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_voidCrystal, StringExternal("Param/Value/97817B95"), (UnitGetName(lp_voidCrystal) + StringExternal("Param/Value/C2789678")), StringExternal("Param/Value/05A93F5A"));
    }
    else if (auto4138F7FB_val == 4) {
        UnitBehaviorAddPlayer(lp_voidCrystal, "MovesFaster", gv_pLAYER_07_BOSSESNEUTRAL, 1);
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_voidCrystal, StringExternal("Param/Value/5202335C"), (UnitGetName(lp_voidCrystal) + StringExternal("Param/Value/20F099AF")), StringExternal("Param/Value/311CC8E5"));
    }
    else if (auto4138F7FB_val == 5) {
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_voidCrystal, StringExternal("Param/Value/CC3F8B69"), (UnitGetName(lp_voidCrystal) + StringExternal("Param/Value/4D3C5B46")), StringExternal("Param/Value/D7A18ABB"));
    }
    else if (auto4138F7FB_val == 6) {
        gf_VoidCrystalSpawn(lp_voidCrystal, lp_groupID);
        UnitBehaviorAddPlayer(lp_voidCrystal, "SpawnsUnits", gv_pLAYER_07_BOSSESNEUTRAL, 1);
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(lp_voidCrystal, StringExternal("Param/Value/05E2AF64"), (UnitGetName(lp_voidCrystal) + StringExternal("Param/Value/D49874E6")), StringExternal("Param/Value/ED92A391"));
    }
    else {
    }
    UnitSetState(lp_voidCrystal, c_unitStateTooltipable, true);
    if ((lp_groupID == 1)) {
        libNtve_gf_AttachModelToUnit(lp_voidCrystal, "BriefingUnitSelectRed", "Ref_Center");
        lv_localBriefingUnitSelect = libNtve_gf_ActorLastCreated();
        while (!(((UnitGetPropertyFixed(lp_voidCrystal, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) || (libNtve_gf_UnitGroupIsDead(gv_bossGroup[1]) == true)))) {
            Wait(1.0, c_timeGame);
        }
        libNtve_gf_KillModel(lv_localBriefingUnitSelect);
    }
    return true;
}
trigger auto_gf_VoidCrystalCloak_Trigger = null;
unit auto_gf_VoidCrystalCloak_lp_voidCrystal;
int auto_gf_VoidCrystalCloak_lp_groupID;
void gf_VoidCrystalCloak (unit lp_voidCrystal, int lp_groupID) {
    auto_gf_VoidCrystalCloak_lp_voidCrystal = lp_voidCrystal;
    auto_gf_VoidCrystalCloak_lp_groupID = lp_groupID;
    if (auto_gf_VoidCrystalCloak_Trigger == null) {
        auto_gf_VoidCrystalCloak_Trigger = TriggerCreate("auto_gf_VoidCrystalCloak_TriggerFunc");
    }
    TriggerExecute(auto_gf_VoidCrystalCloak_Trigger, false, false);
}
bool auto_gf_VoidCrystalCloak_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidCrystal = auto_gf_VoidCrystalCloak_lp_voidCrystal;
    int lp_groupID = auto_gf_VoidCrystalCloak_lp_groupID;
    int autoE1B1690C_val;
    // Implementation
    Wait(8.0, c_timeAI);
    while ((UnitIsAlive(lp_voidCrystal) == true) && (libCOMI_gf_GameIsOver() == false)) {
        UnitBehaviorAddPlayer(lp_voidCrystal, "TemporarilyCloaked", gv_pLAYER_07_BOSSESNEUTRAL, 1);
        autoE1B1690C_val = lp_groupID;
        if (autoE1B1690C_val == 1) {
            Wait(8.0, c_timeAI);
        }
        else if (autoE1B1690C_val == 2) {
            Wait(12.0, c_timeAI);
        }
        else if (autoE1B1690C_val == 3) {
            Wait(16.0, c_timeAI);
        }
        else if (autoE1B1690C_val == 4) {
            Wait(20.0, c_timeAI);
        }
        else {
        }
        UnitBehaviorRemovePlayer(lp_voidCrystal, "TemporarilyCloaked", gv_pLAYER_07_BOSSESNEUTRAL, 1);
        Wait(10.0, c_timeAI);
    }
    return true;
}
trigger auto_gf_VoidCrystalSpawn_Trigger = null;
unit auto_gf_VoidCrystalSpawn_lp_voidCrystal;
int auto_gf_VoidCrystalSpawn_lp_groupID;
void gf_VoidCrystalSpawn (unit lp_voidCrystal, int lp_groupID) {
    auto_gf_VoidCrystalSpawn_lp_voidCrystal = lp_voidCrystal;
    auto_gf_VoidCrystalSpawn_lp_groupID = lp_groupID;
    if (auto_gf_VoidCrystalSpawn_Trigger == null) {
        auto_gf_VoidCrystalSpawn_Trigger = TriggerCreate("auto_gf_VoidCrystalSpawn_TriggerFunc");
    }
    TriggerExecute(auto_gf_VoidCrystalSpawn_Trigger, false, false);
}
bool auto_gf_VoidCrystalSpawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidCrystal = auto_gf_VoidCrystalSpawn_lp_voidCrystal;
    int lp_groupID = auto_gf_VoidCrystalSpawn_lp_groupID;
    int auto5D92AAA4_val;
    // Variable Declarations
    fixed lv_localTime;
    // Variable Initialization
    lv_localTime = 12.0;
    // Implementation
    auto5D92AAA4_val = lp_groupID;
    if (auto5D92AAA4_val == 1) {
        lv_localTime = 12.0;
    }
    else if (auto5D92AAA4_val == 2) {
        lv_localTime = 11.0;
    }
    else if (auto5D92AAA4_val == 3) {
        lv_localTime = 10.0;
    }
    else if (auto5D92AAA4_val == 4) {
        lv_localTime = 9.0;
    }
    else {
    }
    while ((UnitIsAlive(lp_voidCrystal) == true) && (libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_localTime, c_timeAI);
        if ((UnitIsAlive(lp_voidCrystal) == true) && (libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(UnitGroup("PrimalZergling", gv_pLAYER_05_PRIMALZERG, RegionCircle(UnitGetPosition(lp_voidCrystal), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_voidCrystal), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_voidCrystal), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_voidCrystal, Order(AbilityCommand("VoidRiftTrain", 5)), c_orderQueueReplace);
        }
        Wait(lv_localTime, c_timeAI);
        if ((UnitIsAlive(lp_voidCrystal) == true) && (libCOMI_gf_GameIsOver() == false) && (UnitGroupCount(UnitGroup("PrimalHydralisk", gv_pLAYER_05_PRIMALZERG, RegionCircle(UnitGetPosition(lp_voidCrystal), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_voidCrystal), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_voidCrystal), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_voidCrystal, Order(AbilityCommand("VoidRiftTrain", 6)), c_orderQueueReplace);
        }
    }
    return true;
}
trigger auto_gf_AshWormCreate_Trigger = null;
int auto_gf_AshWormCreate_lp_iD;
void gf_AshWormCreate (int lp_iD) {
    auto_gf_AshWormCreate_lp_iD = lp_iD;
    if (auto_gf_AshWormCreate_Trigger == null) {
        auto_gf_AshWormCreate_Trigger = TriggerCreate("auto_gf_AshWormCreate_TriggerFunc");
    }
    TriggerExecute(auto_gf_AshWormCreate_Trigger, false, false);
}
bool auto_gf_AshWormCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_iD = auto_gf_AshWormCreate_lp_iD;
    int auto51BBED80_val;
    // Variable Declarations
    point lv_localRandomPoint;
    // Variable Initialization
    // Implementation
    gf_TransmissionIncomingAshWormQ(lp_iD);
    lv_localRandomPoint = RegionRandomPoint(RegionCircle(gv_ashWormTunnelPoint[lp_iD][1], 2.0));
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_05_PRIMALZERG, c_unitAllianceEnemy, RegionCircle(lv_localRandomPoint, 4.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanCollisionDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, lv_localRandomPoint);
    gv_ashWormCollisionDummy[lp_iD] = UnitLastCreated();
    libNtve_gf_PauseUnit(gv_ashWormCollisionDummy[lp_iD], true);
    Wait(0.1, c_timeAI);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AshWorm", c_unitCreateConstruct | c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, lv_localRandomPoint);
    gv_ashWorm[lp_iD] = UnitLastCreated();
    auto51BBED80_val = lp_iD;
    if (auto51BBED80_val == 2) {
        gf_BossSpawnEggs(6, 2, 0, RegionCircle(lv_localRandomPoint, 2.5), gv_pLAYER_05_PRIMALZERG, null);
    }
    else if (auto51BBED80_val == 3) {
        gf_BossSpawnEggs(8, 4, 1, RegionCircle(lv_localRandomPoint, 2.5), gv_pLAYER_05_PRIMALZERG, null);
    }
    else if (auto51BBED80_val == 4) {
        gf_BossSpawnEggs(10, 6, 2, RegionCircle(lv_localRandomPoint, 2.5), gv_pLAYER_05_PRIMALZERG, null);
    }
    else {
    }
    gf_AshWormCreatePing(gv_ashWorm[lp_iD], lp_iD);
    gf_CreateProgressBarForAshWorm(lv_localRandomPoint, 15, 3.0, lp_iD);
    Wait(0.9, c_timeAI);
    UnitRemove(gv_ashWormCollisionDummy[lp_iD]);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_localRandomPoint, 4.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(lv_localRandomPoint, 4.0), 0.1, false);
    Wait(14.1, c_timeAI);
    gf_AshWormAI(lp_iD);
    return true;
}
trigger auto_gf_AshWormCreatePing_Trigger = null;
unit auto_gf_AshWormCreatePing_lp_ashWorm;
int auto_gf_AshWormCreatePing_lp_iD;
void gf_AshWormCreatePing (unit lp_ashWorm, int lp_iD) {
    auto_gf_AshWormCreatePing_lp_ashWorm = lp_ashWorm;
    auto_gf_AshWormCreatePing_lp_iD = lp_iD;
    if (auto_gf_AshWormCreatePing_Trigger == null) {
        auto_gf_AshWormCreatePing_Trigger = TriggerCreate("auto_gf_AshWormCreatePing_TriggerFunc");
    }
    TriggerExecute(auto_gf_AshWormCreatePing_Trigger, false, false);
}
bool auto_gf_AshWormCreatePing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ashWorm = auto_gf_AshWormCreatePing_lp_ashWorm;
    int lp_iD = auto_gf_AshWormCreatePing_lp_iD;
    // Implementation
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(lp_ashWorm), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_ashWormPing[lp_iD] = PingLastCreated();
    PingSetTooltip(gv_ashWormPing[lp_iD], StringExternal("Param/Value/AA33590B"));
    PingSetScale(gv_ashWormPing[lp_iD], 0.8);
    PingSetRotation(gv_ashWormPing[lp_iD], 270.0);
    Wait(15.0, c_timeGame);
    if ((UnitIsAlive(lp_ashWorm) == true) && (lp_ashWorm != null)) {
        PingSetTooltip(gv_ashWormPing[lp_iD], UnitTypeGetName(UnitGetType(lp_ashWorm)));
    }
    while ((UnitIsAlive(lp_ashWorm) == true) && (lp_ashWorm != null)) {
        Wait(0.1, c_timeGame);
        PingSetPosition(gv_ashWormPing[lp_iD], UnitGetPosition(lp_ashWorm));
    }
    PingDestroy(gv_ashWormPing[lp_iD]);
    return true;
}
trigger auto_gf_CreateProgressBarForAshWorm_Trigger = null;
point auto_gf_CreateProgressBarForAshWorm_lp_point;
int auto_gf_CreateProgressBarForAshWorm_lp_time;
fixed auto_gf_CreateProgressBarForAshWorm_lp_progressBarHeight;
int auto_gf_CreateProgressBarForAshWorm_lp_iD;
void gf_CreateProgressBarForAshWorm (point lp_point, int lp_time, fixed lp_progressBarHeight, int lp_iD) {
    auto_gf_CreateProgressBarForAshWorm_lp_point = lp_point;
    auto_gf_CreateProgressBarForAshWorm_lp_time = lp_time;
    auto_gf_CreateProgressBarForAshWorm_lp_progressBarHeight = lp_progressBarHeight;
    auto_gf_CreateProgressBarForAshWorm_lp_iD = lp_iD;
    if (auto_gf_CreateProgressBarForAshWorm_Trigger == null) {
        auto_gf_CreateProgressBarForAshWorm_Trigger = TriggerCreate("auto_gf_CreateProgressBarForAshWorm_TriggerFunc");
    }
    TriggerExecute(auto_gf_CreateProgressBarForAshWorm_Trigger, false, false);
}
bool auto_gf_CreateProgressBarForAshWorm_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_CreateProgressBarForAshWorm_lp_point;
    int lp_time = auto_gf_CreateProgressBarForAshWorm_lp_time;
    fixed lp_progressBarHeight = auto_gf_CreateProgressBarForAshWorm_lp_progressBarHeight;
    int lp_iD = auto_gf_CreateProgressBarForAshWorm_lp_iD;
    // Variable Declarations
    unit lv_progressBarUnit;
    int lv_timerMax;
    int lv_timerCount;
    // Variable Initialization
    lv_timerMax = lp_time;
    lv_timerCount = lp_time;
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false)) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_ashWorm[lp_iD]), 2.0), 0.1, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_ashWorm[lp_iD]), 2.0), 0.1, false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, lp_point);
        lv_progressBarUnit = UnitLastCreated();
        UnitSetHeight(lv_progressBarUnit, lp_progressBarHeight, 0.0);
        libCOMI_gf_DisplayUnitProgressBar(lv_progressBarUnit, StringExternal("Param/Value/94DE3148"), 0, lv_timerMax);
        libCOMI_gf_SetUnitProgressBarIsWideBar(lv_progressBarUnit, false);
        libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
        libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, lv_timerCount);
        UnitSetProgressStage(lv_progressBarUnit, 1, c_unitProgressStageResume);
        while ((libCOMI_gf_GameIsOver() == false) && (UnitIsAlive(lv_progressBarUnit) == true) && (lv_timerCount > 0) && (UnitIsAlive(gv_ashWorm[lp_iD]) == true)) {
            libCOMI_gf_SetUnitProgressBarProgress(lv_progressBarUnit, lv_timerCount);
            libCOMI_gf_SetUnitProgressBarProgress2(lv_progressBarUnit, lv_timerCount);
            lv_timerCount -= 1;
            Wait(1.0, c_timeAI);
        }
        libCOMI_gf_ShowHideUnitProgressBar(lv_progressBarUnit, false);
        UnitRemove(lv_progressBarUnit);
    }
    return true;
}
trigger auto_gf_AshWormAI_Trigger = null;
int auto_gf_AshWormAI_lp_iD;
void gf_AshWormAI (int lp_iD) {
    auto_gf_AshWormAI_lp_iD = lp_iD;
    if (auto_gf_AshWormAI_Trigger == null) {
        auto_gf_AshWormAI_Trigger = TriggerCreate("auto_gf_AshWormAI_TriggerFunc");
    }
    TriggerExecute(auto_gf_AshWormAI_Trigger, false, false);
}
bool auto_gf_AshWormAI_TriggerFunc (bool testConds, bool runActions) {
    int lp_iD = auto_gf_AshWormAI_lp_iD;
    // Implementation
    while ((UnitIsAlive(gv_ashWorm[lp_iD]) == true)) {
        gf_AshWormAttackEggs(lp_iD);
        gf_AshWormTunnel(lp_iD);
    }
    return true;
}
void gf_AshWormAttackEggs (int lp_iD) {
    // Implementation
    if ((UnitIsAlive(gv_ashWorm[lp_iD]) == true) && (gf_PlayersHaveUnitsInRegion(RegionCircle(UnitGetPosition(gv_ashWorm[lp_iD]), 12.0)) == true)) {
        UnitWeaponRemove(gv_ashWorm[lp_iD], "CollectEssence15");
    }
    else {
        UnitWeaponRemove(gv_ashWorm[lp_iD], "CollectEssence15");
        UnitWeaponAdd(gv_ashWorm[lp_iD], "CollectEssence15", null);
        Wait(3.0, c_timeAI);
    }
    Wait(4.0, c_timeAI);
}
void gf_AshWormTunnel (int lp_iD) {
    // Variable Declarations
    point lv_localRandomPoint;
    // Variable Initialization
    // Implementation
    if ((UnitIsAlive(gv_ashWorm[lp_iD]) == true) && ((gf_PlayersHaveUnitsInRegion(RegionCircle(UnitGetPosition(gv_ashWorm[lp_iD]), 12.0)) == true) || ((UnitGroupCount(UnitGroup("AscendantEggBig", gv_pLAYER_06_EGGS, RegionCircle(UnitGetPosition(gv_ashWorm[lp_iD]), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("AscendantEggSmall", gv_pLAYER_06_EGGS, RegionCircle(UnitGetPosition(gv_ashWorm[lp_iD]), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)))) {
        gv_ashWormTunnelPointTarget[lp_iD] += 1;
        if ((gv_ashWormTunnelPointTarget[lp_iD] == 5)) {
            gv_ashWormTunnelPointTarget[lp_iD] = 1;
        }
        lv_localRandomPoint = RegionRandomPoint(RegionCircle(gv_ashWormTunnelPoint[lp_iD][gv_ashWormTunnelPointTarget[lp_iD]], 2.0));
        UnitIssueOrder(gv_ashWorm[lp_iD], OrderTargetingPoint(AbilityCommand("AshWormBurrowMove", 0), lv_localRandomPoint), c_orderQueueReplace);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateTargetable, false);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateSelectable, false);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateStatusBar, false);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateInvulnerable, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanCollisionDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, UnitGetPosition(gv_ashWorm[lp_iD]));
        gv_ashWormCollisionDummy[lp_iD] = UnitLastCreated();
        libNtve_gf_PauseUnit(gv_ashWormCollisionDummy[lp_iD], true);
        Wait(1.0, c_timeAI);
        UnitRemove(gv_ashWormCollisionDummy[lp_iD]);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateTargetable, true);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateSelectable, true);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateStatusBar, true);
        UnitSetState(gv_ashWorm[lp_iD], c_unitStateInvulnerable, false);
        UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_05_PRIMALZERG, c_unitAllianceEnemy, RegionCircle(lv_localRandomPoint, 4.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        Wait(6.0, c_timeAI);
    }
    Wait(4.0, c_timeAI);
}
point gf_GetSpawnLocation (bool lp_expansionFirst) {
    // Variable Declarations
    int lv_mapSide;
    // Variable Initialization
    // Implementation
    if ((lp_expansionFirst == true)) {
        lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][1], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            if ((lv_mapSide == 2)) {
                gv_attackWaypoint = PointFromId(1342867250);
            }
            else {
                gv_attackWaypoint = PointFromId(1242848833);
            }
            return RegionGetCenter(gv_attackSpawn[lv_mapSide][1]);
        }
        else {
            gv_attackWaypoint = PointFromId(1630751124);
            return RegionGetCenter(RegionFromId(57));
        }
    }
    else {
        gv_attackWaypoint = PointFromId(1630751124);
        return RegionGetCenter(RegionFromId(57));
    }
}
void gf_SendAttackWave (int lp_resourceBucket, int lp_techBucket, bool lp_expansionsFirst) {
    // Implementation
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lp_resourceBucket, lp_techBucket, gf_GetSpawnLocation(lp_expansionsFirst), true);
    libCOMI_gf_AddAttackForceWaypoint(gv_attackWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
}
trigger auto_gf_TransmissionIncomingAshWormQ_Trigger = null;
int auto_gf_TransmissionIncomingAshWormQ_lp_iD;
void gf_TransmissionIncomingAshWormQ (int lp_iD) {
    auto_gf_TransmissionIncomingAshWormQ_lp_iD = lp_iD;
    if (auto_gf_TransmissionIncomingAshWormQ_Trigger == null) {
        auto_gf_TransmissionIncomingAshWormQ_Trigger = TriggerCreate("auto_gf_TransmissionIncomingAshWormQ_TriggerFunc");
    }
    TriggerExecute(auto_gf_TransmissionIncomingAshWormQ_Trigger, false, false);
}
bool auto_gf_TransmissionIncomingAshWormQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_iD = auto_gf_TransmissionIncomingAshWormQ_lp_iD;
    int autoA9A15321_val;
    // Variable Declarations
    point lv_localRandomPoint;
    // Variable Initialization
    // Implementation
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        autoA9A15321_val = lp_iD;
        if (autoA9A15321_val == 1) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("IncomingAshWorm1", -1), StringExternal("Param/Value/DDF09CA6"), StringExternal("Param/Value/6A5E572B"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else if (autoA9A15321_val == 2) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("IncomingAshWorm2", -1), StringExternal("Param/Value/8518210D"), StringExternal("Param/Value/04D463D0"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else if (autoA9A15321_val == 3) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("IncomingAshWorm3", -1), StringExternal("Param/Value/6B90059F"), StringExternal("Param/Value/E8A65E82"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else if (autoA9A15321_val == 4) {
            TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("IncomingAshWorm4", -1), StringExternal("Param/Value/65C5DAAC"), StringExternal("Param/Value/8CE769E3"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        }
        else {
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
   
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Init02Players, true, false);
        libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    playergroup autoE0EF2853_g;
    int autoE0EF2853_p;
    playergroup autoECA6D080_g;
    int autoECA6D080_p;
    playergroup autoB969537F_g;
    int autoB969537F_p;
    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
    PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
    autoE0EF2853_g = gv_enemyGroup; 
    autoE0EF2853_p = 1;
    for ( ; autoE0EF2853_p <= PlayerGroupCount(autoE0EF2853_g) ; autoE0EF2853_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p)) ) {
        lv_playerIterEnemy = PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p);
        PlayerSetState(lv_playerIterEnemy, c_playerStateMineralCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lv_playerIterEnemy, c_playerStateFoodIgnored, true);
    }
    PlayerSetAlliance(gv_pLAYER_03_ENEMY, c_allianceIdPower, gv_pLAYER_04_ENEMY, true);
    PlayerSetAlliance(gv_pLAYER_04_ENEMY, c_allianceIdPower, gv_pLAYER_03_ENEMY, true);
    libNtve_gf_SetPlayerGroupAlliance(libCOMI_gf_HumanPlayers(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    autoECA6D080_g = libCOMI_gf_HumanPlayers();
    autoECA6D080_p = 1;
    for ( ; autoECA6D080_p <= PlayerGroupCount(autoECA6D080_g) ; autoECA6D080_p += BoolToInt(lv_playerIterAlly == PlayerGroupPlayer(autoECA6D080_g, autoECA6D080_p)) ) {
        lv_playerIterAlly = PlayerGroupPlayer(autoECA6D080_g, autoECA6D080_p);
        libNtve_gf_SetAlliance(lv_playerIterAlly, gv_pLAYER_03_ENEMY, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_playerIterAlly, gv_pLAYER_04_ENEMY, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_playerIterAlly, gv_pLAYER_05_PRIMALZERG, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_playerIterAlly, gv_pLAYER_06_EGGS, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(lv_playerIterAlly, gv_pLAYER_07_BOSSESNEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    autoB969537F_g = gv_enemyGroup; 
    autoB969537F_p = 1;
    for ( ; autoB969537F_p <= PlayerGroupCount(autoB969537F_g) ; autoB969537F_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(autoB969537F_g, autoB969537F_p)) ) {
        lv_playerIterEnemy = PlayerGroupPlayer(autoB969537F_g, autoB969537F_p);
        libNtve_gf_SetAlliance(lv_playerIterEnemy, gv_pLAYER_05_PRIMALZERG, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(lv_playerIterEnemy, gv_pLAYER_06_EGGS, libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetAlliance(lv_playerIterEnemy, gv_pLAYER_07_BOSSESNEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_05_PRIMALZERG, gv_pLAYER_06_EGGS, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_05_PRIMALZERG, gv_pLAYER_07_BOSSESNEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_EGGS, gv_pLAYER_07_BOSSESNEUTRAL, libNtve_ge_AllianceSetting_Neutral);
    PlayerSetColorIndex(gv_pLAYER_03_ENEMY, libCOMI_gf_EnemyPlayerColor(), true);
    PlayerSetColorIndex(gv_pLAYER_04_ENEMY, libCOMI_gf_EnemyPlayerColor(), true);
    PlayerSetColorIndex(gv_pLAYER_05_PRIMALZERG, libCOMI_gf_EnemyPlayerColor(), true);
    PlayerSetColorIndex(gv_pLAYER_06_EGGS, libCOMI_gf_AllyPlayerColor(), true);
    PlayerSetColorIndex(gv_pLAYER_07_BOSSESNEUTRAL, libCOMI_gf_EnemyPlayerColor(), true);
    libCOMI_gf_SetAlliedCommandersstartingResources();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_Init04Technology, true, false);
    libCOMI_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    libCOMI_gf_PlayMapIntroZoom(true);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeBehaviorAllow(gv_pLAYER_03_ENEMY, "GhostCloak", false);
    TechTreeBehaviorAllow(gv_pLAYER_04_ENEMY, "GhostCloak", false);
    TechTreeBehaviorAllow(gv_pLAYER_03_ENEMY, "BansheeCloak", false);
    TechTreeBehaviorAllow(gv_pLAYER_04_ENEMY, "BansheeCloak", false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
    libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
    TriggerExecute(gt_BossesSetVariables, true, true);
    TriggerExecute(gt_AshWormSetVariables, true, true);
    TriggerExecute(gt_BonusSetVariables, true, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_07_BOSSESNEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "AmonCrystalEpilogue032") && (UnitGetType(UnitGroupLoopCurrent()) != "VoidRiftUnselectable2")) {
            UnitAbilityEnable(UnitGroupLoopCurrent(), "attack", false);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "MothmamWanderLeash", 1);
            libCOMI_gf_SetUnitInfoTextCampaignDetailed(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/3D17E00E"), StringExternal("Param/Value/6A9DC6DA"));
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateTooltipable, true);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Mothmam", gv_pLAYER_07_BOSSESNEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitWeaponRemove(UnitGroupLoopCurrent(), "CollectEssence15");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("RedstoneSalamander", gv_pLAYER_07_BOSSESNEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitWeaponRemove(UnitGroupLoopCurrent(), "CollectEssence15");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("AmonCrystalEpilogue032", gv_pLAYER_07_BOSSESNEUTRAL, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetHeight(UnitGroupLoopCurrent(), -4.0, 0.0);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRiftUnselectable2", c_unitCreateIgnorePlacement, gv_pLAYER_07_BOSSESNEUTRAL, UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    }
    UnitGroupLoopEnd();
    UnitSetTeamColorIndex(gv_bossDevastator, 2);
    ActorSend(libNtve_gf_MainActorofUnit(gv_bossDevastator), "SetTintColor 110,180,255");
    UnitStatusBarOverride(gv_bossDevastator, c_unitStatusGroupAll);
    UnitSetTeamColorIndex(gv_bossSkiver, 2);
    ActorSend(libNtve_gf_MainActorofUnit(gv_bossSkiver), "SetTintColor 110,180,255");
    UnitStatusBarOverride(gv_bossSkiver, c_unitStatusGroupAll);
    UnitSetPropertyFixed(UnitFromId(1487527660), c_unitPropLifeMax, 2400.0);
    UnitSetPropertyFixed(UnitFromId(1080353975), c_unitPropLifeMax, 2400.0);
    UnitSetPropertyFixed(UnitFromId(1717001912), c_unitPropLifeMax, 5000.0);
    UnitSetTeamColorIndex(gv_bossCarnozor, 2);
    UnitStatusBarOverride(gv_bossCarnozor, c_unitStatusGroupAll);
    UnitSetPropertyFixed(UnitFromId(754957886), c_unitPropLifeMax, 2800.0);
    UnitSetPropertyFixed(UnitFromId(1880024350), c_unitPropLifeMax, 2800.0);
    UnitSetPropertyFixed(UnitFromId(978156348), c_unitPropLifeMax, 2800.0);
    UnitSetPropertyFixed(gv_bossMothmam, c_unitPropLifeMax, 6000.0);
    UnitSetTeamColorIndex(gv_bossMothmam, 2);
    ActorSend(libNtve_gf_MainActorofUnit(gv_bossMothmam), "SetTintColor 110,180,255");
    UnitStatusBarOverride(gv_bossMothmam, c_unitStatusGroupAll);
    UnitSetPropertyFixed(gv_bossKhailu, c_unitPropLifeMax, 6000.0);
    UnitSetTeamColorIndex(gv_bossKhailu, 2);
    ActorSend(libNtve_gf_MainActorofUnit(gv_bossKhailu), "SetTintColor 110,180,255");
    UnitStatusBarOverride(gv_bossKhailu, c_unitStatusGroupAll);
    UnitSetPropertyFixed(UnitFromId(903235800), c_unitPropLifeMax, 3200.0);
    UnitSetPropertyFixed(UnitFromId(1117510393), c_unitPropLifeMax, 3200.0);
    UnitSetPropertyFixed(UnitFromId(977311690), c_unitPropLifeMax, 3200.0);
    UnitSetPropertyFixed(UnitFromId(820528082), c_unitPropLifeMax, 3200.0);
    UnitSetPropertyFixed(gv_bossUldra, c_unitPropLifeMax, 7000.0);
    UnitSetTeamColorIndex(gv_bossUldra, 2);
    UnitStatusBarOverride(gv_bossUldra, c_unitStatusGroupAll);
    TriggerExecute(gt_VoidCrystalsSetAbilities, true, true);
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(UnitFromId(2095320017), null, UnitGetName(UnitFromId(2095320017)), StringExternal("Param/Value/978793D8"));
    UnitGroupLoopBegin(UnitGroup("PrimalZergBiomass", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(UnitGroupLoopCurrent(), null, UnitGetName(UnitGroupLoopCurrent()), StringExternal("Param/Value/904B92AA"));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CollapsibleRockTowerDiagonal", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(UnitGroupLoopCurrent(), null, StringExternal("Param/Value/051B519D"), null);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    GameTimeOfDaySet("12:00:00");
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    string auto3DB54D3F_val;
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        auto3DB54D3F_val = GameAttributeGameValue("[bnet:local/0.0/356334]2");
        if (auto3DB54D3F_val == "0001") {
            PlayerSetDifficulty(PlayerGroupLoopCurrent(), 1);
        }
        else if (auto3DB54D3F_val == "0002") {
            PlayerSetDifficulty(PlayerGroupLoopCurrent(), 2);
        }
        else {
            PlayerSetDifficulty(PlayerGroupLoopCurrent(), 2);
        }
    }
    PlayerGroupLoopEnd();
    if ((PlayerDifficulty(gv_pLAYER_02_USER) == 4)) {
        UnitRemove(UnitFromId(733444175));
    }
    if ((PlayerDifficulty(gv_pLAYER_01_USER) == 4)) {
        UnitRemove(UnitFromId(86416483));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG AshWorm1
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGAshWorm1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_AshWormCreate(1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGAshWorm1_Init () {
    gt_DEBUGAshWorm1 = TriggerCreate("gt_DEBUGAshWorm1_Func");
    TriggerAddEventChatMessage(gt_DEBUGAshWorm1, c_playerAny, "ashworm1", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG AshWorm2
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGAshWorm2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_AshWormCreate(2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGAshWorm2_Init () {
    gt_DEBUGAshWorm2 = TriggerCreate("gt_DEBUGAshWorm2_Func");
    TriggerAddEventChatMessage(gt_DEBUGAshWorm2, c_playerAny, "ashworm2", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG AshWorm3
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGAshWorm3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_AshWormCreate(3);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGAshWorm3_Init () {
    gt_DEBUGAshWorm3 = TriggerCreate("gt_DEBUGAshWorm3_Func");
    TriggerAddEventChatMessage(gt_DEBUGAshWorm3, c_playerAny, "ashworm3", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG AshWorm4
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGAshWorm4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_AshWormCreate(4);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGAshWorm4_Init () {
    gt_DEBUGAshWorm4 = TriggerCreate("gt_DEBUGAshWorm4_Func");
    TriggerAddEventChatMessage(gt_DEBUGAshWorm4, c_playerAny, "ashworm4", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG VC
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGVC_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPropertyFixed(gv_bossDevastator, c_unitPropLifePercent, 55.0);
    UnitSetPropertyFixed(gv_bossSkiver, c_unitPropLifePercent, 55.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGVC_Init () {
    gt_DEBUGVC = TriggerCreate("gt_DEBUGVC_Func");
    TriggerAddEventChatMessage(gt_DEBUGVC, c_playerAny, "vc", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG KillPrimal
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGKillPrimal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_PRIMALZERG, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "RedstoneSalamander") && (UnitGetType(UnitGroupLoopCurrent()) != "RedstoneSalamanderBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "Devastator") && (UnitGetType(UnitGroupLoopCurrent()) != "DevastatorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "Carnozor") && (UnitGetType(UnitGroupLoopCurrent()) != "Mothmam") && (UnitGetType(UnitGroupLoopCurrent()) != "Khailu") && (UnitGetType(UnitGroupLoopCurrent()) != "AmonCrystalEpilogue032")) {
            UnitKill(UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGKillPrimal_Init () {
    gt_DEBUGKillPrimal = TriggerCreate("gt_DEBUGKillPrimal_Func");
    TriggerAddEventChatMessage(gt_DEBUGKillPrimal, c_playerAny, "killprimal", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Bonus
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGBonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TimerStart(gv_biomassExpireTimer1, 5.0, false, c_timeGame);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGBonus_Init () {
    gt_DEBUGBonus = TriggerCreate("gt_DEBUGBonus_Func");
    TriggerAddEventChatMessage(gt_DEBUGBonus, c_playerAny, "bonus", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Win
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGWin_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitKill(gv_bossDevastator);
    UnitKill(gv_bossSkiver);
    Wait(2.0, c_timeGame);
    UnitKill(gv_bossCarnozor);
    Wait(2.0, c_timeGame);
    UnitKill(gv_bossKhailu);
    UnitKill(gv_bossMothmam);
    Wait(2.0, c_timeGame);
    UnitKill(gv_bossUldra);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGWin_Init () {
    gt_DEBUGWin = TriggerCreate("gt_DEBUGWin_Func");
    TriggerAddEventChatMessage(gt_DEBUGWin, c_playerAny, "win", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Loss
//--------------------------------------------------------------------------------------------------
bool gt_DEBUGLoss_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup("AscendantEggBig", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("AscendantEggSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DEBUGLoss_Init () {
    gt_DEBUGLoss = TriggerCreate("gt_DEBUGLoss_Func");
    TriggerAddEventChatMessage(gt_DEBUGLoss, c_playerAny, "loss", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/068743D5"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/187E0E6E"), null, PlayerStartLocation(gv_pLAYER_02_USER));
    Wait(2.0, c_timeReal);
    PlayerModifyPropertyInt(gv_pLAYER_05_PRIMALZERG, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
    PlayerModifyPropertyInt(gv_pLAYER_05_PRIMALZERG, c_playerPropSuppliesMade, c_playerPropOperSetTo, 400);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(564280569)), 4.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(564280569)), 4.0), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(795530177)), 4.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(795530177)), 4.0), 0.1, false);
    TriggerExecute(gt_BonusStart, true, true);
    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_TransmissionIntroduction1Q, true, true);
    Wait(1.2, c_timeReal);
    TriggerExecute(gt_TransmissionIntroduction2Q, true, false);
    TriggerExecute(gt_ObjectiveSlayPackAscendantsCreate, true, true);
    if ((UnitGetOwner(gv_bossDevastator) == gv_pLAYER_07_BOSSESNEUTRAL)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossDevastator), StringExternal("Param/Value/4C649F3C"));
        gv_bossDevastatorPing = PingLastCreated();
        Wait(2.0, c_timeReal);
    }
    else {
        if ((UnitGetOwner(gv_bossSkiver) == gv_pLAYER_07_BOSSESNEUTRAL)) {
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossSkiver), StringExternal("Param/Value/E00A2479"));
            gv_bossSkiverPing = PingLastCreated();
            Wait(2.0, c_timeReal);
        }
    }
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_EGGS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_02_USER, gv_pLAYER_06_EGGS, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", PointFromId(718182808), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", PointFromId(928168852), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", PointFromId(614957790), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", PointFromId(54777990), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0);
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsCreate, true, true);
    Wait(15.0, c_timeReal);
    if (((UnitGetOwner(gv_bossDevastator) == gv_pLAYER_07_BOSSESNEUTRAL) || (UnitGetOwner(gv_bossSkiver) == gv_pLAYER_07_BOSSESNEUTRAL))) {
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_bossDevastator), 4.0), 0.1, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_bossDevastator), 4.0), 0.1, false);
        TriggerExecute(gt_TransmissionAscendantsLieDormantQ, true, true);
        Wait(2.0, c_timeReal);
    }
    TriggerExecute(gt_BossesStartAIs, true, false);
    TriggerExecute(gt_AshWormStartAIs, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Spawn Eggs TimedLife
//--------------------------------------------------------------------------------------------------
bool gt_BossSpawnEggsTimedLife_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "PrimalUltralisk") || (libNtve_gf_TriggeringProgressUnitType() == "PrimalHydralisk") || (libNtve_gf_TriggeringProgressUnitType() == "PrimalZergling")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAddPlayer(EventUnitProgressUnit(), "DutchTurretTimedLife", 15, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossSpawnEggsTimedLife_Init () {
    gt_BossSpawnEggsTimedLife = TriggerCreate("gt_BossSpawnEggsTimedLife_Func");
    TriggerAddEventUnitTrainProgress(gt_BossSpawnEggsTimedLife, null, c_unitProgressStageComplete);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bosses Set Variables
//--------------------------------------------------------------------------------------------------
bool gt_BossesSetVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((RandomInt(1, 2) == 1)) {
        UnitCreate(1, "Devastator", 0, gv_pLAYER_07_BOSSESNEUTRAL, PointFromId(607089848), 323.31);
        gv_bossDevastator = UnitLastCreated();
    }
    else {
        UnitCreate(1, "Skiver", 0, gv_pLAYER_07_BOSSESNEUTRAL, PointFromId(607089848), 323.31);
        gv_bossSkiver = UnitLastCreated();
    }
    gv_bossCarnozor = UnitFromId(1717001912);
    gv_carnozorTowerPoint[1] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), -5.5, 0.0);
    gv_carnozorTowerPoint[2] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), -5.0, 5.0);
    gv_carnozorTowerPoint[3] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), 0.0, 5.5);
    gv_carnozorTowerPoint[4] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), 5.5, 5.0);
    gv_carnozorTowerPoint[5] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), 5.5, 0.0);
    gv_carnozorTowerPoint[6] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), 5.0, -5.0);
    gv_carnozorTowerPoint[7] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), 0.0, -5.5);
    gv_carnozorTowerPoint[8] = PointWithOffset(UnitGetPosition(gv_bossCarnozor), -5.0, -5.0);
    if ((RandomInt(1, 2) == 1)) {
        UnitCreate(1, "Mothmam", 0, gv_pLAYER_07_BOSSESNEUTRAL, RegionGetCenter(RegionFromId(15)), 270.0);
        gv_bossMothmam = UnitLastCreated();
    }
    else {
        UnitCreate(1, "Khailu", 0, gv_pLAYER_07_BOSSESNEUTRAL, RegionGetCenter(RegionFromId(15)), 270.0);
        gv_bossKhailu = UnitLastCreated();
    }
    gv_khailuCloudPoints[1] = PointFromId(831770390);
    gv_khailuCloudPoints[2] = PointFromId(2071927089);
    gv_khailuCloudPoints[3] = PointFromId(1784154273);
    gv_khailuCloudPoints[4] = PointFromId(207682597);
    gv_khailuCloudPoints[5] = PointFromId(740330210);
    gv_khailuCloudPoints[6] = PointFromId(2038689883);
    gv_khailuCloudPoints[7] = PointFromId(1672268712);
    gv_khailuCloudPoints[8] = PointFromId(525795103);
    gv_khailuCloudPoints[9] = PointFromId(861717531);
    gv_khailuCloudPoints[10] = PointFromId(1824372761);
    gv_khailuCloudPoints[11] = PointFromId(1310867278);
    gv_khailuCloudPoints[12] = PointFromId(1759896380);
    gv_khailuCloudPoints[13] = PointFromId(1857044848);
    gv_khailuCloudPoints[14] = PointFromId(667101653);
    gv_khailuCloudPoints[15] = PointFromId(240587618);
    gv_khailuCloudPoints[16] = PointFromId(1284138681);
    gv_khailuCloudPoints[17] = PointFromId(524808117);
    gv_khailuCloudPoints[18] = PointFromId(975875320);
    gv_khailuCloudPoints[19] = PointFromId(195528041);
    gv_bossUldra = UnitFromId(2118782588);
    gv_uldraFireballPoints[1] = PointFromId(1440989266);
    gv_uldraFireballPoints[2] = PointFromId(1986625190);
    gv_uldraFireballPoints[3] = PointFromId(1099858799);
    gv_uldraFireballPoints[4] = PointFromId(1808366779);
    gv_uldraFireballPoints[5] = PointFromId(85195135);
    gv_uldraFireballPoints[6] = PointFromId(1861624691);
    gv_uldraFireballPoints[7] = PointFromId(1139247850);
    gv_uldraFireballPoints[8] = PointFromId(1560257456);
    gv_uldraFireballPoints[9] = PointFromId(1170109666);
    gv_uldraFireballPoints[10] = PointFromId(253340912);
    gv_uldraFireballPoints[11] = PointFromId(74808396);
    gv_uldraFireballPoints[12] = PointFromId(1837572926);
    gv_uldraFireballPoints[13] = PointFromId(159535684);
    gv_uldraFireballPoints[14] = PointFromId(1046139419);
    gv_uldraFireballPoints[15] = PointFromId(703225062);
    gv_uldraFireballPoints[16] = PointFromId(553727090);
    gv_uldraFireballPoints[17] = PointFromId(1915573701);
    gv_uldraFireballPoints[18] = PointFromId(2000309691);
    gv_uldraFireballPoints[19] = PointFromId(1141186009);
    gv_uldraFireballPoints[20] = PointFromId(105500922);
    gv_uldraFireballPoints[21] = PointFromId(1643510086);
    gv_uldraFireballPoints[22] = PointFromId(543454551);
    gv_uldraFireballPoints[23] = PointFromId(706587437);
    gv_uldraFireballPoints[24] = PointFromId(1156196539);
    gv_uldraFireballPoints[25] = PointFromId(1957052297);
    gv_uldraFireballPoints[26] = PointFromId(438002123);
    gv_uldraFireballPoints[27] = PointFromId(292272958);
    gv_uldraFireballPoints[28] = PointFromId(513347506);
    gv_uldraFireballPoints[29] = PointFromId(2061468911);
    gv_uldraFireballPoints[30] = PointFromId(949118935);
    gv_uldraFireballPoints[31] = PointFromId(1568560690);
    gv_uldraFireballPoints[32] = PointFromId(1087519708);
    gv_uldraFireballPoints[33] = PointFromId(1010185772);
    gv_uldraFireballPoints[34] = PointFromId(749749070);
    gv_uldraFireballPoints[35] = PointFromId(1428186408);
    gv_uldraFireballPoints[36] = PointFromId(1057050328);
    gv_uldraFireballPoints[37] = PointFromId(592119368);
    gv_uldraFireballPoints[38] = PointFromId(1785023482);
    gv_uldraFireballPoints[39] = PointFromId(1663939843);
    gv_uldraFireballPoints[40] = PointFromId(1309380543);
    gv_uldraFireballPoints[41] = PointFromId(1940039722);
    gv_uldraFireballPoints[42] = PointFromId(270059897);
    gv_uldraFireballPoints[43] = PointFromId(728307196);
    gv_uldraFireballPoints[44] = PointFromId(1051855920);
    gv_uldraFireballPoints[45] = PointFromId(1172046327);
    gv_uldraFireballPoints[46] = PointFromId(1585822789);
    gv_uldraFireballPoints[47] = PointFromId(2101406622);
    gv_uldraFireballPoints[48] = PointFromId(1185643945);
    gv_uldraFireballPoints[49] = PointFromId(297437631);
    gv_uldraFireballPoints[50] = PointFromId(197238413);
    gv_uldraFireballPoints[51] = PointFromId(2055147825);
    gv_uldraFireballPoints[52] = PointFromId(1528533749);
    gv_uldraFireballPoints[53] = PointFromId(1298426471);
    gv_uldraFireballPoints[54] = PointFromId(1154455832);
    gv_uldraFireballPoints[55] = PointFromId(1468175499);
    gv_uldraFireballPoints[56] = PointFromId(1877758352);
    gv_uldraFireballPoints[57] = PointFromId(1220813758);
    gv_uldraFireballPoints[58] = PointFromId(1699268145);
    gv_uldraFireballPoints[59] = PointFromId(1733250712);
    gv_uldraFireballPoints[60] = PointFromId(1416524860);
    gv_uldraFireballPoints[61] = PointFromId(616310219);
    gv_uldraFireballPoints[62] = PointFromId(2022972016);
    gv_uldraFireballPoints[63] = PointFromId(726291068);
    gv_uldraFireballPoints[64] = PointFromId(92564728);
    gv_uldraFireballPoints[65] = PointFromId(844673842);
    gv_uldraTunnelPoints[1] = PointFromId(1571146299);
    gv_uldraTunnelPoints[2] = PointFromId(122961573);
    gv_uldraTunnelPoints[3] = PointFromId(1877215933);
    gv_uldraTunnelPoints[4] = PointFromId(386597425);
    gv_uldraTunnelPoints[5] = PointFromId(1322672662);
    gv_uldraTunnelPoints[6] = PointFromId(602468140);
    gv_uldraTunnelPoints[7] = PointFromId(480602381);
    gv_uldraTunnelPoints[8] = PointFromId(789871222);
    gv_uldraTunnelPoints[9] = PointFromId(1498117524);
    UnitGroupAdd(gv_bossGroup[1], gv_bossDevastator);
    UnitGroupAdd(gv_bossGroup[1], gv_bossSkiver);
    UnitGroupAdd(gv_voidCrystalsGroup[1], UnitFromId(1251013673));
    UnitGroupAdd(gv_bossGroup[2], gv_bossCarnozor);
    UnitGroupAdd(gv_voidCrystalsGroup[2], UnitFromId(1080353975));
    UnitGroupAdd(gv_voidCrystalsGroup[2], UnitFromId(1487527660));
    UnitGroupAdd(gv_bossGroup[3], gv_bossMothmam);
    UnitGroupAdd(gv_bossGroup[3], gv_bossKhailu);
    UnitGroupAdd(gv_voidCrystalsGroup[3], UnitFromId(754957886));
    UnitGroupAdd(gv_voidCrystalsGroup[3], UnitFromId(1880024350));
    UnitGroupAdd(gv_voidCrystalsGroup[3], UnitFromId(978156348));
    UnitGroupAdd(gv_bossGroup[4], gv_bossUldra);
    UnitGroupAdd(gv_voidCrystalsGroup[4], UnitFromId(820528082));
    UnitGroupAdd(gv_voidCrystalsGroup[4], UnitFromId(903235800));
    UnitGroupAdd(gv_voidCrystalsGroup[4], UnitFromId(1117510393));
    UnitGroupAdd(gv_voidCrystalsGroup[4], UnitFromId(977311690));
    gv_bossGroupTimeToAwaken[1] = 300;
    gv_bossGroupTimeToAwaken[2] = 630;
    gv_bossGroupTimeToAwaken[3] = 930;
    gv_bossGroupTimeToAwaken[4] = 1200;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossesSetVariables_Init () {
    gt_BossesSetVariables = TriggerCreate("gt_BossesSetVariables_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bosses Update Wake Time
//--------------------------------------------------------------------------------------------------
bool gt_BossesUpdateWakeTime_Func (bool testConds, bool runActions) {
    int autoB36CE608_ae;
    int autoB36CE608_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    while ((gv_bossGroupTimeToAwaken[4] >= 1)) {
        Wait(1.0, c_timeAI);
        autoB36CE608_ae = 4;
        autoB36CE608_ai = 1;
        lv_i = 1;
        for ( ; ( (autoB36CE608_ai >= 0 && lv_i <= autoB36CE608_ae) || (autoB36CE608_ai <= 0 && lv_i >= autoB36CE608_ae) ) ; lv_i += autoB36CE608_ai ) {
            if ((gv_bossGroupTimeToAwaken[lv_i] >= 1)) {
                gv_bossGroupTimeToAwaken[lv_i] -= 1;
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossesUpdateWakeTime_Init () {
    gt_BossesUpdateWakeTime = TriggerCreate("gt_BossesUpdateWakeTime_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bosses Start AIs
//--------------------------------------------------------------------------------------------------
bool gt_BossesStartAIs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_BossesUpdateWakeTime, true, false);
    TriggerExecute(gt_BossDevastatorStartTimer, true, false);
    TriggerExecute(gt_BossSkiverStartTimer, true, false);
    while (!((gv_bossGroupTimeToAwaken[1] <= 80))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_TransmissionAwakensSoonDevastatorQ, true, false);
    TriggerExecute(gt_TransmissionAwakensSoonSkiverQ, true, false);
    while (!(((libNtve_gf_UnitGroupIsDead(gv_bossGroup[1]) == true) || (gv_bossGroupTimeToAwaken[2] <= 120)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_BossCarnozorStartTimer, true, false);
    TriggerExecute(gt_TransmissionAwakensSoonCarnozorQ, true, false);
    while (!((((libNtve_gf_UnitGroupIsDead(gv_bossGroup[1]) == true) && (libNtve_gf_UnitGroupIsDead(gv_bossGroup[2]) == true)) || (gv_bossGroupTimeToAwaken[3] <= 120)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_BossMothmamStartTimer, true, false);
    TriggerExecute(gt_BossKhailuStartTimer, true, false);
    TriggerExecute(gt_TransmissionAwakensSoonMothmamKhailuQ, true, false);
    while (!((((libNtve_gf_UnitGroupIsDead(gv_bossGroup[1]) == true) && (libNtve_gf_UnitGroupIsDead(gv_bossGroup[2]) == true) && (libNtve_gf_UnitGroupIsDead(gv_bossGroup[3]) == true)) || (gv_bossGroupTimeToAwaken[4] <= 120)))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_BossUldraStartTimer, true, false);
    TriggerExecute(gt_TransmissionAwakensSoonUldraQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossesStartAIs_Init () {
    gt_BossesStartAIs = TriggerCreate("gt_BossesStartAIs_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Dies
//--------------------------------------------------------------------------------------------------
bool gt_BossDies_Func (bool testConds, bool runActions) {
    playergroup auto8F486496_g;
    int auto8F486496_p;
    // Variable Declarations
    int lv_indexPlayer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_bossDevastator) || (EventUnit() == gv_bossSkiver) || (EventUnit() == gv_bossCarnozor) || (EventUnit() == gv_bossMothmam) || (EventUnit() == gv_bossKhailu) || (EventUnit() == gv_bossUldra)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_bossesDead += 1;
    gv_victoryCompletePan = UnitGetPosition(EventUnit());
    auto8F486496_g = PlayerGroupAll(); 
    auto8F486496_p = 1;
    for ( ; auto8F486496_p <= PlayerGroupCount(auto8F486496_g) ; auto8F486496_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto8F486496_g, auto8F486496_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto8F486496_g, auto8F486496_p);
        if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
            if ((EventUnit() == gv_bossUldra)) {
                CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 2.5);
            }
            else {
                CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.75);
            }
        }
    }
    TriggerExecute(gt_ObjectiveSlayPackAscendantsUpdate, true, false);
    if ((gv_bossesDead >= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDies_Init () {
    gt_BossDies = TriggerCreate("gt_BossDies_Func");
    TriggerAddEventUnitDied(gt_BossDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Egg Dies
//--------------------------------------------------------------------------------------------------
bool gt_EggDies_Func (bool testConds, bool runActions) {
    int autoC60D422F_val;
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "AscendantEggBig") || (UnitGetType(EventUnit()) == "AscendantEggSmall")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_lastDestroyedEggPoint = UnitGetPosition(EventUnit());
    gv_eggsDead += 1;
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsUpdate, true, false);
    autoC60D422F_val = gv_eggsDead;
    if (autoC60D422F_val == 5) {
        TriggerExecute(gt_TransmissionLostEggs05Q, true, false);
    }
    else if (autoC60D422F_val == 10) {
        TriggerExecute(gt_TransmissionLostEggs10Q, true, false);
    }
    else if (autoC60D422F_val == 15) {
        TriggerExecute(gt_TransmissionLostEggs15Q, true, false);
    }
    else {
    }
    if ((gv_eggsDead >= 20)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EggDies_Init () {
    gt_EggDies = TriggerCreate("gt_EggDies_Func");
    TriggerAddEventUnitDied(gt_EggDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Collect Essence Missiles
//--------------------------------------------------------------------------------------------------
bool gt_CollectEssenceMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "CollectEssenceWeaponMissile"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_missileUnit = EventUnit();
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lv_missileUnit), UnitGetFacing(lv_missileUnit), "KaiserWormScourgeMissile", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), lv_missileUnit);
    PingSetScale(PingLastCreated(), 0.075);
    while (!((UnitIsAlive(EventUnit()) == false))) {
        Wait(0.0625, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(PingLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CollectEssenceMissiles_Init () {
    gt_CollectEssenceMissiles = TriggerCreate("gt_CollectEssenceMissiles_Func");
    TriggerAddEventUnitRegion(gt_CollectEssenceMissiles, null, RegionPlayableMap(), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Devastator Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_BossDevastatorStartTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bossDevastator) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossDevastatorCreatePing(true);
    gf_CreateProgressBarForBoss(gv_bossDevastator, gv_bossGroupTimeToAwaken[1], 4.5);
    if ((TriggerIsEnabled(gt_BossDevastatorStartAI) == true)) {
        TriggerExecute(gt_BossDevastatorStartAI, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDevastatorStartTimer_Init () {
    gt_BossDevastatorStartTimer = TriggerCreate("gt_BossDevastatorStartTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Devastator Start AI
//--------------------------------------------------------------------------------------------------
bool gt_BossDevastatorStartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localBoss;
    // Variable Initialization
    lv_localBoss = gv_bossDevastator;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == lv_localBoss))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAwakenedDevastatorSkiverQ, true, false);
    gf_SetupAIForBoss(lv_localBoss);
    gf_BossDevastatorCreatePing(false);
    gf_BossDevastatorAI(lv_localBoss, RegionFromId(11));
    while (!((UnitGetPropertyFixed(gv_bossDevastator, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
        Wait(1.0, c_timeAI);
    }
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShieldsMax, 1000.0);
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShields, 0.0);
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(lv_localBoss, null, StringExternal("Param/Value/09E3264D"), StringExternal("Param/Value/B9DE451A"));
    gf_VoidCrystalActivate(lv_localBoss, 60.0, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossDevastatorStartAI_Init () {
    gt_BossDevastatorStartAI = TriggerCreate("gt_BossDevastatorStartAI_Func");
    TriggerAddEventUnitDamaged(gt_BossDevastatorStartAI, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Skiver Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_BossSkiverStartTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bossSkiver) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossSkiverCreatePing(true);
    gf_CreateProgressBarForBoss(gv_bossSkiver, gv_bossGroupTimeToAwaken[1], 3.5);
    if ((TriggerIsEnabled(gt_BossSkiverStartAI) == true)) {
        TriggerExecute(gt_BossSkiverStartAI, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossSkiverStartTimer_Init () {
    gt_BossSkiverStartTimer = TriggerCreate("gt_BossSkiverStartTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Skiver Start AI
//--------------------------------------------------------------------------------------------------
bool gt_BossSkiverStartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localBoss;
    // Variable Initialization
    lv_localBoss = gv_bossSkiver;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == lv_localBoss))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAwakenedDevastatorSkiverQ, true, false);
    gf_SetupAIForBoss(lv_localBoss);
    gf_BossSkiverCreatePing(false);
    gf_BossSkiverAI(lv_localBoss, RegionFromId(11));
    while (!((UnitGetPropertyFixed(gv_bossSkiver, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
        Wait(1.0, c_timeAI);
    }
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShieldsMax, 1000.0);
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShields, 0.0);
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(lv_localBoss, null, StringExternal("Param/Value/A5A34082"), StringExternal("Param/Value/48AC8CF3"));
    gf_VoidCrystalActivate(lv_localBoss, 60.0, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossSkiverStartAI_Init () {
    gt_BossSkiverStartAI = TriggerCreate("gt_BossSkiverStartAI_Func");
    TriggerAddEventUnitDamaged(gt_BossSkiverStartAI, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Carnozor Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_BossCarnozorStartTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bossCarnozor) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossCarnozorCreatePing(true);
    gf_CreateProgressBarForBoss(gv_bossCarnozor, gv_bossGroupTimeToAwaken[2], 5.3);
    if ((TriggerIsEnabled(gt_BossCarnozorStartAI) == true)) {
        TriggerExecute(gt_BossCarnozorStartAI, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossCarnozorStartTimer_Init () {
    gt_BossCarnozorStartTimer = TriggerCreate("gt_BossCarnozorStartTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Carnozor Start AI
//--------------------------------------------------------------------------------------------------
bool gt_BossCarnozorStartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localBoss;
    // Variable Initialization
    lv_localBoss = gv_bossCarnozor;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == lv_localBoss))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAwakenedCarnozorQ, true, false);
    gf_SetupAIForBoss(lv_localBoss);
    gf_BossCarnozorCreatePing(false);
    gf_BossCarnozorAI(lv_localBoss, RegionFromId(14));
    while (!((UnitGetPropertyFixed(gv_bossCarnozor, c_unitPropLifePercent, c_unitPropCurrent) <= 77.0))) {
        Wait(1.0, c_timeAI);
    }
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShieldsMax, 1200.0);
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShields, 0.0);
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(lv_localBoss, null, StringExternal("Param/Value/E7C85DBD"), StringExternal("Param/Value/E40C5561"));
    gf_VoidCrystalActivate(lv_localBoss, 77.0, 2);
    gf_VoidCrystalActivate(lv_localBoss, 43.0, 2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossCarnozorStartAI_Init () {
    gt_BossCarnozorStartAI = TriggerCreate("gt_BossCarnozorStartAI_Func");
    TriggerAddEventUnitDamaged(gt_BossCarnozorStartAI, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Carnozor SlimeTower TimedLife
//--------------------------------------------------------------------------------------------------
bool gt_BossCarnozorSlimeTowerTimedLife_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "CarnozorTower"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "DutchTurretTimedLife", 15, 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossCarnozorSlimeTowerTimedLife_Init () {
    gt_BossCarnozorSlimeTowerTimedLife = TriggerCreate("gt_BossCarnozorSlimeTowerTimedLife_Func");
    TriggerAddEventUnitCreated(gt_BossCarnozorSlimeTowerTimedLife, null, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Mothmam Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_BossMothmamStartTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bossMothmam) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossMothmamCreatePing(true);
    gf_CreateProgressBarForBoss(gv_bossMothmam, gv_bossGroupTimeToAwaken[3], 7.5);
    if ((TriggerIsEnabled(gt_BossMothmamStartAI) == true)) {
        TriggerExecute(gt_BossMothmamStartAI, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossMothmamStartTimer_Init () {
    gt_BossMothmamStartTimer = TriggerCreate("gt_BossMothmamStartTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Mothmam Start AI
//--------------------------------------------------------------------------------------------------
bool gt_BossMothmamStartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localBoss;
    // Variable Initialization
    lv_localBoss = gv_bossMothmam;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == lv_localBoss))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAwakenedMothmamKhailuQ, true, false);
    gf_SetupAIForBoss(lv_localBoss);
    gf_BossMothmamCreatePing(false);
    gf_BossMothmamAI(lv_localBoss, RegionFromId(15));
    while (!((UnitGetPropertyFixed(gv_bossMothmam, c_unitPropLifePercent, c_unitPropCurrent) <= 85.0))) {
        Wait(1.0, c_timeAI);
    }
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShieldsMax, 1400.0);
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShields, 0.0);
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(lv_localBoss, null, StringExternal("Param/Value/307C5D6F"), StringExternal("Param/Value/1913686F"));
    gf_VoidCrystalActivate(lv_localBoss, 85.0, 3);
    gf_VoidCrystalActivate(lv_localBoss, 60.0, 3);
    gf_VoidCrystalActivate(lv_localBoss, 35.0, 3);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossMothmamStartAI_Init () {
    gt_BossMothmamStartAI = TriggerCreate("gt_BossMothmamStartAI_Func");
    TriggerAddEventUnitDamaged(gt_BossMothmamStartAI, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Khailu Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_BossKhailuStartTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bossKhailu) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossKhailuCreatePing(true);
    gf_CreateProgressBarForBoss(gv_bossKhailu, gv_bossGroupTimeToAwaken[3], 7.5);
    if ((TriggerIsEnabled(gt_BossKhailuStartAI) == true)) {
        TriggerExecute(gt_BossKhailuStartAI, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossKhailuStartTimer_Init () {
    gt_BossKhailuStartTimer = TriggerCreate("gt_BossKhailuStartTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Khailu Start AI
//--------------------------------------------------------------------------------------------------
bool gt_BossKhailuStartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localBoss;
    // Variable Initialization
    lv_localBoss = gv_bossKhailu;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == lv_localBoss))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAwakenedMothmamKhailuQ, true, false);
    gf_SetupAIForBoss(lv_localBoss);
    gf_BossKhailuCreatePing(false);
    gf_BossKhailuAI(lv_localBoss, RegionFromId(15));
    while (!((UnitGetPropertyFixed(gv_bossKhailu, c_unitPropLifePercent, c_unitPropCurrent) <= 85.0))) {
        Wait(1.0, c_timeAI);
    }
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShieldsMax, 1400.0);
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShields, 0.0);
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(lv_localBoss, null, StringExternal("Param/Value/ACAB9E33"), StringExternal("Param/Value/C67D82D3"));
    gf_VoidCrystalActivate(lv_localBoss, 85.0, 3);
    gf_VoidCrystalActivate(lv_localBoss, 60.0, 3);
    gf_VoidCrystalActivate(lv_localBoss, 35.0, 3);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossKhailuStartAI_Init () {
    gt_BossKhailuStartAI = TriggerCreate("gt_BossKhailuStartAI_Func");
    TriggerAddEventUnitDamaged(gt_BossKhailuStartAI, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Uldra Start Timer
//--------------------------------------------------------------------------------------------------
bool gt_BossUldraStartTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_bossUldra) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossUldraCreatePing(true);
    gf_CreateProgressBarForBoss(gv_bossUldra, gv_bossGroupTimeToAwaken[4], 9.8);
    if ((TriggerIsEnabled(gt_BossUldraStartAI) == true)) {
        TriggerExecute(gt_BossUldraStartAI, false, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossUldraStartTimer_Init () {
    gt_BossUldraStartTimer = TriggerCreate("gt_BossUldraStartTimer_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Uldra Start AI
//--------------------------------------------------------------------------------------------------
bool gt_BossUldraStartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localBoss;
    // Variable Initialization
    lv_localBoss = gv_bossUldra;
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == lv_localBoss))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionAwakenedUldraQ, true, false);
    gf_SetupAIForBoss(lv_localBoss);
    gf_BossUldraCreatePing(false);
    TriggerExecute(gt_BossUldraAI, true, false);
    while (!((UnitGetPropertyFixed(gv_bossUldra, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0))) {
        Wait(1.0, c_timeAI);
    }
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShieldsMax, 1600.0);
    UnitSetPropertyFixed(lv_localBoss, c_unitPropShields, 0.0);
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(lv_localBoss, null, StringExternal("Param/Value/97857D3C"), StringExternal("Param/Value/E02A9FEB"));
    gf_VoidCrystalActivate(lv_localBoss, 90.0, 4);
    gf_VoidCrystalActivate(lv_localBoss, 70.0, 4);
    gf_VoidCrystalActivate(lv_localBoss, 50.0, 4);
    gf_VoidCrystalActivate(lv_localBoss, 30.0, 4);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossUldraStartAI_Init () {
    gt_BossUldraStartAI = TriggerCreate("gt_BossUldraStartAI_Func");
    TriggerAddEventUnitDamaged(gt_BossUldraStartAI, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Uldra AI
//--------------------------------------------------------------------------------------------------
bool gt_BossUldraAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    while ((UnitIsAlive(gv_bossUldra) == true)) {
        TriggerExecute(gt_BossUldraMultipleFireballs, true, true);
        TriggerExecute(gt_BossUldraTunnelEggs, true, true);
        TriggerExecute(gt_BossUldraFirebreath, true, true);
        TriggerExecute(gt_BossUldraAttackEggs, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossUldraAI_Init () {
    gt_BossUldraAI = TriggerCreate("gt_BossUldraAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Uldra Multiple Fireballs
//--------------------------------------------------------------------------------------------------
bool gt_BossUldraMultipleFireballs_Func (bool testConds, bool runActions) {
    fixed auto8250A606_at;
    int autoDF2246BB_ae;
    int autoDF2246BB_ai;
    // Variable Declarations
    int lv_i;
    unit lv_localTarget;
    int lv_localShotsFired;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitIsAlive(gv_bossUldra) == true) && (gf_PlayersHaveUnitsInRegion(RegionFromId(12)) == true)) {
        UnitWeaponRemove(gv_bossUldra, "CollectEssence30");
        lv_localTarget = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(RegionFromId(12), null), c_unitCountAlive);
        if ((lv_localTarget != null)) {
            RegionSetCenter(RegionFromId(10), UnitGetPosition(lv_localTarget));
            UnitIssueOrder(gv_bossUldra, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            if ((UnitIsAlive(gv_bossUldra) == true)) {
                UnitIssueOrder(gv_bossUldra, OrderTargetingPoint(AbilityCommand("RedstoneSalamanderFireball", 0), UnitGetPosition(lv_localTarget)), c_orderQueueReplace);
            }
            auto8250A606_at = 0;
            while (!(true) && auto8250A606_at <= 10.0) {
                Wait(0.1, c_timeAI);
                auto8250A606_at = auto8250A606_at + 0.1;
            }
            autoDF2246BB_ae = 65;
            autoDF2246BB_ai = 1;
            lv_i = 1;
            for ( ; ( (autoDF2246BB_ai >= 0 && lv_i <= autoDF2246BB_ae) || (autoDF2246BB_ai <= 0 && lv_i >= autoDF2246BB_ae) ) ; lv_i += autoDF2246BB_ai ) {
                if ((UnitGetFacing(gv_bossUldra) >= (AngleBetweenPoints(UnitGetPosition(gv_bossUldra), gv_uldraFireballPoints[lv_i]) - 70.0)) && (UnitGetFacing(gv_bossUldra) <= (AngleBetweenPoints(UnitGetPosition(gv_bossUldra), gv_uldraFireballPoints[lv_i]) + 70.0)) && (RegionContainsPoint(RegionFromId(10), gv_uldraFireballPoints[lv_i]) == true) && (UnitIsAlive(gv_bossUldra) == true) && (lv_localShotsFired < 8)) {
                    Wait(0.1, c_timeAI);
                    lv_localShotsFired += 1;
                    UnitIssueOrder(gv_bossUldra, OrderTargetingPoint(AbilityCommand("RedstoneSalamanderFireballHard", 0), gv_uldraFireballPoints[lv_i]), c_orderQueueReplace);
                }
            }
            if ((UnitIsAlive(gv_bossUldra) == true)) {
                UnitIssueOrder(gv_bossUldra, OrderTargetingPoint(AbilityCommand("RedstoneSalamanderFireball", 0), UnitGetPosition(lv_localTarget)), c_orderQueueReplace);
            }
            Wait(3.0, c_timeAI);
        }
    }
    Wait(1.0, c_timeAI);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossUldraMultipleFireballs_Init () {
    gt_BossUldraMultipleFireballs = TriggerCreate("gt_BossUldraMultipleFireballs_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Uldra TunnelEggs
//--------------------------------------------------------------------------------------------------
bool gt_BossUldraTunnelEggs_Func (bool testConds, bool runActions) {
    playergroup auto5F807376_g;
    int auto5F807376_p;
    // Variable Declarations
    point lv_eggSpawnPoint;
    int lv_indexPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitIsAlive(gv_bossUldra) == true) && (gf_PlayersHaveUnitsInRegion(RegionFromId(12)) == true)) {
        UnitWeaponRemove(gv_bossUldra, "CollectEssence30");
        gv_uldraTunnelPointTarget += 1;
        if ((gv_uldraTunnelPointTarget == 9)) {
            gv_uldraTunnelPointTarget = 1;
        }
        lv_eggSpawnPoint = UnitGetPosition(gv_bossUldra);
        UnitIssueOrder(gv_bossUldra, OrderTargetingPoint(AbilityCommand("RedstoneSalamanderTunnel", 0), gv_uldraTunnelPoints[gv_uldraTunnelPointTarget]), c_orderQueueReplace);
        UnitSetState(gv_bossUldra, c_unitStateTargetable, false);
        UnitSetState(gv_bossUldra, c_unitStateSelectable, false);
        UnitSetState(gv_bossUldra, c_unitStateStatusBar, false);
        UnitSetState(gv_bossUldra, c_unitStateInvulnerable, true);
        Wait(0.9, c_timeAI);
        UnitRemove(gv_uldraCollisionDummy);
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_05_PRIMALZERG, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_BossSpawnEggs(libHots_gf_DifficultyValueInt2(6, 6, 10), 6, 0, RegionCircle(lv_eggSpawnPoint, 2.5), gv_pLAYER_05_PRIMALZERG, gv_bossUldra);
            }
            else {
                gf_BossSpawnEggs(libHots_gf_DifficultyValueInt2(0, 0, 3), 6, 1, RegionCircle(lv_eggSpawnPoint, 2.0), gv_pLAYER_05_PRIMALZERG, gv_bossUldra);
            }
        }
        Wait(2.0, c_timeAI);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanCollisionDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, UnitGetPosition(gv_bossUldra));
        gv_uldraCollisionDummy = UnitLastCreated();
        libNtve_gf_PauseUnit(gv_uldraCollisionDummy, true);
        Wait(1.0, c_timeAI);
        auto5F807376_g = PlayerGroupAll(); 
        auto5F807376_p = 1;
        for ( ; auto5F807376_p <= PlayerGroupCount(auto5F807376_g) ; auto5F807376_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto5F807376_g, auto5F807376_p)) ) {
            lv_indexPlayer = PlayerGroupPlayer(auto5F807376_g, auto5F807376_p);
            if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_bossUldra), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
                CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.5);
            }
        }
        SoundPlayOnUnit(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), gv_bossUldra, 8.0, 100.0, 0.0);
        Wait(0.1, c_timeAI);
        UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_05_PRIMALZERG, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_bossUldra), 6.0), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitRemove(gv_uldraCollisionDummy);
        UnitSetState(gv_bossUldra, c_unitStateTargetable, true);
        UnitSetState(gv_bossUldra, c_unitStateSelectable, true);
        UnitSetState(gv_bossUldra, c_unitStateStatusBar, true);
        UnitSetState(gv_bossUldra, c_unitStateInvulnerable, false);
        Wait(1.0, c_timeAI);
    }
    Wait(1.0, c_timeAI);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossUldraTunnelEggs_Init () {
    gt_BossUldraTunnelEggs = TriggerCreate("gt_BossUldraTunnelEggs_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Uldra Firebreath
//--------------------------------------------------------------------------------------------------
bool gt_BossUldraFirebreath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localTarget;
    unit lv_localHelperUnit;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitIsAlive(gv_bossUldra) == true) && (gf_PlayersHaveUnitsInRegion(RegionFromId(12)) == true)) {
        UnitWeaponRemove(gv_bossUldra, "CollectEssence30");
        lv_localTarget = UnitGroupRandomUnit(gf_GetPlayersUnitsInRegion(RegionFromId(12), null), c_unitCountAlive);
        if ((lv_localTarget != null)) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZerusBossTarget", c_unitCreateIgnorePlacement, UnitGetOwner(gv_bossUldra), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_localTarget), 9.0, UnitGetPosition(gv_bossUldra)), UnitGetPosition(lv_localTarget));
            lv_localHelperUnit = UnitLastCreated();
            UnitIssueOrder(gv_bossUldra, OrderTargetingUnit(AbilityCommand("RedstoneSalamanderFirebreath", 0), lv_localHelperUnit), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
            UnitIssueOrder(lv_localHelperUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_localTarget)), c_orderQueueReplace);
            Wait(6.5, c_timeAI);
            UnitRemove(lv_localHelperUnit);
            Wait(1.0, c_timeAI);
        }
    }
    Wait(1.0, c_timeAI);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossUldraFirebreath_Init () {
    gt_BossUldraFirebreath = TriggerCreate("gt_BossUldraFirebreath_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Boss Uldra AttackEggs
//--------------------------------------------------------------------------------------------------
bool gt_BossUldraAttackEggs_Func (bool testConds, bool runActions) {
    playergroup autoCE331E5B_g;
    int autoCE331E5B_p;
    // Variable Declarations
    region lv_localLeashRegion;
    int lv_indexPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_localLeashRegion = RegionCircle(RegionGetCenter(RegionFromId(12)), 4.0);
    if ((gf_PlayersHaveUnitsInRegion(RegionFromId(12)) == false)) {
        if ((libNtve_gf_UnitInRegion(gv_bossUldra, lv_localLeashRegion) == false)) {
            gv_uldraTunnelPointTarget = 9;
            UnitIssueOrder(gv_bossUldra, OrderTargetingPoint(AbilityCommand("RedstoneSalamanderTunnel", 0), gv_uldraTunnelPoints[gv_uldraTunnelPointTarget]), c_orderQueueReplace);
            UnitSetState(gv_bossUldra, c_unitStateTargetable, false);
            UnitSetState(gv_bossUldra, c_unitStateSelectable, false);
            UnitSetState(gv_bossUldra, c_unitStateStatusBar, false);
            UnitSetState(gv_bossUldra, c_unitStateInvulnerable, true);
            Wait(0.9, c_timeAI);
            UnitRemove(gv_uldraCollisionDummy);
            Wait(2.0, c_timeAI);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SlivanCollisionDummy", c_unitCreateIgnorePlacement, gv_pLAYER_05_PRIMALZERG, UnitGetPosition(gv_bossUldra));
            gv_uldraCollisionDummy = UnitLastCreated();
            libNtve_gf_PauseUnit(gv_uldraCollisionDummy, true);
            Wait(1.0, c_timeAI);
            autoCE331E5B_g = PlayerGroupAll(); 
            autoCE331E5B_p = 1;
            for ( ; autoCE331E5B_p <= PlayerGroupCount(autoCE331E5B_g) ; autoCE331E5B_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(autoCE331E5B_g, autoCE331E5B_p)) ) {
                lv_indexPlayer = PlayerGroupPlayer(autoCE331E5B_g, autoCE331E5B_p);
                if ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_bossUldra), 10.0), CameraGetTarget(lv_indexPlayer)) == true)) {
                    CameraShake(lv_indexPlayer, "Medium", "Earthquake", 0.25, 0.5, 1.5);
                }
            }
            SoundPlayOnUnit(SoundLink("Aberration_Unburrow", -1), PlayerGroupAll(), gv_bossUldra, 8.0, 100.0, 0.0);
            Wait(0.1, c_timeAI);
            UnitRemove(gv_uldraCollisionDummy);
            UnitSetState(gv_bossUldra, c_unitStateTargetable, true);
            UnitSetState(gv_bossUldra, c_unitStateSelectable, true);
            UnitSetState(gv_bossUldra, c_unitStateStatusBar, true);
            UnitSetState(gv_bossUldra, c_unitStateInvulnerable, false);
            Wait(1.0, c_timeAI);
        }
        UnitWeaponRemove(gv_bossUldra, "CollectEssence30");
        UnitWeaponAdd(gv_bossUldra, "CollectEssence30", null);
        Wait(1.0, c_timeAI);
    }
    Wait(1.0, c_timeAI);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BossUldraAttackEggs_Init () {
    gt_BossUldraAttackEggs = TriggerCreate("gt_BossUldraAttackEggs_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystal Dies
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_voidCrystalsGroup[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_voidCrystalsGroup[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_voidCrystalsGroup[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_voidCrystalsGroup[4], EventUnit()) == true)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_voidCrystalsGroup[1]) == true)) {
        UnitSetPropertyFixed(gv_bossDevastator, c_unitPropShieldsMax, 0.0);
        UnitSetPropertyFixed(gv_bossSkiver, c_unitPropShieldsMax, 0.0);
        TriggerExecute(gt_TransmissionVoidCrystalsDestroyedDevastatorSkiverQ, true, false);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_voidCrystalsGroup[2]) == true)) {
        UnitSetPropertyFixed(gv_bossCarnozor, c_unitPropShieldsMax, 0.0);
        TriggerExecute(gt_TransmissionVoidCrystalsDestroyedCarnozorQ, true, false);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_voidCrystalsGroup[3]) == true)) {
        UnitSetPropertyFixed(gv_bossMothmam, c_unitPropShieldsMax, 0.0);
        UnitSetPropertyFixed(gv_bossKhailu, c_unitPropShieldsMax, 0.0);
        TriggerExecute(gt_TransmissionVoidCrystalsDestroyedMothmamKhailuQ, true, false);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_voidCrystalsGroup[4]) == true)) {
        UnitSetPropertyFixed(gv_bossUldra, c_unitPropShieldsMax, 0.0);
        TriggerExecute(gt_TransmissionVoidCrystalsDestroyedUldraQ, true, false);
    }
    gf_VoidCrystalUpdateBossInfo(gv_bossDevastator, gv_voidCrystalsGroup[1]);
    gf_VoidCrystalUpdateBossInfo(gv_bossSkiver, gv_voidCrystalsGroup[1]);
    gf_VoidCrystalUpdateBossInfo(gv_bossCarnozor, gv_voidCrystalsGroup[2]);
    gf_VoidCrystalUpdateBossInfo(gv_bossMothmam, gv_voidCrystalsGroup[3]);
    gf_VoidCrystalUpdateBossInfo(gv_bossKhailu, gv_voidCrystalsGroup[3]);
    gf_VoidCrystalUpdateBossInfo(gv_bossUldra, gv_voidCrystalsGroup[4]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalDies_Init () {
    gt_VoidCrystalDies = TriggerCreate("gt_VoidCrystalDies_Func");
    TriggerAddEventUnitDied(gt_VoidCrystalDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Void Crystals Set Abilities
//--------------------------------------------------------------------------------------------------
bool gt_VoidCrystalsSetAbilities_Func (bool testConds, bool runActions) {
    int autoE8F8D41D_ae;
    int autoE8F8D41D_ai;
    int auto84308E1C_val;
    // Variable Declarations
    int[7] lv_vCAbilityID;
    int lv_i;
    unitgroup lv_localTwinsGroup;
    int lv_localTwinsGroupInteger;
    // Variable Initialization
    lv_localTwinsGroup = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    lv_vCAbilityID[1] = RandomInt(2, 6);
    while (((lv_vCAbilityID[2] == 0) || (lv_vCAbilityID[2] == lv_vCAbilityID[1]))) {
        lv_vCAbilityID[2] = RandomInt(1, 6);
    }
    while (((lv_vCAbilityID[3] == 0) || (lv_vCAbilityID[3] == lv_vCAbilityID[1]) || (lv_vCAbilityID[3] == lv_vCAbilityID[2]))) {
        lv_vCAbilityID[3] = RandomInt(1, 6);
    }
    while (((lv_vCAbilityID[4] == 0) || (lv_vCAbilityID[4] == lv_vCAbilityID[1]) || (lv_vCAbilityID[4] == lv_vCAbilityID[2]) || (lv_vCAbilityID[4] == lv_vCAbilityID[3]))) {
        lv_vCAbilityID[4] = RandomInt(1, 6);
    }
    autoE8F8D41D_ae = 4;
    autoE8F8D41D_ai = 1;
    lv_i = 1;
    for ( ; ( (autoE8F8D41D_ai >= 0 && lv_i <= autoE8F8D41D_ae) || (autoE8F8D41D_ai <= 0 && lv_i >= autoE8F8D41D_ae) ) ; lv_i += autoE8F8D41D_ai ) {
        gv_voidCrystalsGroupAbility[lv_i] = lv_vCAbilityID[lv_i];
        UnitGroupLoopBegin(gv_voidCrystalsGroup[lv_i]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            auto84308E1C_val = lv_vCAbilityID[lv_i];
            if (auto84308E1C_val == 5) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmonCrystalEpilogue032", c_unitCreateIgnorePlacement, gv_pLAYER_07_BOSSESNEUTRAL, UnitGetPosition(UnitGroupLoopCurrent()));
                UnitGroupAdd(lv_localTwinsGroup, UnitLastCreated());
                lv_localTwinsGroupInteger = lv_i;
                gv_voidCrystalsGroupWithTwin = lv_i;
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    UnitGroupAddUnitGroup(gv_voidCrystalsGroup[lv_localTwinsGroupInteger], lv_localTwinsGroup);
    UnitGroupLoopBegin(lv_localTwinsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetHeight(UnitGroupLoopCurrent(), -4.0, 0.0);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidRiftUnselectable2", c_unitCreateIgnorePlacement, gv_pLAYER_07_BOSSESNEUTRAL, UnitGetPosition(UnitGroupLoopCurrent()));
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_voidCrystalsGroup[lv_localTwinsGroupInteger]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, (1000 + ((lv_localTwinsGroupInteger - 1) * 400)));
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VoidCrystalsSetAbilities_Init () {
    gt_VoidCrystalsSetAbilities = TriggerCreate("gt_VoidCrystalsSetAbilities_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AshWorm Set Variables
//--------------------------------------------------------------------------------------------------
bool gt_AshWormSetVariables_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_ashWormTunnelPoint[1][1] = PointFromId(1359582056);
    gv_ashWormTunnelPoint[1][2] = PointFromId(357838316);
    gv_ashWormTunnelPoint[1][3] = PointFromId(311636820);
    gv_ashWormTunnelPoint[1][4] = PointFromId(1450106264);
    gv_ashWormTunnelPointTarget[1] = 1;
    gv_ashWormTunnelPoint[2][1] = PointFromId(357838316);
    gv_ashWormTunnelPoint[2][2] = PointFromId(311636820);
    gv_ashWormTunnelPoint[2][3] = PointFromId(1450106264);
    gv_ashWormTunnelPoint[2][4] = PointFromId(1359582056);
    gv_ashWormTunnelPointTarget[2] = 2;
    gv_ashWormTunnelPoint[3][1] = PointFromId(311636820);
    gv_ashWormTunnelPoint[3][2] = PointFromId(1450106264);
    gv_ashWormTunnelPoint[3][3] = PointFromId(1359582056);
    gv_ashWormTunnelPoint[3][4] = PointFromId(357838316);
    gv_ashWormTunnelPointTarget[3] = 3;
    gv_ashWormTunnelPoint[4][1] = PointFromId(1450106264);
    gv_ashWormTunnelPoint[4][2] = PointFromId(1359582056);
    gv_ashWormTunnelPoint[4][3] = PointFromId(357838316);
    gv_ashWormTunnelPoint[4][4] = PointFromId(311636820);
    gv_ashWormTunnelPointTarget[4] = 4;
    gv_ashWormTimeToAwaken[1] = 420;
    gv_ashWormTimeToAwaken[2] = 660;
    gv_ashWormTimeToAwaken[3] = 900;
    gv_ashWormTimeToAwaken[4] = 1140;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AshWormSetVariables_Init () {
    gt_AshWormSetVariables = TriggerCreate("gt_AshWormSetVariables_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AshWorm Start AIs
//--------------------------------------------------------------------------------------------------
bool gt_AshWormStartAIs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_AshWormUpdateWakeTime, true, false);
    while (!((gv_ashWormTimeToAwaken[1] <= 0))) {
        Wait(1.0, c_timeAI);
    }
    gf_AshWormCreate(1);
    while (!((gv_ashWormTimeToAwaken[2] <= 0))) {
        Wait(1.0, c_timeAI);
    }
    gf_AshWormCreate(2);
    while (!((gv_ashWormTimeToAwaken[3] <= 0))) {
        Wait(1.0, c_timeAI);
    }
    gf_AshWormCreate(3);
    while (!((gv_ashWormTimeToAwaken[4] <= 0))) {
        Wait(1.0, c_timeAI);
    }
    gf_AshWormCreate(4);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AshWormStartAIs_Init () {
    gt_AshWormStartAIs = TriggerCreate("gt_AshWormStartAIs_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AshWorm Update Wake Time
//--------------------------------------------------------------------------------------------------
bool gt_AshWormUpdateWakeTime_Func (bool testConds, bool runActions) {
    int autoFEC67479_ae;
    int autoFEC67479_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    while ((gv_ashWormTimeToAwaken[4] >= 1)) {
        Wait(1.0, c_timeAI);
        autoFEC67479_ae = 4;
        autoFEC67479_ai = 1;
        lv_i = 1;
        for ( ; ( (autoFEC67479_ai >= 0 && lv_i <= autoFEC67479_ae) || (autoFEC67479_ai <= 0 && lv_i >= autoFEC67479_ae) ) ; lv_i += autoFEC67479_ai ) {
            if ((gv_ashWormTimeToAwaken[lv_i] >= 1)) {
                gv_ashWormTimeToAwaken[lv_i] -= 1;
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AshWormUpdateWakeTime_Init () {
    gt_AshWormUpdateWakeTime = TriggerCreate("gt_AshWormUpdateWakeTime_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AshWorm Dies
//--------------------------------------------------------------------------------------------------
bool gt_AshWormDies_Func (bool testConds, bool runActions) {
    int auto15F9C434_ae;
    int auto15F9C434_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_ashWorm[1]) || (EventUnit() == gv_ashWorm[2]) || (EventUnit() == gv_ashWorm[3]) || (EventUnit() == gv_ashWorm[4])))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto15F9C434_ae = 4;
    auto15F9C434_ai = 1;
    lv_i = 1;
    for ( ; ( (auto15F9C434_ai >= 0 && lv_i <= auto15F9C434_ae) || (auto15F9C434_ai <= 0 && lv_i >= auto15F9C434_ae) ) ; lv_i += auto15F9C434_ai ) {
        if ((EventUnit() == gv_ashWorm[lv_i])) {
            PingDestroy(gv_ashWormPing[lv_i]);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AshWormDies_Init () {
    gt_AshWormDies = TriggerCreate("gt_AshWormDies_Func");
    TriggerAddEventUnitDied(gt_AshWormDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(2.0, c_timeAI);
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    TriggerExecute(gt_SetupSpawnLocations, true, true);
    Wait(252.0, c_timeAI);
    gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, false);
    Wait(300.0, c_timeAI);
    gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, false);
    Wait(240.0, c_timeAI);
    gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, true);
    Wait(180.0, c_timeAI);
    gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, false);
    Wait(180.0, c_timeAI);
    gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, false);
    Wait(180.0, c_timeAI);
    gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, true);
    while ((ObjectiveGetState(gv_objectiveSlayPackAscendants) == c_objectiveStateActive)) {
        Wait(150.0, c_timeAI);
        gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, false);
        Wait(150.0, c_timeAI);
        gf_SendAttackWave(libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Spawn Locations
//--------------------------------------------------------------------------------------------------
bool gt_SetupSpawnLocations_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_attackSpawn[gv_pLAYER_01_USER][1] = RegionFromId(5);
    gv_attackSpawn[gv_pLAYER_01_USER][2] = RegionFromId(57);
    gv_attackSpawn[gv_pLAYER_02_USER][1] = RegionFromId(6);
    gv_attackSpawn[gv_pLAYER_02_USER][2] = RegionFromId(57);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupSpawnLocations_Init () {
    gt_SetupSpawnLocations = TriggerCreate("gt_SetupSpawnLocations_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Set Variables
//--------------------------------------------------------------------------------------------------
bool gt_BonusSetVariables_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_biomass1CavePoint[1] = PointFromId(1307114274);
    gv_biomass1CavePoint[2] = PointFromId(988708080);
    gv_biomass1CavePoint[3] = PointFromId(2049026816);
    gv_biomass1RockTower[1] = UnitFromId(1703348837);
    gv_biomass1RockTower[2] = UnitFromId(1093121662);
    gv_biomass1RockTower[3] = UnitFromId(1509604715);
    UnitGroupAddUnitGroup(gv_biomassPrimalZergGroup1, UnitGroup(null, gv_pLAYER_05_PRIMALZERG, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupLoopBegin(gv_biomassPrimalZergGroup1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetCustomValue(UnitGroupLoopCurrent(), gv_customValuePosX, PointGetX(UnitGetPosition(UnitGroupLoopCurrent())));
        UnitSetCustomValue(UnitGroupLoopCurrent(), gv_customValuePosY, PointGetY(UnitGetPosition(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusSetVariables_Init () {
    gt_BonusSetVariables = TriggerCreate("gt_BonusSetVariables_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Start
//--------------------------------------------------------------------------------------------------
bool gt_BonusStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TimerStart(gv_startBonusObjective1, 618.0, false, c_timeAI);
    TriggerEnable(gt_Biomass1Init, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusStart_Init () {
    gt_BonusStart = TriggerCreate("gt_BonusStart_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 Init
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1Init_Func (bool testConds, bool runActions) {
    int auto8EA11A4A_ae;
    int auto8EA11A4A_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!(((TimerGetRemaining(gv_startBonusObjective1) <= 0.0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    auto8EA11A4A_ae = 3;
    auto8EA11A4A_ai = 1;
    lv_i = 1;
    for ( ; ( (auto8EA11A4A_ai >= 0 && lv_i <= auto8EA11A4A_ae) || (auto8EA11A4A_ai <= 0 && lv_i >= auto8EA11A4A_ae) ) ; lv_i += auto8EA11A4A_ai ) {
        libNtve_gf_AttachModelToUnit(gv_biomass1RockTower[lv_i], "BriefingUnitSelectLargeRed", "Ref_Head");
        gv_rockTowerBriefingUnitSelect[1][lv_i] = libNtve_gf_ActorLastCreated();
    }
    TimerStart(gv_biomassExpireTimer1, 300.0, false, c_timeGame);
    TimerPause(gv_biomassExpireTimer1, true);
    TriggerExecute(gt_ObjectiveCollectBiomass1Create, true, false);
    TriggerExecute(gt_TransmissionBonusStartQ, true, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(538540373)), StringExternal("Param/Value/ACB159BF"));
    gv_biomassPing1 = PingLastCreated();
    TriggerExecute(gt_Biomass1TimerUpdate, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1Init_Init () {
    gt_Biomass1Init = TriggerCreate("gt_Biomass1Init_Func");
    TriggerEnable(gt_Biomass1Init, false);
    TriggerAddEventTimePeriodic(gt_Biomass1Init, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 TimerUpdate
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1TimerUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(2.0, c_timeReal);
    TimerPause(gv_biomassExpireTimer1, false);
    TriggerEnable(gt_TransmissionBonusFirstWarningQ, true);
    while ((TimerGetRemaining(gv_biomassExpireTimer1) > 0.0)) {
        TriggerExecute(gt_ObjectiveCollectBiomass1Update, true, false);
        Wait(1.0, c_timeGame);
        TriggerExecute(gt_Biomass1ProgressCheck, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1TimerUpdate_Init () {
    gt_Biomass1TimerUpdate = TriggerCreate("gt_Biomass1TimerUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 ProgressCheck
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1ProgressCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveCollectBiomass1Create, true, false);
    if ((TimerGetRemaining(gv_biomassExpireTimer1) <= 0.0) && (UnitGroupCount(UnitGroupFilterRegion(gv_biomassPrimalZergGroup1, RegionFromId(28), 0), c_unitCountAlive) >= 1)) {
        TriggerExecute(gt_ObjectiveCollectBiomass1Update, true, true);
        TriggerExecute(gt_ObjectiveCollectBiomass1Failed, true, false);
        TriggerExecute(gt_TransmissionBonusFailedQ, true, false);
        TriggerExecute(gt_Biomass1RemoveStuff, true, false);
    }
    if ((TimerGetRemaining(gv_biomassExpireTimer1) != 0.0) && (UnitGroupCount(UnitGroupFilterRegion(gv_biomassPrimalZergGroup1, RegionFromId(28), 0), c_unitCountAlive) == 0) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        TriggerExecute(gt_ObjectiveCollectBiomass1Update, true, false);
        TriggerExecute(gt_ObjectiveCollectBiomass1Complete, true, false);
        TriggerExecute(gt_TransmissionBonusCompleteQ, true, false);
        TriggerExecute(gt_Biomass1RemoveStuff, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1ProgressCheck_Init () {
    gt_Biomass1ProgressCheck = TriggerCreate("gt_Biomass1ProgressCheck_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 PrimalZergDies
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1PrimalZergDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_localUnitType;
    point lv_localPosition;
    fixed lv_localCVPosX;
    fixed lv_localCVPosY;
    int lv_random;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_biomassPrimalZergGroup1, EventUnit()) == true))) {
            return false;
        }
        if (!(((UnitGetType(EventUnit()) == "PrimalHydralisk") || (UnitGetType(EventUnit()) == "Ravasaur") || (UnitGetType(EventUnit()) == "PrimalRoach") || (UnitGetType(EventUnit()) == "PrimalUltralisk") || (UnitGetType(EventUnit()) == "PrimalZergling")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_localUnitType = UnitGetType(EventUnit());
    lv_localCVPosX = UnitGetCustomValue(EventUnit(), gv_customValuePosX);
    lv_localCVPosY = UnitGetCustomValue(EventUnit(), gv_customValuePosY);
    lv_localPosition = Point(lv_localCVPosX, lv_localCVPosY);
    while ((gv_biomass1PrimalZergReplacing == true)) {
        Wait(1.0, c_timeGame);
    }
    gv_biomass1PrimalZergReplacing = true;
    Wait(1.0, c_timeGame);
    lv_random = RandomInt(1, 3);
    if ((UnitIsAlive(gv_biomass1RockTower[lv_random]) == true) && (UnitIsAlive(UnitFromId(538540373)) == true)) {
        libNtve_gf_UnitCreateFacingPoint(1, lv_localUnitType, 0, gv_pLAYER_05_PRIMALZERG, gv_biomass1CavePoint[lv_random], RegionGetCenter(RegionFromId(2)));
        UnitGroupAdd(gv_biomassPrimalZergGroup1, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_localPosition), c_orderQueueReplace);
        UnitSetCustomValue(UnitLastCreated(), gv_customValuePosX, lv_localCVPosX);
        UnitSetCustomValue(UnitLastCreated(), gv_customValuePosY, lv_localCVPosY);
    }
    Wait(1.0, c_timeGame);
    gv_biomass1PrimalZergReplacing = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1PrimalZergDies_Init () {
    gt_Biomass1PrimalZergDies = TriggerCreate("gt_Biomass1PrimalZergDies_Func");
    TriggerAddEventUnitDied(gt_Biomass1PrimalZergDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 RockTower1 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1RockTower1Dies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_caveRegion;
    region lv_pushRegion;
    // Variable Initialization
    lv_caveRegion = RegionFromId(16);
    lv_pushRegion = RegionFromId(25);
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_biomass1RockTower[1]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_KillModel(gv_rockTowerBriefingUnitSelect[1][1]);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, lv_caveRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(lv_pushRegion), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, lv_caveRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(lv_pushRegion), true);
    }
    UnitGroupLoopEnd();
    Wait(0.2, c_timeGame);
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_caveRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1RockTower1Dies_Init () {
    gt_Biomass1RockTower1Dies = TriggerCreate("gt_Biomass1RockTower1Dies_Func");
    TriggerAddEventUnitDied(gt_Biomass1RockTower1Dies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 RockTower2 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1RockTower2Dies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_caveRegion;
    region lv_pushRegion;
    // Variable Initialization
    lv_caveRegion = RegionFromId(17);
    lv_pushRegion = RegionFromId(27);
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_biomass1RockTower[2]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_KillModel(gv_rockTowerBriefingUnitSelect[1][2]);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, lv_caveRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(lv_pushRegion), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, lv_caveRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(lv_pushRegion), true);
    }
    UnitGroupLoopEnd();
    Wait(0.2, c_timeGame);
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_caveRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1RockTower2Dies_Init () {
    gt_Biomass1RockTower2Dies = TriggerCreate("gt_Biomass1RockTower2Dies_Func");
    TriggerAddEventUnitDied(gt_Biomass1RockTower2Dies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 RockTower3 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1RockTower3Dies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_caveRegion;
    region lv_pushRegion;
    // Variable Initialization
    lv_caveRegion = RegionFromId(18);
    lv_pushRegion = RegionFromId(26);
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_biomass1RockTower[3]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_KillModel(gv_rockTowerBriefingUnitSelect[1][3]);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, lv_caveRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(lv_pushRegion), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_02_USER, lv_caveRegion, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(lv_pushRegion), true);
    }
    UnitGroupLoopEnd();
    Wait(0.2, c_timeGame);
    UnitGroupLoopBegin(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_caveRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1RockTower3Dies_Init () {
    gt_Biomass1RockTower3Dies = TriggerCreate("gt_Biomass1RockTower3Dies_Func");
    TriggerAddEventUnitDied(gt_Biomass1RockTower3Dies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Biomass1 RemoveStuff
//--------------------------------------------------------------------------------------------------
bool gt_Biomass1RemoveStuff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Biomass1ProgressCheck, false);
    TimerPause(gv_biomassExpireTimer1, true);
    UnitKill(UnitFromId(538540373));
    libCOMI_gf_DestroyPingCoop(gv_biomassPing1);
    libNtve_gf_KillModel(gv_rockTowerBriefingUnitSelect[1][1]);
    libNtve_gf_KillModel(gv_rockTowerBriefingUnitSelect[1][2]);
    libNtve_gf_KillModel(gv_rockTowerBriefingUnitSelect[1][3]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Biomass1RemoveStuff_Init () {
    gt_Biomass1RemoveStuff = TriggerCreate("gt_Biomass1RemoveStuff_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Find Secret
//--------------------------------------------------------------------------------------------------
bool gt_FindSecret_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == UnitFromId(2095320017)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 100.00, 0.00));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EF077AEA"));
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(UnitFromId(2095320017), StringExternal("Param/Value/F441C707"), UnitGetName(UnitFromId(2095320017)), StringExternal("Param/Value/D4EA0FCF"));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/34B3F7E7"), null, CameraGetTarget(EventPlayer()));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/B55C734D"), null, CameraGetTarget(EventPlayer()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FindSecret_Init () {
    gt_FindSecret = TriggerCreate("gt_FindSecret_Func");
    TriggerAddEventUnitSelected(gt_FindSecret, null, c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Introduction1 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroduction1Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Introduction1", -1), StringExternal("Param/Value/A0A6997F"), StringExternal("Param/Value/178A8DCA"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroduction1Q_Init () {
    gt_TransmissionIntroduction1Q = TriggerCreate("gt_TransmissionIntroduction1Q_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Introduction2 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionIntroduction2Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Introduction2", -1), StringExternal("Param/Value/4A4EF075"), StringExternal("Param/Value/7FB8AC33"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionIntroduction2Q_Init () {
    gt_TransmissionIntroduction2Q = TriggerCreate("gt_TransmissionIntroduction2Q_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AscendantsLieDormant Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAscendantsLieDormantQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantsLieDormant", -1), StringExternal("Param/Value/189AF178"), StringExternal("Param/Value/C12BA841"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAscendantsLieDormantQ_Init () {
    gt_TransmissionAscendantsLieDormantQ = TriggerCreate("gt_TransmissionAscendantsLieDormantQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AwakensSoon Devastator Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakensSoonDevastatorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_bossGroupTimeToAwaken[1] <= 180))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGetOwner(gv_bossDevastator) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitIsAlive(gv_bossDevastator) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakensSoonDevastator", -1), StringExternal("Param/Value/9C6F4770"), StringExternal("Param/Value/ACEB4ACF"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakensSoonDevastatorQ_Init () {
    gt_TransmissionAwakensSoonDevastatorQ = TriggerCreate("gt_TransmissionAwakensSoonDevastatorQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AwakensSoon Skiver Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakensSoonSkiverQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_bossGroupTimeToAwaken[1] <= 180))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGetOwner(gv_bossSkiver) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitIsAlive(gv_bossSkiver) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakensSoonSkiver", -1), StringExternal("Param/Value/FD7E024F"), StringExternal("Param/Value/30BD29BA"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakensSoonSkiverQ_Init () {
    gt_TransmissionAwakensSoonSkiverQ = TriggerCreate("gt_TransmissionAwakensSoonSkiverQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AwakensSoon Carnozor Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakensSoonCarnozorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_bossGroupTimeToAwaken[2] <= 120))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGetOwner(gv_bossCarnozor) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitIsAlive(gv_bossCarnozor) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakensSoonCarnozor", -1), StringExternal("Param/Value/4D4BD3D0"), StringExternal("Param/Value/F031EC23"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakensSoonCarnozorQ_Init () {
    gt_TransmissionAwakensSoonCarnozorQ = TriggerCreate("gt_TransmissionAwakensSoonCarnozorQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AwakensSoon MothmamKhailu Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakensSoonMothmamKhailuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_bossGroupTimeToAwaken[3] <= 120))) {
        Wait(1.0, c_timeGame);
    }
    if ((((UnitGetOwner(gv_bossMothmam) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitIsAlive(gv_bossMothmam) == true)) || ((UnitGetOwner(gv_bossKhailu) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitIsAlive(gv_bossKhailu) == true)))) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakensSoonMothmamKhailu", -1), StringExternal("Param/Value/D555645A"), StringExternal("Param/Value/8023C608"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakensSoonMothmamKhailuQ_Init () {
    gt_TransmissionAwakensSoonMothmamKhailuQ = TriggerCreate("gt_TransmissionAwakensSoonMothmamKhailuQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AwakensSoon Uldra Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakensSoonUldraQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_bossGroupTimeToAwaken[4] <= 120))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGetOwner(gv_bossUldra) == gv_pLAYER_07_BOSSESNEUTRAL) && (UnitIsAlive(gv_bossUldra) == true)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakensSoonUldra", -1), StringExternal("Param/Value/28316771"), StringExternal("Param/Value/C99F58D3"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakensSoonUldraQ_Init () {
    gt_TransmissionAwakensSoonUldraQ = TriggerCreate("gt_TransmissionAwakensSoonUldraQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Awakened DevastatorSkiver Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakenedDevastatorSkiverQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakenedDevastatorSkiver", -1), StringExternal("Param/Value/17BD79C5"), StringExternal("Param/Value/C99B8057"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakenedDevastatorSkiverQ_Init () {
    gt_TransmissionAwakenedDevastatorSkiverQ = TriggerCreate("gt_TransmissionAwakenedDevastatorSkiverQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Awakened Carnozor Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakenedCarnozorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakenedCarnozor", -1), StringExternal("Param/Value/F6185A70"), StringExternal("Param/Value/B2B110DD"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakenedCarnozorQ_Init () {
    gt_TransmissionAwakenedCarnozorQ = TriggerCreate("gt_TransmissionAwakenedCarnozorQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Awakened MothmamKhailu Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakenedMothmamKhailuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakenedMothmamKhailu", -1), StringExternal("Param/Value/28049877"), StringExternal("Param/Value/6EFB9C23"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakenedMothmamKhailuQ_Init () {
    gt_TransmissionAwakenedMothmamKhailuQ = TriggerCreate("gt_TransmissionAwakenedMothmamKhailuQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Awakened Uldra Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAwakenedUldraQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AwakenedUldra", -1), StringExternal("Param/Value/6E359C62"), StringExternal("Param/Value/9B8DC78A"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAwakenedUldraQ_Init () {
    gt_TransmissionAwakenedUldraQ = TriggerCreate("gt_TransmissionAwakenedUldraQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AscendantAttacked OneCrystal Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAscendantAttackedOneCrystalQ_Func (bool testConds, bool runActions) {
    int auto20F50BC0_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup("AmonCrystalEpilogue032", gv_pLAYER_05_PRIMALZERG, RegionCircle(UnitGetPosition(EventUnit()), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
        if (!(((EventUnit() == gv_bossDevastator) || (EventUnit() == gv_bossSkiver) || (EventUnit() == gv_bossCarnozor) || (EventUnit() == gv_bossMothmam) || (EventUnit() == gv_bossKhailu) || (EventUnit() == gv_bossUldra)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionAscendantAttackedMultipleCrystalsQ, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto20F50BC0_val = gv_ascendantAttackedOneCrystal;
    if (auto20F50BC0_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantAttackedOneCrystal1", -1), StringExternal("Param/Value/5B09FBF3"), StringExternal("Param/Value/29A47AF4"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        gv_ascendantAttackedOneCrystal = 2;
    }
    else if (auto20F50BC0_val == 2) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantAttackedOneCrystal2", -1), StringExternal("Param/Value/E3B3FDC1"), StringExternal("Param/Value/74D028FB"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        gv_ascendantAttackedOneCrystal = 3;
    }
    else if (auto20F50BC0_val == 3) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantAttackedOneCrystal3", -1), StringExternal("Param/Value/73087BB8"), StringExternal("Param/Value/52EC7E33"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        gv_ascendantAttackedOneCrystal = 4;
    }
    else if (auto20F50BC0_val == 4) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantAttackedOneCrystal4", -1), StringExternal("Param/Value/4AE29937"), StringExternal("Param/Value/A3DEFBB7"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        gv_ascendantAttackedOneCrystal = 1;
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    TriggerEnable(gt_TransmissionAscendantAttackedMultipleCrystalsQ, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAscendantAttackedOneCrystalQ_Init () {
    gt_TransmissionAscendantAttackedOneCrystalQ = TriggerCreate("gt_TransmissionAscendantAttackedOneCrystalQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionAscendantAttackedOneCrystalQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AscendantAttacked MultipleCrystals  Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAscendantAttackedMultipleCrystalsQ_Func (bool testConds, bool runActions) {
    int auto0F46123D_val;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup("AmonCrystalEpilogue032", gv_pLAYER_05_PRIMALZERG, RegionCircle(UnitGetPosition(EventUnit()), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2))) {
            return false;
        }
        if (!(((EventUnit() == gv_bossDevastator) || (EventUnit() == gv_bossSkiver) || (EventUnit() == gv_bossCarnozor) || (EventUnit() == gv_bossMothmam) || (EventUnit() == gv_bossKhailu) || (EventUnit() == gv_bossUldra)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionAscendantAttackedOneCrystalQ, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto0F46123D_val = gv_ascendantAttackedMultipleCrystals;
    if (auto0F46123D_val == 1) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantAttackedMultiple1", -1), StringExternal("Param/Value/207D86BE"), StringExternal("Param/Value/4D64DAA3"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        gv_ascendantAttackedMultipleCrystals = 2;
    }
    else if (auto0F46123D_val == 2) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantAttackedMultiple2", -1), StringExternal("Param/Value/37B050E9"), StringExternal("Param/Value/E2012925"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        gv_ascendantAttackedMultipleCrystals = 3;
    }
    else if (auto0F46123D_val == 3) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantAttackedMultiple3", -1), StringExternal("Param/Value/43F47D87"), StringExternal("Param/Value/841D4801"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
        gv_ascendantAttackedMultipleCrystals = 1;
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    TriggerEnable(gt_TransmissionAscendantAttackedOneCrystalQ, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAscendantAttackedMultipleCrystalsQ_Init () {
    gt_TransmissionAscendantAttackedMultipleCrystalsQ = TriggerCreate("gt_TransmissionAscendantAttackedMultipleCrystalsQ_Func");
    TriggerAddEventUnitDamaged(gt_TransmissionAscendantAttackedMultipleCrystalsQ, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - VoidCrystalsDestroyed DevastatorSkiver Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidCrystalsDestroyedDevastatorSkiverQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidCrystalsDestroyedDevastatorSkiverQ_Init () {
    gt_TransmissionVoidCrystalsDestroyedDevastatorSkiverQ = TriggerCreate("gt_TransmissionVoidCrystalsDestroyedDevastatorSkiverQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - VoidCrystalsDestroyed Carnozor Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidCrystalsDestroyedCarnozorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidCrystalsDestroyedCarnozorQ_Init () {
    gt_TransmissionVoidCrystalsDestroyedCarnozorQ = TriggerCreate("gt_TransmissionVoidCrystalsDestroyedCarnozorQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - VoidCrystalsDestroyed MothmamKhailu Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidCrystalsDestroyedMothmamKhailuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidCrystalsDestroyedMothmamKhailuQ_Init () {
    gt_TransmissionVoidCrystalsDestroyedMothmamKhailuQ = TriggerCreate("gt_TransmissionVoidCrystalsDestroyedMothmamKhailuQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - VoidCrystalsDestroyed Uldra Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidCrystalsDestroyedUldraQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidCrystalsDestroyedUldraQ_Init () {
    gt_TransmissionVoidCrystalsDestroyedUldraQ = TriggerCreate("gt_TransmissionVoidCrystalsDestroyedUldraQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AscendantKilled DevastatorSkiver Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAscendantKilledDevastatorSkiverQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!(((EventUnit() == gv_bossDevastator) || (EventUnit() == gv_bossSkiver)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantKilledDevastatorSkiver", -1), StringExternal("Param/Value/405AFCD5"), StringExternal("Param/Value/48D43F20"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAscendantKilledDevastatorSkiverQ_Init () {
    gt_TransmissionAscendantKilledDevastatorSkiverQ = TriggerCreate("gt_TransmissionAscendantKilledDevastatorSkiverQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionAscendantKilledDevastatorSkiverQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AscendantKilled Carnozor Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAscendantKilledCarnozorQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == gv_bossCarnozor))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantKilledCarnozor2", -1), StringExternal("Param/Value/334D86B1"), StringExternal("Param/Value/D3A71053"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAscendantKilledCarnozorQ_Init () {
    gt_TransmissionAscendantKilledCarnozorQ = TriggerCreate("gt_TransmissionAscendantKilledCarnozorQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionAscendantKilledCarnozorQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AscendantKilled MothmamKhailu Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAscendantKilledMothmamKhailuQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!(((EventUnit() == gv_bossMothmam) || (EventUnit() == gv_bossKhailu)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantKilledMothmamKhailu", -1), StringExternal("Param/Value/478AC6A1"), StringExternal("Param/Value/1C45889E"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAscendantKilledMothmamKhailuQ_Init () {
    gt_TransmissionAscendantKilledMothmamKhailuQ = TriggerCreate("gt_TransmissionAscendantKilledMothmamKhailuQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionAscendantKilledMothmamKhailuQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - AscendantKilled Uldra Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAscendantKilledUldraQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((EventUnit() == gv_bossUldra))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("AscendantKilledUldra", -1), StringExternal("Param/Value/78304194"), StringExternal("Param/Value/DE4BC652"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionAscendantKilledUldraQ_Init () {
    gt_TransmissionAscendantKilledUldraQ = TriggerCreate("gt_TransmissionAscendantKilledUldraQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionAscendantKilledUldraQ, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - LostEggs05 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLostEggs05Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("LostEggs5", -1), StringExternal("Param/Value/2E42BA27"), StringExternal("Param/Value/FBD0A989"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionLostEggs05Q_Init () {
    gt_TransmissionLostEggs05Q = TriggerCreate("gt_TransmissionLostEggs05Q_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - LostEggs10 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLostEggs10Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("LostEggs10", -1), StringExternal("Param/Value/7B8B54C6"), StringExternal("Param/Value/876F6B4A"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionLostEggs10Q_Init () {
    gt_TransmissionLostEggs10Q = TriggerCreate("gt_TransmissionLostEggs10Q_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - LostEggs15 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLostEggs15Q_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("LostEggs15", -1), StringExternal("Param/Value/3F487121"), StringExternal("Param/Value/7F1B2249"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionLostEggs15Q_Init () {
    gt_TransmissionLostEggs15Q = TriggerCreate("gt_TransmissionLostEggs15Q_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - BonusStart Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusStartQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusStart", -1), StringExternal("Param/Value/F728A96A"), StringExternal("Param/Value/3380F267"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusStartQ_Init () {
    gt_TransmissionBonusStartQ = TriggerCreate("gt_TransmissionBonusStartQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - BonusFirstWarning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusFirstWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((TimerGetRemaining(gv_biomassExpireTimer1) <= 120.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((RandomInt(1, 2) == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusFirstWarning1", -1), StringExternal("Param/Value/3566FF25"), StringExternal("Param/Value/B6A5ABE3"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusFirstWarning2", -1), StringExternal("Param/Value/FA8C4753"), StringExternal("Param/Value/5C5E70A4"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_TransmissionBonusFinalWarningQ, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusFirstWarningQ_Init () {
    gt_TransmissionBonusFirstWarningQ = TriggerCreate("gt_TransmissionBonusFirstWarningQ_Func");
    TriggerEnable(gt_TransmissionBonusFirstWarningQ, false);
    TriggerAddEventTimePeriodic(gt_TransmissionBonusFirstWarningQ, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - BonusFinalWarning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusFinalWarningQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((TimerGetRemaining(gv_biomassExpireTimer1) <= 60.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((RandomInt(1, 2) == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusFinalWarning1", -1), StringExternal("Param/Value/6943C1F0"), StringExternal("Param/Value/59D197D2"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusFinalWarning2", -1), StringExternal("Param/Value/10120406"), StringExternal("Param/Value/D5AC6CEC"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusFinalWarningQ_Init () {
    gt_TransmissionBonusFinalWarningQ = TriggerCreate("gt_TransmissionBonusFinalWarningQ_Func");
    TriggerEnable(gt_TransmissionBonusFinalWarningQ, false);
    TriggerAddEventTimePeriodic(gt_TransmissionBonusFinalWarningQ, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - BonusFailed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusFailedQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((RandomInt(1, 2) == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusFailed1", -1), StringExternal("Param/Value/5032AAED"), StringExternal("Param/Value/A08CA896"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusFailed2", -1), StringExternal("Param/Value/829D0D82"), StringExternal("Param/Value/CDEC3AC9"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusFailedQ_Init () {
    gt_TransmissionBonusFailedQ = TriggerCreate("gt_TransmissionBonusFailedQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - BonusComplete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusCompleteQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((RandomInt(1, 2) == 1)) {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusComplete1", -1), StringExternal("Param/Value/13459901"), StringExternal("Param/Value/C1EB1541"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("BonusComplete2", -1), StringExternal("Param/Value/93577929"), StringExternal("Param/Value/2851AE7A"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusCompleteQ_Init () {
    gt_TransmissionBonusCompleteQ = TriggerCreate("gt_TransmissionBonusCompleteQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Enemy AttackingBases Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEnemyAttackingBasesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionEnemyAttackingBasesQ_Init () {
    gt_TransmissionEnemyAttackingBasesQ = TriggerCreate("gt_TransmissionEnemyAttackingBasesQ_Func");
    TriggerAddEventPlayerAIWave(gt_TransmissionEnemyAttackingBasesQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_TransmissionEnemyAttackingBasesQ, gv_pLAYER_04_ENEMY);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Cloaked Enemies Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionCloakedEnemiesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TransmissionCloakedEnemiesQ_Init () {
    gt_TransmissionCloakedEnemiesQ = TriggerCreate("gt_TransmissionCloakedEnemiesQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTarget;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveSlayPackAscendantsFailed, true, false);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/6166427B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/7A60698B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
    }
    else {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FAF74290"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D7FCB0EB"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
    }
    Wait(2.0, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_01_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }
    if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_02_USER)) == false)) {
        CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
        CameraPan(gv_pLAYER_02_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
    }
    Wait(4.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, gv_lastDestroyedEggPoint, 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_lastDestroyedEggPoint, 1.5, -1, 10.0, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("LostEggs20Loss", -1), StringExternal("Param/Value/8A2A7C31"), StringExternal("Param/Value/7DC4F7C1"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveSlayPackAscendantsComplete, true, false);
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnitType("Dehaka", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("Victory", -1), StringExternal("Param/Value/5FB42BB9"), StringExternal("Param/Value/2C842E24"), 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - SlayPackAscendants - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayPackAscendantsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_ZerusAscendants_Primary01");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", 4);
    gv_objectiveSlayPackAscendants = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveSlayPackAscendantsUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayPackAscendantsCreate_Init () {
    gt_ObjectiveSlayPackAscendantsCreate = TriggerCreate("gt_ObjectiveSlayPackAscendantsCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - SlayPackAscendants - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayPackAscendantsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSlayPackAscendantsCreate, true, false);
    ObjectiveSetState(gv_objectiveSlayPackAscendants, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayPackAscendantsComplete_Init () {
    gt_ObjectiveSlayPackAscendantsComplete = TriggerCreate("gt_ObjectiveSlayPackAscendantsComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - SlayPackAscendants - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayPackAscendantsUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveSlayPackAscendantsCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_ZerusAscendants_Primary01", gv_bossesDead);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayPackAscendantsUpdate_Init () {
    gt_ObjectiveSlayPackAscendantsUpdate = TriggerCreate("gt_ObjectiveSlayPackAscendantsUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - SlayPackAscendants - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSlayPackAscendantsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSlayPackAscendantsCreate, true, false);
    ObjectiveSetState(gv_objectiveSlayPackAscendants, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSlayPackAscendantsFailed_Init () {
    gt_ObjectiveSlayPackAscendantsFailed = TriggerCreate("gt_ObjectiveSlayPackAscendantsFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - AscendantsCantDrain20Eggs - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAscendantsCantDrain20EggsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_ZerusAscendants_Primary02");
    gv_objectiveDoNotLet20EggsBeDrained = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAscendantsCantDrain20EggsCreate_Init () {
    gt_ObjectiveAscendantsCantDrain20EggsCreate = TriggerCreate("gt_ObjectiveAscendantsCantDrain20EggsCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - AscendantsCantDrain20Eggs - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAscendantsCantDrain20EggsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsCreate, true, false);
    ObjectiveSetState(gv_objectiveDoNotLet20EggsBeDrained, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAscendantsCantDrain20EggsComplete_Init () {
    gt_ObjectiveAscendantsCantDrain20EggsComplete = TriggerCreate("gt_ObjectiveAscendantsCantDrain20EggsComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - AscendantsCantDrain20Eggs - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAscendantsCantDrain20EggsUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_ZerusAscendants_Primary02", gv_eggsDead);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAscendantsCantDrain20EggsUpdate_Init () {
    gt_ObjectiveAscendantsCantDrain20EggsUpdate = TriggerCreate("gt_ObjectiveAscendantsCantDrain20EggsUpdate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective - AscendantsCantDrain20Eggs - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveAscendantsCantDrain20EggsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveAscendantsCantDrain20EggsCreate, true, false);
    ObjectiveSetState(gv_objectiveDoNotLet20EggsBeDrained, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveAscendantsCantDrain20EggsFailed_Init () {
    gt_ObjectiveAscendantsCantDrain20EggsFailed = TriggerCreate("gt_ObjectiveAscendantsCantDrain20EggsFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective CollectBiomass1 - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectBiomass1Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_ZerusAscendants_Bonus01");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderSecondary", 3);
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    TriggerExecute(gt_ObjectiveCollectBiomass1Update, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectBiomass1Create_Init () {
    gt_ObjectiveCollectBiomass1Create = TriggerCreate("gt_ObjectiveCollectBiomass1Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective CollectBiomass1 - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectBiomass1Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectBiomass1Create, true, false);
    ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectBiomass1Complete_Init () {
    gt_ObjectiveCollectBiomass1Complete = TriggerCreate("gt_ObjectiveCollectBiomass1Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective CollectBiomass1 - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectBiomass1Update_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveCollectBiomass1Create, true, false);
    TextExpressionSetToken("Param/Expression/C653CC88", "RemainingTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_biomassExpireTimer1))), Color(100.00, 100.00, 0.00)));
    ObjectiveSetName(gv_objectiveRescueStalkers, TextExpressionAssemble("Param/Expression/C653CC88"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectBiomass1Update_Init () {
    gt_ObjectiveCollectBiomass1Update = TriggerCreate("gt_ObjectiveCollectBiomass1Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective CollectBiomass1 - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveCollectBiomass1Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveCollectBiomass1Create, true, false);
    ObjectiveSetName(gv_objectiveRescueStalkers, StringExternal("Param/Value/B2493E05"));
    ObjectiveSetState(gv_objectiveRescueStalkers, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveCollectBiomass1Failed_Init () {
    gt_ObjectiveCollectBiomass1Failed = TriggerCreate("gt_ObjectiveCollectBiomass1Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_DEBUGAshWorm1_Init();
    gt_DEBUGAshWorm2_Init();
    gt_DEBUGAshWorm3_Init();
    gt_DEBUGAshWorm4_Init();
    gt_DEBUGVC_Init();
    gt_DEBUGKillPrimal_Init();
    gt_DEBUGBonus_Init();
    gt_DEBUGWin_Init();
    gt_DEBUGLoss_Init();
    gt_StartGameQ_Init();
    gt_BossSpawnEggsTimedLife_Init();
    gt_BossesSetVariables_Init();
    gt_BossesUpdateWakeTime_Init();
    gt_BossesStartAIs_Init();
    gt_BossDies_Init();
    gt_EggDies_Init();
    gt_CollectEssenceMissiles_Init();
    gt_BossDevastatorStartTimer_Init();
    gt_BossDevastatorStartAI_Init();
    gt_BossSkiverStartTimer_Init();
    gt_BossSkiverStartAI_Init();
    gt_BossCarnozorStartTimer_Init();
    gt_BossCarnozorStartAI_Init();
    gt_BossCarnozorSlimeTowerTimedLife_Init();
    gt_BossMothmamStartTimer_Init();
    gt_BossMothmamStartAI_Init();
    gt_BossKhailuStartTimer_Init();
    gt_BossKhailuStartAI_Init();
    gt_BossUldraStartTimer_Init();
    gt_BossUldraStartAI_Init();
    gt_BossUldraAI_Init();
    gt_BossUldraMultipleFireballs_Init();
    gt_BossUldraTunnelEggs_Init();
    gt_BossUldraFirebreath_Init();
    gt_BossUldraAttackEggs_Init();
    gt_VoidCrystalDies_Init();
    gt_VoidCrystalsSetAbilities_Init();
    gt_AshWormSetVariables_Init();
    gt_AshWormStartAIs_Init();
    gt_AshWormUpdateWakeTime_Init();
    gt_AshWormDies_Init();
    gt_StartAI_Init();
    gt_SetupSpawnLocations_Init();
    gt_BonusSetVariables_Init();
    gt_BonusStart_Init();
    gt_Biomass1Init_Init();
    gt_Biomass1TimerUpdate_Init();
    gt_Biomass1ProgressCheck_Init();
    gt_Biomass1PrimalZergDies_Init();
    gt_Biomass1RockTower1Dies_Init();
    gt_Biomass1RockTower2Dies_Init();
    gt_Biomass1RockTower3Dies_Init();
    gt_Biomass1RemoveStuff_Init();
    gt_FindSecret_Init();
    gt_TransmissionIntroduction1Q_Init();
    gt_TransmissionIntroduction2Q_Init();
    gt_TransmissionAscendantsLieDormantQ_Init();
    gt_TransmissionAwakensSoonDevastatorQ_Init();
    gt_TransmissionAwakensSoonSkiverQ_Init();
    gt_TransmissionAwakensSoonCarnozorQ_Init();
    gt_TransmissionAwakensSoonMothmamKhailuQ_Init();
    gt_TransmissionAwakensSoonUldraQ_Init();
    gt_TransmissionAwakenedDevastatorSkiverQ_Init();
    gt_TransmissionAwakenedCarnozorQ_Init();
    gt_TransmissionAwakenedMothmamKhailuQ_Init();
    gt_TransmissionAwakenedUldraQ_Init();
    gt_TransmissionAscendantAttackedOneCrystalQ_Init();
    gt_TransmissionAscendantAttackedMultipleCrystalsQ_Init();
    gt_TransmissionVoidCrystalsDestroyedDevastatorSkiverQ_Init();
    gt_TransmissionVoidCrystalsDestroyedCarnozorQ_Init();
    gt_TransmissionVoidCrystalsDestroyedMothmamKhailuQ_Init();
    gt_TransmissionVoidCrystalsDestroyedUldraQ_Init();
    gt_TransmissionAscendantKilledDevastatorSkiverQ_Init();
    gt_TransmissionAscendantKilledCarnozorQ_Init();
    gt_TransmissionAscendantKilledMothmamKhailuQ_Init();
    gt_TransmissionAscendantKilledUldraQ_Init();
    gt_TransmissionLostEggs05Q_Init();
    gt_TransmissionLostEggs10Q_Init();
    gt_TransmissionLostEggs15Q_Init();
    gt_TransmissionBonusStartQ_Init();
    gt_TransmissionBonusFirstWarningQ_Init();
    gt_TransmissionBonusFinalWarningQ_Init();
    gt_TransmissionBonusFailedQ_Init();
    gt_TransmissionBonusCompleteQ_Init();
    gt_TransmissionEnemyAttackingBasesQ_Init();
    gt_TransmissionCloakedEnemiesQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_ObjectiveSlayPackAscendantsCreate_Init();
    gt_ObjectiveSlayPackAscendantsComplete_Init();
    gt_ObjectiveSlayPackAscendantsUpdate_Init();
    gt_ObjectiveSlayPackAscendantsFailed_Init();
    gt_ObjectiveAscendantsCantDrain20EggsCreate_Init();
    gt_ObjectiveAscendantsCantDrain20EggsComplete_Init();
    gt_ObjectiveAscendantsCantDrain20EggsUpdate_Init();
    gt_ObjectiveAscendantsCantDrain20EggsFailed_Init();
    gt_ObjectiveCollectBiomass1Create_Init();
    gt_ObjectiveCollectBiomass1Complete_Init();
    gt_ObjectiveCollectBiomass1Update_Init();
    gt_ObjectiveCollectBiomass1Failed_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
