<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="96D61603"/>
    </Root>
    <Element Type="CustomScript" Id="96D61603">
        <Identifier>Triggers</Identifier>
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated AI Script
            // 
            // AI Name: Hybrid Wave AI
            // 
            //==================================================================================================
            include &quot;TriggerLibs/natives&quot;
            include &quot;TriggerLibs/AI&quot;
            include &quot;TriggerLibs/Computer&quot;
            //--------------------------------------------------------------------------------------------------
            // Globals
            //--------------------------------------------------------------------------------------------------
            point[17] aiF917F4D7_defGather;
            string[17] aiF917F4D7_customData;
            wave[17] aiF917F4D7_lastWave;
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave1_enabled;
            wave[17] aiF917F4D7_wave1_lastWave;
            trigger aiF917F4D7_wave1_trigger = null;
            int aiF917F4D7_wave1_runPlayer;
            playergroup aiF917F4D7_wave1_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave1_enabled[init_i] = true;
                    aiF917F4D7_wave1_lastWave[init_i] = null;
                }
                aiF917F4D7_wave1_trigger = TriggerCreate(&quot;aiF917F4D7_wave1_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave1_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave1_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave1_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave1_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave1_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave1_runPlayer;
                playergroup target = aiF917F4D7_wave1_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave1_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave01_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave1_runPlayer = p;
                aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave2_enabled;
            wave[17] aiF917F4D7_wave2_lastWave;
            trigger aiF917F4D7_wave2_trigger = null;
            int aiF917F4D7_wave2_runPlayer;
            playergroup aiF917F4D7_wave2_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave2_enabled[init_i] = true;
                    aiF917F4D7_wave2_lastWave[init_i] = null;
                }
                aiF917F4D7_wave2_trigger = TriggerCreate(&quot;aiF917F4D7_wave2_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave2_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave2_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave2_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave2_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave2_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave2_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave2_runPlayer;
                playergroup target = aiF917F4D7_wave2_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave2_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave02_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave2_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave2_runPlayer = p;
                aiF917F4D7_wave2_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave2_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave3_enabled;
            wave[17] aiF917F4D7_wave3_lastWave;
            trigger aiF917F4D7_wave3_trigger = null;
            int aiF917F4D7_wave3_runPlayer;
            playergroup aiF917F4D7_wave3_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave3_enabled[init_i] = true;
                    aiF917F4D7_wave3_lastWave[init_i] = null;
                }
                aiF917F4D7_wave3_trigger = TriggerCreate(&quot;aiF917F4D7_wave3_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave3_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave3_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave3_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave3_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave3_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave3_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave3_runPlayer;
                playergroup target = aiF917F4D7_wave3_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave3_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave03_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave3_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave3_runPlayer = p;
                aiF917F4D7_wave3_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave3_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave4_enabled;
            wave[17] aiF917F4D7_wave4_lastWave;
            trigger aiF917F4D7_wave4_trigger = null;
            int aiF917F4D7_wave4_runPlayer;
            playergroup aiF917F4D7_wave4_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave4_enabled[init_i] = true;
                    aiF917F4D7_wave4_lastWave[init_i] = null;
                }
                aiF917F4D7_wave4_trigger = TriggerCreate(&quot;aiF917F4D7_wave4_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave4_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave4_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave4_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave4_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave4_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave4_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave4_runPlayer;
                playergroup target = aiF917F4D7_wave4_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave4_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave04_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave4_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave4_runPlayer = p;
                aiF917F4D7_wave4_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave4_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave5_enabled;
            wave[17] aiF917F4D7_wave5_lastWave;
            trigger aiF917F4D7_wave5_trigger = null;
            int aiF917F4D7_wave5_runPlayer;
            playergroup aiF917F4D7_wave5_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave5_enabled[init_i] = true;
                    aiF917F4D7_wave5_lastWave[init_i] = null;
                }
                aiF917F4D7_wave5_trigger = TriggerCreate(&quot;aiF917F4D7_wave5_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave5_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave5_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave5_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave5_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave5_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave5_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave5_runPlayer;
                playergroup target = aiF917F4D7_wave5_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave5_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave05_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave5_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave5_runPlayer = p;
                aiF917F4D7_wave5_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave5_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave6_enabled;
            wave[17] aiF917F4D7_wave6_lastWave;
            trigger aiF917F4D7_wave6_trigger = null;
            int aiF917F4D7_wave6_runPlayer;
            playergroup aiF917F4D7_wave6_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave6_enabled[init_i] = true;
                    aiF917F4D7_wave6_lastWave[init_i] = null;
                }
                aiF917F4D7_wave6_trigger = TriggerCreate(&quot;aiF917F4D7_wave6_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave6_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave6_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave6_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave6_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave6_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave6_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave6_runPlayer;
                playergroup target = aiF917F4D7_wave6_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave6_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave06_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave6_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave6_runPlayer = p;
                aiF917F4D7_wave6_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave6_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave: 
            //--------------------------------------------------------------------------------------------------
            bool[17] aiF917F4D7_wave7_enabled;
            wave[17] aiF917F4D7_wave7_lastWave;
            trigger aiF917F4D7_wave7_trigger = null;
            int aiF917F4D7_wave7_runPlayer;
            playergroup aiF917F4D7_wave7_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_init () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    aiF917F4D7_wave7_enabled[init_i] = true;
                    aiF917F4D7_wave7_lastWave[init_i] = null;
                }
                aiF917F4D7_wave7_trigger = TriggerCreate(&quot;aiF917F4D7_wave7_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave7_enabled[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave7_isEnabled (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return aiF917F4D7_wave7_enabled[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave7_createdWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_wave7_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave7_runFunc (bool c, bool a) {
                int p = aiF917F4D7_wave7_runPlayer;
                playergroup target = aiF917F4D7_wave7_runTarget;
                int d;
                point gatherPoint = null;
                int ta = 0;
                int tg = 0;
                int ts = 0;
                int tf = 0;
                int td = 0;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                d = PlayerDifficulty(p);
                if (!aiF917F4D7_wave7_enabled[p]) {
                    td = 0;
                    if (td &gt; 0) {
                        Wait(td, c_timeAI);
                    }
                    return true;
                }
                aiF917F4D7_customData[p] = &quot;&quot;;
                ta = 0;
                if (d == 1) { ta = 180; }
                if (d == 2) { ta = 180; }
                if (d == 3) { ta = 180; }
                if (d == 4) { ta = 180; }
                if (d == 5) { ta = 180; }
                if (d == 6) { ta = 180; }
                tg = 0;
                ts = ta;
                TriggerExecute(TriggerFind(&quot;gt_AttackWave07_Func&quot;), true, false);
                if (tg &gt; 0 &amp;&amp; tg &lt; ta) {
                    Wait(ta - tg, c_timeAI);
                    ts = tg;
                }
                AIAttackWaveSetTargetPlayer(p, target);
                gatherPoint = aiF917F4D7_defGather[p];
                AIAttackWaveSetGatherPoint(p, gatherPoint);
                AIAttackWaveClearWaypoints(p);
                Wait(ts, c_timeAI);
                tf = 0;
                if (tf &gt; 0) {
                    Wait(tf, c_timeAI);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave7_run (int p, playergroup target, bool wait) {
                aiF917F4D7_wave7_runPlayer = p;
                aiF917F4D7_wave7_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_wave7_trigger, false, wait);
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Wrappers
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave_enable (int w, int p, bool val) {
                if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
                if (w == 2) { aiF917F4D7_wave2_enable(p, val); }
                if (w == 3) { aiF917F4D7_wave3_enable(p, val); }
                if (w == 4) { aiF917F4D7_wave4_enable(p, val); }
                if (w == 5) { aiF917F4D7_wave5_enable(p, val); }
                if (w == 6) { aiF917F4D7_wave6_enable(p, val); }
                if (w == 7) { aiF917F4D7_wave7_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_wave_isEnabled (int w, int p) {
                if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
                if (w == 2) { return aiF917F4D7_wave2_isEnabled(p); }
                if (w == 3) { return aiF917F4D7_wave3_isEnabled(p); }
                if (w == 4) { return aiF917F4D7_wave4_isEnabled(p); }
                if (w == 5) { return aiF917F4D7_wave5_isEnabled(p); }
                if (w == 6) { return aiF917F4D7_wave6_isEnabled(p); }
                if (w == 7) { return aiF917F4D7_wave7_isEnabled(p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_wave_createdWave (int w, int p) {
                if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
                if (w == 2) { return aiF917F4D7_wave2_createdWave(p); }
                if (w == 3) { return aiF917F4D7_wave3_createdWave(p); }
                if (w == 4) { return aiF917F4D7_wave4_createdWave(p); }
                if (w == 5) { return aiF917F4D7_wave5_createdWave(p); }
                if (w == 6) { return aiF917F4D7_wave6_createdWave(p); }
                if (w == 7) { return aiF917F4D7_wave7_createdWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
                if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
                if (w == 2) { aiF917F4D7_wave2_run(p, target, wait); }
                if (w == 3) { aiF917F4D7_wave3_run(p, target, wait); }
                if (w == 4) { aiF917F4D7_wave4_run(p, target, wait); }
                if (w == 5) { aiF917F4D7_wave5_run(p, target, wait); }
                if (w == 6) { aiF917F4D7_wave6_run(p, target, wait); }
                if (w == 7) { aiF917F4D7_wave7_run(p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Sequence
            //--------------------------------------------------------------------------------------------------
            trigger aiF917F4D7_waves_trigger = null;
            int aiF917F4D7_waves_runPlayer;
            playergroup aiF917F4D7_waves_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_init () {
                aiF917F4D7_waves_trigger = TriggerCreate(&quot;aiF917F4D7_waves_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_waves_runFunc (bool c, bool a) {
                int p = aiF917F4D7_waves_runPlayer;
                playergroup target = aiF917F4D7_waves_runTarget;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                aiF917F4D7_wave1_run(p, target, true);
                aiF917F4D7_wave2_run(p, target, true);
                aiF917F4D7_wave3_run(p, target, true);
                aiF917F4D7_wave4_run(p, target, true);
                aiF917F4D7_wave5_run(p, target, true);
                aiF917F4D7_wave6_run(p, target, true);
                aiF917F4D7_wave7_run(p, target, true);
                while (true) {
                    aiF917F4D7_wave7_run(p, target, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_run (int p, playergroup target) {
                aiF917F4D7_waves_runPlayer = p;
                aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiF917F4D7_waves_trigger, false, false);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_wave1_enable(p, val);
                aiF917F4D7_wave2_enable(p, val);
                aiF917F4D7_wave3_enable(p, val);
                aiF917F4D7_wave4_enable(p, val);
                aiF917F4D7_wave5_enable(p, val);
                aiF917F4D7_wave6_enable(p, val);
                aiF917F4D7_wave7_enable(p, val);
            }
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_waves_stop () {
                TriggerStop(aiF917F4D7_waves_trigger);
                TriggerStop(aiF917F4D7_wave1_trigger);
                TriggerStop(aiF917F4D7_wave2_trigger);
                TriggerStop(aiF917F4D7_wave3_trigger);
                TriggerStop(aiF917F4D7_wave4_trigger);
                TriggerStop(aiF917F4D7_wave5_trigger);
                TriggerStop(aiF917F4D7_wave6_trigger);
                TriggerStop(aiF917F4D7_wave7_trigger);
            }
            //--------------------------------------------------------------------------------------------------
            // Configuration
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiF917F4D7_defGather[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            string aiF917F4D7_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_customData[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiF917F4D7_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiF917F4D7_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            // Start
            //--------------------------------------------------------------------------------------------------
            bool aiF917F4D7_initialized = false;
            //--------------------------------------------------------------------------------------------------
            void aiF917F4D7_start (int p) {
                int init_i;
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (!aiF917F4D7_initialized) {
                    aiF917F4D7_wave1_init();
                    aiF917F4D7_wave2_init();
                    aiF917F4D7_wave3_init();
                    aiF917F4D7_wave4_init();
                    aiF917F4D7_wave5_init();
                    aiF917F4D7_wave6_init();
                    aiF917F4D7_wave7_init();
                    aiF917F4D7_waves_init();
                    for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                        aiF917F4D7_defGather[init_i] = PointFromId(0);
                    }
                    aiF917F4D7_initialized = true;
                }
                AICampaignStart(p);
            }
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   RTC 2017: Hot Cargo
            // 
            //==================================================================================================
            include &quot;TriggerLibs/NativeLib&quot;
            include &quot;TriggerLibs/SwarmLib&quot;
            include &quot;LibCOMI&quot;
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void InitLibs () {
                libNtve_InitLib();
                libHots_InitLib();
                libCOMI_InitLib();
            }
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            const int gv_pLAYER_01_USER = 1;
            const int gv_pLAYER_02_USER = 2;
            const int gv_pLAYER_03_ENEMY = 3;
            const int gv_pLAYER_04_ENEMY = 4;
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            playergroup gv_enemyGroup;
            playergroup gv_player5Convoy;
            unitgroup gv_convoyG1;
            unitgroup gv_convoyG2;
            unitgroup gv_convoyG3;
            unitgroup gv_convoyG4;
            int gv_convoySpawnCounter;
            int gv_convoyP1;
            int gv_convoyP2;
            int gv_convoyP3;
            int gv_convoyP4;
            unitgroup gv_enemyG1;
            unitgroup gv_enemyG2;
            unitgroup gv_enemyG3;
            unitgroup gv_enemyG4;
            timer gv_dustCycle;
            int gv_dustStormCounter;
            bool gv_dustBaseBoolean;
            bool gv_danBoolean;
            int gv_remainingConvoyCount;
            int gv_totalConvoyCount;
            int gv_convoyProgress;
            int gv_convoysLost;
            point gv_victoryCompletePan;
            point gv_attackWaveA_Wave05Path;
            region[3][11] gv_attackSpawn;
            int gv_objectiveEscortTheConvoy;
            int gv_objectiveEscortTheConvoy2;
            void InitGlobals () {
                gv_enemyGroup = PlayerGroupEmpty();
                gv_player5Convoy = PlayerGroupEmpty();
                gv_convoyG1 = UnitGroupEmpty();
                gv_convoyG2 = UnitGroupEmpty();
                gv_convoyG3 = UnitGroupEmpty();
                gv_convoyG4 = UnitGroupEmpty();
                gv_convoyP1 = c_invalidPingId;
                gv_convoyP2 = c_invalidPingId;
                gv_convoyP3 = c_invalidPingId;
                gv_convoyP4 = c_invalidPingId;
                gv_enemyG1 = UnitGroupEmpty();
                gv_enemyG2 = UnitGroupEmpty();
                gv_enemyG3 = UnitGroupEmpty();
                gv_enemyG4 = UnitGroupEmpty();
                gv_dustCycle = TimerCreate();
                gv_remainingConvoyCount = 8;
                gv_totalConvoyCount = 8;
                gv_objectiveEscortTheConvoy = c_invalidObjectiveId;
                gv_objectiveEscortTheConvoy2 = c_invalidObjectiveId;
            }
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
            void gf_playTransmissionMerc (soundlink lp_sound, text lp_text, fixed lp_time);
            point gf_AttackWaveSpawn ();
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_UntitledTrigger001;
            trigger gt_Init01LoadData;
            trigger gt_Init02Players;
            trigger gt_Init03LoadingComplete;
            trigger gt_Init04Technology;
            trigger gt_Init05Units;
            trigger gt_Init06MusicSound;
            trigger gt_Init07Environment;
            trigger gt_Init08Difficulties;
            trigger gt_DebugCantFail;
            trigger gt_tIntro;
            trigger gt_showDanPortrait;
            trigger gt_tDustStormBegin;
            trigger gt_tDustCycle;
            trigger gt_tDustStormEnd;
            trigger gt_tConvoyA;
            trigger gt_tConvoyB;
            trigger gt_tConvoyC;
            trigger gt_tConvoyD;
            trigger gt_tConvoyE;
            trigger gt_tConvoyFail;
            trigger gt_tMissionFail;
            trigger gt_tMissionSuccess;
            trigger gt_DustStormCycle;
            trigger gt_DustStormExpire;
            trigger gt_EnemyFollowsConvoy;
            trigger gt_FriendlyFireOff;
            trigger gt_ConvoyDies;
            trigger gt_EvacShuttle;
            trigger gt_EvacShuttleLeaves;
            trigger gt_Convoy4Spawn;
            trigger gt_Convoy4Rally;
            trigger gt_Convoy4Home;
            trigger gt_Convoy1Warning;
            trigger gt_Convoy1Spawn;
            trigger gt_Convoy1Rally;
            trigger gt_Convoy1Home;
            trigger gt_Convoy3Warning;
            trigger gt_Convoy3Spawn;
            trigger gt_Convoy3Rally;
            trigger gt_Convoy3Rally3;
            trigger gt_Convoy3Home;
            trigger gt_Convoy2Warning;
            trigger gt_Convoy2Spawn;
            trigger gt_Convoy2Rally;
            trigger gt_Convoy2Rally2;
            trigger gt_Convoy2Rally6;
            trigger gt_Convoy2Home;
            trigger gt_Convoy4Warning2;
            trigger gt_Convoy4Spawn2;
            trigger gt_Convoy4Rally2;
            trigger gt_Convoy4Home2;
            trigger gt_Convoy3Warning2;
            trigger gt_Convoy3Spawn2;
            trigger gt_Convoy3Rally2;
            trigger gt_Convoy3Home2;
            trigger gt_Convoy1Warning2;
            trigger gt_Convoy1Spawn2;
            trigger gt_Convoy1Rally2;
            trigger gt_Convoy1Home2;
            trigger gt_Convoy2Warning2;
            trigger gt_Convoy2Spawn2;
            trigger gt_Convoy2Rally4;
            trigger gt_Convoy2Rally3;
            trigger gt_Convoy2Rally5;
            trigger gt_Convoy2Home2;
            trigger gt_test;
            trigger gt_StartGameQ;
            trigger gt_UpdateConvoyCount;
            trigger gt_EnemyAttackingQ;
            trigger gt_DefeatBaseDead;
            trigger gt_VictoryPrimaryObjectiveComplete;
            trigger gt_VictorySequence;
            trigger gt_VictoryFanfareQ;
            trigger gt_Victory;
            trigger gt_Defeat;
            trigger gt_StartAI;
            trigger gt_DustStormBaseAttack;
            trigger gt_AttackConvoySpawn2;
            trigger gt_SetupAttackWaveSpawn;
            trigger gt_AIAttackWaves;
            trigger gt_AttackWave01;
            trigger gt_AttackWave02;
            trigger gt_AttackWave03;
            trigger gt_AttackWave04;
            trigger gt_AttackWave05;
            trigger gt_AttackWave06;
            trigger gt_AttackWave07;
            trigger gt_Bullies;
            trigger gt_ObjectiveEscortTheConvoyCreate2;
            trigger gt_ObjectiveEscortTheConvoyComplete2;
            trigger gt_ObjectiveEscortTheConvoyUpdate2;
            trigger gt_ObjectiveEscortTheConvoyFailed2;
            trigger gt_ObjectiveEscortTheConvoyCreate3;
            trigger gt_ObjectiveEscortTheConvoyComplete3;
            trigger gt_ObjectiveEscortTheConvoyUpdate3;
            //--------------------------------------------------------------------------------------------------
            // Custom AI Functions
            //--------------------------------------------------------------------------------------------------
            string[17] cai_playerAI;
            //--------------------------------------------------------------------------------------------------
            void InitCustomAI () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    cai_playerAI[init_i] = null;
                }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_start (string ai, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                cai_playerAI[p] = ai;
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_start(p); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_setDefGather(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            string cai_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_getCustomData(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_getLastWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_run (int p, playergroup target) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_run(p, target); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_stop (string ai) {
                if (ai == &quot;aiF917F4D7&quot;) { aiF917F4D7_waves_stop(); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_run (int w, int p, playergroup target, bool wait) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_wave_run(w, p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_enable (int w, int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { aiF917F4D7_wave_enable(w, p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool cai_wave_isEnabled (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_isEnabled(w, p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup cai_wave_createdUnits (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_createdUnits(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_wave_createdWave (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiF917F4D7&quot;) { return aiF917F4D7_wave_createdWave(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_startall () {
                AICampaignStart(3);
                AICampaignStart(4);
                AICampaignStart(5);
            }
            //--------------------------------------------------------------------------------------------------
            void cai_runall () {
                playergroup target = PlayerGroupEmpty();
            }
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            trigger auto_gf_RunMissionEvent_Trigger = null;
            trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
            fixed auto_gf_RunMissionEvent_lp_missionEventTime;
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
                auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
                auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
                if (auto_gf_RunMissionEvent_Trigger == null) {
                    auto_gf_RunMissionEvent_Trigger = TriggerCreate(&quot;auto_gf_RunMissionEvent_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
            }
            bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
                fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
                // Implementation
                while (!((GameGetMissionTime() &gt;= lp_missionEventTime))) {
                    Wait(0.5, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_missionEventTrigger, true, false);
                }
                return true;
            }
            void gf_playTransmissionMerc (soundlink lp_sound, text lp_text, fixed lp_time) {
                // Variable Declarations
                timer lv_timer;
                int lv_var;
                // Variable Initialization
                lv_timer = TimerCreate();
                // Implementation
                TriggerExecute(gt_showDanPortrait, true, false);
                TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, lp_sound, StringExternal(&quot;Param/Value/380BC15C&quot;), lp_text, 90.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                Wait(lp_time, c_timeReal);
                PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), PlayerGroupAll(), false, false);
                TransmissionClearAll();
                TriggerStop(gt_showDanPortrait);
                UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
            }
            point gf_AttackWaveSpawn () {
                int auto9A2E02E3_ae;
                int auto9A2E02E3_ai;
                // Variable Declarations
                int lv_mapSide;
                int lv_spawnLocationIter;
                // Variable Initialization
                // Implementation
                lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
                auto9A2E02E3_ae = 10;
                auto9A2E02E3_ai = 1;
                lv_spawnLocationIter = 1;
                for ( ; ( (auto9A2E02E3_ai &gt;= 0 &amp;&amp; lv_spawnLocationIter &lt;= auto9A2E02E3_ae) || (auto9A2E02E3_ai &lt;= 0 &amp;&amp; lv_spawnLocationIter &gt;= auto9A2E02E3_ae) ) ; lv_spawnLocationIter += auto9A2E02E3_ai ) {
                    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt; RandomInt(2, 5))) {
                        return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
                    }
                }
                return RegionGetCenter(RegionFromId(9));
            }
            trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
            trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
            fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
                auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
                auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
                if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
                    auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate(&quot;auto_gf_RunAttackWaveatMissionTime_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
            }
            bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
                fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
                // Implementation
                while (!((lp_time &lt;= GameGetMissionTime()))) {
                    Wait(0.3, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_attackWave, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Untitled Trigger 001
            //--------------------------------------------------------------------------------------------------
            bool gt_UntitledTrigger001_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UntitledTrigger001_Init () {
                gt_UntitledTrigger001 = TriggerCreate(&quot;gt_UntitledTrigger001_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 01 Load Data
            //--------------------------------------------------------------------------------------------------
            bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
                playergroup auto0B258D10_g;
                int auto0B258D10_p;
                string auto834F8A5E_val;
                // Variable Declarations
                int lv_indexPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_Init02Players, true, false);
                libCOMI_gf_LoadCoopMission(&quot;COOP_Placeholder&quot;, gt_Init03LoadingComplete);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init01LoadData_Init () {
                gt_Init01LoadData = TriggerCreate(&quot;gt_Init01LoadData_Func&quot;);
                TriggerAddEventMapInit(gt_Init01LoadData);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 02 Players
            //--------------------------------------------------------------------------------------------------
            bool gt_Init02Players_Func (bool testConds, bool runActions) {
                playergroup autoE0EF2853_g;
                int autoE0EF2853_p;
                playergroup autoB969537F_g;
                int autoB969537F_p;
                // Variable Declarations
                int lv_playerIterEnemy;
                int lv_playerIterAlly;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_SetPlayerGroupAlliance(libCOMI_gf_HumanPlayers(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
                PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
                libNtve_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                autoE0EF2853_g = gv_enemyGroup; 
                autoE0EF2853_p = 1;
                for ( ; autoE0EF2853_p &lt;= PlayerGroupCount(autoE0EF2853_g) ; autoE0EF2853_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p)) ) {
                    lv_playerIterEnemy = PlayerGroupPlayer(autoE0EF2853_g, autoE0EF2853_p);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateMineralCostIgnored, true);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateVespeneCostIgnored, true);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateFoodIgnored, true);
                    PlayerSetColorIndex(lv_playerIterEnemy, libCOMI_gf_EnemyPlayerColor(), true);
                    autoB969537F_g = libCOMI_gf_HumanPlayers();
                    autoB969537F_p = 1;
                    for ( ; autoB969537F_p &lt;= PlayerGroupCount(autoB969537F_g) ; autoB969537F_p += BoolToInt(lv_playerIterAlly == PlayerGroupPlayer(autoB969537F_g, autoB969537F_p)) ) {
                        lv_playerIterAlly = PlayerGroupPlayer(autoB969537F_g, autoB969537F_p);
                        libNtve_gf_SetAlliance(lv_playerIterAlly, lv_playerIterEnemy, libNtve_ge_AllianceSetting_Enemy);
                    }
                }
                PlayerSetAlliance(gv_pLAYER_03_ENEMY, c_allianceIdPower, gv_pLAYER_04_ENEMY, true);
                PlayerSetAlliance(gv_pLAYER_04_ENEMY, c_allianceIdPower, gv_pLAYER_03_ENEMY, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init02Players_Init () {
                gt_Init02Players = TriggerCreate(&quot;gt_Init02Players_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 03 Loading Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_Init04Technology, true, false);
                libCOMI_gf_PurchaseStorymodeTech();
                TriggerExecute(gt_Init05Units, true, false);
                TriggerExecute(gt_Init06MusicSound, true, false);
                TriggerExecute(gt_Init07Environment, true, false);
                TriggerExecute(gt_Init08Difficulties, true, false);
                libCOMI_gf_PlayMapIntroZoom(true);
                TriggerExecute(gt_StartAI, true, false);
                TriggerExecute(gt_StartGameQ, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init03LoadingComplete_Init () {
                gt_Init03LoadingComplete = TriggerCreate(&quot;gt_Init03LoadingComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 04 Technology
            //--------------------------------------------------------------------------------------------------
            bool gt_Init04Technology_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init04Technology_Init () {
                gt_Init04Technology = TriggerCreate(&quot;gt_Init04Technology_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 05 Units
            //--------------------------------------------------------------------------------------------------
            bool gt_Init05Units_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
                libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init05Units_Init () {
                gt_Init05Units = TriggerCreate(&quot;gt_Init05Units_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 06 Music/Sound
            //--------------------------------------------------------------------------------------------------
            bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init06MusicSound_Init () {
                gt_Init06MusicSound = TriggerCreate(&quot;gt_Init06MusicSound_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 07 Environment
            //--------------------------------------------------------------------------------------------------
            bool gt_Init07Environment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                GameTimeOfDaySet(&quot;08:00:00&quot;);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(49), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(49), true, false);
                VisExploreArea(1, RegionFromId(15), true, false);
                VisExploreArea(1, RegionFromId(12), true, false);
                VisExploreArea(2, RegionFromId(15), true, false);
                VisExploreArea(2, RegionFromId(12), true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init07Environment_Init () {
                gt_Init07Environment = TriggerCreate(&quot;gt_Init07Environment_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 08 Difficulties
            //--------------------------------------------------------------------------------------------------
            bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_bonusObjectiveLife;
                fixed lv_mainObjectiveLife;
                // Variable Initialization
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Init08Difficulties_Init () {
                gt_Init08Difficulties = TriggerCreate(&quot;gt_Init08Difficulties_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Can&apos;t Fail
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugCantFail_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerModifyPropertyFixed(gv_pLAYER_01_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                PlayerModifyPropertyFixed(gv_pLAYER_02_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                TriggerEnable(gt_DefeatBaseDead, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DebugCantFail_Init () {
                gt_DebugCantFail = TriggerCreate(&quot;gt_DebugCantFail_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugCantFail, c_playerAny, &quot;cantfail&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tIntro
            //--------------------------------------------------------------------------------------------------
            bool gt_tIntro_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
               // SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
               // TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel(&quot;AdjutantPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;ChallengescombinedAdjutant00005&quot;, -1), StringExternal(&quot;Param/Value/2EAEEDE8&quot;), StringExternal(&quot;Param/Value/A88B8AB1&quot;), 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
              //  SoundPlayForPlayer(SoundLink(&quot;StaticCloudSparkBurstLong&quot;, -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
             //   Wait(4.0, c_timeGame);
              //  gf_playTransmissionMerc(SoundLink(&quot;IntroA1&quot;, -1), StringExternal(&quot;Param/Value/BC3E8A85&quot;), 7.0);
                Wait(2.0, c_timeGame);
                gf_playTransmissionMerc(SoundLink(&quot;IntroA2&quot;, -1), StringExternal(&quot;Param/Value/E8D91ADE&quot;), 4.5);
                Wait(1.0, c_timeGame);
                gf_playTransmissionMerc(SoundLink(&quot;IntroA3&quot;, -1), StringExternal(&quot;Param/Value/2627F8AA&quot;), 7.78);
                gf_playTransmissionMerc(SoundLink(&quot;IntroA4&quot;, -1), StringExternal(&quot;Param/Value/3D592A2E&quot;), 6.87);
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate2, true, true);
                Wait(2.0, c_timeGame);
                gf_playTransmissionMerc(SoundLink(&quot;IntroA5&quot;, -1), StringExternal(&quot;Param/Value/A0E3286E&quot;), 7.78);
                Wait(10.0, c_timeGame);
                gf_playTransmissionMerc(SoundLink(&quot;IntroA6&quot;, -1), StringExternal(&quot;Param/Value/65A52293&quot;), 10.0);
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate3, true, true);
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tIntro_Init () {
                gt_tIntro = TriggerCreate(&quot;gt_tIntro_Func&quot;);
               // TriggerAddEventTimeElapsed(gt_tIntro, 10.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: showDanPortrait
            //--------------------------------------------------------------------------------------------------
            bool gt_showDanPortrait_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                while (true) {
                    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(&quot;HellionPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), SoundLink(&quot;Hellion_MercTalk&quot;, -1), 0.0, c_transmissionDurationAdd, false);
                    Wait(1.097, c_timeReal);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_showDanPortrait_Init () {
                gt_showDanPortrait = TriggerCreate(&quot;gt_showDanPortrait_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tDustStormBegin
            //--------------------------------------------------------------------------------------------------
            bool gt_tDustStormBegin_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;DustStormIntro&quot;, -1), StringExternal(&quot;Param/Value/12229EFE&quot;), 15.1);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tDustStormBegin_Init () {
                gt_tDustStormBegin = TriggerCreate(&quot;gt_tDustStormBegin_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tDustCycle
            //--------------------------------------------------------------------------------------------------
            bool gt_tDustCycle_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;DustStormCycle&quot;, -1), StringExternal(&quot;Param/Value/08CE54FD&quot;), 3.78);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tDustCycle_Init () {
                gt_tDustCycle = TriggerCreate(&quot;gt_tDustCycle_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tDustStormEnd
            //--------------------------------------------------------------------------------------------------
            bool gt_tDustStormEnd_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;DustStormEnd&quot;, -1), StringExternal(&quot;Param/Value/AF4214BB&quot;), 5.12);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tDustStormEnd_Init () {
                gt_tDustStormEnd = TriggerCreate(&quot;gt_tDustStormEnd_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tConvoyA
            //--------------------------------------------------------------------------------------------------
            bool gt_tConvoyA_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;ConvoyA&quot;, -1), StringExternal(&quot;Param/Value/8E702021&quot;), 7.2);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tConvoyA_Init () {
                gt_tConvoyA = TriggerCreate(&quot;gt_tConvoyA_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tConvoyB
            //--------------------------------------------------------------------------------------------------
            bool gt_tConvoyB_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;ConvoyB&quot;, -1), StringExternal(&quot;Param/Value/ACDDD865&quot;), 5.27);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tConvoyB_Init () {
                gt_tConvoyB = TriggerCreate(&quot;gt_tConvoyB_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tConvoyC
            //--------------------------------------------------------------------------------------------------
            bool gt_tConvoyC_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;ConvoyC&quot;, -1), StringExternal(&quot;Param/Value/2CA9D138&quot;), 4.07);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tConvoyC_Init () {
                gt_tConvoyC = TriggerCreate(&quot;gt_tConvoyC_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tConvoyD
            //--------------------------------------------------------------------------------------------------
            bool gt_tConvoyD_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;ConvoyD&quot;, -1), StringExternal(&quot;Param/Value/C974137E&quot;), 4.13);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tConvoyD_Init () {
                gt_tConvoyD = TriggerCreate(&quot;gt_tConvoyD_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tConvoyE
            //--------------------------------------------------------------------------------------------------
            bool gt_tConvoyE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;ConvoyE&quot;, -1), StringExternal(&quot;Param/Value/0446D3D3&quot;), 13.6);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tConvoyE_Init () {
                gt_tConvoyE = TriggerCreate(&quot;gt_tConvoyE_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tConvoyFail
            //--------------------------------------------------------------------------------------------------
            bool gt_tConvoyFail_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_danBoolean == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_danBoolean = true;
                gf_playTransmissionMerc(SoundLink(&quot;ConvoyFail&quot;, -1), StringExternal(&quot;Param/Value/287E8D9C&quot;), 16.2);
                gv_danBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tConvoyFail_Init () {
                gt_tConvoyFail = TriggerCreate(&quot;gt_tConvoyFail_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tMissionFail
            //--------------------------------------------------------------------------------------------------
            bool gt_tMissionFail_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionClearAll();
                gf_playTransmissionMerc(SoundLink(&quot;MissionFail&quot;, -1), StringExternal(&quot;Param/Value/8E0080FF&quot;), 8.46);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tMissionFail_Init () {
                gt_tMissionFail = TriggerCreate(&quot;gt_tMissionFail_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: tMissionSuccess
            //--------------------------------------------------------------------------------------------------
            bool gt_tMissionSuccess_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionClearAll();
                gf_playTransmissionMerc(SoundLink(&quot;MissionSuccess&quot;, -1), StringExternal(&quot;Param/Value/EF4E8B44&quot;), 16.4);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_tMissionSuccess_Init () {
                gt_tMissionSuccess = TriggerCreate(&quot;gt_tMissionSuccess_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dust Storm Cycle
            //--------------------------------------------------------------------------------------------------
            bool gt_DustStormCycle_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TimerGetRemaining(gv_dustCycle) == 0.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_dustStormCounter == 0)) {
                    TriggerExecute(gt_tDustStormBegin, true, false);
                }
                else {
                    TriggerExecute(gt_tDustCycle, true, false);
                }
                gv_dustBaseBoolean = true;
                gv_dustStormCounter += 1;
                libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(PlayerGroupAlliance(c_playerGroupEnemy, 1), false);
                PlayerSetLighting(1, &quot;AgriaSunset&quot;, 15.0);
                PlayerSetLighting(2, &quot;AgriaSunset&quot;, 15.0);
                libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(10), &quot;DustStorms&quot;);
                TimerStart(gv_dustCycle, 120.0, false, c_timeGame);
                Wait(RandomInt(20, 60), c_timeGame);
                TriggerExecute(gt_DustStormBaseAttack, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DustStormCycle_Init () {
                gt_DustStormCycle = TriggerCreate(&quot;gt_DustStormCycle_Func&quot;);
                TriggerAddEventTimePeriodic(gt_DustStormCycle, 300.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dust Storm Expire
            //--------------------------------------------------------------------------------------------------
            bool gt_DustStormExpire_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_tDustStormEnd, true, false);
                libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(PlayerGroupAlliance(c_playerGroupEnemy, 1), true);
                PlayerSetLighting(1, &quot;KorhalOutskirts&quot;, 9.0);
                PlayerSetLighting(2, &quot;KorhalOutskirts&quot;, 9.0);
                libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(10), &quot;DustStorms&quot;);
                gv_dustBaseBoolean = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DustStormExpire_Init () {
                gt_DustStormExpire = TriggerCreate(&quot;gt_DustStormExpire_Func&quot;);
                TriggerAddEventTimer(gt_DustStormExpire, gv_dustCycle);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Follows Convoy
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyFollowsConvoy_Func (bool testConds, bool runActions) {
                int auto0B41EA6E_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto0B41EA6E_val = gv_convoySpawnCounter;
                if (auto0B41EA6E_val == 1) {
                }
                else if (auto0B41EA6E_val == 2) {
                    UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                }
                else if (auto0B41EA6E_val == 3) {
                    UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                }
                else if (auto0B41EA6E_val == 4) {
                    UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                }
                else if (auto0B41EA6E_val == 5) {
                    UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                }
                else if (auto0B41EA6E_val == 6) {
                    UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyFollowsConvoy_Init () {
                gt_EnemyFollowsConvoy = TriggerCreate(&quot;gt_EnemyFollowsConvoy_Func&quot;);
                TriggerAddEventTimePeriodic(gt_EnemyFollowsConvoy, 2.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Friendly Fire Off
            //--------------------------------------------------------------------------------------------------
            bool gt_FriendlyFireOff_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnitTargetUnit()) == 5))) {
                        return false;
                    }
                    if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((GameGetMissionTime() &gt;= 1200.0) &amp;&amp; (UnitGroupHasUnit(gv_convoyG2, EventUnit()) == true)) {
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FriendlyFireOff_Init () {
                gt_FriendlyFireOff = TriggerCreate(&quot;gt_FriendlyFireOff_Func&quot;);
                TriggerAddEventUnitAbility(gt_FriendlyFireOff, null, AbilityCommand(&quot;attack&quot;, 0), c_abilEffectStageApproach, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_ConvoyDies_Func (bool testConds, bool runActions) {
                unit auto3F7EFD40_val;
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_convoysLost += 1;
                auto3F7EFD40_val = EventUnit();
                if (auto3F7EFD40_val == UnitGroupUnit(gv_convoyG1, 1)) {
                    PingDestroy(gv_convoyP1);
                }
                else if (auto3F7EFD40_val == UnitGroupUnit(gv_convoyG2, 1)) {
                    PingDestroy(gv_convoyP2);
                }
                else if (auto3F7EFD40_val == UnitGroupUnit(gv_convoyG3, 1)) {
                    PingDestroy(gv_convoyP3);
                }
                else if (auto3F7EFD40_val == UnitGroupUnit(gv_convoyG4, 1)) {
                    PingDestroy(gv_convoyP4);
                }
                else {
                }
                if ((gv_convoysLost == 2)) {
                    TriggerExecute(gt_tMissionFail, true, true);
                    TriggerExecute(gt_Defeat, true, false);
                }
                else {
                    TriggerExecute(gt_tConvoyFail, true, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ConvoyDies_Init () {
                gt_ConvoyDies = TriggerCreate(&quot;gt_ConvoyDies_Func&quot;);
                TriggerAddEventUnitDied(gt_ConvoyDies, UnitRefFromUnit(UnitGroupUnit(gv_convoyG1, 1)));
                TriggerAddEventUnitDied(gt_ConvoyDies, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)));
                TriggerAddEventUnitDied(gt_ConvoyDies, UnitRefFromUnit(UnitGroupUnit(gv_convoyG3, 1)));
                TriggerAddEventUnitDied(gt_ConvoyDies, UnitRefFromUnit(UnitGroupUnit(gv_convoyG4, 1)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Evac Shuttle
            //--------------------------------------------------------------------------------------------------
            bool gt_EvacShuttle_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SendSplitMissionTransmission(&quot;DefendSucces&quot;, true, 1, -1);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;SpecialOpsDropship&quot;, 0, 5, PointFromId(2124432642));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1634216977)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EvacShuttle_Init () {
                gt_EvacShuttle = TriggerCreate(&quot;gt_EvacShuttle_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Evac Shuttle Leaves
            //--------------------------------------------------------------------------------------------------
            bool gt_EvacShuttleLeaves_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitRemove(EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EvacShuttleLeaves_Init () {
                gt_EvacShuttleLeaves = TriggerCreate(&quot;gt_EvacShuttleLeaves_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_EvacShuttleLeaves, null, PointFromId(1634216977), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy4Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy4Spawn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(67760863), 270.0);
                UnitGroupAdd(gv_convoyG4, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                RegionAttachToUnit(RegionFromId(17), UnitLastCreated(), Point(0.0, 0.0));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG4, 1)), null);
                TransmissionSendForPlayerSelect(libCOMI_gf_HumanPlayers(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acObj_TerranAdjutant_175&quot;, -1), StringExternal(&quot;Param/Value/415CB859&quot;), StringExternal(&quot;Param/Value/9CA86420&quot;), 2.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                gv_convoyP4 = PingLastCreated();
                PingSetUnit(gv_convoyP4, UnitGroupUnit(gv_convoyG4, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG4, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1398547631)), c_orderQueueReplace);
                gv_convoySpawnCounter += 1;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy4Spawn_Init () {
                gt_Convoy4Spawn = TriggerCreate(&quot;gt_Convoy4Spawn_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy4Spawn, 90.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy4Rally
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy4Rally_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((lv_triggerIndex == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG4, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy4Rally_Init () {
                gt_Convoy4Rally = TriggerCreate(&quot;gt_Convoy4Rally_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy4Rally, UnitRefFromUnit(UnitGroupUnit(gv_convoyG4, 1)), PointFromId(1398547631), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy4Home
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy4Home_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitRemove(UnitGroupUnit(gv_convoyG4, 1));
                UnitGroupRemove(gv_convoyG4, UnitGroupUnit(gv_convoyG4, 1));
                libCOMI_gf_DestroyPingCoop(gv_convoyP4);
                Wait(2.0, c_timeGame);
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                TriggerExecute(gt_EvacShuttle, true, false);
                TriggerEnable(gt_Convoy1Home, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy4Home_Init () {
                gt_Convoy4Home = TriggerCreate(&quot;gt_Convoy4Home_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy4Home, UnitRefFromUnit(UnitGroupUnit(gv_convoyG4, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Warning_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SendSplitMissionTransmission(&quot;MainObjectiveEscortAlmostThere&quot;, true, -1, -1);
                MinimapPing(PlayerGroupAll(), PointFromId(508885450), 10.0, Color(0.39, 84.71, 6.67));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1362029477), 7.0, Color(8.63, 82.75, 10.59));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(511695555), 7.0, Color(0.00, 83.53, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1780735750), 7.0, Color(0.00, 80.78, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1704922324), 7.0, Color(0.00, 77.65, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(210827615), 7.0, Color(0.00, 85.10, 0.00));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Warning_Init () {
                gt_Convoy1Warning = TriggerCreate(&quot;gt_Convoy1Warning_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy1Warning, 430.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Spawn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(508885450), 270.0);
                UnitGroupAdd(gv_convoyG1, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                RegionAttachToUnit(RegionFromId(17), UnitLastCreated(), Point(0.0, 0.0));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG1, 1)), null);
                TriggerExecute(gt_tConvoyA, true, false);
                gv_convoyP1 = PingLastCreated();
                PingSetUnit(gv_convoyP1, UnitGroupUnit(gv_convoyG1, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG1, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1780735750)), c_orderQueueReplace);
                gv_convoySpawnCounter += 1;
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_AttackConvoySpawn2, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Spawn_Init () {
                gt_Convoy1Spawn = TriggerCreate(&quot;gt_Convoy1Spawn_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy1Spawn, 460.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Rally
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Rally_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG1, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Rally_Init () {
                gt_Convoy1Rally = TriggerCreate(&quot;gt_Convoy1Rally_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy1Rally, UnitRefFromUnit(UnitGroupUnit(gv_convoyG1, 1)), PointFromId(1780735750), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Home
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Home_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitRemove(UnitGroupUnit(gv_convoyG1, 1));
                UnitGroupRemove(gv_convoyG1, UnitGroupUnit(gv_convoyG1, 1));
                libCOMI_gf_DestroyPingCoop(gv_convoyP1);
                Wait(2.0, c_timeGame);
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                TriggerExecute(gt_EvacShuttle, true, false);
                TriggerEnable(gt_Convoy3Home, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Home_Init () {
                gt_Convoy1Home = TriggerCreate(&quot;gt_Convoy1Home_Func&quot;);
                TriggerEnable(gt_Convoy1Home, false);
                TriggerAddEventUnitRangePoint(gt_Convoy1Home, UnitRefFromUnit(UnitGroupUnit(gv_convoyG1, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Warning_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SendSplitMissionTransmission(&quot;MainObjectiveEscortAlmostThere&quot;, true, -1, -1);
                MinimapPing(PlayerGroupAll(), PointFromId(1524762657), 5.0, Color(0.39, 84.71, 6.67));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(772748157), 7.0, Color(8.63, 82.75, 10.59));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1120994701), 7.0, Color(0.00, 83.53, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(450497670), 7.0, Color(0.00, 80.78, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1971916485), 7.0, Color(0.00, 85.10, 0.00));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Warning_Init () {
                gt_Convoy3Warning = TriggerCreate(&quot;gt_Convoy3Warning_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy3Warning, 600.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Spawn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(1524762657), 270.0);
                UnitGroupAdd(gv_convoyG3, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                RegionAttachToUnit(RegionFromId(17), UnitLastCreated(), Point(0.0, 0.0));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG3, 1)), null);
                TriggerExecute(gt_tConvoyB, true, false);
                gv_convoyP3 = PingLastCreated();
                PingSetUnit(gv_convoyP3, UnitGroupUnit(gv_convoyG3, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG3, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1120994701)), c_orderQueueReplace);
                gv_convoySpawnCounter += 1;
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_AttackConvoySpawn2, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Spawn_Init () {
                gt_Convoy3Spawn = TriggerCreate(&quot;gt_Convoy3Spawn_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy3Spawn, 630.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Rally
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Rally_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG3, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(450497670)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Rally_Init () {
                gt_Convoy3Rally = TriggerCreate(&quot;gt_Convoy3Rally_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy3Rally, UnitRefFromUnit(UnitGroupUnit(gv_convoyG3, 1)), PointFromId(1120994701), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Rally 3
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Rally3_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG3, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Rally3_Init () {
                gt_Convoy3Rally3 = TriggerCreate(&quot;gt_Convoy3Rally3_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy3Rally3, UnitRefFromUnit(UnitGroupUnit(gv_convoyG3, 1)), PointFromId(450497670), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Home
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Home_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_convoyG3, EventUnit());
                UnitRemove(EventUnit());
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                libCOMI_gf_DestroyPingCoop(gv_convoyP3);
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_EvacShuttle, true, false);
                TriggerEnable(gt_Convoy2Home, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Home_Init () {
                gt_Convoy3Home = TriggerCreate(&quot;gt_Convoy3Home_Func&quot;);
                TriggerEnable(gt_Convoy3Home, false);
                TriggerAddEventUnitRangePoint(gt_Convoy3Home, UnitRefFromUnit(UnitGroupUnit(gv_convoyG3, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Warning_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SendSplitMissionTransmission(&quot;MainObjectiveEscortAlmostThere&quot;, true, -1, -1);
                MinimapPing(PlayerGroupAll(), PointFromId(311514091), 5.0, Color(0.39, 84.71, 6.67));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1422201048), 7.0, Color(8.63, 82.75, 10.59));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(2126479957), 7.0, Color(0.00, 83.53, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1120994701), 7.0, Color(0.00, 80.78, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(450497670), 7.0, Color(0.00, 77.65, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1971916485), 7.0, Color(0.00, 85.10, 0.00));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Warning_Init () {
                gt_Convoy2Warning = TriggerCreate(&quot;gt_Convoy2Warning_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy2Warning, 810.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Spawn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(311514091), 270.0);
                UnitGroupAdd(gv_convoyG2, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                RegionAttachToUnit(RegionFromId(17), UnitLastCreated(), Point(0.0, 0.0));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG2, 1)), null);
                TriggerExecute(gt_tConvoyC, true, false);
                TransmissionSendForPlayerSelect(libCOMI_gf_HumanPlayers(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acObj_TerranAdjutant_175&quot;, -1), StringExternal(&quot;Param/Value/C953AF3C&quot;), StringExternal(&quot;Param/Value/F17498A9&quot;), 2.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                gv_convoyP2 = PingLastCreated();
                PingSetUnit(gv_convoyP2, UnitGroupUnit(gv_convoyG2, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(2126479957)), c_orderQueueReplace);
                gv_convoySpawnCounter += 1;
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_AttackConvoySpawn2, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Spawn_Init () {
                gt_Convoy2Spawn = TriggerCreate(&quot;gt_Convoy2Spawn_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy2Spawn, 840.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Rally
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Rally_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1120994701)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Rally_Init () {
                gt_Convoy2Rally = TriggerCreate(&quot;gt_Convoy2Rally_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy2Rally, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(2126479957), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Rally2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Rally2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(450497670)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Rally2_Init () {
                gt_Convoy2Rally2 = TriggerCreate(&quot;gt_Convoy2Rally2_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy2Rally2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(1120994701), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Rally6
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Rally6_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Rally6_Init () {
                gt_Convoy2Rally6 = TriggerCreate(&quot;gt_Convoy2Rally6_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy2Rally6, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(450497670), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Home
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Home_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_convoyG2, EventUnit());
                UnitRemove(EventUnit());
                libCOMI_gf_DestroyPingCoop(gv_convoyP2);
                Wait(2.0, c_timeGame);
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                TriggerExecute(gt_EvacShuttle, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Home_Init () {
                gt_Convoy2Home = TriggerCreate(&quot;gt_Convoy2Home_Func&quot;);
                TriggerEnable(gt_Convoy2Home, false);
                TriggerAddEventUnitRangePoint(gt_Convoy2Home, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy4Warning 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy4Warning2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SendSplitMissionTransmission(&quot;MainObjectiveEscortAlmostThere&quot;, true, -1, -1);
                MinimapPing(PlayerGroupAll(), PointFromId(67760863), 5.0, Color(0.39, 84.71, 6.67));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1398547631), 7.0, Color(8.63, 82.75, 10.59));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1971916485), 7.0, Color(0.00, 83.53, 0.00));
                Wait(1.0, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy4Warning2_Init () {
                gt_Convoy4Warning2 = TriggerCreate(&quot;gt_Convoy4Warning2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy4Warning2, 1020.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy4Spawn 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy4Spawn2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(67760863), 270.0);
                UnitGroupAdd(gv_convoyG4, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                RegionAttachToUnit(RegionFromId(17), UnitLastCreated(), Point(0.0, 0.0));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG4, 1)), null);
                TriggerExecute(gt_tConvoyD, true, false);
                TransmissionSendForPlayerSelect(libCOMI_gf_HumanPlayers(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;&quot;, &quot;Talk&quot;, SoundLink(&quot;acObj_TerranAdjutant_175&quot;, -1), StringExternal(&quot;Param/Value/DF5E9226&quot;), StringExternal(&quot;Param/Value/92686D34&quot;), 2.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
                gv_convoyP4 = PingLastCreated();
                PingSetUnit(gv_convoyP4, UnitGroupUnit(gv_convoyG4, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG4, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1398547631)), c_orderQueueReplace);
                gv_convoySpawnCounter += 1;
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_AttackConvoySpawn2, true, false);
                TriggerEnable(gt_Convoy4Home2, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy4Spawn2_Init () {
                gt_Convoy4Spawn2 = TriggerCreate(&quot;gt_Convoy4Spawn2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy4Spawn2, 1050.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy4Rally 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy4Rally2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerGetExecCount(gt_Convoy3Spawn) == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG4, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy4Rally2_Init () {
                gt_Convoy4Rally2 = TriggerCreate(&quot;gt_Convoy4Rally2_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy4Rally2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG4, 1)), PointFromId(1398547631), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy4Home 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy4Home2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 1000.0))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_convoyG4, EventUnit());
                UnitRemove(EventUnit());
                libCOMI_gf_DestroyPingCoop(gv_convoyP4);
                Wait(2.0, c_timeGame);
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                TriggerExecute(gt_EvacShuttle, true, false);
                TriggerEnable(gt_Convoy3Home2, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy4Home2_Init () {
                gt_Convoy4Home2 = TriggerCreate(&quot;gt_Convoy4Home2_Func&quot;);
                TriggerEnable(gt_Convoy4Home2, false);
                TriggerAddEventUnitRangePoint(gt_Convoy4Home2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG4, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Warning 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Warning2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SendSplitMissionTransmission(&quot;MainObjectiveEscortAlmostThere&quot;, true, -1, -1);
                MinimapPing(PlayerGroupAll(), PointFromId(1524762657), 5.0, Color(0.39, 84.71, 6.67));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(772748157), 7.0, Color(8.63, 82.75, 10.59));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1120994701), 7.0, Color(0.00, 83.53, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(450497670), 7.0, Color(0.00, 80.78, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(210827615), 7.0, Color(0.00, 77.65, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1971916485), 7.0, Color(0.00, 85.10, 0.00));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Warning2_Init () {
                gt_Convoy3Warning2 = TriggerCreate(&quot;gt_Convoy3Warning2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy3Warning2, 1020.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Spawn 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Spawn2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(1524762657), 270.0);
                UnitGroupAdd(gv_convoyG3, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG3, 1)), null);
                gv_convoyP3 = PingLastCreated();
                PingSetUnit(gv_convoyP3, UnitGroupUnit(gv_convoyG3, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG3, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1120994701)), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Spawn2_Init () {
                gt_Convoy3Spawn2 = TriggerCreate(&quot;gt_Convoy3Spawn2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy3Spawn2, 1050.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Rally 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Rally2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerGetExecCount(gt_Convoy3Home) == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG3, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Rally2_Init () {
                gt_Convoy3Rally2 = TriggerCreate(&quot;gt_Convoy3Rally2_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy3Rally2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG3, 1)), PointFromId(1120994701), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy3Home 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy3Home2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_convoyG3, EventUnit());
                UnitRemove(EventUnit());
                libCOMI_gf_DestroyPingCoop(gv_convoyP3);
                Wait(2.0, c_timeGame);
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                TriggerExecute(gt_EvacShuttle, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy3Home2_Init () {
                gt_Convoy3Home2 = TriggerCreate(&quot;gt_Convoy3Home2_Func&quot;);
                TriggerEnable(gt_Convoy3Home2, false);
                TriggerAddEventUnitRangePoint(gt_Convoy3Home2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG3, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Warning 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Warning2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_SendSplitMissionTransmission(&quot;MainObjectiveEscortAlmostThere&quot;, true, -1, -1);
                MinimapPing(PlayerGroupAll(), PointFromId(508885450), 5.0, Color(0.39, 84.71, 6.67));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1362029477), 7.0, Color(8.63, 82.75, 10.59));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(511695555), 7.0, Color(0.00, 83.53, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1780735750), 7.0, Color(0.00, 80.78, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1704922324), 7.0, Color(0.00, 77.65, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(210827615), 7.0, Color(0.00, 85.10, 0.00));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Warning2_Init () {
                gt_Convoy1Warning2 = TriggerCreate(&quot;gt_Convoy1Warning2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy1Warning2, 1290.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Spawn 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Spawn2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(508885450), 270.0);
                UnitGroupAdd(gv_convoyG1, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                RegionAttachToUnit(RegionFromId(17), UnitLastCreated(), Point(0.0, 0.0));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG1, 1)), null);
                TriggerExecute(gt_tConvoyE, true, false);
                gv_convoyP1 = PingLastCreated();
                PingSetUnit(gv_convoyP1, UnitGroupUnit(gv_convoyG1, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG1, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1780735750)), c_orderQueueReplace);
                gv_convoySpawnCounter += 1;
                TriggerEnable(gt_Convoy1Home2, true);
                Wait(2.0, c_timeGame);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Spawn2_Init () {
                gt_Convoy1Spawn2 = TriggerCreate(&quot;gt_Convoy1Spawn2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy1Spawn2, 1320.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Rally 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Rally2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 700.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG1, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Rally2_Init () {
                gt_Convoy1Rally2 = TriggerCreate(&quot;gt_Convoy1Rally2_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy1Rally2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG1, 1)), PointFromId(1780735750), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy1Home 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy1Home2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_convoyG1, EventUnit());
                UnitRemove(EventUnit());
                libCOMI_gf_DestroyPingCoop(gv_convoyP1);
                Wait(2.0, c_timeGame);
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                TriggerExecute(gt_EvacShuttle, true, false);
                TriggerEnable(gt_Convoy2Home2, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy1Home2_Init () {
                gt_Convoy1Home2 = TriggerCreate(&quot;gt_Convoy1Home2_Func&quot;);
                TriggerEnable(gt_Convoy1Home2, false);
                TriggerAddEventUnitRangePoint(gt_Convoy1Home2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG1, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Warning 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Warning2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                MinimapPing(PlayerGroupAll(), PointFromId(311514091), 5.0, Color(0.39, 84.71, 6.67));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1422201048), 7.0, Color(8.63, 82.75, 10.59));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(2126479957), 7.0, Color(0.00, 83.53, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1120994701), 7.0, Color(0.00, 80.78, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(450497670), 7.0, Color(0.00, 77.65, 0.00));
                Wait(1.0, c_timeGame);
                MinimapPing(PlayerGroupAll(), PointFromId(1971916485), 7.0, Color(0.00, 85.10, 0.00));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Warning2_Init () {
                gt_Convoy2Warning2 = TriggerCreate(&quot;gt_Convoy2Warning2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy2Warning2, 1290.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Spawn 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Spawn2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;ColonistTransport&quot;, 0, 5, PointFromId(311514091), 270.0);
                UnitGroupAdd(gv_convoyG2, UnitLastCreated());
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
                RegionAttachToUnit(RegionFromId(18), UnitLastCreated(), Point(0.0, 0.0));
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitGroupUnit(gv_convoyG2, 1)), null);
                gv_convoyP2 = PingLastCreated();
                PingSetUnit(gv_convoyP2, UnitGroupUnit(gv_convoyG2, 1));
                Wait(2.0, c_timeGame);
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(2126479957)), c_orderQueueReplace);
                Wait(2.0, c_timeGame);
                TriggerExecute(gt_AttackConvoySpawn2, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Spawn2_Init () {
                gt_Convoy2Spawn2 = TriggerCreate(&quot;gt_Convoy2Spawn2_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Convoy2Spawn2, 1320.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Rally 4
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Rally4_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 1300.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1120994701)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Rally4_Init () {
                gt_Convoy2Rally4 = TriggerCreate(&quot;gt_Convoy2Rally4_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy2Rally4, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(2126479957), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Rally3
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Rally3_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 1300.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Rally3_Init () {
                gt_Convoy2Rally3 = TriggerCreate(&quot;gt_Convoy2Rally3_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy2Rally3, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(1120994701), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Rally5
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Rally5_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((GameGetMissionTime() &gt; 1300.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupIssueOrder(gv_convoyG2, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), PointFromId(1971916485)), c_orderQueueReplace);
                lv_triggerIndex = 1;
                Wait(5.0, c_timeGame);
                lv_triggerIndex = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Rally5_Init () {
                gt_Convoy2Rally5 = TriggerCreate(&quot;gt_Convoy2Rally5_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_Convoy2Rally5, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(450497670), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Convoy2Home 2
            //--------------------------------------------------------------------------------------------------
            bool gt_Convoy2Home2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 5))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;ColonistTransport&quot;))) {
                        return false;
                    }
                    if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_convoyG2, EventUnit());
                UnitRemove(EventUnit());
                libCOMI_gf_DestroyPingCoop(gv_convoyP2);
                Wait(2.0, c_timeGame);
                gv_remainingConvoyCount -= 1;
                gv_convoyProgress += 1;
                TriggerExecute(gt_EvacShuttle, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Convoy2Home2_Init () {
                gt_Convoy2Home2 = TriggerCreate(&quot;gt_Convoy2Home2_Func&quot;);
                TriggerEnable(gt_Convoy2Home2, false);
                TriggerAddEventUnitRangePoint(gt_Convoy2Home2, UnitRefFromUnit(UnitGroupUnit(gv_convoyG2, 1)), PointFromId(1971916485), 1.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: test
            //--------------------------------------------------------------------------------------------------
            bool gt_test_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_EnableDisableCoopAIWavePings(false);
                AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), 3);
                AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), 4);
                PlayerSetLighting(1, &quot;AgriaSunset&quot;, 9.0);
                AINearestTownBullyRebuild(3, true);
                AIToggleBulliesInRegion(3, RegionFromId(11), false);
                AIToggleBulliesInRegion(3, RegionFromId(16), false);
                AINearestTownBullyRebuild(4, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_test_Init () {
                gt_test = TriggerCreate(&quot;gt_test_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Game Q
            //--------------------------------------------------------------------------------------------------
            bool gt_StartGameQ_Func (bool testConds, bool runActions) {
                // Variable Declarations
                region lv_enemyBase;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), 3);
                AISetBullyRebuildDelay(libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), libNtve_gf_DifficultyValueFixed(120.0, 120.0, 120.0, 120.0), 4);
                libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(10), &quot;DustStorms&quot;);
                libCOMI_gf_SetAllianceCoop(1, 5, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                libCOMI_gf_SetAllianceCoop(2, 5, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                libCOMI_gf_SetAllianceCoop(5, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                libCOMI_gf_SetAllianceCoop(5, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_01_USER, StringExternal(&quot;Param/Value/068743D5&quot;), null, PlayerStartLocation(gv_pLAYER_01_USER));
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_02_USER, StringExternal(&quot;Param/Value/187E0E6E&quot;), null, PlayerStartLocation(gv_pLAYER_02_USER));
                Wait(7.0, c_timeReal);
                TriggerQueueEnter();
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate2, true, true);
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate3, true, true);
                Wait(2.0, c_timeGame);
                gt_tIntro_Func(false, true);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartGameQ_Init () {
                gt_StartGameQ = TriggerCreate(&quot;gt_StartGameQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Update Convoy Count
            //--------------------------------------------------------------------------------------------------
            bool gt_UpdateConvoyCount_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_convoyProgress == 7)) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_tMissionSuccess, true, true);
                    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
                }
                TriggerExecute(gt_ObjectiveEscortTheConvoyUpdate3, true, false);
                TriggerExecute(gt_ObjectiveEscortTheConvoyUpdate2, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateConvoyCount_Init () {
                gt_UpdateConvoyCount = TriggerCreate(&quot;gt_UpdateConvoyCount_Func&quot;);
                TriggerAddEventTimePeriodic(gt_UpdateConvoyCount, 0.5, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Attacking Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                while (!((gv_danBoolean == false))) {
                    Wait(1.0, c_timeGame);
                }
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                Wait(20.0, c_timeAI);
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAttackingQ_Init () {
                gt_EnemyAttackingQ = TriggerCreate(&quot;gt_EnemyAttackingQ_Func&quot;);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Base Dead
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_cameraTarget;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                TriggerExecute(gt_ObjectiveEscortTheConvoyFailed2, true, false);
                if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true)) {
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/6166427B&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/7A60698B&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else {
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/FAF74290&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/D7FCB0EB&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                Wait(2.0, c_timeReal);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
                    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                    CameraPan(gv_pLAYER_01_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
                }
                if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_02_USER)) == false)) {
                    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                    CameraPan(gv_pLAYER_02_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
                }
                Wait(4.0, c_timeReal);
                UISetCursorVisible(PlayerGroupAll(), true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/2C1B6089&quot;));
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatBaseDead_Init () {
                gt_DefeatBaseDead = TriggerCreate(&quot;gt_DefeatBaseDead_Func&quot;);
                TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Primary Objective Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_VictorySequence, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryPrimaryObjectiveComplete_Init () {
                gt_VictoryPrimaryObjectiveComplete = TriggerCreate(&quot;gt_VictoryPrimaryObjectiveComplete_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Sequence
            //--------------------------------------------------------------------------------------------------
            bool gt_VictorySequence_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
                Wait(2.0, c_timeReal);
                TriggerExecute(gt_ObjectiveEscortTheConvoyComplete2, true, false);
                libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictorySequence_Init () {
                gt_VictorySequence = TriggerCreate(&quot;gt_VictorySequence_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Fanfare Q
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TransmissionClearAll();
                TriggerQueueEnter();
                libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
                libCOMI_gf_SendMissionTransmission(&quot;PrimaryObjectiveVictory&quot;, false, -1);
                UnitPauseAll(true);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
                CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/684A78B4&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/E5C8709E&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_WaitForMissionTransmission();
                Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Victory, true, false);
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryFanfareQ_Init () {
                gt_VictoryFanfareQ = TriggerCreate(&quot;gt_VictoryFanfareQ_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Victory_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverVictory);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Victory_Init () {
                gt_Victory = TriggerCreate(&quot;gt_Victory_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_Defeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Defeat_Init () {
                gt_Defeat = TriggerCreate(&quot;gt_Defeat_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start AI
            //--------------------------------------------------------------------------------------------------
            bool gt_StartAI_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
                libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
                TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
                TriggerExecute(gt_AIAttackWaves, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StartAI_Init () {
                gt_StartAI = TriggerCreate(&quot;gt_StartAI_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dust Storm Base Attack
            //--------------------------------------------------------------------------------------------------
            bool gt_DustStormBaseAttack_Func (bool testConds, bool runActions) {
                int auto05322590_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto05322590_val = gv_dustStormCounter;
                if (auto05322590_val == 2) {
                    Wait(2.0, c_timeGame);
                    TriggerExecute(gt_AttackWave02, true, false);
                }
                else if (auto05322590_val == 3) {
                    Wait(2.0, c_timeGame);
                    TriggerExecute(gt_AttackWave03, true, false);
                }
                else if (auto05322590_val == 4) {
                    Wait(2.0, c_timeGame);
                    TriggerExecute(gt_AttackWave04, true, false);
                }
                else if (auto05322590_val == 5) {
                    Wait(2.0, c_timeGame);
                    TriggerExecute(gt_AttackWave06, true, false);
                }
                else if (auto05322590_val == 6) {
                    Wait(2.0, c_timeGame);
                    TriggerExecute(gt_AttackWave07, true, false);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DustStormBaseAttack_Init () {
                gt_DustStormBaseAttack = TriggerCreate(&quot;gt_DustStormBaseAttack_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack ConvoySpawn2
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackConvoySpawn2_Func (bool testConds, bool runActions) {
                int autoD8F80223_val;
                int auto368343E4_val;
                int auto259CC4C7_ae;
                int auto259CC4C7_ai;
                int auto3D78A8E8_ae;
                int auto3D78A8E8_ai;
                int auto34A640A6_ae;
                int auto34A640A6_ai;
                int autoA9644C3F_ae;
                int autoA9644C3F_ai;
                int autoC6A66E8C_ae;
                int autoC6A66E8C_ai;
                int auto0B51753A_ae;
                int auto0B51753A_ai;
                int autoAF18055D_val;
                int auto3B69A6D0_ae;
                int auto3B69A6D0_ai;
                int autoBDB86CFB_ae;
                int autoBDB86CFB_ai;
                int autoE602DD82_ae;
                int autoE602DD82_ai;
                int auto28CB2B37_ae;
                int auto28CB2B37_ai;
                int auto117B9642_ae;
                int auto117B9642_ai;
                int auto375BE700_ae;
                int auto375BE700_ai;
                int auto61519619_ae;
                int auto61519619_ai;
                int autoD53A88C4_ae;
                int autoD53A88C4_ai;
                int autoBA6740E8_ae;
                int autoBA6740E8_ai;
                int auto1534B294_ae;
                int auto1534B294_ai;
                int auto71703924_val;
                int auto0DB5B9D9_ae;
                int auto0DB5B9D9_ai;
                int auto13A4A4B4_ae;
                int auto13A4A4B4_ai;
                int auto921A8EDC_ae;
                int auto921A8EDC_ai;
                int auto0EF15D4E_ae;
                int auto0EF15D4E_ai;
                int auto6DCB0EE5_ae;
                int auto6DCB0EE5_ai;
                int auto054433E8_ae;
                int auto054433E8_ai;
                int autoBC60E4E1_ae;
                int autoBC60E4E1_ai;
                int auto1D3B456A_ae;
                int auto1D3B456A_ai;
                int auto30CB4CA4_ae;
                int auto30CB4CA4_ai;
                int autoBAAC7CC6_val;
                int autoE11348F1_ae;
                int autoE11348F1_ai;
                int auto6D277A71_ae;
                int auto6D277A71_ai;
                int autoF57E2197_ae;
                int autoF57E2197_ai;
                int auto34E329BC_ae;
                int auto34E329BC_ai;
                int auto18803B22_ae;
                int auto18803B22_ai;
                int autoEACA2008_ae;
                int autoEACA2008_ai;
                int auto5078C6C5_ae;
                int auto5078C6C5_ai;
                int auto7AB122F3_ae;
                int auto7AB122F3_ai;
                int auto5776F42B_ae;
                int auto5776F42B_ai;
                int auto90103352_ae;
                int auto90103352_ai;
                int auto0FAE80C3_ae;
                int auto0FAE80C3_ai;
                int autoC69EE025_ae;
                int autoC69EE025_ai;
                int auto5AB2C127_ae;
                int auto5AB2C127_ai;
                int auto35CF024D_ae;
                int auto35CF024D_ai;
                int autoD67C5616_val;
                int auto383243A4_ae;
                int auto383243A4_ai;
                int auto444E8121_ae;
                int auto444E8121_ai;
                int auto34009AAE_ae;
                int auto34009AAE_ai;
                int auto80B1E243_ae;
                int auto80B1E243_ai;
                int autoB65B75AE_ae;
                int autoB65B75AE_ai;
                int autoD04B77D1_ae;
                int autoD04B77D1_ai;
                int auto6DCF5420_ae;
                int auto6DCF5420_ai;
                int auto3C54CA6C_ae;
                int auto3C54CA6C_ai;
                int autoE82A2D35_ae;
                int autoE82A2D35_ai;
                int auto84CF1C2F_ae;
                int auto84CF1C2F_ai;
                int autoF75CD00E_ae;
                int autoF75CD00E_ai;
                int auto23ACEE3C_ae;
                int auto23ACEE3C_ai;
                int auto050CF56E_ae;
                int auto050CF56E_ai;
                int autoFF8A9B7B_ae;
                int autoFF8A9B7B_ai;
                int autoAA35B56A_ae;
                int autoAA35B56A_ai;
                int auto289BB107_ae;
                int auto289BB107_ai;
                int auto757EC03A_ae;
                int auto757EC03A_ai;
                int auto553C2471_ae;
                int auto553C2471_ai;
                int auto3E3EE975_ae;
                int auto3E3EE975_ai;
                int auto3AE61F14_ae;
                int auto3AE61F14_ai;
                int auto4C156325_ae;
                int auto4C156325_ai;
                int autoF0494CCE_ae;
                int autoF0494CCE_ai;
                int autoEECE2BB0_ae;
                int autoEECE2BB0_ai;
                int autoEBD2BA32_ae;
                int autoEBD2BA32_ai;
                int autoF3E79A96_ae;
                int autoF3E79A96_ai;
                int autoD2EB941F_ae;
                int autoD2EB941F_ai;
                int auto3B8CBE92_ae;
                int auto3B8CBE92_ai;
                int autoD5995286_ae;
                int autoD5995286_ai;
                int auto382EC75B_ae;
                int auto382EC75B_ai;
                int auto2AB3947A_ae;
                int auto2AB3947A_ai;
                int autoC4F69BCB_ae;
                int autoC4F69BCB_ai;
                int autoD3CCA3D0_ae;
                int autoD3CCA3D0_ai;
                int auto75A9A442_ae;
                int auto75A9A442_ai;
                int autoAE1FFF43_ae;
                int autoAE1FFF43_ai;
                // Variable Declarations
                int lv_wavevalue;
                int lv_index;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(5.0, c_timeGame);
                lv_wavevalue = RandomInt(1, 3);
                autoD8F80223_val = gv_convoySpawnCounter;
                if (autoD8F80223_val == 2) {
                    Wait(5.0, c_timeGame);
                    auto368343E4_val = lv_wavevalue;
                    if (auto368343E4_val == 1) {
                        auto259CC4C7_ae = 19;
                        auto259CC4C7_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto259CC4C7_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto259CC4C7_ae) || (auto259CC4C7_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto259CC4C7_ae) ) ; lv_index += auto259CC4C7_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 3, PointFromId(1231254673));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto3D78A8E8_ae = 9;
                        auto3D78A8E8_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto3D78A8E8_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto3D78A8E8_ae) || (auto3D78A8E8_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto3D78A8E8_ae) ) ; lv_index += auto3D78A8E8_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Baneling&quot;, 0, 3, PointFromId(1231254673));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (auto368343E4_val == 2) {
                        auto34A640A6_ae = 3;
                        auto34A640A6_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto34A640A6_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto34A640A6_ae) || (auto34A640A6_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto34A640A6_ae) ) ; lv_index += auto34A640A6_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 3, PointFromId(1231254673));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoA9644C3F_ae = 7;
                        autoA9644C3F_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoA9644C3F_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoA9644C3F_ae) || (autoA9644C3F_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoA9644C3F_ae) ) ; lv_index += autoA9644C3F_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 3, PointFromId(1231254673));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (auto368343E4_val == 3) {
                        autoC6A66E8C_ae = 7;
                        autoC6A66E8C_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoC6A66E8C_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoC6A66E8C_ae) || (autoC6A66E8C_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoC6A66E8C_ae) ) ; lv_index += autoC6A66E8C_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 3, PointFromId(1231254673));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto0B51753A_ae = 15;
                        auto0B51753A_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto0B51753A_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto0B51753A_ae) || (auto0B51753A_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto0B51753A_ae) ) ; lv_index += auto0B51753A_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 3, PointFromId(1231254673));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else if (autoD8F80223_val == 3) {
                    autoAF18055D_val = lv_wavevalue;
                    if (autoAF18055D_val == 1) {
                        auto3B69A6D0_ae = 17;
                        auto3B69A6D0_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto3B69A6D0_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto3B69A6D0_ae) || (auto3B69A6D0_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto3B69A6D0_ae) ) ; lv_index += auto3B69A6D0_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        autoBDB86CFB_ae = 9;
                        autoBDB86CFB_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoBDB86CFB_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoBDB86CFB_ae) || (autoBDB86CFB_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoBDB86CFB_ae) ) ; lv_index += autoBDB86CFB_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        autoE602DD82_ae = 3;
                        autoE602DD82_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoE602DD82_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoE602DD82_ae) || (autoE602DD82_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoE602DD82_ae) ) ; lv_index += autoE602DD82_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (autoAF18055D_val == 2) {
                        auto28CB2B37_ae = 5;
                        auto28CB2B37_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto28CB2B37_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto28CB2B37_ae) || (auto28CB2B37_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto28CB2B37_ae) ) ; lv_index += auto28CB2B37_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto117B9642_ae = 7;
                        auto117B9642_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto117B9642_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto117B9642_ae) || (auto117B9642_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto117B9642_ae) ) ; lv_index += auto117B9642_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto375BE700_ae = 3;
                        auto375BE700_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto375BE700_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto375BE700_ae) || (auto375BE700_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto375BE700_ae) ) ; lv_index += auto375BE700_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;InfestedAbomination&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (autoAF18055D_val == 3) {
                        auto61519619_ae = 17;
                        auto61519619_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto61519619_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto61519619_ae) || (auto61519619_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto61519619_ae) ) ; lv_index += auto61519619_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        autoD53A88C4_ae = 7;
                        autoD53A88C4_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoD53A88C4_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoD53A88C4_ae) || (autoD53A88C4_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoD53A88C4_ae) ) ; lv_index += autoD53A88C4_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        autoBA6740E8_ae = 3;
                        autoBA6740E8_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoBA6740E8_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoBA6740E8_ae) || (autoBA6740E8_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoBA6740E8_ae) ) ; lv_index += autoBA6740E8_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridDestroyer&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto1534B294_ae = 2;
                        auto1534B294_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto1534B294_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto1534B294_ae) || (auto1534B294_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto1534B294_ae) ) ; lv_index += auto1534B294_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ravager&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else {
                    }
                    UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                }
                else if (autoD8F80223_val == 4) {
                    Wait(8.0, c_timeGame);
                    auto71703924_val = lv_wavevalue;
                    if (auto71703924_val == 1) {
                        auto0DB5B9D9_ae = 11;
                        auto0DB5B9D9_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto0DB5B9D9_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto0DB5B9D9_ae) || (auto0DB5B9D9_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto0DB5B9D9_ae) ) ; lv_index += auto0DB5B9D9_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto13A4A4B4_ae = 3;
                        auto13A4A4B4_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto13A4A4B4_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto13A4A4B4_ae) || (auto13A4A4B4_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto13A4A4B4_ae) ) ; lv_index += auto13A4A4B4_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ravager&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto921A8EDC_ae = 11;
                        auto921A8EDC_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto921A8EDC_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto921A8EDC_ae) || (auto921A8EDC_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto921A8EDC_ae) ) ; lv_index += auto921A8EDC_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (auto71703924_val == 2) {
                        auto0EF15D4E_ae = 21;
                        auto0EF15D4E_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto0EF15D4E_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto0EF15D4E_ae) || (auto0EF15D4E_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto0EF15D4E_ae) ) ; lv_index += auto0EF15D4E_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto6DCB0EE5_ae = 2;
                        auto6DCB0EE5_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto6DCB0EE5_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto6DCB0EE5_ae) || (auto6DCB0EE5_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto6DCB0EE5_ae) ) ; lv_index += auto6DCB0EE5_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto054433E8_ae = 4;
                        auto054433E8_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto054433E8_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto054433E8_ae) || (auto054433E8_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto054433E8_ae) ) ; lv_index += auto054433E8_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;InfestedAbomination&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (auto71703924_val == 3) {
                        autoBC60E4E1_ae = 22;
                        autoBC60E4E1_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoBC60E4E1_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoBC60E4E1_ae) || (autoBC60E4E1_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoBC60E4E1_ae) ) ; lv_index += autoBC60E4E1_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto1D3B456A_ae = 10;
                        auto1D3B456A_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto1D3B456A_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto1D3B456A_ae) || (auto1D3B456A_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto1D3B456A_ae) ) ; lv_index += auto1D3B456A_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto30CB4CA4_ae = 9;
                        auto30CB4CA4_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto30CB4CA4_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto30CB4CA4_ae) || (auto30CB4CA4_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto30CB4CA4_ae) ) ; lv_index += auto30CB4CA4_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Mutalisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else if (autoD8F80223_val == 5) {
                    Wait(12.0, c_timeGame);
                    autoBAAC7CC6_val = lv_wavevalue;
                    if (autoBAAC7CC6_val == 1) {
                        autoE11348F1_ae = 31;
                        autoE11348F1_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoE11348F1_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoE11348F1_ae) || (autoE11348F1_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoE11348F1_ae) ) ; lv_index += autoE11348F1_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto6D277A71_ae = 4;
                        auto6D277A71_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto6D277A71_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto6D277A71_ae) || (auto6D277A71_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto6D277A71_ae) ) ; lv_index += auto6D277A71_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        autoF57E2197_ae = 11;
                        autoF57E2197_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoF57E2197_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoF57E2197_ae) || (autoF57E2197_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoF57E2197_ae) ) ; lv_index += autoF57E2197_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto34E329BC_ae = 10;
                        auto34E329BC_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto34E329BC_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto34E329BC_ae) || (auto34E329BC_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto34E329BC_ae) ) ; lv_index += auto34E329BC_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (autoBAAC7CC6_val == 2) {
                        auto18803B22_ae = 21;
                        auto18803B22_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto18803B22_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto18803B22_ae) || (auto18803B22_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto18803B22_ae) ) ; lv_index += auto18803B22_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        autoEACA2008_ae = 3;
                        autoEACA2008_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoEACA2008_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoEACA2008_ae) || (autoEACA2008_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoEACA2008_ae) ) ; lv_index += autoEACA2008_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;InfestedAbomination&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto5078C6C5_ae = 7;
                        auto5078C6C5_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto5078C6C5_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto5078C6C5_ae) || (auto5078C6C5_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto5078C6C5_ae) ) ; lv_index += auto5078C6C5_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto7AB122F3_ae = 6;
                        auto7AB122F3_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto7AB122F3_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto7AB122F3_ae) || (auto7AB122F3_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto7AB122F3_ae) ) ; lv_index += auto7AB122F3_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Baneling&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto5776F42B_ae = 1;
                        auto5776F42B_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto5776F42B_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto5776F42B_ae) || (auto5776F42B_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto5776F42B_ae) ) ; lv_index += auto5776F42B_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Omegalisk&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else if (autoBAAC7CC6_val == 3) {
                        auto90103352_ae = 25;
                        auto90103352_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto90103352_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto90103352_ae) || (auto90103352_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto90103352_ae) ) ; lv_index += auto90103352_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto0FAE80C3_ae = 2;
                        auto0FAE80C3_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto0FAE80C3_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto0FAE80C3_ae) || (auto0FAE80C3_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto0FAE80C3_ae) ) ; lv_index += auto0FAE80C3_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        autoC69EE025_ae = 7;
                        autoC69EE025_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoC69EE025_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoC69EE025_ae) || (autoC69EE025_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoC69EE025_ae) ) ; lv_index += autoC69EE025_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto5AB2C127_ae = 2;
                        auto5AB2C127_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto5AB2C127_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto5AB2C127_ae) || (auto5AB2C127_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto5AB2C127_ae) ) ; lv_index += auto5AB2C127_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridDestroyer&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        auto35CF024D_ae = 2;
                        auto35CF024D_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto35CF024D_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto35CF024D_ae) || (auto35CF024D_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto35CF024D_ae) ) ; lv_index += auto35CF024D_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridDominator&quot;, 0, 4, RegionGetCenter(RegionFromId(13)));
                            UnitGroupAdd(gv_enemyG3, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG3, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else if (autoD8F80223_val == 6) {
                    Wait(15.0, c_timeGame);
                    autoD67C5616_val = lv_wavevalue;
                    if (autoD67C5616_val == 1) {
                        auto383243A4_ae = 21;
                        auto383243A4_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto383243A4_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto383243A4_ae) || (auto383243A4_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto383243A4_ae) ) ; lv_index += auto383243A4_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto444E8121_ae = 8;
                        auto444E8121_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto444E8121_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto444E8121_ae) || (auto444E8121_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto444E8121_ae) ) ; lv_index += auto444E8121_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto34009AAE_ae = 5;
                        auto34009AAE_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto34009AAE_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto34009AAE_ae) || (auto34009AAE_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto34009AAE_ae) ) ; lv_index += auto34009AAE_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ravager&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto80B1E243_ae = 5;
                        auto80B1E243_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto80B1E243_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto80B1E243_ae) || (auto80B1E243_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto80B1E243_ae) ) ; lv_index += auto80B1E243_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoB65B75AE_ae = 2;
                        autoB65B75AE_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoB65B75AE_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoB65B75AE_ae) || (autoB65B75AE_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoB65B75AE_ae) ) ; lv_index += autoB65B75AE_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;InfestedAbomination&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoD04B77D1_ae = 2;
                        autoD04B77D1_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoD04B77D1_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoD04B77D1_ae) || (autoD04B77D1_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoD04B77D1_ae) ) ; lv_index += autoD04B77D1_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridDestroyer&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto6DCF5420_ae = 1;
                        auto6DCF5420_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto6DCF5420_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto6DCF5420_ae) || (auto6DCF5420_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto6DCF5420_ae) ) ; lv_index += auto6DCF5420_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Leviathan&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                        auto3C54CA6C_ae = 28;
                        auto3C54CA6C_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto3C54CA6C_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto3C54CA6C_ae) || (auto3C54CA6C_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto3C54CA6C_ae) ) ; lv_index += auto3C54CA6C_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        autoE82A2D35_ae = 7;
                        autoE82A2D35_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoE82A2D35_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoE82A2D35_ae) || (autoE82A2D35_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoE82A2D35_ae) ) ; lv_index += autoE82A2D35_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Mutalisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto84CF1C2F_ae = 5;
                        auto84CF1C2F_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto84CF1C2F_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto84CF1C2F_ae) || (auto84CF1C2F_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto84CF1C2F_ae) ) ; lv_index += auto84CF1C2F_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridDestroyer&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        autoF75CD00E_ae = 2;
                        autoF75CD00E_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoF75CD00E_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoF75CD00E_ae) || (autoF75CD00E_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoF75CD00E_ae) ) ; lv_index += autoF75CD00E_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridReaver&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
                    }
                    else if (autoD67C5616_val == 2) {
                        auto23ACEE3C_ae = 28;
                        auto23ACEE3C_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto23ACEE3C_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto23ACEE3C_ae) || (auto23ACEE3C_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto23ACEE3C_ae) ) ; lv_index += auto23ACEE3C_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto050CF56E_ae = 7;
                        auto050CF56E_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto050CF56E_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto050CF56E_ae) || (auto050CF56E_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto050CF56E_ae) ) ; lv_index += auto050CF56E_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Mutalisk&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoFF8A9B7B_ae = 5;
                        autoFF8A9B7B_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoFF8A9B7B_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoFF8A9B7B_ae) || (autoFF8A9B7B_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoFF8A9B7B_ae) ) ; lv_index += autoFF8A9B7B_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridDestroyer&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoAA35B56A_ae = 2;
                        autoAA35B56A_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoAA35B56A_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoAA35B56A_ae) || (autoAA35B56A_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoAA35B56A_ae) ) ; lv_index += autoAA35B56A_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridReaver&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                        auto289BB107_ae = 40;
                        auto289BB107_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto289BB107_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto289BB107_ae) || (auto289BB107_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto289BB107_ae) ) ; lv_index += auto289BB107_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto757EC03A_ae = 8;
                        auto757EC03A_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto757EC03A_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto757EC03A_ae) || (auto757EC03A_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto757EC03A_ae) ) ; lv_index += auto757EC03A_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto553C2471_ae = 5;
                        auto553C2471_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto553C2471_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto553C2471_ae) || (auto553C2471_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto553C2471_ae) ) ; lv_index += auto553C2471_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ravager&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto3E3EE975_ae = 6;
                        auto3E3EE975_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto3E3EE975_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto3E3EE975_ae) || (auto3E3EE975_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto3E3EE975_ae) ) ; lv_index += auto3E3EE975_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto3AE61F14_ae = 2;
                        auto3AE61F14_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto3AE61F14_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto3AE61F14_ae) || (auto3AE61F14_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto3AE61F14_ae) ) ; lv_index += auto3AE61F14_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto4C156325_ae = 1;
                        auto4C156325_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto4C156325_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto4C156325_ae) || (auto4C156325_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto4C156325_ae) ) ; lv_index += auto4C156325_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Omegalisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
                    }
                    else if (autoD67C5616_val == 3) {
                        autoF0494CCE_ae = 40;
                        autoF0494CCE_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoF0494CCE_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoF0494CCE_ae) || (autoF0494CCE_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoF0494CCE_ae) ) ; lv_index += autoF0494CCE_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoEECE2BB0_ae = 8;
                        autoEECE2BB0_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoEECE2BB0_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoEECE2BB0_ae) || (autoEECE2BB0_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoEECE2BB0_ae) ) ; lv_index += autoEECE2BB0_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoEBD2BA32_ae = 5;
                        autoEBD2BA32_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoEBD2BA32_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoEBD2BA32_ae) || (autoEBD2BA32_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoEBD2BA32_ae) ) ; lv_index += autoEBD2BA32_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ravager&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoF3E79A96_ae = 6;
                        autoF3E79A96_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoF3E79A96_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoF3E79A96_ae) || (autoF3E79A96_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoF3E79A96_ae) ) ; lv_index += autoF3E79A96_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        autoD2EB941F_ae = 2;
                        autoD2EB941F_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoD2EB941F_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoD2EB941F_ae) || (autoD2EB941F_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoD2EB941F_ae) ) ; lv_index += autoD2EB941F_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ultralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        auto3B8CBE92_ae = 1;
                        auto3B8CBE92_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto3B8CBE92_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto3B8CBE92_ae) || (auto3B8CBE92_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto3B8CBE92_ae) ) ; lv_index += auto3B8CBE92_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Omegalisk&quot;, 0, 4, RegionGetCenter(RegionFromId(2)));
                            UnitGroupAdd(gv_enemyG1, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG1, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
                        autoD5995286_ae = 21;
                        autoD5995286_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoD5995286_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoD5995286_ae) || (autoD5995286_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoD5995286_ae) ) ; lv_index += autoD5995286_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Zergling&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto382EC75B_ae = 8;
                        auto382EC75B_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto382EC75B_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto382EC75B_ae) || (auto382EC75B_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto382EC75B_ae) ) ; lv_index += auto382EC75B_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Roach&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto2AB3947A_ae = 5;
                        auto2AB3947A_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto2AB3947A_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto2AB3947A_ae) || (auto2AB3947A_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto2AB3947A_ae) ) ; lv_index += auto2AB3947A_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Ravager&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        autoC4F69BCB_ae = 5;
                        autoC4F69BCB_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoC4F69BCB_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoC4F69BCB_ae) || (autoC4F69BCB_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoC4F69BCB_ae) ) ; lv_index += autoC4F69BCB_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Hydralisk&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        autoD3CCA3D0_ae = 2;
                        autoD3CCA3D0_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoD3CCA3D0_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoD3CCA3D0_ae) || (autoD3CCA3D0_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoD3CCA3D0_ae) ) ; lv_index += autoD3CCA3D0_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;InfestedAbomination&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        auto75A9A442_ae = 2;
                        auto75A9A442_ai = 1;
                        lv_index = 1;
                        for ( ; ( (auto75A9A442_ai &gt;= 0 &amp;&amp; lv_index &lt;= auto75A9A442_ae) || (auto75A9A442_ai &lt;= 0 &amp;&amp; lv_index &gt;= auto75A9A442_ae) ) ; lv_index += auto75A9A442_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;HybridDestroyer&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        autoAE1FFF43_ae = 1;
                        autoAE1FFF43_ai = 1;
                        lv_index = 1;
                        for ( ; ( (autoAE1FFF43_ai &gt;= 0 &amp;&amp; lv_index &lt;= autoAE1FFF43_ae) || (autoAE1FFF43_ai &lt;= 0 &amp;&amp; lv_index &gt;= autoAE1FFF43_ae) ) ; lv_index += autoAE1FFF43_ai ) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Leviathan&quot;, 0, 4, RegionGetCenter(RegionFromId(9)));
                            UnitGroupAdd(gv_enemyG2, UnitLastCreated());
                        }
                        UnitGroupIssueOrder(gv_enemyG2, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackConvoySpawn2_Init () {
                gt_AttackConvoySpawn2 = TriggerCreate(&quot;gt_AttackConvoySpawn2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Setup Attack Wave Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_spawnLocationIter;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(7);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(8);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(57);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(14);
                lv_spawnLocationIter = 1;
                gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(7);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(5);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(6);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(13);
                lv_spawnLocationIter += 1;
                gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(14);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupAttackWaveSpawn_Init () {
                gt_SetupAttackWaveSpawn = TriggerCreate(&quot;gt_SetupAttackWaveSpawn_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: AI Attack Waves
            //--------------------------------------------------------------------------------------------------
            bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RunAttackWaveatMissionTime(gt_AttackWave01, (3.5 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.5 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.0 * 60.0));
                gf_RunAttackWaveatMissionTime(gt_AttackWave07, (24.0 * 60.0));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AIAttackWaves_Init () {
                gt_AIAttackWaves = TriggerCreate(&quot;gt_AIAttackWaves_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 01
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave01_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                        return false;
                    }
                    if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave01_Init () {
                gt_AttackWave01 = TriggerCreate(&quot;gt_AttackWave01_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 02
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave02_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                libNtve_gf_SetUpgradeLevelForPlayer(3, &quot;zerglingmovementspeed&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(4, &quot;zerglingmovementspeed&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave02_Init () {
                gt_AttackWave02 = TriggerCreate(&quot;gt_AttackWave02_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 03
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave03_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_numberOfStructures_ExpLeft;
                int lv_numberOfStructures_ExpRight;
                point lv_attackPathWaypoint;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
                PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(3), UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 &lt;&lt; c_targetFilterStructure), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                }
                PlayerGroupLoopEnd();
                if ((((lv_numberOfStructures_ExpLeft == 0) &amp;&amp; (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft &gt; 0) &amp;&amp; (lv_numberOfStructures_ExpRight &gt; 0)))) {
                    if ((RandomInt(0, 100) &lt; 50)) {
                        lv_attackPathWaypoint = PointFromId(367);
                    }
                    else {
                        lv_attackPathWaypoint = PointFromId(358);
                    }
                }
                else {
                    if ((lv_numberOfStructures_ExpLeft &gt; lv_numberOfStructures_ExpRight)) {
                        lv_attackPathWaypoint = PointFromId(367);
                    }
                    else {
                        lv_attackPathWaypoint = PointFromId(358);
                    }
                }
                if ((lv_attackPathWaypoint == PointFromId(367))) {
                    gv_attackWaveA_Wave05Path = PointFromId(358);
                }
                else {
                    gv_attackWaveA_Wave05Path = PointFromId(367);
                }
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
                libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave03_Init () {
                gt_AttackWave03 = TriggerCreate(&quot;gt_AttackWave03_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 04
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave04_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_attackingAI;
                int lv_defendingPlayer;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                libNtve_gf_SetUpgradeLevelForPlayer(3, &quot;hydraliskspeed&quot;, 1);
                libNtve_gf_SetUpgradeLevelForPlayer(4, &quot;hydraliskspeed&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave04_Init () {
                gt_AttackWave04 = TriggerCreate(&quot;gt_AttackWave04_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 05
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave05_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                int lv_numberOfStructures_ExpLeft;
                int lv_numberOfStructures_ExpRight;
                point lv_attackPathWaypoint;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
                lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
                libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave05_Init () {
                gt_AttackWave05 = TriggerCreate(&quot;gt_AttackWave05_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 06
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave06_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave06_Init () {
                gt_AttackWave06 = TriggerCreate(&quot;gt_AttackWave06_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Attack Wave 07
            //--------------------------------------------------------------------------------------------------
            bool gt_AttackWave07_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_resourceBucket;
                int lv_techBucket;
                // Variable Initialization
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
                AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AttackWave07_Init () {
                gt_AttackWave07 = TriggerCreate(&quot;gt_AttackWave07_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Bullies
            //--------------------------------------------------------------------------------------------------
            bool gt_Bullies_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                AIToggleBulliesInRegion(3, RegionFromId(11), false);
                AIToggleBulliesInRegion(3, RegionFromId(16), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Bullies_Init () {
                gt_Bullies = TriggerCreate(&quot;gt_Bullies_Func&quot;);
                TriggerAddEventTimeElapsed(gt_Bullies, 600.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - EscortTheConvoy - Create 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortTheConvoyCreate2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderPrimary&quot;, gv_remainingConvoyCount);
                gv_objectiveEscortTheConvoy = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 10);
                TriggerExecute(gt_ObjectiveEscortTheConvoyUpdate2, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortTheConvoyCreate2_Init () {
                gt_ObjectiveEscortTheConvoyCreate2 = TriggerCreate(&quot;gt_ObjectiveEscortTheConvoyCreate2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - EscortTheConvoy - Complete 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortTheConvoyComplete2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate2, true, false);
                ObjectiveSetState(gv_objectiveEscortTheConvoy, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortTheConvoyComplete2_Init () {
                gt_ObjectiveEscortTheConvoyComplete2 = TriggerCreate(&quot;gt_ObjectiveEscortTheConvoyComplete2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - EscortTheConvoy - Update 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortTheConvoyUpdate2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate2, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderPrimary&quot;, gv_remainingConvoyCount);
                TextExpressionSetToken(&quot;Param/Expression/7FD6C296&quot;, &quot;ConvoyProgress&quot;, IntToText(gv_convoyProgress));
                TextExpressionSetToken(&quot;Param/Expression/7FD6C296&quot;, &quot;StructureCount&quot;, IntToText(gv_totalConvoyCount));
                ObjectiveSetName(gv_objectiveEscortTheConvoy, TextExpressionAssemble(&quot;Param/Expression/7FD6C296&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortTheConvoyUpdate2_Init () {
                gt_ObjectiveEscortTheConvoyUpdate2 = TriggerCreate(&quot;gt_ObjectiveEscortTheConvoyUpdate2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - EscortTheConvoy - Failed 2
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortTheConvoyFailed2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate2, true, false);
                ObjectiveSetState(gv_objectiveEscortTheConvoy, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortTheConvoyFailed2_Init () {
                gt_ObjectiveEscortTheConvoyFailed2 = TriggerCreate(&quot;gt_ObjectiveEscortTheConvoyFailed2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - EscortTheConvoy - Create 3
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortTheConvoyCreate3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderPrimary&quot;, gv_convoysLost);
                gv_objectiveEscortTheConvoy2 = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 9);
                TriggerExecute(gt_ObjectiveEscortTheConvoyUpdate3, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortTheConvoyCreate3_Init () {
                gt_ObjectiveEscortTheConvoyCreate3 = TriggerCreate(&quot;gt_ObjectiveEscortTheConvoyCreate3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - EscortTheConvoy - Complete 3
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortTheConvoyComplete3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate3, true, false);
                ObjectiveSetState(gv_objectiveEscortTheConvoy2, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortTheConvoyComplete3_Init () {
                gt_ObjectiveEscortTheConvoyComplete3 = TriggerCreate(&quot;gt_ObjectiveEscortTheConvoyComplete3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - EscortTheConvoy - Update 3
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveEscortTheConvoyUpdate3_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ObjectiveEscortTheConvoyCreate3, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderPrimary&quot;, gv_remainingConvoyCount);
                TextExpressionSetToken(&quot;Param/Expression/826D8F97&quot;, &quot;ConvoysRemaining&quot;, IntToText(gv_convoysLost));
                TextExpressionSetToken(&quot;Param/Expression/826D8F97&quot;, &quot;ConvoysTotal&quot;, IntToText(2));
                ObjectiveSetName(gv_objectiveEscortTheConvoy2, TextExpressionAssemble(&quot;Param/Expression/826D8F97&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveEscortTheConvoyUpdate3_Init () {
                gt_ObjectiveEscortTheConvoyUpdate3 = TriggerCreate(&quot;gt_ObjectiveEscortTheConvoyUpdate3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void InitTriggers () {
                gt_UntitledTrigger001_Init();
                gt_Init01LoadData_Init();
                gt_Init02Players_Init();
                gt_Init03LoadingComplete_Init();
                gt_Init04Technology_Init();
                gt_Init05Units_Init();
                gt_Init06MusicSound_Init();
                gt_Init07Environment_Init();
                gt_Init08Difficulties_Init();
                gt_DebugCantFail_Init();
                gt_tIntro_Init();
                gt_showDanPortrait_Init();
                gt_tDustStormBegin_Init();
                gt_tDustCycle_Init();
                gt_tDustStormEnd_Init();
                gt_tConvoyA_Init();
                gt_tConvoyB_Init();
                gt_tConvoyC_Init();
                gt_tConvoyD_Init();
                gt_tConvoyE_Init();
                gt_tConvoyFail_Init();
                gt_tMissionFail_Init();
                gt_tMissionSuccess_Init();
                gt_DustStormCycle_Init();
                gt_DustStormExpire_Init();
                gt_EnemyFollowsConvoy_Init();
                gt_FriendlyFireOff_Init();
                gt_ConvoyDies_Init();
                gt_EvacShuttle_Init();
                gt_EvacShuttleLeaves_Init();
                gt_Convoy4Spawn_Init();
                gt_Convoy4Rally_Init();
                gt_Convoy4Home_Init();
                gt_Convoy1Warning_Init();
                gt_Convoy1Spawn_Init();
                gt_Convoy1Rally_Init();
                gt_Convoy1Home_Init();
                gt_Convoy3Warning_Init();
                gt_Convoy3Spawn_Init();
                gt_Convoy3Rally_Init();
                gt_Convoy3Rally3_Init();
                gt_Convoy3Home_Init();
                gt_Convoy2Warning_Init();
                gt_Convoy2Spawn_Init();
                gt_Convoy2Rally_Init();
                gt_Convoy2Rally2_Init();
                gt_Convoy2Rally6_Init();
                gt_Convoy2Home_Init();
                gt_Convoy4Warning2_Init();
                gt_Convoy4Spawn2_Init();
                gt_Convoy4Rally2_Init();
                gt_Convoy4Home2_Init();
                gt_Convoy3Warning2_Init();
                gt_Convoy3Spawn2_Init();
                gt_Convoy3Rally2_Init();
                gt_Convoy3Home2_Init();
                gt_Convoy1Warning2_Init();
                gt_Convoy1Spawn2_Init();
                gt_Convoy1Rally2_Init();
                gt_Convoy1Home2_Init();
                gt_Convoy2Warning2_Init();
                gt_Convoy2Spawn2_Init();
                gt_Convoy2Rally4_Init();
                gt_Convoy2Rally3_Init();
                gt_Convoy2Rally5_Init();
                gt_Convoy2Home2_Init();
                gt_test_Init();
                gt_StartGameQ_Init();
                gt_UpdateConvoyCount_Init();
                gt_EnemyAttackingQ_Init();
                gt_DefeatBaseDead_Init();
                gt_VictoryPrimaryObjectiveComplete_Init();
                gt_VictorySequence_Init();
                gt_VictoryFanfareQ_Init();
                gt_Victory_Init();
                gt_Defeat_Init();
                gt_StartAI_Init();
                gt_DustStormBaseAttack_Init();
                gt_AttackConvoySpawn2_Init();
                gt_SetupAttackWaveSpawn_Init();
                gt_AIAttackWaves_Init();
                gt_AttackWave01_Init();
                gt_AttackWave02_Init();
                gt_AttackWave03_Init();
                gt_AttackWave04_Init();
                gt_AttackWave05_Init();
                gt_AttackWave06_Init();
                gt_AttackWave07_Init();
                gt_Bullies_Init();
                gt_ObjectiveEscortTheConvoyCreate2_Init();
                gt_ObjectiveEscortTheConvoyComplete2_Init();
                gt_ObjectiveEscortTheConvoyUpdate2_Init();
                gt_ObjectiveEscortTheConvoyFailed2_Init();
                gt_ObjectiveEscortTheConvoyCreate3_Init();
                gt_ObjectiveEscortTheConvoyComplete3_Init();
                gt_ObjectiveEscortTheConvoyUpdate3_Init();
            }
            //--------------------------------------------------------------------------------------------------
            // Map Initialization
            //--------------------------------------------------------------------------------------------------
            void run () {
                InitLibs();
                InitGlobals();
                InitCustomAI();
                InitTriggers();
            }
        </ScriptCode>
        <InitFunc>run</InitFunc>
    </Element>
</TriggerData>