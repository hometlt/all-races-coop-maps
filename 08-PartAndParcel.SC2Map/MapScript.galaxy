//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Part and Parcel
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_ENEMY = 9;
const int gv_pLAYER_04_ENEMY = 10;
const int gv_pLAYER_05_BALIUS = 11;
const int gv_pLAYER_07_BALIUSPARTS = 7;
const int gv_pLAYER_08_TRAIN = 8;
const int gv_pLAYER_10_CIVILIAN = 10;
const string gv_c_Archangel_AssaultType = "ArchAngelPnPAssault";
const string gv_c_Archangel_BomberType = "ArchAngelPnPFighter";
const int gv_c_ArchangelPartsRequired = 70;
const int gv_c_PartsRegionsTotal = 10;
const int gv_c_BossesRequired = 3;
const int gv_c_BossCount = 3;
const int gv_c_MaxStylesPerBoss = 3;
const int gv_c_MaxStyles = 10;
const int gv_c_SpecialTrainEscort_Max = 4;
const int gv_c_MaxTrainCount = 15;
const int gv_c_MaxTrainEscortCount = 128;
const int gv_c_MaxTrainCarCount = 32;
const fixed gv_tRAIN_CAR_SEPERATION = 0.1;
const fixed gv_tRAIN_RADIUS = 1.75;
const int gv_objectiveDestroyTrainsMAXTRAINS = 2;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_TrainEscort {
    unit lv_escort;
    string lv_unitType;
    int lv_escortCar;
    fixed lv_polarRadius;
    fixed lv_polarAngle;
    point lv_waitPosition;
};

struct gs_RECORD_Train {
    unit[gv_c_MaxTrainCarCount + 1] lv_trainCars;
    int lv_numberOfCars;
    int lv_lastCar;
    int lv_tunnel;
    int lv_spawnWave;
    fixed lv_maxLife;
    fixed lv_speedMultiplier;
    gs_RECORD_TrainEscort[gv_c_MaxTrainEscortCount + 1] lv_escorts;
    int lv_numberOfEscorts;
    wave lv_escortWave;
    bool lv_trainAlive;
    int lv_trainType;
    bool lv_initialized;
    int lv_trainStatus;
    fixed lv_trainMaxSpeed;
    unitgroup lv_trainCarsGroup;
};

struct gs_RECORD_TrainStation {
    point lv_position;
    int lv_state;
};

struct gs_RECORD_Charger {
    point lv_position;
    int lv_tunnel;
    int lv_numberOfCharges;
    int lv_state;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ArchangelStates__Uninitialized = 0;
const int ge_ArchangelStates_LandingToRepair = 1;
const int ge_ArchangelStates_Repairing = 2;
const int ge_ArchangelStates_ReadyToMoveOut = 3;
const int ge_ArchangelStates_MovingToBoss = 4;
const int ge_ArchangelStates_BombardingBossShield = 5;
const int ge_ArchangelStates_EngagingBoss = 6;
const int ge_ArchangelStates_RetreatingToRepair = 7;
const int ge_BossStyles__None = 0;
const int ge_BossStyles_PuddleLines = 1;
const int ge_BossStyles_FireChains = 2;
const int ge_BossStyles_AttackWaveSpawner = 3;
const int ge_BossStyles_Stasis = 4;
const int ge_BossStyles__End = 5;
const int ge_BossStyles_Illusionist = 6;
const int ge_PRESET_Tunnel__None = 0;
const int ge_PRESET_Tunnel_Top = 1;
const int ge_PRESET_Tunnel_Middle = 2;
const int ge_PRESET_Tunnel_Bottom = 3;
const int ge_PRESET_TrainType__None = 0;
const int ge_PRESET_TrainType_Soloable = 1;
const int ge_PRESET_TrainType_CoopNeeded = 2;
const int ge_PRESET_TrainType_BonusObjective = 3;
const int ge_PRESET_TrainStatus__Uninitialized = 0;
const int ge_PRESET_TrainStatus_Spawning = 1;
const int ge_PRESET_TrainStatus_Active = 2;
const int ge_PRESET_TrainStatus_Missed = 3;
const int ge_PRESET_TrainStatus_Destroyed = 4;
const int ge_PRESET_TrainStationState_Active = 0;
const int ge_PRESET_TrainStationState_Transitioning = 1;
const int ge_PRESET_TrainStationState_Inactive = 2;
const int ge_PRESET_ChargeState_Active = 0;
const int ge_PRESET_ChargeState_Inactive = 1;
const int ge_PRESET_ChargeState_Pulsing = 2;
const int ge_BonusObjectives_TrainEvent01 = 0;
const int ge_BonusObjectives_TrainEvent02 = 1;
const int ge_BonusObjectives_TrainEvent03 = 2;
const int ge_AttackWaveDirection_Random = 0;
const int ge_AttackWaveDirection_Left = 1;
const int ge_AttackWaveDirection_Right = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
region[gv_c_BossCount + 1] gv_bossRevealerRegions;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
playergroup gv_enemyGroup;
unit gv_archangel;
unit[gv_c_BossCount + 1] gv_boss;
unit[gv_c_BossCount + 1] gv_bossCages;
unitgroup gv_initiallyPausedUnits;
bool gv_gameHasBegun;
timer gv_halfPartsWarningCDTimer;
int gv_leaderboardTimeScoreFinal;
int gv_leaderboardBonusScoreFinal;
int gv_leaderboardBonusScoreFinal2;
bool[3] gv_bonusActive;
unitgroup gv_initialPartsGroup;
actor gv_initialReticle1;
actor gv_initialReticle2;
actor gv_initialReticle3;
int gv_initialTag1;
int gv_initialTag2;
int gv_initialTag3;
unit gv_firstGenerator;
unit gv_firstCratePack1_1;
unit gv_firstCratePack1_2;
unit gv_firstCratePack2_1;
unit gv_firstCratePack2_2;
bool gv_hidePingsBool;
int gv_archangelDestinationPing;
bool[gv_c_BossCount + 1] gv_hybridChamberOpen;
int gv_archangelState_Current;
int gv_archangelState_Previous;
int gv_archangelCurrentPartsPool;
unitfilter gv_partsFilter;
int[gv_c_PartsRegionsTotal + 1] gv_partsRegionPings;
region[gv_c_PartsRegionsTotal + 1] gv_partsRegions;
int[gv_c_PartsRegionsTotal + 1] gv_partsRegionIndex;
unitgroup gv_smallPingUnits;
unitgroup gv_droppedParts;
unitgroup[gv_c_PartsRegionsTotal + 1] gv_partsDroppers;
int[gv_c_PartsRegionsTotal + 1] gv_numberOfUnitsToBreakIntoSmallerPings;
int gv_activePingsDesiredGlobal;
bool gv_partsUpdateVOBool;
int gv_bossesSlain;
int[gv_c_BossCount + 1] gv_bossTuning_Illusionist_MaxIllusionCount;
int[gv_c_BossCount + 1] gv_bossTuning_Illusionist_MaxIllusionCountBeforeMore;
int[gv_c_BossCount + 1] gv_bossTuning_Illusionist_NumberOfIllusionsAbilityCreates;
fixed gv_bossTuning_Illusionist_Cooldown;
fixed gv_bossTuning_Illusionist_InitialDelay;
fixed[gv_c_BossCount + 1] gv_bossTuning_Illusionist_IllusionVitality;
fixed gv_bossTuning_PuddleLines_InitialDelay;
fixed gv_bossTuning_PuddleLines_Cooldown;
fixed gv_bossTuning_PuddleLines_LineTimedLife;
int gv_hybridAbilityFirechainsType;
fixed gv_bossTuning_FireChains_InitialDelay;
fixed gv_bossTuning_FireChains_Cooldown;
fixed gv_bossTuning_FireChains_MaxLengthCone;
fixed gv_bossTuning_FireChains_MaxLengthRadial;
fixed gv_bossTuning_AttackWaveSpawner_InitialDelay;
fixed gv_bossTuning_AttackWaveSpawner_Cooldown;
int[gv_c_BossCount + 1] gv_bossTuning_AttackWaveSpawner_ResourceAmount;
int[gv_c_BossCount + 1] gv_bossTuning_AttackWaveSpawner_TechLevel;
fixed gv_bossTuning_Stasis_Cooldown;
fixed gv_bossTuning_Stasis_CastTime;
fixed gv_bossTuning_Stasis_AreaOfEffect;
fixed gv_bossTuning_Stasis_StasisDuration;
int gv_bossStyleTypes;
int[gv_c_BossCount + 1][gv_c_MaxStylesPerBoss + 1] gv_bossStylesActive;
fixed gv_bossTuning_SingleTarget_Cooldown;
unitgroup gv_hybridAbility_SingleTarget_Targets;
fixed gv_hybridAbility_SingleTarget_LockOnDuration;
fixed gv_bossTuning_SingleTarget_MinDamage_Air;
fixed gv_bossTuning_SingleTarget_MinDamage_Ground;
unitgroup gv_hybridBossesGroup;
unit[8] gv_hybridShades;
timer gv_preventBossAwaken;
timer gv_bossEngagedHidden;
int gv_timerWindowPreventBossAwaken;
fixed gv_bossDefeatExtraTime;
fixed gv_partsCollectedExtraTime;
fixed gv_perPartCollectedExtraTime;
fixed gv_initialBossDefeatTime;
timer gv_waitForTextCrawl;
int[gv_c_SpecialTrainEscort_Max + 1] gv_specialTrainEscorts_Count;
string[gv_c_SpecialTrainEscort_Max + 1] gv_specialTrainEscorts_Type;
int gv_specialTrainEscorts_Spawn;
int gv_trainsNeeded;
gs_RECORD_Train[gv_c_MaxTrainCount + 1] gv_trainList;
point[256] gv_trainPath;
int gv_currentWave;
timer gv_nextTrainTimer2;
unit gv_trainCarToAnimate;
fixed gv_trainCarToAnimateBreakPoint;
int gv_trainPathMidStart;
int gv_trainPathBottomStart;
int gv_numberOfTrainPathPoints;
int gv_trainToBeEscorted;
int gv_trainBossBarIndex;
fixed gv_trainDifficulty_Life;
fixed gv_trainDifficulty_Speed;
int gv_trainDifficulty_CarCount;
int gv_trainDifficulty_CarCountArmored;
fixed gv_trainDifficulty_LifeIncreaseForTrainTwo;
bool[4] gv_trainPathInUse;
point gv_lastTrainLocation;
int[7] gv_trainTypeCount;
int gv_revealTrainType_Dialog;
int gv_revealTrainType_DialogTrainType;
unitgroup gv_ignoreAoEDamage;
fixed[3] gv_runningTrainDamage;
fixed[gv_c_MaxTrainCount + 1] gv_trainLastKnownLife;
gs_RECORD_TrainStation[16] gv_trainStations;
int gv_numberOfTrainStations;
int gv_currentTrainStationGlobal;
gs_RECORD_Charger[64] gv_chargers;
int gv_numberOfChargers;
timer[gv_objectiveDestroyTrainsMAXTRAINS + 1] gv_launchTrainTimers;
unit gv_moebiusMale;
unit gv_moebiusFemale;
bool gv_transmission_HalfPartsCollected_Played;
bool gv_transmission_MostPartsCollected_Played;
bool gv_vO_archangel_breaching_blocked;
bool gv_vO_proximity_warning_blocked;
bool gv_timerWarning_FiveMinsRemain_Played;
point gv_victoryCompletePan;
int[3] gv_scoreScreen_PartsCollected;
int gv_attackWaveDirection;
bool gv_attackWave02_AttackP1;
int gv_objectiveGatherArchangelParts;
int gv_objectiveDestroyBosses;
int gv_objectivePreventBossAwaken;
int gv_objectiveDestroyTrains;
int gv_objectiveDestroyTrainsNumDestroyed;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;

    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_enemyGroup = PlayerGroupEmpty();
    gv_archangel = UnitFromId(54234680);
    gv_initiallyPausedUnits = UnitGroupEmpty();
    gv_halfPartsWarningCDTimer = TimerCreate();
    gv_initialPartsGroup = UnitGroupEmpty();
    gv_initialTag1 = c_textTagNone;
    gv_initialTag2 = c_textTagNone;
    gv_initialTag3 = c_textTagNone;
    gv_archangelDestinationPing = c_invalidPingId;
    gv_archangelState_Current = ge_ArchangelStates__Uninitialized;
    gv_archangelState_Previous = ge_ArchangelStates__Uninitialized;
    gv_partsFilter = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterUser1), 0, 0, 0);
    for (init_i = 0; init_i <= gv_c_PartsRegionsTotal; init_i += 1) {
        gv_partsRegionPings[init_i] = c_invalidPingId;
    }
    gv_smallPingUnits = UnitGroupEmpty();
    gv_droppedParts = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_c_PartsRegionsTotal; init_i += 1) {
        gv_partsDroppers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_c_BossCount; init_i += 1) {
        for (init_j = 0; init_j <= gv_c_MaxStylesPerBoss; init_j += 1) {
            gv_bossStylesActive[init_i][init_j] = ge_BossStyles__None;
        }
    }
    gv_hybridAbility_SingleTarget_Targets = UnitGroupEmpty();
    gv_hybridBossesGroup = UnitGroupEmpty();
    gv_preventBossAwaken = TimerCreate();
    gv_bossEngagedHidden = TimerCreate();
    gv_timerWindowPreventBossAwaken = c_timerWindowNone;
    gv_waitForTextCrawl = TimerCreate();
    for (init_i = 0; init_i <= gv_c_MaxTrainCount; init_i += 1) {
        gv_trainList[init_i].lv_numberOfCars = 8;
        gv_trainList[init_i].lv_tunnel = ge_PRESET_Tunnel_Top;
        gv_trainList[init_i].lv_spawnWave = 1;
        gv_trainList[init_i].lv_maxLife = 25000.0;
        gv_trainList[init_i].lv_speedMultiplier = 1.0;
        for (init_i1 = 0; init_i1 <= gv_c_MaxTrainEscortCount; init_i1 += 1) {
            gv_trainList[init_i].lv_escorts[init_i1].lv_unitType = "Marine";
        }
        gv_trainList[init_i].lv_trainType = ge_PRESET_TrainType__None;
        gv_trainList[init_i].lv_trainStatus = ge_PRESET_TrainStatus__Uninitialized;
        gv_trainList[init_i].lv_trainCarsGroup = UnitGroupEmpty();
    }
    gv_currentWave = 1;
    gv_nextTrainTimer2 = TimerCreate();
    gv_revealTrainType_Dialog = c_invalidDialogId;
    gv_revealTrainType_DialogTrainType = c_invalidDialogControlId;
    gv_ignoreAoEDamage = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_trainStations[init_i].lv_state = ge_PRESET_TrainStationState_Inactive;
    }
    for (init_i = 0; init_i <= 63; init_i += 1) {
        gv_chargers[init_i].lv_tunnel = ge_PRESET_Tunnel_Top;
        gv_chargers[init_i].lv_state = ge_PRESET_ChargeState_Inactive;
    }
    for (init_i = 0; init_i <= gv_objectiveDestroyTrainsMAXTRAINS; init_i += 1) {
        gv_launchTrainTimers[init_i] = TimerCreate();
    }
    gv_victoryCompletePan = PointFromId(1280159135);
    gv_attackWaveDirection = ge_AttackWaveDirection_Random;
    gv_objectiveGatherArchangelParts = c_invalidObjectiveId;
    gv_objectiveDestroyBosses = c_invalidObjectiveId;
    gv_objectivePreventBossAwaken = c_invalidObjectiveId;
    gv_objectiveDestroyTrains = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_UnitDropsParts (unit lp_partDropper);
void gf_BotLogic (unit lp_bot);
void gf_ArchangelState (int lp_nextArchangelState);
void gf_PrettyArchangelBombingRun ();
void gf_AddParts (int lp_quantity, point lp_location);
void gf_ShowHidePartsRegionPings (bool lp_showHide);
void gf_PartsSmallPing (unit lp_unitToPing);
void gf_CreateBossPing (int lp_bossIndex);
void gf_HybridAbilitySingleTargetAddTarget (unit lp_target);
void gf_HybridBossBaseAbilityLogic (unit lp_unit);
unit gf_HybridBossSingleTargetBestTarget (unit lp_caster, unitgroup lp_potentialTargets, fixed lp_minimumVitalityToTarget);
fixed gf_UnitGroupVitality (unitgroup lp_groupOfUnits);
void gf_BossLogic (int lp_bossIndex, unit lp_bossUnit);
bool gf_BossHasStyles (int lp_bossIndex, int lp_bossStyle);
void gf_HybridBossStasisAbility (point lp_target, unit lp_castingHybrid);
void gf_HybridBossPuddleLine (point lp_spawn, fixed lp_travelDirection, fixed lp_puddleLineLength, int lp_children, fixed lp_childSeperation);
void gf_HybridBossFireChains (point lp_start, point lp_end, fixed lp_timeBetweenEffectSpawn);
void gf_HybridBossFireChainsCone (fixed lp_coneFacing, point lp_startingLocation, fixed lp_delayBetweenRows, fixed lp_angleToSweep, fixed lp_distanceToTravel);
void gf_HybridBossUnitSpawner (unit lp_bossCreatingRift, unitgroup lp_unitsToSpawnFromRift, unit lp_voidRift);
int gf_HybridBossAttackWaveSpawnTechLevel ();
int gf_HybridBossAttackWaveSpawnResourceAmount ();
void gf_HybridBossCastAnimation (unit lp_hybridBoss);
void gf_HybridBossCastAnimationGeneral (unit lp_hybridBoss, string lp_animation);
void gf_HybridBossMirrorImage (unit lp_hybridBoss, bool lp_enableDisable);
void gf_HybridBossPauseforAnim (bool lp_enableDisable, unit lp_boss);
void gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint);
void gf_ActivatePingforTrainEngine (unit lp_trainCar);
point gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex);
void gf_SpawnaTrain (int lp_tunnel, int lp_trainType, int lp_trainListIndex);
void gf_AssignEscortsToTrainFront (int lp_trainIndex, unitgroup lp_escortGroup, int lp_trainTunnel);
void gf_SpawnTrainCarDamagedUnits (unit lp_trainCar, fixed lp_breakPoint);
void gf_TrainCarPing (unit lp_trainCar);
void gf_TrainDeath (unit lp_trainEngine, int lp_trainListIndex);
int gf_NextAvailableTrainListIndex ();
int gf_RandomTunnel (int lp_exclude);
void gf_RevealTrainLane (int lp_tunnel);
text gf_GetTrainTypeName (int lp_trainType);
void gf_InitializeCharger (point lp_position, int lp_tunnel, int lp_index);
void gf_IncreaseTrainLife ();
void gf_CreateSpeechBubble (unit lp_speaker);
string gf_TransportType (int lp_player);
void gf_CleanUpAttackWaveTransports (unitgroup lp_transports, point lp_cleanupLocation);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
color gf_TimerColor ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init03LoadingComplete;
trigger gt_Init02Players;
trigger gt_Init05Units;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;
trigger gt_DestroyReticles1;
trigger gt_DestroyReticles2;
trigger gt_DestroyReticles3;
trigger gt_MissionProgression;
trigger gt_PartsCollectionPhase;
trigger gt_BossFightPhase;
trigger gt_ArchangelLaunchSequence;
trigger gt_ArchangelSiegePingTrail;
trigger gt_ArchangelStateMachine;
trigger gt_InitializeUpdatePartsRegionOrder;
trigger gt_MakePartsNeutral;
trigger gt_SetPartsTooltip;
trigger gt_Partspickedup;
trigger gt_ShowandUpdatePartRegionMarkers;
trigger gt_ReleaseBossHybrid;
trigger gt_BossHybridCreated;
trigger gt_BossDeath1;
trigger gt_BossDeath2;
trigger gt_BossDeath3;
trigger gt_BossAreaRevealer;
trigger gt_InitializeBossStyles;
trigger gt_HybridBossHybridShadesLifeShare;
trigger gt_InitializeBossTimer;
trigger gt_AddtoBossTimer;
trigger gt_TrainPathInitialization;
trigger gt_TrainPathInitializationForward;
trigger gt_TrainPathInitializationBackward;
trigger gt_SpawnEscorts;
trigger gt_TrainMovement;
trigger gt_TrainDespawn;
trigger gt_TrainCarDamageAnimationController;
trigger gt_InitializeChargers;
trigger gt_TrainStationController;
trigger gt_ChargePulseController;
trigger gt_DeactivateChargers;
trigger gt_ActivateStation;
trigger gt_DeactivateStation;
trigger gt_TrainSpawnAnimations;
trigger gt_RevealBottomLane;
trigger gt_RevealMiddleLane;
trigger gt_RevealTopLane;
trigger gt_InitializeBonusObjective;
trigger gt_TrainEvent01;
trigger gt_TrainEvent02;
trigger gt_MoebiusEmployee_VOEasterEgg;
trigger gt_TransmissionResetTransmissionsforNextRound;
trigger gt_EnemyAttackingQ;
trigger gt_TransmissionArchangelMovingOutafterrepairQ;
trigger gt_TransmissionArchangelPreparingtoMovingOutafterrepairQ;
trigger gt_TransmissionBossEngagedQ;
trigger gt_TransmissionArchangelInitiateBombinRunQ;
trigger gt_TransmissionReturningforRepairsShieldDestroyedQ;
trigger gt_TransmissionBossEncounterArchangelDefeatedQ;
trigger gt_TransmissionBossDefeatedReturnHomeQ;
trigger gt_TransmissionBossDefeatedArchangelDefeatedQ;
trigger gt_TransmissionHybridBossReleasedQ;
trigger gt_TransmissionHybridBossDefeatedQ;
trigger gt_TransmissionHybridBossTauntQ;
trigger gt_TransmissionTimerUpdate;
trigger gt_TransmissionSixMinutesLeftQ;
trigger gt_TransmissionFourMinutesLeftQ;
trigger gt_TransmissionTwoMinuteLeftQ;
trigger gt_TransmissionOneMinuteLeftQ;
trigger gt_TransmissionArchangelPartsCollected;
trigger gt_TransmissionStartPartsCollectingQ;
trigger gt_TransmissionHalfPartsCollectedQ;
trigger gt_TransmissionAlmostAllPartsCollectedQ;
trigger gt_TransmissionPartCollectingFinishedQ;
trigger gt_TrainSpawnedQ3;
trigger gt_TrainSpawnedQ5;
trigger gt_TrainSpawnedQ;
trigger gt_TrainSpawnedQ2;
trigger gt_TrainEscapingQ;
trigger gt_TrainSpawnedQ4;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_SendAttackWavesatTime;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03ExpansionAttack1;
trigger gt_AttackWave04;
trigger gt_AttackWave05ExpansionAttack2;
trigger gt_AttackWave06;
trigger gt_AttackWave07TargetPlayerUnits;
trigger gt_AttackWave08;
trigger gt_AttackWave09;
trigger gt_ObjectiveGatherArchangelPartsReset;
trigger gt_ObjectiveGatherArchangelPartsCreate;
trigger gt_ObjectiveGatherArchangelPartsUpdate;
trigger gt_ObjectiveGatherArchangelPartsComplete;
trigger gt_ObjectiveDestroyBossesCreate;
trigger gt_ObjectiveDestroyBossesUpdate;
trigger gt_ObjectiveDestroyBossesComplete;
trigger gt_ObjectiveDestroyBossesFailed;
trigger gt_ObjectivePreventBossAwakenCreate;
trigger gt_ObjectivePreventBossAwakenUpdate;
trigger gt_ObjectivePreventBossAwakenFailed;
trigger gt_ObjectivePreventBossAwakenComplete;
trigger gt_ObjectiveDestroyTrainsCreate;
trigger gt_ObjectiveDestroyTrainsUpdate;
trigger gt_ObjectiveDestroyTrainsComplete;
trigger gt_ObjectiveDestroyTrainsFailed;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_UnitDropsParts (unit lp_partDropper) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_partDropper, "Scrappable3") == true)) {
        return 5;
    }

    if ((UnitHasBehavior2(lp_partDropper, "Scrappable2") == true)) {
        return 3;
    }

    if ((UnitHasBehavior2(lp_partDropper, "Scrappable") == true)) {
        return 1;
    }

    return 0;
}

trigger auto_gf_BotLogic_Trigger = null;
unit auto_gf_BotLogic_lp_bot;

void gf_BotLogic (unit lp_bot) {
    auto_gf_BotLogic_lp_bot = lp_bot;

    if (auto_gf_BotLogic_Trigger == null) {
        auto_gf_BotLogic_Trigger = TriggerCreate("auto_gf_BotLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_BotLogic_Trigger, false, false);
}

bool auto_gf_BotLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bot = auto_gf_BotLogic_lp_bot;

    // Variable Declarations
    point lv_currentLocation;
    point lv_homePosition;
    fixed lv_distanceToHome;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_homePosition = UnitGetPosition(lp_bot);
    lv_currentLocation = UnitGetPosition(lp_bot);
    while ((UnitIsValid(lp_bot) == true)) {
        lv_distanceToHome = DistanceBetweenPoints(lv_currentLocation, lv_homePosition);
        if ((lv_distanceToHome >= 5.0)) {
            UnitIssueOrder(lp_bot, OrderTargetingPoint(AbilityCommand("attack", 0), lv_homePosition), c_orderQueueReplace);
        }
        else {
            if ((UnitOrderCount(lp_bot) <= 0)) {
                Wait(4.0, c_timeAI);
                if ((UnitIsAlive(lp_bot) == true)) {
                    UnitIssueOrder(lp_bot, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lp_bot), RandomFixed(1.5, 3.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }

            }

        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

void gf_ArchangelState (int lp_nextArchangelState) {
    // Automatic Variable Declarations
    // Implementation
    gv_archangelState_Current = lp_nextArchangelState;
}

void gf_PrettyArchangelBombingRun () {
    // Variable Declarations
    point lv_rotationPoint;
    fixed lv_turnRadius;
    int lv_pathIter;
    point lv_targetPoint;

    // Automatic Variable Declarations
    const int autoAC7F8413_ae = 210;
    const int autoAC7F8413_ai = 15;

    // Variable Initialization

    // Implementation
    lv_turnRadius = 10.0;
    lv_rotationPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_bossCages[gv_bossesSlain]), 10.0, UnitGetPosition(gv_archangel)), lv_turnRadius, (UnitGetFacing(gv_archangel) + 90.0));
    UnitIssueOrder(gv_archangel, OrderTargetingUnit(AbilityCommand("ArchAngelPnPEMPAir", 0), gv_bossCages[gv_bossesSlain]), c_orderQueueReplace);
    lv_pathIter = 1;
    for ( ; ( (autoAC7F8413_ai >= 0 && lv_pathIter <= autoAC7F8413_ae) || (autoAC7F8413_ai < 0 && lv_pathIter >= autoAC7F8413_ae) ) ; lv_pathIter += autoAC7F8413_ai ) {
        lv_targetPoint = PointWithOffsetPolar(lv_rotationPoint, lv_turnRadius, lv_pathIter);
        UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
    }
    UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(805086415)), c_orderQueueAddToEnd);
    while (!((UnitOrderCount(gv_archangel) <= 1))) {
        Wait(0.1, c_timeGame);
    }
}

void gf_AddParts (int lp_quantity, point lp_location) {
    // Variable Declarations
    text lv_floatingText;
    const string lv_c_TimeIncreaseImage = "Assets\\Textures\\icon-time-terran.dds";

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_archangelCurrentPartsPool = (gv_archangelCurrentPartsPool + lp_quantity);
    if ((TimerGetRemaining(gv_preventBossAwaken) <= 0.0)) {
        return ;
    }
    else {
        TimerStart(gv_preventBossAwaken, (TimerGetRemaining(gv_preventBossAwaken) + gv_perPartCollectedExtraTime), false, c_timeGame);
    }
    TextExpressionSetToken("Param/Expression/A2C5D67C", "A", StringExternal("Param/Value/A386D0F5"));
    TextExpressionSetToken("Param/Expression/A2C5D67C", "B", IntToText(FixedToInt(gv_perPartCollectedExtraTime)));
    lv_floatingText = TextExpressionAssemble("Param/Expression/A2C5D67C");
    TextExpressionSetToken("Param/Expression/6B84155C", "A", lv_floatingText);
    TextExpressionSetToken("Param/Expression/6B84155C", "B", StringToText((lv_c_TimeIncreaseImage)));
    lv_floatingText = TextExpressionAssemble("Param/Expression/6B84155C");
    TextTagCreate(lv_floatingText, 28, lp_location, 1.0, true, false, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    if ((gv_partsUpdateVOBool == true)) {
        TriggerExecute(gt_TransmissionArchangelPartsCollected, true, false);
    }

    TriggerExecute(gt_ObjectiveGatherArchangelPartsUpdate, true, true);
}

void gf_ShowHidePartsRegionPings (bool lp_showHide) {
    // Variable Declarations
    int lv_bigPingIter;
    unit lv_pingedUnitIter;

    // Automatic Variable Declarations
    const int autoF2C2F3EC_ae = gv_c_PartsRegionsTotal;
    const int autoF2C2F3EC_ai = 1;
    unitgroup autoBEA844F8_g;
    int autoBEA844F8_u;
    unitgroup auto5FB195AC_g;
    int auto5FB195AC_u;

    // Variable Initialization

    // Implementation
    lv_bigPingIter = 1;
    for ( ; ( (autoF2C2F3EC_ai >= 0 && lv_bigPingIter <= autoF2C2F3EC_ae) || (autoF2C2F3EC_ai < 0 && lv_bigPingIter >= autoF2C2F3EC_ae) ) ; lv_bigPingIter += autoF2C2F3EC_ai ) {
        if ((gv_partsRegionPings[lv_bigPingIter] != c_invalidPingId)) {
            libCOMI_gf_ShowHidePingCoop(gv_partsRegionPings[lv_bigPingIter], lp_showHide);
        }

    }
    autoBEA844F8_g = gv_smallPingUnits;
    autoBEA844F8_u = UnitGroupCount(autoBEA844F8_g, c_unitCountAll);
    for (;; autoBEA844F8_u -= 1) {
        lv_pingedUnitIter = UnitGroupUnitFromEnd(autoBEA844F8_g, autoBEA844F8_u);
        if (lv_pingedUnitIter == null) { break; }
        if ((libHots_gf_PingStoredForUnit(lv_pingedUnitIter, 1) != c_invalidPingId)) {
            libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(lv_pingedUnitIter, 1), lp_showHide);
        }

    }
    auto5FB195AC_g = gv_droppedParts;
    auto5FB195AC_u = UnitGroupCount(auto5FB195AC_g, c_unitCountAll);
    for (;; auto5FB195AC_u -= 1) {
        lv_pingedUnitIter = UnitGroupUnitFromEnd(auto5FB195AC_g, auto5FB195AC_u);
        if (lv_pingedUnitIter == null) { break; }
        if ((UnitIsValid(lv_pingedUnitIter) == true)) {
            libCOMI_gf_ShowHidePingCoop(libHots_gf_PingStoredForUnit(lv_pingedUnitIter, 1), lp_showHide);
        }

    }
}

trigger auto_gf_PartsSmallPing_Trigger = null;
unit auto_gf_PartsSmallPing_lp_unitToPing;

void gf_PartsSmallPing (unit lp_unitToPing) {
    auto_gf_PartsSmallPing_lp_unitToPing = lp_unitToPing;

    if (auto_gf_PartsSmallPing_Trigger == null) {
        auto_gf_PartsSmallPing_Trigger = TriggerCreate("auto_gf_PartsSmallPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_PartsSmallPing_Trigger, false, false);
}

bool auto_gf_PartsSmallPing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unitToPing = auto_gf_PartsSmallPing_lp_unitToPing;

    // Automatic Variable Declarations
    // Implementation
    if (((UnitIsAlive(lp_unitToPing) == false) || (libHots_gf_PingStoredForUnit(lp_unitToPing, 1) != c_invalidPingId))) {
        return true;
    }
    else {
        UnitGroupAdd(gv_smallPingUnits, lp_unitToPing);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lp_unitToPing), StringExternal("Param/Value/9A729A8E"));
        PingSetUnit(PingLastCreated(), lp_unitToPing);
        libHots_gf_StorePingForUnit(lp_unitToPing, 1, PingLastCreated());
        PingSetScale(PingLastCreated(), 0.6);
        while (!((UnitIsValid(lp_unitToPing) == false))) {
            Wait(0.25, c_timeGame);
        }
        libCOMI_gf_DestroyPingCoop(PingLastCreated());
    }
    return true;
}

void gf_CreateBossPing (int lp_bossIndex) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_bossCages[lp_bossIndex]), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5371D926"));
    libHots_gf_StorePingForUnit(gv_bossCages[lp_bossIndex], 1, PingLastCreated());
}

trigger auto_gf_HybridAbilitySingleTargetAddTarget_Trigger = null;
unit auto_gf_HybridAbilitySingleTargetAddTarget_lp_target;

void gf_HybridAbilitySingleTargetAddTarget (unit lp_target) {
    auto_gf_HybridAbilitySingleTargetAddTarget_lp_target = lp_target;

    if (auto_gf_HybridAbilitySingleTargetAddTarget_Trigger == null) {
        auto_gf_HybridAbilitySingleTargetAddTarget_Trigger = TriggerCreate("auto_gf_HybridAbilitySingleTargetAddTarget_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridAbilitySingleTargetAddTarget_Trigger, false, false);
}

bool auto_gf_HybridAbilitySingleTargetAddTarget_TriggerFunc (bool testConds, bool runActions) {
    unit lp_target = auto_gf_HybridAbilitySingleTargetAddTarget_lp_target;

    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(gv_hybridAbility_SingleTarget_Targets, lp_target);
    Wait(gv_hybridAbility_SingleTarget_LockOnDuration, c_timeGame);
    UnitGroupRemove(gv_hybridAbility_SingleTarget_Targets, lp_target);
    return true;
}

trigger auto_gf_HybridBossBaseAbilityLogic_Trigger = null;
unit auto_gf_HybridBossBaseAbilityLogic_lp_unit;

void gf_HybridBossBaseAbilityLogic (unit lp_unit) {
    auto_gf_HybridBossBaseAbilityLogic_lp_unit = lp_unit;

    if (auto_gf_HybridBossBaseAbilityLogic_Trigger == null) {
        auto_gf_HybridBossBaseAbilityLogic_Trigger = TriggerCreate("auto_gf_HybridBossBaseAbilityLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossBaseAbilityLogic_Trigger, false, false);
}

bool auto_gf_HybridBossBaseAbilityLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_HybridBossBaseAbilityLogic_lp_unit;

    // Variable Declarations
    unitgroup lv_nearByEnemies;
    unitgroup lv_nearByEnemiesOnlyAir;
    unitgroup lv_nearByEnemiesOnlyGround;
    unitgroup lv_unitsToBlinkAwayFrom;
    region lv_hybridFightArea;
    fixed lv_angle;
    point lv_blinkLocation;
    timer lv_blinkTimer;
    unit lv_singleTarget_TargetBest;
    timer lv_singleTarget_CooldownIndividual;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearByEnemies = UnitGroupEmpty();
    lv_nearByEnemiesOnlyAir = UnitGroupEmpty();
    lv_nearByEnemiesOnlyGround = UnitGroupEmpty();
    lv_unitsToBlinkAwayFrom = UnitGroupEmpty();
    lv_blinkTimer = TimerCreate();
    lv_singleTarget_CooldownIndividual = TimerCreate();

    // Implementation
    lv_hybridFightArea = RegionFromName(("Hybrid Boss Fight Area " + IntToString(gv_bossesSlain)));
    if ((lv_hybridFightArea == null)) {
        lv_hybridFightArea = null;
    }

    TimerStart(lv_blinkTimer, RandomFixed(8.0, 16.0), false, c_timeGame);
    TimerStart(lv_singleTarget_CooldownIndividual, gv_bossTuning_SingleTarget_Cooldown, false, c_timeGame);
    while ((UnitIsValid(lp_unit) == true)) {
        lv_nearByEnemies = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_nearByEnemiesOnlyAir = UnitGroupFilter(null, c_playerAny, lv_nearByEnemies, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearByEnemiesOnlyGround = UnitGroupFilter(null, c_playerAny, lv_nearByEnemies, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupRemoveUnitGroup(lv_nearByEnemiesOnlyAir, gv_hybridAbility_SingleTarget_Targets);
        UnitGroupRemoveUnitGroup(lv_nearByEnemiesOnlyGround, gv_hybridAbility_SingleTarget_Targets);
        if ((UnitGroupCount(lv_nearByEnemies, c_unitCountAlive) > 0)) {
            if ((TimerGetRemaining(lv_singleTarget_CooldownIndividual) <= 0.0) && (UnitGroupCount(lv_nearByEnemiesOnlyAir, c_unitCountAlive) > 0)) {
                lv_singleTarget_TargetBest = gf_HybridBossSingleTargetBestTarget(lp_unit, lv_nearByEnemiesOnlyAir, gv_bossTuning_SingleTarget_MinDamage_Air);
                if ((lv_singleTarget_TargetBest != null)) {
                    gf_HybridAbilitySingleTargetAddTarget(lv_singleTarget_TargetBest);
                    UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("MoebiusSeekerLockOn", 0), lv_singleTarget_TargetBest), c_orderQueueReplace);
                    TimerStart(lv_singleTarget_CooldownIndividual, gv_bossTuning_SingleTarget_Cooldown, false, c_timeGame);
                }

            }
            else {
                if ((TimerGetRemaining(lv_singleTarget_CooldownIndividual) <= 0.0) && (UnitGroupCount(lv_nearByEnemiesOnlyGround, c_unitCountAlive) > 0)) {
                    lv_singleTarget_TargetBest = gf_HybridBossSingleTargetBestTarget(lp_unit, lv_nearByEnemiesOnlyGround, gv_bossTuning_SingleTarget_MinDamage_Ground);
                    if ((lv_singleTarget_TargetBest != null)) {
                        gf_HybridAbilitySingleTargetAddTarget(lv_singleTarget_TargetBest);
                        UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("MoebiusSeekerLockOn", 0), lv_singleTarget_TargetBest), c_orderQueueReplace);
                        TimerStart(lv_singleTarget_CooldownIndividual, gv_bossTuning_SingleTarget_Cooldown, false, c_timeGame);
                    }

                }
                else {
                    if ((TimerGetRemaining(lv_blinkTimer) <= 0.0) && (UnitAbilityGetCooldown(lp_unit, "HybridDominatorCoopBossBlink", "Blink") <= 0.0)) {
                        TimerStart(lv_blinkTimer, RandomFixed(16.0, 24.0), false, c_timeGame);
                        lv_unitsToBlinkAwayFrom = UnitGroup(UnitGetType(lp_unit), UnitGetOwner(lp_unit), null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        UnitGroupAddUnitGroup(lv_unitsToBlinkAwayFrom, lv_nearByEnemies);
                        lv_angle = AngleBetweenPoints(UnitGroupCenterOfGroup(lv_unitsToBlinkAwayFrom), UnitGetPosition(lp_unit));
                        lv_blinkLocation = PointWithOffsetPolar(UnitGetPosition(lp_unit), 8.0, lv_angle);
                        if ((RegionContainsPoint(lv_hybridFightArea, lv_blinkLocation) == false)) {
                            lv_blinkLocation = RegionRandomPoint(lv_hybridFightArea);
                        }

                        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("HybridDominatorCoopBossBlink", 0), lv_blinkLocation), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGroupCenterOfGroup(lv_nearByEnemies)), c_orderQueueReplace);
                    }
                }
            }
        }

        Wait(2.0, c_timeGame);
    }
    return true;
}

unit gf_HybridBossSingleTargetBestTarget (unit lp_caster, unitgroup lp_potentialTargets, fixed lp_minimumVitalityToTarget) {
    // Variable Declarations
    unit lv_singleTarget_TargetIter;
    unit lv_singleTarget_TargetBest;
    fixed lv_singleTarget_TargetCountBest;
    fixed lv_singleTarget_TargetCountTest;
    fixed lv_singleTarget_Data_AoE;

    // Automatic Variable Declarations
    unitgroup autoA14D1F2E_g;
    int autoA14D1F2E_u;

    // Variable Initialization

    // Implementation
    lv_singleTarget_Data_AoE = 1.5;
    autoA14D1F2E_g = lp_potentialTargets;
    autoA14D1F2E_u = UnitGroupCount(autoA14D1F2E_g, c_unitCountAll);
    for (;; autoA14D1F2E_u -= 1) {
        lv_singleTarget_TargetIter = UnitGroupUnitFromEnd(autoA14D1F2E_g, autoA14D1F2E_u);
        if (lv_singleTarget_TargetIter == null) { break; }
        lv_singleTarget_TargetCountTest = gf_UnitGroupVitality(UnitGroupFilterRegion(lp_potentialTargets, RegionCircle(UnitGetPosition(lv_singleTarget_TargetIter), lv_singleTarget_Data_AoE), 0));
        if ((lv_singleTarget_TargetCountTest > lv_singleTarget_TargetCountBest)) {
            lv_singleTarget_TargetBest = lv_singleTarget_TargetIter;
            lv_singleTarget_TargetCountBest = lv_singleTarget_TargetCountTest;
        }

    }
    if ((lv_singleTarget_TargetBest != null) && (lv_singleTarget_TargetCountBest > lp_minimumVitalityToTarget)) {
        return lv_singleTarget_TargetBest;
    }

    return null;
}

fixed gf_UnitGroupVitality (unitgroup lp_groupOfUnits) {
    // Variable Declarations
    unit lv_unitIter;
    fixed lv_totalVitality;

    // Automatic Variable Declarations
    unitgroup autoF5BE021D_g;
    int autoF5BE021D_u;

    // Variable Initialization

    // Implementation
    autoF5BE021D_g = lp_groupOfUnits;
    autoF5BE021D_u = UnitGroupCount(autoF5BE021D_g, c_unitCountAll);
    for (;; autoF5BE021D_u -= 1) {
        lv_unitIter = UnitGroupUnitFromEnd(autoF5BE021D_g, autoF5BE021D_u);
        if (lv_unitIter == null) { break; }
        lv_totalVitality += UnitGetPropertyFixed(lv_unitIter, c_unitPropVitality, c_unitPropCurrent);
    }
    return lv_totalVitality;
}

trigger auto_gf_BossLogic_Trigger = null;
int auto_gf_BossLogic_lp_bossIndex;
unit auto_gf_BossLogic_lp_bossUnit;

void gf_BossLogic (int lp_bossIndex, unit lp_bossUnit) {
    auto_gf_BossLogic_lp_bossIndex = lp_bossIndex;
    auto_gf_BossLogic_lp_bossUnit = lp_bossUnit;

    if (auto_gf_BossLogic_Trigger == null) {
        auto_gf_BossLogic_Trigger = TriggerCreate("auto_gf_BossLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossLogic_Trigger, false, false);
}

bool auto_gf_BossLogic_TriggerFunc (bool testConds, bool runActions) {
    int lp_bossIndex = auto_gf_BossLogic_lp_bossIndex;
    unit lp_bossUnit = auto_gf_BossLogic_lp_bossUnit;

    int init_i;

    // Variable Declarations
    fixed lv_generalAbilityCooldownLength;
    timer lv_generalAbilityCooldown;
    timer[gv_c_MaxStyles + 1] lv_styleTimers;
    bool[gv_c_MaxStyles + 1] lv_styleInitialized;
    unitgroup[gv_c_MaxStyles + 1] lv_styleUnitGroup;
    unit lv_unitGroupIter;
    unit lv_unitGroupIter_Inner;
    int lv_styleIter;
    fixed lv_distance;
    fixed lv_angle;
    point lv_abilityTarget;
    int lv_attackWaveUnitsSpawned;
    unitgroup lv_enemiesNearBy;
    point lv_abilityCenter;
    unitgroup lv_spawnedUnits;
    bool[4] lv_phaseComplete;
    bool lv_c_AlwaysHasIllusionist;
    unit lv_voidRift;
    int lv_illusionIter;

    // Automatic Variable Declarations
    int auto84286199_ae;
    const int auto84286199_ai = 1;
    unitgroup autoE2E2F8C3_g;
    int autoE2E2F8C3_u;
    const int auto82377322_ae = 4;
    const int auto82377322_ai = 1;
    unitgroup auto599FB274_g;
    int auto599FB274_u;
    int autoDEA78185_ae;
    const int autoDEA78185_ai = 1;
    unitgroup auto319764DD_g;
    int auto319764DD_u;

    // Variable Initialization
    lv_generalAbilityCooldown = TimerCreate();
    for (init_i = 0; init_i <= gv_c_MaxStyles; init_i += 1) {
        lv_styleTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_MaxStyles; init_i += 1) {
        lv_styleUnitGroup[init_i] = UnitGroupEmpty();
    }
    lv_enemiesNearBy = UnitGroupEmpty();
    lv_spawnedUnits = UnitGroupEmpty();
    lv_c_AlwaysHasIllusionist = true;

    // Implementation
    lv_generalAbilityCooldownLength = 5.0;
    gf_HybridBossBaseAbilityLogic(lp_bossUnit);
    UnitGroupAdd(gv_hybridBossesGroup, lp_bossUnit);
    while ((libCOMI_gf_GameIsOver() == false) && (UnitIsValid(lp_bossUnit) == true)) {
        gv_victoryCompletePan = UnitGetPosition(lp_bossUnit);
        lv_enemiesNearBy = UnitGroupAlliance(UnitGetOwner(lp_bossUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_bossUnit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((gf_BossHasStyles(lp_bossIndex, ge_BossStyles_Illusionist) == true)) {
            if ((libNtve_gf_UnitIsPaused(lp_bossUnit) == true) && (UnitGroupCount(lv_styleUnitGroup[ge_BossStyles_Illusionist], c_unitCountAlive) <= 0)) {
                gf_HybridBossMirrorImage(lp_bossUnit, false);
            }

            if ((lv_styleInitialized[ge_BossStyles_Illusionist] == false)) {
                lv_styleInitialized[ge_BossStyles_Illusionist] = true;
                TimerStart(lv_styleTimers[ge_BossStyles_Illusionist], gv_bossTuning_Illusionist_InitialDelay, false, c_timeGame);
            }

            if ((((lv_phaseComplete[1] == false) && (UnitGetPropertyFixed(lp_bossUnit, c_unitPropVitalityPercent, c_unitPropCurrent) <= 80.0)) || ((lv_phaseComplete[2] == false) && (UnitGetPropertyFixed(lp_bossUnit, c_unitPropVitalityPercent, c_unitPropCurrent) <= 40.0)))) {
                if ((lv_phaseComplete[1] == false)) {
                    lv_phaseComplete[1] = true;
                    TriggerExecute(gt_TransmissionHybridBossTauntQ, true, false);
                }
                else {
                    if ((lv_phaseComplete[2] == false)) {
                        lv_phaseComplete[2] = true;
                        TriggerExecute(gt_TransmissionHybridBossTauntQ, true, false);
                    }

                }
                TimerStart(lv_styleTimers[ge_BossStyles_Illusionist], gv_bossTuning_Illusionist_Cooldown, false, c_timeGame);
                lv_abilityCenter = UnitGetPosition(lp_bossUnit);
                gf_HybridBossMirrorImage(lp_bossUnit, true);
                lv_angle = libNtve_gf_RandomAngle();
                auto84286199_ae = gv_bossTuning_Illusionist_NumberOfIllusionsAbilityCreates[lp_bossIndex];
                lv_illusionIter = 1;
                for ( ; ( (auto84286199_ai >= 0 && lv_illusionIter <= auto84286199_ae) || (auto84286199_ai < 0 && lv_illusionIter >= auto84286199_ae) ) ; lv_illusionIter += auto84286199_ai ) {
                    UnitCreate(1, "HybridDominatorCoopBoss", c_unitCreateIgnorePlacement, UnitGetOwner(lp_bossUnit), lv_abilityCenter, libNtve_gf_RandomAngle());
                    UnitGroupAdd(lv_styleUnitGroup[ge_BossStyles_Illusionist], UnitLastCreated());
                    UnitGroupAdd(gv_hybridBossesGroup, UnitLastCreated());
                    gv_hybridShades[lv_illusionIter] = UnitLastCreated();
                    UnitBehaviorAddPlayer(UnitLastCreated(), "Invulnerable", UnitGetOwner(UnitLastCreated()), 1);
                    UnitBehaviorSetDurationRemaining(UnitLastCreated(), "Invulnerable", 2.0);
                    UnitBehaviorSetDuration(UnitLastCreated(), "Invulnerable", 2.0);
                    UnitAbilityEnable(UnitLastCreated(), "attack", false);
                    UnitAbilityEnable(UnitLastCreated(), "move", false);
                    TextExpressionSetToken("Param/Expression/7D0CC9F6", "A", UnitTypeGetName(UnitGetType(lp_bossUnit)));
                    libCOMI_gf_SetUnitInfoTextCampaignDetailed(UnitLastCreated(), StringExternal("Param/Value/9C06C3A9"), TextExpressionAssemble("Param/Expression/7D0CC9F6"), null);
                    UnitBehaviorAddPlayer(UnitLastCreated(), "HybridPnPMirrorImage", UnitGetOwner(UnitLastCreated()), 1);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_bossTuning_Illusionist_IllusionVitality[lp_bossIndex] * 0.75));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (gv_bossTuning_Illusionist_IllusionVitality[lp_bossIndex] * 0.25));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("HybridDominatorCoopBossMirrorImage", 0));
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimBaselineStart());
                    lv_angle += (360.0 / gv_bossTuning_Illusionist_NumberOfIllusionsAbilityCreates[lp_bossIndex]);
                    UnitCreateEffectPoint(UnitLastCreated(), "HybridDominatorCoopBossBlink", PointWithOffsetPolar(lv_abilityCenter, 5.0, lv_angle));
                    UnitSetFacing(UnitLastCreated(), lv_angle, 0.0);
                }
                Wait(1.0, c_timeGame);
                autoE2E2F8C3_g = lv_styleUnitGroup[ge_BossStyles_Illusionist];
                autoE2E2F8C3_u = UnitGroupCount(autoE2E2F8C3_g, c_unitCountAll);
                for (;; autoE2E2F8C3_u -= 1) {
                    lv_unitGroupIter = UnitGroupUnitFromEnd(autoE2E2F8C3_g, autoE2E2F8C3_u);
                    if (lv_unitGroupIter == null) { break; }
                    ActorSend(libNtve_gf_MainActorofUnit(lv_unitGroupIter), libNtve_gf_ModelSwap("HybridDominatorCoopBoss", 0));
                    ActorSend(libNtve_gf_MainActorofUnit(lv_unitGroupIter), libNtve_gf_AnimBaselineStart());
                    gf_HybridBossCastAnimationGeneral(lv_unitGroupIter, "Birth");
                    UnitAbilityEnable(lv_unitGroupIter, "attack", false);
                    UnitAbilityEnable(lv_unitGroupIter, "move", false);
                    gf_HybridBossBaseAbilityLogic(lv_unitGroupIter);
                }
            }

        }

        if ((gf_BossHasStyles(lp_bossIndex, ge_BossStyles_PuddleLines) == true)) {
            if ((lv_styleInitialized[ge_BossStyles_PuddleLines] == false)) {
                lv_styleInitialized[ge_BossStyles_PuddleLines] = true;
                TimerStart(lv_styleTimers[ge_BossStyles_PuddleLines], gv_bossTuning_PuddleLines_InitialDelay, false, c_timeGame);
            }

            if ((TimerGetRemaining(lv_generalAbilityCooldown) <= 0.0) && (TimerGetRemaining(lv_styleTimers[ge_BossStyles_PuddleLines]) <= 0.0)) {
                TimerStart(lv_styleTimers[ge_BossStyles_PuddleLines], gv_bossTuning_PuddleLines_Cooldown, false, c_timeGame);
                TimerStart(lv_generalAbilityCooldown, lv_generalAbilityCooldownLength, false, c_timeGame);
                lv_unitGroupIter = UnitGroupRandomUnit(lv_styleUnitGroup[ge_BossStyles_Illusionist], c_unitCountAlive);
                if ((lv_unitGroupIter == null)) {
                    lv_unitGroupIter = lp_bossUnit;
                }

                gf_HybridBossCastAnimation(lv_unitGroupIter);
                if ((RandomInt(0, 1) == 1)) {
                    lv_angle = 0.0;
                }
                else {
                    lv_angle = 45.0;
                }
                lv_styleIter = 1;
                for ( ; ( (auto82377322_ai >= 0 && lv_styleIter <= auto82377322_ae) || (auto82377322_ai < 0 && lv_styleIter >= auto82377322_ae) ) ; lv_styleIter += auto82377322_ai ) {
                    gf_HybridBossPuddleLine(UnitGetPosition(lv_unitGroupIter), ((lv_styleIter * 90.0) + lv_angle), 20.0, 1, 15.0);
                }
            }

        }

        if ((gf_BossHasStyles(lp_bossIndex, ge_BossStyles_FireChains) == true)) {
            if ((lv_styleInitialized[ge_BossStyles_FireChains] == false)) {
                lv_styleInitialized[ge_BossStyles_FireChains] = true;
                TimerStart(lv_styleTimers[ge_BossStyles_FireChains], gv_bossTuning_FireChains_InitialDelay, false, c_timeGame);
            }

            if ((TimerGetRemaining(lv_styleTimers[ge_BossStyles_FireChains]) <= 0.0) && (TimerGetRemaining(lv_generalAbilityCooldown) <= 0.0) && (UnitGroupCount(lv_enemiesNearBy, c_unitCountAlive) > 0)) {
                lv_unitGroupIter = UnitGroupRandomUnit(lv_styleUnitGroup[ge_BossStyles_Illusionist], c_unitCountAlive);
                if ((lv_unitGroupIter == null)) {
                    lv_unitGroupIter = lp_bossUnit;
                }

                gf_HybridBossCastAnimation(lv_unitGroupIter);
                TimerStart(lv_styleTimers[ge_BossStyles_FireChains], gv_bossTuning_FireChains_Cooldown, false, c_timeGame);
                TimerStart(lv_generalAbilityCooldown, lv_generalAbilityCooldownLength, false, c_timeGame);
                if ((gv_hybridAbilityFirechainsType == 0)) {
                    gf_HybridBossFireChainsCone(UnitGetFacing(lv_unitGroupIter), UnitGetPosition(lv_unitGroupIter), (gv_bossTuning_FireChains_MaxLengthRadial / (gv_bossTuning_FireChains_Cooldown * 0.75)), 180.0, gv_bossTuning_FireChains_MaxLengthRadial);
                }
                else {
                    gf_HybridBossFireChainsCone(UnitGetFacing(lv_unitGroupIter), UnitGetPosition(lv_unitGroupIter), (gv_bossTuning_FireChains_MaxLengthCone / (gv_bossTuning_FireChains_Cooldown * 0.25)), 45.0, gv_bossTuning_FireChains_MaxLengthCone);
                }
            }

        }

        if ((gf_BossHasStyles(lp_bossIndex, ge_BossStyles_AttackWaveSpawner) == true)) {
            if ((lv_styleInitialized[ge_BossStyles_AttackWaveSpawner] == false)) {
                lv_styleInitialized[ge_BossStyles_AttackWaveSpawner] = true;
                TimerStart(lv_styleTimers[ge_BossStyles_AttackWaveSpawner], gv_bossTuning_AttackWaveSpawner_InitialDelay, false, c_timeGame);
            }

            if ((TimerGetRemaining(lv_styleTimers[ge_BossStyles_AttackWaveSpawner]) <= 0.0) && (UnitGroupCount(lv_styleUnitGroup[ge_BossStyles_AttackWaveSpawner], c_unitCountAlive) <= FixedToInt((IntToFixed(lv_attackWaveUnitsSpawned) * 0.25)))) {
                TimerStart(lv_styleTimers[ge_BossStyles_AttackWaveSpawner], gv_bossTuning_AttackWaveSpawner_Cooldown, false, c_timeGame);
                lv_unitGroupIter_Inner = UnitGroupRandomUnit(lv_styleUnitGroup[ge_BossStyles_Illusionist], c_unitCountAlive);
                if ((lv_unitGroupIter_Inner == null)) {
                    lv_unitGroupIter_Inner = lp_bossUnit;
                }

                UnitCreate(1, "PnPHybridVoidRift", c_unitCreateIgnorePlacement, UnitGetOwner(lv_unitGroupIter_Inner), PointWithOffsetPolar(UnitGetPosition(lv_unitGroupIter_Inner), 2.0, UnitGetFacing(lv_unitGroupIter_Inner)), UnitGetFacing(lv_unitGroupIter_Inner));
                lv_voidRift = UnitLastCreated();
                UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
                gf_HybridBossCastAnimation(lv_unitGroupIter_Inner);
                Wait(0.5, c_timeGame);
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, gv_bossTuning_AttackWaveSpawner_ResourceAmount[gv_bossesSlain], gv_bossTuning_AttackWaveSpawner_TechLevel[gv_bossesSlain], PointWithOffsetPolar(UnitGetPosition(lv_unitGroupIter_Inner), 2.0, UnitGetFacing(lv_unitGroupIter_Inner)), false);
                UnitGroupAddUnitGroup(lv_spawnedUnits, libCOMI_gf_LastCreatedCoopAttackForce());
                UnitGroupAddUnitGroup(lv_styleUnitGroup[ge_BossStyles_AttackWaveSpawner], lv_spawnedUnits);
                if ((lv_attackWaveUnitsSpawned == 0)) {
                    lv_attackWaveUnitsSpawned = UnitGroupCount(lv_styleUnitGroup[ge_BossStyles_AttackWaveSpawner], c_unitCountAlive);
                }

                gf_HybridBossUnitSpawner(lv_unitGroupIter_Inner, lv_spawnedUnits, lv_voidRift);
            }

            auto599FB274_g = lv_styleUnitGroup[ge_BossStyles_AttackWaveSpawner];
            auto599FB274_u = UnitGroupCount(auto599FB274_g, c_unitCountAll);
            for (;; auto599FB274_u -= 1) {
                lv_unitGroupIter = UnitGroupUnitFromEnd(auto599FB274_g, auto599FB274_u);
                if (lv_unitGroupIter == null) { break; }
                AISetUnitScriptControlled(lv_unitGroupIter, false);
                if ((OrderGetTargetPosition(UnitOrder(lp_bossUnit, 0)) != null)) {
                    libNtve_gf_AICast(lv_unitGroupIter, OrderTargetingPoint(AbilityCommand("attack", 0), OrderGetTargetPosition(UnitOrder(lp_bossUnit, 0))));
                }

            }
        }

        if ((gf_BossHasStyles(lp_bossIndex, ge_BossStyles_Stasis) == true) && (TimerGetRemaining(lv_styleTimers[ge_BossStyles_Stasis]) <= 0.0) && (TimerGetRemaining(lv_generalAbilityCooldown) <= 0.0)) {
            lv_abilityTarget = null;
            lv_unitGroupIter_Inner = UnitGroupRandomUnit(lv_styleUnitGroup[ge_BossStyles_Illusionist], c_unitCountAlive);
            if ((lv_unitGroupIter_Inner == null)) {
                lv_unitGroupIter_Inner = lp_bossUnit;
            }

            lv_abilityTarget = AIBestTargetPoint(UnitGroupAlliance(UnitGetOwner(lv_unitGroupIter_Inner), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_unitGroupIter_Inner), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 10, 0, 1.0, 5.0, UnitGetPosition(lv_unitGroupIter_Inner), 30.0, 0);
            if ((lv_abilityTarget != null)) {
                TimerStart(lv_generalAbilityCooldown, lv_generalAbilityCooldownLength, false, c_timeGame);
                TimerStart(lv_styleTimers[ge_BossStyles_Stasis], gv_bossTuning_Stasis_Cooldown, false, c_timeGame);
                gf_HybridBossCastAnimation(lv_unitGroupIter_Inner);
                gf_HybridBossStasisAbility(lv_abilityTarget, lv_unitGroupIter_Inner);
            }

        }

        Wait(0.25, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_bossUnit, 1));
    autoDEA78185_ae = (ge_BossStyles_Illusionist);
    lv_styleIter = (ge_BossStyles__None);
    for ( ; ( (autoDEA78185_ai >= 0 && lv_styleIter <= autoDEA78185_ae) || (autoDEA78185_ai < 0 && lv_styleIter >= autoDEA78185_ae) ) ; lv_styleIter += autoDEA78185_ai ) {
        auto319764DD_g = lv_styleUnitGroup[lv_styleIter];
        auto319764DD_u = UnitGroupCount(auto319764DD_g, c_unitCountAll);
        for (;; auto319764DD_u -= 1) {
            lv_unitGroupIter = UnitGroupUnitFromEnd(auto319764DD_g, auto319764DD_u);
            if (lv_unitGroupIter == null) { break; }
            UnitKill(lv_unitGroupIter);
        }
    }
    return true;
}

bool gf_BossHasStyles (int lp_bossIndex, int lp_bossStyle) {
    // Variable Declarations
    int lv_styleIter;

    // Automatic Variable Declarations
    const int auto3811A5B9_ae = gv_c_MaxStylesPerBoss;
    const int auto3811A5B9_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_bossStyle == ge_BossStyles_Illusionist)) {
        return true;
    }

    lv_styleIter = 0;
    for ( ; ( (auto3811A5B9_ai >= 0 && lv_styleIter <= auto3811A5B9_ae) || (auto3811A5B9_ai < 0 && lv_styleIter >= auto3811A5B9_ae) ) ; lv_styleIter += auto3811A5B9_ai ) {
        if ((gv_bossStylesActive[lp_bossIndex][lv_styleIter] == lp_bossStyle)) {
            return true;
        }

    }
    return false;
}

trigger auto_gf_HybridBossStasisAbility_Trigger = null;
point auto_gf_HybridBossStasisAbility_lp_target;
unit auto_gf_HybridBossStasisAbility_lp_castingHybrid;

void gf_HybridBossStasisAbility (point lp_target, unit lp_castingHybrid) {
    auto_gf_HybridBossStasisAbility_lp_target = lp_target;
    auto_gf_HybridBossStasisAbility_lp_castingHybrid = lp_castingHybrid;

    if (auto_gf_HybridBossStasisAbility_Trigger == null) {
        auto_gf_HybridBossStasisAbility_Trigger = TriggerCreate("auto_gf_HybridBossStasisAbility_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossStasisAbility_Trigger, false, false);
}

bool auto_gf_HybridBossStasisAbility_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_HybridBossStasisAbility_lp_target;
    unit lp_castingHybrid = auto_gf_HybridBossStasisAbility_lp_castingHybrid;

    // Variable Declarations
    unit lv_targetIter;
    timer lv_castTimer;
    const fixed lv_c_DecalSize = 1.0;
    fixed lv_timeToCast;
    fixed lv_castAoE;
    fixed lv_decalScale;
    fixed lv_aoEIter;

    // Automatic Variable Declarations
    fixed autoB85CD5B9_ae;
    const fixed autoB85CD5B9_ai = 1.0;
    unitgroup autoC020B904_g;
    int autoC020B904_u;

    // Variable Initialization
    lv_castTimer = TimerCreate();

    // Implementation
    lv_timeToCast = gv_bossTuning_Stasis_CastTime;
    lv_castAoE = gv_bossTuning_Stasis_AreaOfEffect;
    lv_decalScale = (lv_castAoE / lv_c_DecalSize);
    libNtve_gf_CreateModelAtPoint("Hybrid_ProtossAdvanced_Experimented_StasisBomb_Cursor", lp_target);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(lv_decalScale, lv_decalScale, lv_decalScale, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_AnimPlaySequence("Spawned", "Birth;Stand;"));
    TimerStart(lv_castTimer, lv_timeToCast, false, c_timeGame);
    while ((TimerGetRemaining(lv_castTimer) > 0.0) && (UnitIsValid(lp_castingHybrid) == true)) {
        Wait(0.1, c_timeGame);
    }
    autoB85CD5B9_ae = lv_castAoE;
    lv_aoEIter = 1.0;
    for ( ; ( (autoB85CD5B9_ai >= 0 && lv_aoEIter <= autoB85CD5B9_ae) || (autoB85CD5B9_ai < 0 && lv_aoEIter >= autoB85CD5B9_ae) ) ; lv_aoEIter += autoB85CD5B9_ai ) {
        if ((UnitIsValid(lp_castingHybrid) == true)) {
            autoC020B904_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionCircle(lp_target, lv_aoEIter), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            autoC020B904_u = UnitGroupCount(autoC020B904_g, c_unitCountAll);
            for (;; autoC020B904_u -= 1) {
                lv_targetIter = UnitGroupUnitFromEnd(autoC020B904_g, autoC020B904_u);
                if (lv_targetIter == null) { break; }
                UnitBehaviorAddPlayer(lv_targetIter, "HybridPnPStasisField", gv_pLAYER_03_ENEMY, 1);
                if ((UnitFilterMatch(lv_targetIter, UnitGetOwner(lv_targetIter), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                    UnitBehaviorSetDurationRemaining(lv_targetIter, "ArbiterMPStasisField", (gv_bossTuning_Stasis_StasisDuration * 0.5));
                    UnitBehaviorSetDuration(lv_targetIter, "ArbiterMPStasisField", (gv_bossTuning_Stasis_StasisDuration * 0.5));
                }
                else {
                    UnitBehaviorSetDurationRemaining(lv_targetIter, "ArbiterMPStasisField", gv_bossTuning_Stasis_StasisDuration);
                    UnitBehaviorSetDuration(lv_targetIter, "ArbiterMPStasisField", gv_bossTuning_Stasis_StasisDuration);
                }
            }
            Wait(0.25, c_timeGame);
        }

    }
    ActorSend(libNtve_gf_ActorLastCreated(), MakeMsgAnimBracketStop("BSD", 0, -1.0, c_animTimeVariantAsAutomatic));
    return true;
}

trigger auto_gf_HybridBossPuddleLine_Trigger = null;
point auto_gf_HybridBossPuddleLine_lp_spawn;
fixed auto_gf_HybridBossPuddleLine_lp_travelDirection;
fixed auto_gf_HybridBossPuddleLine_lp_puddleLineLength;
int auto_gf_HybridBossPuddleLine_lp_children;
fixed auto_gf_HybridBossPuddleLine_lp_childSeperation;

void gf_HybridBossPuddleLine (point lp_spawn, fixed lp_travelDirection, fixed lp_puddleLineLength, int lp_children, fixed lp_childSeperation) {
    auto_gf_HybridBossPuddleLine_lp_spawn = lp_spawn;
    auto_gf_HybridBossPuddleLine_lp_travelDirection = lp_travelDirection;
    auto_gf_HybridBossPuddleLine_lp_puddleLineLength = lp_puddleLineLength;
    auto_gf_HybridBossPuddleLine_lp_children = lp_children;
    auto_gf_HybridBossPuddleLine_lp_childSeperation = lp_childSeperation;

    if (auto_gf_HybridBossPuddleLine_Trigger == null) {
        auto_gf_HybridBossPuddleLine_Trigger = TriggerCreate("auto_gf_HybridBossPuddleLine_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossPuddleLine_Trigger, false, false);
}

bool auto_gf_HybridBossPuddleLine_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawn = auto_gf_HybridBossPuddleLine_lp_spawn;
    fixed lp_travelDirection = auto_gf_HybridBossPuddleLine_lp_travelDirection;
    fixed lp_puddleLineLength = auto_gf_HybridBossPuddleLine_lp_puddleLineLength;
    int lp_children = auto_gf_HybridBossPuddleLine_lp_children;
    fixed lp_childSeperation = auto_gf_HybridBossPuddleLine_lp_childSeperation;

    // Variable Declarations
    int lv_childrenToCreate;
    fixed lv_puddleEffectSize;
    int lv_createPuddleCount;
    fixed lv_puddleSpawnDistance;
    fixed lv_createChildrenDistance;
    point lv_createPuddleLocation;

    // Automatic Variable Declarations
    int auto503A5CD4_n;
    int auto503A5CD4_i;

    // Variable Initialization

    // Implementation
    lv_childrenToCreate = lp_children;
    lv_puddleEffectSize = (2.0 * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PnPHybridPuddleSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_createPuddleCount = CeilingI((lp_puddleLineLength / lv_puddleEffectSize));
    auto503A5CD4_n = lv_createPuddleCount;
    for (auto503A5CD4_i = 1; auto503A5CD4_i <= auto503A5CD4_n; auto503A5CD4_i += 1) {
        lv_puddleSpawnDistance += lv_puddleEffectSize;
        lv_createPuddleLocation = PointWithOffsetPolar(lp_spawn, lv_puddleSpawnDistance, lp_travelDirection);
        PlayerCreateEffectPoint(gv_pLAYER_03_ENEMY, "PnPHybridPuddleCP", lv_createPuddleLocation);
        lv_createChildrenDistance += lv_puddleEffectSize;
        if ((lv_childrenToCreate > 0) && (lv_createChildrenDistance >= lp_childSeperation)) {
            lv_childrenToCreate -= 1;
            lv_createChildrenDistance -= lp_childSeperation;
            gf_HybridBossPuddleLine(lv_createPuddleLocation, (lp_travelDirection + 90.0), lp_puddleLineLength, 0, 0.0);
            gf_HybridBossPuddleLine(lv_createPuddleLocation, (lp_travelDirection - 90.0), lp_puddleLineLength, 0, 0.0);
        }

        Wait(0.75, c_timeGame);
    }
    return true;
}

trigger auto_gf_HybridBossFireChains_Trigger = null;
point auto_gf_HybridBossFireChains_lp_start;
point auto_gf_HybridBossFireChains_lp_end;
fixed auto_gf_HybridBossFireChains_lp_timeBetweenEffectSpawn;

void gf_HybridBossFireChains (point lp_start, point lp_end, fixed lp_timeBetweenEffectSpawn) {
    auto_gf_HybridBossFireChains_lp_start = lp_start;
    auto_gf_HybridBossFireChains_lp_end = lp_end;
    auto_gf_HybridBossFireChains_lp_timeBetweenEffectSpawn = lp_timeBetweenEffectSpawn;

    if (auto_gf_HybridBossFireChains_Trigger == null) {
        auto_gf_HybridBossFireChains_Trigger = TriggerCreate("auto_gf_HybridBossFireChains_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossFireChains_Trigger, false, false);
}

bool auto_gf_HybridBossFireChains_TriggerFunc (bool testConds, bool runActions) {
    point lp_start = auto_gf_HybridBossFireChains_lp_start;
    point lp_end = auto_gf_HybridBossFireChains_lp_end;
    fixed lp_timeBetweenEffectSpawn = auto_gf_HybridBossFireChains_lp_timeBetweenEffectSpawn;

    // Variable Declarations
    fixed lv_effectDiameter;
    fixed lv_distance;
    fixed lv_angle;
    int lv_numberOfEffectsToCreate;
    int lv_effectIter;

    // Automatic Variable Declarations
    int autoDB9B4853_ae;
    const int autoDB9B4853_ai = 1;

    // Variable Initialization

    // Implementation
    lv_distance = DistanceBetweenPoints(lp_start, lp_end);
    lv_angle = AngleBetweenPoints(lp_start, lp_end);
    lv_effectDiameter = (2.0 * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PnPHybridFloorBurstSearch", "AreaArray[" + IntToString(0) + "].Radius", gv_pLAYER_03_ENEMY));
    lv_numberOfEffectsToCreate = FixedToInt((lv_distance / lv_effectDiameter));
    autoDB9B4853_ae = lv_numberOfEffectsToCreate;
    lv_effectIter = 1;
    for ( ; ( (autoDB9B4853_ai >= 0 && lv_effectIter <= autoDB9B4853_ae) || (autoDB9B4853_ai < 0 && lv_effectIter >= autoDB9B4853_ae) ) ; lv_effectIter += autoDB9B4853_ai ) {
        PlayerCreateEffectPoint(gv_pLAYER_03_ENEMY, "PnPHybridFloorBurst", PointWithOffsetPolar(lp_start, (lv_effectDiameter * lv_effectIter), lv_angle));
        Wait(lp_timeBetweenEffectSpawn, c_timeGame);
    }
    return true;
}

trigger auto_gf_HybridBossFireChainsCone_Trigger = null;
fixed auto_gf_HybridBossFireChainsCone_lp_coneFacing;
point auto_gf_HybridBossFireChainsCone_lp_startingLocation;
fixed auto_gf_HybridBossFireChainsCone_lp_delayBetweenRows;
fixed auto_gf_HybridBossFireChainsCone_lp_angleToSweep;
fixed auto_gf_HybridBossFireChainsCone_lp_distanceToTravel;

void gf_HybridBossFireChainsCone (fixed lp_coneFacing, point lp_startingLocation, fixed lp_delayBetweenRows, fixed lp_angleToSweep, fixed lp_distanceToTravel) {
    auto_gf_HybridBossFireChainsCone_lp_coneFacing = lp_coneFacing;
    auto_gf_HybridBossFireChainsCone_lp_startingLocation = lp_startingLocation;
    auto_gf_HybridBossFireChainsCone_lp_delayBetweenRows = lp_delayBetweenRows;
    auto_gf_HybridBossFireChainsCone_lp_angleToSweep = lp_angleToSweep;
    auto_gf_HybridBossFireChainsCone_lp_distanceToTravel = lp_distanceToTravel;

    if (auto_gf_HybridBossFireChainsCone_Trigger == null) {
        auto_gf_HybridBossFireChainsCone_Trigger = TriggerCreate("auto_gf_HybridBossFireChainsCone_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossFireChainsCone_Trigger, false, false);
}

bool auto_gf_HybridBossFireChainsCone_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_coneFacing = auto_gf_HybridBossFireChainsCone_lp_coneFacing;
    point lp_startingLocation = auto_gf_HybridBossFireChainsCone_lp_startingLocation;
    fixed lp_delayBetweenRows = auto_gf_HybridBossFireChainsCone_lp_delayBetweenRows;
    fixed lp_angleToSweep = auto_gf_HybridBossFireChainsCone_lp_angleToSweep;
    fixed lp_distanceToTravel = auto_gf_HybridBossFireChainsCone_lp_distanceToTravel;

    // Variable Declarations
    fixed lv_effectDiameter;
    int lv_numberOfEffectsToCreate;
    fixed lv_coneAngle;
    fixed lv_radiusIter;
    int lv_perimiterIter;
    point lv_spawn;
    fixed lv_spawnAngle;

    // Automatic Variable Declarations
    fixed autoF2CC9B8D_ae;
    fixed autoF2CC9B8D_ai;
    int autoF721C7C6_ae;
    const int autoF721C7C6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_effectDiameter = (2.0 * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PnPHybridFloorBurstSearch", "AreaArray[" + IntToString(0) + "].Radius", gv_pLAYER_03_ENEMY));
    lv_coneAngle = lp_angleToSweep;
    autoF2CC9B8D_ae = lp_distanceToTravel;
    autoF2CC9B8D_ai = (lv_effectDiameter * 2.0);
    lv_radiusIter = 1.0;
    for ( ; ( (autoF2CC9B8D_ai >= 0 && lv_radiusIter <= autoF2CC9B8D_ae) || (autoF2CC9B8D_ai < 0 && lv_radiusIter >= autoF2CC9B8D_ae) ) ; lv_radiusIter += autoF2CC9B8D_ai ) {
        lv_numberOfEffectsToCreate = FixedToInt(((1.0 / lv_effectDiameter) * (lv_coneAngle / 360.0) * lv_radiusIter * 3.1415 * 2.0));
        if ((lv_numberOfEffectsToCreate == 0)) {
            continue;
        }

        autoF721C7C6_ae = lv_numberOfEffectsToCreate;
        lv_perimiterIter = 0;
        for ( ; ( (autoF721C7C6_ai >= 0 && lv_perimiterIter <= autoF721C7C6_ae) || (autoF721C7C6_ai < 0 && lv_perimiterIter >= autoF721C7C6_ae) ) ; lv_perimiterIter += autoF721C7C6_ai ) {
            lv_spawnAngle = (lv_coneAngle * (IntToFixed(lv_perimiterIter) / IntToFixed(lv_numberOfEffectsToCreate)));
            lv_spawn = PointWithOffsetPolar(lp_startingLocation, lv_radiusIter, (lv_spawnAngle + (lp_coneFacing - (lv_coneAngle * 0.5))));
            PlayerCreateEffectPoint(gv_pLAYER_03_ENEMY, "PnPHybridFloorBurst", lv_spawn);
        }
        Wait(lp_delayBetweenRows, c_timeGame);
    }
    return true;
}

trigger auto_gf_HybridBossUnitSpawner_Trigger = null;
unit auto_gf_HybridBossUnitSpawner_lp_bossCreatingRift;
unitgroup auto_gf_HybridBossUnitSpawner_lp_unitsToSpawnFromRift;
unit auto_gf_HybridBossUnitSpawner_lp_voidRift;

void gf_HybridBossUnitSpawner (unit lp_bossCreatingRift, unitgroup lp_unitsToSpawnFromRift, unit lp_voidRift) {
    auto_gf_HybridBossUnitSpawner_lp_bossCreatingRift = lp_bossCreatingRift;
    auto_gf_HybridBossUnitSpawner_lp_unitsToSpawnFromRift = lp_unitsToSpawnFromRift;
    auto_gf_HybridBossUnitSpawner_lp_voidRift = lp_voidRift;

    if (auto_gf_HybridBossUnitSpawner_Trigger == null) {
        auto_gf_HybridBossUnitSpawner_Trigger = TriggerCreate("auto_gf_HybridBossUnitSpawner_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossUnitSpawner_Trigger, false, false);
}

bool auto_gf_HybridBossUnitSpawner_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bossCreatingRift = auto_gf_HybridBossUnitSpawner_lp_bossCreatingRift;
    unitgroup lp_unitsToSpawnFromRift = auto_gf_HybridBossUnitSpawner_lp_unitsToSpawnFromRift;
    unit lp_voidRift = auto_gf_HybridBossUnitSpawner_lp_voidRift;

    // Variable Declarations
    unit lv_attackGroupIter;

    // Automatic Variable Declarations
    unitgroup auto3871C790_g;
    int auto3871C790_u;

    // Variable Initialization

    // Implementation
    auto3871C790_g = lp_unitsToSpawnFromRift;
    auto3871C790_u = UnitGroupCount(auto3871C790_g, c_unitCountAll);
    for (;; auto3871C790_u -= 1) {
        lv_attackGroupIter = UnitGroupUnitFromEnd(auto3871C790_g, auto3871C790_u);
        if (lv_attackGroupIter == null) { break; }
        UnitCreateEffectUnit(lp_voidRift, "VoidRiftTrainSet", lv_attackGroupIter);
        SoundPlayForPlayer(SoundLink("Zurvan_SpellA_WeaponMeleeRelease_Vox", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
    }
    Wait(2.0, c_timeGame);
    UnitKill(lp_voidRift);
    return true;
}

int gf_HybridBossAttackWaveSpawnTechLevel () {
    // Automatic Variable Declarations
    int autoC5D337F0_val;

    // Implementation
    autoC5D337F0_val = gv_bossesSlain;
    if (autoC5D337F0_val == 0) {
        return libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (autoC5D337F0_val == 1) {
        return libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (autoC5D337F0_val == 2) {
        return libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else {
        return libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
}

int gf_HybridBossAttackWaveSpawnResourceAmount () {
    // Automatic Variable Declarations
    int auto59410BC6_val;

    // Implementation
    auto59410BC6_val = gv_bossesSlain;
    if (auto59410BC6_val == 0) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    }
    else if (auto59410BC6_val == 1) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    }
    else if (auto59410BC6_val == 2) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    }
    else {
        return libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
}

trigger auto_gf_HybridBossCastAnimation_Trigger = null;
unit auto_gf_HybridBossCastAnimation_lp_hybridBoss;

void gf_HybridBossCastAnimation (unit lp_hybridBoss) {
    auto_gf_HybridBossCastAnimation_lp_hybridBoss = lp_hybridBoss;

    if (auto_gf_HybridBossCastAnimation_Trigger == null) {
        auto_gf_HybridBossCastAnimation_Trigger = TriggerCreate("auto_gf_HybridBossCastAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossCastAnimation_Trigger, false, false);
}

bool auto_gf_HybridBossCastAnimation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybridBoss = auto_gf_HybridBossCastAnimation_lp_hybridBoss;

    // Automatic Variable Declarations
    // Implementation
    gf_HybridBossPauseforAnim(false, lp_hybridBoss);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_hybridBoss), "CastAnim", "Spell B", c_animFlagFullMatch, c_animTimeDefault);
    Wait(1.5, c_timeGame);
    gf_HybridBossPauseforAnim(true, lp_hybridBoss);
    return true;
}

trigger auto_gf_HybridBossCastAnimationGeneral_Trigger = null;
unit auto_gf_HybridBossCastAnimationGeneral_lp_hybridBoss;
string auto_gf_HybridBossCastAnimationGeneral_lp_animation;

void gf_HybridBossCastAnimationGeneral (unit lp_hybridBoss, string lp_animation) {
    auto_gf_HybridBossCastAnimationGeneral_lp_hybridBoss = lp_hybridBoss;
    auto_gf_HybridBossCastAnimationGeneral_lp_animation = lp_animation;

    if (auto_gf_HybridBossCastAnimationGeneral_Trigger == null) {
        auto_gf_HybridBossCastAnimationGeneral_Trigger = TriggerCreate("auto_gf_HybridBossCastAnimationGeneral_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossCastAnimationGeneral_Trigger, false, false);
}

bool auto_gf_HybridBossCastAnimationGeneral_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybridBoss = auto_gf_HybridBossCastAnimationGeneral_lp_hybridBoss;
    string lp_animation = auto_gf_HybridBossCastAnimationGeneral_lp_animation;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_MakeUnitInvulnerable(lp_hybridBoss, true);
    Wait(0.0625, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(lp_hybridBoss, false);
    gf_HybridBossPauseforAnim(false, lp_hybridBoss);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_hybridBoss), "CastAnim", lp_animation, c_animFlagFullMatch, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    gf_HybridBossPauseforAnim(true, lp_hybridBoss);
    return true;
}

trigger auto_gf_HybridBossMirrorImage_Trigger = null;
unit auto_gf_HybridBossMirrorImage_lp_hybridBoss;
bool auto_gf_HybridBossMirrorImage_lp_enableDisable;

void gf_HybridBossMirrorImage (unit lp_hybridBoss, bool lp_enableDisable) {
    auto_gf_HybridBossMirrorImage_lp_hybridBoss = lp_hybridBoss;
    auto_gf_HybridBossMirrorImage_lp_enableDisable = lp_enableDisable;

    if (auto_gf_HybridBossMirrorImage_Trigger == null) {
        auto_gf_HybridBossMirrorImage_Trigger = TriggerCreate("auto_gf_HybridBossMirrorImage_TriggerFunc");
    }

    TriggerExecute(auto_gf_HybridBossMirrorImage_Trigger, false, false);
}

bool auto_gf_HybridBossMirrorImage_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hybridBoss = auto_gf_HybridBossMirrorImage_lp_hybridBoss;
    bool lp_enableDisable = auto_gf_HybridBossMirrorImage_lp_enableDisable;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        UnitAbilityEnable(lp_hybridBoss, "attack", lp_enableDisable);
        UnitAbilityEnable(lp_hybridBoss, "move", lp_enableDisable);
        libNtve_gf_MakeUnitInvulnerable(lp_hybridBoss, true);
        gf_HybridBossPauseforAnim(false, lp_hybridBoss);
        ActorSend(libNtve_gf_MainActorofUnit(lp_hybridBoss), libNtve_gf_ModelSwap("HybridDominatorCoopBossMirrorImage", 0));
        ActorSend(libNtve_gf_MainActorofUnit(lp_hybridBoss), libNtve_gf_AnimBaselineStart());
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_hybridBoss), "CastAnim", "Birth", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
        Wait(1.0, c_timeGame);
        libNtve_gf_ShowHideUnit(lp_hybridBoss, false);
        libNtve_gf_PauseUnit(lp_hybridBoss, true);
    }
    else {
        libNtve_gf_ShowHideUnit(lp_hybridBoss, true);
        libNtve_gf_PauseUnit(lp_hybridBoss, false);
        ActorSend(libNtve_gf_MainActorofUnit(lp_hybridBoss), libNtve_gf_ModelSwap("HybridDominatorCoopBoss", 0));
        ActorSend(libNtve_gf_MainActorofUnit(lp_hybridBoss), libNtve_gf_AnimBaselineStart());
        gf_HybridBossCastAnimationGeneral(lp_hybridBoss, "Birth");
        libNtve_gf_MakeUnitInvulnerable(lp_hybridBoss, false);
        UnitAbilityEnable(lp_hybridBoss, "attack", lp_enableDisable);
        UnitAbilityEnable(lp_hybridBoss, "move", lp_enableDisable);
    }
    return true;
}

void gf_HybridBossPauseforAnim (bool lp_enableDisable, unit lp_boss) {
    // Automatic Variable Declarations
    // Implementation
    UnitAbilityEnable(lp_boss, "attack", lp_enableDisable);
    UnitAbilityEnable(lp_boss, "move", lp_enableDisable);
    UnitAbilityEnable(lp_boss, "HybridDominatorCoopBossBlink", lp_enableDisable);
}

void gf_PlayDamagedAnimationsforTrainCar (unit lp_trainCar, fixed lp_breakPoint) {
    // Automatic Variable Declarations
    // Implementation
    gv_trainCarToAnimate = lp_trainCar;
    gv_trainCarToAnimateBreakPoint = lp_breakPoint;
    TriggerExecute(gt_TrainCarDamageAnimationController, true, false);
}

trigger auto_gf_ActivatePingforTrainEngine_Trigger = null;
unit auto_gf_ActivatePingforTrainEngine_lp_trainCar;

void gf_ActivatePingforTrainEngine (unit lp_trainCar) {
    auto_gf_ActivatePingforTrainEngine_lp_trainCar = lp_trainCar;

    if (auto_gf_ActivatePingforTrainEngine_Trigger == null) {
        auto_gf_ActivatePingforTrainEngine_Trigger = TriggerCreate("auto_gf_ActivatePingforTrainEngine_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivatePingforTrainEngine_Trigger, false, false);
}

bool auto_gf_ActivatePingforTrainEngine_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainCar = auto_gf_ActivatePingforTrainEngine_lp_trainCar;

    // Variable Declarations
    int lv_trainPingLocal;
    int lv_trainIndexLocal;
    int lv_trainCarIndexLocal;

    // Automatic Variable Declarations
    const int autoC3E6301F_ae = gv_c_MaxTrainCount;
    const int autoC3E6301F_ai = 1;

    // Variable Initialization
    lv_trainPingLocal = c_invalidPingId;

    // Implementation
    lv_trainIndexLocal = 1;
    for ( ; ( (autoC3E6301F_ai >= 0 && lv_trainIndexLocal <= autoC3E6301F_ae) || (autoC3E6301F_ai < 0 && lv_trainIndexLocal >= autoC3E6301F_ae) ) ; lv_trainIndexLocal += autoC3E6301F_ai ) {
        if ((gv_trainList[lv_trainIndexLocal].lv_trainCars[1] == lp_trainCar)) {
            break;
        }

    }
    if ((gv_trainList[lv_trainIndexLocal].lv_trainType != ge_PRESET_TrainType_BonusObjective)) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lp_trainCar), StringExternal("Param/Value/16A9CCA2"));
    }
    else {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lp_trainCar), StringExternal("Param/Value/55617C0A"));
    }
    lv_trainPingLocal = PingLastCreated();
    PingSetUnit(lv_trainPingLocal, lp_trainCar);
    TextExpressionSetToken("Param/Expression/2CD168C4", "TrainTypeName", gf_GetTrainTypeName(gv_trainList[lv_trainIndexLocal].lv_trainType));
    PingSetTooltip(lv_trainPingLocal, TextExpressionAssemble("Param/Expression/2CD168C4"));
    lv_trainCarIndexLocal = 1;
    while (true) {
        if ((lv_trainCarIndexLocal <= gv_c_MaxTrainCarCount) && (gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_trainCarIndexLocal] != null)) {
            if ((UnitIsAlive(gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_trainCarIndexLocal]) == false)) {
                lv_trainCarIndexLocal += 1;
                continue;
            }
            else {
                PingSetUnit(lv_trainPingLocal, gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_trainCarIndexLocal]);
            }
        }
        else {
            break;
        }
        Wait(0.1, c_timeGame);
    }
    PingDestroy(lv_trainPingLocal);
    return true;
}

point gf_ExpectedPositionofTrainCar (int lp_trainCar, int lp_pathIndex) {
    // Variable Declarations
    fixed lv_seperationDistanceLocal;
    int lv_iLocal;
    point lv_currentPointLocal;
    int lv_currentTargetLocal;
    fixed lv_distanceRemainingLocal;

    // Automatic Variable Declarations
    int autoAF694DFF_ae;
    const int autoAF694DFF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_seperationDistanceLocal = (gv_tRAIN_CAR_SEPERATION + (2.0 * gv_tRAIN_RADIUS));
    lv_currentPointLocal = gv_trainPath[lp_pathIndex];
    lv_currentTargetLocal = (lp_pathIndex + 1);
    if ((lp_trainCar <= 1)) {
        return gv_trainPath[lp_pathIndex];
    }

    autoAF694DFF_ae = lp_trainCar;
    lv_iLocal = 2;
    for ( ; ( (autoAF694DFF_ai >= 0 && lv_iLocal <= autoAF694DFF_ae) || (autoAF694DFF_ai < 0 && lv_iLocal >= autoAF694DFF_ae) ) ; lv_iLocal += autoAF694DFF_ai ) {
        lv_distanceRemainingLocal = lv_seperationDistanceLocal;
        if ((lv_seperationDistanceLocal <= DistanceBetweenPoints(lv_currentPointLocal, gv_trainPath[(lv_currentTargetLocal - 1)]))) {
            lv_currentPointLocal = PointWithOffsetPolar(lv_currentPointLocal, lv_seperationDistanceLocal, AngleBetweenPoints(lv_currentPointLocal, gv_trainPath[(lv_currentTargetLocal - 1)]));
        }
        else {
            while (true) {
                lv_distanceRemainingLocal = (lv_distanceRemainingLocal - DistanceBetweenPoints(lv_currentPointLocal, gv_trainPath[(lv_currentTargetLocal - 1)]));
                lv_currentTargetLocal -= 1;
                if ((lv_currentTargetLocal < 1)) {
                    return gv_trainPath[lp_pathIndex];
                }

                if ((lv_distanceRemainingLocal <= DistanceBetweenPoints(gv_trainPath[lv_currentTargetLocal], gv_trainPath[(lv_currentTargetLocal - 1)]))) {
                    lv_currentPointLocal = PointWithOffsetPolar(gv_trainPath[lv_currentTargetLocal], lv_distanceRemainingLocal, AngleBetweenPoints(gv_trainPath[lv_currentTargetLocal], gv_trainPath[(lv_currentTargetLocal - 1)]));
                    break;
                }

            }
        }
    }
    PointSetFacing(lv_currentPointLocal, AngleBetweenPoints(lv_currentPointLocal, gv_trainPath[lv_currentTargetLocal]));
    return lv_currentPointLocal;
}

trigger auto_gf_SpawnaTrain_Trigger = null;
int auto_gf_SpawnaTrain_lp_tunnel;
int auto_gf_SpawnaTrain_lp_trainType;
int auto_gf_SpawnaTrain_lp_trainListIndex;

void gf_SpawnaTrain (int lp_tunnel, int lp_trainType, int lp_trainListIndex) {
    auto_gf_SpawnaTrain_lp_tunnel = lp_tunnel;
    auto_gf_SpawnaTrain_lp_trainType = lp_trainType;
    auto_gf_SpawnaTrain_lp_trainListIndex = lp_trainListIndex;

    if (auto_gf_SpawnaTrain_Trigger == null) {
        auto_gf_SpawnaTrain_Trigger = TriggerCreate("auto_gf_SpawnaTrain_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnaTrain_Trigger, false, false);
}

bool auto_gf_SpawnaTrain_TriggerFunc (bool testConds, bool runActions) {
    int lp_tunnel = auto_gf_SpawnaTrain_lp_tunnel;
    int lp_trainType = auto_gf_SpawnaTrain_lp_trainType;
    int lp_trainListIndex = auto_gf_SpawnaTrain_lp_trainListIndex;

    // Variable Declarations
    int lv_currentCarLocal;
    point lv_spawnLocationLocal;
    int lv_initialCustomValueLocal;
    string lv_trainCarTypeLocal;
    fixed lv_thisTrainSpeedLocal;
    fixed lv_thisTrainLifeLocal;
    int lv_thisNumberOfCarsLocal;
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    int autoE89297A2_val;
    int autoD2D40D46_ae;
    const int autoD2D40D46_ai = 1;
    int autoB1EEE00D_val;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Implementation
    gv_trainList[lp_trainListIndex].lv_initialized = true;
    gv_trainList[lp_trainListIndex].lv_trainStatus = ge_PRESET_TrainStatus_Spawning;
    gv_trainList[lp_trainListIndex].lv_trainAlive = true;
    gv_trainList[lp_trainListIndex].lv_spawnWave = gv_currentWave;
    gv_trainList[lp_trainListIndex].lv_tunnel = lp_tunnel;
    gv_trainList[lp_trainListIndex].lv_trainType = lp_trainType;
    gv_trainTypeCount[(lp_trainType)] += 1;
    lv_thisTrainLifeLocal = gv_trainDifficulty_Life;
    lv_thisTrainSpeedLocal = gv_trainDifficulty_Speed;
    lv_thisNumberOfCarsLocal = gv_trainDifficulty_CarCount;
    gv_trainList[lp_trainListIndex].lv_numberOfCars = lv_thisNumberOfCarsLocal;
    autoE89297A2_val = lp_tunnel;
    if (autoE89297A2_val == ge_PRESET_Tunnel_Top) {
        lv_spawnLocationLocal = PointFromId(1080145301);
        lv_initialCustomValueLocal = 1;
    }
    else if (autoE89297A2_val == ge_PRESET_Tunnel_Middle) {
        lv_spawnLocationLocal = PointFromId(1291165291);
        lv_initialCustomValueLocal = gv_trainPathMidStart;
    }
    else if (autoE89297A2_val == ge_PRESET_Tunnel_Bottom) {
        lv_spawnLocationLocal = PointFromId(542133983);
        lv_initialCustomValueLocal = gv_trainPathBottomStart;
    }
    else {
    }
    TriggerExecute(gt_TrainSpawnAnimations, true, false);
    autoD2D40D46_ae = lv_thisNumberOfCarsLocal;
    lv_currentCarLocal = 1;
    for ( ; ( (autoD2D40D46_ai >= 0 && lv_currentCarLocal <= autoD2D40D46_ae) || (autoD2D40D46_ai < 0 && lv_currentCarLocal >= autoD2D40D46_ae) ) ; lv_currentCarLocal += autoD2D40D46_ai ) {
        if ((lv_currentCarLocal != 1) && (UnitIsAlive(gv_trainList[lp_trainListIndex].lv_trainCars[1]) == false)) {
            return true;
        }

        if ((lv_currentCarLocal == 1)) {
            autoB1EEE00D_val = lp_trainType;
            if (autoB1EEE00D_val == ge_PRESET_TrainType_BonusObjective) {
                lv_trainCarTypeLocal = "TarsonisEngineFast";
            }
            else {
                lv_trainCarTypeLocal = "TarsonisEngine";
            }
        }
        else {
            if ((lp_trainType == ge_PRESET_TrainType_CoopNeeded) && (lv_currentCarLocal == 2)) {
                lv_trainCarTypeLocal = "TarsonisEngine";
            }
            else {
                if ((lv_thisNumberOfCarsLocal == lv_currentCarLocal)) {
                    lv_trainCarTypeLocal = "Caboose";
                }
                else {
                    lv_trainCarTypeLocal = "FreightCar";
                }
            }
        }
        libNtve_gf_CreateUnitsAtPoint2(1, lv_trainCarTypeLocal, c_unitCreateIgnorePlacement, gv_pLAYER_08_TRAIN, lv_spawnLocationLocal);
        gv_trainList[lp_trainListIndex].lv_trainCars[lv_currentCarLocal] = UnitLastCreated();
        UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lv_initialCustomValueLocal));
        if ((lp_trainType != ge_PRESET_TrainType_BonusObjective)) {
            UnitSetCustomValue(UnitLastCreated(), 1, IntToFixed(gv_currentWave));
        }

        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lv_thisTrainSpeedLocal);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, lv_thisTrainLifeLocal);
        UnitGroupAdd(lv_trainCars, UnitLastCreated());
        if ((lv_currentCarLocal > 1)) {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, UnitGetPropertyFixed(gv_trainList[lp_trainListIndex].lv_trainCars[1], c_unitPropLife, c_unitPropCurrent));
        }
        else {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            gv_trainList[lp_trainListIndex].lv_trainCarsGroup = lv_trainCars;
            libCOMI_gf_SynchronizeConjoinedTrainHealth(lv_trainCars, lv_thisTrainLifeLocal);
        }
        if ((lv_currentCarLocal > 1)) {
            ActorLookAtStart(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Chest", 100, 0.0, libNtve_gf_MainActorofUnit(gv_trainList[lp_trainListIndex].lv_trainCars[(lv_currentCarLocal - 1)]));
        }

        gf_PlayDamagedAnimationsforTrainCar(UnitLastCreated(), ((100.0 / (lv_thisNumberOfCarsLocal + 1.0)) * IntToFixed(lv_currentCarLocal)));
        if ((gv_currentWave > 2) && (lp_trainType != ge_PRESET_TrainType_BonusObjective) && ((lv_currentCarLocal == 2) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 1, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 1, 1, 1, 1) == 1) && (lv_currentCarLocal == 3)) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 0, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 0, 1, 1, 1) == 1) && (lv_currentCarLocal == 6)) || (lv_currentCarLocal == 8) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 1, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 1, 1, 1, 1) == 1) && (lv_currentCarLocal == 9)) || ((libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 0, 0, 0, 1, 1, 1) == 1) && (libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER), 0, 0, 0, 1, 1, 1) == 1) && (lv_currentCarLocal == 12)))) {
            gf_SpawnTrainCarDamagedUnits(UnitLastCreated(), ((100.0 / (lv_thisNumberOfCarsLocal + 1.0)) * IntToFixed(lv_currentCarLocal)));
        }

        if ((lv_thisNumberOfCarsLocal == lv_currentCarLocal)) {
            gv_trainList[lp_trainListIndex].lv_lastCar = lv_currentCarLocal;
        }

        if ((lv_currentCarLocal == 1)) {
            gv_trainLastKnownLife[lp_trainListIndex] = UnitGetPropertyFixed(gv_trainList[lp_trainListIndex].lv_trainCars[lv_currentCarLocal], c_unitPropLifeMax, c_unitPropCurrent);
            gf_ActivatePingforTrainEngine(UnitLastCreated());
            gv_trainToBeEscorted = lp_trainListIndex;
            if ((lp_trainType != ge_PRESET_TrainType_BonusObjective)) {
            }

            gf_TrainDeath(UnitLastCreated(), lp_trainListIndex);
        }

        Wait(((gv_tRAIN_CAR_SEPERATION + (gv_tRAIN_RADIUS * 2.0)) / lv_thisTrainSpeedLocal), c_timeGame);
        if ((lv_trainCarTypeLocal == "TarsonisEngine")) {
            Wait(0.4, c_timeGame);
        }

    }
    gv_trainList[lp_trainListIndex].lv_trainStatus = ge_PRESET_TrainStatus_Active;
    gv_trainPathInUse[(lp_tunnel)] = true;
    return true;
}

void gf_AssignEscortsToTrainFront (int lp_trainIndex, unitgroup lp_escortGroup, int lp_trainTunnel) {
    // Variable Declarations
    fixed lv_angleToExitLocal;
    unit lv_escortIterLocal;
    fixed lv_distanceFromTrainCarLocal;
    fixed lv_distanceFromTrainCarIncreaseLocal;
    int lv_escortsPerRowLocal;
    int lv_escortsPerRowIterLocal;
    point lv_baseEscortOffsetLocal;
    point lv_escortOffsetLocal;
    fixed lv_escortAngleLocal;
    fixed lv_escortBufferLocal;
    point lv_startLocationLocal;

    // Automatic Variable Declarations
    int autoACC279DC_val;
    string autoE8563E6A_val;
    unitgroup auto85869353_g;
    int auto85869353_u;

    // Variable Initialization

    // Implementation
    lv_escortsPerRowLocal = 3;
    autoACC279DC_val = gv_trainList[lp_trainIndex].lv_tunnel;
    if (autoACC279DC_val == ge_PRESET_Tunnel_Top) {
        lv_startLocationLocal = gf_ExpectedPositionofTrainCar(1, 8);
    }
    else if (autoACC279DC_val == ge_PRESET_Tunnel_Middle) {
        lv_startLocationLocal = gf_ExpectedPositionofTrainCar(1, (gv_trainPathMidStart + 7));
    }
    else if (autoACC279DC_val == ge_PRESET_Tunnel_Bottom) {
        lv_startLocationLocal = gf_ExpectedPositionofTrainCar(1, (gv_trainPathBottomStart + 13));
    }
    else {
    }
    autoE8563E6A_val = PlayerRace(gv_pLAYER_08_TRAIN);
    if (autoE8563E6A_val == "Terr") {
        lv_distanceFromTrainCarLocal = 2.0;
        lv_distanceFromTrainCarIncreaseLocal = 2.0;
        lv_escortBufferLocal = 1.0;
    }
    else if (autoE8563E6A_val == "Prot") {
        lv_distanceFromTrainCarLocal = 1.5;
        lv_distanceFromTrainCarIncreaseLocal = 2.5;
        lv_escortBufferLocal = 1.5;
    }
    else {
        lv_distanceFromTrainCarLocal = 1.0;
        lv_distanceFromTrainCarIncreaseLocal = 1.0;
        lv_escortBufferLocal = 1.0;
    }
    lv_angleToExitLocal = PointGetFacing(lv_startLocationLocal);
    lv_escortAngleLocal = 90.0;
    lv_escortsPerRowIterLocal = 0;
    auto85869353_g = lp_escortGroup;
    auto85869353_u = UnitGroupCount(auto85869353_g, c_unitCountAll);
    for (;; auto85869353_u -= 1) {
        lv_escortIterLocal = UnitGroupUnitFromEnd(auto85869353_g, auto85869353_u);
        if (lv_escortIterLocal == null) { break; }
        if ((gv_trainList[lp_trainIndex].lv_numberOfEscorts < gv_c_MaxTrainEscortCount)) {
            gv_trainList[lp_trainIndex].lv_numberOfEscorts += 1;
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_escort = lv_escortIterLocal;
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_unitType = UnitGetType(lv_escortIterLocal);
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_escortCar = 1;
            lv_escortAngleLocal += 180.0;
            if ((lv_escortsPerRowIterLocal > lv_escortsPerRowLocal)) {
                lv_escortsPerRowIterLocal = 0;
                lv_distanceFromTrainCarLocal += lv_distanceFromTrainCarIncreaseLocal;
            }
            else {
                lv_escortsPerRowIterLocal += 1;
            }
            if ((PlayerRace(gv_pLAYER_08_TRAIN) == "Zerg")) {
                lv_baseEscortOffsetLocal = PointWithOffsetPolar(lv_startLocationLocal, (lv_distanceFromTrainCarLocal + RandomFixed(-1.5, 1.5)), (lv_angleToExitLocal + RandomFixed(-15.0, 15.0)));
                lv_escortOffsetLocal = PointWithOffsetPolar(lv_baseEscortOffsetLocal, (lv_escortBufferLocal * lv_escortsPerRowIterLocal), (lv_escortAngleLocal + lv_angleToExitLocal));
            }
            else {
                lv_baseEscortOffsetLocal = PointWithOffsetPolar(lv_startLocationLocal, lv_distanceFromTrainCarLocal, lv_angleToExitLocal);
                lv_escortOffsetLocal = PointWithOffsetPolar(lv_baseEscortOffsetLocal, (lv_escortBufferLocal * lv_escortsPerRowIterLocal), (lv_escortAngleLocal + lv_angleToExitLocal));
            }
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_polarRadius = DistanceBetweenPoints(lv_startLocationLocal, lv_escortOffsetLocal);
            gv_trainList[lp_trainIndex].lv_escorts[gv_trainList[lp_trainIndex].lv_numberOfEscorts].lv_polarAngle = (AngleBetweenPoints(lv_startLocationLocal, lv_escortOffsetLocal) - lv_angleToExitLocal);
        }
        else {
            AIAttackWaveUseUnit(gv_pLAYER_08_TRAIN, lv_escortIterLocal);
        }
    }
}

trigger auto_gf_SpawnTrainCarDamagedUnits_Trigger = null;
unit auto_gf_SpawnTrainCarDamagedUnits_lp_trainCar;
fixed auto_gf_SpawnTrainCarDamagedUnits_lp_breakPoint;

void gf_SpawnTrainCarDamagedUnits (unit lp_trainCar, fixed lp_breakPoint) {
    auto_gf_SpawnTrainCarDamagedUnits_lp_trainCar = lp_trainCar;
    auto_gf_SpawnTrainCarDamagedUnits_lp_breakPoint = lp_breakPoint;

    if (auto_gf_SpawnTrainCarDamagedUnits_Trigger == null) {
        auto_gf_SpawnTrainCarDamagedUnits_Trigger = TriggerCreate("auto_gf_SpawnTrainCarDamagedUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnTrainCarDamagedUnits_Trigger, false, false);
}

bool auto_gf_SpawnTrainCarDamagedUnits_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainCar = auto_gf_SpawnTrainCarDamagedUnits_lp_trainCar;
    fixed lp_breakPoint = auto_gf_SpawnTrainCarDamagedUnits_lp_breakPoint;

    // Variable Declarations
    point lv_PointAheadOfCar;
    point lv_PointOffSetAndAhead;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lp_trainCar) == false)) {
            return true;
        }

        if ((UnitGetPropertyFixed(lp_trainCar, c_unitPropLifePercent, c_unitPropCurrent) <= lp_breakPoint)) {
            break;
        }

    }
    Wait(2.0, c_timeAI);
    if ((UnitIsAlive(lp_trainCar) == false)) {
        return true;
    }

    lv_PointAheadOfCar = PointWithOffsetPolar(UnitGetPosition(lp_trainCar), 6.0, UnitGetFacing(lp_trainCar));
    lv_PointOffSetAndAhead = PointWithOffsetPolar(lv_PointAheadOfCar, 3.0, (UnitGetFacing(lp_trainCar) + 90.0));
    UnitIssueOrder(lp_trainCar, OrderTargetingPoint(AbilityCommand("HybridRelease", 0), lv_PointOffSetAndAhead), c_orderQueueReplace);
    Wait(2.0, c_timeAI);
    if ((UnitIsAlive(lp_trainCar) == false)) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        UnitCreate(1, "HybridDestroyer", 0, gv_pLAYER_08_TRAIN, lv_PointOffSetAndAhead, (UnitGetFacing(lp_trainCar) + 90.0));
    }
    else {
        UnitCreate(1, "HybridDestroyer", 0, gv_pLAYER_08_TRAIN, lv_PointOffSetAndAhead, (UnitGetFacing(lp_trainCar) - 90.0));
    }
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
    return true;
}

trigger auto_gf_TrainCarPing_Trigger = null;
unit auto_gf_TrainCarPing_lp_trainCar;

void gf_TrainCarPing (unit lp_trainCar) {
    auto_gf_TrainCarPing_lp_trainCar = lp_trainCar;

    if (auto_gf_TrainCarPing_Trigger == null) {
        auto_gf_TrainCarPing_Trigger = TriggerCreate("auto_gf_TrainCarPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrainCarPing_Trigger, false, false);
}

bool auto_gf_TrainCarPing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainCar = auto_gf_TrainCarPing_lp_trainCar;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_trainCar), 270.0, "PingNumeric0", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.25);
    PingSetUnit(PingLastCreated(), lp_trainCar);
    while ((UnitIsAlive(lp_trainCar) == true)) {
        PingSetRotation(PingLastCreated(), UnitGetFacing(lp_trainCar));
        Wait(0.1, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_TrainDeath_Trigger = null;
unit auto_gf_TrainDeath_lp_trainEngine;
int auto_gf_TrainDeath_lp_trainListIndex;

void gf_TrainDeath (unit lp_trainEngine, int lp_trainListIndex) {
    auto_gf_TrainDeath_lp_trainEngine = lp_trainEngine;
    auto_gf_TrainDeath_lp_trainListIndex = lp_trainListIndex;

    if (auto_gf_TrainDeath_Trigger == null) {
        auto_gf_TrainDeath_Trigger = TriggerCreate("auto_gf_TrainDeath_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrainDeath_Trigger, false, false);
}

bool auto_gf_TrainDeath_TriggerFunc (bool testConds, bool runActions) {
    unit lp_trainEngine = auto_gf_TrainDeath_lp_trainEngine;
    int lp_trainListIndex = auto_gf_TrainDeath_lp_trainListIndex;

    // Variable Declarations
    point lv_lastKnownEngineLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        if ((UnitIsValid(lp_trainEngine) == true)) {
            lv_lastKnownEngineLocation = UnitGetPosition(lp_trainEngine);
        }

        if ((UnitIsAlive(lp_trainEngine) == false)) {
            break;
        }

        Wait(0.5, c_timeAI);
    }
    TriggerExecute(gt_DeactivateChargers, true, false);
    if ((gv_trainList[lp_trainListIndex].lv_trainStatus != ge_PRESET_TrainStatus_Spawning)) {
        while (!((UnitIsAlive(gv_trainList[lp_trainListIndex].lv_trainCars[gv_trainList[lp_trainListIndex].lv_lastCar]) == false))) {
            Wait(0.5, c_timeAI);
        }
    }

    if ((gv_trainList[lp_trainListIndex].lv_trainStatus == ge_PRESET_TrainStatus_Missed)) {
        return true;
    }

    gv_objectiveDestroyTrainsNumDestroyed += 1;
    TriggerExecute(gt_TrainSpawnedQ2, true, false);
    gv_trainList[lp_trainListIndex].lv_trainAlive = false;
    gv_trainList[lp_trainListIndex].lv_trainStatus = ge_PRESET_TrainStatus_Destroyed;
    gv_bonusActive[lp_trainListIndex] = false;
    TriggerExecute(gt_ObjectiveDestroyTrainsUpdate, true, false);
    gv_lastTrainLocation = lv_lastKnownEngineLocation;
    gv_trainPathInUse[(gv_trainList[lp_trainListIndex].lv_tunnel)] = false;
    if ((gv_objectiveDestroyTrainsNumDestroyed == gv_objectiveDestroyTrainsMAXTRAINS)) {
        TriggerExecute(gt_ObjectiveDestroyTrainsComplete, true, false);
    }

    return true;
}

int gf_NextAvailableTrainListIndex () {
    // Variable Declarations
    int lv_arrayIter;

    // Automatic Variable Declarations
    const int auto6230DDA3_ae = gv_c_MaxTrainCount;
    const int auto6230DDA3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_arrayIter = 1;
    for ( ; ( (auto6230DDA3_ai >= 0 && lv_arrayIter <= auto6230DDA3_ae) || (auto6230DDA3_ai < 0 && lv_arrayIter >= auto6230DDA3_ae) ) ; lv_arrayIter += auto6230DDA3_ai ) {
        if ((gv_trainList[lv_arrayIter].lv_initialized == false)) {
            return lv_arrayIter;
        }

    }
    return -1;
}

int gf_RandomTunnel (int lp_exclude) {
    int init_i;

    // Variable Declarations
    int[4] lv_returnTunnel;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_returnTunnel[init_i] = ge_PRESET_Tunnel__None;
    }

    // Implementation
    if ((lp_exclude != ge_PRESET_Tunnel_Top)) {
        lv_index += 1;
        lv_returnTunnel[lv_index] = ge_PRESET_Tunnel_Top;
    }

    if ((lp_exclude != ge_PRESET_Tunnel_Middle)) {
        lv_index += 1;
        lv_returnTunnel[lv_index] = ge_PRESET_Tunnel_Middle;
    }

    if ((lp_exclude != ge_PRESET_Tunnel_Bottom)) {
        lv_index += 1;
        lv_returnTunnel[lv_index] = ge_PRESET_Tunnel_Bottom;
    }

    return lv_returnTunnel[RandomInt(1, lv_index)];
}

trigger auto_gf_RevealTrainLane_Trigger = null;
int auto_gf_RevealTrainLane_lp_tunnel;

void gf_RevealTrainLane (int lp_tunnel) {
    auto_gf_RevealTrainLane_lp_tunnel = lp_tunnel;

    if (auto_gf_RevealTrainLane_Trigger == null) {
        auto_gf_RevealTrainLane_Trigger = TriggerCreate("auto_gf_RevealTrainLane_TriggerFunc");
    }

    TriggerExecute(auto_gf_RevealTrainLane_Trigger, false, false);
}

bool auto_gf_RevealTrainLane_TriggerFunc (bool testConds, bool runActions) {
    int lp_tunnel = auto_gf_RevealTrainLane_lp_tunnel;

    // Automatic Variable Declarations
    fixed autoB5BE39EF_at;
    int auto543CF8A4_val;

    // Implementation
    autoB5BE39EF_at = 0;
    while (!((gv_trainPathInUse[(lp_tunnel)] == false)) && autoB5BE39EF_at <= 90.0) {
        Wait(0.5, c_timeAI);
        autoB5BE39EF_at = autoB5BE39EF_at + 0.5;
    }
    auto543CF8A4_val = lp_tunnel;
    if (auto543CF8A4_val == ge_PRESET_Tunnel_Top) {
        TriggerExecute(gt_RevealTopLane, true, false);
    }
    else if (auto543CF8A4_val == ge_PRESET_Tunnel_Middle) {
        TriggerExecute(gt_RevealMiddleLane, true, false);
    }
    else if (auto543CF8A4_val == ge_PRESET_Tunnel_Bottom) {
        TriggerExecute(gt_RevealBottomLane, true, false);
    }
    else {
    }
    return true;
}

text gf_GetTrainTypeName (int lp_trainType) {
    // Automatic Variable Declarations
    int auto121DE098_val;

    // Implementation
    auto121DE098_val = lp_trainType;
    if (auto121DE098_val == ge_PRESET_TrainType_CoopNeeded) {
        return StringExternal("Param/Value/F48E29D5");
    }
    else if (auto121DE098_val == ge_PRESET_TrainType_Soloable) {
        return StringExternal("Param/Value/EE99ED9B");
    }
    else if (auto121DE098_val == ge_PRESET_TrainType_BonusObjective) {
        return StringExternal("Param/Value/9BDE8706");
    }
    else {
    }
    return StringExternal("Param/Value/34871C5B");
}

void gf_InitializeCharger (point lp_position, int lp_tunnel, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    gv_chargers[lp_index].lv_position = lp_position;
    gv_chargers[lp_index].lv_tunnel = lp_tunnel;
}

void gf_IncreaseTrainLife () {
    // Automatic Variable Declarations
    // Implementation
    gv_trainDifficulty_Life += gv_trainDifficulty_LifeIncreaseForTrainTwo;
}

void gf_CreateSpeechBubble (unit lp_speaker) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_AttachActorToUnit(lp_speaker, "TalkIconBubble", "Ref_Overhead");
}

string gf_TransportType (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, lp_player);
}

trigger auto_gf_CleanUpAttackWaveTransports_Trigger = null;
unitgroup auto_gf_CleanUpAttackWaveTransports_lp_transports;
point auto_gf_CleanUpAttackWaveTransports_lp_cleanupLocation;

void gf_CleanUpAttackWaveTransports (unitgroup lp_transports, point lp_cleanupLocation) {
    auto_gf_CleanUpAttackWaveTransports_lp_transports = lp_transports;
    auto_gf_CleanUpAttackWaveTransports_lp_cleanupLocation = lp_cleanupLocation;

    if (auto_gf_CleanUpAttackWaveTransports_Trigger == null) {
        auto_gf_CleanUpAttackWaveTransports_Trigger = TriggerCreate("auto_gf_CleanUpAttackWaveTransports_TriggerFunc");
    }

    TriggerExecute(auto_gf_CleanUpAttackWaveTransports_Trigger, false, false);
}

bool auto_gf_CleanUpAttackWaveTransports_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_transports = auto_gf_CleanUpAttackWaveTransports_lp_transports;
    point lp_cleanupLocation = auto_gf_CleanUpAttackWaveTransports_lp_cleanupLocation;

    // Variable Declarations
    unitgroup lv_transportToWatch;
    unit lv_cleanUpTransport;
    unitgroup lv_transportsToCleanup;
    fixed lv_position_X_Min;
    fixed lv_position_X_Max;
    fixed lv_position_Y_Min;
    fixed lv_position_Y_Max;
    point lv_transportPosition;
    unitgroup lv_attackWavePayload;
    unitgroup lv_badOrderUnits;

    // Automatic Variable Declarations
    unitgroup autoA9F8DA77_g;
    int autoA9F8DA77_u;
    point autoE2D02705_val;
    unitgroup auto2A83CF14_g;
    int auto2A83CF14_u;
    unitgroup auto8D24CB76_g;
    int auto8D24CB76_u;
    unitgroup auto18D28DBB_g;
    int auto18D28DBB_u;

    // Variable Initialization
    lv_transportToWatch = UnitGroupEmpty();
    lv_transportsToCleanup = UnitGroupEmpty();
    lv_attackWavePayload = UnitGroupEmpty();
    lv_badOrderUnits = UnitGroupEmpty();

    // Implementation
    lv_position_X_Min = (PointGetX(RegionGetBoundsMin(RegionPlayableMap())) + 4.0);
    lv_position_Y_Min = (PointGetY(RegionGetBoundsMin(RegionPlayableMap())) + 4.0);
    lv_position_X_Max = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - 4.0);
    lv_position_Y_Max = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - 4.0);
    Wait(1.0, c_timeGame);
    while (true) {
        autoA9F8DA77_g = lp_transports;
        autoA9F8DA77_u = UnitGroupCount(autoA9F8DA77_g, c_unitCountAll);
        for (;; autoA9F8DA77_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(autoA9F8DA77_g, autoA9F8DA77_u);
            if (lv_cleanUpTransport == null) { break; }
            if ((UnitOrder(lv_cleanUpTransport, 0) != null) && (OrderGetTargetPoint(UnitOrder(lv_cleanUpTransport, 0)) != null) && (OrderGetTargetPoint(UnitOrder(lv_cleanUpTransport, 0)) == Point(0.0, 0.0))) {
                UnitGroupAdd(lv_badOrderUnits, lv_cleanUpTransport);
                autoE2D02705_val = lp_cleanupLocation;
                {
                }
            }

        }
        lv_attackWavePayload = UnitGroupEmpty();
        auto2A83CF14_g = lp_transports;
        auto2A83CF14_u = UnitGroupCount(auto2A83CF14_g, c_unitCountAll);
        for (;; auto2A83CF14_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto2A83CF14_g, auto2A83CF14_u);
            if (lv_cleanUpTransport == null) { break; }
            UnitGroupAddUnitGroup(lv_attackWavePayload, UnitCargoGroup(lv_cleanUpTransport));
            if ((UnitGroupCount(lv_attackWavePayload, c_unitCountAlive) > 0)) {
                Wait(2.0, c_timeGame);
                break;
            }

        }
        if ((UnitGroupCount(lv_attackWavePayload, c_unitCountAlive) == 0)) {
            break;
        }

    }
    Wait(2.0, c_timeAI);
    UnitGroupAddUnitGroup(lv_transportToWatch, lp_transports);
    while ((libCOMI_gf_GameIsOver() == false) && ((UnitGroupCount(lv_transportToWatch, c_unitCountAlive) > 0) || (UnitGroupCount(lv_transportsToCleanup, c_unitCountAlive) > 0))) {
        auto8D24CB76_g = lv_transportToWatch;
        auto8D24CB76_u = UnitGroupCount(auto8D24CB76_g, c_unitCountAll);
        for (;; auto8D24CB76_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto8D24CB76_g, auto8D24CB76_u);
            if (lv_cleanUpTransport == null) { break; }
            UnitIssueOrder(lv_cleanUpTransport, OrderTargetingPoint(AbilityCommand("move", 0), lp_cleanupLocation), c_orderQueueReplace);
            lv_transportPosition = UnitGetPosition(lv_cleanUpTransport);
            if (((PointGetX(lv_transportPosition) < lv_position_X_Min) || (PointGetX(lv_transportPosition) > lv_position_X_Max) || (PointGetY(lv_transportPosition) < lv_position_Y_Min) || (PointGetY(lv_transportPosition) > lv_position_Y_Max))) {
                UnitSetHeight(lv_cleanUpTransport, 15.0, 4.0);
                UnitGroupRemove(lv_transportToWatch, lv_cleanUpTransport);
                UnitGroupAdd(lv_transportsToCleanup, lv_cleanUpTransport);
            }

        }
        auto18D28DBB_g = lv_transportsToCleanup;
        auto18D28DBB_u = UnitGroupCount(auto18D28DBB_g, c_unitCountAll);
        for (;; auto18D28DBB_u -= 1) {
            lv_cleanUpTransport = UnitGroupUnitFromEnd(auto18D28DBB_g, auto18D28DBB_u);
            if (lv_cleanUpTransport == null) { break; }
            if ((UnitGetHeight(lv_cleanUpTransport) > 14.0)) {
                UnitRemove(lv_cleanUpTransport);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

color gf_TimerColor () {
    // Automatic Variable Declarations
    // Implementation
    if ((TimerGetRemaining(gv_preventBossAwaken) > 360.0)) {
        return Color(100,100,100);
    }

    if ((TimerGetRemaining(gv_preventBossAwaken) > 180.0)) {
        return Color(100.00, 100.00, 0.00);
    }

    return Color(100.00, 0.00, 0.00);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    Wait(2.0, c_timeGame);
    UnitGroupPauseAll(gv_initiallyPausedUnits, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterAlly;

    // Automatic Variable Declarations
    playergroup autoEC71F99B_g;
    int autoEC71F99B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    autoEC71F99B_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoEC71F99B_var = -1;
    while (true) {
        autoEC71F99B_var = PlayerGroupNextPlayer(autoEC71F99B_g, autoEC71F99B_var);
        if (autoEC71F99B_var < 0) { break; }
        libCOMI_gf_SetAllianceCoop(autoEC71F99B_var, gv_pLAYER_07_BALIUSPARTS, libNtve_ge_AllianceSetting_Enemy);
    }
    libCOMI_gf_SetAllianceCoop(gv_pLAYER_05_BALIUS, gv_pLAYER_08_TRAIN, libNtve_ge_AllianceSetting_Neutral);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tempUnitGroup;
    unit lv_gate;
    int lv_hybridCellIter;
    int lv_controllingPlayer;
    unit lv_partsDropperIter;
    int lv_partsRegionIter;
    int lv_civilianIter;

    // Automatic Variable Declarations
    unitgroup auto5798897B_g;
    int auto5798897B_u;
    unit auto5798897B_var;
    unitgroup autoB1D6E147_g;
    int autoB1D6E147_u;
    unit autoB1D6E147_var;
    const int auto38F0227A_ae = 2;
    const int auto38F0227A_ai = 1;
    unitgroup autoCAEB9622_g;
    int autoCAEB9622_u;
    const int auto535CC355_ae = gv_c_PartsRegionsTotal;
    const int auto535CC355_ai = 1;
    const int autoBD047B0E_ae = gv_c_PartsRegionsTotal;
    const int autoBD047B0E_ai = 1;
    int autoBB5008A0_val;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto5798897B_g = UnitGroup("Generator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5798897B_u = UnitGroupCount(auto5798897B_g, c_unitCountAll);
    for (;; auto5798897B_u -= 1) {
        auto5798897B_var = UnitGroupUnitFromEnd(auto5798897B_g, auto5798897B_u);
        if (auto5798897B_var == null) { break; }
        UnitBehaviorAdd(auto5798897B_var, "Scrappable2", auto5798897B_var, 1);
    }
    gv_firstGenerator = UnitFromId(2103109240);
    if ((gv_firstGenerator == null)) {
        gv_firstGenerator = UnitFromId(52234969);
    }

    gv_firstCratePack1_1 = UnitFromId(1378204498);
    gv_firstCratePack1_2 = UnitFromId(1435412841);
    gv_firstCratePack2_1 = UnitFromId(305218543);
    gv_firstCratePack2_2 = UnitFromId(198535232);
    UnitSetState(UnitFromId(169562653), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(169562653), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(169562653), c_unitStateInvulnerable, true);
    autoB1D6E147_g = UnitGroup("UmojanLabStasisTubeDestructible1", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1D6E147_u = UnitGroupCount(autoB1D6E147_g, c_unitCountAll);
    for (;; autoB1D6E147_u -= 1) {
        autoB1D6E147_var = UnitGroupUnitFromEnd(autoB1D6E147_g, autoB1D6E147_u);
        if (autoB1D6E147_var == null) { break; }
        UnitSetState(autoB1D6E147_var, c_unitStateSelectable, false);
        UnitSetState(autoB1D6E147_var, c_unitStateTargetable, false);
        UnitSetState(autoB1D6E147_var, c_unitStateInvulnerable, true);
    }
    UnitSetState(UnitFromId(913871065), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(913871065), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(913871065), c_unitStateInvulnerable, true);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(169562653), "SetMinimapVisibility");
    gv_boss[0] = UnitFromId(118151133);
    gv_boss[1] = UnitFromId(745181708);
    gv_boss[2] = UnitFromId(138235518);
    gv_bossCages[0] = UnitFromId(316371562);
    gv_bossCages[1] = UnitFromId(207158029);
    gv_bossCages[2] = UnitFromId(1454454241);
    gv_bossRevealerRegions[0] = RegionFromId(5);
    gv_bossRevealerRegions[1] = RegionFromId(6);
    gv_bossRevealerRegions[2] = RegionFromId(7);
    lv_hybridCellIter = 0;
    for ( ; ( (auto38F0227A_ai >= 0 && lv_hybridCellIter <= auto38F0227A_ae) || (auto38F0227A_ai < 0 && lv_hybridCellIter >= auto38F0227A_ae) ) ; lv_hybridCellIter += auto38F0227A_ai ) {
        libNtve_gf_MakeUnitInvulnerable(gv_boss[lv_hybridCellIter], true);
        libNtve_gf_ShowHideUnit(gv_boss[lv_hybridCellIter], false);
        libNtve_gf_PauseUnit(gv_boss[lv_hybridCellIter], true);
        UnitGroupAdd(gv_initiallyPausedUnits, gv_boss[lv_hybridCellIter]);
        libNtve_gf_MakeUnitInvulnerable(gv_bossCages[lv_hybridCellIter], true);
    }
    gv_hybridAbility_SingleTarget_LockOnDuration = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PnPSingleTargetLockOnActorKeepAlivePersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", gv_pLAYER_03_ENEMY);
    gf_ArchangelState(ge_ArchangelStates_Repairing);
    UnitSetPropertyFixed(gv_archangel, c_unitPropLife, 1.0);
    ActorSend(libNtve_gf_MainActorofUnit(gv_archangel), libNtve_gf_Signal("BrokenStart"));
    TriggerExecute(gt_InitializeUpdatePartsRegionOrder, true, false);
    lv_controllingPlayer = 2;
    autoCAEB9622_g = UnitGroup(null, gv_pLAYER_07_BALIUSPARTS, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAEB9622_u = UnitGroupCount(autoCAEB9622_g, c_unitCountAll);
    for (;; autoCAEB9622_u -= 1) {
        lv_partsDropperIter = UnitGroupUnitFromEnd(autoCAEB9622_g, autoCAEB9622_u);
        if (lv_partsDropperIter == null) { break; }
        if ((UnitHasBehavior2(lv_partsDropperIter, "Scrappable") == false) && (UnitHasBehavior2(lv_partsDropperIter, "Scrappable2") == false) && (UnitHasBehavior2(lv_partsDropperIter, "Scrappable3") == false)) {
            continue;
        }

        if ((UnitGetType(lv_partsDropperIter) == "ScrappyBot")) {
            if (lv_controllingPlayer >= gv_pLAYER_04_ENEMY) {
                lv_controllingPlayer = gv_pLAYER_03_ENEMY;
            }
            else {
                lv_controllingPlayer = lv_controllingPlayer + 1;
            }
            UnitSetOwner(lv_partsDropperIter, lv_controllingPlayer, false);
            gf_BotLogic(lv_partsDropperIter);
        }

        if ((libNtve_gf_UnitInRegion(lv_partsDropperIter, RegionFromId(12)) == true)) {
            UnitGroupAdd(gv_initialPartsGroup, lv_partsDropperIter);
        }

        lv_partsRegionIter = 1;
        for ( ; ( (auto535CC355_ai >= 0 && lv_partsRegionIter <= auto535CC355_ae) || (auto535CC355_ai < 0 && lv_partsRegionIter >= auto535CC355_ae) ) ; lv_partsRegionIter += auto535CC355_ai ) {
            if ((libNtve_gf_UnitInRegion(lv_partsDropperIter, gv_partsRegions[lv_partsRegionIter]) == true)) {
                UnitGroupAdd(gv_partsDroppers[gv_partsRegionIndex[lv_partsRegionIter]], lv_partsDropperIter);
                break;
            }

        }
        libCOMI_gf_SetUnitInfoTextCampaignDetailed(lv_partsDropperIter, null, StringExternal("Param/Value/C4298080"), null);
    }
    lv_partsRegionIter = 1;
    for ( ; ( (autoBD047B0E_ai >= 0 && lv_partsRegionIter <= autoBD047B0E_ae) || (autoBD047B0E_ai < 0 && lv_partsRegionIter >= autoBD047B0E_ae) ) ; lv_partsRegionIter += autoBD047B0E_ai ) {
        gv_numberOfUnitsToBreakIntoSmallerPings[gv_partsRegionIndex[lv_partsRegionIter]] = FixedToInt((UnitGroupCount(gv_partsDroppers[gv_partsRegionIndex[lv_partsRegionIter]], c_unitCountAlive) * 0.5));
    }
    lv_civilianIter = RandomInt(1, 3);
    autoBB5008A0_val = lv_civilianIter;
    if (autoBB5008A0_val == 1) {
        UnitRemove(UnitFromId(2027915525));
        UnitRemove(UnitFromId(972903112));
        UnitRemove(UnitFromId(1332071054));
        UnitRemove(UnitFromId(1468164781));
        gv_moebiusMale = UnitFromId(556838211);
        gv_moebiusFemale = UnitFromId(1380936490);
    }
    else if (autoBB5008A0_val == 2) {
        UnitRemove(UnitFromId(556838211));
        UnitRemove(UnitFromId(1380936490));
        UnitRemove(UnitFromId(1332071054));
        UnitRemove(UnitFromId(1468164781));
        gv_moebiusMale = UnitFromId(2027915525);
        gv_moebiusFemale = UnitFromId(972903112);
    }
    else if (autoBB5008A0_val == 3) {
        UnitRemove(UnitFromId(556838211));
        UnitRemove(UnitFromId(1380936490));
        UnitRemove(UnitFromId(2027915525));
        UnitRemove(UnitFromId(972903112));
        gv_moebiusMale = UnitFromId(1332071054);
        gv_moebiusFemale = UnitFromId(1468164781);
    }
    else {
    }
    UnitSetState(gv_moebiusMale, c_unitStateInvulnerable, true);
    UnitSetState(gv_moebiusFemale, c_unitStateInvulnerable, true);
    UnitIssueOrder(gv_moebiusMale, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(gv_moebiusFemale, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetInfoText(gv_moebiusMale, StringToText(""), StringExternal("Param/Value/A854F2D2"), StringToText(""));
    UnitSetInfoText(gv_moebiusFemale, StringToText(""), StringExternal("Param/Value/2EC18B86"), StringToText(""));
    UnitStatusBarOverride(gv_moebiusMale, -1);
    UnitStatusBarOverride(gv_moebiusFemale, -1);
    libNtve_gf_SendActorMessageToUnit(gv_moebiusMale, "SetMinimapVisibility");
    libNtve_gf_SendActorMessageToUnit(gv_moebiusFemale, "SetMinimapVisibility");
    UnitSetState(UnitFromId(317925750), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(884971127), c_unitStateInvulnerable, true);
    UnitIssueOrder(UnitFromId(317925750), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(884971127), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetInfoText(UnitFromId(317925750), StringToText(""), StringExternal("Param/Value/D7244B16"), StringToText(""));
    UnitSetInfoText(UnitFromId(884971127), StringToText(""), StringExternal("Param/Value/9E15F198"), StringToText(""));
    UnitStatusBarOverride(UnitFromId(317925750), -1);
    UnitStatusBarOverride(UnitFromId(884971127), -1);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(317925750), "SetMinimapVisibility");
    libNtve_gf_SendActorMessageToUnit(UnitFromId(884971127), "SetMinimapVisibility");
    UnitSetState(UnitFromId(888648024), c_unitStateInvulnerable, true);
    UnitSetState(UnitFromId(888648024), c_unitStateSelectable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_partDropperIter;
    int lv_partsTotal;
    unitgroup lv_partDroppers;
    int lv_hybridIter;
    fixed[gv_c_BossCount + 1] lv_bossBaseVitality;

    // Automatic Variable Declarations
    const int autoDBCBAA0C_ae = 2;
    const int autoDBCBAA0C_ai = 1;
    const int auto749D131F_ae = 2;
    const int auto749D131F_ai = 1;
    unitgroup auto6F85CEFA_g;
    int auto6F85CEFA_u;

    // Variable Initialization
    lv_partDroppers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_initialBossDefeatTime = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 15.75, 15.75, 12.0, 12.0, 0.0, 0.0) * 60.0);
    gv_partsCollectedExtraTime = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 5.0, 5.0, 4.0, 4.0, 0.0, 0.0) * 60.0);
    gv_bossDefeatExtraTime = (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 6.0, 6.0, 5.0, 4.5, 0.0, 0.0) * 60.0);
    gv_perPartCollectedExtraTime = (gv_bossDefeatExtraTime / gv_c_ArchangelPartsRequired);
    gv_initialBossDefeatTime -= gv_bossDefeatExtraTime;
    gv_trainDifficulty_Life = 8000.0;
    gv_trainDifficulty_LifeIncreaseForTrainTwo = 10000.0;
    gv_trainDifficulty_Speed = 1.25;
    gv_trainDifficulty_CarCount = 12;
    lv_bossBaseVitality[0] = 11000.0;
    lv_bossBaseVitality[1] = 16500.0;
    lv_bossBaseVitality[2] = 20500.0;
    lv_hybridIter = 0;
    for ( ; ( (autoDBCBAA0C_ai >= 0 && lv_hybridIter <= autoDBCBAA0C_ae) || (autoDBCBAA0C_ai < 0 && lv_hybridIter >= autoDBCBAA0C_ae) ) ; lv_hybridIter += autoDBCBAA0C_ai ) {
        UnitSetPropertyFixed(gv_boss[lv_hybridIter], c_unitPropLifeMax, (lv_bossBaseVitality[lv_hybridIter] * 0.5));
        UnitSetPropertyFixed(gv_boss[lv_hybridIter], c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_boss[lv_hybridIter], c_unitPropShieldsMax, (lv_bossBaseVitality[lv_hybridIter] * 0.5));
        UnitSetPropertyFixed(gv_boss[lv_hybridIter], c_unitPropShieldsPercent, 100.0);
    }
    gv_bossTuning_SingleTarget_Cooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 30.0, 30.0, 20.0, 12.0, 0.0, 0.0);
    gv_bossTuning_SingleTarget_MinDamage_Air = 150.0;
    gv_bossTuning_SingleTarget_MinDamage_Ground = 200.0;
    gv_bossTuning_Illusionist_InitialDelay = 7.0;
    gv_bossTuning_Illusionist_Cooldown = 20.0;
    gv_bossTuning_Illusionist_NumberOfIllusionsAbilityCreates[0] = 2;
    gv_bossTuning_Illusionist_NumberOfIllusionsAbilityCreates[1] = 3;
    gv_bossTuning_Illusionist_NumberOfIllusionsAbilityCreates[2] = 4;
    lv_hybridIter = 0;
    for ( ; ( (auto749D131F_ai >= 0 && lv_hybridIter <= auto749D131F_ae) || (auto749D131F_ai < 0 && lv_hybridIter >= auto749D131F_ae) ) ; lv_hybridIter += auto749D131F_ai ) {
        gv_bossTuning_Illusionist_IllusionVitality[lv_hybridIter] = (lv_bossBaseVitality[lv_hybridIter] * 0.3 * (1.0 / gv_bossTuning_Illusionist_NumberOfIllusionsAbilityCreates[lv_hybridIter]));
    }
    gv_bossTuning_PuddleLines_InitialDelay = 3;
    gv_bossTuning_PuddleLines_Cooldown = 45.0;
    gv_bossTuning_PuddleLines_LineTimedLife = 10.0;
    gv_bossTuning_FireChains_InitialDelay = 4.0;
    gv_bossTuning_FireChains_Cooldown = 30.0;
    gv_hybridAbilityFirechainsType = RandomInt(0, 1);
    gv_bossTuning_FireChains_MaxLengthCone = 15.0;
    gv_bossTuning_FireChains_MaxLengthRadial = 10.0;
    gv_bossTuning_AttackWaveSpawner_InitialDelay = 7.0;
    gv_bossTuning_AttackWaveSpawner_Cooldown = 45.0;
    gv_bossTuning_AttackWaveSpawner_TechLevel[0] = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    gv_bossTuning_AttackWaveSpawner_ResourceAmount[0] = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    gv_bossTuning_AttackWaveSpawner_TechLevel[1] = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    gv_bossTuning_AttackWaveSpawner_ResourceAmount[1] = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    gv_bossTuning_AttackWaveSpawner_TechLevel[2] = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    gv_bossTuning_AttackWaveSpawner_ResourceAmount[2] = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    gv_bossTuning_Stasis_Cooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 30.0, 30.0, 25.0, 20.0, 0.0, 0.0);
    gv_bossTuning_Stasis_CastTime = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 8.0, 8.0, 6.0, 5.0, 0.0, 0.0);
    gv_bossTuning_Stasis_AreaOfEffect = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 4.0, 4.0, 5.0, 6.0, 0.0, 0.0);
    gv_bossTuning_Stasis_StasisDuration = 8.0;
    lv_partDroppers = UnitGroup(null, gv_pLAYER_07_BALIUSPARTS, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6F85CEFA_g = lv_partDroppers;
    auto6F85CEFA_u = UnitGroupCount(auto6F85CEFA_g, c_unitCountAll);
    for (;; auto6F85CEFA_u -= 1) {
        lv_partDropperIter = UnitGroupUnitFromEnd(auto6F85CEFA_g, auto6F85CEFA_u);
        if (lv_partDropperIter == null) { break; }
        lv_partsTotal += gf_UnitDropsParts(lv_partDropperIter);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_03_ENEMY, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_ENEMY, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_ENEMY, "overlordtransport", 1);
    libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_08_TRAIN, libCOMI_gv_cM_CoopAIPlayer_Commander[gv_pLAYER_03_ENEMY]);
    AICampaignStart(gv_pLAYER_08_TRAIN);
    libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(PlayerGroupSingle(gv_pLAYER_08_TRAIN), false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_03_ENEMY, "HybridDominatorCoopBoss", "gf_HybridBossAIThink", false);
    TriggerExecute(gt_SendAttackWavesatTime, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;

    // Automatic Variable Declarations
    int auto586FE4D9_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitializeBossStyles, true, false);
    TriggerExecute(gt_TrainPathInitialization, true, false);
    TriggerExecute(gt_InitializeBonusObjective, true, false);
    Wait(7.0, c_timeReal);
    TriggerExecute(gt_MissionProgression, true, false);
    TimerStart(gv_preventBossAwaken, gv_initialBossDefeatTime, false, c_timeGame);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveGatherArchangelPartsCreate, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    auto586FE4D9_val = RandomInt(0, 2);
    if (auto586FE4D9_val == 0) {
        libCOMI_gf_SendMissionTransmission("Intro1PnP", true, -1);
    }
    else if (auto586FE4D9_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro2PnP", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3PnP", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_ObjectivePreventBossAwakenCreate, true, true);
    TriggerExecute(gt_InitializeBossTimer, true, false);
    TriggerExecute(gt_ObjectiveGatherArchangelPartsCreate, true, true);
    gv_activePingsDesiredGlobal = 2;
    TriggerEnable(gt_ShowandUpdatePartRegionMarkers, true);
    gv_partsUpdateVOBool = true;
    if ((UnitIsAlive(gv_firstGenerator) == true)) {
        libCOMI_gf_CreateReticleEffectAndTextTagAtPoint(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/A822C091"), PointFromId(332104362));
        gv_initialReticle1 = libNtve_gf_ActorLastCreated();
        gv_initialTag1 = TextTagLastCreated();
    }

    if (((UnitIsAlive(gv_firstCratePack1_1) == true) || (UnitIsAlive(gv_firstCratePack1_2) == true))) {
        libCOMI_gf_CreateReticleEffectAndTextTagAtPoint(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/17F68BFD"), PointFromId(189452996));
        gv_initialReticle2 = libNtve_gf_ActorLastCreated();
        gv_initialTag2 = TextTagLastCreated();
    }

    if (((UnitIsAlive(gv_firstCratePack2_1) == true) || (UnitIsAlive(gv_firstCratePack2_2) == true))) {
        libCOMI_gf_CreateReticleEffectAndTextTagAtPoint(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/49366CF7"), PointFromId(885336630));
        gv_initialReticle3 = libNtve_gf_ActorLastCreated();
        gv_initialTag3 = TextTagLastCreated();
    }

    TriggerQueueExit();
    Wait(90.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DestroyReticles 1
//--------------------------------------------------------------------------------------------------
bool gt_DestroyReticles1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_firstGenerator) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_initialReticle1);
    TextTagDestroy(gv_initialTag1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyReticles1_Init () {
    gt_DestroyReticles1 = TriggerCreate("gt_DestroyReticles1_Func");
    TriggerAddEventUnitDied(gt_DestroyReticles1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DestroyReticles 2
//--------------------------------------------------------------------------------------------------
bool gt_DestroyReticles2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_firstCratePack1_1) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_firstCratePack1_2) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_initialReticle2);
    TextTagDestroy(gv_initialTag2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyReticles2_Init () {
    gt_DestroyReticles2 = TriggerCreate("gt_DestroyReticles2_Func");
    TriggerAddEventUnitDied(gt_DestroyReticles2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DestroyReticles 3
//--------------------------------------------------------------------------------------------------
bool gt_DestroyReticles3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_firstCratePack2_1) == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_firstCratePack2_2) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_initialReticle3);
    TextTagDestroy(gv_initialTag3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyReticles3_Init () {
    gt_DestroyReticles3 = TriggerCreate("gt_DestroyReticles3_Func");
    TriggerAddEventUnitDied(gt_DestroyReticles3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Progression
//--------------------------------------------------------------------------------------------------
bool gt_MissionProgression_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_skipWaitingForParts;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((gv_archangelCurrentPartsPool >= gv_c_ArchangelPartsRequired) || (libCOMI_gf_GameIsOver() == true)))) {
        Wait(0.5, c_timeGame);
    }
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }
    else {
        libCOMI_gf_SetMissionEffort(20.0);
        TriggerExecute(gt_ObjectiveDestroyBossesCreate, true, false);
        TriggerExecute(gt_BossFightPhase, true, false);
        TriggerExecute(gt_ArchangelLaunchSequence, true, false);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }
    while (!(((UnitIsAlive(gv_boss[0]) == false) || (libCOMI_gf_GameIsOver() == true)))) {
        Wait(0.5, c_timeGame);
    }
    TriggerExecute(gt_PartsCollectionPhase, true, false);
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }
    else {
        if ((gv_archangelCurrentPartsPool >= gv_c_ArchangelPartsRequired)) {
            lv_skipWaitingForParts = true;
            TriggerExecute(gt_ObjectiveGatherArchangelPartsUpdate, true, true);
        }

    }
    while (!(((gv_archangelCurrentPartsPool >= gv_c_ArchangelPartsRequired) || (libCOMI_gf_GameIsOver() == true) || (lv_skipWaitingForParts == true)))) {
        Wait(0.5, c_timeGame);
    }
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }
    else {
        libCOMI_gf_SetMissionEffort(60.0);
        TriggerExecute(gt_BossFightPhase, true, false);
        lv_skipWaitingForParts = false;
        TriggerExecute(gt_ArchangelLaunchSequence, true, false);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }
    while (!(((UnitIsAlive(gv_boss[1]) == false) || (libCOMI_gf_GameIsOver() == true)))) {
        Wait(0.5, c_timeGame);
    }
    TriggerExecute(gt_PartsCollectionPhase, true, false);
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }
    else {
        if ((gv_archangelCurrentPartsPool >= gv_c_ArchangelPartsRequired)) {
            lv_skipWaitingForParts = true;
            TriggerExecute(gt_ObjectiveGatherArchangelPartsUpdate, true, true);
        }

    }
    while (!(((gv_archangelCurrentPartsPool >= gv_c_ArchangelPartsRequired) || (libCOMI_gf_GameIsOver() == true) || (lv_skipWaitingForParts == true)))) {
        Wait(0.5, c_timeGame);
    }
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }
    else {
        libCOMI_gf_SetMissionEffort(100.0);
        TriggerExecute(gt_BossFightPhase, true, false);
        TriggerExecute(gt_ArchangelLaunchSequence, true, false);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionProgression_Init () {
    gt_MissionProgression = TriggerCreate("gt_MissionProgression_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parts Collection Phase
//--------------------------------------------------------------------------------------------------
bool gt_PartsCollectionPhase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitializeUpdatePartsRegionOrder, true, false);
    TriggerEnable(gt_ShowandUpdatePartRegionMarkers, true);
    gf_ShowHidePartsRegionPings(true);
    ObjectiveSetPriority(gv_objectiveDestroyBosses, 10);
    TimerWindowShow(gv_timerWindowPreventBossAwaken, PlayerGroupAll(), true);
    libCOMI_gf_ShowHideSingularBossBarVoidCampaign(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartsCollectionPhase_Init () {
    gt_PartsCollectionPhase = TriggerCreate("gt_PartsCollectionPhase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Fight Phase
//--------------------------------------------------------------------------------------------------
bool gt_BossFightPhase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA9F22180_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_preventBossAwaken, (TimerGetRemaining(gv_preventBossAwaken) + gv_partsCollectedExtraTime), false, c_timeGame);
    TriggerExecute(gt_TransmissionResetTransmissionsforNextRound, true, false);
    gv_partsUpdateVOBool = false;
    TriggerEnable(gt_ShowandUpdatePartRegionMarkers, false);
    ObjectiveSetPriority(gv_objectiveDestroyBosses, 30);
    TimerWindowShow(gv_timerWindowPreventBossAwaken, PlayerGroupAll(), false);
    gf_CreateBossPing(gv_bossesSlain);
    autoA9F22180_val = gv_bossesSlain;
    if (autoA9F22180_val == 0) {
        libCOMI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\tip_hybriddominator.dds", TextExpressionAssemble("Param/Expression/BA589ACD"), FixedToInt(UnitGetPropertyFixed(gv_boss[0], c_unitPropVitality, c_unitPropCurrent)));
    }
    else if (autoA9F22180_val == 1) {
        libCOMI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\tip_hybriddominator.dds", TextExpressionAssemble("Param/Expression/0A140789"), FixedToInt(UnitGetPropertyFixed(gv_boss[1], c_unitPropVitality, c_unitPropCurrent)));
    }
    else if (autoA9F22180_val == 2) {
        libCOMI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\tip_hybriddominator.dds", TextExpressionAssemble("Param/Expression/CD395401"), FixedToInt(UnitGetPropertyFixed(gv_boss[2], c_unitPropVitality, c_unitPropCurrent)));
    }
    else {
    }
    libCOMI_gf_SetSingularBossBarBossVoidCampaign(gv_boss[gv_bossesSlain], true);
    gf_ShowHidePartsRegionPings(false);
    gv_hidePingsBool = true;
    gv_archangelCurrentPartsPool = (gv_archangelCurrentPartsPool - gv_c_ArchangelPartsRequired);
    if ((gv_bossesSlain > 1)) {
        Wait(2.0, c_timeGame);
        ObjectiveShow(gv_objectiveGatherArchangelParts, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossFightPhase_Init () {
    gt_BossFightPhase = TriggerCreate("gt_BossFightPhase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Launch Sequence
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelLaunchSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAE792E79_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_archangelState_Current == ge_ArchangelStates_Repairing))) {
        Wait(0.1, c_timeGame);
    }
    gv_transmission_MostPartsCollected_Played = true;
    gv_transmission_HalfPartsCollected_Played = true;
    autoAE792E79_val = gv_bossesSlain;
    if (autoAE792E79_val == 0) {
        gv_attackWaveDirection = ge_AttackWaveDirection_Right;
    }
    else if (autoAE792E79_val == 1) {
        gv_attackWaveDirection = ge_AttackWaveDirection_Left;
    }
    else if (autoAE792E79_val == 2) {
        gv_attackWaveDirection = ge_AttackWaveDirection_Random;
    }
    else {
        gv_attackWaveDirection = ge_AttackWaveDirection_Random;
    }
    TriggerExecute(gt_ArchangelSiegePingTrail, true, false);
    TriggerExecute(gt_TransmissionArchangelPreparingtoMovingOutafterrepairQ, true, false);
    UnitSetPropertyFixed(gv_archangel, c_unitPropLifePercent, 100.0);
    gf_ArchangelState(ge_ArchangelStates_ReadyToMoveOut);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelLaunchSequence_Init () {
    gt_ArchangelLaunchSequence = TriggerCreate("gt_ArchangelLaunchSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel Siege Ping Trail
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelSiegePingTrail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_siegePoint;
    fixed lv_i;
    int lv_currentBoss;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentBoss = gv_bossesSlain;
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_bossCages[lv_currentBoss]), StringExternal("Param/Value/AF5FF168"));
    gv_archangelDestinationPing = PingLastCreated();
    PingSetUnit(PingLastCreated(), gv_archangel);
    lv_siegePoint = UnitGetPosition(gv_bossCages[lv_currentBoss]);
    PathCreateForUnit(PlayerGroupAll(), gv_archangel);
    PathSetDestinationPoint(PathLastCreated(), lv_siegePoint);
    PathSetVisible(PathLastCreated(), c_pathLocationMinimap, true);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetColor(PathLastCreated(), c_pathLocationAll, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_archangel), false)));
    while ((gv_hybridChamberOpen[lv_currentBoss] == false)) {
        Wait(7.0, c_timeGame);
    }
    while (!((gv_archangelState_Current != ge_ArchangelStates_MovingToBoss) && (gv_archangelState_Current != ge_ArchangelStates_BombardingBossShield))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(gv_archangelDestinationPing);
    PathDestroy(PathLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelSiegePingTrail_Init () {
    gt_ArchangelSiegePingTrail = TriggerCreate("gt_ArchangelSiegePingTrail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Archangel State Machine
//--------------------------------------------------------------------------------------------------
bool gt_ArchangelStateMachine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetedUnit;
    unitfilter lv_missileBarrageTargeting;
    fixed lv_archangelWaitIter;
    unit lv_validHybridTarget;

    // Automatic Variable Declarations
    int auto4F71157E_val;
    unitgroup autoA1077893_g;
    int autoA1077893_u;
    unitgroup auto9B5217F2_g;
    int auto9B5217F2_u;

    // Variable Initialization
    lv_missileBarrageTargeting = UnitFilter(0, 0, 0, 0);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missileBarrageTargeting = UnitFilter(0, 0, 0, (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32)));
    if ((gv_archangelState_Current != gv_archangelState_Previous) && (gv_archangelState_Current != ge_ArchangelStates_Repairing)) {
        UnitAbilityEnable(gv_archangel, "move", true);
        UnitAbilityEnable(gv_archangel, "attack", true);
    }

    auto4F71157E_val = gv_archangelState_Current;
    if (auto4F71157E_val == ge_ArchangelStates_LandingToRepair) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitSetState(gv_archangel, c_unitStateInvulnerable, true);
        UnitAbilityEnable(gv_archangel, "attack", false);
        if ((UnitGetType(gv_archangel) == gv_c_Archangel_BomberType)) {
            UnitIssueOrder(gv_archangel, Order(AbilityCommand("ArchAngelPnPAssaultMode", 0)), c_orderQueueReplace);
            while (!((UnitGetType(gv_archangel) == gv_c_Archangel_AssaultType))) {
                Wait(0.5, c_timeGame);
            }
            Wait(2.0, c_timeGame);
        }

        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(805086415), 5.0, PointGetFacing(PointFromId(805086415)))), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(gv_archangel), libNtve_gf_Signal("BrokenStart"));
        Wait(3.0, c_timeGame);
        gf_ArchangelState(ge_ArchangelStates_Repairing);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else if (auto4F71157E_val == ge_ArchangelStates_Repairing) {
        UnitSetState(gv_archangel, c_unitStateInvulnerable, true);
        UnitSetState(gv_archangel, c_unitStateFidget, false);
        UnitAbilityEnable(gv_archangel, "attack", false);
        UnitAbilityEnable(gv_archangel, "move", false);
        UnitAbilityEnable(gv_archangel, "stop", false);
        UnitSetPropertyFixed(gv_archangel, c_unitPropLifePercent, MaxF(UnitGetPropertyFixed(gv_archangel, c_unitPropLifePercent, c_unitPropCurrent), ((IntToFixed(gv_archangelCurrentPartsPool) / IntToFixed(gv_c_ArchangelPartsRequired)) * 100.0)));
        UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(805086415), 5.0, PointGetFacing(PointFromId(805086415)))), c_orderQueueReplace);
    }
    else if (auto4F71157E_val == ge_ArchangelStates_ReadyToMoveOut) {
        TriggerEnable(TriggerGetCurrent(), false);
        UnitAbilityEnable(gv_archangel, "attack", false);
        ActorSend(libNtve_gf_MainActorofUnit(gv_archangel), libNtve_gf_Signal("BrokenStop"));
        Wait(2.0, c_timeGame);
        UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(112764601)), c_orderQueueReplace);
        Wait((DistanceBetweenPoints(UnitGetPosition(gv_archangel), PointFromId(112764601)) * 1.88), c_timeGame);
        UnitAbilityEnable(gv_archangel, "move", false);
        Wait(45.0, c_timeGame);
        UnitSetState(gv_archangel, c_unitStateInvulnerable, false);
        UnitAbilityEnable(gv_archangel, "move", true);
        UnitAbilityEnable(gv_archangel, "attack", true);
        TriggerExecute(gt_TransmissionArchangelMovingOutafterrepairQ, true, false);
        Wait(7.0, c_timeGame);
        gf_ArchangelState(ge_ArchangelStates_MovingToBoss);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else if (auto4F71157E_val == ge_ArchangelStates_MovingToBoss) {
        if ((gv_hybridChamberOpen[gv_bossesSlain] == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_archangel), UnitGetPosition(gv_bossCages[gv_bossesSlain])) <= 10.0)) {
                UnitIssueOrder(gv_archangel, OrderTargetingUnit(AbilityCommand("ArchAngelPnPEMP", 0), gv_bossCages[gv_bossesSlain]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_bossCages[gv_bossesSlain])), c_orderQueueReplace);
            }
            if ((RandomInt(0, 20) == 20)) {
                autoA1077893_g = UnitGroupAlliance(UnitGetOwner(gv_archangel), c_unitAllianceEnemy, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_archangel), 8.0, UnitGetFacing(gv_archangel)), 10.0), lv_missileBarrageTargeting, 10);
                autoA1077893_u = UnitGroupCount(autoA1077893_g, c_unitCountAll);
                for (;; autoA1077893_u -= 1) {
                    lv_targetedUnit = UnitGroupUnitFromEnd(autoA1077893_g, autoA1077893_u);
                    if (lv_targetedUnit == null) { break; }
                    UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("ArchAngelPnPMissileShot", 0), UnitGetPosition(lv_targetedUnit)), c_orderQueueAddToFront);
                }
            }

        }
        else {
            gf_ArchangelState(ge_ArchangelStates_EngagingBoss);
            TriggerExecute(gt_TransmissionBossEngagedQ, true, false);
        }
        if ((UnitGetPropertyFixed(gv_archangel, c_unitPropLife, c_unitPropCurrent) <= 50.0)) {
            gf_ArchangelState(ge_ArchangelStates_BombardingBossShield);
            TriggerExecute(gt_TransmissionArchangelInitiateBombinRunQ, true, false);
        }

    }
    else if (auto4F71157E_val == ge_ArchangelStates_BombardingBossShield) {
        if ((UnitGetType(gv_archangel) == gv_c_Archangel_AssaultType)) {
            TriggerEnable(TriggerGetCurrent(), false);
            UnitAbilityEnable(gv_archangel, "move", false);
            UnitAbilityEnable(gv_archangel, "attack", false);
            ActorSend(libNtve_gf_MainActorofUnit(gv_archangel), libNtve_gf_Signal("BrokenStart"));
            Wait(4.0, c_timeGame);
            ActorSend(libNtve_gf_MainActorofUnit(gv_archangel), libNtve_gf_Signal("BrokenStop"));
            Wait(1.5, c_timeGame);
            UnitAbilityEnable(gv_archangel, "move", true);
            UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_bossCages[gv_bossesSlain])), c_orderQueueReplace);
            UnitIssueOrder(gv_archangel, Order(AbilityCommand("ArchAngelPnPFighterMode", 0)), c_orderQueueAddToEnd);
            UnitAbilityEnable(gv_archangel, "attack", true);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((gv_hybridChamberOpen[gv_bossesSlain] == false)) {
                TriggerEnable(TriggerGetCurrent(), false);
                gf_PrettyArchangelBombingRun();
                TriggerEnable(TriggerGetCurrent(), true);
            }
            else {
                gf_ArchangelState(ge_ArchangelStates_RetreatingToRepair);
                TriggerExecute(gt_TransmissionReturningforRepairsShieldDestroyedQ, true, false);
            }
        }
    }
    else if (auto4F71157E_val == ge_ArchangelStates_EngagingBoss) {
        lv_validHybridTarget = UnitGroupRandomUnit(UnitGroupFilter(null, c_playerAny, gv_hybridBossesGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((UnitIsValid(lv_validHybridTarget) == true)) {
            UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_validHybridTarget)), c_orderQueueReplace);
        }

        if ((RandomInt(0, 10) == 0)) {
            auto9B5217F2_g = UnitGroupAlliance(UnitGetOwner(gv_archangel), c_unitAllianceEnemy, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_archangel), 5.0, UnitGetFacing(gv_archangel)), 10.0), lv_missileBarrageTargeting, 10);
            auto9B5217F2_u = UnitGroupCount(auto9B5217F2_g, c_unitCountAll);
            for (;; auto9B5217F2_u -= 1) {
                lv_targetedUnit = UnitGroupUnitFromEnd(auto9B5217F2_g, auto9B5217F2_u);
                if (lv_targetedUnit == null) { break; }
                UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("ArchAngelPnPMissileShot", 0), UnitGetPosition(lv_targetedUnit)), c_orderQueueAddToFront);
            }
        }

        if ((UnitGetPropertyFixed(gv_archangel, c_unitPropLife, c_unitPropCurrent) <= 50.0)) {
            gf_ArchangelState(ge_ArchangelStates_RetreatingToRepair);
            TriggerExecute(gt_TransmissionBossEncounterArchangelDefeatedQ, true, false);
        }

    }
    else if (auto4F71157E_val == ge_ArchangelStates_RetreatingToRepair) {
        if ((UnitGetType(gv_archangel) == gv_c_Archangel_AssaultType)) {
            UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(805086415)), c_orderQueueReplace);
            UnitIssueOrder(gv_archangel, Order(AbilityCommand("ArchAngelPnPFighterMode", 0)), c_orderQueueAddToEnd);
            SoundPlayForPlayer(SoundLink("Event_Balius_Morph_to_Fighter_A", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("Event_Balius_Morph_EngineStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("Event_Balius_ReturnFlight_toRepair", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            if ((libNtve_gf_UnitInRegion(gv_archangel, RegionCircle(PointFromId(805086415), 0.1)) == false)) {
                UnitIssueOrder(gv_archangel, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(805086415)), c_orderQueueReplace);
            }
            else {
                gf_ArchangelState(ge_ArchangelStates_LandingToRepair);
                SoundPlayForPlayer(SoundLink("Event_Balius_Morph_EngineOff", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }
        }
    }
    else {
    }
    gv_archangelState_Previous = gv_archangelState_Current;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArchangelStateMachine_Init () {
    gt_ArchangelStateMachine = TriggerCreate("gt_ArchangelStateMachine_Func");
    TriggerAddEventTimePeriodic(gt_ArchangelStateMachine, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize/Update Parts Region Order
//--------------------------------------------------------------------------------------------------
bool gt_InitializeUpdatePartsRegionOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_partsRegionPingIter;
    int lv_partsRegionIter;

    // Automatic Variable Declarations
    const int auto94182941_ae = gv_c_PartsRegionsTotal;
    const int auto94182941_ai = 1;
    int auto84C1730A_val;
    const int auto4446A3B6_ae = gv_c_PartsRegionsTotal;
    const int auto4446A3B6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_partsRegionPingIter = 1;
    for ( ; ( (auto94182941_ai >= 0 && lv_partsRegionPingIter <= auto94182941_ae) || (auto94182941_ai < 0 && lv_partsRegionPingIter >= auto94182941_ae) ) ; lv_partsRegionPingIter += auto94182941_ai ) {
        if ((gv_partsRegionPings[lv_partsRegionPingIter] != c_invalidPingId)) {
            libCOMI_gf_DestroyPingCoop(gv_partsRegionPings[lv_partsRegionPingIter]);
        }

        gv_partsRegionPings[lv_partsRegionPingIter] = c_invalidPingId;
    }
    auto84C1730A_val = gv_bossesSlain;
    if (auto84C1730A_val == 0) {
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 1;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 2;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 3;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 4;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 5;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 6;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 7;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 8;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 9;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 10;
    }
    else if (auto84C1730A_val == 1) {
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 1;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 4;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 5;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 6;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 3;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 7;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 2;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 8;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 9;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 10;
    }
    else {
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 1;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 9;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 7;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 8;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 10;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 2;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 3;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 4;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 5;
        lv_partsRegionIter += 1;
        gv_partsRegionIndex[lv_partsRegionIter] = 6;
    }
    lv_partsRegionIter = 1;
    for ( ; ( (auto4446A3B6_ai >= 0 && lv_partsRegionIter <= auto4446A3B6_ae) || (auto4446A3B6_ai < 0 && lv_partsRegionIter >= auto4446A3B6_ae) ) ; lv_partsRegionIter += auto4446A3B6_ai ) {
        gv_partsRegions[lv_partsRegionIter] = RegionFromName(("Parts Area " + IntToString(gv_partsRegionIndex[lv_partsRegionIter])));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeUpdatePartsRegionOrder_Init () {
    gt_InitializeUpdatePartsRegionOrder = TriggerCreate("gt_InitializeUpdatePartsRegionOrder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Parts Neutral
//--------------------------------------------------------------------------------------------------
bool gt_MakePartsNeutral_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_partsIter;
    int lv_additionalPartsToCreated;
    fixed lv_initialAngle;
    point lv_createLocation;

    // Automatic Variable Declarations
    string autoCB33D5EA_val;
    int autoA06575F6_ae;
    const int autoA06575F6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCB33D5EA_val = EventPlayerEffectUsed();
    if (autoCB33D5EA_val == "CreatePartsonDeath") {
        lv_additionalPartsToCreated = 0;
    }
    else if (autoCB33D5EA_val == "CreatePartsonDeath2") {
        lv_additionalPartsToCreated = 2;
    }
    else if (autoCB33D5EA_val == "CreatePartsonDeath3") {
        lv_additionalPartsToCreated = 4;
    }
    else {
        lv_additionalPartsToCreated = 0;
    }
    lv_initialAngle = libNtve_gf_RandomAngle();
    lv_createLocation = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    autoA06575F6_ae = lv_additionalPartsToCreated;
    lv_partsIter = 1;
    for ( ; ( (autoA06575F6_ai >= 0 && lv_partsIter <= autoA06575F6_ae) || (autoA06575F6_ai < 0 && lv_partsIter >= autoA06575F6_ae) ) ; lv_partsIter += autoA06575F6_ai ) {
        UnitCreate(1, "PartsPickup", 0, gv_pLAYER_07_BALIUSPARTS, PointWithOffsetPolar(lv_createLocation, RandomFixed(1.0, 3.0), (360 * IntToFixed(lv_partsIter) / IntToFixed(lv_additionalPartsToCreated) + (lv_initialAngle + RandomFixed(-15.0, 15.0)))), libNtve_gf_RandomAngle());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakePartsNeutral_Init () {
    gt_MakePartsNeutral = TriggerCreate("gt_MakePartsNeutral_Func");
    TriggerAddEventPlayerEffectUsed(gt_MakePartsNeutral, gv_pLAYER_07_BALIUSPARTS, "CreatePartsonDeath3");
    TriggerAddEventPlayerEffectUsed(gt_MakePartsNeutral, gv_pLAYER_07_BALIUSPARTS, "CreatePartsonDeath");
    TriggerAddEventPlayerEffectUsed(gt_MakePartsNeutral, gv_pLAYER_07_BALIUSPARTS, "CreatePartsonDeath2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Parts Tooltip
//--------------------------------------------------------------------------------------------------
bool gt_SetPartsTooltip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "PartsPickup3") || (UnitGetType(EventUnitCreatedUnit()) == "PartsPickup") || (UnitGetType(EventUnitCreatedUnit()) == "PartsPickup2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/E3CFCAC6", "A", UnitTypeGetName(UnitGetType(EventUnitCreatedUnit())));
    libCOMI_gf_SetUnitInfoTextCampaignDetailed(EventUnitCreatedUnit(), null, TextExpressionAssemble("Param/Expression/E3CFCAC6"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetPartsTooltip_Init () {
    gt_SetPartsTooltip = TriggerCreate("gt_SetPartsTooltip_Func");
    TriggerAddEventUnitCreated(gt_SetPartsTooltip, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parts picked up
//--------------------------------------------------------------------------------------------------
bool gt_Partspickedup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_collectingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_collectingPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    gf_AddParts(1, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_collectingPlayer) == true)) {
        gv_scoreScreen_PartsCollected[lv_collectingPlayer] += 1;
        PlayerScoreValueSetFromInt(lv_collectingPlayer, "PartAndParcelCollection", gv_scoreScreen_PartsCollected[lv_collectingPlayer]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Partspickedup_Init () {
    gt_Partspickedup = TriggerCreate("gt_Partspickedup_Func");
    TriggerAddEventPlayerEffectUsed(gt_Partspickedup, c_playerAny, "PartsPickupSet3");
    TriggerAddEventPlayerEffectUsed(gt_Partspickedup, c_playerAny, "PartsPickupSet");
    TriggerAddEventPlayerEffectUsed(gt_Partspickedup, c_playerAny, "PartsPickupSet2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show and Update Part Region Markers
//--------------------------------------------------------------------------------------------------
bool gt_ShowandUpdatePartRegionMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_baseIter;
    region lv_partsRegion;
    int lv_activePingsDesired;
    int lv_activePingsTotal;
    int lv_activePingsPrevious;
    unitgroup lv_partsBuildingsTargets;
    unit lv_tempUnit;

    // Automatic Variable Declarations
    const int autoD901B722_ae = gv_c_PartsRegionsTotal;
    const int autoD901B722_ai = 1;
    const int auto9C6760F1_ae = gv_c_PartsRegionsTotal;
    const int auto9C6760F1_ai = 1;
    unitgroup autoDB3FAA73_g;
    int autoDB3FAA73_u;
    unit autoDB3FAA73_var;

    // Variable Initialization
    lv_partsBuildingsTargets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_hidePingsBool == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_activePingsTotal = 0;
    lv_baseIter = 1;
    for ( ; ( (autoD901B722_ai >= 0 && lv_baseIter <= autoD901B722_ae) || (autoD901B722_ai < 0 && lv_baseIter >= autoD901B722_ae) ) ; lv_baseIter += autoD901B722_ai ) {
        if ((gv_partsRegionPings[lv_baseIter] != c_invalidPingId)) {
            lv_activePingsTotal += 1;
        }

    }
    lv_baseIter = 1;
    for ( ; ( (auto9C6760F1_ai >= 0 && lv_baseIter <= auto9C6760F1_ae) || (auto9C6760F1_ai < 0 && lv_baseIter >= auto9C6760F1_ae) ) ; lv_baseIter += auto9C6760F1_ai ) {
        lv_partsRegion = gv_partsRegions[lv_baseIter];
        if ((lv_partsRegion == null)) {
            continue;
        }

        lv_partsBuildingsTargets = gv_partsDroppers[gv_partsRegionIndex[lv_baseIter]];
        if ((gv_partsRegionPings[lv_baseIter] == c_invalidPingId)) {
            if (((lv_activePingsTotal < gv_activePingsDesiredGlobal) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, lv_partsRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) && (UnitGroupCount(lv_partsBuildingsTargets, c_unitCountAlive) >= gv_numberOfUnitsToBreakIntoSmallerPings[gv_partsRegionIndex[lv_baseIter]])) {
                libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(lv_partsRegion), StringExternal("Param/Value/8668AA84"));
                gv_partsRegionPings[lv_baseIter] = PingLastCreated();
                lv_activePingsTotal += 1;
            }

        }

        if ((UnitGroupCount(lv_partsBuildingsTargets, c_unitCountAlive) > 0) && (UnitGroupCount(lv_partsBuildingsTargets, c_unitCountAlive) < gv_numberOfUnitsToBreakIntoSmallerPings[gv_partsRegionIndex[lv_baseIter]])) {
            libCOMI_gf_DestroyPingCoop(gv_partsRegionPings[lv_baseIter]);
            gv_partsRegionPings[lv_baseIter] = c_invalidPingId;
            autoDB3FAA73_g = lv_partsBuildingsTargets;
            autoDB3FAA73_u = UnitGroupCount(autoDB3FAA73_g, c_unitCountAll);
            for (;; autoDB3FAA73_u -= 1) {
                autoDB3FAA73_var = UnitGroupUnitFromEnd(autoDB3FAA73_g, autoDB3FAA73_u);
                if (autoDB3FAA73_var == null) { break; }
                gf_PartsSmallPing(autoDB3FAA73_var);
            }
        }

        if ((UnitGroupCount(lv_partsBuildingsTargets, c_unitCountAlive) < 1)) {
            libCOMI_gf_DestroyPingCoop(gv_partsRegionPings[lv_baseIter]);
            gv_partsRegionPings[lv_baseIter] = c_invalidPingId;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowandUpdatePartRegionMarkers_Init () {
    gt_ShowandUpdatePartRegionMarkers = TriggerCreate("gt_ShowandUpdatePartRegionMarkers_Func");
    TriggerEnable(gt_ShowandUpdatePartRegionMarkers, false);
    TriggerAddEventTimePeriodic(gt_ShowandUpdatePartRegionMarkers, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Boss Hybrid
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseBossHybrid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentBoss;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_currentBoss = gv_bossesSlain;
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_bossCages[lv_currentBoss], 1));
    UnitSetState(gv_bossCages[lv_currentBoss], c_unitStateSelectable, false);
    UnitSetState(gv_bossCages[lv_currentBoss], c_unitStateTargetable, false);
    gv_hybridChamberOpen[lv_currentBoss] = true;
    SoundPlayForPlayer(SoundLink("Hybrid02_Cell_Explode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Hybrid03_CS_Open_Ultralisk_ChainBreak", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_bossCages[gv_bossesSlain], OrderTargetingPoint(AbilityCommand("HybridStasisChamberARelease", 0), UnitGetPosition(gv_boss[gv_bossesSlain])), c_orderQueueReplace);
    while (!((UnitIsValid(gv_boss[lv_currentBoss]) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseBossHybrid_Init () {
    gt_ReleaseBossHybrid = TriggerCreate("gt_ReleaseBossHybrid_Func");
    TriggerAddEventPlayerEffectUsed(gt_ReleaseBossHybrid, gv_pLAYER_05_BALIUS, "ArchAngelPnPEMPAirDamageC");
    TriggerAddEventPlayerEffectUsed(gt_ReleaseBossHybrid, gv_pLAYER_05_BALIUS, "ArchAngelPnPEMPFinalDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Hybrid Created
//--------------------------------------------------------------------------------------------------
bool gt_BossHybridCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridCellIter;
    int lv_hybridCellIndex;
    point lv_spawnPoint;
    unit lv_hybridBoss;

    // Automatic Variable Declarations
    const int auto345944E3_ae = 3;
    const int auto345944E3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hybridCellIndex = -1;
    lv_spawnPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_hybridCellIter = 0;
    for ( ; ( (auto345944E3_ai >= 0 && lv_hybridCellIter <= auto345944E3_ae) || (auto345944E3_ai < 0 && lv_hybridCellIter >= auto345944E3_ae) ) ; lv_hybridCellIter += auto345944E3_ai ) {
        if ((UnitIsValid(gv_boss[lv_hybridCellIter]) == true) && (DistanceBetweenPoints(lv_spawnPoint, UnitGetPosition(gv_boss[lv_hybridCellIter])) <= 1.0)) {
            lv_hybridCellIndex = lv_hybridCellIter;
            break;
        }

    }
    if ((lv_hybridCellIndex == -1)) {
        return true;
    }

    libNtve_gf_ShowHideUnit(gv_boss[lv_hybridCellIndex], true);
    libNtve_gf_PauseUnit(gv_boss[lv_hybridCellIndex], false);
    libNtve_gf_MakeUnitInvulnerable(gv_boss[lv_hybridCellIndex], false);
    lv_hybridBoss = gv_boss[lv_hybridCellIndex];
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(lv_hybridBoss), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    libHots_gf_StorePingForUnit(lv_hybridBoss, 1, PingLastCreated());
    PingSetTooltip(PingLastCreated(), UnitTypeGetName(UnitGetType(lv_hybridBoss)));
    PingSetUnit(PingLastCreated(), lv_hybridBoss);
    gf_BossLogic(lv_hybridCellIndex, lv_hybridBoss);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_TransmissionHybridBossReleasedQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossHybridCreated_Init () {
    gt_BossHybridCreated = TriggerCreate("gt_BossHybridCreated_Func");
    TriggerAddEventPlayerEffectUsed(gt_BossHybridCreated, gv_pLAYER_03_ENEMY, "HybridStasisChamberAReleaseImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Death 1
//--------------------------------------------------------------------------------------------------
bool gt_BossDeath1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_hidePingsBool = false;
    gv_bossesSlain = (gv_bossesSlain + 1);
    TriggerExecute(gt_ObjectiveDestroyBossesUpdate, true, false);
    libCOMI_gf_SetMissionEffort(40.0);
    if (((gv_archangelState_Current == ge_ArchangelStates_RetreatingToRepair) || (gv_archangelState_Current == ge_ArchangelStates_Repairing) || (gv_archangelState_Current == ge_ArchangelStates_LandingToRepair))) {
        TriggerExecute(gt_TransmissionBossDefeatedArchangelDefeatedQ, true, false);
        libHots_gf_PlaySoundLinkasMusic(SoundLink("AC_Music_PartParcel_BossFight_Win", -1), false, true);
        gv_attackWaveDirection = ge_AttackWaveDirection_Random;
        while (!((gv_archangelState_Current == ge_ArchangelStates_Repairing))) {
            Wait(0.1, c_timeGame);
        }
        TriggerExecute(gt_TransmissionStartPartsCollectingQ, true, false);
        TriggerExecute(gt_ObjectiveGatherArchangelPartsReset, true, false);
        gv_partsUpdateVOBool = true;
        TriggerExecute(gt_TransmissionArchangelPartsCollected, true, false);
        Wait(7.0, c_timeGame);
        TriggerExecute(gt_TransmissionResetTransmissionsforNextRound, true, false);
        return true;
    }

    if ((gv_archangelState_Current == ge_ArchangelStates_EngagingBoss)) {
        TriggerExecute(gt_TransmissionBossDefeatedReturnHomeQ, true, false);
        libHots_gf_PlaySoundLinkasMusic(SoundLink("AC_Music_PartParcel_BossFight_Win", -1), false, true);
        gf_ArchangelState(ge_ArchangelStates_RetreatingToRepair);
        gv_attackWaveDirection = ge_AttackWaveDirection_Random;
        gv_partsUpdateVOBool = true;
        while (!((gv_archangelState_Current == ge_ArchangelStates_Repairing))) {
            Wait(0.1, c_timeGame);
        }
        TriggerExecute(gt_TransmissionStartPartsCollectingQ, true, false);
        TriggerExecute(gt_ObjectiveGatherArchangelPartsReset, true, false);
        gv_partsUpdateVOBool = true;
        TriggerExecute(gt_TransmissionArchangelPartsCollected, true, false);
        Wait(7.0, c_timeGame);
        TriggerExecute(gt_TransmissionResetTransmissionsforNextRound, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossDeath1_Init () {
    gt_BossDeath1 = TriggerCreate("gt_BossDeath1_Func");
    TriggerAddEventUnitDied(gt_BossDeath1, UnitRefFromVariable("gv_boss[0]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Death 2
//--------------------------------------------------------------------------------------------------
bool gt_BossDeath2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_hidePingsBool = false;
    gv_bossesSlain = (gv_bossesSlain + 1);
    TriggerExecute(gt_ObjectiveDestroyBossesUpdate, true, false);
    libCOMI_gf_SetMissionEffort(80.0);
    if (((gv_archangelState_Current == ge_ArchangelStates_RetreatingToRepair) || (gv_archangelState_Current == ge_ArchangelStates_Repairing) || (gv_archangelState_Current == ge_ArchangelStates_LandingToRepair))) {
        TriggerExecute(gt_TransmissionBossDefeatedArchangelDefeatedQ, true, false);
        libHots_gf_PlaySoundLinkasMusic(SoundLink("AC_Music_PartParcel_BossFight_Win", -1), false, true);
        gv_attackWaveDirection = ge_AttackWaveDirection_Random;
        while (!((gv_archangelState_Current == ge_ArchangelStates_Repairing))) {
            Wait(0.1, c_timeGame);
        }
        TriggerExecute(gt_TransmissionStartPartsCollectingQ, true, false);
        TriggerExecute(gt_ObjectiveGatherArchangelPartsReset, true, false);
        gv_partsUpdateVOBool = true;
        TriggerExecute(gt_TransmissionArchangelPartsCollected, true, false);
        Wait(7.0, c_timeGame);
        TriggerExecute(gt_TransmissionResetTransmissionsforNextRound, true, false);
        return true;
    }

    if ((gv_archangelState_Current == ge_ArchangelStates_EngagingBoss)) {
        TriggerExecute(gt_TransmissionBossDefeatedReturnHomeQ, true, false);
        libHots_gf_PlaySoundLinkasMusic(SoundLink("AC_Music_PartParcel_BossFight_Win", -1), false, true);
        gf_ArchangelState(ge_ArchangelStates_RetreatingToRepair);
        gv_attackWaveDirection = ge_AttackWaveDirection_Random;
        gv_partsUpdateVOBool = true;
        while (!((gv_archangelState_Current == ge_ArchangelStates_Repairing))) {
            Wait(0.1, c_timeGame);
        }
        TriggerExecute(gt_TransmissionStartPartsCollectingQ, true, false);
        TriggerExecute(gt_ObjectiveGatherArchangelPartsReset, true, false);
        gv_partsUpdateVOBool = true;
        TriggerExecute(gt_TransmissionArchangelPartsCollected, true, false);
        Wait(7.0, c_timeGame);
        TriggerExecute(gt_TransmissionResetTransmissionsforNextRound, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossDeath2_Init () {
    gt_BossDeath2 = TriggerCreate("gt_BossDeath2_Func");
    TriggerAddEventUnitDied(gt_BossDeath2, UnitRefFromVariable("gv_boss[1]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Death 3
//--------------------------------------------------------------------------------------------------
bool gt_BossDeath3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_bossesSlain = (gv_bossesSlain + 1);
    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossDeath3_Init () {
    gt_BossDeath3 = TriggerCreate("gt_BossDeath3_Func");
    TriggerAddEventUnitDied(gt_BossDeath3, UnitRefFromVariable("gv_boss[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Area Revealer
//--------------------------------------------------------------------------------------------------
bool gt_BossAreaRevealer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bossRevealerIter;
    int lv_playerIter;
    revealer[3] lv_bossRevealer;

    // Automatic Variable Declarations
    playergroup autoDBD04C7B_g;
    playergroup auto2217C2CB_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoDBD04C7B_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoDBD04C7B_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        libCOMI_gf_CreateRevealerCoop(lv_playerIter, EventUnitRegion());
        lv_bossRevealer[lv_playerIter] = VisRevealerLastCreated();
    }
    while (!((libNtve_gf_UnitInRegion(gv_archangel, EventUnitRegion()) == false))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    auto2217C2CB_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto2217C2CB_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        libCOMI_gf_DestroyRevealerCoop(lv_bossRevealer[lv_playerIter]);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossAreaRevealer_Init () {
    gt_BossAreaRevealer = TriggerCreate("gt_BossAreaRevealer_Func");
    TriggerAddEventUnitRegion(gt_BossAreaRevealer, UnitRefFromVariable("gv_archangel"), RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_BossAreaRevealer, UnitRefFromVariable("gv_archangel"), RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_BossAreaRevealer, UnitRefFromVariable("gv_archangel"), RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Boss Styles
//--------------------------------------------------------------------------------------------------
bool gt_InitializeBossStyles_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_bossIndex;
    int lv_behaviorIndex;
    int lv_styleIter;
    int[gv_c_MaxStylesPerBoss + 1] lv_pickedStyleIndex;
    int[gv_c_MaxStylesPerBoss + 1] lv_pickedStyle;
    int lv_tempStyle;
    int[gv_c_MaxStyles + 1] lv_styleArray;
    int lv_totalNumberOfStyles;
    int lv_abilityToSkip;

    // Automatic Variable Declarations
    int auto891C4F1E_ae;
    const int auto891C4F1E_ai = 1;
    int auto3B67C77D_ae;
    const int auto3B67C77D_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= gv_c_MaxStylesPerBoss; init_i += 1) {
        lv_pickedStyle[init_i] = ge_BossStyles__None;
    }

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        lv_abilityToSkip = ge_BossStyles_FireChains;
    }
    else {
        lv_abilityToSkip = ge_BossStyles_PuddleLines;
    }
    auto891C4F1E_ae = ((ge_BossStyles__End) - 1);
    lv_styleIter = (ge_BossStyles__None + 1);
    for ( ; ( (auto891C4F1E_ai >= 0 && lv_styleIter <= auto891C4F1E_ae) || (auto891C4F1E_ai < 0 && lv_styleIter >= auto891C4F1E_ae) ) ; lv_styleIter += auto891C4F1E_ai ) {
        if ((lv_styleIter == (lv_abilityToSkip))) {
            continue;
        }

        lv_totalNumberOfStyles += 1;
        lv_styleArray[lv_styleIter] = lv_styleIter;
    }
    auto3B67C77D_ae = (gv_c_MaxStylesPerBoss - 1);
    lv_styleIter = 0;
    for ( ; ( (auto3B67C77D_ai >= 0 && lv_styleIter <= auto3B67C77D_ae) || (auto3B67C77D_ai < 0 && lv_styleIter >= auto3B67C77D_ae) ) ; lv_styleIter += auto3B67C77D_ai ) {
        lv_pickedStyleIndex[lv_styleIter] = RandomInt((ge_BossStyles__None + 1), (lv_totalNumberOfStyles - (lv_styleIter - 1)));
        lv_pickedStyle[lv_styleIter] = lv_styleArray[lv_pickedStyleIndex[lv_styleIter]];
        lv_tempStyle = lv_styleArray[(lv_totalNumberOfStyles - (lv_styleIter - 1))];
        lv_styleArray[(lv_totalNumberOfStyles - (lv_styleIter - 1))] = lv_pickedStyle[lv_styleIter];
        lv_styleArray[lv_pickedStyleIndex[lv_styleIter]] = lv_tempStyle;
    }
    lv_bossIndex = 0;
    gv_bossStylesActive[lv_bossIndex][0] = lv_pickedStyle[0];
    gv_bossStylesActive[lv_bossIndex][1] = ge_BossStyles__None;
    gv_bossStylesActive[lv_bossIndex][2] = ge_BossStyles__None;
    lv_bossIndex = 1;
    gv_bossStylesActive[lv_bossIndex][0] = lv_pickedStyle[0];
    gv_bossStylesActive[lv_bossIndex][1] = lv_pickedStyle[1];
    gv_bossStylesActive[lv_bossIndex][2] = ge_BossStyles__None;
    lv_bossIndex = 2;
    gv_bossStylesActive[lv_bossIndex][0] = lv_pickedStyle[0];
    gv_bossStylesActive[lv_bossIndex][1] = lv_pickedStyle[1];
    gv_bossStylesActive[lv_bossIndex][2] = lv_pickedStyle[2];
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeBossStyles_Init () {
    gt_InitializeBossStyles = TriggerCreate("gt_InitializeBossStyles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Boss - Hybrid Shades Life Share
//--------------------------------------------------------------------------------------------------
bool gt_HybridBossHybridShadesLifeShare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageTaken;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageTaken = EventUnitDamageAmount();
    if ((UnitGetPropertyFixed(gv_boss[gv_bossesSlain], c_unitPropShields, c_unitPropCurrent) > 0.0)) {
        UnitSetPropertyFixed(gv_boss[gv_bossesSlain], c_unitPropShields, (UnitGetPropertyFixed(gv_boss[gv_bossesSlain], c_unitPropShields, c_unitPropCurrent) - lv_damageTaken));
    }
    else {
        UnitSetPropertyFixed(gv_boss[gv_bossesSlain], c_unitPropLife, (UnitGetPropertyFixed(gv_boss[gv_bossesSlain], c_unitPropLife, c_unitPropCurrent) - lv_damageTaken));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridBossHybridShadesLifeShare_Init () {
    gt_HybridBossHybridShadesLifeShare = TriggerCreate("gt_HybridBossHybridShadesLifeShare_Func");
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[0]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[1]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[2]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[3]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[4]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[5]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[6]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_HybridBossHybridShadesLifeShare, UnitRefFromVariable("gv_hybridShades[7]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Boss Timer
//--------------------------------------------------------------------------------------------------
bool gt_InitializeBossTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TimerWindowCreate(gv_preventBossAwaken, StringExternal("Param/Value/DB4CD13A"), true, false);
    gv_timerWindowPreventBossAwaken = TimerWindowLastCreated();
    libCOMI_gf_SetTimerWindowDangerThreshold(180.0);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((TimerGetRemaining(gv_waitForTextCrawl) <= 0.0)) {
            TriggerExecute(gt_ObjectivePreventBossAwakenUpdate, true, false);
        }

        TriggerExecute(gt_TransmissionTimerUpdate, true, false);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeBossTimer_Init () {
    gt_InitializeBossTimer = TriggerCreate("gt_InitializeBossTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add to Boss Timer
//--------------------------------------------------------------------------------------------------
bool gt_AddtoBossTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_newTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newTime = (TimerGetRemaining(gv_preventBossAwaken) + gv_bossDefeatExtraTime);
    TimerStart(gv_preventBossAwaken, lv_newTime, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddtoBossTimer_Init () {
    gt_AddtoBossTimer = TriggerCreate("gt_AddtoBossTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Path Initialization
//--------------------------------------------------------------------------------------------------
bool gt_TrainPathInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        TriggerExecute(gt_TrainPathInitializationForward, true, false);
    }
    else {
        TriggerExecute(gt_TrainPathInitializationBackward, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainPathInitialization_Init () {
    gt_TrainPathInitialization = TriggerCreate("gt_TrainPathInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Path Initialization Forward
//--------------------------------------------------------------------------------------------------
bool gt_TrainPathInitializationForward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    point lv_testPoint;
    int lv_trainPathIter;

    // Automatic Variable Declarations
    const int auto10FE4602_ae = 255;
    const int auto10FE4602_ai = 1;
    const int auto301DE1EE_ae = 1;
    const int auto301DE1EE_ai = -1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_trainPath[0] = PointFromId(1080145301);
    lv_trainPathIter = 1;
    for ( ; ( (auto10FE4602_ai >= 0 && lv_trainPathIter <= auto10FE4602_ae) || (auto10FE4602_ai < 0 && lv_trainPathIter >= auto10FE4602_ae) ) ; lv_trainPathIter += auto10FE4602_ai ) {
        if ((lv_trainPathIter <= 9)) {
            lv_testPoint = PointFromName(("Train Nav 0" + IntToString(lv_trainPathIter)));
        }
        else {
            lv_testPoint = PointFromName(("Train Nav " + IntToString(lv_trainPathIter)));
        }
        if ((lv_testPoint != null)) {
            lv_iLocal += 1;
            gv_trainPath[lv_trainPathIter] = lv_testPoint;
        }
        else {
            break;
        }
    }
    lv_iLocal += 1;
    gv_trainPath[lv_iLocal] = PointFromId(1291165291);
    gv_trainPathMidStart = lv_iLocal;
    lv_trainPathIter = 31;
    for ( ; ( (auto301DE1EE_ai >= 0 && lv_trainPathIter <= auto301DE1EE_ae) || (auto301DE1EE_ai < 0 && lv_trainPathIter >= auto301DE1EE_ae) ) ; lv_trainPathIter += auto301DE1EE_ai ) {
        if ((lv_trainPathIter <= 9)) {
            lv_testPoint = PointFromName(("Train Nav 0" + IntToString(lv_trainPathIter)));
        }
        else {
            lv_testPoint = PointFromName(("Train Nav " + IntToString(lv_trainPathIter)));
        }
        if ((lv_testPoint != null)) {
            lv_iLocal += 1;
            gv_trainPath[lv_iLocal] = libNtve_gf_PointFacingAngle(lv_testPoint, (PointGetFacing(lv_testPoint) + 180.0));
        }
        else {
            break;
        }
    }
    gv_trainPathBottomStart = lv_iLocal;
    gv_numberOfTrainPathPoints = lv_iLocal;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainPathInitializationForward_Init () {
    gt_TrainPathInitializationForward = TriggerCreate("gt_TrainPathInitializationForward_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Path Initialization Backward
//--------------------------------------------------------------------------------------------------
bool gt_TrainPathInitializationBackward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    point lv_tempPointLocal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempPointLocal = RegionGetCenter(RegionPlayableMap());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iLocal = 1;
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPathMidStart = lv_iLocal;
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    gv_trainPathBottomStart = lv_iLocal;
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    lv_iLocal = (lv_iLocal + 1);
    gv_numberOfTrainPathPoints = lv_iLocal;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainPathInitializationBackward_Init () {
    gt_TrainPathInitializationBackward = TriggerCreate("gt_TrainPathInitializationBackward_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Escorts
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEscorts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_groundSpawnPoint1Local;
    point lv_groundSpawnPoint2Local;
    point lv_airSpawnPointLocal;
    int lv_trainIndexLocal;
    int lv_iLocal;
    point lv_escortSpawnPointLocal;
    int lv_escortPlayerLocal;
    unitgroup lv_escortGroupLocal;
    int lv_escortCountLocal;
    unitgroup lv_trainEscortsNextToCarsLocal;
    unitgroup lv_trainEscortsInFrontOfTrainLocal;
    int lv_specialEscortIterLocal;
    int lv_resourceLevelLocal;
    int lv_techLevelLocal;
    int lv_carToEscortLocal;
    fixed lv_carToEscortDistanceLocal;
    unitgroup lv_airEscorts;
    int lv_airEscortIter;

    // Automatic Variable Declarations
    int auto9C70413B_val;
    const int autoEBB72DF1_ae = gv_c_SpecialTrainEscort_Max;
    const int autoEBB72DF1_ai = 1;
    int autoF293C9C5_val;
    unitgroup autoB948B665_g;
    int autoB948B665_u;
    unit autoB948B665_var;
    unitgroup autoAAD76022_g;
    int autoAAD76022_u;
    unit autoAAD76022_var;
    int autoBA3FCAB9_ae;
    const int autoBA3FCAB9_ai = 1;
    int autoAF944FEA_val;
    const int autoC8F894EA_ae = 1;
    const int autoC8F894EA_ai = -1;
    int autoD117CAD1_ae;
    const int autoD117CAD1_ai = 1;
    int auto280ABE1A_ae;
    const int auto280ABE1A_ai = 1;
    int auto09363C53_ae;
    const int auto09363C53_ai = 1;

    // Variable Initialization
    lv_escortGroupLocal = UnitGroupEmpty();
    lv_trainEscortsNextToCarsLocal = UnitGroupEmpty();
    lv_trainEscortsInFrontOfTrainLocal = UnitGroupEmpty();
    lv_airEscorts = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainIndexLocal = gv_trainToBeEscorted;
    if ((lv_trainIndexLocal == 0)) {
        return true;
    }

    auto9C70413B_val = gv_trainList[lv_trainIndexLocal].lv_tunnel;
    if (auto9C70413B_val == ge_PRESET_Tunnel_Top) {
        lv_groundSpawnPoint1Local = PointFromId(845590318);
        lv_groundSpawnPoint2Local = PointFromId(171285644);
        lv_airSpawnPointLocal = PointFromId(834765420);
        lv_escortPlayerLocal = gv_pLAYER_08_TRAIN;
    }
    else if (auto9C70413B_val == ge_PRESET_Tunnel_Middle) {
        lv_groundSpawnPoint1Local = PointFromId(829254404);
        lv_groundSpawnPoint2Local = PointFromId(2132144301);
        lv_airSpawnPointLocal = PointFromId(1750503942);
        lv_escortPlayerLocal = gv_pLAYER_08_TRAIN;
    }
    else if (auto9C70413B_val == ge_PRESET_Tunnel_Bottom) {
        lv_escortPlayerLocal = gv_pLAYER_08_TRAIN;
    }
    else {
    }
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lv_escortPlayerLocal] = lv_groundSpawnPoint1Local;
    if ((gv_specialTrainEscorts_Spawn > 0)) {
        gv_specialTrainEscorts_Spawn -= 1;
        lv_specialEscortIterLocal = 1;
        for ( ; ( (autoEBB72DF1_ai >= 0 && lv_specialEscortIterLocal <= autoEBB72DF1_ae) || (autoEBB72DF1_ai < 0 && lv_specialEscortIterLocal >= autoEBB72DF1_ae) ) ; lv_specialEscortIterLocal += autoEBB72DF1_ai ) {
            if ((gv_specialTrainEscorts_Type[lv_specialEscortIterLocal] != null)) {
                UnitCreate(gv_specialTrainEscorts_Count[lv_specialEscortIterLocal], gv_specialTrainEscorts_Type[lv_specialEscortIterLocal], 0, lv_escortPlayerLocal, lv_groundSpawnPoint1Local, 270.0);
                UnitGroupAddUnitGroup(lv_trainEscortsNextToCarsLocal, UnitLastCreatedGroup());
            }

        }
    }

    autoF293C9C5_val = gv_currentWave;
    if (autoF293C9C5_val == 1) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (autoF293C9C5_val == 2) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (autoF293C9C5_val == 3) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (autoF293C9C5_val == 4) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else if (autoF293C9C5_val == 5) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else if (autoF293C9C5_val == 6) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (autoF293C9C5_val == 7) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else if (autoF293C9C5_val == 8) {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else {
        lv_resourceLevelLocal = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techLevelLocal = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_escortPlayerLocal, c_playerAny, lv_resourceLevelLocal, lv_techLevelLocal, lv_groundSpawnPoint1Local, true);
    UnitGroupAddUnitGroup(lv_trainEscortsNextToCarsLocal, libCOMI_gf_LastCreatedCoopAttackForce());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_escortPlayerLocal, c_playerAny, lv_resourceLevelLocal, lv_techLevelLocal, lv_groundSpawnPoint2Local, true);
    UnitGroupAddUnitGroup(lv_trainEscortsInFrontOfTrainLocal, libCOMI_gf_LastCreatedCoopAttackForce());
    UnitGroupAddUnitGroup(lv_airEscorts, UnitGroupFilter(null, c_playerAny, lv_trainEscortsInFrontOfTrainLocal, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_airEscorts, UnitGroupFilter(null, c_playerAny, lv_trainEscortsNextToCarsLocal, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(lv_trainEscortsInFrontOfTrainLocal, lv_airEscorts);
    UnitGroupRemoveUnitGroup(lv_trainEscortsNextToCarsLocal, lv_airEscorts);
    lv_carToEscortLocal = 1;
    lv_carToEscortDistanceLocal = 2.0;
    autoB948B665_g = lv_trainEscortsNextToCarsLocal;
    autoB948B665_u = UnitGroupCount(autoB948B665_g, c_unitCountAll);
    for (;; autoB948B665_u -= 1) {
        autoB948B665_var = UnitGroupUnitFromEnd(autoB948B665_g, autoB948B665_u);
        if (autoB948B665_var == null) { break; }
        if ((gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts < gv_c_MaxTrainEscortCount)) {
            gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts += 1;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escort = autoB948B665_var;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_unitType = UnitGetType(autoB948B665_var);
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escortCar = lv_carToEscortLocal;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarRadius = lv_carToEscortDistanceLocal;
            if ((ModF(gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts, 2.0) == 0.0)) {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 90.0;
                if ((PlayerRace(lv_escortPlayerLocal) == "Zerg")) {
                    gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle += RandomFixed(-15.0, 15.0);
                    lv_carToEscortDistanceLocal += RandomFixed(-1.0, 1.0);
                }

            }
            else {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 270.0;
                lv_carToEscortDistanceLocal += (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoB948B665_var), "Radius", gv_pLAYER_08_TRAIN)) + 1.0);
                if ((PlayerRace(lv_escortPlayerLocal) == "Zerg")) {
                    gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle += RandomFixed(-15.0, 15.0);
                    lv_carToEscortDistanceLocal += RandomFixed(-1.0, 1.0);
                }

                if ((lv_carToEscortDistanceLocal > 4.0)) {
                    lv_carToEscortDistanceLocal = 2.0;
                    if (lv_carToEscortLocal >= (gv_trainList[lv_trainIndexLocal].lv_numberOfCars - 4)) {
                        lv_carToEscortLocal = 1;
                    }
                    else {
                        lv_carToEscortLocal = lv_carToEscortLocal + 1;
                    }
                }

            }
        }
        else {
            AIAttackWaveUseUnit(lv_escortPlayerLocal, autoB948B665_var);
        }
    }
    gf_AssignEscortsToTrainFront(lv_trainIndexLocal, lv_trainEscortsInFrontOfTrainLocal, gv_trainList[lv_trainIndexLocal].lv_tunnel);
    autoAAD76022_g = lv_airEscorts;
    autoAAD76022_u = UnitGroupCount(autoAAD76022_g, c_unitCountAll);
    for (;; autoAAD76022_u -= 1) {
        autoAAD76022_var = UnitGroupUnitFromEnd(autoAAD76022_g, autoAAD76022_u);
        if (autoAAD76022_var == null) { break; }
        if ((gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts < gv_c_MaxTrainEscortCount)) {
            gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts += 1;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escort = autoAAD76022_var;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_unitType = UnitGetType(autoAAD76022_var);
            if ((ModF(gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts, 2.0) == 0.0)) {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 90.0;
            }
            else {
                gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarAngle = 270.0;
                lv_carToEscortDistanceLocal += (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoAAD76022_var), "Radius", gv_pLAYER_08_TRAIN)) + 1.0);
                if ((lv_carToEscortDistanceLocal > 3.0)) {
                    lv_carToEscortDistanceLocal = 2.0;
                    if (lv_carToEscortLocal >= (gv_trainList[lv_trainIndexLocal].lv_numberOfCars - 3)) {
                        lv_carToEscortLocal = 2;
                    }
                    else {
                        lv_carToEscortLocal = lv_carToEscortLocal + 1;
                    }
                }

            }
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_escortCar = lv_carToEscortLocal;
            gv_trainList[lv_trainIndexLocal].lv_escorts[gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts].lv_polarRadius = lv_carToEscortDistanceLocal;
        }
        else {
            AIAttackWaveUseUnit(lv_escortPlayerLocal, autoAAD76022_var);
        }
    }
    autoBA3FCAB9_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
    lv_iLocal = 1;
    for ( ; ( (autoBA3FCAB9_ai >= 0 && lv_iLocal <= autoBA3FCAB9_ae) || (autoBA3FCAB9_ai < 0 && lv_iLocal >= autoBA3FCAB9_ae) ) ; lv_iLocal += autoBA3FCAB9_ai ) {
        autoAF944FEA_val = gv_trainList[lv_trainIndexLocal].lv_tunnel;
        if (autoAF944FEA_val == ge_PRESET_Tunnel_Top) {
            gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar, 8);
        }
        else if (autoAF944FEA_val == ge_PRESET_Tunnel_Middle) {
            gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar, (gv_trainPathMidStart + 7));
        }
        else if (autoAF944FEA_val == ge_PRESET_Tunnel_Bottom) {
            gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition = gf_ExpectedPositionofTrainCar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar, (gv_trainPathBottomStart + 13));
        }
        else {
        }
    }
    lv_iLocal = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
    for ( ; ( (autoC8F894EA_ai >= 0 && lv_iLocal <= autoC8F894EA_ae) || (autoC8F894EA_ai < 0 && lv_iLocal >= autoC8F894EA_ae) ) ; lv_iLocal += autoC8F894EA_ai ) {
        if ((libCOMI_gf_UnitMoverExists(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_unitType, "Fly") == false)) {
            if ((ModI(lv_iLocal, 2) == 0)) {
                lv_escortSpawnPointLocal = lv_groundSpawnPoint1Local;
            }
            else {
                lv_escortSpawnPointLocal = lv_groundSpawnPoint2Local;
            }
        }
        else {
            lv_escortSpawnPointLocal = lv_airSpawnPointLocal;
        }
        UnitSetPosition(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, lv_escortSpawnPointLocal, false);
        UnitSetPropertyFixed(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, c_unitPropEnergyPercent, 100.0);
        AISetUnitScriptControlled(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, true);
        UnitIssueOrder(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarRadius, (PointGetFacing(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition) + gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarAngle))), c_orderQueueReplace);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        autoD117CAD1_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
        lv_iLocal = 1;
        for ( ; ( (autoD117CAD1_ai >= 0 && lv_iLocal <= autoD117CAD1_ae) || (autoD117CAD1_ai < 0 && lv_iLocal >= autoD117CAD1_ae) ) ; lv_iLocal += autoD117CAD1_ai ) {
            UnitIssueOrder(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarRadius, (PointGetFacing(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_waitPosition) + gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarAngle))), c_orderQueueReplace);
        }
        if ((UnitIsAlive(gv_trainList[lv_trainIndexLocal].lv_trainCars[1]) == false)) {
            return true;
        }

        if ((RegionContainsPoint(RegionCircle(gv_trainList[lv_trainIndexLocal].lv_escorts[1].lv_waitPosition, 2.0), UnitGetPosition(gv_trainList[lv_trainIndexLocal].lv_trainCars[1])) == true)) {
            auto280ABE1A_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfCars;
            lv_iLocal = 1;
            for ( ; ( (auto280ABE1A_ai >= 0 && lv_iLocal <= auto280ABE1A_ae) || (auto280ABE1A_ai < 0 && lv_iLocal >= auto280ABE1A_ae) ) ; lv_iLocal += auto280ABE1A_ai ) {
                UnitGroupAdd(lv_escortGroupLocal, gv_trainList[lv_trainIndexLocal].lv_trainCars[lv_iLocal]);
            }
            AIAttackWaveSetTargetEscortNL(lv_escortPlayerLocal, lv_escortGroupLocal, 1);
            auto09363C53_ae = gv_trainList[lv_trainIndexLocal].lv_numberOfEscorts;
            lv_iLocal = 1;
            for ( ; ( (auto09363C53_ai >= 0 && lv_iLocal <= auto09363C53_ae) || (auto09363C53_ai < 0 && lv_iLocal >= auto09363C53_ae) ) ; lv_iLocal += auto09363C53_ai ) {
                if ((UnitIsAlive(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort) == true)) {
                    AISetUnitScriptControlled(gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, false);
                    AIAttackWaveAddEscortUnit(lv_escortPlayerLocal, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escort, gv_trainList[lv_trainIndexLocal].lv_trainCars[gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_escortCar], gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarRadius, gv_trainList[lv_trainIndexLocal].lv_escorts[lv_iLocal].lv_polarAngle);
                    lv_escortCountLocal += 1;
                }

            }
            if ((lv_escortCountLocal > 0)) {
                AIAttackWaveSend(lv_escortPlayerLocal, 0, false);
                gv_trainList[lv_trainIndexLocal].lv_escortWave = WaveLastCreated();
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEscorts_Init () {
    gt_SpawnEscorts = TriggerCreate("gt_SpawnEscorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Movement
//--------------------------------------------------------------------------------------------------
bool gt_TrainMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    unitgroup auto5DB9EA00_g;
    int auto5DB9EA00_u;
    unit auto5DB9EA00_var;
    unitgroup auto6436095B_g;
    int auto6436095B_u;
    unit auto6436095B_var;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DB9EA00_g = UnitGroup(null, gv_pLAYER_08_TRAIN, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5DB9EA00_u = UnitGroupCount(auto5DB9EA00_g, c_unitCountAll);
    for (;; auto5DB9EA00_u -= 1) {
        auto5DB9EA00_var = UnitGroupUnitFromEnd(auto5DB9EA00_g, auto5DB9EA00_u);
        if (auto5DB9EA00_var == null) { break; }
        if (((UnitGetType(auto5DB9EA00_var) == "Caboose") || (UnitGetType(auto5DB9EA00_var) == "FreightCar") || (UnitGetType(auto5DB9EA00_var) == "TarsonisEngine") || (UnitGetType(auto5DB9EA00_var) == "TarsonisEngineFast"))) {
            UnitGroupAdd(lv_trainCars, auto5DB9EA00_var);
        }

    }
    auto6436095B_g = lv_trainCars;
    auto6436095B_u = UnitGroupCount(auto6436095B_g, c_unitCountAll);
    for (;; auto6436095B_u -= 1) {
        auto6436095B_var = UnitGroupUnitFromEnd(auto6436095B_g, auto6436095B_u);
        if (auto6436095B_var == null) { break; }
        if ((RegionContainsPoint(RegionCircle(gv_trainPath[FixedToInt(UnitGetCustomValue(auto6436095B_var, 0))], 0.5), UnitGetPosition(auto6436095B_var)) == true)) {
            if ((FixedToInt(UnitGetCustomValue(auto6436095B_var, 0)) < 255)) {
                UnitSetCustomValue(auto6436095B_var, 0, (UnitGetCustomValue(auto6436095B_var, 0) + 1.0));
            }

        }

        UnitIssueOrder(auto6436095B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto6436095B_var), 1.0, AngleBetweenPoints(UnitGetPosition(auto6436095B_var), gv_trainPath[FixedToInt(UnitGetCustomValue(auto6436095B_var, 0))]))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainMovement_Init () {
    gt_TrainMovement = TriggerCreate("gt_TrainMovement_Func");
    TriggerAddEventTimePeriodic(gt_TrainMovement, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Despawn
//--------------------------------------------------------------------------------------------------
bool gt_TrainDespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trainIndex;
    int lv_trainIter;
    int lv_carIter;
    bool lv_carFound;

    // Automatic Variable Declarations
    const int auto652736BF_ae = gv_c_MaxTrainCount;
    const int auto652736BF_ai = 1;
    int auto63052551_ae;
    const int auto63052551_ai = 1;
    int auto01E90C09_ae;
    const int auto01E90C09_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_08_TRAIN))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Caboose") || (UnitGetType(EventUnit()) == "FreightCar") || (UnitGetType(EventUnit()) == "TarsonisEngine") || (UnitGetType(EventUnit()) == "TarsonisEngineFast")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainIter = 1;
    for ( ; ( (auto652736BF_ai >= 0 && lv_trainIter <= auto652736BF_ae) || (auto652736BF_ai < 0 && lv_trainIter >= auto652736BF_ae) ) ; lv_trainIter += auto652736BF_ai ) {
        auto63052551_ae = gv_trainList[lv_trainIter].lv_lastCar;
        lv_carIter = 1;
        for ( ; ( (auto63052551_ai >= 0 && lv_carIter <= auto63052551_ae) || (auto63052551_ai < 0 && lv_carIter >= auto63052551_ae) ) ; lv_carIter += auto63052551_ai ) {
            if ((gv_trainList[lv_trainIter].lv_trainCars[lv_carIter] == EventUnit())) {
                if ((gv_trainList[lv_trainIter].lv_tunnel == ge_PRESET_Tunnel_Top) && (EventUnitRegion() == RegionFromId(22))) {
                    lv_trainIndex = lv_trainIter;
                    lv_carFound = true;
                    break;
                }

                if ((gv_trainList[lv_trainIter].lv_tunnel == ge_PRESET_Tunnel_Middle) && (EventUnitRegion() == RegionFromId(35))) {
                    lv_trainIndex = lv_trainIter;
                    lv_carFound = true;
                    break;
                }

            }

        }
        if ((lv_carFound == true)) {
            break;
        }

    }
    if ((lv_carFound == false)) {
        return true;
    }

    gv_trainPathInUse[gv_trainList[lv_trainIndex].lv_tunnel] = false;
    TriggerExecute(gt_DeactivateChargers, true, false);
    if ((UnitGetType(EventUnit()) == "Caboose")) {
        gv_bonusActive[lv_trainIndex] = false;
        gv_trainList[lv_trainIndex].lv_trainStatus = ge_PRESET_TrainStatus_Missed;
        TriggerExecute(gt_TrainSpawnedQ4, true, false);
        if ((gv_currentWave == 2) && (gv_objectiveDestroyTrainsNumDestroyed == 0)) {
            TriggerExecute(gt_ObjectiveDestroyTrainsFailed, true, false);
        }

    }

    UnitGroupRemove(gv_trainList[lv_trainIndex].lv_trainCarsGroup, EventUnit());
    UnitBehaviorRemove(EventUnit(), "ConjoinedTrainCar", 1);
    UnitRemove(EventUnit());
    if ((lv_trainIndex > 0)) {
        auto01E90C09_ae = gv_trainList[lv_trainIndex].lv_lastCar;
        lv_trainIter = 2;
        for ( ; ( (auto01E90C09_ai >= 0 && lv_trainIter <= auto01E90C09_ae) || (auto01E90C09_ai < 0 && lv_trainIter >= auto01E90C09_ae) ) ; lv_trainIter += auto01E90C09_ai ) {
            gv_trainList[lv_trainIndex].lv_trainCars[(lv_trainIter - 1)] = gv_trainList[lv_trainIndex].lv_trainCars[lv_trainIter];
        }
        gv_trainList[lv_trainIndex].lv_lastCar -= 1;
        if ((UnitIsAlive(gv_trainList[gv_trainBossBarIndex].lv_trainCars[1]) == false)) {
            gv_trainList[lv_trainIndex].lv_trainAlive = false;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainDespawn_Init () {
    gt_TrainDespawn = TriggerCreate("gt_TrainDespawn_Func");
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_TrainDespawn, null, RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Car Damage Animation Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainCarDamageAnimationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainCarToAnimate_LOCAL;
    fixed lv_trainCarToAnimateBreakPoint_LOCAL;

    // Automatic Variable Declarations
    int autoB27FAB03_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainCarToAnimate_LOCAL = gv_trainCarToAnimate;
    lv_trainCarToAnimateBreakPoint_LOCAL = gv_trainCarToAnimateBreakPoint;
    while (true) {
        Wait(1.0, c_timeAI);
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }

        if ((UnitGetPropertyFixed(lv_trainCarToAnimate_LOCAL, c_unitPropLifePercent, c_unitPropCurrent) <= lv_trainCarToAnimateBreakPoint_LOCAL)) {
            break;
        }

    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    SoundPlayOnUnit(SoundLink("SiegeTank_Explode", -1), PlayerGroupAll(), lv_trainCarToAnimate_LOCAL, 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_trainCarToAnimate_LOCAL) == false)) {
            return true;
        }

        autoB27FAB03_val = RandomInt(1, 4);
        if (autoB27FAB03_val == 1) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.167, c_timeGame);
        }
        else if (autoB27FAB03_val == 2) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 01", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.333, c_timeGame);
        }
        else if (autoB27FAB03_val == 3) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 02", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(2.0, c_timeGame);
        }
        else if (autoB27FAB03_val == 4) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_trainCarToAnimate_LOCAL), c_animNameDefault, "Stand Work 03", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(1.5, c_timeGame);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainCarDamageAnimationController_Init () {
    gt_TrainCarDamageAnimationController = TriggerCreate("gt_TrainCarDamageAnimationController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Chargers
//--------------------------------------------------------------------------------------------------
bool gt_InitializeChargers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    point lv_chargerLocation;

    // Automatic Variable Declarations
    const int auto56235D4D_ae = 1;
    const int auto56235D4D_ai = -1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i += 1;
    lv_chargerLocation = PointFromName(("Train Charger " + IntToString(lv_i)));
    while ((lv_chargerLocation != null)) {
        gf_InitializeCharger(lv_chargerLocation, ge_PRESET_Tunnel_Top, lv_i);
        lv_i += 1;
        lv_chargerLocation = PointFromName(("Train Charger " + IntToString(lv_i)));
    }
    gv_numberOfChargers = (lv_i + 1);
    lv_i = gv_numberOfChargers;
    for ( ; ( (auto56235D4D_ai >= 0 && lv_i <= auto56235D4D_ae) || (auto56235D4D_ai < 0 && lv_i >= auto56235D4D_ae) ) ; lv_i += auto56235D4D_ai ) {
        lv_chargerLocation = PointFromName(("Train Charger " + IntToString(lv_i)));
        gf_InitializeCharger(lv_chargerLocation, ge_PRESET_Tunnel_Middle, lv_i);
    }
    TriggerExecute(gt_ChargePulseController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeChargers_Init () {
    gt_InitializeChargers = TriggerCreate("gt_InitializeChargers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Station Controller
//--------------------------------------------------------------------------------------------------
bool gt_TrainStationController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto0D2F6301_ae;
    const int auto0D2F6301_ai = 1;
    int auto8C4C1339_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        auto0D2F6301_ae = gv_numberOfTrainStations;
        lv_i = 1;
        for ( ; ( (auto0D2F6301_ai >= 0 && lv_i <= auto0D2F6301_ae) || (auto0D2F6301_ai < 0 && lv_i >= auto0D2F6301_ae) ) ; lv_i += auto0D2F6301_ai ) {
            auto8C4C1339_val = gv_trainStations[lv_i].lv_state;
            if (auto8C4C1339_val == ge_PRESET_TrainStationState_Inactive) {
                if (((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                    gv_currentTrainStationGlobal = lv_i;
                    TriggerExecute(gt_ActivateStation, true, false);
                }

            }
            else if (auto8C4C1339_val == ge_PRESET_TrainStationState_Active) {
                if ((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainStations[lv_i].lv_position, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    gv_currentTrainStationGlobal = lv_i;
                    if (true) {
                        TriggerExecute(gt_DeactivateStation, true, false);
                    }

                }

            }
            else {
            }
        }
        if ((libCOMI_gf_GameIsOver() == true)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainStationController_Init () {
    gt_TrainStationController = TriggerCreate("gt_TrainStationController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charge Pulse Controller
//--------------------------------------------------------------------------------------------------
bool gt_ChargePulseController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto9CEA9CB0_ae;
    const int auto9CEA9CB0_ai = 1;
    int autoF306EB37_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        auto9CEA9CB0_ae = gv_numberOfChargers;
        lv_i = 1;
        for ( ; ( (auto9CEA9CB0_ai >= 0 && lv_i <= auto9CEA9CB0_ae) || (auto9CEA9CB0_ai < 0 && lv_i >= auto9CEA9CB0_ae) ) ; lv_i += auto9CEA9CB0_ai ) {
            autoF306EB37_val = gv_chargers[lv_i].lv_state;
            if (autoF306EB37_val == ge_PRESET_ChargeState_Active) {
                if (((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                    gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Pulsing;
                    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Spell", c_animFlagPlayForever, c_animTimeDefault);
                }

            }
            else if (autoF306EB37_val == ge_PRESET_ChargeState_Pulsing) {
                if ((UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("TarsonisEngineFast", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FreightCar", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Caboose", gv_pLAYER_08_TRAIN, RegionCircle(gv_chargers[lv_i].lv_position, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    gv_chargers[lv_i].lv_state = ge_PRESET_ChargeState_Active;
                    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_i].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                }

            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChargePulseController_Init () {
    gt_ChargePulseController = TriggerCreate("gt_ChargePulseController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Chargers
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateChargers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chargerIter;

    // Automatic Variable Declarations
    int autoEC7EE27A_ae;
    const int autoEC7EE27A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC7EE27A_ae = gv_numberOfChargers;
    lv_chargerIter = 1;
    for ( ; ( (autoEC7EE27A_ai >= 0 && lv_chargerIter <= autoEC7EE27A_ae) || (autoEC7EE27A_ai < 0 && lv_chargerIter >= autoEC7EE27A_ae) ) ; lv_chargerIter += autoEC7EE27A_ai ) {
        libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_chargerIter].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
        gv_chargers[lv_chargerIter].lv_state = ge_PRESET_ChargeState_Inactive;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateChargers_Init () {
    gt_DeactivateChargers = TriggerCreate("gt_DeactivateChargers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Station
//--------------------------------------------------------------------------------------------------
bool gt_ActivateStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentTrainStationLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTrainStationLocal = gv_currentTrainStationGlobal;
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Transitioning;
    Wait(1.0, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Active;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateStation_Init () {
    gt_ActivateStation = TriggerCreate("gt_ActivateStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Station
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentTrainStationLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTrainStationLocal = gv_currentTrainStationGlobal;
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Transitioning;
    Wait(1.0, c_timeAI);
    libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_trainStations[lv_currentTrainStationLocal].lv_position, 2.0), "TarsonisStation", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    gv_trainStations[lv_currentTrainStationLocal].lv_state = ge_PRESET_TrainStationState_Inactive;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateStation_Init () {
    gt_DeactivateStation = TriggerCreate("gt_DeactivateStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawn Animations
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnAnimations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int[16] lv_trainsThatAreSpawningLocal;
    int lv_numberOfTrainsThatAreSpawningLocal;
    bool lv_topLocal;
    bool lv_middleLocal;
    bool lv_bottomLocal;

    // Automatic Variable Declarations
    const int auto6918AABC_ae = gv_c_MaxTrainCount;
    const int auto6918AABC_ai = 1;
    int auto76A2919F_ae;
    const int auto76A2919F_ai = 1;
    int autoD45587AE_val;
    int auto1020F798_ae;
    const int auto1020F798_ai = 1;
    int autoD066ABF5_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iLocal = 1;
    for ( ; ( (auto6918AABC_ai >= 0 && lv_iLocal <= auto6918AABC_ae) || (auto6918AABC_ai < 0 && lv_iLocal >= auto6918AABC_ae) ) ; lv_iLocal += auto6918AABC_ai ) {
        if ((gv_trainList[lv_iLocal].lv_spawnWave == gv_currentWave)) {
            lv_numberOfTrainsThatAreSpawningLocal += 1;
            lv_trainsThatAreSpawningLocal[lv_numberOfTrainsThatAreSpawningLocal] = lv_iLocal;
        }

    }
    auto76A2919F_ae = lv_numberOfTrainsThatAreSpawningLocal;
    lv_iLocal = 1;
    for ( ; ( (auto76A2919F_ai >= 0 && lv_iLocal <= auto76A2919F_ae) || (auto76A2919F_ai < 0 && lv_iLocal >= auto76A2919F_ae) ) ; lv_iLocal += auto76A2919F_ai ) {
        autoD45587AE_val = gv_trainList[lv_trainsThatAreSpawningLocal[lv_iLocal]].lv_tunnel;
        if (autoD45587AE_val == ge_PRESET_Tunnel_Top) {
            lv_topLocal = true;
        }
        else if (autoD45587AE_val == ge_PRESET_Tunnel_Middle) {
            lv_middleLocal = true;
        }
        else if (autoD45587AE_val == ge_PRESET_Tunnel_Bottom) {
            lv_bottomLocal = true;
        }
        else {
        }
    }
    auto1020F798_ae = gv_numberOfChargers;
    lv_iLocal = 1;
    for ( ; ( (auto1020F798_ai >= 0 && lv_iLocal <= auto1020F798_ae) || (auto1020F798_ai < 0 && lv_iLocal >= auto1020F798_ae) ) ; lv_iLocal += auto1020F798_ai ) {
        autoD066ABF5_val = gv_chargers[lv_iLocal].lv_tunnel;
        if (autoD066ABF5_val == ge_PRESET_Tunnel_Top) {
            if ((lv_topLocal == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else if (autoD066ABF5_val == ge_PRESET_Tunnel_Middle) {
            if ((lv_middleLocal == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else if (autoD066ABF5_val == ge_PRESET_Tunnel_Bottom) {
            if ((lv_bottomLocal == true)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Active;
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(RegionCircle(gv_chargers[lv_iLocal].lv_position, 1.0), "TarsonisCharger", c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
                gv_chargers[lv_iLocal].lv_state = ge_PRESET_ChargeState_Inactive;
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnAnimations_Init () {
    gt_TrainSpawnAnimations = TriggerCreate("gt_TrainSpawnAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Bottom Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealBottomLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int lv_currentPingPointLocal;

    // Automatic Variable Declarations
    int auto9FB87380_ae;
    const int auto9FB87380_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPointLocal = 0;
    auto9FB87380_ae = gv_numberOfTrainPathPoints;
    lv_iLocal = gv_trainPathBottomStart;
    for ( ; ( (auto9FB87380_ai >= 0 && lv_iLocal <= auto9FB87380_ae) || (auto9FB87380_ai < 0 && lv_iLocal >= auto9FB87380_ae) ) ; lv_iLocal += auto9FB87380_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPointLocal], gv_trainPath[lv_iLocal]) > 4.0)) {
            lv_currentPingPointLocal = lv_iLocal;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPointLocal], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealBottomLane_Init () {
    gt_RevealBottomLane = TriggerCreate("gt_RevealBottomLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Middle Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealMiddleLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int lv_currentPingPointLocal;

    // Automatic Variable Declarations
    int auto48CC0884_ae;
    const int auto48CC0884_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPointLocal = 0;
    auto48CC0884_ae = (gv_trainPathBottomStart - 1);
    lv_iLocal = gv_trainPathMidStart;
    for ( ; ( (auto48CC0884_ai >= 0 && lv_iLocal <= auto48CC0884_ae) || (auto48CC0884_ai < 0 && lv_iLocal >= auto48CC0884_ae) ) ; lv_iLocal += auto48CC0884_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPointLocal], gv_trainPath[lv_iLocal]) > 4.0)) {
            lv_currentPingPointLocal = lv_iLocal;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPointLocal], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealMiddleLane_Init () {
    gt_RevealMiddleLane = TriggerCreate("gt_RevealMiddleLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Top Lane
//--------------------------------------------------------------------------------------------------
bool gt_RevealTopLane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    int lv_currentPingPointLocal;

    // Automatic Variable Declarations
    int auto338848B7_ae;
    const int auto338848B7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPingPointLocal = 0;
    auto338848B7_ae = (gv_trainPathMidStart - 1);
    lv_iLocal = 1;
    for ( ; ( (auto338848B7_ai >= 0 && lv_iLocal <= auto338848B7_ae) || (auto338848B7_ai < 0 && lv_iLocal >= auto338848B7_ae) ) ; lv_iLocal += auto338848B7_ai ) {
        if ((DistanceBetweenPoints(gv_trainPath[lv_currentPingPointLocal], gv_trainPath[lv_iLocal]) > 4.0)) {
            lv_currentPingPointLocal = lv_iLocal;
            VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            VisExploreArea(gv_pLAYER_02_USER, RegionCircle(gv_trainPath[lv_currentPingPointLocal], 12.0), true, false);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingArrow", gv_trainPath[lv_currentPingPointLocal], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0);
            PingSetScale(PingLastCreated(), 0.65);
            Wait(0.1, c_timeAI);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealTopLane_Init () {
    gt_RevealTopLane = TriggerCreate("gt_RevealTopLane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_InitializeBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_launchTrainTimers[ge_BonusObjectives_TrainEvent01], (8.0 * 60.0), false, c_timeGame);
    TimerStart(gv_launchTrainTimers[ge_BonusObjectives_TrainEvent02], (15.0 * 60.0), false, c_timeGame);
    TriggerExecute(gt_InitializeChargers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeBonusObjective_Init () {
    gt_InitializeBonusObjective = TriggerCreate("gt_InitializeBonusObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 01
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentWave = 1;
    TriggerExecute(gt_TrainSpawnedQ3, true, false);
    Wait(10.0, c_timeGame);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Top, ge_PRESET_TrainType_Soloable, gv_currentWave);
    TriggerExecute(gt_ObjectiveDestroyTrainsCreate, true, false);
    gv_bonusActive[gv_currentWave] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent01_Init () {
    gt_TrainEvent01 = TriggerCreate("gt_TrainEvent01_Func");
    TriggerAddEventTimer(gt_TrainEvent01, gv_launchTrainTimers[ge_BonusObjectives_TrainEvent01]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Event 02
//--------------------------------------------------------------------------------------------------
bool gt_TrainEvent02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IncreaseTrainLife();
    gv_currentWave = 2;
    TriggerExecute(gt_TrainSpawnedQ5, true, false);
    Wait(10.0, c_timeGame);
    gf_SpawnaTrain(ge_PRESET_Tunnel_Middle, ge_PRESET_TrainType_Soloable, gv_currentWave);
    TriggerExecute(gt_TrainSpawnedQ, true, false);
    TriggerExecute(gt_ObjectiveDestroyTrainsCreate, true, false);
    gv_bonusActive[gv_currentWave] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEvent02_Init () {
    gt_TrainEvent02 = TriggerCreate("gt_TrainEvent02_Func");
    TriggerAddEventTimer(gt_TrainEvent02, gv_launchTrainTimers[ge_BonusObjectives_TrainEvent02]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoebiusEmployee_VOEasterEgg
//--------------------------------------------------------------------------------------------------
bool gt_MoebiusEmployee_VOEasterEgg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((RandomInt(1, 100) <= 50)) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_moebiusMale, true, false, "Talk"), c_invalidPortraitId, SoundLink("acObj_Scientist1_2234", -1), 0.0, c_transmissionDurationAdd, true);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_moebiusFemale, true, false, "Talk"), c_invalidPortraitId, SoundLink("acObj_Scientist2_2235", -1), 0.0, c_transmissionDurationAdd, true);
    }
    else {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_moebiusFemale, true, false, "Talk"), c_invalidPortraitId, SoundLink("acObj_Scientist2_2236", -1), 0.0, c_transmissionDurationAdd, true);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromUnit(gv_moebiusMale, true, false, "Talk"), c_invalidPortraitId, SoundLink("acObj_Scientist1_2237", -1), 0.0, c_transmissionDurationAdd, true);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoebiusEmployee_VOEasterEgg_Init () {
    gt_MoebiusEmployee_VOEasterEgg = TriggerCreate("gt_MoebiusEmployee_VOEasterEgg_Func");
    TriggerAddEventUnitSelected(gt_MoebiusEmployee_VOEasterEgg, UnitRefFromVariable("gv_moebiusMale"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_MoebiusEmployee_VOEasterEgg, UnitRefFromVariable("gv_moebiusFemale"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Reset Transmissions for Next Round
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionResetTransmissionsforNextRound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_transmission_MostPartsCollected_Played = false;
    gv_transmission_HalfPartsCollected_Played = false;
    gv_vO_archangel_breaching_blocked = false;
    gv_vO_proximity_warning_blocked = false;
    TriggerEnable(gt_TransmissionTwoMinuteLeftQ, true);
    TriggerEnable(gt_TransmissionFourMinutesLeftQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionResetTransmissionsforNextRound_Init () {
    gt_TransmissionResetTransmissionsforNextRound = TriggerCreate("gt_TransmissionResetTransmissionsforNextRound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Archangel Moving Out (after repair) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionArchangelMovingOutafterrepairQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("AngelMovePnP", true, -1);
    libHots_gf_PlaySoundLinkasMusic(SoundLink("AC_Music_PartParcel_Balius_MovingOut", -1), false, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionArchangelMovingOutafterrepairQ_Init () {
    gt_TransmissionArchangelMovingOutafterrepairQ = TriggerCreate("gt_TransmissionArchangelMovingOutafterrepairQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Archangel Preparing to Moving Out (after repair) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionArchangelPreparingtoMovingOutafterrepairQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("AngelPreparePnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionArchangelPreparingtoMovingOutafterrepairQ_Init () {
    gt_TransmissionArchangelPreparingtoMovingOutafterrepairQ = TriggerCreate("gt_TransmissionArchangelPreparingtoMovingOutafterrepairQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Boss Engaged Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBossEngagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("AngelFightStartPnP", true, -1);
    libHots_gf_PlaySoundLinkasMusic(SoundLink("AC_Music_PartParcel_HybridBossFight", -1), true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBossEngagedQ_Init () {
    gt_TransmissionBossEngagedQ = TriggerCreate("gt_TransmissionBossEngagedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Archangel Initiate Bombin Run Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionArchangelInitiateBombinRunQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("AngelBombStartPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionArchangelInitiateBombinRunQ_Init () {
    gt_TransmissionArchangelInitiateBombinRunQ = TriggerCreate("gt_TransmissionArchangelInitiateBombinRunQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Returning for Repairs (Shield Destroyed) Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionReturningforRepairsShieldDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("AngelBombEndPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionReturningforRepairsShieldDestroyedQ_Init () {
    gt_TransmissionReturningforRepairsShieldDestroyedQ = TriggerCreate("gt_TransmissionReturningforRepairsShieldDestroyedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Boss Encounter Archangel Defeated Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBossEncounterArchangelDefeatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("AngelFightLosePnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBossEncounterArchangelDefeatedQ_Init () {
    gt_TransmissionBossEncounterArchangelDefeatedQ = TriggerCreate("gt_TransmissionBossEncounterArchangelDefeatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Boss Defeated Return Home Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBossDefeatedReturnHomeQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("BossDefeatAngelPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBossDefeatedReturnHomeQ_Init () {
    gt_TransmissionBossDefeatedReturnHomeQ = TriggerCreate("gt_TransmissionBossDefeatedReturnHomeQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Boss Defeated Archangel Defeated Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBossDefeatedArchangelDefeatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeReal);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("BossDefeatNoAngelPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBossDefeatedArchangelDefeatedQ_Init () {
    gt_TransmissionBossDefeatedArchangelDefeatedQ = TriggerCreate("gt_TransmissionBossDefeatedArchangelDefeatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Boss Released Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridBossReleasedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEB0BF200_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoEB0BF200_val = RandomInt(1, 3);
    if (autoEB0BF200_val == 1) {
        SoundPlayForPlayer(SoundLink("Hybrid_Ready", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoEB0BF200_val == 2) {
        SoundPlayForPlayer(SoundLink("Hybrid_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(SoundLink("Hybrid_Yes", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    Wait(3.0, c_timeGame);
    gf_CreateSpeechBubble(gv_boss[gv_bossesSlain]);
    libCOMI_gf_SendMissionTransmission("HybridReleasePnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridBossReleasedQ_Init () {
    gt_TransmissionHybridBossReleasedQ = TriggerCreate("gt_TransmissionHybridBossReleasedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Boss Defeated Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridBossDefeatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    SoundPlayForPlayer(SoundLink("Hybrid_Help", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_boss[gv_bossesSlain]);
    libCOMI_gf_SendMissionTransmission("HybridDeathPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridBossDefeatedQ_Init () {
    gt_TransmissionHybridBossDefeatedQ = TriggerCreate("gt_TransmissionHybridBossDefeatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Boss Taunt Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridBossTauntQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_boss[gv_bossesSlain]);
    libCOMI_gf_SendMissionTransmission("HybridTauntPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridBossTauntQ_Init () {
    gt_TransmissionHybridBossTauntQ = TriggerCreate("gt_TransmissionHybridBossTauntQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Timer Update
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTimerUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_preventBossAwaken) <= 60.0)) {
        TriggerExecute(gt_TransmissionOneMinuteLeftQ, true, false);
    }
    else if ((TimerGetRemaining(gv_preventBossAwaken) <= 120.0) && (TimerGetRemaining(gv_preventBossAwaken) >= 75.0)) {
        TriggerExecute(gt_TransmissionTwoMinuteLeftQ, true, false);
    }
    else if ((TimerGetRemaining(gv_preventBossAwaken) <= 240.0) && (TimerGetRemaining(gv_preventBossAwaken) >= 135.0)) {
        TriggerExecute(gt_TransmissionFourMinutesLeftQ, true, false);
    }
    else if ((TimerGetRemaining(gv_preventBossAwaken) <= 360.0) && (TimerGetRemaining(gv_preventBossAwaken) >= 255.0)) {
        TriggerExecute(gt_TransmissionSixMinutesLeftQ, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTimerUpdate_Init () {
    gt_TransmissionTimerUpdate = TriggerCreate("gt_TransmissionTimerUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Six Minutes Left Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSixMinutesLeftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("FailReminderPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSixMinutesLeftQ_Init () {
    gt_TransmissionSixMinutesLeftQ = TriggerCreate("gt_TransmissionSixMinutesLeftQ_Func");
    TriggerEnable(gt_TransmissionSixMinutesLeftQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Four Minutes Left Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFourMinutesLeftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_halfPartsWarningCDTimer) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("FailWarningPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFourMinutesLeftQ_Init () {
    gt_TransmissionFourMinutesLeftQ = TriggerCreate("gt_TransmissionFourMinutesLeftQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Two Minute Left Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTwoMinuteLeftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_halfPartsWarningCDTimer) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TransmissionFourMinutesLeftQ, false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("FailImminentPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTwoMinuteLeftQ_Init () {
    gt_TransmissionTwoMinuteLeftQ = TriggerCreate("gt_TransmissionTwoMinuteLeftQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - One Minute Left Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionOneMinuteLeftQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("FailImminentPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionOneMinuteLeftQ_Init () {
    gt_TransmissionOneMinuteLeftQ = TriggerCreate("gt_TransmissionOneMinuteLeftQ_Func");
    TriggerEnable(gt_TransmissionOneMinuteLeftQ, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Archangel Parts Collected
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionArchangelPartsCollected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_archangelCurrentPartsPool >= gv_c_ArchangelPartsRequired)) {
        TriggerExecute(gt_TransmissionPartCollectingFinishedQ, true, false);
        return true;
    }

    if ((gv_transmission_HalfPartsCollected_Played == false) && (gv_archangelCurrentPartsPool >= 35)) {
        gv_transmission_HalfPartsCollected_Played = true;
        TriggerExecute(gt_TransmissionHalfPartsCollectedQ, true, false);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionArchangelPartsCollected_Init () {
    gt_TransmissionArchangelPartsCollected = TriggerCreate("gt_TransmissionArchangelPartsCollected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Start Parts Collecting Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionStartPartsCollectingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("PartsStartPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionStartPartsCollectingQ_Init () {
    gt_TransmissionStartPartsCollectingQ = TriggerCreate("gt_TransmissionStartPartsCollectingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Half Parts Collected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHalfPartsCollectedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_halfPartsWarningCDTimer, 15.0, false, c_timeGame);
    TimerPause(gv_halfPartsWarningCDTimer, true);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("PartsHalfPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerPause(gv_halfPartsWarningCDTimer, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHalfPartsCollectedQ_Init () {
    gt_TransmissionHalfPartsCollectedQ = TriggerCreate("gt_TransmissionHalfPartsCollectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Almost All Parts Collected Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionAlmostAllPartsCollectedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("PartsMostPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionAlmostAllPartsCollectedQ_Init () {
    gt_TransmissionAlmostAllPartsCollectedQ = TriggerCreate("gt_TransmissionAlmostAllPartsCollectedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Part Collecting Finished Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPartCollectingFinishedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("PartsAllPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPartCollectingFinishedQ_Init () {
    gt_TransmissionPartCollectingFinishedQ = TriggerCreate("gt_TransmissionPartCollectingFinishedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train First Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto70A9D1DD_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    auto70A9D1DD_val = RandomInt(0, 2);
    if (auto70A9D1DD_val == 0) {
        gf_CreateSpeechBubble(gv_archangel);
        libCOMI_gf_SendMissionTransmission("BonusIntroFirstPnP", true, -1);
    }
    else if (auto70A9D1DD_val == 1) {
        gf_CreateSpeechBubble(gv_archangel);
        libCOMI_gf_SendMissionTransmission("BonusIntroSecondPnP", true, -1);
    }
    else {
        gf_CreateSpeechBubble(gv_archangel);
        libCOMI_gf_SendMissionTransmission("BonusIntroThirdPnP", true, -1);
    }
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ3_Init () {
    gt_TrainSpawnedQ3 = TriggerCreate("gt_TrainSpawnedQ3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Second Incoming Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("BonusSpawnSecondPnP", true, -1);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ5_Init () {
    gt_TrainSpawnedQ5 = TriggerCreate("gt_TrainSpawnedQ5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Spawned Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("BonusSpawnPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(15.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ_Init () {
    gt_TrainSpawnedQ = TriggerCreate("gt_TrainSpawnedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_objectiveDestroyTrainsNumDestroyed == gv_objectiveDestroyTrainsMAXTRAINS)) {
        gf_CreateSpeechBubble(gv_archangel);
        libCOMI_gf_SendMissionTransmission("BonusCompletePnP", true, -1);
    }
    else {
        gf_CreateSpeechBubble(gv_archangel);
        libCOMI_gf_SendMissionTransmission("BonusDestroyedPnP", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ2_Init () {
    gt_TrainSpawnedQ2 = TriggerCreate("gt_TrainSpawnedQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escaping Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainEscapingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transmissionTrainLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((((gv_currentWave == 1) && (UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainPath[(gv_trainPathMidStart - 10)], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) || ((gv_currentWave == 2) && (UnitGroupCount(UnitGroup("TarsonisEngine", gv_pLAYER_08_TRAIN, RegionCircle(gv_trainPath[(gv_trainPathBottomStart - 10)], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_transmissionTrainLocal = UnitGroupUnit(UnitGroup("TarsonisEngine", gv_pLAYER_08_TRAIN, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_transmissionTrainLocal), 6.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeAI);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_PullsOut_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_2D_Train_Depart_Horn_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CreateSpeechBubble(gv_archangel);
    libCOMI_gf_SendMissionTransmission("BonusFailWarningPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainEscapingQ_Init () {
    gt_TrainEscapingQ = TriggerCreate("gt_TrainEscapingQ_Func");
    TriggerAddEventTimePeriodic(gt_TrainEscapingQ, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Train Escapes Q
//--------------------------------------------------------------------------------------------------
bool gt_TrainSpawnedQ4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    gf_CreateSpeechBubble(gv_archangel);
    SoundPlayForPlayer(SoundLink("AC_Stinger_2D_TrainEscapes_PartParcel", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SendMissionTransmission("BonusFailPnP", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainSpawnedQ4_Init () {
    gt_TrainSpawnedQ4 = TriggerCreate("gt_TrainSpawnedQ4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatPnP", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FF09D24C"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(UnitGetPosition(gv_boss[gv_bossesSlain]), 1.5);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventTimer(gt_DefeatPrimaryObjectiveFailed, gv_preventBossAwaken);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyBossesComplete, true, true);
    libHots_gf_PlaySoundLinkasMusic(SoundLink("AC_Music_PartParcel_BossFight_Win", -1), false, true);
    TriggerExecute(gt_ObjectivePreventBossAwakenComplete, true, true);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryPnP");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/9AD6AAA1"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_victoryCompletePan, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Attack Waves at Time
//--------------------------------------------------------------------------------------------------
bool gt_SendAttackWavesatTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (3.75 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (6.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03ExpansionAttack1, (10.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (14.1 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05ExpansionAttack2, (17.2 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07TargetPlayerUnits, (24.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave08, (27.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave09, (30.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendAttackWavesatTime_Init () {
    gt_SendAttackWavesatTime = TriggerCreate("gt_SendAttackWavesatTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int auto5B5D21C6_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCOMI_gf_GetMissionDifficulty() == 1) || (libCOMI_gf_GetMissionDifficulty() == 2))) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    auto5B5D21C6_val = lv_directionToAttackFrom;
    if (auto5B5D21C6_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1824646153);
        lv_attackWaveTransportDrop = PointFromId(381792216);
        lv_attackWaveWayPoint = PointFromId(1676956589);
        gv_attackWave02_AttackP1 = false;
    }
    else if (auto5B5D21C6_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(2050346947);
        lv_attackWaveTransportDrop = PointFromId(886526665);
        lv_attackWaveWayPoint = PointFromId(2135836415);
        gv_attackWave02_AttackP1 = true;
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWayPoint, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int auto9F84EA40_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    if ((gv_attackWave02_AttackP1 == true) && (gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
    }
    else {
        lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
    }
    auto9F84EA40_val = lv_directionToAttackFrom;
    if (auto9F84EA40_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1824646153);
        lv_attackWaveTransportDrop = PointFromId(381792216);
        lv_attackWaveWayPoint = PointFromId(1676956589);
    }
    else if (auto9F84EA40_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(2050346947);
        lv_attackWaveTransportDrop = PointFromId(886526665);
        lv_attackWaveWayPoint = PointFromId(2135836415);
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWayPoint, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03 - Expansion Attack 1
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03ExpansionAttack1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveExpoWaypoint;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int auto7B15CF75_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    auto7B15CF75_val = lv_directionToAttackFrom;
    if (auto7B15CF75_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1010296579);
        lv_attackWaveTransportDrop = PointFromId(55660555);
        lv_attackWaveWayPoint = PointFromId(367);
    }
    else if (auto7B15CF75_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(863207017);
        lv_attackWaveTransportDrop = PointFromId(2111973498);
        lv_attackWaveWayPoint = PointFromId(358);
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWayPoint, false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(800929735), false);
    if ((RandomInt(0, 1) == 1)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1676956589), false);
    }
    else {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(2135836415), false);
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03ExpansionAttack1_Init () {
    gt_AttackWave03ExpansionAttack1 = TriggerCreate("gt_AttackWave03ExpansionAttack1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int autoBD8D9EA4_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    autoBD8D9EA4_val = lv_directionToAttackFrom;
    if (autoBD8D9EA4_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1824646153);
        lv_attackWaveTransportDrop = PointFromId(381792216);
        gv_attackWave02_AttackP1 = false;
    }
    else if (autoBD8D9EA4_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(2050346947);
        lv_attackWaveTransportDrop = PointFromId(886526665);
        gv_attackWave02_AttackP1 = true;
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(307149257), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_03_ENEMY, PointFromId(1676956589), false);
    AIAttackWaveAddWaypoint(gv_pLAYER_04_ENEMY, PointFromId(2135836415), false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05 - Expansion Attack 2
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05ExpansionAttack2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveExpoWaypoint;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int auto78C523FC_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    auto78C523FC_val = lv_directionToAttackFrom;
    if (auto78C523FC_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1010296579);
        lv_attackWaveTransportDrop = PointFromId(55660555);
        lv_attackWaveWayPoint = PointFromId(367);
    }
    else if (auto78C523FC_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(863207017);
        lv_attackWaveTransportDrop = PointFromId(2111973498);
        lv_attackWaveWayPoint = PointFromId(358);
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWayPoint, false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(800929735), false);
    if ((RandomInt(0, 1) == 1)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(1676956589), false);
    }
    else {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(2135836415), false);
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05ExpansionAttack2_Init () {
    gt_AttackWave05ExpansionAttack2 = TriggerCreate("gt_AttackWave05ExpansionAttack2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int auto40F42D9A_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    auto40F42D9A_val = lv_directionToAttackFrom;
    if (auto40F42D9A_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1824646153);
        lv_attackWaveTransportDrop = PointFromId(381792216);
        lv_attackWaveWayPoint = PointFromId(1676956589);
    }
    else if (auto40F42D9A_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(2050346947);
        lv_attackWaveTransportDrop = PointFromId(886526665);
        lv_attackWaveWayPoint = PointFromId(2135836415);
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWayPoint, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07 - Target Player Units
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07TargetPlayerUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;
    unitfilter lv_attackTargetFilter;

    // Automatic Variable Declarations
    int auto44BC9483_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_attackTargetFilter = UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterHover) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterPreventDefeat) | (1 << c_targetFilterPreventReveal), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterRadar - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterResistant - 32)) | (1 << (c_targetFilterMapBoss - 32)));

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_03_ENEMY, UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, null, lv_attackTargetFilter, 0));
    AIAttackWaveSetTargetUnitGroup(gv_pLAYER_04_ENEMY, UnitGroupAlliance(gv_pLAYER_04_ENEMY, c_unitAllianceEnemy, null, lv_attackTargetFilter, 0));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    auto44BC9483_val = lv_directionToAttackFrom;
    if (auto44BC9483_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1824646153);
        lv_attackWaveTransportDrop = PointFromId(381792216);
    }
    else if (auto44BC9483_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(2050346947);
        lv_attackWaveTransportDrop = PointFromId(886526665);
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07TargetPlayerUnits_Init () {
    gt_AttackWave07TargetPlayerUnits = TriggerCreate("gt_AttackWave07TargetPlayerUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int auto07294579_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    auto07294579_val = lv_directionToAttackFrom;
    if (auto07294579_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1824646153);
        lv_attackWaveTransportDrop = PointFromId(381792216);
        lv_attackWaveWayPoint = PointFromId(1676956589);
    }
    else if (auto07294579_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(2050346947);
        lv_attackWaveTransportDrop = PointFromId(886526665);
        lv_attackWaveWayPoint = PointFromId(2135836415);
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWayPoint, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave08_Init () {
    gt_AttackWave08 = TriggerCreate("gt_AttackWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 09
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave09_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawnLocation;
    point lv_attackWaveTransportDrop;
    point lv_attackWaveWayPoint;
    int lv_directionToAttackFrom;

    // Automatic Variable Declarations
    int autoBC83D868_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    if ((gv_attackWaveDirection == ge_AttackWaveDirection_Random)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Left;
        }
        else {
            lv_directionToAttackFrom = ge_AttackWaveDirection_Right;
        }
    }
    else {
        lv_directionToAttackFrom = gv_attackWaveDirection;
    }
    autoBC83D868_val = lv_directionToAttackFrom;
    if (autoBC83D868_val == ge_AttackWaveDirection_Left) {
        lv_attackWaveSpawnLocation = PointFromId(1824646153);
        lv_attackWaveTransportDrop = PointFromId(381792216);
        lv_attackWaveWayPoint = PointFromId(1676956589);
    }
    else if (autoBC83D868_val == ge_AttackWaveDirection_Right) {
        lv_attackWaveSpawnLocation = PointFromId(2050346947);
        lv_attackWaveTransportDrop = PointFromId(886526665);
        lv_attackWaveWayPoint = PointFromId(2135836415);
    }
    else {
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveTransportDrop, true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackWaveWayPoint, false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawnLocation, gf_TransportType(gv_pLAYER_03_ENEMY));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase, lv_attackWaveTransportDrop);
    gf_CleanUpAttackWaveTransports(libCOMI_gf_LastCreatedCoopAttackForceTransports(), lv_attackWaveSpawnLocation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave09_Init () {
    gt_AttackWave09 = TriggerCreate("gt_AttackWave09_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Reset
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherArchangelPartsReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveDestroy(gv_objectiveGatherArchangelParts);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Primary04", libCOMI_ge_MissionObjectiveState_Undiscovered);
    TriggerEnable(gt_ObjectiveGatherArchangelPartsCreate, true);
    TriggerEnable(gt_ObjectiveGatherArchangelPartsComplete, true);
    TriggerEnable(gt_ObjectiveGatherArchangelPartsUpdate, true);
    TriggerExecute(gt_ObjectiveGatherArchangelPartsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherArchangelPartsReset_Init () {
    gt_ObjectiveGatherArchangelPartsReset = TriggerCreate("gt_ObjectiveGatherArchangelPartsReset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherArchangelPartsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_PartAndParcel_Primary04");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_PartAndParcel_Primary04", gv_c_ArchangelPartsRequired);
    gv_objectiveGatherArchangelParts = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 20);
    TriggerExecute(gt_ObjectiveGatherArchangelPartsUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherArchangelPartsCreate_Init () {
    gt_ObjectiveGatherArchangelPartsCreate = TriggerCreate("gt_ObjectiveGatherArchangelPartsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherArchangelPartsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveGatherArchangelPartsCreate, true, false);
    if ((gv_archangelCurrentPartsPool >= gv_c_ArchangelPartsRequired)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libCOMI_gf_SetMissionObjectiveProgress("AC_PartAndParcel_Primary04", gv_c_ArchangelPartsRequired);
        TriggerExecute(gt_ObjectiveGatherArchangelPartsComplete, true, false);
    }
    else {
        libCOMI_gf_SetMissionObjectiveProgress("AC_PartAndParcel_Primary04", gv_archangelCurrentPartsPool);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherArchangelPartsUpdate_Init () {
    gt_ObjectiveGatherArchangelPartsUpdate = TriggerCreate("gt_ObjectiveGatherArchangelPartsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - GatherArchangelParts - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherArchangelPartsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGatherArchangelPartsCreate, true, false);
    TriggerEnable(gt_ObjectiveGatherArchangelPartsUpdate, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Primary04", libCOMI_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherArchangelPartsComplete_Init () {
    gt_ObjectiveGatherArchangelPartsComplete = TriggerCreate("gt_ObjectiveGatherArchangelPartsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyBossesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_PartAndParcel_Primary01");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_PartAndParcel_Primary01", gv_c_BossesRequired);
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    gv_objectiveDestroyBosses = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyBossesCreate_Init () {
    gt_ObjectiveDestroyBossesCreate = TriggerCreate("gt_ObjectiveDestroyBossesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyBossesUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyBossesCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_PartAndParcel_Primary01", gv_bossesSlain);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyBossesUpdate_Init () {
    gt_ObjectiveDestroyBossesUpdate = TriggerCreate("gt_ObjectiveDestroyBossesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyBossesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyBossesCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyBossesComplete_Init () {
    gt_ObjectiveDestroyBossesComplete = TriggerCreate("gt_ObjectiveDestroyBossesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyBosses - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyBossesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyBossesCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyBossesFailed_Init () {
    gt_ObjectiveDestroyBossesFailed = TriggerCreate("gt_ObjectiveDestroyBossesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventBossAwakenCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_PartAndParcel_Primary02");
    gv_objectivePreventBossAwaken = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 0);
    TimerStart(gv_waitForTextCrawl, 8.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventBossAwakenCreate_Init () {
    gt_ObjectivePreventBossAwakenCreate = TriggerCreate("gt_ObjectivePreventBossAwakenCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventBossAwakenUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePreventBossAwakenCreate, true, false);
    TextExpressionSetToken("Param/Expression/D4FE70A8", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_preventBossAwaken))), gf_TimerColor()));
    libCOMI_gf_SetMissionObjectiveCustomText("AC_PartAndParcel_Primary02", TextExpressionAssemble("Param/Expression/D4FE70A8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventBossAwakenUpdate_Init () {
    gt_ObjectivePreventBossAwakenUpdate = TriggerCreate("gt_ObjectivePreventBossAwakenUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventBossAwakenFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventBossAwakenCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventBossAwakenFailed_Init () {
    gt_ObjectivePreventBossAwakenFailed = TriggerCreate("gt_ObjectivePreventBossAwakenFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventBossAwaken - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventBossAwakenComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventBossAwakenCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Primary02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventBossAwakenComplete_Init () {
    gt_ObjectivePreventBossAwakenComplete = TriggerCreate("gt_ObjectivePreventBossAwakenComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTrains - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTrainsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_PartAndParcel_Bonus01");
    gv_objectiveDestroyTrains = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTrainsCreate_Init () {
    gt_ObjectiveDestroyTrainsCreate = TriggerCreate("gt_ObjectiveDestroyTrainsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTrains - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTrainsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyTrainsCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_PartAndParcel_Bonus01", gv_objectiveDestroyTrainsNumDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTrainsUpdate_Init () {
    gt_ObjectiveDestroyTrainsUpdate = TriggerCreate("gt_ObjectiveDestroyTrainsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTrains - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTrainsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyTrainsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTrainsComplete_Init () {
    gt_ObjectiveDestroyTrainsComplete = TriggerCreate("gt_ObjectiveDestroyTrainsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTrains - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTrainsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyTrainsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_PartAndParcel_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTrainsFailed_Init () {
    gt_ObjectiveDestroyTrainsFailed = TriggerCreate("gt_ObjectiveDestroyTrainsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init03LoadingComplete_Init();
    gt_Init02Players_Init();
    gt_Init05Units_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
    gt_DestroyReticles1_Init();
    gt_DestroyReticles2_Init();
    gt_DestroyReticles3_Init();
    gt_MissionProgression_Init();
    gt_PartsCollectionPhase_Init();
    gt_BossFightPhase_Init();
    gt_ArchangelLaunchSequence_Init();
    gt_ArchangelSiegePingTrail_Init();
    gt_ArchangelStateMachine_Init();
    gt_InitializeUpdatePartsRegionOrder_Init();
    gt_MakePartsNeutral_Init();
    gt_SetPartsTooltip_Init();
    gt_Partspickedup_Init();
    gt_ShowandUpdatePartRegionMarkers_Init();
    gt_ReleaseBossHybrid_Init();
    gt_BossHybridCreated_Init();
    gt_BossDeath1_Init();
    gt_BossDeath2_Init();
    gt_BossDeath3_Init();
    gt_BossAreaRevealer_Init();
    gt_InitializeBossStyles_Init();
    gt_HybridBossHybridShadesLifeShare_Init();
    gt_InitializeBossTimer_Init();
    gt_AddtoBossTimer_Init();
    gt_TrainPathInitialization_Init();
    gt_TrainPathInitializationForward_Init();
    gt_TrainPathInitializationBackward_Init();
    gt_SpawnEscorts_Init();
    gt_TrainMovement_Init();
    gt_TrainDespawn_Init();
    gt_TrainCarDamageAnimationController_Init();
    gt_InitializeChargers_Init();
    gt_TrainStationController_Init();
    gt_ChargePulseController_Init();
    gt_DeactivateChargers_Init();
    gt_ActivateStation_Init();
    gt_DeactivateStation_Init();
    gt_TrainSpawnAnimations_Init();
    gt_RevealBottomLane_Init();
    gt_RevealMiddleLane_Init();
    gt_RevealTopLane_Init();
    gt_InitializeBonusObjective_Init();
    gt_TrainEvent01_Init();
    gt_TrainEvent02_Init();
    gt_MoebiusEmployee_VOEasterEgg_Init();
    gt_TransmissionResetTransmissionsforNextRound_Init();
    gt_EnemyAttackingQ_Init();
    gt_TransmissionArchangelMovingOutafterrepairQ_Init();
    gt_TransmissionArchangelPreparingtoMovingOutafterrepairQ_Init();
    gt_TransmissionBossEngagedQ_Init();
    gt_TransmissionArchangelInitiateBombinRunQ_Init();
    gt_TransmissionReturningforRepairsShieldDestroyedQ_Init();
    gt_TransmissionBossEncounterArchangelDefeatedQ_Init();
    gt_TransmissionBossDefeatedReturnHomeQ_Init();
    gt_TransmissionBossDefeatedArchangelDefeatedQ_Init();
    gt_TransmissionHybridBossReleasedQ_Init();
    gt_TransmissionHybridBossDefeatedQ_Init();
    gt_TransmissionHybridBossTauntQ_Init();
    gt_TransmissionTimerUpdate_Init();
    gt_TransmissionSixMinutesLeftQ_Init();
    gt_TransmissionFourMinutesLeftQ_Init();
    gt_TransmissionTwoMinuteLeftQ_Init();
    gt_TransmissionOneMinuteLeftQ_Init();
    gt_TransmissionArchangelPartsCollected_Init();
    gt_TransmissionStartPartsCollectingQ_Init();
    gt_TransmissionHalfPartsCollectedQ_Init();
    gt_TransmissionAlmostAllPartsCollectedQ_Init();
    gt_TransmissionPartCollectingFinishedQ_Init();
    gt_TrainSpawnedQ3_Init();
    gt_TrainSpawnedQ5_Init();
    gt_TrainSpawnedQ_Init();
    gt_TrainSpawnedQ2_Init();
    gt_TrainEscapingQ_Init();
    gt_TrainSpawnedQ4_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_SendAttackWavesatTime_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03ExpansionAttack1_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05ExpansionAttack2_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07TargetPlayerUnits_Init();
    gt_AttackWave08_Init();
    gt_AttackWave09_Init();
    gt_ObjectiveGatherArchangelPartsReset_Init();
    gt_ObjectiveGatherArchangelPartsCreate_Init();
    gt_ObjectiveGatherArchangelPartsUpdate_Init();
    gt_ObjectiveGatherArchangelPartsComplete_Init();
    gt_ObjectiveDestroyBossesCreate_Init();
    gt_ObjectiveDestroyBossesUpdate_Init();
    gt_ObjectiveDestroyBossesComplete_Init();
    gt_ObjectiveDestroyBossesFailed_Init();
    gt_ObjectivePreventBossAwakenCreate_Init();
    gt_ObjectivePreventBossAwakenUpdate_Init();
    gt_ObjectivePreventBossAwakenFailed_Init();
    gt_ObjectivePreventBossAwakenComplete_Init();
    gt_ObjectiveDestroyTrainsCreate_Init();
    gt_ObjectiveDestroyTrainsUpdate_Init();
    gt_ObjectiveDestroyTrainsComplete_Init();
    gt_ObjectiveDestroyTrainsFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
