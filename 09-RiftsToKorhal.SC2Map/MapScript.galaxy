//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Rifts to Korhal
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
include "aiF917F4D7"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_ENEMY = 6;
const int gv_pLAYER_04_ENEMY = 9;
const int gv_pLAYER_07_SHARD = 7;
const int gv_pLAYER_08_PIRATES = 8;
const string gv_c_SpawnedVoidShard = "VoidShardAC";
const int gv_c_SpawnedVoidShardHybridTypeSet = 5;
const int gv_c_SpawnedVoidShardStages = 4;
const int gv_c_SpawnedVoidShardStagesMaxPoints = 4;
const int gv_c_PingWorthyUnitGroupCount = 6;
const int gv_c_BonusObjectiveAddsHome = 1;
const int gv_c_BonusObjectiveTarget_Max = 2;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_VoidRiftStageStates__None = 0;
const int ge_VoidRiftStageStates_Hidden = 1;
const int ge_VoidRiftStageStates_DisplayTimer = 2;
const int ge_VoidRiftStageStates_Dying = 3;
const int ge_VoidRiftStageStates_Dead = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
int gv_mechanicDifficulty;
fixed[gv_c_SpawnedVoidShardStages + 1] gv_spawnVoidShardTime;
fixed[gv_c_SpawnedVoidShardStages + 1] gv_spawnVoidShardTimeWarning;
fixed[gv_c_SpawnedVoidShardStages + 1] gv_spawnVoidShardTimeReminder;
int gv_shardNumber;
int gv_leaderboardTimeScoreFinal;
int gv_leaderboardBonusScoreFinal;
int gv_leaderboardBonusScoreFinal2;
bool gv_spawnShard;
int gv_g_Stage;
point[gv_c_SpawnedVoidShardStages + 1][gv_c_SpawnedVoidShardStagesMaxPoints + 1] gv_voidShardSpawnLocations;
string[gv_c_SpawnedVoidShardStages + 1][gv_c_SpawnedVoidShardHybridTypeSet + 1] gv_spawnedVoidShard_HybridType;
timer gv_voidShardStart;
timer[gv_c_SpawnedVoidShardStages + 1] gv_voidShardStageStartTimer;
timer[gv_c_SpawnedVoidShardStages + 1] gv_voidShardStageStartWarningTimer;
timer[gv_c_SpawnedVoidShardStages + 1] gv_voidShardStageStartReminderTimer;
int gv_spawnedVoidShardsActive;
int gv_summonedVoidShardsDestroyed;
int gv_lowestTimerIndex;
fixed gv_shardAbility_VoidZone_Cooldown;
unitgroup gv_shardsAttacking;
timer gv_shardsAttack;
unitgroup[gv_c_PingWorthyUnitGroupCount + 1] gv_pingWorthyUnitGroups;
int[gv_c_PingWorthyUnitGroupCount + 1] gv_pingWorthyUnitGroupPing;
bool gv_hybridStorm_OnOff;
timer[gv_c_SpawnedVoidShardStages + 1] gv_voidRiftInfo_DeathAnimTimer;
timer[gv_c_SpawnedVoidShardStages + 1] gv_voidRiftDisplayTimer;
unitgroup[gv_c_SpawnedVoidShardStages + 1] gv_voidRiftWatcher_RiftStageGroup;
int[gv_c_SpawnedVoidShardStages + 1] gv_voidRiftWatcher_RiftStageState;
timer[gv_c_BonusObjectiveTarget_Max + 1] gv_bonusObjectiveTargetLifeAlmostOut;
timer[gv_c_BonusObjectiveTarget_Max + 1] gv_bonusObjectiveTargetLife;
unit[gv_c_BonusObjectiveTarget_Max + 1] gv_bonusObjectiveTarget;
int gv_bonusObjectiveTargetTimedLife;
int[gv_c_BonusObjectiveTarget_Max + 1] gv_createBonusObjectiveTarget;
string gv_bonusObjectiveTargetType;
timer[3] gv_bonusObjectiveTimer;
region[3] gv_bonusObjectiveCrates;
fixed gv_pirateShip_ShockBlast_Cooldown;
fixed gv_pirateShip_BombingThreshold;
fixed gv_pirateShip_BombingIncrement;
unitgroup gv_bonus02Defenders;
int gv_bonus02DefenderCount;
bool gv_firstShardAppear;
bool gv_firstShardDestruction;
bool gv_finalStage;
timer gv_lastObjectiveDestroyedMessage;
point gv_victorySpawningRiftsComplete;
int gv_attackWavePattern;
point gv_attackWaveA_Wave05Path;
int gv_objectiveDestroyVoidShardsRequired;
int gv_objectiveDestroyVoidShardsObjective;
int gv_dontLetVoidShardActivateCurrent;
int gv_dontLetVoidShardActivateAllowed;
int gv_objectiveDontLetShardActivate;
int[gv_c_BonusObjectiveTarget_Max + 1] gv_objectiveDestroyPirateShip;

void InitGlobals () {
    int init_i;

    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_mechanicDifficulty = 2;
    gv_voidShardStart = TimerCreate();
    for (init_i = 0; init_i <= gv_c_SpawnedVoidShardStages; init_i += 1) {
        gv_voidShardStageStartTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_SpawnedVoidShardStages; init_i += 1) {
        gv_voidShardStageStartWarningTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_SpawnedVoidShardStages; init_i += 1) {
        gv_voidShardStageStartReminderTimer[init_i] = TimerCreate();
    }
    gv_shardsAttacking = UnitGroupEmpty();
    gv_shardsAttack = TimerCreate();
    for (init_i = 0; init_i <= gv_c_PingWorthyUnitGroupCount; init_i += 1) {
        gv_pingWorthyUnitGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_c_PingWorthyUnitGroupCount; init_i += 1) {
        gv_pingWorthyUnitGroupPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= gv_c_SpawnedVoidShardStages; init_i += 1) {
        gv_voidRiftInfo_DeathAnimTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_SpawnedVoidShardStages; init_i += 1) {
        gv_voidRiftDisplayTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_SpawnedVoidShardStages; init_i += 1) {
        gv_voidRiftWatcher_RiftStageGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_c_SpawnedVoidShardStages; init_i += 1) {
        gv_voidRiftWatcher_RiftStageState[init_i] = ge_VoidRiftStageStates_Hidden;
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveTarget_Max; init_i += 1) {
        gv_bonusObjectiveTargetLifeAlmostOut[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveTarget_Max; init_i += 1) {
        gv_bonusObjectiveTargetLife[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveTarget_Max; init_i += 1) {
        gv_createBonusObjectiveTarget[init_i] = -1;
    }
    gv_bonusObjectiveTargetType = "ACPirateCapitalShip";
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_bonusObjectiveTimer[init_i] = TimerCreate();
    }
    gv_bonus02Defenders = UnitGroupEmpty();
    gv_firstShardAppear = true;
    gv_firstShardDestruction = true;
    gv_lastObjectiveDestroyedMessage = TimerCreate();
    gv_objectiveDestroyVoidShardsRequired = 10;
    gv_objectiveDestroyVoidShardsObjective = c_invalidObjectiveId;
    gv_objectiveDontLetShardActivate = c_invalidObjectiveId;
    for (init_i = 0; init_i <= gv_c_BonusObjectiveTarget_Max; init_i += 1) {
        gv_objectiveDestroyPirateShip[init_i] = c_invalidObjectiveId;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_InstantlyCreateandAddUnitstoAttackWave (int lp_count, string lp_unitType, int lp_player, point lp_point);
void gf_OnOffHybridStorm (bool lp_hybridStormOnOff);
void gf_CreateandStoreObjectivePingforRiftQ (unit lp_rift);
void gf_GiantAttentionGrabbingPing (point lp_pingLocation);
void gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold (unitgroup lp_unitGroup, region lp_bullyRegion, int lp_disablePercent);
color gf_TimerColor (timer lp_timer);
void gf_StartVoidShardStage (point lp_spawnPoint, int lp_stageNumber);
void gf_VoidShardBehavior (unit lp_voidRift, int lp_stageIndex);
text gf_GetHybridTooltip (string lp_hybrid);
string gf_GetHybridIcon (string lp_hybrid);
timer gf_GetDisplayTimer (int lp_stage);
int gf_GetRiftStageState (int lp_stage);
void gf_VoidRiftInfoUpdate ();
void gf_CreateBonusObjectiveUnit (int lp_monsterIndex, point lp_spawnLocation);
void gf_PirateShipLogic (unit lp_pirateShip, unit lp_targetBuilding, int lp_pirateShipIndex);
void gf_UpdateBonusObjectiveUI (int lp_index, int lp_objectiveState);
void gf_UpdateBonusObjectiveTimer (int lp_index);
void gf_ObjectiveDestroyedQ (point lp_position, unit lp_killingUnit);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
point gf_AttackWaveGather ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init03LoadingComplete;
trigger gt_Init05Units;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;
trigger gt_DebugSetAttackWavePattern;
trigger gt_TimerExpire1;
trigger gt_TimerExpire2;
trigger gt_TimerExpire3;
trigger gt_TimerExpire4;
trigger gt_TimerWarning1;
trigger gt_TimerWarning2;
trigger gt_TimerWarning3;
trigger gt_TimerWarning4;
trigger gt_TimerReminder1;
trigger gt_TimerReminder2;
trigger gt_TimerReminder3;
trigger gt_TimerReminder4;
trigger gt_ShowShortestTimerinTimerWindow;
trigger gt_SetupVoidShardSpawning;
trigger gt_StartSpawningVoidShards;
trigger gt_VoidShardsAttack;
trigger gt_HybridAttackPing;
trigger gt_HybridAttackPingMerging;
trigger gt_TransmissionHybridSpawnedQ;
trigger gt_ShowHideHybridStorm;
trigger gt_SetupBonusObjective;
trigger gt_StartBonusObjective01;
trigger gt_StartBonusObjective02;
trigger gt_StartBonus02Early;
trigger gt_InitializeBonus02Early;
trigger gt_EnemyAttackingQ;
trigger gt_ObjectiveRevealedQ;
trigger gt_ObjectiveExpiring2Q;
trigger gt_ObjectiveExpiring4Q;
trigger gt_BonusObjective1RevealedQ;
trigger gt_BonusObjective2RevealedQ;
trigger gt_BonusObjectiveCompleteQ;
trigger gt_BonusObjectiveAlmostExpiredQ;
trigger gt_BonusObjectiveFailedQ;
trigger gt_DefeatShardActivated;
trigger gt_VictoryDestorytheSpawningRiftsCompleted;
trigger gt_MissionEffortDefeat;
trigger gt_TipReadyQ;
trigger gt_AIDangerMapsUsageOn;
trigger gt_AIAttackWavesA;
trigger gt_AttackWaveA01;
trigger gt_AttackWaveA02;
trigger gt_AttackWaveA03;
trigger gt_AttackWaveA04;
trigger gt_AttackWaveA05;
trigger gt_AttackWaveA06;
trigger gt_AttackWaveA07;
trigger gt_AttackExpoTemplate;
trigger gt_AIAttackWavesB;
trigger gt_AttackWaveB01a;
trigger gt_AttackWaveB01b;
trigger gt_AttackWaveB01c;
trigger gt_AttackWaveB02a;
trigger gt_AttackWaveB02b;
trigger gt_AttackWaveB02c;
trigger gt_AttackWaveB03a;
trigger gt_AttackWaveB03b;
trigger gt_AttackWaveB03c;
trigger gt_AttackWaveB04a;
trigger gt_AttackWaveB04b;
trigger gt_AttackWaveB04c;
trigger gt_AttackWaveB05a;
trigger gt_AttackWaveB05b;
trigger gt_AttackWaveB05c;
trigger gt_AttackWaveB06a;
trigger gt_AttackWaveB06b;
trigger gt_AttackWaveB06c;
trigger gt_ObjectiveDestroyVoidShardsCreate;
trigger gt_ObjectiveDestroyVoidShardsComplete;
trigger gt_ObjectiveDestroyVoidShardsUpdate;
trigger gt_ObjectiveDestroyVoidShardsFailed;
trigger gt_ObjectiveDontLetShardActivateCreate;
trigger gt_ObjectiveDontLetShardActivateComplete;
trigger gt_ObjectiveDontLetShardActivateUpdate;
trigger gt_ObjectiveDontLetShardActivateFailed;
trigger gt_ObjectiveDestroyPirateShip01Create;
trigger gt_ObjectiveDestroyPirateShip01Complete;
trigger gt_ObjectiveDestroyPirateShip01Failed;
trigger gt_ObjectiveDestroyPirateShip02Create;
trigger gt_ObjectiveDestroyPirateShip02Complete;
trigger gt_ObjectiveDestroyPirateShip02Failed;
trigger gt_ObjectiveDestroyPirateShip03Create;
trigger gt_ObjectiveDestroyPirateShip03Complete;
trigger gt_ObjectiveDestroyPirateShip03Failed;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiF917F4D7", 7);
    AICampaignStart(6);
    AICampaignStart(8);
    AICampaignStart(9);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_InstantlyCreateandAddUnitstoAttackWave (int lp_count, string lp_unitType, int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(lp_count, lp_unitType, 0, lp_player, lp_point, libNtve_gf_RandomAngle());
    AIAttackWaveUseGroup(lp_player, UnitLastCreatedGroup());
}

void gf_OnOffHybridStorm (bool lp_hybridStormOnOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_hybridStormOnOff == true)) {
        GameSetLighting("KorhalNight", 3.0);
        libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_SetOpacity(1.0, 3.0), "SnowBlizzard", RegionEntireMap());
    }
    else {
        GameSetLighting("KorhalCity", 5.0);
        libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_SetOpacity(0.0, 5.0), "SnowBlizzard", RegionEntireMap());
    }
}

trigger auto_gf_CreateandStoreObjectivePingforRiftQ_Trigger = null;
unit auto_gf_CreateandStoreObjectivePingforRiftQ_lp_rift;

void gf_CreateandStoreObjectivePingforRiftQ (unit lp_rift) {
    auto_gf_CreateandStoreObjectivePingforRiftQ_lp_rift = lp_rift;

    if (auto_gf_CreateandStoreObjectivePingforRiftQ_Trigger == null) {
        auto_gf_CreateandStoreObjectivePingforRiftQ_Trigger = TriggerCreate("auto_gf_CreateandStoreObjectivePingforRiftQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateandStoreObjectivePingforRiftQ_Trigger, false, false);
}

bool auto_gf_CreateandStoreObjectivePingforRiftQ_TriggerFunc (bool testConds, bool runActions) {
    unit lp_rift = auto_gf_CreateandStoreObjectivePingforRiftQ_lp_rift;

    // Automatic Variable Declarations
    // Implementation
    gf_GiantAttentionGrabbingPing(UnitGetPosition(lp_rift));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lp_rift), StringExternal("Param/Value/15F3EFC2"));
    libHots_gf_StorePingForUnit(lp_rift, 1, PingLastCreated());
    return true;
}

trigger auto_gf_GiantAttentionGrabbingPing_Trigger = null;
point auto_gf_GiantAttentionGrabbingPing_lp_pingLocation;

void gf_GiantAttentionGrabbingPing (point lp_pingLocation) {
    auto_gf_GiantAttentionGrabbingPing_lp_pingLocation = lp_pingLocation;

    if (auto_gf_GiantAttentionGrabbingPing_Trigger == null) {
        auto_gf_GiantAttentionGrabbingPing_Trigger = TriggerCreate("auto_gf_GiantAttentionGrabbingPing_TriggerFunc");
    }

    TriggerExecute(auto_gf_GiantAttentionGrabbingPing_Trigger, false, false);
}

bool auto_gf_GiantAttentionGrabbingPing_TriggerFunc (bool testConds, bool runActions) {
    point lp_pingLocation = auto_gf_GiantAttentionGrabbingPing_lp_pingLocation;

    // Variable Declarations
    int lv_scaleIter;
    fixed lv_pingScale;
    int lv_SpiningShrinkingPing;

    // Automatic Variable Declarations
    const int auto6443BF5F_ae = 20;
    const int auto6443BF5F_ai = -1;

    // Variable Initialization
    lv_SpiningShrinkingPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_pingLocation, 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    lv_SpiningShrinkingPing = PingLastCreated();
    PingSetScale(lv_SpiningShrinkingPing, 3.0);
    lv_scaleIter = 40;
    for ( ; ( (auto6443BF5F_ai >= 0 && lv_scaleIter <= auto6443BF5F_ae) || (auto6443BF5F_ai < 0 && lv_scaleIter >= auto6443BF5F_ae) ) ; lv_scaleIter += auto6443BF5F_ai ) {
        lv_pingScale = (lv_scaleIter * 0.1);
        PingSetScale(lv_SpiningShrinkingPing, lv_pingScale);
        PingSetRotation(lv_SpiningShrinkingPing, (360 - (ModF(lv_scaleIter, 10.0) * 36)));
        Wait(0.1, c_timeReal);
    }
    libCOMI_gf_DestroyPingCoop(lv_SpiningShrinkingPing);
    return true;
}

trigger auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_Trigger = null;
unitgroup auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_unitGroup;
region auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_bullyRegion;
int auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_disablePercent;

void gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold (unitgroup lp_unitGroup, region lp_bullyRegion, int lp_disablePercent) {
    auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_unitGroup = lp_unitGroup;
    auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_bullyRegion = lp_bullyRegion;
    auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_disablePercent = lp_disablePercent;

    if (auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_Trigger == null) {
        auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_Trigger = TriggerCreate("auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_Trigger, false, false);
}

bool auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitGroup = auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_unitGroup;
    region lp_bullyRegion = auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_bullyRegion;
    int lp_disablePercent = auto_gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold_lp_disablePercent;

    // Variable Declarations
    unit lv_l_UnitGroupIter;
    int lv_l_PlayerIter;
    fixed lv_l_VitalityMax;
    fixed lv_l_VitalityCurrent;
    fixed lv_l_VitalityPercent;
    fixed lv_l_DisablePercentReal;

    // Automatic Variable Declarations
    unitgroup auto2864970F_g;
    int auto2864970F_u;
    unitgroup auto01FD2F9B_g;
    int auto01FD2F9B_u;
    playergroup auto06B5FC19_g;

    // Variable Initialization

    // Implementation
    if (((lp_unitGroup == null) || (lp_bullyRegion == null))) {
        breakpoint;
    }

    auto2864970F_g = lp_unitGroup;
    auto2864970F_u = UnitGroupCount(auto2864970F_g, c_unitCountAll);
    for (;; auto2864970F_u -= 1) {
        lv_l_UnitGroupIter = UnitGroupUnitFromEnd(auto2864970F_g, auto2864970F_u);
        if (lv_l_UnitGroupIter == null) { break; }
        lv_l_VitalityMax += UnitGetPropertyFixed(lv_l_UnitGroupIter, c_unitPropVitality, c_unitPropCurrent);
    }
    lv_l_VitalityCurrent = lv_l_VitalityMax;
    lv_l_VitalityPercent = (lv_l_VitalityCurrent / lv_l_VitalityMax);
    lv_l_DisablePercentReal = (lp_disablePercent / 100.0);
    while ((lv_l_VitalityPercent > lv_l_DisablePercentReal)) {
        lv_l_VitalityCurrent = 0.0;
        auto01FD2F9B_g = lp_unitGroup;
        auto01FD2F9B_u = UnitGroupCount(auto01FD2F9B_g, c_unitCountAll);
        for (;; auto01FD2F9B_u -= 1) {
            lv_l_UnitGroupIter = UnitGroupUnitFromEnd(auto01FD2F9B_g, auto01FD2F9B_u);
            if (lv_l_UnitGroupIter == null) { break; }
            lv_l_VitalityCurrent += UnitGetPropertyFixed(lv_l_UnitGroupIter, c_unitPropVitality, c_unitPropCurrent);
        }
        lv_l_VitalityPercent = (lv_l_VitalityCurrent / lv_l_VitalityMax);
        lv_l_DisablePercentReal = (lp_disablePercent / 100.0);
        Wait(0.5, c_timeAI);
    }
    auto06B5FC19_g = PlayerGroupAll();
    lv_l_PlayerIter = -1;
    while (true) {
        lv_l_PlayerIter = PlayerGroupNextPlayer(auto06B5FC19_g, lv_l_PlayerIter);
        if (lv_l_PlayerIter < 0) { break; }
        AIToggleBulliesInRegion(lv_l_PlayerIter, lp_bullyRegion, false);
    }
    return true;
}

color gf_TimerColor (timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    if ((TimerGetRemaining(lp_timer) < (TimerGetDuration(lp_timer) * 0.33))) {
        return Color(100.00, 0.00, 0.00);
    }
    else if ((TimerGetRemaining(lp_timer) < (TimerGetDuration(lp_timer) * 0.66))) {
        return Color(150*100/255,150*100/255,30*100/255);
    }
    return Color(100,100,100);
}

trigger auto_gf_StartVoidShardStage_Trigger = null;
point auto_gf_StartVoidShardStage_lp_spawnPoint;
int auto_gf_StartVoidShardStage_lp_stageNumber;

void gf_StartVoidShardStage (point lp_spawnPoint, int lp_stageNumber) {
    auto_gf_StartVoidShardStage_lp_spawnPoint = lp_spawnPoint;
    auto_gf_StartVoidShardStage_lp_stageNumber = lp_stageNumber;

    if (auto_gf_StartVoidShardStage_Trigger == null) {
        auto_gf_StartVoidShardStage_Trigger = TriggerCreate("auto_gf_StartVoidShardStage_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartVoidShardStage_Trigger, false, false);
}

bool auto_gf_StartVoidShardStage_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_StartVoidShardStage_lp_spawnPoint;
    int lp_stageNumber = auto_gf_StartVoidShardStage_lp_stageNumber;

    // Variable Declarations
    int lv_l_SpawningIter;
    string[5] lv_l_ShardSpawnedForRift;
    unit[gv_c_SpawnedVoidShardStages + 1] lv_l_SpawningRift;
    int lv_l_TotalStageRiftCount;

    // Automatic Variable Declarations
    int auto4D91955E_ae;
    const int auto4D91955E_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_stageNumber == 4)) {
        gv_finalStage = true;
    }

    TriggerExecute(gt_ObjectiveRevealedQ, true, false);
    gv_voidRiftDisplayTimer[lp_stageNumber] = gv_voidShardStageStartTimer[lp_stageNumber];
    auto4D91955E_ae = lp_stageNumber;
    lv_l_SpawningIter = 1;
    for ( ; ( (auto4D91955E_ai >= 0 && lv_l_SpawningIter <= auto4D91955E_ae) || (auto4D91955E_ai < 0 && lv_l_SpawningIter >= auto4D91955E_ae) ) ; lv_l_SpawningIter += auto4D91955E_ai ) {
        UnitCreate(1, gv_c_SpawnedVoidShard, 0, gv_pLAYER_07_SHARD, gv_voidShardSpawnLocations[lp_stageNumber][lv_l_SpawningIter], 270.0);
        gv_shardNumber += 1;
        UnitBehaviorRemove(UnitLastCreated(), "VoidShardACDamageField", 1);
        libCOMI_gf_TrackUnitDamageTakenForScoreScreen(true, UnitLastCreated(), "KorhalRiftDamage");
        UnitGroupAdd(gv_voidRiftWatcher_RiftStageGroup[lp_stageNumber], UnitLastCreated());
        libCOMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/8531334F"), StringExternal("Param/Value/D576F07E"), null);
        gf_VoidShardBehavior(UnitLastCreated(), lp_stageNumber);
        lv_l_SpawningRift[lv_l_SpawningIter] = UnitLastCreated();
        UnitGroupAdd(gv_shardsAttacking, UnitLastCreated());
        TimerStart(gv_shardsAttack, gv_shardAbility_VoidZone_Cooldown, false, c_timeAI);
    }
    lv_l_TotalStageRiftCount = UnitGroupCount(gv_voidRiftWatcher_RiftStageGroup[lp_stageNumber], c_unitCountAlive);
    gv_voidRiftWatcher_RiftStageState[lp_stageNumber] = ge_VoidRiftStageStates_DisplayTimer;
    while (!(((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[lp_stageNumber]) == true) || (TimerGetRemaining(gv_voidShardStageStartTimer[lp_stageNumber]) <= 0.0)))) {
        Wait(0.5, c_timeAI);
    }
    while ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[lp_stageNumber]) == false)) {
        while (!(((libCOMI_gf_GameIsOver() == true) || (gv_spawnShard == true) || (libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[lp_stageNumber]) == true)))) {
            Wait(0.5, c_timeAI);
        }
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        while (!(((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[lp_stageNumber]) == true) || (gv_spawnShard == false) || (libCOMI_gf_GameIsOver() == true)))) {
            Wait(0.5, c_timeAI);
        }
    }
    if ((UnitGroupCount(gv_voidRiftWatcher_RiftStageGroup[lp_stageNumber], c_unitCountAlive) <= 0)) {
        gv_voidRiftWatcher_RiftStageState[lp_stageNumber] = ge_VoidRiftStageStates_Dying;
        TimerPause(gv_voidShardStageStartTimer[lp_stageNumber], true);
    }

    return true;
}

trigger auto_gf_VoidShardBehavior_Trigger = null;
unit auto_gf_VoidShardBehavior_lp_voidRift;
int auto_gf_VoidShardBehavior_lp_stageIndex;

void gf_VoidShardBehavior (unit lp_voidRift, int lp_stageIndex) {
    auto_gf_VoidShardBehavior_lp_voidRift = lp_voidRift;
    auto_gf_VoidShardBehavior_lp_stageIndex = lp_stageIndex;

    if (auto_gf_VoidShardBehavior_Trigger == null) {
        auto_gf_VoidShardBehavior_Trigger = TriggerCreate("auto_gf_VoidShardBehavior_TriggerFunc");
    }

    TriggerExecute(auto_gf_VoidShardBehavior_Trigger, false, false);
}

bool auto_gf_VoidShardBehavior_TriggerFunc (bool testConds, bool runActions) {
    unit lp_voidRift = auto_gf_VoidShardBehavior_lp_voidRift;
    int lp_stageIndex = auto_gf_VoidShardBehavior_lp_stageIndex;

    // Variable Declarations
    point lv_l_VoidRiftLocation;
    int lv_l_VoidRiftPing;
    region lv_l_VoidRiftArea;
    unit lv_l_KillingUnit;
    int lv_localShardNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_l_VoidRiftPing = c_invalidPingId;

    // Implementation
    lv_l_VoidRiftLocation = UnitGetPosition(lp_voidRift);
    if ((libHots_gf_PingStoredForUnit(lp_voidRift, 1) == c_invalidPingId)) {
        gf_CreateandStoreObjectivePingforRiftQ(lp_voidRift);
        lv_l_VoidRiftPing = PingLastCreated();
    }
    else {
        lv_l_VoidRiftPing = libHots_gf_PingStoredForUnit(lp_voidRift, 1);
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lp_voidRift), 2.0, Color(100.00, 0.00, 0.00));
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(lv_l_VoidRiftLocation, 1.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(lv_l_VoidRiftLocation, 1.0), 0.1, false);
    lv_l_VoidRiftArea = RegionCircle(UnitGetPosition(lp_voidRift), 3.0);
    while ((!(((UnitIsAlive(lp_voidRift) == false) || (TimerGetRemaining(gv_voidShardStageStartTimer[lp_stageIndex]) <= 0.0))))) {
        lv_l_KillingUnit = AILastAttacker(lp_voidRift);
        Wait(0.5, c_timeGame);
    }
    gv_spawnedVoidShardsActive += 1;
    while ((UnitIsAlive(lp_voidRift) == true) && (libCOMI_gf_GameIsOver() == false)) {
        lv_l_KillingUnit = AILastAttacker(lp_voidRift);
        while (!(((UnitIsAlive(lp_voidRift) == false) || (TimerGetRemaining(gv_voidShardStageStartTimer[lp_stageIndex]) > 0.0) || (libCOMI_gf_GameIsOver() == true)))) {
            Wait(0.5, c_timeGame);
        }
        while (!(((UnitIsAlive(lp_voidRift) == false) || (TimerGetRemaining(gv_voidShardStageStartTimer[lp_stageIndex]) <= 0.0) || (libCOMI_gf_GameIsOver() == true)))) {
            Wait(0.5, c_timeGame);
        }
    }
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(lv_l_VoidRiftPing);
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_voidRift, 1));
    gv_summonedVoidShardsDestroyed += 1;
    gv_shardNumber -= 1;
    gv_spawnedVoidShardsActive -= 1;
    gv_victorySpawningRiftsComplete = lv_l_VoidRiftLocation;
    TriggerExecute(gt_ObjectiveDestroyVoidShardsUpdate, true, false);
    TriggerExecute(gt_MissionEffortDefeat, true, false);
    gf_ObjectiveDestroyedQ(lv_l_VoidRiftLocation, lv_l_KillingUnit);
    if ((gv_objectiveDestroyVoidShardsRequired <= gv_summonedVoidShardsDestroyed)) {
        TriggerExecute(gt_ObjectiveDestroyVoidShardsComplete, true, false);
        TriggerExecute(gt_VictoryDestorytheSpawningRiftsCompleted, true, false);
    }

    return true;
}

text gf_GetHybridTooltip (string lp_hybrid) {
    int init_i;

    // Variable Declarations
    int lv_l_AttributeIter;
    string[11] lv_l_HybridArmorType;
    text lv_l_HybridArmorText;
    bool lv_l_AddHyphenBetween;

    // Automatic Variable Declarations
    const int autoAF1CEF24_ae = 10;
    const int autoAF1CEF24_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_l_HybridArmorType[init_i] = "";
    }

    // Implementation
    lv_l_HybridArmorType[0] = "e_unitAttributeLight";
    lv_l_HybridArmorType[1] = "e_unitAttributeArmored";
    lv_l_HybridArmorType[2] = "e_unitAttributeBiological";
    lv_l_HybridArmorType[3] = "e_unitAttributeMechanical";
    lv_l_HybridArmorType[4] = "e_unitAttributeRobotic";
    lv_l_HybridArmorType[5] = "e_unitAttributePsionic";
    lv_l_HybridArmorType[6] = "e_unitAttributeMassive";
    lv_l_HybridArmorType[7] = "e_unitAttributeStructure";
    lv_l_HybridArmorType[8] = "e_unitAttributeHover";
    lv_l_HybridArmorType[9] = "e_unitAttributeHeroic";
    lv_l_HybridArmorType[10] = "e_unitAttributeSummoned";
    lv_l_AttributeIter = 0;
    for ( ; ( (autoAF1CEF24_ai >= 0 && lv_l_AttributeIter <= autoAF1CEF24_ae) || (autoAF1CEF24_ai < 0 && lv_l_AttributeIter >= autoAF1CEF24_ae) ) ; lv_l_AttributeIter += autoAF1CEF24_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_hybrid, "Attributes[" + IntToString(lv_l_AttributeIter) + "]", c_playerAny) == "1")) {
            if ((lv_l_AddHyphenBetween == false)) {
                lv_l_AddHyphenBetween = true;
                lv_l_HybridArmorText = StringExternal(lv_l_HybridArmorType[lv_l_AttributeIter]);
            }
            else {
                lv_l_HybridArmorText = (lv_l_HybridArmorText + StringExternal("Param/Value/F0A40C96") + StringExternal(lv_l_HybridArmorType[lv_l_AttributeIter]));
            }
        }

    }
    TextExpressionSetToken("Param/Expression/D8DC8F25", "UnitName", UnitTypeGetName(lp_hybrid));
    TextExpressionSetToken("Param/Expression/D8DC8F25", "armorType", lv_l_HybridArmorText);
    TextExpressionSetToken("Param/Expression/D8DC8F25", "UnitTooltip", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lp_hybrid, "Description", c_playerAny)));
    TextExpressionSetToken("Param/Expression/D8DC8F25", "unit", StringToText((lp_hybrid)));
    return TextExpressionAssemble("Param/Expression/D8DC8F25");
}

string gf_GetHybridIcon (string lp_hybrid) {
    // Variable Declarations
    string lv_l_HybridActor;

    // Automatic Variable Declarations
    string auto84B5C51F_val;

    // Variable Initialization

    // Implementation
    auto84B5C51F_val = lp_hybrid;
    if (auto84B5C51F_val == "HybridDominatorVoid") {
        lv_l_HybridActor = "HybridDominatorVoid";
    }
    else if (auto84B5C51F_val == "HybridBehemoth") {
        lv_l_HybridActor = "HybridBehemoth";
    }
    else if (auto84B5C51F_val == "HybridDestroyer") {
        lv_l_HybridActor = "HybridD";
    }
    else if (auto84B5C51F_val == "HybridReaver") {
        lv_l_HybridActor = "HybridE";
    }
    else if (auto84B5C51F_val == "HybridNemesis") {
        lv_l_HybridActor = "HybridNemesis";
    }
    else {
    }
    return (CatalogFieldValueGet(c_gameCatalogActor, lv_l_HybridActor, "UnitIcon", c_playerAny));
}

timer gf_GetDisplayTimer (int lp_stage) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[lp_stage]) == false)) {
        return gv_voidRiftDisplayTimer[lp_stage];
    }
    else {
        return gv_voidShardStageStartTimer[lp_stage];
    }
}

int gf_GetRiftStageState (int lp_stage) {
    // Automatic Variable Declarations
    // Implementation
    return gv_voidRiftWatcher_RiftStageState[lp_stage];
}

void gf_VoidRiftInfoUpdate () {
    // Variable Declarations
    int lv_l_RiftIter;

    // Automatic Variable Declarations
    const int auto5236AAC4_ae = gv_c_SpawnedVoidShardStages;
    const int auto5236AAC4_ai = 1;
    int autoFB816523_val;

    // Variable Initialization

    // Implementation
    lv_l_RiftIter = 1;
    for ( ; ( (auto5236AAC4_ai >= 0 && lv_l_RiftIter <= auto5236AAC4_ae) || (auto5236AAC4_ai < 0 && lv_l_RiftIter >= auto5236AAC4_ae) ) ; lv_l_RiftIter += auto5236AAC4_ai ) {
        autoFB816523_val = gv_voidRiftWatcher_RiftStageState[lv_l_RiftIter];
        if (autoFB816523_val == ge_VoidRiftStageStates_Dying) {
            if ((TimerGetDuration(gv_voidRiftInfo_DeathAnimTimer[lv_l_RiftIter]) == 0.0)) {
                TimerStart(gv_voidRiftInfo_DeathAnimTimer[lv_l_RiftIter], 2.0, false, c_timeAI);
            }

            if ((TimerGetRemaining(gv_voidRiftInfo_DeathAnimTimer[lv_l_RiftIter]) <= 0.0)) {
                gv_voidRiftWatcher_RiftStageState[lv_l_RiftIter] = ge_VoidRiftStageStates_Dead;
            }

        }
        else {
        }
    }
}

trigger auto_gf_CreateBonusObjectiveUnit_Trigger = null;
int auto_gf_CreateBonusObjectiveUnit_lp_monsterIndex;
point auto_gf_CreateBonusObjectiveUnit_lp_spawnLocation;

void gf_CreateBonusObjectiveUnit (int lp_monsterIndex, point lp_spawnLocation) {
    auto_gf_CreateBonusObjectiveUnit_lp_monsterIndex = lp_monsterIndex;
    auto_gf_CreateBonusObjectiveUnit_lp_spawnLocation = lp_spawnLocation;

    if (auto_gf_CreateBonusObjectiveUnit_Trigger == null) {
        auto_gf_CreateBonusObjectiveUnit_Trigger = TriggerCreate("auto_gf_CreateBonusObjectiveUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateBonusObjectiveUnit_Trigger, false, false);
}

bool auto_gf_CreateBonusObjectiveUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_monsterIndex = auto_gf_CreateBonusObjectiveUnit_lp_monsterIndex;
    point lp_spawnLocation = auto_gf_CreateBonusObjectiveUnit_lp_spawnLocation;

    // Variable Declarations
    int lv_l_BonusObjectivePing;

    // Automatic Variable Declarations
    point autoF55D6EE4_val;

    // Variable Initialization
    lv_l_BonusObjectivePing = c_invalidPingId;

    // Implementation
    if ((lp_monsterIndex == 1)) {
        TriggerExecute(gt_BonusObjective1RevealedQ, true, false);
    }
    else {
        TriggerExecute(gt_BonusObjective2RevealedQ, true, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, gv_bonusObjectiveTargetType, 0, gv_pLAYER_08_PIRATES, lp_spawnLocation);
    gv_bonusObjectiveTarget[lp_monsterIndex] = UnitLastCreated();
    libCOMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/EFDADCF8"), StringExternal("Param/Value/097D9062"), null);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, lp_spawnLocation, StringExternal("Param/Value/B5E7E3D8"));
    lv_l_BonusObjectivePing = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    TimerStart(gv_bonusObjectiveTargetLife[lp_monsterIndex], gv_bonusObjectiveTargetTimedLife, false, c_timeAI);
    TimerStart(gv_bonusObjectiveTargetLifeAlmostOut[lp_monsterIndex], (gv_bonusObjectiveTargetTimedLife - 90.0), false, c_timeAI);
    gf_UpdateBonusObjectiveUI(lp_monsterIndex, c_objectiveStateActive);
    UnitBehaviorAddPlayer(gv_bonusObjectiveTarget[lp_monsterIndex], "ProgressBar", gv_pLAYER_07_SHARD, 1);
    autoF55D6EE4_val = lp_spawnLocation;
    if (autoF55D6EE4_val == PointFromId(391)) {
        gf_PirateShipLogic(gv_bonusObjectiveTarget[lp_monsterIndex], UnitFromId(3627), lp_monsterIndex);
    }
    else if (autoF55D6EE4_val == PointFromId(910)) {
        gf_PirateShipLogic(gv_bonusObjectiveTarget[lp_monsterIndex], UnitFromId(3623), lp_monsterIndex);
    }
    else {
    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        UnitBehaviorSetDuration(gv_bonusObjectiveTarget[lp_monsterIndex], "ProgressBar", TimerGetDuration(gv_bonusObjectiveTargetLife[lp_monsterIndex]));
        UnitBehaviorSetDurationRemaining(gv_bonusObjectiveTarget[lp_monsterIndex], "ProgressBar", TimerGetRemaining(gv_bonusObjectiveTargetLife[lp_monsterIndex]));
        if (((AIGetTime() - AILastAttack(gv_bonusObjectiveTarget[lp_monsterIndex])) < 4.0)) {
            TimerPause(gv_bonusObjectiveTargetLife[lp_monsterIndex], true);
        }
        else {
            TimerPause(gv_bonusObjectiveTargetLife[lp_monsterIndex], false);
        }
        if ((UnitIsAlive(gv_bonusObjectiveTarget[lp_monsterIndex]) == false)) {
            gf_UpdateBonusObjectiveUI(lp_monsterIndex, c_objectiveStateCompleted);
            break;
        }

        if ((TimerGetRemaining(gv_bonusObjectiveTargetLife[lp_monsterIndex]) <= 0.0)) {
            gf_UpdateBonusObjectiveUI(lp_monsterIndex, c_objectiveStateFailed);
            UnitSetState(gv_bonusObjectiveTarget[lp_monsterIndex], c_unitStateTargetable, false);
            break;
        }

        Wait(0.5, c_timeAI);
    }
    PingDestroy(lv_l_BonusObjectivePing);
    UnitSetHeight(gv_bonusObjectiveTarget[lp_monsterIndex], 15.0, 3.0);
    Wait(3.0, c_timeReal);
    UnitRemove(gv_bonusObjectiveTarget[lp_monsterIndex]);
    return true;
}

trigger auto_gf_PirateShipLogic_Trigger = null;
unit auto_gf_PirateShipLogic_lp_pirateShip;
unit auto_gf_PirateShipLogic_lp_targetBuilding;
int auto_gf_PirateShipLogic_lp_pirateShipIndex;

void gf_PirateShipLogic (unit lp_pirateShip, unit lp_targetBuilding, int lp_pirateShipIndex) {
    auto_gf_PirateShipLogic_lp_pirateShip = lp_pirateShip;
    auto_gf_PirateShipLogic_lp_targetBuilding = lp_targetBuilding;
    auto_gf_PirateShipLogic_lp_pirateShipIndex = lp_pirateShipIndex;

    if (auto_gf_PirateShipLogic_Trigger == null) {
        auto_gf_PirateShipLogic_Trigger = TriggerCreate("auto_gf_PirateShipLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_PirateShipLogic_Trigger, false, false);
}

bool auto_gf_PirateShipLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pirateShip = auto_gf_PirateShipLogic_lp_pirateShip;
    unit lp_targetBuilding = auto_gf_PirateShipLogic_lp_targetBuilding;
    int lp_pirateShipIndex = auto_gf_PirateShipLogic_lp_pirateShipIndex;

    // Variable Declarations
    fixed lv_pirateShipHeight;
    unit lv_tractorBeamTarget;
    unitgroup lv_enemyGroup8;
    fixed lv_bombingThreshold;
    fixed lv_bombingIncrement;
    point lv_bombingTarget;
    timer lv_shockBlastCooldownTimer;
    timer lv_pirateBusyTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();
    lv_shockBlastCooldownTimer = TimerCreate();
    lv_pirateBusyTimer = TimerCreate();

    // Implementation
    lv_pirateShipHeight = UnitGetHeight(lp_pirateShip);
    UnitSetHeight(lp_pirateShip, 15.0, 0.0);
    UnitSetHeight(lp_pirateShip, lv_pirateShipHeight, 3.0);
    Wait(3.0, c_timeReal);
    lv_bombingThreshold = gv_pirateShip_BombingThreshold;
    lv_bombingIncrement = gv_pirateShip_BombingIncrement;
    TimerStart(lv_pirateBusyTimer, 8.0, false, c_timeAI);
    TimerStart(lv_shockBlastCooldownTimer, 8.0, false, c_timeAI);
    while ((UnitIsAlive(lp_pirateShip) == true) && (TimerGetRemaining(gv_bonusObjectiveTargetLife[lp_pirateShipIndex]) > 0.0)) {
        if ((TimerIsPaused(gv_bonusObjectiveTargetLife[lp_pirateShipIndex]) == false)) {
            if ((lv_tractorBeamTarget == null)) {
                UnitCreate(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(gv_bonusObjectiveCrates[lp_pirateShipIndex]), 270.0);
                lv_tractorBeamTarget = UnitLastCreated();
            }
            else {
                UnitIssueOrder(lp_pirateShip, OrderTargetingUnit(AbilityCommand("ACPirateCapitalShipTractorBeam", 0), lv_tractorBeamTarget), c_orderQueueAddToEnd);
            }
            UnitIssueOrder(lp_pirateShip, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("BonusObjectiveSpawn0" + IntToString(lp_pirateShipIndex)))), c_orderQueueAddToEnd);
        }
        else {
            UnitRemove(lv_tractorBeamTarget);
            lv_tractorBeamTarget = null;
            lv_enemyGroup8 = UnitGroupAlliance(UnitGetOwner(lp_pirateShip), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_pirateShip), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0)) {
                if ((UnitGetPropertyFixed(lp_pirateShip, c_unitPropVitalityPercent, c_unitPropCurrent) < lv_bombingThreshold) && (TimerGetRemaining(lv_pirateBusyTimer) <= 0.0)) {
                    TimerStart(lv_pirateBusyTimer, 6.0, false, c_timeAI);
                    lv_bombingThreshold -= lv_bombingIncrement;
                    lv_bombingTarget = UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup8, UnitGroupCenterOfGroup(lv_enemyGroup8)));
                    UnitIssueOrder(lp_pirateShip, OrderTargetingPoint(AbilityCommand("ACPirateBombingRun", 0), lv_bombingTarget), c_orderQueueReplace);
                }

                if ((TimerGetRemaining(lv_pirateBusyTimer) <= 0.0) && (TimerGetRemaining(lv_shockBlastCooldownTimer) <= 0.0)) {
                    TimerStart(lv_pirateBusyTimer, 6.0, false, c_timeAI);
                    TimerStart(lv_shockBlastCooldownTimer, gv_pirateShip_ShockBlast_Cooldown, false, c_timeAI);
                    UnitIssueOrder(lp_pirateShip, Order(AbilityCommand("ACPirateLightningStorm", 0)), c_orderQueueReplace);
                }

            }

        }
        Wait(1.0, c_timeAI);
    }
    UnitRemove(lv_tractorBeamTarget);
    return true;
}

void gf_UpdateBonusObjectiveUI (int lp_index, int lp_objectiveState) {
    // Automatic Variable Declarations
    int auto66A0DBAD_val;
    int autoF804CB2C_val;
    int auto8A8E5D1D_val;
    int auto715CF2CD_val;

    // Implementation
    auto66A0DBAD_val = lp_index;
    if (auto66A0DBAD_val == 1) {
        TriggerExecute(gt_ObjectiveDestroyPirateShip01Create, true, false);
        autoF804CB2C_val = lp_objectiveState;
        if (autoF804CB2C_val == c_objectiveStateCompleted) {
            TriggerExecute(gt_ObjectiveDestroyPirateShip01Complete, true, false);
            TriggerExecute(gt_BonusObjectiveCompleteQ, true, false);
        }
        else if (autoF804CB2C_val == c_objectiveStateFailed) {
            TriggerExecute(gt_ObjectiveDestroyPirateShip01Failed, true, false);
            TriggerExecute(gt_BonusObjectiveFailedQ, true, false);
        }
        else if (autoF804CB2C_val == c_objectiveStateActive) {
            gf_UpdateBonusObjectiveTimer(lp_index);
        }
        else {
        }
    }
    else if (auto66A0DBAD_val == 2) {
        TriggerExecute(gt_ObjectiveDestroyPirateShip02Create, true, false);
        auto8A8E5D1D_val = lp_objectiveState;
        if (auto8A8E5D1D_val == c_objectiveStateCompleted) {
            TriggerExecute(gt_ObjectiveDestroyPirateShip02Complete, true, false);
            TriggerExecute(gt_BonusObjectiveCompleteQ, true, false);
        }
        else if (auto8A8E5D1D_val == c_objectiveStateFailed) {
            TriggerExecute(gt_ObjectiveDestroyPirateShip02Failed, true, false);
            TriggerExecute(gt_BonusObjectiveFailedQ, true, false);
        }
        else if (auto8A8E5D1D_val == c_objectiveStateActive) {
            gf_UpdateBonusObjectiveTimer(lp_index);
        }
        else {
        }
    }
    else if (auto66A0DBAD_val == 3) {
        TriggerExecute(gt_ObjectiveDestroyPirateShip03Create, true, false);
        auto715CF2CD_val = lp_objectiveState;
        if (auto715CF2CD_val == c_objectiveStateCompleted) {
            TriggerExecute(gt_ObjectiveDestroyPirateShip03Complete, true, false);
            TriggerExecute(gt_BonusObjectiveCompleteQ, true, false);
        }
        else if (auto715CF2CD_val == c_objectiveStateFailed) {
            TriggerExecute(gt_ObjectiveDestroyPirateShip03Failed, true, false);
            TriggerExecute(gt_BonusObjectiveFailedQ, true, false);
        }
        else if (auto715CF2CD_val == c_objectiveStateActive) {
            gf_UpdateBonusObjectiveTimer(lp_index);
        }
        else {
        }
    }
    else {
    }
}

trigger auto_gf_UpdateBonusObjectiveTimer_Trigger = null;
int auto_gf_UpdateBonusObjectiveTimer_lp_index;

void gf_UpdateBonusObjectiveTimer (int lp_index) {
    auto_gf_UpdateBonusObjectiveTimer_lp_index = lp_index;

    if (auto_gf_UpdateBonusObjectiveTimer_Trigger == null) {
        auto_gf_UpdateBonusObjectiveTimer_Trigger = TriggerCreate("auto_gf_UpdateBonusObjectiveTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateBonusObjectiveTimer_Trigger, false, false);
}

bool auto_gf_UpdateBonusObjectiveTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_UpdateBonusObjectiveTimer_lp_index;

    // Variable Declarations
    text lv_l_MissionObjectiveName;
    string lv_missionObjective;

    // Automatic Variable Declarations
    int auto356B0245_val;

    // Variable Initialization

    // Implementation
    Wait(5.0, c_timeReal);
    while ((libCOMI_gf_GameIsOver() == false) && (ObjectiveGetState(gv_objectiveDestroyPirateShip[lp_index]) == c_objectiveStateActive)) {
        auto356B0245_val = lp_index;
        if (auto356B0245_val == 1) {
            lv_missionObjective = "AC_KorhalRift_Bonus01";
        }
        else if (auto356B0245_val == 2) {
            lv_missionObjective = "AC_KorhalRift_Bonus02";
        }
        else if (auto356B0245_val == 3) {
            lv_missionObjective = "AC_KorhalRift_Bonus03";
        }
        else {
        }
        if ((TimerGetRemaining(gv_bonusObjectiveTargetLife[lp_index]) >= (TimerGetDuration(gv_bonusObjectiveTargetLife[lp_index]) * 0.66))) {
            TextExpressionSetToken("Param/Expression/A0835E4C", "Time", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonusObjectiveTargetLife[lp_index]))));
            libCOMI_gf_SetMissionObjectiveCustomText(lv_missionObjective, TextExpressionAssemble("Param/Expression/A0835E4C"));
        }
        else {
            TextExpressionSetToken("Param/Expression/40A7D54E", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonusObjectiveTargetLife[lp_index]))), gf_TimerColor(gv_bonusObjectiveTargetLife[lp_index])));
            libCOMI_gf_SetMissionObjectiveCustomText(lv_missionObjective, TextExpressionAssemble("Param/Expression/40A7D54E"));
        }
        Wait(0.5, c_timeAI);
    }
    return true;
}

trigger auto_gf_ObjectiveDestroyedQ_Trigger = null;
point auto_gf_ObjectiveDestroyedQ_lp_position;
unit auto_gf_ObjectiveDestroyedQ_lp_killingUnit;

void gf_ObjectiveDestroyedQ (point lp_position, unit lp_killingUnit) {
    auto_gf_ObjectiveDestroyedQ_lp_position = lp_position;
    auto_gf_ObjectiveDestroyedQ_lp_killingUnit = lp_killingUnit;

    if (auto_gf_ObjectiveDestroyedQ_Trigger == null) {
        auto_gf_ObjectiveDestroyedQ_Trigger = TriggerCreate("auto_gf_ObjectiveDestroyedQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObjectiveDestroyedQ_Trigger, false, false);
}

bool auto_gf_ObjectiveDestroyedQ_TriggerFunc (bool testConds, bool runActions) {
    point lp_position = auto_gf_ObjectiveDestroyedQ_lp_position;
    unit lp_killingUnit = auto_gf_ObjectiveDestroyedQ_lp_killingUnit;

    // Variable Declarations
    int lv_killingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TimerGetRemaining(gv_lastObjectiveDestroyedMessage) <= 0.0)) {
        TimerStart(gv_lastObjectiveDestroyedMessage, 30.0, false, c_timeAI);
    }
    else {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstShardDestruction == true)) {
        gv_firstShardDestruction = false;
        libCOMI_gf_SendMissionTransmission("FirstShardDestroyed", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("VoidShardDestroyed", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

}

point gf_AttackWaveGather () {
    // Variable Declarations
    int lv_aIGatherSupportCount;
    int lv_playerIter;

    // Automatic Variable Declarations
    playergroup auto2F726711_g;

    // Variable Initialization

    // Implementation
    auto2F726711_g = libCOMI_gv_vU_EnemyAI;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto2F726711_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        lv_aIGatherSupportCount += UnitGroupCount(UnitGroup(null, lv_playerIter, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((lv_aIGatherSupportCount > 10)) {
        return PointFromId(56);
    }
    else {
        return PointFromId(2258);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_PreventSpawningInRegion(RegionFromId(10));
    libCOMI_gf_PreventSpawningInRegion(RegionFromId(7));
    libCOMI_gf_PreventSpawningInRegion(RegionFromId(11));
    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_bullyDeactivateGroup;
    region lv_bullyDeactivateRegion;
    unitgroup lv_rocksSmall;
    unitgroup lv_rocksBig;

    // Automatic Variable Declarations
    const int auto0D605E29_ae = 11;
    int auto0D605E29_var;

    // Variable Initialization
    lv_bullyDeactivateGroup = UnitGroupEmpty();
    lv_rocksSmall = UnitGroupEmpty();
    lv_rocksBig = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetTacticalAIThink(gv_pLAYER_08_PIRATES, "MercReaper", "PirateSoldierAIThink", false);
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_08_PIRATES, "SJGriffon", "PirateFighterAIThink", false);
    AIToggleBulliesInRegion(gv_pLAYER_03_ENEMY, RegionFromId(57), true);
    AIToggleBulliesInRegion(gv_pLAYER_04_ENEMY, RegionFromId(57), true);
    auto0D605E29_var = 2;
    for ( ; auto0D605E29_var <= auto0D605E29_ae; auto0D605E29_var += 1 ) {
        lv_bullyDeactivateRegion = RegionFromName(("DeactivateBullies 0" + IntToString(auto0D605E29_var)));
        if ((lv_bullyDeactivateRegion != null)) {
            lv_bullyDeactivateGroup = UnitGroup(null, c_playerAny, lv_bullyDeactivateRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            gf_DisableBulliesinRegionWhenUnitGroupBelowThreshold(lv_bullyDeactivateGroup, lv_bullyDeactivateRegion, 66);
            lv_bullyDeactivateRegion = null;
        }

    }
    UnitSetState(UnitFromId(3623), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(3623), c_unitStateSelectable, false);
    libCOMI_gf_SetUnitInfoTextCampaign(UnitFromId(3623), StringExternal("Param/Value/39511BCE"), StringExternal("Param/Value/351CB6D4"), null);
    UnitSetState(UnitFromId(3627), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(3627), c_unitStateSelectable, false);
    libCOMI_gf_SetUnitInfoTextCampaign(UnitFromId(3627), StringExternal("Param/Value/9AED5F66"), StringExternal("Param/Value/72BA7054"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hybridFogLocation_X;
    int lv_hybridFogLocation_Y;
    string lv_fogActor;

    // Automatic Variable Declarations
    int autoFF146C11_ae;
    const int autoFF146C11_ai = 20;
    int autoC57948FC_ae;
    const int autoC57948FC_ai = 20;

    // Variable Initialization
    lv_fogActor = "SnowBlizzard";

    // Actions
    if (!runActions) {
        return true;
    }

    autoFF146C11_ae = FixedToInt(libNtve_gf_WidthOfRegion(RegionPlayableMap()));
    lv_hybridFogLocation_X = 0;
    for ( ; ( (autoFF146C11_ai >= 0 && lv_hybridFogLocation_X <= autoFF146C11_ae) || (autoFF146C11_ai < 0 && lv_hybridFogLocation_X >= autoFF146C11_ae) ) ; lv_hybridFogLocation_X += autoFF146C11_ai ) {
        autoC57948FC_ae = FixedToInt(libNtve_gf_HeightOfRegion(RegionEntireMap()));
        lv_hybridFogLocation_Y = 0;
        for ( ; ( (autoC57948FC_ai >= 0 && lv_hybridFogLocation_Y <= autoC57948FC_ae) || (autoC57948FC_ai < 0 && lv_hybridFogLocation_Y >= autoC57948FC_ae) ) ; lv_hybridFogLocation_Y += autoC57948FC_ai ) {
            libNtve_gf_CreateActorAtPoint(lv_fogActor, Point(lv_hybridFogLocation_X, lv_hybridFogLocation_Y));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 0.00, 0.00), 1.0, 0.0));
        }
    }
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_SetOpacity(0.0, 0), lv_fogActor, RegionEntireMap());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mechanicDifficulty = libCOMI_gf_GetMissionDifficulty();
    lv_mainObjectiveLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 2500.0, 3500.0, 4500.0, 5500.0, 6500.0, 6500.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "VoidShardAC", "LifeMax", gv_pLAYER_07_SHARD, FixedToString(lv_mainObjectiveLife, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "VoidShardAC", "LifeStart", gv_pLAYER_07_SHARD, FixedToString(lv_mainObjectiveLife, c_fixedPrecisionAny));
    gv_shardAbility_VoidZone_Cooldown = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 90.0, 90.0, 60.0, 30.0, 15.0, 15.0);
    gv_spawnVoidShardTime[1] = 480.0;
    gv_spawnVoidShardTime[2] = 740.0;
    gv_spawnVoidShardTime[3] = 1160.0;
    gv_spawnVoidShardTime[4] = 1440.0;
    gv_spawnVoidShardTimeWarning[1] = (gv_spawnVoidShardTime[1] - 120.0);
    gv_spawnVoidShardTimeWarning[2] = (gv_spawnVoidShardTime[2] - 120.0);
    gv_spawnVoidShardTimeWarning[3] = (gv_spawnVoidShardTime[3] - 120.0);
    gv_spawnVoidShardTimeWarning[4] = (gv_spawnVoidShardTime[4] - 120.0);
    gv_spawnVoidShardTimeReminder[1] = (gv_spawnVoidShardTime[1] - 240.0);
    gv_spawnVoidShardTimeReminder[2] = (gv_spawnVoidShardTime[2] - 240.0);
    gv_spawnVoidShardTimeReminder[3] = (gv_spawnVoidShardTime[3] - 240.0);
    gv_spawnVoidShardTimeReminder[4] = (gv_spawnVoidShardTime[4] - 240.0);
    gv_dontLetVoidShardActivateAllowed = libCOMI_gf_DifficultyValueInt2(gv_mechanicDifficulty, 1, 1, 1, 1, 1, 1);
    gv_createBonusObjectiveTarget[1] = 700;
    gv_createBonusObjectiveTarget[2] = 1130;
    gv_bonusObjectiveTargetTimedLife = 420;
    gv_pirateShip_ShockBlast_Cooldown = libCOMI_gf_DifficultyValueFixed2(gv_mechanicDifficulty, 40.0, 28.0, 18.0, 16.0, 14.5, 13.0);
    gv_pirateShip_BombingThreshold = libCOMI_gf_DifficultyValueFixed2(gv_mechanicDifficulty, 25.0, 50.0, 80.0, 90.0, 90.0, 90.0);
    gv_pirateShip_BombingIncrement = libCOMI_gf_DifficultyValueFixed2(gv_mechanicDifficulty, 25.0, 50.0, 40.0, 30.0, 30.0, 30.0);
    lv_bonusObjectiveLife = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 2500.0, 3400.0, 4400.0, 5500.0, 6750.0, 8000.0);
    CatalogFieldValueSet(c_gameCatalogUnit, gv_bonusObjectiveTargetType, "LifeMax", gv_pLAYER_08_PIRATES, FixedToString(lv_bonusObjectiveLife, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, gv_bonusObjectiveTargetType, "LifeStart", gv_pLAYER_08_PIRATES, FixedToString(lv_bonusObjectiveLife, c_fixedPrecisionAny));
    if ((libCOMI_gf_GetMissionDifficulty() != 1) && (libCOMI_gf_GetMissionDifficulty() != 2)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_08_PIRATES, "ClusterBomb", 1);
        TechTreeUpgradeAddLevel(gv_pLAYER_08_PIRATES, "ReaperD8Charge", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_townPoint;

    // Automatic Variable Declarations
    const int auto96F9FDC1_ae = gv_pLAYER_07_SHARD;
    int auto96F9FDC1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetCoopAIGatherPoint(gv_pLAYER_03_ENEMY, PointFromId(56));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(56));
    libCOMI_gf_SetCoopAIGatherPoint(gv_pLAYER_04_ENEMY, PointFromId(56));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(56));
    AICampaignStart(gv_pLAYER_07_SHARD);
    auto96F9FDC1_var = gv_pLAYER_03_ENEMY;
    for ( ; auto96F9FDC1_var <= auto96F9FDC1_ae; auto96F9FDC1_var += 1 ) {
        AISetBullyRebuildDelay(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 240.0, 240.0, 120.0, 120.0, 0.0, 0.0), libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 240.0, 240.0, 120.0, 120.0, 0.0, 0.0), auto96F9FDC1_var);
    }
    AICampaignStart(gv_pLAYER_08_PIRATES);
    TriggerExecute(gt_AIAttackWavesA, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6D69A95A_val;
    fixed autoA85B9F66_at;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetupBonusObjective, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, true);
    TriggerExecute(gt_ObjectiveDontLetShardActivateCreate, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto6D69A95A_val = RandomInt(1, 3);
    if (auto6D69A95A_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro1KR", true, -1);
    }
    else if (auto6D69A95A_val == 2) {
        libCOMI_gf_SendMissionTransmission("Intro2KR", true, -1);
    }
    else if (auto6D69A95A_val == 3) {
        libCOMI_gf_SendMissionTransmission("Intro3KR", true, -1);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(7.0, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_TipReadyQ, true, false);
    autoA85B9F66_at = 0;
    while (!((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionFromId(57), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) && autoA85B9F66_at <= 240.0) {
        Wait(1.0, c_timeGame);
        autoA85B9F66_at = autoA85B9F66_at + 1.0;
    }
    TriggerExecute(gt_SetupVoidShardSpawning, true, false);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_StartSpawningVoidShards, true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(1), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(1), true, false);
    TriggerExecute(gt_ShowShortestTimerinTimerWindow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Set AttackWave Pattern
//--------------------------------------------------------------------------------------------------
bool gt_DebugSetAttackWavePattern_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackWavePattern = StringToInt(StringWord(EventChatMessage(false), 2));
    if (((gv_attackWavePattern == 1) || (gv_attackWavePattern == 2))) {
        if ((gv_attackWavePattern == 1)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/3A2EE43C"), true);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/EDD15206"), true);
        }
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/0D2FA8C9"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugSetAttackWavePattern_Init () {
    gt_DebugSetAttackWavePattern = TriggerCreate("gt_DebugSetAttackWavePattern_Func");
    TriggerAddEventChatMessage(gt_DebugSetAttackWavePattern, c_playerAny, "attackwavepattern", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Expire 1
//--------------------------------------------------------------------------------------------------
bool gt_TimerExpire1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[1]) == false)) {
        TriggerExecute(gt_DefeatShardActivated, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerExpire1_Init () {
    gt_TimerExpire1 = TriggerCreate("gt_TimerExpire1_Func");
    TriggerAddEventTimer(gt_TimerExpire1, gv_voidShardStageStartTimer[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Expire 2
//--------------------------------------------------------------------------------------------------
bool gt_TimerExpire2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[2]) == false)) {
        TriggerExecute(gt_DefeatShardActivated, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerExpire2_Init () {
    gt_TimerExpire2 = TriggerCreate("gt_TimerExpire2_Func");
    TriggerAddEventTimer(gt_TimerExpire2, gv_voidShardStageStartTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Expire 3
//--------------------------------------------------------------------------------------------------
bool gt_TimerExpire3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[3]) == false)) {
        TriggerExecute(gt_DefeatShardActivated, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerExpire3_Init () {
    gt_TimerExpire3 = TriggerCreate("gt_TimerExpire3_Func");
    TriggerAddEventTimer(gt_TimerExpire3, gv_voidShardStageStartTimer[3]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Expire 4
//--------------------------------------------------------------------------------------------------
bool gt_TimerExpire4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[4]) == false)) {
        TriggerExecute(gt_DefeatShardActivated, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerExpire4_Init () {
    gt_TimerExpire4 = TriggerCreate("gt_TimerExpire4_Func");
    TriggerAddEventTimer(gt_TimerExpire4, gv_voidShardStageStartTimer[4]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Warning 1
//--------------------------------------------------------------------------------------------------
bool gt_TimerWarning1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[1]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring2Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerWarning1_Init () {
    gt_TimerWarning1 = TriggerCreate("gt_TimerWarning1_Func");
    TriggerAddEventTimer(gt_TimerWarning1, gv_voidShardStageStartWarningTimer[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Warning 2
//--------------------------------------------------------------------------------------------------
bool gt_TimerWarning2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[2]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring2Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerWarning2_Init () {
    gt_TimerWarning2 = TriggerCreate("gt_TimerWarning2_Func");
    TriggerAddEventTimer(gt_TimerWarning2, gv_voidShardStageStartWarningTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Warning 3
//--------------------------------------------------------------------------------------------------
bool gt_TimerWarning3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[3]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring2Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerWarning3_Init () {
    gt_TimerWarning3 = TriggerCreate("gt_TimerWarning3_Func");
    TriggerAddEventTimer(gt_TimerWarning3, gv_voidShardStageStartWarningTimer[3]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Warning 4
//--------------------------------------------------------------------------------------------------
bool gt_TimerWarning4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[4]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring2Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerWarning4_Init () {
    gt_TimerWarning4 = TriggerCreate("gt_TimerWarning4_Func");
    TriggerAddEventTimer(gt_TimerWarning4, gv_voidShardStageStartWarningTimer[4]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Reminder 1
//--------------------------------------------------------------------------------------------------
bool gt_TimerReminder1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[1]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring4Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerReminder1_Init () {
    gt_TimerReminder1 = TriggerCreate("gt_TimerReminder1_Func");
    TriggerAddEventTimer(gt_TimerReminder1, gv_voidShardStageStartReminderTimer[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Reminder 2
//--------------------------------------------------------------------------------------------------
bool gt_TimerReminder2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[2]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring4Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerReminder2_Init () {
    gt_TimerReminder2 = TriggerCreate("gt_TimerReminder2_Func");
    TriggerAddEventTimer(gt_TimerReminder2, gv_voidShardStageStartReminderTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Reminder 3
//--------------------------------------------------------------------------------------------------
bool gt_TimerReminder3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[3]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring4Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerReminder3_Init () {
    gt_TimerReminder3 = TriggerCreate("gt_TimerReminder3_Func");
    TriggerAddEventTimer(gt_TimerReminder3, gv_voidShardStageStartReminderTimer[3]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Reminder 4
//--------------------------------------------------------------------------------------------------
bool gt_TimerReminder4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_voidRiftWatcher_RiftStageGroup[4]) == false)) {
        TriggerExecute(gt_ObjectiveExpiring4Q, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerReminder4_Init () {
    gt_TimerReminder4 = TriggerCreate("gt_TimerReminder4_Func");
    TriggerAddEventTimer(gt_TimerReminder4, gv_voidShardStageStartReminderTimer[4]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Shortest Timer in Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_ShowShortestTimerinTimerWindow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timerWindow;
    int lv_timerIter;
    int lv_lowestTimerIndex;
    fixed lv_lowestRemainingTime;

    // Automatic Variable Declarations
    const int autoD13C6571_ae = gv_c_SpawnedVoidShardStages;
    const int autoD13C6571_ai = 1;

    // Variable Initialization
    lv_timerWindow = c_timerWindowNone;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/0954463C"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    lv_timerWindow = TimerWindowLastCreated();
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gv_spawnedVoidShardsActive > 0)) {
            libCOMI_gf_SetTimerForTimerWindowCampaign(lv_timerWindow, gv_voidShardStart);
        }
        else {
            lv_lowestRemainingTime = 99999.0;
            lv_timerIter = 1;
            for ( ; ( (autoD13C6571_ai >= 0 && lv_timerIter <= autoD13C6571_ae) || (autoD13C6571_ai < 0 && lv_timerIter >= autoD13C6571_ae) ) ; lv_timerIter += autoD13C6571_ai ) {
                if ((TimerIsPaused(gv_voidShardStageStartTimer[lv_timerIter]) == false)) {
                    if ((lv_lowestRemainingTime > TimerGetRemaining(gv_voidShardStageStartTimer[lv_timerIter]))) {
                        lv_lowestTimerIndex = lv_timerIter;
                        lv_lowestRemainingTime = TimerGetRemaining(gv_voidShardStageStartTimer[lv_timerIter]);
                        gv_lowestTimerIndex = lv_lowestTimerIndex;
                    }

                }

            }
            libCOMI_gf_SetTimerForTimerWindowCampaign(lv_timerWindow, gv_voidShardStageStartTimer[lv_lowestTimerIndex]);
        }
        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowShortestTimerinTimerWindow_Init () {
    gt_ShowShortestTimerinTimerWindow = TriggerCreate("gt_ShowShortestTimerinTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Void Shard Spawning
//--------------------------------------------------------------------------------------------------
bool gt_SetupVoidShardSpawning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_l_Stage;
    fixed[gv_c_SpawnedVoidShardStages + 1] lv_l_VoidRiftSpawnTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_voidShardStart, gv_spawnVoidShardTime[1], false, c_timeAI);
    lv_l_Stage = 1;
    lv_l_VoidRiftSpawnTime[lv_l_Stage] = gv_spawnVoidShardTime[lv_l_Stage];
    gv_voidShardSpawnLocations[lv_l_Stage][1] = PointFromId(137);
    TimerStart(gv_voidShardStageStartTimer[lv_l_Stage], lv_l_VoidRiftSpawnTime[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartWarningTimer[lv_l_Stage], gv_spawnVoidShardTimeWarning[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartReminderTimer[lv_l_Stage], gv_spawnVoidShardTimeReminder[lv_l_Stage], false, c_timeAI);
    lv_l_Stage = 2;
    lv_l_VoidRiftSpawnTime[lv_l_Stage] = gv_spawnVoidShardTime[lv_l_Stage];
    gv_voidShardSpawnLocations[lv_l_Stage][1] = PointFromId(334);
    gv_voidShardSpawnLocations[lv_l_Stage][2] = PointFromId(565);
    TimerStart(gv_voidShardStageStartTimer[lv_l_Stage], lv_l_VoidRiftSpawnTime[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartWarningTimer[lv_l_Stage], gv_spawnVoidShardTimeWarning[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartReminderTimer[lv_l_Stage], gv_spawnVoidShardTimeReminder[lv_l_Stage], false, c_timeAI);
    lv_l_Stage = 3;
    lv_l_VoidRiftSpawnTime[lv_l_Stage] = gv_spawnVoidShardTime[lv_l_Stage];
    gv_voidShardSpawnLocations[lv_l_Stage][1] = PointFromId(434);
    gv_voidShardSpawnLocations[lv_l_Stage][2] = PointFromId(580);
    gv_voidShardSpawnLocations[lv_l_Stage][3] = PointFromId(654);
    TimerStart(gv_voidShardStageStartTimer[lv_l_Stage], lv_l_VoidRiftSpawnTime[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartWarningTimer[lv_l_Stage], gv_spawnVoidShardTimeWarning[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartReminderTimer[lv_l_Stage], gv_spawnVoidShardTimeReminder[lv_l_Stage], false, c_timeAI);
    lv_l_Stage = 4;
    lv_l_VoidRiftSpawnTime[lv_l_Stage] = gv_spawnVoidShardTime[lv_l_Stage];
    gv_voidShardSpawnLocations[lv_l_Stage][1] = PointFromId(3415);
    gv_voidShardSpawnLocations[lv_l_Stage][2] = PointFromId(716);
    gv_voidShardSpawnLocations[lv_l_Stage][3] = PointFromId(718);
    gv_voidShardSpawnLocations[lv_l_Stage][4] = PointFromId(1006);
    TimerStart(gv_voidShardStageStartTimer[lv_l_Stage], lv_l_VoidRiftSpawnTime[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartWarningTimer[lv_l_Stage], gv_spawnVoidShardTimeWarning[lv_l_Stage], false, c_timeAI);
    TimerStart(gv_voidShardStageStartReminderTimer[lv_l_Stage], gv_spawnVoidShardTimeReminder[lv_l_Stage], false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupVoidShardSpawning_Init () {
    gt_SetupVoidShardSpawning = TriggerCreate("gt_SetupVoidShardSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Spawning Void Shards
//--------------------------------------------------------------------------------------------------
bool gt_StartSpawningVoidShards_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stageLocal;
    fixed lv_showRiftEarlyTimeLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_showRiftEarlyTimeLocal = 90.0;
    AISetDifficulty(gv_pLAYER_07_SHARD, c_diffWaveAvoidDanger, false);
    lv_stageLocal = 1;
    gv_g_Stage = 1;
    gf_StartVoidShardStage(gv_voidShardSpawnLocations[lv_stageLocal][1], lv_stageLocal);
    Wait(2.0, c_timeAI);
    while (!(((UnitGroupCount(gv_voidRiftWatcher_RiftStageGroup[lv_stageLocal], c_unitCountAlive) <= 0) || (TimerGetRemaining(gv_voidShardStageStartTimer[(lv_stageLocal + 1)]) <= lv_showRiftEarlyTimeLocal)))) {
        Wait(1.0, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    lv_stageLocal = 2;
    gv_g_Stage = 2;
    gf_StartVoidShardStage(gv_voidShardSpawnLocations[lv_stageLocal][1], lv_stageLocal);
    Wait(2.0, c_timeAI);
    while (!(((UnitGroupCount(gv_voidRiftWatcher_RiftStageGroup[lv_stageLocal], c_unitCountAlive) <= 0) || (TimerGetRemaining(gv_voidShardStageStartTimer[(lv_stageLocal + 1)]) <= lv_showRiftEarlyTimeLocal)))) {
        Wait(1.0, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    lv_stageLocal = 3;
    gv_g_Stage = 3;
    gf_StartVoidShardStage(gv_voidShardSpawnLocations[lv_stageLocal][1], lv_stageLocal);
    Wait(2.0, c_timeAI);
    while (!(((UnitGroupCount(gv_voidRiftWatcher_RiftStageGroup[lv_stageLocal], c_unitCountAlive) <= 0) || (TimerGetRemaining(gv_voidShardStageStartTimer[(lv_stageLocal + 1)]) <= lv_showRiftEarlyTimeLocal)))) {
        Wait(1.0, c_timeAI);
    }
    Wait(5.0, c_timeAI);
    lv_stageLocal = 4;
    gv_g_Stage = 4;
    gf_StartVoidShardStage(gv_voidShardSpawnLocations[lv_stageLocal][1], lv_stageLocal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartSpawningVoidShards_Init () {
    gt_StartSpawningVoidShards = TriggerCreate("gt_StartSpawningVoidShards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Shards Attack
//--------------------------------------------------------------------------------------------------
bool gt_VoidShardsAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shardIter;
    unitgroup lv_threatGroup;
    unitgroup lv_targetedGroup;
    point lv_targetPoint;
    int lv_minScoreIter;

    // Automatic Variable Declarations
    unitgroup autoE630E823_g;
    int autoE630E823_u;
    const int autoFB97EBCE_ae = 0;
    const int autoFB97EBCE_ai = -1;

    // Variable Initialization
    lv_threatGroup = UnitGroupEmpty();
    lv_targetedGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_shardsAttack, gv_shardAbility_VoidZone_Cooldown, false, c_timeAI);
    autoE630E823_g = gv_shardsAttacking;
    autoE630E823_u = UnitGroupCount(autoE630E823_g, c_unitCountAll);
    for (;; autoE630E823_u -= 1) {
        lv_shardIter = UnitGroupUnitFromEnd(autoE630E823_g, autoE630E823_u);
        if (lv_shardIter == null) { break; }
        lv_threatGroup = UnitGroupAlliance(UnitGetOwner(lv_shardIter), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_shardIter), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupRemoveUnitGroup(lv_threatGroup, lv_targetedGroup);
        lv_minScoreIter = 4;
        for ( ; ( (autoFB97EBCE_ai >= 0 && lv_minScoreIter <= autoFB97EBCE_ae) || (autoFB97EBCE_ai < 0 && lv_minScoreIter >= autoFB97EBCE_ae) ) ; lv_minScoreIter += autoFB97EBCE_ai ) {
            lv_targetPoint = AIBestTargetPoint(lv_threatGroup, 1, 35, lv_minScoreIter, 3.0, UnitGetPosition(lv_shardIter), 20.0, c_unitAttributeNone);
            if ((lv_targetPoint != null)) {
                UnitIssueOrder(lv_shardIter, OrderTargetingPoint(AbilityCommand("VoidShardACVoidZone", 0), lv_targetPoint), c_orderQueueReplace);
                UnitGroupAddUnitGroup(lv_targetedGroup, UnitGroupFilterRegion(lv_threatGroup, RegionCircle(lv_targetPoint, 3.0), 0));
                lv_targetPoint = null;
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidShardsAttack_Init () {
    gt_VoidShardsAttack = TriggerCreate("gt_VoidShardsAttack_Func");
    TriggerAddEventTimer(gt_VoidShardsAttack, gv_shardsAttack);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Attack Ping
//--------------------------------------------------------------------------------------------------
bool gt_HybridAttackPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    wave lv_attackWave;
    unitgroup lv_hybridGroup;

    // Automatic Variable Declarations
    unitgroup auto8DB514C6_g;
    int auto8DB514C6_u;
    unit auto8DB514C6_var;

    // Variable Initialization
    lv_hybridGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_TransmissionHybridSpawnedQ, true, false);
    lv_attackWave = EventPlayerWave();
    UnitGroupAddUnitGroup(lv_hybridGroup, AIWaveGetUnits(EventPlayerWave()));
    auto8DB514C6_g = lv_hybridGroup;
    auto8DB514C6_u = UnitGroupCount(auto8DB514C6_g, c_unitCountAll);
    for (;; auto8DB514C6_u -= 1) {
        auto8DB514C6_var = UnitGroupUnitFromEnd(auto8DB514C6_g, auto8DB514C6_u);
        if (auto8DB514C6_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto8DB514C6_var, "SetMinimapVisibilityAlways 1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAttackPing_Init () {
    gt_HybridAttackPing = TriggerCreate("gt_HybridAttackPing_Func");
    TriggerAddEventPlayerAIWave(gt_HybridAttackPing, gv_pLAYER_07_SHARD);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid Attack Ping - Merging
//--------------------------------------------------------------------------------------------------
bool gt_HybridAttackPingMerging_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_pingWorthyUnits;
    unit lv_pingWorthyUnitIter;
    int lv_pingWorthyGroupIter;

    // Automatic Variable Declarations
    const int auto3DBFC067_ae = gv_c_PingWorthyUnitGroupCount;
    const int auto3DBFC067_ai = 1;
    const int auto61F82782_ae = gv_c_PingWorthyUnitGroupCount;
    const int auto61F82782_ai = 1;
    unitgroup auto9C1460BC_g;
    int auto9C1460BC_u;
    const int auto54C12C3A_ae = gv_c_PingWorthyUnitGroupCount;
    const int auto54C12C3A_ai = 1;
    const int auto584561A3_ae = gv_c_PingWorthyUnitGroupCount;
    const int auto584561A3_ai = 1;

    // Variable Initialization
    lv_pingWorthyUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingWorthyGroupIter = 1;
    for ( ; ( (auto3DBFC067_ai >= 0 && lv_pingWorthyGroupIter <= auto3DBFC067_ae) || (auto3DBFC067_ai < 0 && lv_pingWorthyGroupIter >= auto3DBFC067_ae) ) ; lv_pingWorthyGroupIter += auto3DBFC067_ai ) {
        gv_pingWorthyUnitGroups[lv_pingWorthyGroupIter] = UnitGroupEmpty();
    }
    lv_pingWorthyUnits = UnitGroup(null, gv_pLAYER_07_SHARD, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_pingWorthyUnits, c_unitCountAlive) == 0)) {
        lv_pingWorthyGroupIter = 1;
        for ( ; ( (auto61F82782_ai >= 0 && lv_pingWorthyGroupIter <= auto61F82782_ae) || (auto61F82782_ai < 0 && lv_pingWorthyGroupIter >= auto61F82782_ae) ) ; lv_pingWorthyGroupIter += auto61F82782_ai ) {
            libCOMI_gf_DestroyPingCoop(gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter]);
            gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter] = c_invalidPingId;
        }
        return true;
    }

    auto9C1460BC_g = lv_pingWorthyUnits;
    auto9C1460BC_u = UnitGroupCount(auto9C1460BC_g, c_unitCountAll);
    for (;; auto9C1460BC_u -= 1) {
        lv_pingWorthyUnitIter = UnitGroupUnitFromEnd(auto9C1460BC_g, auto9C1460BC_u);
        if (lv_pingWorthyUnitIter == null) { break; }
        lv_pingWorthyGroupIter = 1;
        for ( ; ( (auto54C12C3A_ai >= 0 && lv_pingWorthyGroupIter <= auto54C12C3A_ae) || (auto54C12C3A_ai < 0 && lv_pingWorthyGroupIter >= auto54C12C3A_ae) ) ; lv_pingWorthyGroupIter += auto54C12C3A_ai ) {
            if (((UnitGroupCount(gv_pingWorthyUnitGroups[lv_pingWorthyGroupIter], c_unitCountAlive) == 0) || ((UnitGroupCount(gv_pingWorthyUnitGroups[lv_pingWorthyGroupIter], c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_pingWorthyUnitGroups[lv_pingWorthyGroupIter]), UnitGetPosition(lv_pingWorthyUnitIter)) <= 13.0)))) {
                UnitGroupAdd(gv_pingWorthyUnitGroups[lv_pingWorthyGroupIter], lv_pingWorthyUnitIter);
                break;
            }

        }
    }
    lv_pingWorthyGroupIter = 1;
    for ( ; ( (auto584561A3_ai >= 0 && lv_pingWorthyGroupIter <= auto584561A3_ae) || (auto584561A3_ai < 0 && lv_pingWorthyGroupIter >= auto584561A3_ae) ) ; lv_pingWorthyGroupIter += auto584561A3_ai ) {
        if ((UnitGroupCount(gv_pingWorthyUnitGroups[lv_pingWorthyGroupIter], c_unitCountAlive) > 0)) {
            if ((gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), PlayerStartLocation(UnitGetOwner(UnitGroupUnit(lv_pingWorthyUnits, 1))), 270.0, "PingCircle", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter] = PingLastCreated();
                PingSetTooltip(gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter], StringExternal("Param/Value/CE5B3AD9"));
                PingSetScale(gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter], 0.2);
            }

            PingSetPosition(gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter], UnitGetPosition(UnitGroupClosestToPoint(gv_pingWorthyUnitGroups[lv_pingWorthyGroupIter], PointFromId(249))));
        }
        else {
            libCOMI_gf_DestroyPingCoop(gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter]);
            gv_pingWorthyUnitGroupPing[lv_pingWorthyGroupIter] = c_invalidPingId;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HybridAttackPingMerging_Init () {
    gt_HybridAttackPingMerging = TriggerCreate("gt_HybridAttackPingMerging_Func");
    TriggerAddEventTimePeriodic(gt_HybridAttackPingMerging, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Hybrid Spawned Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionHybridSpawnedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionHybridSpawnedQ_Init () {
    gt_TransmissionHybridSpawnedQ = TriggerCreate("gt_TransmissionHybridSpawnedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Hybrid Storm
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideHybridStorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_spawnedVoidShardsActive > 0)) {
        if ((gv_hybridStorm_OnOff == false)) {
            gv_hybridStorm_OnOff = true;
            gf_OnOffHybridStorm(true);
        }

    }
    else {
        if ((gv_hybridStorm_OnOff == true)) {
            gv_hybridStorm_OnOff = false;
            gf_OnOffHybridStorm(false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideHybridStorm_Init () {
    gt_ShowHideHybridStorm = TriggerCreate("gt_ShowHideHybridStorm_Func");
    TriggerAddEventTimePeriodic(gt_ShowHideHybridStorm, 0.25, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_SetupBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_bonusObjectiveTimer[1], gv_createBonusObjectiveTarget[1], false, c_timeGame);
    TimerStart(gv_bonusObjectiveTimer[2], gv_createBonusObjectiveTarget[2], false, c_timeGame);
    gv_bonusObjectiveCrates[1] = RegionFromId(8);
    gv_bonusObjectiveCrates[2] = RegionFromId(9);
    TriggerEnable(gt_StartBonus02Early, true);
    TriggerExecute(gt_InitializeBonus02Early, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBonusObjective_Init () {
    gt_SetupBonusObjective = TriggerCreate("gt_SetupBonusObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective 01
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateBonusObjectiveUnit(1, PointFromId(391));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective01_Init () {
    gt_StartBonusObjective01 = TriggerCreate("gt_StartBonusObjective01_Func");
    TriggerAddEventTimer(gt_StartBonusObjective01, gv_bonusObjectiveTimer[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective 02
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_CreateBonusObjectiveUnit(2, PointFromId(910));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective02_Init () {
    gt_StartBonusObjective02 = TriggerCreate("gt_StartBonusObjective02_Func");
    TriggerAddEventTimer(gt_StartBonusObjective02, gv_bonusObjectiveTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus 02 Early
//--------------------------------------------------------------------------------------------------
bool gt_StartBonus02Early_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    fixed autoDA7F06BC_at;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((gv_finalStage == true) || ((gv_bonus02DefenderCount * 0.75) >= UnitGroupCount(gv_bonus02Defenders, c_unitCountAlive))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_finalStage == true)) {
        autoDA7F06BC_at = 0;
        while (!((TriggerQueueIsEmpty() == true)) && autoDA7F06BC_at <= 6.0) {
            Wait(0.2, c_timeGame);
            autoDA7F06BC_at = autoDA7F06BC_at + 0.2;
        }
        Wait(2.0, c_timeGame);
    }

    TriggerExecute(gt_StartBonusObjective02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonus02Early_Init () {
    gt_StartBonus02Early = TriggerCreate("gt_StartBonus02Early_Func");
    TriggerEnable(gt_StartBonus02Early, false);
    TriggerAddEventTimePeriodic(gt_StartBonus02Early, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Bonus 02 Early
//--------------------------------------------------------------------------------------------------
bool gt_InitializeBonus02Early_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7B84B583_g;
    int auto7B84B583_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B84B583_g = libCOMI_gv_vU_EnemyAI;
    auto7B84B583_var = -1;
    while (true) {
        auto7B84B583_var = PlayerGroupNextPlayer(auto7B84B583_g, auto7B84B583_var);
        if (auto7B84B583_var < 0) { break; }
        UnitGroupAddUnitGroup(gv_bonus02Defenders, UnitGroup(null, auto7B84B583_var, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    gv_bonus02DefenderCount = UnitGroupCount(gv_bonus02Defenders, c_unitCountAlive);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeBonus02Early_Init () {
    gt_InitializeBonus02Early = TriggerCreate("gt_InitializeBonus02Early_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Revealed Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRevealedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstShardAppear == true)) {
        gv_firstShardAppear = false;
        libCOMI_gf_SendMissionTransmission("FirstShard", true, -1);
    }
    else {
        if ((gv_finalStage == true)) {
            libCOMI_gf_SendMissionTransmission("LastShards", true, -1);
        }
        else {
            libCOMI_gf_SendMissionTransmission("MultipleShards", true, -1);
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRevealedQ_Init () {
    gt_ObjectiveRevealedQ = TriggerCreate("gt_ObjectiveRevealedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Expiring 2 Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExpiring2Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstShardDestruction == true)) {
        libCOMI_gf_SendMissionTransmission("2MinuteFirst", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("2MinuteWarning", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(UnitGroup(gv_c_SpawnedVoidShard, gv_pLAYER_07_SHARD, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 2.0, Color(100.00, 0.00, 0.00));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExpiring2Q_Init () {
    gt_ObjectiveExpiring2Q = TriggerCreate("gt_ObjectiveExpiring2Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Expiring 4 Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveExpiring4Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstShardDestruction == true)) {
        libCOMI_gf_SendMissionTransmission("4MinuteFirst", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("4MinuteWarning", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGroupCenterOfGroup(UnitGroup(gv_c_SpawnedVoidShard, gv_pLAYER_07_SHARD, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 2.0, Color(100.00, 0.00, 0.00));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveExpiring4Q_Init () {
    gt_ObjectiveExpiring4Q = TriggerCreate("gt_ObjectiveExpiring4Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective 1 Revealed Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjective1RevealedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjective1KR", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjective1RevealedQ_Init () {
    gt_BonusObjective1RevealedQ = TriggerCreate("gt_BonusObjective1RevealedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective 2 Revealed Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjective2RevealedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjective2KR", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjective2RevealedQ_Init () {
    gt_BonusObjective2RevealedQ = TriggerCreate("gt_BonusObjective2RevealedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteKR", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCompleteQ_Init () {
    gt_BonusObjectiveCompleteQ = TriggerCreate("gt_BonusObjectiveCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Almost Expired Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveAlmostExpiredQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_l_TimerIndex;

    // Automatic Variable Declarations
    const int auto841C90EC_ae = gv_c_BonusObjectiveTarget_Max;
    int auto841C90EC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto841C90EC_var = 1;
    for ( ; auto841C90EC_var <= auto841C90EC_ae; auto841C90EC_var += 1 ) {
        if ((EventTimer() == gv_bonusObjectiveTargetLifeAlmostOut[auto841C90EC_var])) {
            lv_l_TimerIndex = auto841C90EC_var;
            break;
        }

    }
    if ((lv_l_TimerIndex == 0)) {
        return true;
    }

    if ((ObjectiveGetState(gv_objectiveDestroyPirateShip[lv_l_TimerIndex]) != c_objectiveStateActive)) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveExpiring", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveAlmostExpiredQ_Init () {
    gt_BonusObjectiveAlmostExpiredQ = TriggerCreate("gt_BonusObjectiveAlmostExpiredQ_Func");
    TriggerAddEventTimer(gt_BonusObjectiveAlmostExpiredQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveFailedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusEscapedKR", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveFailedQ_Init () {
    gt_BonusObjectiveFailedQ = TriggerCreate("gt_BonusObjectiveFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Shard Activated
//--------------------------------------------------------------------------------------------------
bool gt_DefeatShardActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_l_CameraTarget;

    // Automatic Variable Declarations
    unitgroup auto185E0386_g;
    int auto185E0386_u;
    unit auto185E0386_var;
    playergroup auto1D135C70_g;
    int auto1D135C70_var;
    playergroup auto4FBA5533_g;
    int auto4FBA5533_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyVoidShardsFailed, true, false);
    TriggerExecute(gt_ObjectiveDontLetShardActivateFailed, true, false);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatKR", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B548C516"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    auto185E0386_g = UnitGroup(gv_c_SpawnedVoidShard, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto185E0386_u = UnitGroupCount(auto185E0386_g, c_unitCountAll);
    for (;; auto185E0386_u -= 1) {
        auto185E0386_var = UnitGroupUnitFromEnd(auto185E0386_g, auto185E0386_u);
        if (auto185E0386_var == null) { break; }
        UnitSetState(auto185E0386_var, c_unitStateInvulnerable, true);
        lv_l_CameraTarget = UnitGetPosition(auto185E0386_var);
        auto1D135C70_g = PlayerGroupAll();
        auto1D135C70_var = -1;
        while (true) {
            auto1D135C70_var = PlayerGroupNextPlayer(auto1D135C70_g, auto1D135C70_var);
            if (auto1D135C70_var < 0) { break; }
            VisRevealArea(auto1D135C70_var, RegionCircle(UnitGetPosition(auto185E0386_var), 10.0), 0.0, false);
        }
        break;
    }
    libCOMI_gf_MoveCameraForAllPlayers(lv_l_CameraTarget, 1.5);
    Wait(3.0, c_timeGame);
    PlayerCreateEffectPoint(gv_pLAYER_04_ENEMY, "HeroNukeDamage", lv_l_CameraTarget);
    SoundPlayForPlayer(SoundLink("VoidTendril_Shockwave_FXFire", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Explosion_Distant_2D", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Mission_End_2D_Nuke_Explosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("pAiur02_Cine_Amon_Quake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto4FBA5533_g = PlayerGroupAll();
    auto4FBA5533_var = -1;
    while (true) {
        auto4FBA5533_var = PlayerGroupNextPlayer(auto4FBA5533_g, auto4FBA5533_var);
        if (auto4FBA5533_var < 0) { break; }
        CameraShake(auto4FBA5533_var, "Massive", "Earthquake", 0.25, 0.0, 5.0);
    }
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatShardActivated_Init () {
    gt_DefeatShardActivated = TriggerCreate("gt_DefeatShardActivated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Destory the Spawning Rifts Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDestorytheSpawningRiftsCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyVoidShardsComplete, true, false);
    TriggerExecute(gt_ObjectiveDontLetShardActivateComplete, true, false);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryKR");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/A595D12F"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_victorySpawningRiftsComplete, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDestorytheSpawningRiftsCompleted_Init () {
    gt_VictoryDestorytheSpawningRiftsCompleted = TriggerCreate("gt_VictoryDestorytheSpawningRiftsCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Effort - Defeat
//--------------------------------------------------------------------------------------------------
bool gt_MissionEffortDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB0250B9C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB0250B9C_val = gv_summonedVoidShardsDestroyed;
    if (autoB0250B9C_val == 2) {
        libCOMI_gf_SetMissionEffort(10.0);
    }
    else if (autoB0250B9C_val == 3) {
        libCOMI_gf_SetMissionEffort(20.0);
    }
    else if (autoB0250B9C_val == 4) {
        libCOMI_gf_SetMissionEffort(40.0);
    }
    else if (autoB0250B9C_val == 5) {
        libCOMI_gf_SetMissionEffort(60.0);
    }
    else if (autoB0250B9C_val == 6) {
        libCOMI_gf_SetMissionEffort(80.0);
    }
    else if (autoB0250B9C_val == 7) {
        libCOMI_gf_SetMissionEffort(100.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionEffortDefeat_Init () {
    gt_MissionEffortDefeat = TriggerCreate("gt_MissionEffortDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_DisplayMissionTip();
    Wait(libCOMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Danger Maps Usage On
//--------------------------------------------------------------------------------------------------
bool gt_AIDangerMapsUsageOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetMissionDifficulty() != 1))) {
            return false;
        }

        if (!((libCOMI_gf_GetMissionDifficulty() != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetDifficulty(gv_pLAYER_03_ENEMY, c_diffEnableDangerMap, true);
    AISetDifficulty(gv_pLAYER_03_ENEMY, c_diffWaveAvoidDanger, true);
    AISetDifficulty(gv_pLAYER_04_ENEMY, c_diffEnableDangerMap, true);
    AISetDifficulty(gv_pLAYER_04_ENEMY, c_diffWaveAvoidDanger, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIDangerMapsUsageOn_Init () {
    gt_AIDangerMapsUsageOn = TriggerCreate("gt_AIDangerMapsUsageOn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves A
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWavesA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWaveA01, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA03, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA04, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA05, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA06, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AIDangerMapsUsageOn, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA07, (20.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA07, (24.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA07, (26.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA07, (28.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveA07, (30.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWavesA_Init () {
    gt_AIAttackWavesA = TriggerCreate("gt_AIAttackWavesA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA01_Init () {
    gt_AttackWaveA01 = TriggerCreate("gt_AttackWaveA01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA02_Init () {
    gt_AttackWaveA02 = TriggerCreate("gt_AttackWaveA02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    playergroup auto200FB8AA_g;
    int auto200FB8AA_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    auto200FB8AA_g = libCOMI_gf_HumanPlayers();
    auto200FB8AA_var = -1;
    while (true) {
        auto200FB8AA_var = PlayerGroupNextPlayer(auto200FB8AA_g, auto200FB8AA_var);
        if (auto200FB8AA_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, auto200FB8AA_var, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, auto200FB8AA_var, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(367))) {
        gv_attackWaveA_Wave05Path = PointFromId(358);
    }
    else {
        gv_attackWaveA_Wave05Path = PointFromId(367);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA03_Init () {
    gt_AttackWaveA03 = TriggerCreate("gt_AttackWaveA03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA04_Init () {
    gt_AttackWaveA04 = TriggerCreate("gt_AttackWaveA04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA05_Init () {
    gt_AttackWaveA05 = TriggerCreate("gt_AttackWaveA05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA06_Init () {
    gt_AttackWaveA06 = TriggerCreate("gt_AttackWaveA06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave A 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveA07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveA07_Init () {
    gt_AttackWaveA07 = TriggerCreate("gt_AttackWaveA07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Expo Template
//--------------------------------------------------------------------------------------------------
bool gt_AttackExpoTemplate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    playergroup auto8F70C61E_g;
    int auto8F70C61E_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    auto8F70C61E_g = libCOMI_gf_HumanPlayers();
    auto8F70C61E_var = -1;
    while (true) {
        auto8F70C61E_var = PlayerGroupNextPlayer(auto8F70C61E_g, auto8F70C61E_var);
        if (auto8F70C61E_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, auto8F70C61E_var, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, auto8F70C61E_var, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackExpoTemplate_Init () {
    gt_AttackExpoTemplate = TriggerCreate("gt_AttackExpoTemplate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves B
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWavesB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWaveB01a, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB01b, (3.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB01c, (4.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB02a, (7.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB02b, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB02c, (9.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB03a, (12.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB03b, (13.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB03c, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB04a, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB04b, (18.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB04c, (19.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AIDangerMapsUsageOn, (22.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB05a, (23.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB05b, (24.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB05c, (25.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB06a, (28.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB06b, (29.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWaveB06c, (30.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWavesB_Init () {
    gt_AIAttackWavesB = TriggerCreate("gt_AIAttackWavesB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 01a
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB01a_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB01a_Init () {
    gt_AttackWaveB01a = TriggerCreate("gt_AttackWaveB01a_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 01b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB01b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB01b_Init () {
    gt_AttackWaveB01b = TriggerCreate("gt_AttackWaveB01b_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 01c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB01c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB01c_Init () {
    gt_AttackWaveB01c = TriggerCreate("gt_AttackWaveB01c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 02a
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB02a_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB02a_Init () {
    gt_AttackWaveB02a = TriggerCreate("gt_AttackWaveB02a_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 02b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB02b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    playergroup auto3DC70EC0_g;
    int auto3DC70EC0_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    auto3DC70EC0_g = libCOMI_gf_HumanPlayers();
    auto3DC70EC0_var = -1;
    while (true) {
        auto3DC70EC0_var = PlayerGroupNextPlayer(auto3DC70EC0_g, auto3DC70EC0_var);
        if (auto3DC70EC0_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, auto3DC70EC0_var, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, auto3DC70EC0_var, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB02b_Init () {
    gt_AttackWaveB02b = TriggerCreate("gt_AttackWaveB02b_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 02c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB02c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB02c_Init () {
    gt_AttackWaveB02c = TriggerCreate("gt_AttackWaveB02c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 03a
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB03a_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB03a_Init () {
    gt_AttackWaveB03a = TriggerCreate("gt_AttackWaveB03a_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 03b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB03b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB03b_Init () {
    gt_AttackWaveB03b = TriggerCreate("gt_AttackWaveB03b_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 03c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB03c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    playergroup auto11C097AB_g;
    int auto11C097AB_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    auto11C097AB_g = libCOMI_gf_HumanPlayers();
    auto11C097AB_var = -1;
    while (true) {
        auto11C097AB_var = PlayerGroupNextPlayer(auto11C097AB_g, auto11C097AB_var);
        if (auto11C097AB_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, auto11C097AB_var, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, auto11C097AB_var, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB03c_Init () {
    gt_AttackWaveB03c = TriggerCreate("gt_AttackWaveB03c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 04a
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB04a_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB04a_Init () {
    gt_AttackWaveB04a = TriggerCreate("gt_AttackWaveB04a_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 04b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB04b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB04b_Init () {
    gt_AttackWaveB04b = TriggerCreate("gt_AttackWaveB04b_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 04c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB04c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB04c_Init () {
    gt_AttackWaveB04c = TriggerCreate("gt_AttackWaveB04c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 05a
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB05a_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    playergroup autoE805DB98_g;
    int autoE805DB98_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    autoE805DB98_g = libCOMI_gf_HumanPlayers();
    autoE805DB98_var = -1;
    while (true) {
        autoE805DB98_var = PlayerGroupNextPlayer(autoE805DB98_g, autoE805DB98_var);
        if (autoE805DB98_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, autoE805DB98_var, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, autoE805DB98_var, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB05a_Init () {
    gt_AttackWaveB05a = TriggerCreate("gt_AttackWaveB05a_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 05b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB05b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB05b_Init () {
    gt_AttackWaveB05b = TriggerCreate("gt_AttackWaveB05b_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 05c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB05c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB05c_Init () {
    gt_AttackWaveB05c = TriggerCreate("gt_AttackWaveB05c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 06a
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB06a_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB06a_Init () {
    gt_AttackWaveB06a = TriggerCreate("gt_AttackWaveB06a_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 06b
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB06b_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB06b_Init () {
    gt_AttackWaveB06b = TriggerCreate("gt_AttackWaveB06b_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave B 06c
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveB06c_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveGather(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveB06c_Init () {
    gt_AttackWaveB06c = TriggerCreate("gt_AttackWaveB06c_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_KorhalRift_Primary01");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_KorhalRift_Primary01", gv_objectiveDestroyVoidShardsRequired);
    gv_objectiveDestroyVoidShardsObjective = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsCreate_Init () {
    gt_ObjectiveDestroyVoidShardsCreate = TriggerCreate("gt_ObjectiveDestroyVoidShardsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsComplete_Init () {
    gt_ObjectiveDestroyVoidShardsComplete = TriggerCreate("gt_ObjectiveDestroyVoidShardsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_KorhalRift_Primary01", gv_summonedVoidShardsDestroyed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsUpdate_Init () {
    gt_ObjectiveDestroyVoidShardsUpdate = TriggerCreate("gt_ObjectiveDestroyVoidShardsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Void Shards - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyVoidShardsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyVoidShardsCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyVoidShardsFailed_Init () {
    gt_ObjectiveDestroyVoidShardsFailed = TriggerCreate("gt_ObjectiveDestroyVoidShardsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Let Shard Activate - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetShardActivateCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_KorhalRift_Primary05");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_KorhalRift_Primary05", gv_dontLetVoidShardActivateAllowed);
    gv_objectiveDontLetShardActivate = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objectiveDontLetShardActivate, 3);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetShardActivateCreate_Init () {
    gt_ObjectiveDontLetShardActivateCreate = TriggerCreate("gt_ObjectiveDontLetShardActivateCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Let Shard Activate - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetShardActivateComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDontLetShardActivateCreate, true, false);
    ObjectiveSetState(gv_objectiveDontLetShardActivate, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetShardActivateComplete_Init () {
    gt_ObjectiveDontLetShardActivateComplete = TriggerCreate("gt_ObjectiveDontLetShardActivateComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Let Shard Activate - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetShardActivateUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDontLetShardActivateCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_KorhalRift_Primary05", gv_dontLetVoidShardActivateCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetShardActivateUpdate_Init () {
    gt_ObjectiveDontLetShardActivateUpdate = TriggerCreate("gt_ObjectiveDontLetShardActivateUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Don't Let Shard Activate - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetShardActivateFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDontLetShardActivateCreate, true, false);
    ObjectiveSetState(gv_objectiveDontLetShardActivate, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetShardActivateFailed_Init () {
    gt_ObjectiveDontLetShardActivateFailed = TriggerCreate("gt_ObjectiveDontLetShardActivateFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 01 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip01Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_KorhalRift_Bonus01");
    gv_objectiveDestroyPirateShip[1] = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip01Create_Init () {
    gt_ObjectiveDestroyPirateShip01Create = TriggerCreate("gt_ObjectiveDestroyPirateShip01Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 01 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip01Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPirateShip01Create, true, false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_KorhalRift_Bonus01", StringToText(""));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip01Complete_Init () {
    gt_ObjectiveDestroyPirateShip01Complete = TriggerCreate("gt_ObjectiveDestroyPirateShip01Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 01 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip01Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPirateShip01Create, true, false);
    TextExpressionSetToken("Param/Expression/C77F2774", "ObjectiveText", libCOMI_gf_MissionObjectiveName("AC_KorhalRift_Bonus01"));
    ObjectiveSetName(gv_objectiveDestroyPirateShip[1], TextExpressionAssemble("Param/Expression/C77F2774"));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip01Failed_Init () {
    gt_ObjectiveDestroyPirateShip01Failed = TriggerCreate("gt_ObjectiveDestroyPirateShip01Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 02 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip02Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_KorhalRift_Bonus02");
    gv_objectiveDestroyPirateShip[2] = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip02Create_Init () {
    gt_ObjectiveDestroyPirateShip02Create = TriggerCreate("gt_ObjectiveDestroyPirateShip02Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 02 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip02Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPirateShip02Create, true, false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_KorhalRift_Bonus02", StringToText(""));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Bonus02", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip02Complete_Init () {
    gt_ObjectiveDestroyPirateShip02Complete = TriggerCreate("gt_ObjectiveDestroyPirateShip02Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 02 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip02Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPirateShip02Create, true, false);
    TextExpressionSetToken("Param/Expression/C090526F", "ObjectiveText", libCOMI_gf_MissionObjectiveName("AC_KorhalRift_Bonus02"));
    ObjectiveSetName(gv_objectiveDestroyPirateShip[2], TextExpressionAssemble("Param/Expression/C090526F"));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Bonus02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip02Failed_Init () {
    gt_ObjectiveDestroyPirateShip02Failed = TriggerCreate("gt_ObjectiveDestroyPirateShip02Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 03 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip03Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_KorhalRift_Bonus03");
    gv_objectiveDestroyPirateShip[3] = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip03Create_Init () {
    gt_ObjectiveDestroyPirateShip03Create = TriggerCreate("gt_ObjectiveDestroyPirateShip03Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 03 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip03Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPirateShip03Create, true, false);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_KorhalRift_Bonus03", StringToText(""));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Bonus03", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip03Complete_Init () {
    gt_ObjectiveDestroyPirateShip03Complete = TriggerCreate("gt_ObjectiveDestroyPirateShip03Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy Pirate Ship 03 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPirateShip03Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyPirateShip03Create, true, false);
    TextExpressionSetToken("Param/Expression/BFF5D072", "ObjectiveText", libCOMI_gf_MissionObjectiveName("AC_KorhalRift_Bonus03"));
    ObjectiveSetName(gv_objectiveDestroyPirateShip[2], TextExpressionAssemble("Param/Expression/BFF5D072"));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KorhalRift_Bonus03", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPirateShip03Failed_Init () {
    gt_ObjectiveDestroyPirateShip03Failed = TriggerCreate("gt_ObjectiveDestroyPirateShip03Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init03LoadingComplete_Init();
    gt_Init05Units_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
    gt_DebugSetAttackWavePattern_Init();
    gt_TimerExpire1_Init();
    gt_TimerExpire2_Init();
    gt_TimerExpire3_Init();
    gt_TimerExpire4_Init();
    gt_TimerWarning1_Init();
    gt_TimerWarning2_Init();
    gt_TimerWarning3_Init();
    gt_TimerWarning4_Init();
    gt_TimerReminder1_Init();
    gt_TimerReminder2_Init();
    gt_TimerReminder3_Init();
    gt_TimerReminder4_Init();
    gt_ShowShortestTimerinTimerWindow_Init();
    gt_SetupVoidShardSpawning_Init();
    gt_StartSpawningVoidShards_Init();
    gt_VoidShardsAttack_Init();
    gt_HybridAttackPing_Init();
    gt_HybridAttackPingMerging_Init();
    gt_TransmissionHybridSpawnedQ_Init();
    gt_ShowHideHybridStorm_Init();
    gt_SetupBonusObjective_Init();
    gt_StartBonusObjective01_Init();
    gt_StartBonusObjective02_Init();
    gt_StartBonus02Early_Init();
    gt_InitializeBonus02Early_Init();
    gt_EnemyAttackingQ_Init();
    gt_ObjectiveRevealedQ_Init();
    gt_ObjectiveExpiring2Q_Init();
    gt_ObjectiveExpiring4Q_Init();
    gt_BonusObjective1RevealedQ_Init();
    gt_BonusObjective2RevealedQ_Init();
    gt_BonusObjectiveCompleteQ_Init();
    gt_BonusObjectiveAlmostExpiredQ_Init();
    gt_BonusObjectiveFailedQ_Init();
    gt_DefeatShardActivated_Init();
    gt_VictoryDestorytheSpawningRiftsCompleted_Init();
    gt_MissionEffortDefeat_Init();
    gt_TipReadyQ_Init();
    gt_AIDangerMapsUsageOn_Init();
    gt_AIAttackWavesA_Init();
    gt_AttackWaveA01_Init();
    gt_AttackWaveA02_Init();
    gt_AttackWaveA03_Init();
    gt_AttackWaveA04_Init();
    gt_AttackWaveA05_Init();
    gt_AttackWaveA06_Init();
    gt_AttackWaveA07_Init();
    gt_AttackExpoTemplate_Init();
    gt_AIAttackWavesB_Init();
    gt_AttackWaveB01a_Init();
    gt_AttackWaveB01b_Init();
    gt_AttackWaveB01c_Init();
    gt_AttackWaveB02a_Init();
    gt_AttackWaveB02b_Init();
    gt_AttackWaveB02c_Init();
    gt_AttackWaveB03a_Init();
    gt_AttackWaveB03b_Init();
    gt_AttackWaveB03c_Init();
    gt_AttackWaveB04a_Init();
    gt_AttackWaveB04b_Init();
    gt_AttackWaveB04c_Init();
    gt_AttackWaveB05a_Init();
    gt_AttackWaveB05b_Init();
    gt_AttackWaveB05c_Init();
    gt_AttackWaveB06a_Init();
    gt_AttackWaveB06b_Init();
    gt_AttackWaveB06c_Init();
    gt_ObjectiveDestroyVoidShardsCreate_Init();
    gt_ObjectiveDestroyVoidShardsComplete_Init();
    gt_ObjectiveDestroyVoidShardsUpdate_Init();
    gt_ObjectiveDestroyVoidShardsFailed_Init();
    gt_ObjectiveDontLetShardActivateCreate_Init();
    gt_ObjectiveDontLetShardActivateComplete_Init();
    gt_ObjectiveDontLetShardActivateUpdate_Init();
    gt_ObjectiveDontLetShardActivateFailed_Init();
    gt_ObjectiveDestroyPirateShip01Create_Init();
    gt_ObjectiveDestroyPirateShip01Complete_Init();
    gt_ObjectiveDestroyPirateShip01Failed_Init();
    gt_ObjectiveDestroyPirateShip02Create_Init();
    gt_ObjectiveDestroyPirateShip02Complete_Init();
    gt_ObjectiveDestroyPirateShip02Failed_Init();
    gt_ObjectiveDestroyPirateShip03Create_Init();
    gt_ObjectiveDestroyPirateShip03Complete_Init();
    gt_ObjectiveDestroyPirateShip03Failed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
