//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Falling Sky
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC 2017: ????????????
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library: GAME Library
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Begin = 0;
const int lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_First = 1;
const int lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Second = 2;
const int lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Third = 3;
const int lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Fourth = 4;
const int lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_End = 5;
const int lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Error = 6;
const int lib1_ge_PING_ModelType_GeneratorActive = 0;
const int lib1_ge_PING_ModelType_GeneratorSleep = 1;
const int lib1_ge_PING_ModelType_GiantCrater = 2;
const int lib1_ge_PING_ModelType_GiantFall = 3;
const int lib1_ge_PING_ModelType_GiantImpact = 4;
const int lib1_ge_PING_ModelType_MeteoriteImpact = 5;
const int lib1_ge_PING_ModelType_ShieldAreaActive = 6;
const int lib1_ge_PING_ModelType_ShieldAreaSleep = 7;
const int lib1_ge_PING_ModelType_SolarCrystal = 8;
const int lib1_ge_PING_ModelType_PhotonicAnchor = 9;
const int lib1_ge_PING_ModelType_DropPrompt = 10;
const int lib1_ge_PING_ModelType_SolarCrystalInteract = 11;
const int lib1_ge_PING_ModelType_PickupedWorker = 12;
const int lib1_ge_PING_ModelType_HybridDominator = 13;
const int lib1_ge_PING_ModelType_VoidSeeker = 14;
const int lib1_ge_COOP_AI_Wave_StartPointType_Point0 = 0;
const int lib1_ge_COOP_AI_Wave_StartPointType_Point1 = 1;
const int lib1_ge_COOP_AI_Wave_StartPointType_Point2 = 2;
const int lib1_ge_COOP_AI_Wave_StartPointType_Point3 = 3;
const int lib1_ge_COOP_AI_Wave_StartPointType_Point4 = 4;
const int lib1_ge_COOP_AI_Wave_StartTargetType_PlayerBase = 0;
const int lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec = 1;
const int lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator = 2;
const int lib1_ge_COOP_AI_Wave_StartTargetType_SolarCrystal = 3;
const int lib1_ge_COOP_Objectives_Type_GameTime = 0;
const int lib1_ge_COOP_Objectives_Type_GiantMeteoritesImpact = 1;
const int lib1_ge_COOP_Objectives_Type_DestroyMegalith = 2;
// Constants
const string lib1_gv_sOLARCRYSTAL_HashtableName = "SOLARCRYSTAL_Hashtable::";
const int lib1_gv_sOLARCRYSTAL_SolarCrystalPlayer = 0;
const string lib1_gv_sOLARCRYSTAL_Vespene = "::Vespene";
const string lib1_gv_sOLARCRYSTAL_Mineral = "::Mineral";
const string lib1_gv_sOLARCRYSTAL_SpectroscopeName = "::Spectroscope::";
const string lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithName = "::Megalith::";
const string lib1_gv_sOLARCRYSTAL_Spectroscope_StartIndex = "::StartIndex::";
const int lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCount = 2;
const string lib1_gv_pING_HashtableName = "PING_Hashtable::";
const string lib1_gv_pING_HashtablePingName = "::Ping";
const string lib1_gv_pING_HashtableActorName = "::Actor";
const string lib1_gv_pING_HashtablePathName = "::Path";
const string lib1_gv_pING_HashtableUnitName = "::Unit::";
const string lib1_gv_pING_HashtableSpellerName = "::Speller::";
const fixed lib1_gv_pING_MeteoritesRainMicroLoopPromptTime = 16.5;
const int lib1_gv_pING_ModelTypeDataStruct_Count = 14;
const int lib1_gv_mETEORITE_MeteoritePlayer = 0;
const string lib1_gv_mETEORITE_HashtableName = "METEORITE_Hashtable::";
const string lib1_gv_mETEORITE_ShieldGenerator = "::ShieldGenerator::";
const string lib1_gv_mETEORITE_GiantTarget = "::GiantTarget::";
const string lib1_gv_mETEORITE_GiantIndex = "::GiantIndex::";
const string lib1_gv_mETEORITE_Count = "::Count";
const string lib1_gv_mETEORITE_Sound = "::Sound";
const string lib1_gv_mETEORITE_GiantArea = "::GiantArea::";
const int lib1_gv_mETEORITE_GiantAreaMaxCount = 4;
const string lib1_gv_mETEORITE_ShieldName = "::Shield::";
const string lib1_gv_mETEORITE_RandomWeightName = "::RandomWeight::";
const fixed lib1_gv_mETEORITE_MicroImpactRadius = 1.55;
const fixed lib1_gv_mETEORITE_GiantImpactRadius = 3.0;
const int lib1_gv_mETEORITE_MeteoriteTargetTestCount = 7;
const fixed lib1_gv_mETEORITE_MicroDropTime = 20.0;
const fixed lib1_gv_mETEORITE_GiantDropTimeAnim = 480.0;
const fixed lib1_gv_mETEORITE_MeteortietRainMicroBefore = 7.5;
const int lib1_gv_mETEORITE_MaxMeteoriteRianCount = 128;
const int lib1_gv_mETEORITE_ShieldGeneratorCount = 21; //todo make more? 18
const fixed lib1_gv_mETEORITE_MeteoritesRainMicroLoopPerDuration = 5.0;
const string lib1_gv_mETEORITE_WaveName = "::Wave::";
const string lib1_gv_mETEORITE_WaveDropName = "::Drop::";
const string lib1_gv_mETEORITE_WaveMaxRandomDelay = "::RandomDelay::";
const string lib1_gv_mETEORITE_Wave_IntervalString = " ";
const int lib1_gv_mETEORITE_Wave_MicrMeteoriteAllMapMin = 24;
const int lib1_gv_mETEORITE_Wave_MicrMeteoriteAllMapMax = 32;
const int lib1_gv_mETEORITE_Wave_MicrMeteoriteTestCount = 32;
const fixed lib1_gv_mETEORITE_Wave_MicrMeteoriteInterval = 30.0;
const fixed lib1_gv_mETEORITE_Wave_IsGiantImpactCheckRadius = 2.0;
const int lib1_gv_mETEORITE_Wave_MaxTargetPerShield = 7;
const int lib1_gv_mETEORITE_Wave_MaxMeteoritesCountInGiant = 27;
const int lib1_gv_mETEORITE_Wave_MaxMeteoritesCountInMicro = 32;
const string lib1_gv_mETEORITE_ShieldRelationName = "::ShieldRelation::";
const string lib1_gv_mETEORITE_NeighborName = "::Neighbor::";
const int lib1_gv_mETEORITE_ShieldRelation_LevelCount = 4;
const string lib1_gv_cOOP_HashtablName = "AI_HashtablName::";
int lib1_gv_cOOP_Init_PLAYER_01_USER = 1;
int lib1_gv_cOOP_Init_PLAYER_02_USER = 2;
const int lib1_gv_cOOP_Init_PLAYER_03_ENEMY = 6;
const int lib1_gv_cOOP_Init_PLAYER_04_ENEMY = 7;
const string lib1_gv_cOOP_AI_Wave_Name = "::Wave::";
const string lib1_gv_cOOP_AI_Wave_TargetName = "::Target";
const string lib1_gv_cOOP_AI_Wave_PointName = "::Point";
const string lib1_gv_cOOP_AI_Wave_BucketsName = "::Buckets";
const string lib1_gv_cOOP_AI_Wave_TechName = "::Tech";
const string lib1_gv_cOOP_AI_Wave_DifficultyName = "::Difficulty";
const int lib1_gv_cOOP_AI_Wave_PointCount = 5;
const string lib1_gv_cOOP_Objectives_Name = "::Objectives::";
// Structures
struct lib1_gs_SOLARCRYSTAL_Spectroscope_MegalithCutter {
    unit lv_unit;
    unit lv_cybrosLock;
    unit lv_spectroscope;
    int lv_step;
    bool lv_isStart;
    int lv_ping;
    string lv_bonusStart;
    string lv_bonusFinsih;
    string lv_bonusFail;
};
struct lib1_gs_PING_ModelTypeDataStruct {
    fixed lv_angle;
    string lv_model;
    fixed lv_scale;
    color lv_color;
    fixed lv_duration;
    fixed lv_depth;
    text lv_tooltip;
};
struct lib1_gs_METEORITE_ShieldGeneratorInfo {
    unit lv_unit;
    point lv_point;
    string lv_tag;
    int lv_level;
    int lv_neighborCount;
    int[lib1_gv_mETEORITE_ShieldGeneratorCount + 1] lv_neighborIndex;
    bool lv_isMicroPoint;
    bool lv_isImpact;
    int lv_targetCount;
    point[lib1_gv_mETEORITE_Wave_MaxTargetPerShield + 1] lv_targetPointList;
};
// Variable Declarations
bool lib1_gv_lIB_NotOnInit;
int lib1_gv_lIB_TimerWindowInterval;
int lib1_gv_sOLARCRYSTAL_PhotonicAnchor_DestroyCount;
int lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithKillCount;
int lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartCount;
int lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartIndex;
fixed lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter_ObjectivesTime;
lib1_gs_SOLARCRYSTAL_Spectroscope_MegalithCutter[lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCount + 1] lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter;
lib1_gs_PING_ModelTypeDataStruct[lib1_gv_pING_ModelTypeDataStruct_Count + 1] lib1_gv_pING_ModelTypeDataStruct;
string[6] lib1_gv_pING_InteractColorModelForPlayer;
point lib1_gv_mETEORITE_FirstPoint;
bool lib1_gv_mETEORITE_FinishFirstDrop;
bool lib1_gv_mETEORITE_FinishFirstDropAnim;
fixed lib1_gv_mETEORITE_GiantDropTime;
fixed lib1_gv_mETEORITE_GiantDropTimeRemind;
int lib1_gv_mETEORITE_GiantImpactCount;
int lib1_gv_mETEORITE_GiantImpactDefeatCount;
lib1_gs_METEORITE_ShieldGeneratorInfo[lib1_gv_mETEORITE_ShieldGeneratorCount + 1] lib1_gv_mETEORITE_ShieldGeneratorInfoList;
int lib1_gv_mETEORITE_Wave_MeteoriteCount;
int lib1_gv_mETEORITE_Wave_MeteoriteIndex;
int lib1_gv_mETEORITE_Wave_MinMeteoritesCountInGiant;
fixed lib1_gv_mETEORITE_Wave_MeteoritesRainRadiusInGiant;
int lib1_gv_mETEORITE_Wave_MinMeteoritesCountInMicro;
fixed lib1_gv_mETEORITE_Wave_MeteoritesRainRadiusInMicro;
fixed lib1_gv_mETEORITE_Wave_MeteoritesRainDurationInMicro;
timer lib1_gv_mETEORITE_Wave_NextWaveTimer;
int lib1_gv_mETEORITE_Wave_NextWaveTimerWindow;
unitgroup[5] lib1_gv_mETEORITE_Wave_DropTarget;
int[lib1_gv_mETEORITE_ShieldGeneratorCount + 1] lib1_gv_mETEORITE_ShieldRelation_GiantList;
int lib1_gv_mETEORITE_ShieldRelation_GiantCount;
int[lib1_gv_mETEORITE_ShieldGeneratorCount + 1] lib1_gv_mETEORITE_ShieldRelation_MicroList;
int lib1_gv_mETEORITE_ShieldRelation_MicroCount;
int[lib1_gv_mETEORITE_ShieldRelation_LevelCount + 1] lib1_gv_mETEORITE_ShieldRelation_LevelRate;
string lib1_gv_mETEORITE_ShieldRelation_HomeList;
int lib1_gv_mETEORITE_ShieldRelation_RegisterCount;
bool lib1_gv_cOOP_EnableDebug;
playergroup lib1_gv_cOOP_Init_EnemyGroup;
string[5] lib1_gv_cOOP_Init_AICommmander;
string[5] lib1_gv_cOOP_Init_AIRace;
string lib1_gv_cOOP_Init_AIRaceALL;
int lib1_gv_cOOP_Init_AIDifficult;
string lib1_gv_cOOP_PlacedConversion_CountName;
fixed lib1_gv_cOOP_PlacedConversion_MoveRadius;
string lib1_gv_cOOP_TransmissionLastSend;
point[lib1_gv_cOOP_AI_Wave_PointCount + 1] lib1_gv_cOOP_AI_Wave_StartPoint;
actor[lib1_gv_cOOP_AI_Wave_PointCount + 1] lib1_gv_cOOP_AI_Wave_StartDoodad;
int lib1_gv_cOOP_AI_Wave_Count;
int lib1_gv_cOOP_AI_Wave_Index;
unitgroup lib1_gv_cOOP_AI_Wave_HomeShield;
int lib1_gv_cOOP_Objectives_Count;
int lib1_gv_cOOP_Objectives_Index;
int lib1_gv_cOOP_Objective_GameTime;
timer lib1_gv_cOOP_Objective_GameTimer;
fixed lib1_gv_cOOP_Objective_TotalTime;
int lib1_gv_cOOP_Objective_GameTimerWindow;
int lib1_gv_cOOP_Objective_GiantMeteoritesImpact;
int lib1_gv_cOOP_Objective_DestroyMegalith;
int lib1_gv_cOOP_Objective_Zeratul;
// Function Declarations
void lib1_gf_LIB_InitUnit ();
void lib1_gf_LIB_EventList ();
void lib1_gf_LIB_ASSEST (text lp_message, bool lp_showUI);
void lib1_gf_SOLARCRYSTAL_Init ();
bool lib1_gf_SOLARCRYSTAL_IsSolarCrystalAbleTarget (unit lp_speller, unit lp_target);
void lib1_gf_SOLARCRYSTAL_Spectroscope_SetAlive (unit lp_unit);
void lib1_gf_SOLARCRYSTAL_Spectroscope_SetDead (unit lp_unit, bool lp_createCrystal);
void lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Init ();
void lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Register (fixed lp_time, int lp_index);
void lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step (int lp_i);
void lib1_gf_PING_CreatePingForUnit (unit lp_Unit, int lp_Model, bool lp_isAttach);
void lib1_gf_PING_CreatePingForUnitKeepFacing (unit lp_Unit, int lp_Model);
void lib1_gf_PING_CreatePingForInteract (unit lp_target, unit lp_speller);
void lib1_gf_PING_CreatePingOneShot (point lp_Point, fixed lp_Angle, int lp_Model, fixed lp_Duration);
void lib1_gf_PING_ModifyModelForUnit (unit lp_Unit, int lp_Model);
void lib1_gf_PING_DestroyPingForUnit (unit lp_Unit);
void lib1_gf_PING_DestroyPingForInteract (unit lp_Unit);
void lib1_gf_PING_ChangeColorForUnit (unit lp_Unit, color lp_color);
void lib1_gf_PING_ChangeModelForUnit (unit lp_Unit, string lp_model);
void lib1_gf_PING_Initialization ();
void lib1_gf_PING_UnitDeathPing (unit lp_unit);
point lib1_gf_METEORITE_MicroGetTargetPoint (region lp_baseRegion, region lp_usedRegion);
int lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit (unit lp_unit);
void lib1_gf_METEORITE_MicroGetTargetSetUsed (point lp_newUse, region lp_usedRegion);
void lib1_gf_METEORITE_MeteoritesRainMicroPer (region lp_region, int lp_minCount, int lp_maxCount, fixed lp_baseDelay, fixed lp_minDelay, fixed lp_maxDelay);
void lib1_gf_METEORITE_MeteoritesRainMicroLoop (region lp_region, int lp_perMinCount, int lp_perMaxCount, int lp_loopCount, fixed lp_baseDelay, fixed lp_minDelay, fixed lp_maxDelay, bool lp_showPrompt);
void lib1_gf_METEORITE_MeteoritesRainMicro (region lp_region, int lp_perMinCount, int lp_perMaxCount, fixed lp_baseDelay, bool lp_showPrompt);
void lib1_gf_METEORITE_MeteoritesRainGiant (point lp_center, fixed lp_radius, int lp_perMinCount, int lp_perMaxCount, fixed lp_baseDelay, bool lp_showPrompt);
void lib1_gf_METEORITE_MeteoriteMicroDropNoTimer (point lp_targetPoint, fixed lp_waitTime);
void lib1_gf_METEORITE_MeteoriteMicroDropWithTimer (point lp_targetPoint, fixed lp_waitTime);
void lib1_gf_METEORITE_MeteoriteGiantDrop (point lp_targetPoint, fixed lp_waitTime);
void lib1_gf_METEORITE_FirstDrop (int lp_time);
void lib1_gf_METEORITE_Init ();
void lib1_gf_METEORITE_Wave_RegisterGiant (fixed lp_time, string lp_shieldList, fixed lp_randomDelayMax, int lp_dropCount);
void lib1_gf_METEORITE_Wave_RegisterMicro (fixed lp_time, string lp_shieldList, fixed lp_randomDelayMax, int lp_dropCount, bool lp_isNotice);
bool lib1_gf_METEORITE_Wave_IsGiantImpact (point lp_point);
void lib1_gf_METEORITE_CameraShake (playergroup lp_players, fixed lp_force, fixed lp_hertz, fixed lp_random, int lp_camera, int lp_angle, fixed lp_defTime, fixed lp_time);
void lib1_gf_METEORITE_CameraShakeForPlayer (point lp_centerPoint, fixed lp_maxRange, playergroup lp_players, fixed lp_force, fixed lp_hertz, fixed lp_random, int lp_camera, int lp_angle, fixed lp_defTime, fixed lp_time);
void lib1_gf_METEORITE_ShieldRelation_Init ();
void lib1_gf_METEORITE_ShieldRelation_SetMicro (unit lp_unit);
void lib1_gf_METEORITE_ShieldRelation_Wave (fixed lp_time, fixed lp_randomDelayMax, int lp_dropCountGiant, int lp_dropCountMicro);
void lib1_gf_METEORITE_ShieldRelation_WaveLast (fixed lp_time, fixed lp_randomDelayMax, int lp_dropCountGiant, int lp_dropCountMicro);
void lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle (fixed lp_time, fixed lp_randomDelayMax, int lp_dropCountMicro);
void lib1_gf_METEORITE_ShieldRelation_ShieldRegister (unit lp_shield, int lp_reachLevel, string lp_neighborShieldList);
void lib1_gf_METEORITE_ShieldRelation_DropOperate (int lp_shielInfodIndex);
string lib1_gf_METEORITE_SubParameter_CombineShield (string lp_base, unit lp_shield);
string lib1_gf_METEORITE_SubParameter_CombineShieldAndRate (string lp_base, unit lp_shield, int lp_rate);
unit lib1_gf_METEORITE_SubParameter_Unit (string lp_shieldList, int lp_index);
int lib1_gf_METEORITE_SubParameter_Int (string lp_shieldList, int lp_index);
fixed lib1_gf_METEORITE_SubParameter_GetMicroDifficultRate (int lp_difficult);
void lib1_gf_COOP_Transmission_Send (string lp_type, int lp_sourcePlayer, bool lp_waitUntilDone);
void lib1_gf_COOP_Transmission_Init ();
void lib1_gf_COOP_Transmission_StopCurrent ();
void lib1_gf_COOP_AI_WaveStart_Create (int lp_pointType, int lp_resourceBucket, int lp_techBucket, int lp_targetType);
void lib1_gf_COOP_AI_WaveStart_Register (fixed lp_time, int lp_pointType, int lp_difficulty, int lp_resourceBucket, int lp_techBucket, int lp_targetType);
void lib1_gf_COOP_AI_HybridDominator ();
int lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint ();
int lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint ();
int lib1_gf_COOP_AI_WaveStart_DifficultToInt (int lp_e99ABEE5BAA6E7AD89E7BAA7);
void lib1_gf_COOP_Objectives_Register (fixed lp_time, int lp_objectivesType);
trigger lib1_gf_NANAKEY_CreateTriggerAndSaveData (string lp_triggerString, string lp_string);
void lib1_gf_NANAKEY_DestroySavedTrigger (string lp_string);
void lib1_gf_NANAKEY_AddEventToTrigger_UnitDeath (trigger lp_trigger, unit lp_unit);
void lib1_gf_NANAKEY_AddEventToTrigger_TimerExpire (trigger lp_trigger, timer lp_timer);
void lib1_gf_NANAKEY_AddEventToTrigger_UnitUseAbil (trigger lp_trigger, unit lp_unit, int lp_stage, abilcmd lp_abil, bool lp_share);
// Trigger Declarations
trigger lib1_gt_LIB_Initialization;
trigger lib1_gt_LIB_UnitDeath;
trigger lib1_gt_LIB_UnitCreate;
trigger lib1_gt_LIB_UnitRevive;
trigger lib1_gt_LIB_NotOnInit;
trigger lib1_gt_SOLARCRYSTAL_Spectroscope_Active;
trigger lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth;
trigger lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start;
trigger lib1_gt_PING_GeneratorActive;
trigger lib1_gt_PING_GeneratorActiveBehavior;
trigger lib1_gt_PING_GeneratorSleep;
trigger lib1_gt_PING_GeneratorSleepBehavior;
trigger lib1_gt_PING_SolarCrystalWorkerGet;
trigger lib1_gt_PING_SolarCrystalWorkerLost;
trigger lib1_gt_PING_SolarCrystalPickup;
trigger lib1_gt_PING_SolarCrystalInteract;
trigger lib1_gt_PING_GiantFallTimerColor;
trigger lib1_gt_METEORITE_CatchDropPeriodNotice;
trigger lib1_gt_METEORITE_CatchDropGiantImpactNotice;
trigger lib1_gt_METEORITE_CatchDropMicroImpactNotice;
trigger lib1_gt_METEORITE_TimerExpiredDropGiant;
trigger lib1_gt_METEORITE_MeteoriteDie;
trigger lib1_gt_METEORITE_CameraShakeDropBegin;
trigger lib1_gt_COOP_Init_01_LoadData;
trigger lib1_gt_COOP_Init_02_Players;
trigger lib1_gt_COOP_Init_03_LoadingComplete;
trigger lib1_gt_COOP_Init_04_Technology;
trigger lib1_gt_COOP_Init_05_Units;
trigger lib1_gt_COOP_Init_06_MusicSound;
trigger lib1_gt_COOP_Init_07_Environment;
trigger lib1_gt_COOP_Init_08_Difficulties;
trigger lib1_gt_COOP_Init_09_Start_Game;
trigger lib1_gt_COOP_Init_10_AI;
trigger lib1_gt_COOP_Transmission_Frog;
trigger lib1_gt_COOP_AI_Wave_Start;
trigger lib1_gt_COOP_AI_Enemy_Attacking;
trigger lib1_gt_COOP_VictoryDefeat_DefeatPrimaryObjectiveFailed;
trigger lib1_gt_COOP_VictoryDefeat_VictoryPrimaryObjectiveComplete;
trigger lib1_gt_COOP_VictoryDefeat_VictoryFanfare;
trigger lib1_gt_COOP_Objectives_Show;
trigger lib1_gt_COOP_Objective_GameTime_Create;
trigger lib1_gt_COOP_Objective_GameTime_Update;
trigger lib1_gt_COOP_Objective_GameTime_Complete;
trigger lib1_gt_COOP_Objective_GameTime_Failed;
trigger lib1_gt_COOP_Objective_GameTime_Window;
trigger lib1_gt_COOP_Objective_GameTime_Expired;
trigger lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create;
trigger lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update;
trigger lib1_gt_COOP_Objective_GiantMeteoritesImpact_Complete;
trigger lib1_gt_COOP_Objective_GiantMeteoritesImpact_Failed;
trigger lib1_gt_COOP_Objective_DestroyMegalith_Create;
trigger lib1_gt_COOP_Objective_DestroyMegalith_Update;
trigger lib1_gt_COOP_Objective_DestroyMegalith_Complete;
trigger lib1_gt_COOP_Objective_DestroyMegalith_Failed;
trigger lib1_gt_COOP_Objective_Zeratul_Complete;
// Library Initialization
void lib1_InitVariables ();
//--------------------------------------------------------------------------------------------------
// Library: GAME Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
    libCOMI_InitVariables();
    libCOMI_InitVariables();
    libCOMI_InitVariables();
}
// Variable Initialization
bool lib1_InitVariables_completed = false;
void lib1_InitVariables () {
    int init_i;
    int init_i1;
    if (lib1_InitVariables_completed) {
        return;
    }
    lib1_InitVariables_completed = true;
    lib1_gv_lIB_TimerWindowInterval = 10;
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter_ObjectivesTime = 960.0;
    for (init_i = 0; init_i <= lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCount; init_i += 1) {
        lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[init_i].lv_ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= lib1_gv_pING_ModelTypeDataStruct_Count; init_i += 1) {
        lib1_gv_pING_ModelTypeDataStruct[init_i].lv_angle = 270.0;
        lib1_gv_pING_ModelTypeDataStruct[init_i].lv_color = Color(0,0,0);
    }
    lib1_gv_mETEORITE_FirstPoint = UnitGetPosition(UnitFromId(327088294));
    lib1_gv_mETEORITE_FinishFirstDropAnim = true;
    lib1_gv_mETEORITE_GiantDropTime = 480.0;
    lib1_gv_mETEORITE_GiantDropTimeRemind = (lib1_gv_mETEORITE_GiantDropTime - 60.0);
    lib1_gv_mETEORITE_GiantImpactDefeatCount = 3;
    for (init_i = 0; init_i <= lib1_gv_mETEORITE_ShieldGeneratorCount; init_i += 1) {
        lib1_gv_mETEORITE_ShieldGeneratorInfoList[init_i].lv_tag = "";
    }
    lib1_gv_mETEORITE_Wave_MinMeteoritesCountInGiant = 18;
    lib1_gv_mETEORITE_Wave_MeteoritesRainRadiusInGiant = 12.0;
    lib1_gv_mETEORITE_Wave_MinMeteoritesCountInMicro = 24;
    lib1_gv_mETEORITE_Wave_MeteoritesRainRadiusInMicro = 16.0;
    lib1_gv_mETEORITE_Wave_MeteoritesRainDurationInMicro = 15.0;
    lib1_gv_mETEORITE_Wave_NextWaveTimer = TimerCreate();
    lib1_gv_mETEORITE_Wave_NextWaveTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib1_gv_mETEORITE_Wave_DropTarget[init_i] = UnitGroupEmpty();
    }
    lib1_gv_mETEORITE_ShieldRelation_HomeList = "";
    lib1_gv_cOOP_EnableDebug = true;
    lib1_gv_cOOP_Init_EnemyGroup = PlayerGroupEmpty();
    lib1_gv_cOOP_PlacedConversion_CountName = "Count";
    lib1_gv_cOOP_PlacedConversion_MoveRadius = 1.0;
    lib1_gv_cOOP_AI_Wave_HomeShield = UnitGroupEmpty();
    lib1_gv_cOOP_Objective_GameTime = c_invalidObjectiveId;
    lib1_gv_cOOP_Objective_GameTimer = TimerCreate();
    lib1_gv_cOOP_Objective_TotalTime = 2100.0;
    lib1_gv_cOOP_Objective_GameTimerWindow = c_timerWindowNone;
    lib1_gv_cOOP_Objective_GiantMeteoritesImpact = c_invalidObjectiveId;
    lib1_gv_cOOP_Objective_DestroyMegalith = c_invalidObjectiveId;
    lib1_gv_cOOP_Objective_Zeratul = c_invalidObjectiveId;
}
// Presets
// Functions
void lib1_gf_LIB_InitUnit () {
    unitgroup auto4DC95736_g;
    int auto4DC95736_u;
    unitgroup autoC8587ED7_g;
    int autoC8587ED7_u;
    unitgroup autoBFF9F51D_g;
    int autoBFF9F51D_u;
    unitgroup auto797A68BD_g;
    int auto797A68BD_u;
    unitgroup auto5CB14018_g;
    int auto5CB14018_u;
    // Variable Declarations
    unit lv_shieldUnit;
    unit lv_targetUnit;
    unit lv_otherUnit;
    unit lv_tempUnitA;
    unit lv_tempUnitB;
    point lv_shieldPoint;
    int lv_shieldPlayer;
    point lv_targetPoint;
    unit lv_spectroscopeUnit;
    int lv_spectroscopePlayer;
    string lv_shieldTag;
    int lv_i;
    int lv_shieldCount;
    // Variable Initialization
    lv_shieldTag = "";
    // Implementation
    auto4DC95736_g = UnitGroup("SOLARCRYSTAL_PhotonicAnchor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DC95736_u = 1;
    for ( ; auto4DC95736_u <= UnitGroupCount(auto4DC95736_g, c_unitCountAll) ; auto4DC95736_u += BoolToInt(lv_otherUnit == UnitGroupUnit(auto4DC95736_g, auto4DC95736_u)) ) {
        lv_otherUnit = UnitGroupUnit(auto4DC95736_g, auto4DC95736_u);
        PathAddNoFlyZone(UnitGetPosition(lv_otherUnit), 2.0, 3.0);
        if ((lv_otherUnit == UnitFromId(1839217059))) {
            continue;
        }
        lv_shieldCount += 1;
        DataTableSetInt(true, (lib1_gv_mETEORITE_HashtableName + lib1_gv_mETEORITE_ShieldGenerator + IntToString(UnitGetTag(lv_otherUnit))), lv_shieldCount);
        lv_shieldPoint = UnitGetPosition(lv_otherUnit);
        lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldCount].lv_point = lv_shieldPoint;
        lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldCount].lv_unit = lv_otherUnit;
    }
    autoC8587ED7_g = UnitGroup("SOLARCRYSTAL_ShieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC8587ED7_u = 1;
    for ( ; autoC8587ED7_u <= UnitGroupCount(autoC8587ED7_g, c_unitCountAll) ; autoC8587ED7_u += BoolToInt(lv_shieldUnit == UnitGroupUnit(autoC8587ED7_g, autoC8587ED7_u)) ) {
        lv_shieldUnit = UnitGroupUnit(autoC8587ED7_g, autoC8587ED7_u);
        lv_shieldCount += 1;
        DataTableSetInt(true, (lib1_gv_mETEORITE_HashtableName + lib1_gv_mETEORITE_ShieldGenerator + IntToString(UnitGetTag(lv_shieldUnit))), lv_shieldCount);
        lv_shieldPoint = UnitGetPosition(lv_shieldUnit);
        lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldCount].lv_point = lv_shieldPoint;
        lv_shieldPlayer = UnitGetOwner(lv_shieldUnit);
        if ((lv_shieldPlayer == 15)) {
            libNtve_gf_ShowHideUnit(lv_shieldUnit, false);
            lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldCount].lv_unit = lv_shieldUnit;
            continue;
        }
        else {
            lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldCount].lv_unit = lv_shieldUnit;
        }
        if ((lv_shieldPlayer != 0) && (lv_shieldPlayer != 15)) {
            UnitSetOwner(lv_shieldUnit, 0, true);
            PlayerCreateEffectUnit(lv_shieldPlayer, "SOLARCRYSTAL_EnergyPort_PlaceCrystal", lv_shieldUnit);
        }
        lv_i = 0;
        autoBFF9F51D_g = UnitGroup("METEORITE_MeteoriteDrop_GiantTarget", c_playerAny, RegionCircle(lv_shieldPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBFF9F51D_u = 1;
        for ( ; autoBFF9F51D_u <= UnitGroupCount(autoBFF9F51D_g, c_unitCountAll) ; autoBFF9F51D_u += BoolToInt(lv_targetUnit == UnitGroupUnit(autoBFF9F51D_g, autoBFF9F51D_u)) ) {
            lv_targetUnit = UnitGroupUnit(autoBFF9F51D_g, autoBFF9F51D_u);
            lv_i += 1;
            lv_targetPoint = UnitGetPosition(lv_targetUnit);
            lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldCount].lv_targetPointList[lv_i] = lv_targetPoint;
            UnitRemove(lv_targetUnit);
        }
        lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldCount].lv_targetCount = lv_i;
    }
    auto797A68BD_g = UnitGroup("SOLARCRYSTAL_Spectroscope", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto797A68BD_u = 1;
    for ( ; auto797A68BD_u <= UnitGroupCount(auto797A68BD_g, c_unitCountAll) ; auto797A68BD_u += BoolToInt(lv_spectroscopeUnit == UnitGroupUnit(auto797A68BD_g, auto797A68BD_u)) ) {
        lv_spectroscopeUnit = UnitGroupUnit(auto797A68BD_g, auto797A68BD_u);
        lv_spectroscopePlayer = UnitGetOwner(lv_spectroscopeUnit);
        if ((lv_spectroscopePlayer != 0)) {
            UnitSetOwner(lv_spectroscopeUnit, 0, true);
            UnitBehaviorAddPlayer(lv_spectroscopeUnit, "SOLARCRYSTAL_SolarCrystal_Locker", lv_spectroscopePlayer, 1);
            PlayerCreateEffectUnit(lv_spectroscopePlayer, "SOLARCRYSTAL_EnergyPort_PlaceCrystal", lv_spectroscopeUnit);
        }
    }
    auto5CB14018_g = UnitGroup("METEORITE_MeteoriteDrop_GiantTarget", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CB14018_u = 1;
    for ( ; auto5CB14018_u <= UnitGroupCount(auto5CB14018_g, c_unitCountAll) ; auto5CB14018_u += BoolToInt(lv_targetUnit == UnitGroupUnit(auto5CB14018_g, auto5CB14018_u)) ) {
        lv_targetUnit = UnitGroupUnit(auto5CB14018_g, auto5CB14018_u);
        UnitRemove(lv_targetUnit);
    }
}
void lib1_gf_LIB_EventList () {
    string auto9BBC5476_val;
    // Implementation
        lib1_gf_COOP_Objectives_Register(5.0, lib1_ge_COOP_Objectives_Type_GameTime);
        lib1_gf_COOP_Objectives_Register(12.0, lib1_ge_COOP_Objectives_Type_GiantMeteoritesImpact);
        lib1_gf_COOP_Objectives_Register((11.0 * 60.0), lib1_ge_COOP_Objectives_Type_DestroyMegalith);
        if ((RandomInt(0, 1) == 1)) {
            lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Register((10.0 * 60.0), 1);
            lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Register((15.0 * 60.0), 2);
        }
        else {
            lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Register((15.0 * 60.0), 2);
            lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Register((10.0 * 60.0), 1);
        }
        lib1_gf_METEORITE_FirstDrop(70);
        lib1_gf_COOP_AI_WaveStart_Register((3.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerBase);
        lib1_gf_COOP_AI_WaveStart_Register((3.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerBase);
        lib1_gf_COOP_AI_WaveStart_Register((3.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerBase);
        lib1_gf_COOP_AI_WaveStart_Register((3.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerBase);
        lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle((3.85 * 60.0), 0.0, 1);
        lib1_gf_COOP_AI_WaveStart_Register((5.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((5.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((5.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((5.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__1Early, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_METEORITE_ShieldRelation_Wave((2.0 * 60.0), 0.0, 1, 0);
        lib1_gf_COOP_AI_WaveStart_Register((9.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((9.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((9.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((9.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle((11.5 * 60.0), 0.0, 2);
        lib1_gf_COOP_AI_WaveStart_Register((12.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((12.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((12.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((12.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_METEORITE_ShieldRelation_Wave((8.25 * 60.0), 0.0, 2, 1);
        lib1_gf_COOP_AI_WaveStart_Register((15.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((15.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((15.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((15.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle((17.5 * 60.0), 0.0, 3);
        lib1_gf_COOP_AI_WaveStart_Register((19.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((19.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((19.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((19.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_METEORITE_ShieldRelation_Wave((14.5 * 60.0), 0.0, 3, 2);
        lib1_gf_COOP_AI_WaveStart_Register((22.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((22.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((22.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((22.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle((23.5 * 60.0), 0.0, 3);
        lib1_gf_COOP_AI_WaveStart_Register((24.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((24.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((24.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((24.0 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec);
        lib1_gf_COOP_AI_WaveStart_Register((25.25 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 1, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((25.25 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 2, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((25.25 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 3, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_COOP_AI_WaveStart_Register((25.25 * 60.0), lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint(), 4, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator);
        lib1_gf_METEORITE_ShieldRelation_WaveLast((20.85 * 60.0), 0.0, 4, 3);
    
}
void lib1_gf_LIB_ASSEST (text lp_message, bool lp_showUI) {
    // Variable Declarations
    int[2] lv_int;
    // Variable Initialization
    // Implementation
    if ((lp_showUI == true)) {
        TriggerDebugOutput(1, lp_message, true);
    }
    else {
        TriggerDebugOutput(1, lp_message, false);
    }
    lv_int[2] = 0;
}
void lib1_gf_SOLARCRYSTAL_Init () {
    // Implementation
    lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Init();
}
bool lib1_gf_SOLARCRYSTAL_IsSolarCrystalAbleTarget (unit lp_speller, unit lp_target) {
    // Variable Declarations
    bool lv_spellerHasCrystal;
    bool lv_targetHasCrystal;
    bool lv_targetEnergyLost;
    bool lv_targetSpectroscopeLocker;
    // Variable Initialization
    lv_spellerHasCrystal = UnitHasBehavior2(lp_speller, "SOLARCRYSTAL_Worker_HasCrystal");
    lv_targetHasCrystal = UnitHasBehavior2(lp_target, "SOLARCRYSTAL_EnergyPort_HasCrystal");
    lv_targetEnergyLost = UnitHasBehavior2(lp_target, "METEORITE_ShieldGenerator_EnergyLost");
    lv_targetSpectroscopeLocker = UnitHasBehavior2(lp_target, "SOLARCRYSTAL_SolarCrystal_Locker");
    // Implementation
    if (((UnitGetType(lp_target) != "SOLARCRYSTAL_SolarCrystalUnit") && (lv_spellerHasCrystal == true) && (lv_targetHasCrystal == false) && (lv_targetSpectroscopeLocker == false) && (lv_targetEnergyLost == false))) {
        return true;
    }
    else if (((UnitGetType(lp_target) != "SOLARCRYSTAL_SolarCrystalUnit") && (lv_spellerHasCrystal == false) && (lv_targetHasCrystal == true) && (lv_targetSpectroscopeLocker == false) && (lv_targetEnergyLost == false))) {
        return true;
    }
    else if (((lv_spellerHasCrystal == false) && (UnitGetType(lp_target) == "SOLARCRYSTAL_SolarCrystalUnit"))) {
        return true;
    }
    return false;
}
void lib1_gf_SOLARCRYSTAL_Spectroscope_SetAlive (unit lp_unit) {
    // Implementation
    UnitBehaviorAdd(lp_unit, "SOLARCRYSTAL_SolarCrystal_InteractTarget_Marker", lp_unit, 1);
}
void lib1_gf_SOLARCRYSTAL_Spectroscope_SetDead (unit lp_unit, bool lp_createCrystal) {
    // Variable Declarations
    unit lv_megalith;
    // Variable Initialization
    // Implementation
    UnitBehaviorRemove(lp_unit, "SOLARCRYSTAL_SolarCrystal_Locker", 1);
    UnitBehaviorRemove(lp_unit, "SOLARCRYSTAL_SunCrystal_Interact_Makrer", 1);
    UnitBehaviorRemove(lp_unit, "SOLARCRYSTAL_SolarCrystal_InteractTarget_Marker", 1);
    UnitBehaviorRemove(lp_unit, "SOLARCRYSTAL_EnergyPort_HasCrystal", 1);
    lib1_gf_PING_DestroyPingForUnit(lp_unit);
    if ((lp_createCrystal == true)) {
        UnitCreate(1, "SOLARCRYSTAL_SolarCrystalUnit", c_unitCreateIgnorePlacement, lib1_gv_sOLARCRYSTAL_SolarCrystalPlayer, UnitGetPosition(lp_unit), 270.0);
    }
    libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimPlay Cover Stand,Cover PlayForever,NonLooping");
    UnitSetState(lp_unit, c_unitStateHighlightable, false);
    UnitSetState(lp_unit, c_unitStateTargetable, false);
    UnitSetState(lp_unit, c_unitStateSelectable, false);
    UnitSetState(lp_unit, c_unitStateTooltipable, false);
    UnitSelect(lp_unit, 1, false);
    UnitSelect(lp_unit, 2, false);
}
void lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Init () {
    int autoF34CD30D_ae;
    int autoF34CD30D_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Implementation
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_cybrosLock = UnitFromId(395333078);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_spectroscope = UnitFromId(1594136783);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit = UnitFromId(379456668);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_bonusStart = "BonusStart1SF";
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_bonusFinsih = "BonusFinish1SF";
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_bonusFail = "BonusFail1SF";
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_cybrosLock = UnitFromId(406073705);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_spectroscope = UnitFromId(275817537);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit = UnitFromId(1403691524);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_bonusStart = "BonusStart2SF";
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_bonusFinsih = "BonusFinish1SF";
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_bonusFail = "BonusFail2SF";
    autoF34CD30D_ae = lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCount;
    autoF34CD30D_ai = 1;
    lv_i = 1;
    for ( ; ( (autoF34CD30D_ai >= 0 && lv_i <= autoF34CD30D_ae) || (autoF34CD30D_ai <= 0 && lv_i >= autoF34CD30D_ae) ) ; lv_i += autoF34CD30D_ai ) {
        DataTableSetInt(true, (lib1_gv_sOLARCRYSTAL_HashtableName + lib1_gv_sOLARCRYSTAL_SpectroscopeName + IntToString(UnitGetTag(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_spectroscope))), lv_i);
        DataTableSetInt(true, (lib1_gv_sOLARCRYSTAL_HashtableName + lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithName + IntToString(UnitGetTag(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit))), lv_i);
        libNtve_gf_SendActorMessageToUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit, "RefSet ::global.TempMegalithCutter");
        libNtve_gf_SendActorMessageToUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_cybrosLock, "Signal AttachMegalithCutter");
        UnitBehaviorAdd(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit, "SOLARCRYSTAL_MegalithCutter_DockHide", lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit, 1);
        TriggerAddEventGeneric(lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth, ("SOLARCRYSTAL_" + IntToString(UnitGetTag(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_spectroscope)) + "_Active"));
    }
}
void lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Register (fixed lp_time, int lp_index) {
    // Implementation
    DataTableSetInt(true, (lib1_gv_sOLARCRYSTAL_HashtableName + lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithName + lib1_gv_sOLARCRYSTAL_Spectroscope_StartIndex + IntToString(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartCount)), lp_index);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartCount += 1;
    TriggerAddEventTimeElapsed(lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start, lp_time, c_timeGame);
}
void lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step (int lp_i) {
    // Implementation
    if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step == lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Begin)) {
        ActorSend(libNtve_gf_MainActorofUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_cybrosLock), "Signal StageBegin");
    }
    else if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step == lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_First)) {
        ActorSend(libNtve_gf_MainActorofUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_cybrosLock), "Signal StageFirst");
    }
    else if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step == lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Second)) {
        ActorSend(libNtve_gf_MainActorofUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_cybrosLock), "Signal StageSecond");
    }
    else if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step == lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Third)) {
        ActorSend(libNtve_gf_MainActorofUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_cybrosLock), "Signal StageThird");
    }
    else if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step == lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Fourth)) {
        ActorSend(libNtve_gf_MainActorofUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_cybrosLock), "Signal StageFourth");
    }
    else if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step == lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_End)) {
        ActorSend(libNtve_gf_MainActorofUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_cybrosLock), "Signal StageEnd");
        if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_ping != c_invalidPingId)) {
            PingDestroy(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_ping);
        }
    }
    else if (true) {
        return ;
    }
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step = (lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lp_i].lv_step + 1);
}
void lib1_gf_PING_CreatePingForUnit (unit lp_Unit, int lp_Model, bool lp_isAttach) {
    // Implementation
    lib1_gf_PING_DestroyPingForUnit(lp_Unit);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_model, UnitGetPosition(lp_Unit), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_color, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_duration, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_angle);
    PingSetScale(PingLastCreated(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_scale);
    PingSetDepth(PingLastCreated(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_depth);
    PingSetTooltip(PingLastCreated(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_tooltip);
    if ((lp_isAttach == true)) {
        PingSetUnit(PingLastCreated(), lp_Unit);
    }
    DataTableSetPing(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableUnitName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName), PingLastCreated());
}
void lib1_gf_PING_CreatePingForUnitKeepFacing (unit lp_Unit, int lp_Model) {
    // Variable Declarations
    int lv_ping;
    // Variable Initialization
    lv_ping = c_invalidPingId;
    // Implementation
    lib1_gf_PING_DestroyPingForUnit(lp_Unit);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_model, UnitGetPosition(lp_Unit), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_color, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_duration, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_angle);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_scale);
    PingSetDepth(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_depth);
    PingSetTooltip(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_tooltip);
    PingSetUnit(lv_ping, lp_Unit);
    DataTableSetPing(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableUnitName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName), lv_ping);
    while ((UnitIsAlive(lp_Unit) == true)) {
        PingSetRotation(lv_ping, UnitGetFacing(lp_Unit));
        Wait(0.125, c_timeGame);
    }
}
void lib1_gf_PING_CreatePingForInteract (unit lp_target, unit lp_speller) {
    // Variable Declarations
    int lv_spellerPlayer;
    color lv_spellerColor;
    int lv_allyPlayer;
    color lv_allyColor;
    string lv_stepIconAsModel;
    string lv_stepIconAsImage;
    int lv_path;
    int lv_ping;
    actor lv_actor;
    // Variable Initialization
    lv_spellerPlayer = UnitGetOwner(lp_speller);
    lv_spellerColor = Color(0.00, 100.00, 0.00);
    lv_allyColor = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_speller), false));
    lv_ping = DataTableGetPing(true, (lib1_gv_pING_HashtableName + IntToString(lv_spellerPlayer) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_speller)) + lib1_gv_pING_HashtablePingName));
    // Implementation
    if (((lv_ping != c_invalidPingId) || (lp_target == null) || (lp_speller == null) || (lib1_gf_SOLARCRYSTAL_IsSolarCrystalAbleTarget(lp_speller, lp_target) == false))) {
        return ;
    }
    if ((lv_spellerPlayer == lib1_gv_cOOP_Init_PLAYER_01_USER)) {
        lv_allyPlayer = lib1_gv_cOOP_Init_PLAYER_02_USER;
    }
    else {
        lv_allyPlayer = lib1_gv_cOOP_Init_PLAYER_01_USER;
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_spellerPlayer), lib1_gv_pING_InteractColorModelForPlayer[0], UnitGetPosition(lp_target), lv_spellerColor, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_duration, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_angle);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_scale);
    PingSetDepth(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_depth);
    PingSetTooltip(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_tooltip);
    PingSetUnit(lv_ping, lp_target);
    DataTableSetPing(true, (lib1_gv_pING_HashtableName + IntToString(lv_spellerPlayer) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_speller)) + lib1_gv_pING_HashtablePingName), lv_ping);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_allyPlayer), lib1_gv_pING_InteractColorModelForPlayer[lv_spellerPlayer], UnitGetPosition(lp_target), lv_allyColor, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_duration, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_angle);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_scale);
    PingSetDepth(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_depth);
    PingSetTooltip(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_tooltip);
    PingSetUnit(lv_ping, lp_target);
    DataTableSetPing(true, (lib1_gv_pING_HashtableName + IntToString(lv_allyPlayer) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_speller)) + lib1_gv_pING_HashtablePingName), lv_ping);
    libNtve_gf_CreateActorAtPoint("PING_BeaconOnMyWay_Worker", UnitGetPosition(lp_target));
    lv_actor = libNtve_gf_ActorLastCreatedSend();
    ActorSend(lv_actor, "TakeSnapshot");
    ActorSend(lv_actor, libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_speller), false)), 3.0, 0.2));
    DataTableSetActor(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_speller)) + lib1_gv_pING_HashtableActorName), lv_actor);
    lv_stepIconAsModel = "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3";
    lv_stepIconAsImage = lv_stepIconAsModel;
    PathCreateForUnit(PlayerGroupSingle(lv_spellerPlayer), lp_speller);
    lv_path = PathLastCreated();
    PathSetVisible(lv_path, c_pathLocationAll, true);
    PathSetDestinationPoint(lv_path, UnitGetPosition(lp_target));
    PathSetColor(lv_path, c_pathLocationAll, lv_spellerColor);
    PathSetStepModel(lv_path, c_pathLocationWorld, lv_stepIconAsImage);
    DataTableSetInt(true, (lib1_gv_pING_HashtableName + IntToString(lv_spellerPlayer) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_speller)) + lib1_gv_pING_HashtablePathName), lv_path);
    PathCreateForUnit(PlayerGroupSingle(lv_allyPlayer), lp_speller);
    lv_path = PathLastCreated();
    PathSetVisible(lv_path, c_pathLocationAll, true);
    PathSetDestinationPoint(lv_path, UnitGetPosition(lp_target));
    PathSetColor(lv_path, c_pathLocationAll, lv_allyColor);
    PathSetStepModel(lv_path, c_pathLocationWorld, lv_stepIconAsImage);
    DataTableSetInt(true, (lib1_gv_pING_HashtableName + IntToString(lv_allyPlayer) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_speller)) + lib1_gv_pING_HashtablePathName), lv_path);
}
void lib1_gf_PING_CreatePingOneShot (point lp_Point, fixed lp_Angle, int lp_Model, fixed lp_Duration) {
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_model, lp_Point, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_color, lp_Duration, lp_Angle);
    PingSetScale(PingLastCreated(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_scale);
    PingSetDepth(PingLastCreated(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_depth);
    PingSetTooltip(PingLastCreated(), lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_tooltip);
}
void lib1_gf_PING_ModifyModelForUnit (unit lp_Unit, int lp_Model) {
    // Variable Declarations
    int lv_ping;
    // Variable Initialization
    lv_ping = DataTableGetPing(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableUnitName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
    // Implementation
    if ((lv_ping != c_invalidPingId)) {
        PingSetRotation(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_angle);
        PingSetDuration(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_duration);
        PingSetModel(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_model);
        PingSetColor(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_color);
        PingSetScale(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_scale);
        PingSetDepth(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_depth);
        PingSetTooltip(lv_ping, lib1_gv_pING_ModelTypeDataStruct[lp_Model].lv_tooltip);
    }
}
void lib1_gf_PING_DestroyPingForUnit (unit lp_Unit) {
    // Variable Declarations
    int lv_ping;
    // Variable Initialization
    lv_ping = DataTableGetPing(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableUnitName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
    // Implementation
    if ((lv_ping != c_invalidPingId)) {
        PingDestroy(lv_ping);
        DataTableValueRemove(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableUnitName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
    }
}
void lib1_gf_PING_DestroyPingForInteract (unit lp_Unit) {
    // Variable Declarations
    int lv_ping;
    int lv_path;
    // Variable Initialization
    lv_ping = DataTableGetPing(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_01_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
    // Implementation
    if ((lv_ping != c_invalidPingId)) {
        PingDestroy(lv_ping);
        DataTableValueRemove(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_01_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
        lv_ping = DataTableGetPing(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_02_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
        PingDestroy(lv_ping);
        DataTableValueRemove(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_02_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
        ActorSend(DataTableGetActor(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtableActorName)), "Destroy");
        DataTableValueRemove(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtableActorName));
        lv_path = DataTableGetInt(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_01_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePathName));
        DataTableValueRemove(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_01_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePathName));
        PathDestroy(lv_path);
        lv_path = DataTableGetInt(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_02_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePathName));
        DataTableValueRemove(true, (lib1_gv_pING_HashtableName + IntToString(lib1_gv_cOOP_Init_PLAYER_02_USER) + lib1_gv_pING_HashtableSpellerName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePathName));
        PathDestroy(lv_path);
    }
}
void lib1_gf_PING_ChangeColorForUnit (unit lp_Unit, color lp_color) {
    // Variable Declarations
    int lv_ping;
    // Variable Initialization
    lv_ping = DataTableGetPing(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableUnitName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
    // Implementation
    if ((lv_ping != c_invalidPingId)) {
        PingSetColor(lv_ping, lp_color);
    }
}
void lib1_gf_PING_ChangeModelForUnit (unit lp_Unit, string lp_model) {
    // Variable Declarations
    int lv_ping;
    fixed lv_rate;
    // Variable Initialization
    lv_ping = DataTableGetPing(true, (lib1_gv_pING_HashtableName + lib1_gv_pING_HashtableUnitName + IntToString(UnitGetTag(lp_Unit)) + lib1_gv_pING_HashtablePingName));
    lv_rate = PingGetScale(lv_ping);
    // Implementation
    if ((lv_ping != c_invalidPingId)) {
        PingSetModel(lv_ping, lp_model);
        PingSetScale(lv_ping, lv_rate);
    }
}
void lib1_gf_PING_Initialization () {
    // Implementation
    lib1_gv_pING_InteractColorModelForPlayer[0] = "PING_MiniMapPing_SolarCrystalInteractLocal";
    lib1_gv_pING_InteractColorModelForPlayer[lib1_gv_cOOP_Init_PLAYER_01_USER] = "PING_MiniMapPing_SolarCrystalInteract1";
    lib1_gv_pING_InteractColorModelForPlayer[lib1_gv_cOOP_Init_PLAYER_02_USER] = "PING_MiniMapPing_SolarCrystalInteract2";
    lib1_gv_pING_InteractColorModelForPlayer[3] = "PING_MiniMapPing_SolarCrystalInteract1";
    lib1_gv_pING_InteractColorModelForPlayer[4] = "PING_MiniMapPing_SolarCrystalInteract2";
    lib1_gv_pING_InteractColorModelForPlayer[5] = "PING_MiniMapPing_SolarCrystalInteract1";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorActive].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorActive].lv_model = "PING_MiniMapPing_GeneratorActive";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorActive].lv_scale = 0.15;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorActive].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorActive].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorActive].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorActive].lv_tooltip = StringExternal("Param/Value/lib_1_B1CCF920");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorSleep].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorSleep].lv_model = "PING_MiniMapPing_GeneratorSleep";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorSleep].lv_scale = 0.15;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorSleep].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorSleep].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorSleep].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GeneratorSleep].lv_tooltip = StringExternal("Param/Value/lib_1_834A6C27");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantCrater].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantCrater].lv_model = "PING_MiniMapPing_GiantCrater";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantCrater].lv_scale = 0.15;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantCrater].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantCrater].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantCrater].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantCrater].lv_tooltip = StringExternal("Param/Value/lib_1_B98B872A");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantFall].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantFall].lv_model = "PING_MiniMapPing_GiantFall";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantFall].lv_scale = 0.15;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantFall].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantFall].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantFall].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantFall].lv_tooltip = StringExternal("Param/Value/lib_1_EB368CA9");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantImpact].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantImpact].lv_model = "PING_MiniMapPing_GiantImpact";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantImpact].lv_scale = 0.25;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantImpact].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantImpact].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantImpact].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_GiantImpact].lv_tooltip = StringExternal("Param/Value/lib_1_4F06EDB2");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_MeteoriteImpact].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_MeteoriteImpact].lv_model = "PING_MiniMapPing_MeteoriteImpact";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_MeteoriteImpact].lv_scale = 0.15;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_MeteoriteImpact].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_MeteoriteImpact].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_MeteoriteImpact].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_MeteoriteImpact].lv_tooltip = StringExternal("Param/Value/lib_1_30D25D2D");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaActive].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaActive].lv_model = "PING_MiniMapPing_ShieldAreaActive";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaActive].lv_scale = 0.5;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaActive].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaActive].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaActive].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaActive].lv_tooltip = StringExternal("Param/Value/lib_1_4DDE0F63");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaSleep].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaSleep].lv_model = "PING_MiniMapPing_ShieldAreaSleep";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaSleep].lv_scale = 0.5;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaSleep].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaSleep].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaSleep].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_ShieldAreaSleep].lv_tooltip = StringExternal("Param/Value/lib_1_A677125F");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystal].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystal].lv_model = "PING_MiniMapPing_SolarCrystal";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystal].lv_scale = 0.25;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystal].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystal].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystal].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystal].lv_tooltip = StringExternal("Param/Value/lib_1_DB7DBB4B");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PhotonicAnchor].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PhotonicAnchor].lv_model = "PING_MiniMapPing_PhotonicAnchor";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PhotonicAnchor].lv_scale = 0.16;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PhotonicAnchor].lv_color = Color(0.00, 100.00, 0.00);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PhotonicAnchor].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PhotonicAnchor].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PhotonicAnchor].lv_tooltip = StringExternal("Param/Value/lib_1_3E9FB7C0");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_DropPrompt].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_DropPrompt].lv_model = "PING_MiniMapPing_DropPrompt";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_DropPrompt].lv_scale = 0.15;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_DropPrompt].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_DropPrompt].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_DropPrompt].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_DropPrompt].lv_tooltip = StringExternal("Param/Value/lib_1_85F79295");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_model = "PING_MiniMapPing_SolarCrystalInteractLocal";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_scale = 0.6;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_SolarCrystalInteract].lv_tooltip = StringExternal("Param/Value/lib_1_649655BF");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PickupedWorker].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PickupedWorker].lv_model = "PING_MiniMapPing_PickupedWorker";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PickupedWorker].lv_scale = 0.25;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PickupedWorker].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PickupedWorker].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PickupedWorker].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_PickupedWorker].lv_tooltip = StringExternal("Param/Value/lib_1_27815B7C");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_HybridDominator].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_HybridDominator].lv_model = "PingBoss";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_HybridDominator].lv_scale = 0.5;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_HybridDominator].lv_color = Color(100.00, 100.00, 0.00);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_HybridDominator].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_HybridDominator].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_HybridDominator].lv_tooltip = StringExternal("Param/Value/lib_1_E6E497E0");
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_VoidSeeker].lv_angle = 270.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_VoidSeeker].lv_model = "PING_MiniMapPing_VoidSeeker";
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_VoidSeeker].lv_scale = 1.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_VoidSeeker].lv_color = ColorWithAlpha(100.0, 100.0, 100.0, 0.0);
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_VoidSeeker].lv_duration = 9999.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_VoidSeeker].lv_depth = 0.0;
    lib1_gv_pING_ModelTypeDataStruct[lib1_ge_PING_ModelType_VoidSeeker].lv_tooltip = StringExternal("Param/Value/lib_1_9F370FA3");
}
void lib1_gf_PING_UnitDeathPing (unit lp_unit) {
    // Implementation
    lib1_gf_PING_DestroyPingForUnit(lp_unit);
}
point lib1_gf_METEORITE_MicroGetTargetPoint (region lp_baseRegion, region lp_usedRegion) {
    int auto5FFC20C2_ae;
    int auto5FFC20C2_ai;
    // Variable Declarations
    region lv_tempRegion;
    point lv_targetPoint;
    int lv_i;
    // Variable Initialization
    lv_tempRegion = RegionEmpty();
    // Implementation
    auto5FFC20C2_ae = lib1_gv_mETEORITE_MeteoriteTargetTestCount;
    auto5FFC20C2_ai = 1;
    lv_i = 1;
    for ( ; ( (auto5FFC20C2_ai >= 0 && lv_i <= auto5FFC20C2_ae) || (auto5FFC20C2_ai <= 0 && lv_i >= auto5FFC20C2_ae) ) ; lv_i += auto5FFC20C2_ai ) {
        RegionAddRegion(lv_tempRegion, lp_baseRegion);
        RegionAddRegion(lv_tempRegion, lp_usedRegion);
        lv_targetPoint = RegionRandomPoint(lv_tempRegion);
        if ((lv_targetPoint != Point(0.0, 0.0)) && (CliffLevel(lv_targetPoint) != 0) && (libNtve_gf_PlayerCanCreateEffectAtPoint(lib1_gv_mETEORITE_MeteoritePlayer, "METEORITE_MeteoriteDrop_MicroTimerCreate", lv_targetPoint) == true)) {
            return lv_targetPoint;
        }
    }
    return null;
}
int lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit (unit lp_unit) {
    // Implementation
    return DataTableGetInt(true, (lib1_gv_mETEORITE_HashtableName + lib1_gv_mETEORITE_ShieldGenerator + IntToString(UnitGetTag(lp_unit))));
}
void lib1_gf_METEORITE_MicroGetTargetSetUsed (point lp_newUse, region lp_usedRegion) {
    // Implementation
    RegionAddCircle(lp_usedRegion, false, lp_newUse, (lib1_gv_mETEORITE_MicroImpactRadius * 0.5));
}
trigger auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_Trigger = null;
region auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_region;
int auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_minCount;
int auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_maxCount;
fixed auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_baseDelay;
fixed auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_minDelay;
fixed auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_maxDelay;
void lib1_gf_METEORITE_MeteoritesRainMicroPer (region lp_region, int lp_minCount, int lp_maxCount, fixed lp_baseDelay, fixed lp_minDelay, fixed lp_maxDelay) {
    auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_region = lp_region;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_minCount = lp_minCount;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_maxCount = lp_maxCount;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_baseDelay = lp_baseDelay;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_minDelay = lp_minDelay;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_maxDelay = lp_maxDelay;
    if (auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_Trigger == null) {
        auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_Trigger = TriggerCreate("auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_Trigger, false, false);
}
bool auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_TriggerFunc (bool testConds, bool runActions) {
    region lp_region = auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_region;
    int lp_minCount = auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_minCount;
    int lp_maxCount = auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_maxCount;
    fixed lp_baseDelay = auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_baseDelay;
    fixed lp_minDelay = auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_minDelay;
    fixed lp_maxDelay = auto_lib1_gf_METEORITE_MeteoritesRainMicroPer_lp_maxDelay;
    int autoA589CC21_ae;
    int autoA589CC21_ai;
    // Variable Declarations
    int lv_meteoriteCount;
    int lv_i;
    point lv_targetPoint;
    region lv_baseRegion;
    region lv_usedRegion;
    fixed lv_dropTime;
    int lv_count;
    // Variable Initialization
    lv_meteoriteCount = RandomInt(lp_minCount, lp_maxCount);
    lv_baseRegion = RegionEmpty();
    lv_usedRegion = RegionEmpty();
    lv_dropTime = lp_baseDelay;
    lv_count = RandomInt(lp_minCount, lp_maxCount);
    // Implementation
    RegionAddRegion(lv_baseRegion, lp_region);
    autoA589CC21_ae = lv_meteoriteCount;
    autoA589CC21_ai = 1;
    lv_i = 1;
    for ( ; ( (autoA589CC21_ai >= 0 && lv_i <= autoA589CC21_ae) || (autoA589CC21_ai <= 0 && lv_i >= autoA589CC21_ae) ) ; lv_i += autoA589CC21_ai ) {
        lv_targetPoint = lib1_gf_METEORITE_MicroGetTargetPoint(lv_baseRegion, lv_usedRegion);
        lv_dropTime = (lp_baseDelay + RandomFixed(lp_minDelay, lp_maxDelay));
        if ((lv_targetPoint == null)) {
            continue;
        }
        lib1_gf_METEORITE_MicroGetTargetSetUsed(lv_targetPoint, lv_usedRegion);
        lib1_gf_METEORITE_MeteoriteMicroDropNoTimer(lv_targetPoint, lv_dropTime);
    }
    return true;
}
trigger auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_Trigger = null;
region auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_region;
int auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_perMinCount;
int auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_perMaxCount;
int auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_loopCount;
fixed auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_baseDelay;
fixed auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_minDelay;
fixed auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_maxDelay;
bool auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_showPrompt;
void lib1_gf_METEORITE_MeteoritesRainMicroLoop (region lp_region, int lp_perMinCount, int lp_perMaxCount, int lp_loopCount, fixed lp_baseDelay, fixed lp_minDelay, fixed lp_maxDelay, bool lp_showPrompt) {
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_region = lp_region;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_perMinCount = lp_perMinCount;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_perMaxCount = lp_perMaxCount;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_loopCount = lp_loopCount;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_baseDelay = lp_baseDelay;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_minDelay = lp_minDelay;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_maxDelay = lp_maxDelay;
    auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_showPrompt = lp_showPrompt;
    if (auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_Trigger == null) {
        auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_Trigger = TriggerCreate("auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_Trigger, false, false);
}
bool auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_TriggerFunc (bool testConds, bool runActions) {
    region lp_region = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_region;
    int lp_perMinCount = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_perMinCount;
    int lp_perMaxCount = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_perMaxCount;
    int lp_loopCount = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_loopCount;
    fixed lp_baseDelay = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_baseDelay;
    fixed lp_minDelay = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_minDelay;
    fixed lp_maxDelay = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_maxDelay;
    bool lp_showPrompt = auto_lib1_gf_METEORITE_MeteoritesRainMicroLoop_lp_showPrompt;
    int auto1FFB5B47_ae;
    int auto1FFB5B47_ai;
    // Variable Declarations
    fixed lv_tempBaseDelay;
    fixed lv_tempPerDelay;
    fixed lv_dropPromptWait;
    int lv_i;
    // Variable Initialization
    lv_tempBaseDelay = (lp_baseDelay + lp_minDelay);
    lv_tempPerDelay = ((lp_maxDelay - lp_minDelay) / lp_loopCount);
    lv_dropPromptWait = (lv_tempBaseDelay - lib1_gv_pING_MeteoritesRainMicroLoopPromptTime);
    // Implementation
    auto1FFB5B47_ae = (lp_loopCount - 1);
    auto1FFB5B47_ai = 1;
    lv_i = 0;
    for ( ; ( (auto1FFB5B47_ai >= 0 && lv_i <= auto1FFB5B47_ae) || (auto1FFB5B47_ai <= 0 && lv_i >= auto1FFB5B47_ae) ) ; lv_i += auto1FFB5B47_ai ) {
        lib1_gf_METEORITE_MeteoritesRainMicroPer(lp_region, lp_perMinCount, lp_perMaxCount, ((lv_i * lv_tempPerDelay) + lv_tempBaseDelay), 0.0, lv_tempPerDelay);
    }
    if ((lp_showPrompt == true)) {
        if ((lv_dropPromptWait < 0.0)) {
            lib1_gf_PING_CreatePingOneShot(RegionGetCenter(lp_region), 270.0, lib1_ge_PING_ModelType_DropPrompt, lv_tempBaseDelay);
            lv_dropPromptWait = lv_tempBaseDelay;
        }
        else {
            Wait(lv_dropPromptWait, c_timeGame);
            lib1_gf_PING_CreatePingOneShot(RegionGetCenter(lp_region), 270.0, lib1_ge_PING_ModelType_DropPrompt, lib1_gv_pING_MeteoritesRainMicroLoopPromptTime);
            lv_dropPromptWait = lib1_gv_pING_MeteoritesRainMicroLoopPromptTime;
        }
        Wait(lv_dropPromptWait, c_timeGame);
        lib1_gf_PING_CreatePingOneShot(RegionGetCenter(lp_region), 270.0, lib1_ge_PING_ModelType_MeteoriteImpact, (lp_maxDelay - lp_minDelay));
    }
    else {
        Wait(lv_tempBaseDelay, c_timeGame);
        lib1_gf_PING_CreatePingOneShot(RegionGetCenter(lp_region), 270.0, lib1_ge_PING_ModelType_MeteoriteImpact, (lp_maxDelay - lp_minDelay));
    }
    return true;
}
void lib1_gf_METEORITE_MeteoritesRainMicro (region lp_region, int lp_perMinCount, int lp_perMaxCount, fixed lp_baseDelay, bool lp_showPrompt) {
    // Implementation
    lib1_gf_METEORITE_MeteoritesRainMicroLoop(lp_region, lp_perMinCount, lp_perMaxCount, 3, lp_baseDelay, 0.0, (lib1_gv_mETEORITE_MeteortietRainMicroBefore * 2.0), lp_showPrompt);
}
void lib1_gf_METEORITE_MeteoritesRainGiant (point lp_center, fixed lp_radius, int lp_perMinCount, int lp_perMaxCount, fixed lp_baseDelay, bool lp_showPrompt) {
    // Variable Declarations
    region lv_region;
    fixed lv_microBaseDelay;
    // Variable Initialization
    lv_region = RegionCircle(lp_center, lp_radius);
    lv_microBaseDelay = ((lp_baseDelay + lib1_gv_mETEORITE_GiantDropTime) - lib1_gv_mETEORITE_MeteortietRainMicroBefore);
    // Implementation
    lib1_gf_METEORITE_MeteoriteGiantDrop(lp_center, lp_baseDelay);
    RegionAddCircle(lv_region, false, lp_center, lib1_gv_mETEORITE_GiantImpactRadius);
    lib1_gf_METEORITE_MeteoritesRainMicroLoop(lv_region, lp_perMinCount, lp_perMaxCount, 3, lv_microBaseDelay, 0.0, (lib1_gv_mETEORITE_MeteortietRainMicroBefore * 2.0), lp_showPrompt);
}
void lib1_gf_METEORITE_MeteoriteMicroDropNoTimer (point lp_targetPoint, fixed lp_waitTime) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "METEORITE_MeteoriteDrop_MicroCPNoTimer", "InitialDelay", lib1_gv_mETEORITE_MeteoritePlayer, FixedToString(lp_waitTime, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(lib1_gv_mETEORITE_MeteoritePlayer, "METEORITE_MeteoriteDrop_MicroCPNoTimer", lp_targetPoint);
}
void lib1_gf_METEORITE_MeteoriteMicroDropWithTimer (point lp_targetPoint, fixed lp_waitTime) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "METEORITE_MeteoriteDrop_MicroTimerCP", "InitialDelay", lib1_gv_mETEORITE_MeteoritePlayer, FixedToString(lp_waitTime, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(lib1_gv_mETEORITE_MeteoritePlayer, "METEORITE_MeteoriteDrop_MicroTimerCP", lp_targetPoint);
}
void lib1_gf_METEORITE_MeteoriteGiantDrop (point lp_targetPoint, fixed lp_waitTime) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "METEORITE_MeteoriteDrop_GiantTimerCP", "InitialDelay", lib1_gv_mETEORITE_MeteoritePlayer, FixedToString(lp_waitTime, c_fixedPrecisionAny));
    PlayerCreateEffectPoint(lib1_gv_mETEORITE_MeteoritePlayer, "METEORITE_MeteoriteDrop_GiantTimerCP", lp_targetPoint);
}
void lib1_gf_METEORITE_FirstDrop (int lp_time) {
    // Implementation
    lib1_gv_mETEORITE_FinishFirstDropAnim = false;
    UnitCreate(1, "METEORITE_MeteoriteDrop_GiantTimer", c_unitCreateIgnorePlacement, lib1_gv_mETEORITE_MeteoritePlayer, lib1_gv_mETEORITE_FirstPoint, 270.0);
    UnitBehaviorSetDurationRemaining(UnitLastCreated(), "METEORITE_Timer_GiantImpactTimerDropTime", (lp_time - 2.0));
    UnitBehaviorSetDurationRemaining(UnitLastCreated(), "METEORITE_Timer_GiantImpactTimerRemoveTime", lp_time);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), (("AnimSetTime Timer " + FixedToString((lib1_gv_mETEORITE_GiantDropTimeAnim - lp_time), c_fixedPrecisionAny) + " Scaled")));
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Cover Cover");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimClear Cover");
    Wait(0.125, c_timeGame);
    lib1_gv_mETEORITE_FinishFirstDropAnim = true;
}
void lib1_gf_METEORITE_Init () {
    // Implementation
    lib1_gf_METEORITE_ShieldRelation_Init();
}
trigger auto_lib1_gf_METEORITE_Wave_RegisterGiant_Trigger = null;
fixed auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_time;
string auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_shieldList;
fixed auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_randomDelayMax;
int auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_dropCount;
void lib1_gf_METEORITE_Wave_RegisterGiant (fixed lp_time, string lp_shieldList, fixed lp_randomDelayMax, int lp_dropCount) {
    auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_time = lp_time;
    auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_shieldList = lp_shieldList;
    auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_randomDelayMax = lp_randomDelayMax;
    auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_dropCount = lp_dropCount;
    if (auto_lib1_gf_METEORITE_Wave_RegisterGiant_Trigger == null) {
        auto_lib1_gf_METEORITE_Wave_RegisterGiant_Trigger = TriggerCreate("auto_lib1_gf_METEORITE_Wave_RegisterGiant_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_METEORITE_Wave_RegisterGiant_Trigger, false, false);
}
bool auto_lib1_gf_METEORITE_Wave_RegisterGiant_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_time;
    string lp_shieldList = auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_shieldList;
    fixed lp_randomDelayMax = auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_randomDelayMax;
    int lp_dropCount = auto_lib1_gf_METEORITE_Wave_RegisterGiant_lp_dropCount;
    int autoF6DCDD49_ae;
    int autoF6DCDD49_ai;
    int auto5B50ECDC_ae;
    int auto5B50ECDC_ai;
    // Variable Declarations
    int lv_listCount;
    int lv_reachLevel;
    unit lv_shieldUnit;
    int lv_i;
    int lv_j;
    int lv_randomWeightAll;
    int lv_shieldCount;
    int lv_targetShield;
    int lv_targetIndex;
    int[lib1_gv_mETEORITE_ShieldGeneratorCount + 1] lv_targetShieldIndexList;
    int[lib1_gv_mETEORITE_ShieldGeneratorCount + 1] lv_targetWeithtList;
    fixed lv_delay;
    fixed lv_minDelay;
    // Variable Initialization
    lv_listCount = 1;
    lv_reachLevel = 1;
    lv_i = 1;
    lv_j = 1;
    lv_minDelay = 524287.0;
    // Implementation
    lv_shieldUnit = lib1_gf_METEORITE_SubParameter_Unit(lp_shieldList, lv_listCount);
    lv_listCount += 1;
    lv_reachLevel = lib1_gf_METEORITE_SubParameter_Int(lp_shieldList, lv_listCount);
    lv_listCount += 1;
    while ((lv_shieldUnit != null)) {
        if ((lv_shieldUnit == null)) {
            continue;
        }
        lv_targetShieldIndexList[lv_i] = lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(lv_shieldUnit);
        if ((lv_reachLevel == 0)) {
            lv_targetWeithtList[lv_i] = 100000000;
        }
        else {
            lv_targetWeithtList[lv_i] = lib1_gv_mETEORITE_ShieldRelation_LevelRate[lv_reachLevel];
        }
        lv_randomWeightAll += lv_targetWeithtList[lv_i];
        lv_i += 1;
        lv_shieldUnit = lib1_gf_METEORITE_SubParameter_Unit(lp_shieldList, lv_listCount);
        lv_listCount += 1;
        lv_reachLevel = lib1_gf_METEORITE_SubParameter_Int(lp_shieldList, lv_listCount);
        lv_listCount += 1;
    }
    lv_shieldCount = (lv_i - 1);
    if ((lv_shieldCount > 0)) {
        autoF6DCDD49_ae = lp_dropCount;
        autoF6DCDD49_ai = 1;
        lv_j = 1;
        for ( ; ( (autoF6DCDD49_ai >= 0 && lv_j <= autoF6DCDD49_ae) || (autoF6DCDD49_ai <= 0 && lv_j >= autoF6DCDD49_ae) ) ; lv_j += autoF6DCDD49_ai ) {
            lv_targetIndex = RandomInt(1, lv_randomWeightAll);
            auto5B50ECDC_ae = lv_shieldCount;
            auto5B50ECDC_ai = 1;
            lv_i = 1;
            for ( ; ( (auto5B50ECDC_ai >= 0 && lv_i <= auto5B50ECDC_ae) || (auto5B50ECDC_ai <= 0 && lv_i >= auto5B50ECDC_ae) ) ; lv_i += auto5B50ECDC_ai ) {
                lv_targetIndex -= lv_targetWeithtList[lv_i];
                if ((lv_targetIndex <= 0)) {
                    break;
                }
            }
            lv_targetIndex = lv_targetShieldIndexList[lv_i];
            lv_targetShield = RandomInt(1, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_targetIndex].lv_targetCount);
            lv_delay = (lp_time + RandomFixed(0.0, lp_randomDelayMax));
            if ((lv_minDelay > lv_delay)) {
                lv_minDelay = lv_delay;
            }
            lib1_gf_METEORITE_ShieldRelation_DropOperate(lv_targetIndex);
            lib1_gf_METEORITE_MeteoritesRainGiant(lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_targetIndex].lv_targetPointList[lv_targetShield], lib1_gv_mETEORITE_Wave_MeteoritesRainRadiusInGiant, lib1_gv_mETEORITE_Wave_MinMeteoritesCountInGiant, lib1_gv_mETEORITE_Wave_MaxMeteoritesCountInGiant, lv_delay, false);
            UnitGroupAdd(lib1_gv_mETEORITE_Wave_DropTarget[lib1_gv_mETEORITE_Wave_MeteoriteCount], lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_targetIndex].lv_unit);
            lv_randomWeightAll -= lv_targetWeithtList[lv_i];
            lv_targetShieldIndexList[lv_i] = lv_targetShieldIndexList[lv_shieldCount];
            lv_targetWeithtList[lv_i] = lv_targetWeithtList[lv_shieldCount];
            lv_shieldCount -= 1;
            if ((lv_shieldCount <= 0)) {
                break;
            }
        }
        Wait(lv_minDelay, c_timeGame);
        if ((lib1_gv_mETEORITE_Wave_NextWaveTimerWindow != c_timerWindowNone)) {
            TimerWindowDestroy(lib1_gv_mETEORITE_Wave_NextWaveTimerWindow);
        }
        TimerStart(lib1_gv_mETEORITE_Wave_NextWaveTimer, lib1_gv_mETEORITE_GiantDropTime, false, c_timeGame);
        libCOMI_gf_TimerWindowCreate(lib1_gv_mETEORITE_Wave_NextWaveTimer, StringExternal("Param/Value/lib_1_3299D673"), true, false);
        lib1_gv_mETEORITE_Wave_NextWaveTimerWindow = TimerWindowLastCreated();
        TimerWindowDestroy(lib1_gv_cOOP_Objective_GameTimerWindow);
        libCOMI_gf_TimerWindowCreate(lib1_gv_cOOP_Objective_GameTimer, StringExternal("Param/Value/lib_1_8DF48C92"), true, false);
        lib1_gv_cOOP_Objective_GameTimerWindow = TimerWindowLastCreated();
        Wait(lib1_gv_mETEORITE_GiantDropTimeRemind, c_timeGame);
        if ((libCOMI_gf_GameIsOver() == false)) {
         //   lib1_gf_COOP_Transmission_Send("WaringMission", -1, true);
            libCOMI_gf_SendMissionTransmission("WaringMission", false, -1);
        }
    }
    return true;
}
trigger auto_lib1_gf_METEORITE_Wave_RegisterMicro_Trigger = null;
fixed auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_time;
string auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_shieldList;
fixed auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_randomDelayMax;
int auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_dropCount;
bool auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_isNotice;
void lib1_gf_METEORITE_Wave_RegisterMicro (fixed lp_time, string lp_shieldList, fixed lp_randomDelayMax, int lp_dropCount, bool lp_isNotice) {
    auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_time = lp_time;
    auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_shieldList = lp_shieldList;
    auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_randomDelayMax = lp_randomDelayMax;
    auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_dropCount = lp_dropCount;
    auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_isNotice = lp_isNotice;
    if (auto_lib1_gf_METEORITE_Wave_RegisterMicro_Trigger == null) {
        auto_lib1_gf_METEORITE_Wave_RegisterMicro_Trigger = TriggerCreate("auto_lib1_gf_METEORITE_Wave_RegisterMicro_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_METEORITE_Wave_RegisterMicro_Trigger, false, false);
}
bool auto_lib1_gf_METEORITE_Wave_RegisterMicro_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_time;
    string lp_shieldList = auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_shieldList;
    fixed lp_randomDelayMax = auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_randomDelayMax;
    int lp_dropCount = auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_dropCount;
    bool lp_isNotice = auto_lib1_gf_METEORITE_Wave_RegisterMicro_lp_isNotice;
    int auto21F47EE7_ae;
    int auto21F47EE7_ai;
    // Variable Declarations
    unit lv_shieldUnit;
    int lv_meteoriteCount;
    int lv_i;
    int lv_j;
    int lv_shieldCount;
    int lv_targetIndex;
    int[lib1_gv_mETEORITE_ShieldGeneratorCount + 1] lv_targetShieldIndexList;
    fixed lv_delay;
    // Variable Initialization
    lv_i = 1;
    // Implementation
    lv_shieldUnit = lib1_gf_METEORITE_SubParameter_Unit(lp_shieldList, lv_i);
    while ((lv_shieldUnit != null)) {
        if ((lv_shieldUnit == null)) {
            continue;
        }
        lv_targetShieldIndexList[lv_i] = lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(lv_shieldUnit);
        lv_i += 1;
        lv_shieldUnit = lib1_gf_METEORITE_SubParameter_Unit(lp_shieldList, lv_i);
    }
    lv_shieldCount = (lv_i - 1);
    if ((lv_shieldCount > 0)) {
        auto21F47EE7_ae = lp_dropCount;
        auto21F47EE7_ai = 1;
        lv_j = 1;
        for ( ; ( (auto21F47EE7_ai >= 0 && lv_j <= auto21F47EE7_ae) || (auto21F47EE7_ai <= 0 && lv_j >= auto21F47EE7_ae) ) ; lv_j += auto21F47EE7_ai ) {
            lv_i = RandomInt(1, lv_shieldCount);
            lv_targetIndex = lv_targetShieldIndexList[lv_i];
            lv_delay = (lp_time + RandomFixed(0.0, lp_randomDelayMax));
            lib1_gf_METEORITE_MeteoritesRainMicro(RegionCircle(lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_targetIndex].lv_point, lib1_gv_mETEORITE_Wave_MeteoritesRainRadiusInMicro), lib1_gv_mETEORITE_Wave_MinMeteoritesCountInMicro, lib1_gv_mETEORITE_Wave_MaxMeteoritesCountInMicro, lv_delay, true);
            lv_targetShieldIndexList[lv_i] = lv_targetShieldIndexList[lv_shieldCount];
            lv_shieldCount -= 1;
            if ((lv_shieldCount <= 0)) {
                break;
            }
        }
    }
    Wait((lv_delay - 15.0), c_timeGame);
    if ((libCOMI_gf_GameIsOver() == false) && (lp_isNotice == true)) {
      //  lib1_gf_COOP_Transmission_Send("WaringSpell", -1, true);
        libCOMI_gf_SendMissionTransmission("WaringSpell", false, -1);
    }
    return true;
}
bool lib1_gf_METEORITE_Wave_IsGiantImpact (point lp_point) {
    // Implementation
    return (UnitGroupCount(UnitGroup("METEORITE_MeteoriteDrop_GiantCrater", c_playerAny, RegionCircle(lp_point, lib1_gv_mETEORITE_Wave_IsGiantImpactCheckRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0);
}
trigger auto_lib1_gf_METEORITE_CameraShake_Trigger = null;
playergroup auto_lib1_gf_METEORITE_CameraShake_lp_players;
fixed auto_lib1_gf_METEORITE_CameraShake_lp_force;
fixed auto_lib1_gf_METEORITE_CameraShake_lp_hertz;
fixed auto_lib1_gf_METEORITE_CameraShake_lp_random;
int auto_lib1_gf_METEORITE_CameraShake_lp_camera;
int auto_lib1_gf_METEORITE_CameraShake_lp_angle;
fixed auto_lib1_gf_METEORITE_CameraShake_lp_defTime;
fixed auto_lib1_gf_METEORITE_CameraShake_lp_time;
void lib1_gf_METEORITE_CameraShake (playergroup lp_players, fixed lp_force, fixed lp_hertz, fixed lp_random, int lp_camera, int lp_angle, fixed lp_defTime, fixed lp_time) {
    auto_lib1_gf_METEORITE_CameraShake_lp_players = lp_players;
    auto_lib1_gf_METEORITE_CameraShake_lp_force = lp_force;
    auto_lib1_gf_METEORITE_CameraShake_lp_hertz = lp_hertz;
    auto_lib1_gf_METEORITE_CameraShake_lp_random = lp_random;
    auto_lib1_gf_METEORITE_CameraShake_lp_camera = lp_camera;
    auto_lib1_gf_METEORITE_CameraShake_lp_angle = lp_angle;
    auto_lib1_gf_METEORITE_CameraShake_lp_defTime = lp_defTime;
    auto_lib1_gf_METEORITE_CameraShake_lp_time = lp_time;
    if (auto_lib1_gf_METEORITE_CameraShake_Trigger == null) {
        auto_lib1_gf_METEORITE_CameraShake_Trigger = TriggerCreate("auto_lib1_gf_METEORITE_CameraShake_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_METEORITE_CameraShake_Trigger, false, false);
}
bool auto_lib1_gf_METEORITE_CameraShake_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_lib1_gf_METEORITE_CameraShake_lp_players;
    fixed lp_force = auto_lib1_gf_METEORITE_CameraShake_lp_force;
    fixed lp_hertz = auto_lib1_gf_METEORITE_CameraShake_lp_hertz;
    fixed lp_random = auto_lib1_gf_METEORITE_CameraShake_lp_random;
    int lp_camera = auto_lib1_gf_METEORITE_CameraShake_lp_camera;
    int lp_angle = auto_lib1_gf_METEORITE_CameraShake_lp_angle;
    fixed lp_defTime = auto_lib1_gf_METEORITE_CameraShake_lp_defTime;
    fixed lp_time = auto_lib1_gf_METEORITE_CameraShake_lp_time;
    playergroup autoCB6DB0E3_g;
    int autoCB6DB0E3_p;
    playergroup auto23B9CA2B_g;
    int auto23B9CA2B_p;
    // Variable Declarations
    int lv_player;
    // Variable Initialization
    // Implementation
    autoCB6DB0E3_g = lp_players; 
    autoCB6DB0E3_p = 1;
    for ( ; autoCB6DB0E3_p <= PlayerGroupCount(autoCB6DB0E3_g) ; autoCB6DB0E3_p += BoolToInt(lv_player == PlayerGroupPlayer(autoCB6DB0E3_g, autoCB6DB0E3_p)) ) {
        lv_player = PlayerGroupPlayer(autoCB6DB0E3_g, autoCB6DB0E3_p);
        CameraShakeStart(lv_player, lp_camera, lp_angle, lp_force, lp_hertz, lp_random, lp_defTime);
    }
    if (((lp_time - lp_defTime) > 0.0)) {
        Wait(lp_defTime, c_timeGame);
        auto23B9CA2B_g = lp_players; 
        auto23B9CA2B_p = 1;
        for ( ; auto23B9CA2B_p <= PlayerGroupCount(auto23B9CA2B_g) ; auto23B9CA2B_p += BoolToInt(lv_player == PlayerGroupPlayer(auto23B9CA2B_g, auto23B9CA2B_p)) ) {
            lv_player = PlayerGroupPlayer(auto23B9CA2B_g, auto23B9CA2B_p);
            CameraShakeStart(lv_player, lp_camera, lp_angle, (lp_force * 0.5), lp_hertz, lp_random, (lp_time - lp_defTime));
        }
    }
    return true;
}
void lib1_gf_METEORITE_CameraShakeForPlayer (point lp_centerPoint, fixed lp_maxRange, playergroup lp_players, fixed lp_force, fixed lp_hertz, fixed lp_random, int lp_camera, int lp_angle, fixed lp_defTime, fixed lp_time) {
    playergroup autoBFCFF8F9_g;
    int autoBFCFF8F9_p;
    // Variable Declarations
    int lv_player;
    fixed lv_range;
    fixed lv_size;
    // Variable Initialization
    // Implementation
    autoBFCFF8F9_g = lp_players; 
    autoBFCFF8F9_p = 1;
    for ( ; autoBFCFF8F9_p <= PlayerGroupCount(autoBFCFF8F9_g) ; autoBFCFF8F9_p += BoolToInt(lv_player == PlayerGroupPlayer(autoBFCFF8F9_g, autoBFCFF8F9_p)) ) {
        lv_player = PlayerGroupPlayer(autoBFCFF8F9_g, autoBFCFF8F9_p);
        lv_range = DistanceBetweenPoints(lp_centerPoint, CameraGetTarget(lv_player));
        if ((lv_range >= lp_maxRange)) {
            continue;
        }
        else {
            lv_size = (1.0 - (lv_range / lp_maxRange));
        }
        lib1_gf_METEORITE_CameraShake(lp_players, (lp_force * lv_size), lp_hertz, lp_random, lp_camera, lp_angle, lp_defTime, lp_time);
    }
}
void lib1_gf_METEORITE_ShieldRelation_Init () {
    // Implementation
    lib1_gv_mETEORITE_ShieldRelation_LevelRate[0] = 0;
    lib1_gv_mETEORITE_ShieldRelation_LevelRate[1] = 4;
    lib1_gv_mETEORITE_ShieldRelation_LevelRate[2] = 3;
    lib1_gv_mETEORITE_ShieldRelation_LevelRate[3] = 2;
    lib1_gv_mETEORITE_ShieldRelation_LevelRate[4] = 1;
    lib1_gv_mETEORITE_ShieldRelation_HomeList = lib1_gf_METEORITE_SubParameter_CombineShield(lib1_gv_mETEORITE_ShieldRelation_HomeList, UnitFromId(884931564));
    lib1_gv_mETEORITE_ShieldRelation_HomeList = lib1_gf_METEORITE_SubParameter_CombineShield(lib1_gv_mETEORITE_ShieldRelation_HomeList, UnitFromId(152052602));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(884931564));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(152052602));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(1695897175));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(2079699024));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(1780882887));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(1179213140));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(471939332));
    lib1_gf_METEORITE_ShieldRelation_SetMicro(UnitFromId(249241236));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(1444258257), 0, (IntToString(UnitGetTag(UnitFromId(1115769804))) + lib1_gv_mETEORITE_Wave_IntervalString + IntToString(UnitGetTag(UnitFromId(497956187)))));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(1295930794), 0, (IntToString(UnitGetTag(UnitFromId(1199500214))) + lib1_gv_mETEORITE_Wave_IntervalString + IntToString(UnitGetTag(UnitFromId(933669696)))));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(1115769804), 1, (""));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(1199500214), 1, (""));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(497956187), 1, (IntToString(UnitGetTag(UnitFromId(1284520840))) + lib1_gv_mETEORITE_Wave_IntervalString + IntToString(UnitGetTag(UnitFromId(1780882887)))));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(933669696), 1, (IntToString(UnitGetTag(UnitFromId(1080376968))) + lib1_gv_mETEORITE_Wave_IntervalString + IntToString(UnitGetTag(UnitFromId(281398309))) + lib1_gv_mETEORITE_Wave_IntervalString + IntToString(UnitGetTag(UnitFromId(1780882887)))));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(1284520840), 2, (IntToString(UnitGetTag(UnitFromId(281398309)))));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(1080376968), 2, (""));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(281398309), 3, (IntToString(UnitGetTag(UnitFromId(690033325))) + lib1_gv_mETEORITE_Wave_IntervalString + IntToString(UnitGetTag(UnitFromId(1284520840))) + lib1_gv_mETEORITE_Wave_IntervalString + IntToString(UnitGetTag(UnitFromId(933669696)))));
    lib1_gf_METEORITE_ShieldRelation_ShieldRegister(UnitFromId(690033325), 4, (""));
    lib1_gv_mETEORITE_ShieldRelation_GiantCount = 2;
    lib1_gv_mETEORITE_ShieldRelation_GiantList[1] = lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(UnitFromId(1444258257));
    lib1_gv_mETEORITE_ShieldRelation_GiantList[2] = lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(UnitFromId(1295930794));
}
void lib1_gf_METEORITE_ShieldRelation_SetMicro (unit lp_unit) {
    // Implementation
    lib1_gv_mETEORITE_ShieldGeneratorInfoList[lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(lp_unit)].lv_isMicroPoint = true;
}
trigger auto_lib1_gf_METEORITE_ShieldRelation_Wave_Trigger = null;
fixed auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_time;
fixed auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_randomDelayMax;
int auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_dropCountGiant;
int auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_dropCountMicro;
void lib1_gf_METEORITE_ShieldRelation_Wave (fixed lp_time, fixed lp_randomDelayMax, int lp_dropCountGiant, int lp_dropCountMicro) {
    auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_time = lp_time;
    auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_randomDelayMax = lp_randomDelayMax;
    auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_dropCountGiant = lp_dropCountGiant;
    auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_dropCountMicro = lp_dropCountMicro;
    if (auto_lib1_gf_METEORITE_ShieldRelation_Wave_Trigger == null) {
        auto_lib1_gf_METEORITE_ShieldRelation_Wave_Trigger = TriggerCreate("auto_lib1_gf_METEORITE_ShieldRelation_Wave_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_METEORITE_ShieldRelation_Wave_Trigger, false, false);
}
bool auto_lib1_gf_METEORITE_ShieldRelation_Wave_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_time;
    fixed lp_randomDelayMax = auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_randomDelayMax;
    int lp_dropCountGiant = auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_dropCountGiant;
    int lp_dropCountMicro = auto_lib1_gf_METEORITE_ShieldRelation_Wave_lp_dropCountMicro;
    int auto425E94D1_ae;
    int auto425E94D1_ai;
    int auto2CA31447_ae;
    int auto2CA31447_ai;
    // Variable Declarations
    int lv_i;
    string lv_giantShieldList;
    string lv_microShieldList;
    fixed lv_microBaseDelay;
    // Variable Initialization
    lv_giantShieldList = "";
    lv_microShieldList = "";
    lv_microBaseDelay = ((lp_time + lib1_gv_mETEORITE_GiantDropTime) - lib1_gv_mETEORITE_MeteortietRainMicroBefore);
    // Implementation
    auto425E94D1_ae = lib1_gv_mETEORITE_ShieldRelation_GiantCount;
    auto425E94D1_ai = 1;
    lv_i = 1;
    for ( ; ( (auto425E94D1_ai >= 0 && lv_i <= auto425E94D1_ae) || (auto425E94D1_ai <= 0 && lv_i >= auto425E94D1_ae) ) ; lv_i += auto425E94D1_ai ) {
        lv_giantShieldList = lib1_gf_METEORITE_SubParameter_CombineShieldAndRate(lv_giantShieldList, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lib1_gv_mETEORITE_ShieldRelation_GiantList[lv_i]].lv_unit, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lib1_gv_mETEORITE_ShieldRelation_GiantList[lv_i]].lv_level);
    }
    auto2CA31447_ae = lib1_gv_mETEORITE_ShieldRelation_MicroCount;
    auto2CA31447_ai = 1;
    lv_i = 1;
    for ( ; ( (auto2CA31447_ai >= 0 && lv_i <= auto2CA31447_ae) || (auto2CA31447_ai <= 0 && lv_i >= auto2CA31447_ae) ) ; lv_i += auto2CA31447_ai ) {
        lv_microShieldList = lib1_gf_METEORITE_SubParameter_CombineShield(lv_microShieldList, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lib1_gv_mETEORITE_ShieldRelation_MicroList[lv_i]].lv_unit);
    }
    lib1_gf_METEORITE_Wave_RegisterGiant(lp_time, lv_giantShieldList, lp_randomDelayMax, lp_dropCountGiant);
    lib1_gf_METEORITE_Wave_RegisterMicro(lv_microBaseDelay, lv_microShieldList, lp_randomDelayMax, lp_dropCountMicro, false);
    lib1_gv_mETEORITE_Wave_MeteoriteCount += 1;
    Wait(lp_time, c_timeGame);
    lib1_gf_COOP_AI_HybridDominator();
    //lib1_gf_COOP_Transmission_Send("DropBeginSF", -1, true);
    libCOMI_gf_SendMissionTransmission("DropBeginSF", false, -1);
    lib1_gv_mETEORITE_Wave_MeteoriteIndex += 1;
    return true;
}
void lib1_gf_METEORITE_ShieldRelation_WaveLast (fixed lp_time, fixed lp_randomDelayMax, int lp_dropCountGiant, int lp_dropCountMicro) {
    int auto953FC90F_ae;
    int auto953FC90F_ai;
    int autoF7C77F91_ae;
    int autoF7C77F91_ai;
    // Variable Declarations
    int lv_i;
    string lv_giantShieldList;
    string lv_microShieldList;
    fixed lv_microBaseDelay;
    // Variable Initialization
    lv_giantShieldList = "";
    lv_microShieldList = "";
    lv_microBaseDelay = ((lp_time + lib1_gv_mETEORITE_GiantDropTime) - lib1_gv_mETEORITE_MeteortietRainMicroBefore);
    // Implementation
    auto953FC90F_ae = lib1_gv_mETEORITE_ShieldGeneratorCount;
    auto953FC90F_ai = 1;
    lv_i = 1;
    for ( ; ( (auto953FC90F_ai >= 0 && lv_i <= auto953FC90F_ae) || (auto953FC90F_ai <= 0 && lv_i >= auto953FC90F_ae) ) ; lv_i += auto953FC90F_ai ) {
        if ((lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_i].lv_isImpact == false) && (lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_i].lv_isMicroPoint == false)) {
            lv_giantShieldList = lib1_gf_METEORITE_SubParameter_CombineShieldAndRate(lv_giantShieldList, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_i].lv_unit, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_i].lv_level);
        }
    }
    autoF7C77F91_ae = lib1_gv_mETEORITE_ShieldRelation_MicroCount;
    autoF7C77F91_ai = 1;
    lv_i = 1;
    for ( ; ( (autoF7C77F91_ai >= 0 && lv_i <= autoF7C77F91_ae) || (autoF7C77F91_ai <= 0 && lv_i >= autoF7C77F91_ae) ) ; lv_i += autoF7C77F91_ai ) {
        lv_microShieldList = lib1_gf_METEORITE_SubParameter_CombineShield(lv_microShieldList, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lib1_gv_mETEORITE_ShieldRelation_MicroList[lv_i]].lv_unit);
    }
    lib1_gf_METEORITE_Wave_RegisterGiant(lp_time, lv_giantShieldList, lp_randomDelayMax, lp_dropCountGiant);
    lib1_gf_METEORITE_Wave_RegisterMicro(lv_microBaseDelay, lv_microShieldList, lp_randomDelayMax, lp_dropCountMicro, false);
    lib1_gv_mETEORITE_Wave_MeteoriteCount += 1;
    Wait(lp_time, c_timeGame);
    lib1_gv_mETEORITE_Wave_MeteoriteIndex += 1;
    Wait(lp_time, c_timeGame);
    lib1_gf_COOP_AI_HybridDominator();
    libCOMI_gf_SendMissionTransmission("DropBeginSF", false, -1);
   // lib1_gf_COOP_Transmission_Send("DropBeginSF", -1, true);
}
trigger auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_Trigger = null;
fixed auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_time;
fixed auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_randomDelayMax;
int auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_dropCountMicro;
void lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle (fixed lp_time, fixed lp_randomDelayMax, int lp_dropCountMicro) {
    auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_time = lp_time;
    auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_randomDelayMax = lp_randomDelayMax;
    auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_dropCountMicro = lp_dropCountMicro;
    if (auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_Trigger == null) {
        auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_Trigger = TriggerCreate("auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_Trigger, false, false);
}
bool auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_time;
    fixed lp_randomDelayMax = auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_randomDelayMax;
    int lp_dropCountMicro = auto_lib1_gf_METEORITE_ShieldRelation_WaveMicroSingle_lp_dropCountMicro;
    int auto14821BA9_ae;
    int auto14821BA9_ai;
    // Variable Declarations
    int lv_i;
    int lv_randomCount;
    string lv_microShieldList;
    // Variable Initialization
    lv_randomCount = (lp_dropCountMicro - 1);
    lv_microShieldList = "";
    // Implementation
    lib1_gf_METEORITE_Wave_RegisterMicro(lp_time, lib1_gv_mETEORITE_ShieldRelation_HomeList, lp_randomDelayMax, 1, true);
    if ((lv_randomCount >= 1)) {
        auto14821BA9_ae = lib1_gv_mETEORITE_ShieldRelation_MicroCount;
        auto14821BA9_ai = 1;
        lv_i = 1;
        for ( ; ( (auto14821BA9_ai >= 0 && lv_i <= auto14821BA9_ae) || (auto14821BA9_ai <= 0 && lv_i >= auto14821BA9_ae) ) ; lv_i += auto14821BA9_ai ) {
            lv_microShieldList = lib1_gf_METEORITE_SubParameter_CombineShield(lv_microShieldList, lib1_gv_mETEORITE_ShieldGeneratorInfoList[lib1_gv_mETEORITE_ShieldRelation_MicroList[lv_i]].lv_unit);
        }
        lib1_gf_METEORITE_Wave_RegisterMicro(lp_time, lv_microShieldList, lp_randomDelayMax, lv_randomCount, false);
    }
    return true;
}
void lib1_gf_METEORITE_ShieldRelation_ShieldRegister (unit lp_shield, int lp_reachLevel, string lp_neighborShieldList) {
    // Variable Declarations
    unit lv_shieldUnit;
    int lv_shieldCount;
    int lv_shieldIndex;
    int lv_shieldIndexTemp;
    string lv_firstName;
    // Variable Initialization
    lv_shieldCount = 1;
    lv_shieldIndex = lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(lp_shield);
    lv_firstName = (lib1_gv_mETEORITE_HashtableName + lib1_gv_mETEORITE_ShieldRelationName + IntToString(UnitGetTag(lp_shield)));
    // Implementation
    lib1_gv_mETEORITE_ShieldRelation_RegisterCount += 1;
    lv_shieldUnit = lib1_gf_METEORITE_SubParameter_Unit(lp_neighborShieldList, lv_shieldCount);
    while ((lv_shieldUnit != null)) {
        if ((lv_shieldUnit == null)) {
            continue;
        }
        lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldIndex].lv_neighborIndex[lv_shieldCount] = lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(lv_shieldUnit);
        lv_shieldCount += 1;
        lv_shieldUnit = lib1_gf_METEORITE_SubParameter_Unit(lp_neighborShieldList, lv_shieldCount);
    }
    lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldIndex].lv_neighborCount = (lv_shieldCount - 1);
    lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_shieldIndex].lv_level = lp_reachLevel;
}
void lib1_gf_METEORITE_ShieldRelation_DropOperate (int lp_shielInfodIndex) {
    int autoBCB03D63_ae;
    int autoBCB03D63_ai;
    int auto9AF56166_ae;
    int auto9AF56166_ai;
    // Variable Declarations
    int lv_index;
    int lv_i;
    int lv_neighborIndex;
    // Variable Initialization
    // Implementation
    autoBCB03D63_ae = lib1_gv_mETEORITE_ShieldRelation_GiantCount;
    autoBCB03D63_ai = 1;
    lv_i = 1;
    for ( ; ( (autoBCB03D63_ai >= 0 && lv_i <= autoBCB03D63_ae) || (autoBCB03D63_ai <= 0 && lv_i >= autoBCB03D63_ae) ) ; lv_i += autoBCB03D63_ai ) {
        if ((lib1_gv_mETEORITE_ShieldRelation_GiantList[lv_i] == lp_shielInfodIndex)) {
            lv_index = lv_i;
            break;
        }
    }
    if ((lv_index == 0)) {
        return ;
    }
    lib1_gv_mETEORITE_ShieldRelation_MicroCount += 1;
    lib1_gv_mETEORITE_ShieldRelation_MicroList[lib1_gv_mETEORITE_ShieldRelation_MicroCount] = lp_shielInfodIndex;
    lib1_gv_mETEORITE_ShieldRelation_GiantList[lv_index] = lib1_gv_mETEORITE_ShieldRelation_GiantList[lib1_gv_mETEORITE_ShieldRelation_GiantCount];
    lib1_gv_mETEORITE_ShieldGeneratorInfoList[lp_shielInfodIndex].lv_isImpact = true;
    lib1_gv_mETEORITE_ShieldRelation_GiantCount -= 1;
    auto9AF56166_ae = lib1_gv_mETEORITE_ShieldGeneratorInfoList[lp_shielInfodIndex].lv_neighborCount;
    auto9AF56166_ai = 1;
    lv_i = 1;
    for ( ; ( (auto9AF56166_ai >= 0 && lv_i <= auto9AF56166_ae) || (auto9AF56166_ai <= 0 && lv_i >= auto9AF56166_ae) ) ; lv_i += auto9AF56166_ai ) {
        lv_neighborIndex = lib1_gv_mETEORITE_ShieldGeneratorInfoList[lp_shielInfodIndex].lv_neighborIndex[lv_i];
        if ((lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_neighborIndex].lv_isImpact == true)) {
            continue;
        }
        if ((lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_neighborIndex].lv_isMicroPoint == false)) {
            lib1_gv_mETEORITE_ShieldRelation_GiantCount += 1;
            lib1_gv_mETEORITE_ShieldRelation_GiantList[lib1_gv_mETEORITE_ShieldRelation_GiantCount] = lv_neighborIndex;
        }
        else {
            lib1_gv_mETEORITE_ShieldRelation_MicroCount += 1;
            lib1_gv_mETEORITE_ShieldRelation_MicroList[lib1_gv_mETEORITE_ShieldRelation_MicroCount] = lv_neighborIndex;
            lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_neighborIndex].lv_isImpact = true;
        }
    }
}
string lib1_gf_METEORITE_SubParameter_CombineShield (string lp_base, unit lp_shield) {
    // Implementation
    if ((lp_base == "")) {
        return (IntToString(UnitGetTag(lp_shield)));
    }
    else {
        return (lp_base + " " + IntToString(UnitGetTag(lp_shield)));
    }
}
string lib1_gf_METEORITE_SubParameter_CombineShieldAndRate (string lp_base, unit lp_shield, int lp_rate) {
    // Implementation
    if ((lp_base == "")) {
        return (IntToString(UnitGetTag(lp_shield)) + " " + IntToString(lp_rate));
    }
    else {
        return (lp_base + " " + IntToString(UnitGetTag(lp_shield)) + " " + IntToString(lp_rate));
    }
}
unit lib1_gf_METEORITE_SubParameter_Unit (string lp_shieldList, int lp_index) {
    // Variable Declarations
    string lv_unitTag;
    int lv_listIndex;
    // Variable Initialization
    lv_unitTag = StringWord(lp_shieldList, lp_index);
    // Implementation
    if ((lv_unitTag == "")) {
        return null;
    }
    else {
        lv_listIndex = DataTableGetInt(true, (lib1_gv_mETEORITE_HashtableName + lib1_gv_mETEORITE_ShieldGenerator + lv_unitTag));
        return lib1_gv_mETEORITE_ShieldGeneratorInfoList[lv_listIndex].lv_unit;
    }
}
int lib1_gf_METEORITE_SubParameter_Int (string lp_shieldList, int lp_index) {
    // Variable Declarations
    string lv_count;
    // Variable Initialization
    lv_count = StringWord(lp_shieldList, lp_index);
    // Implementation
    if ((lv_count == "")) {
        return -1;
    }
    else {
        return StringToInt(lv_count);
    }
}
fixed lib1_gf_METEORITE_SubParameter_GetMicroDifficultRate (int lp_difficult) {
    // Implementation
    if ((lp_difficult == 1)) {
        return 0.8;
    }
    else if ((lp_difficult == 2)) {
        return 0.9;
    }
    else if ((lp_difficult == 3)) {
        return 1.0;
    }
    else if ((lp_difficult == 4)) {
        return 1.1;
    }
    else if ((lp_difficult == 5)) {
        return 1.2;
    }
    else if ((lp_difficult == 6)) {
        return 1.3;
    }
    return 1.0;
}
trigger auto_lib1_gf_COOP_Transmission_Send_Trigger = null;
string auto_lib1_gf_COOP_Transmission_Send_lp_type;
int auto_lib1_gf_COOP_Transmission_Send_lp_sourcePlayer;
bool auto_lib1_gf_COOP_Transmission_Send_lp_waitUntilDone;
void lib1_gf_COOP_Transmission_Send (string lp_type, int lp_sourcePlayer, bool lp_waitUntilDone) {
    auto_lib1_gf_COOP_Transmission_Send_lp_type = lp_type;
    auto_lib1_gf_COOP_Transmission_Send_lp_sourcePlayer = lp_sourcePlayer;
    auto_lib1_gf_COOP_Transmission_Send_lp_waitUntilDone = lp_waitUntilDone;
    if (auto_lib1_gf_COOP_Transmission_Send_Trigger == null) {
        auto_lib1_gf_COOP_Transmission_Send_Trigger = TriggerCreate("auto_lib1_gf_COOP_Transmission_Send_TriggerFunc");
    }
    TriggerExecute(auto_lib1_gf_COOP_Transmission_Send_Trigger, false, false);
}
bool auto_lib1_gf_COOP_Transmission_Send_TriggerFunc (bool testConds, bool runActions) {
    string lp_type = auto_lib1_gf_COOP_Transmission_Send_lp_type;
    int lp_sourcePlayer = auto_lib1_gf_COOP_Transmission_Send_lp_sourcePlayer;
    bool lp_waitUntilDone = auto_lib1_gf_COOP_Transmission_Send_lp_waitUntilDone;
    soundlink lv_sound;
    // Implementation
    lib1_gv_cOOP_TransmissionLastSend = lp_type;
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerQueueEnter();
        lv_sound = SoundLink(lp_type, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission(lp_type, lp_waitUntilDone, lp_sourcePlayer);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    return true;
}
void lib1_gf_COOP_Transmission_Init () {
    // Implementation
    ConversationDataRegisterPortrait("char_Clolarian", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
}
void lib1_gf_COOP_Transmission_StopCurrent () {
    // Implementation
    UserDataSetInt("MissionTransmission", lib1_gv_cOOP_TransmissionLastSend, "PlayingNow", 1, 0);
    ConversationDataStop();
}
void lib1_gf_COOP_AI_WaveStart_Create (int lp_pointType, int lp_resourceBucket, int lp_techBucket, int lp_targetType) {
    unitgroup autoB2F67917_g;
    int autoB2F67917_u;
    unitgroup auto16EE0A87_g;
    int auto16EE0A87_u;
    unitgroup autoC052BFC1_g;
    int autoC052BFC1_u;
    unitgroup autoF447D1B5_g;
    int autoF447D1B5_u;
    // Variable Declarations
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;
    unitgroup lv_targetGroup;
    unitgroup lv_targetRandomGroup;
    unit lv_targetUnit;
    int lv_resourceBucketNew;
    int lv_techBucketNew;
    int lv_targetTypeModify;
    unitgroup lv_attackGroup;
    unit lv_selectUnit;
    // Variable Initialization
    lv_targetGroup = UnitGroupEmpty();
    lv_targetRandomGroup = UnitGroupEmpty();
    lv_resourceBucketNew = lp_resourceBucket;
    lv_techBucketNew = lp_techBucket;
    lv_targetTypeModify = lp_targetType;
    lv_attackGroup = UnitGroupEmpty();
    // Implementation
    if ((lp_pointType != lib1_ge_COOP_AI_Wave_StartPointType_Point0) && (lp_pointType != lib1_ge_COOP_AI_Wave_StartPointType_Point4)) {
        ActorSend(lib1_gv_cOOP_AI_Wave_StartDoodad[lp_pointType], "Signal Work");
        Wait(3.5, c_timeGame);
    }
    if ((lv_targetTypeModify == lib1_ge_COOP_AI_Wave_StartTargetType_PlayerBase)) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(1832077837);
        }
        else {
            lv_attackPathWaypoint = PointFromId(121736888);
        }
        AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, PointFromId(71592078));
        AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_04_ENEMY, PointFromId(71592078));
        libCOMI_gf_SetCoopAIWaveTarget(lib1_gv_cOOP_Init_PLAYER_04_ENEMY, AIWaveTargetPoint(PointFromId(71592078)));
        libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lv_resourceBucketNew, lv_techBucketNew, lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType], true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else if ((lv_targetTypeModify == lib1_ge_COOP_AI_Wave_StartTargetType_PlayerSec)) {
        PlayerGroupLoopBegin(libCOMI_gf_HumanPlayers());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(13), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        }
        PlayerGroupLoopEnd();
        if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
            if ((RandomInt(0, 100) < 50)) {
                lv_attackPathWaypoint = PointFromId(394810373);
            }
            else {
                lv_attackPathWaypoint = PointFromId(841332029);
            }
        }
        else {
            if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
                lv_attackPathWaypoint = PointFromId(394810373);
            }
            else {
                lv_attackPathWaypoint = PointFromId(841332029);
            }
        }
        AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, PointFromId(71592078));
        AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_04_ENEMY, PointFromId(71592078));
        libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lv_resourceBucketNew, lv_techBucketNew, lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType], true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else if ((lv_targetTypeModify == lib1_ge_COOP_AI_Wave_StartTargetType_ShieldGenerator)) {
        autoB2F67917_g = UnitGroup("SOLARCRYSTAL_ShieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB2F67917_u = 1;
        for ( ; autoB2F67917_u <= UnitGroupCount(autoB2F67917_g, c_unitCountAll) ; autoB2F67917_u += BoolToInt(lv_targetUnit == UnitGroupUnit(autoB2F67917_g, autoB2F67917_u)) ) {
            lv_targetUnit = UnitGroupUnit(autoB2F67917_g, autoB2F67917_u);
            if ((UnitGroupHasUnit(lib1_gv_cOOP_AI_Wave_HomeShield, lv_targetUnit) == false)) {
                UnitGroupAdd(lv_targetRandomGroup, lv_targetUnit);
            }
            if ((UnitBehaviorCount(lv_targetUnit, "SOLARCRYSTAL_EnergyPort_HasCrystal") != 0) && (UnitGroupHasUnit(lib1_gv_cOOP_AI_Wave_HomeShield, lv_targetUnit) == false)) {
                UnitGroupAdd(lv_targetGroup, lv_targetUnit);
            }
        }
        if ((UnitGroupCount(lv_targetGroup, c_unitCountAlive) == 0)) {
            lv_targetGroup = lv_targetRandomGroup;
        }
        lv_targetUnit = UnitGroupRandomUnit(lv_targetGroup, c_unitCountAlive);
        AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType]);
        AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType]);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lv_resourceBucketNew, lv_techBucketNew, lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType], true);
        UnitGroupAddUnitGroup(lv_attackGroup, libCOMI_gf_LastCreatedCoopAttackForce());
        if ((lp_resourceBucket >= libCOMI_ge_CoopAIAttackWaveBuckets__5Large) && (lp_techBucket >= libCOMI_ge_CoopAITechLevelBuckets__5Late)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, RandomInt(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lib1_gv_cOOP_Init_PLAYER_04_ENEMY), lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType]);
            libCOMI_gf_DropPodWarpInUnitGroup(UnitLastCreatedGroup(), lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType]);
            UnitGroupAddUnitGroup(lv_attackGroup, UnitLastCreatedGroup());
        }
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
        auto16EE0A87_g = lv_attackGroup;
        auto16EE0A87_u = 1;
        for ( ; auto16EE0A87_u <= UnitGroupCount(auto16EE0A87_g, c_unitCountAll) ; auto16EE0A87_u += BoolToInt(lv_selectUnit == UnitGroupUnit(auto16EE0A87_g, auto16EE0A87_u)) ) {
            lv_selectUnit = UnitGroupUnit(auto16EE0A87_g, auto16EE0A87_u);
            UnitIssueOrder(lv_selectUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_targetUnit)), c_orderQueueAddToEnd);
        }
    }
    else if ((lv_targetTypeModify == lib1_ge_COOP_AI_Wave_StartTargetType_SolarCrystal)) {
        autoC052BFC1_g = UnitGroup("SOLARCRYSTAL_SolarCrystalUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC052BFC1_u = 1;
        for ( ; autoC052BFC1_u <= UnitGroupCount(autoC052BFC1_g, c_unitCountAll) ; autoC052BFC1_u += BoolToInt(lv_targetUnit == UnitGroupUnit(autoC052BFC1_g, autoC052BFC1_u)) ) {
            lv_targetUnit = UnitGroupUnit(autoC052BFC1_g, autoC052BFC1_u);
            UnitGroupAdd(lv_targetGroup, lv_targetUnit);
        }
        autoF447D1B5_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF447D1B5_u = 1;
        for ( ; autoF447D1B5_u <= UnitGroupCount(autoF447D1B5_g, c_unitCountAll) ; autoF447D1B5_u += BoolToInt(lv_targetUnit == UnitGroupUnit(autoF447D1B5_g, autoF447D1B5_u)) ) {
            lv_targetUnit = UnitGroupUnit(autoF447D1B5_g, autoF447D1B5_u);
            if ((UnitBehaviorCount(lv_targetUnit, "SOLARCRYSTAL_Worker_HasCrystal") != 0)) {
                UnitGroupAdd(lv_targetGroup, lv_targetUnit);
            }
        }
        if ((UnitGroupCount(lv_targetGroup, c_unitCountAlive) != 0)) {
            lv_targetUnit = UnitGroupRandomUnit(lv_targetGroup, c_unitCountAlive);
            if ((UnitGetType(lv_targetUnit) == "SOLARCRYSTAL_SolarCrystalUnit")) {
                AIAttackWaveSetTargetUnitPoint(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lv_targetUnit);
                AIAttackWaveSetTargetUnitPoint(lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lv_targetUnit);
            }
            else {
                AIAttackWaveSetTargetUnit(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lv_targetUnit);
                AIAttackWaveSetTargetUnit(lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lv_targetUnit);
            }
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lv_resourceBucketNew, lv_techBucketNew, lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType], true);
            libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        }
        else {
            AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, PointFromId(71592078));
            AIAttackWaveSetTargetPoint(lib1_gv_cOOP_Init_PLAYER_04_ENEMY, PointFromId(71592078));
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lib1_gv_cOOP_Init_PLAYER_03_ENEMY, lib1_gv_cOOP_Init_PLAYER_04_ENEMY, lv_resourceBucketNew, lv_techBucketNew, lib1_gv_cOOP_AI_Wave_StartPoint[lp_pointType], true);
            libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        }
    }
}
void lib1_gf_COOP_AI_WaveStart_Register (fixed lp_time, int lp_pointType, int lp_difficulty, int lp_resourceBucket, int lp_techBucket, int lp_targetType) {
    // Variable Declarations
    string lv_tag;
    int lv_pointType;
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_targetType;
    // Variable Initialization
    lv_tag = (lib1_gv_cOOP_HashtablName + lib1_gv_cOOP_AI_Wave_Name + IntToString(lib1_gv_cOOP_AI_Wave_Count));
    // Implementation
    if ((lib1_gf_COOP_AI_WaveStart_DifficultToInt(lp_difficulty) != lib1_gv_cOOP_Init_AIDifficult)) {
        return ;
    }
    lv_pointType = lp_pointType;
    lv_resourceBucket = lp_resourceBucket;
    lv_techBucket = lp_techBucket;
    lv_targetType = lp_targetType;
    DataTableSetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_PointName), lv_pointType);
    DataTableSetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_BucketsName), lv_resourceBucket);
    DataTableSetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_TechName), lv_techBucket);
    DataTableSetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_TargetName), lv_targetType);
    lib1_gv_cOOP_AI_Wave_Count += 1;
    TriggerAddEventTimeElapsed(lib1_gt_COOP_AI_Wave_Start, lp_time, c_timeGame);
}
void lib1_gf_COOP_AI_HybridDominator () {
    unitgroup autoABF5A15C_g;
    int autoABF5A15C_u;
    unitgroup auto3E5653CB_g;
    int auto3E5653CB_u;
    // Variable Declarations
    unit lv_hybridUnit;
    unit lv_units;
    // Variable Initialization
    // Implementation
    autoABF5A15C_g = lib1_gv_mETEORITE_Wave_DropTarget[lib1_gv_mETEORITE_Wave_MeteoriteIndex];
    autoABF5A15C_u = 1;
    for ( ; autoABF5A15C_u <= UnitGroupCount(autoABF5A15C_g, c_unitCountAll) ; autoABF5A15C_u += BoolToInt(lv_hybridUnit == UnitGroupUnit(autoABF5A15C_g, autoABF5A15C_u)) ) {
        lv_hybridUnit = UnitGroupUnit(autoABF5A15C_g, autoABF5A15C_u);
        auto3E5653CB_g = UnitGroupAlliance(c_playerAny, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_hybridUnit), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3E5653CB_u = 1;
        for ( ; auto3E5653CB_u <= UnitGroupCount(auto3E5653CB_g, c_unitCountAll) ; auto3E5653CB_u += BoolToInt(lv_units == UnitGroupUnit(auto3E5653CB_g, auto3E5653CB_u)) ) {
            lv_units = UnitGroupUnit(auto3E5653CB_g, auto3E5653CB_u);
            UnitIssueOrder(lv_units, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_hybridUnit)), c_orderQueueAddToEnd);
        }
    }
}
int lib1_gf_COOP_AI_WaveStart_RandomBaseWavePoint () {
    // Variable Declarations
    int lv_type;
    // Variable Initialization
    lv_type = (RandomInt(0, 1) * 4);
    // Implementation
    return lv_type;
}
int lib1_gf_COOP_AI_WaveStart_RandomShieldWavePoint () {
    // Implementation
    return RandomInt(1, 3);
}
int lib1_gf_COOP_AI_WaveStart_DifficultToInt (int lp_e99ABEE5BAA6E7AD89E7BAA7) {
    int autoC77DE64F_val;
    // Implementation
    autoC77DE64F_val = lp_e99ABEE5BAA6E7AD89E7BAA7;
    if (autoC77DE64F_val == 1) {
        return 0;
    }
    else if (autoC77DE64F_val == 2) {
        return 1;
    }
    else if (autoC77DE64F_val == 3) {
        return 2;
    }
    else if (autoC77DE64F_val == 4) {
        return 3;
    }
    else {
        return 0;
    }
}
void lib1_gf_COOP_Objectives_Register (fixed lp_time, int lp_objectivesType) {
    // Variable Declarations
    string lv_tag;
    // Variable Initialization
    lv_tag = (lib1_gv_cOOP_HashtablName + lib1_gv_cOOP_Objectives_Name + IntToString(lib1_gv_cOOP_Objectives_Count));
    // Implementation
    DataTableSetInt(true, lv_tag, lp_objectivesType);
    lib1_gv_cOOP_Objectives_Count += 1;
    TriggerAddEventTimeElapsed(lib1_gt_COOP_Objectives_Show, lp_time, c_timeGame);
}
trigger lib1_gf_NANAKEY_CreateTriggerAndSaveData (string lp_triggerString, string lp_string) {
    // Variable Declarations
    trigger lv_trigger;
    // Variable Initialization
    // Implementation
    lv_trigger = TriggerCreate(lp_triggerString);
    DataTableSetTrigger(true, lp_string, lv_trigger);
    return lv_trigger;
}
void lib1_gf_NANAKEY_DestroySavedTrigger (string lp_string) {
    // Variable Declarations
    trigger lv_trigger;
    // Variable Initialization
    // Implementation
    if ((DataTableValueExists(true, lp_string) == true)) {
        lv_trigger = DataTableGetTrigger(true, lp_string);
        if(lv_trigger != null){
            TriggerDestroy(lv_trigger);
        }
        DataTableValueRemove(true, lp_string);
    }
}
void lib1_gf_NANAKEY_AddEventToTrigger_UnitDeath (trigger lp_trigger, unit lp_unit) {
    // Implementation
    if ((lp_trigger == null)) {
        return ;
    }
    TriggerAddEventUnitDied(lp_trigger, UnitRefFromUnit(lp_unit));
}
void lib1_gf_NANAKEY_AddEventToTrigger_TimerExpire (trigger lp_trigger, timer lp_timer) {
    // Implementation
    if ((lp_trigger == null)) {
        return ;
    }
    TriggerAddEventTimer(lp_trigger, lp_timer);
}
void lib1_gf_NANAKEY_AddEventToTrigger_UnitUseAbil (trigger lp_trigger, unit lp_unit, int lp_stage, abilcmd lp_abil, bool lp_share) {
    // Implementation
    if ((lp_trigger == null)) {
        return ;
    }
    TriggerAddEventUnitAbility(lp_trigger, UnitRefFromUnit(lp_unit), lp_abil, lp_stage, lp_share);
}
// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: LIB_Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LIB_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_LIB_Initialization_Init () {
    lib1_gt_LIB_Initialization = TriggerCreate("lib1_gt_LIB_Initialization_Func");
    TriggerAddEventMapInit(lib1_gt_LIB_Initialization);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LIB_UnitDeath
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LIB_UnitDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitGetType(EventUnit()) == "HybridDominatorVoid") || (UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_GiantTimer") || (UnitGetType(EventUnit()) == "VoidSeekerDarkDean") || (UnitGetType(EventUnit()) == "VoidSeekerGroundDarkDean"))) {
        lib1_gf_PING_UnitDeathPing(EventUnit());
    }
    else if ((UnitGetType(EventUnit()) == "SOLARCRYSTAL_PhotonicAnchor")) {
        lib1_gv_mETEORITE_ShieldRelation_MicroCount += 1;
        lib1_gv_mETEORITE_ShieldRelation_MicroList[lib1_gv_mETEORITE_ShieldRelation_MicroCount] = lib1_gf_METEORITE_MeteoriteGetInfoIndexByUnit(EventUnit());
        lib1_gv_mETEORITE_ShieldGeneratorInfoList[lib1_gv_mETEORITE_ShieldRelation_MicroList[lib1_gv_mETEORITE_ShieldRelation_MicroCount]].lv_isImpact = true;
        lib1_gv_sOLARCRYSTAL_PhotonicAnchor_DestroyCount += 1;
        if ((lib1_gv_sOLARCRYSTAL_PhotonicAnchor_DestroyCount == 2)) {
           // lib1_gf_COOP_Transmission_Send("Destroy1SF", -1, true);
            libCOMI_gf_SendMissionTransmission("Destroy1SF", false, -1);
        }
        else if ((lib1_gv_sOLARCRYSTAL_PhotonicAnchor_DestroyCount == 3)) {
           // lib1_gf_COOP_Transmission_Send("Destroy2SF", -1, true);
            libCOMI_gf_SendMissionTransmission("Destroy2SF", false, -1);
        }
        else if ((lib1_gv_sOLARCRYSTAL_PhotonicAnchor_DestroyCount == 4)) {
         //   lib1_gf_COOP_Transmission_Send("Destroy3SF", -1, true);
            libCOMI_gf_SendMissionTransmission("Destroy3SF", false, -1);
        }
        lib1_gf_PING_UnitDeathPing(EventUnit());
        PathRemoveNoFlyZonesInRegion(RegionCircle(UnitGetPosition(EventUnit()), 1.0));
        Wait(1.0, c_timeGame);
        UnitCreate(1, "SOLARCRYSTAL_SolarCrystalUnit", 0, lib1_gv_sOLARCRYSTAL_SolarCrystalPlayer, UnitGetPosition(EventUnit()), 270.0);
        UnitCreateEffectPoint(UnitLastCreated(), "METEORITE_MeteoriteDrop_ThrowSolarCrystal", PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(4.0, 6.0), libNtve_gf_RandomAngle()));
        UnitCreate(1, "SOLARCRYSTAL_SolarCrystalUnit", 0, lib1_gv_sOLARCRYSTAL_SolarCrystalPlayer, UnitGetPosition(EventUnit()), 270.0);
        UnitCreateEffectPoint(UnitLastCreated(), "METEORITE_MeteoriteDrop_ThrowSolarCrystal", PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(4.0, 6.0), libNtve_gf_RandomAngle()));
    }
    else if ((UnitGetType(EventUnit()) == "SOLARCRYSTAL_MegalithCutter")) {
        lv_i = DataTableGetInt(true, (lib1_gv_sOLARCRYSTAL_HashtableName + lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithName + IntToString(UnitGetTag(EventUnit()))));
        //lib1_gf_COOP_Transmission_Send(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_bonusFinsih, -1, true);
        libCOMI_gf_SendMissionTransmission(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_bonusFinsih, false, -1);
        lib1_gf_SOLARCRYSTAL_Spectroscope_SetDead(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_spectroscope, true);
        lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithKillCount += 1;
        if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_ping != c_invalidPingId)) {
            PingDestroy(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_ping);
        }
        TriggerExecute(lib1_gt_COOP_Objective_DestroyMegalith_Update, true, true);
        if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithKillCount >= lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCount)) {
            TriggerExecute(lib1_gt_COOP_Objective_DestroyMegalith_Complete, true, true);
        }
    }
    else if (((EventUnit() == UnitFromId(400215186)) || (EventUnit() == UnitFromId(846978711)))) {
        lib1_gv_mETEORITE_ShieldRelation_HomeList = lib1_gf_METEORITE_SubParameter_CombineShield(lib1_gv_mETEORITE_ShieldRelation_HomeList, EventUnit());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_LIB_UnitDeath_Init () {
    lib1_gt_LIB_UnitDeath = TriggerCreate("lib1_gt_LIB_UnitDeath_Func");
    TriggerAddEventUnitDied(lib1_gt_LIB_UnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LIB_UnitCreate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LIB_UnitCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "SOLARCRYSTAL_SolarCrystalUnit")) {
        lib1_gf_PING_CreatePingForUnit(EventUnit(), lib1_ge_PING_ModelType_SolarCrystal, true);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0, 270.0);
        PingSetUnit(PingLastCreated(), EventUnit());
    }
    else if ((UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_GiantTimer")) {
        lib1_gf_PING_CreatePingForUnit(EventUnit(), lib1_ge_PING_ModelType_GiantFall, true);
        if ((lib1_gv_mETEORITE_FinishFirstDropAnim == true)) {
            libNtve_gf_SendActorMessageToUnit(EventUnit(), (("AnimSetTime Timer " + FixedToString((lib1_gv_mETEORITE_GiantDropTimeAnim - lib1_gv_mETEORITE_GiantDropTime), c_fixedPrecisionAny) + " Scaled")));
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
        }
        if ((UnitBehaviorCount(EventUnit(), "METEORITE_Timer_ImpactTimerCover") == 0)) {
            lib1_gf_PING_ChangeModelForUnit(EventUnit(), "PING_MiniMapPing_GiantFall");
        }
        else {
            lib1_gf_PING_ChangeModelForUnit(EventUnit(), "PING_MiniMapPing_GiantFallActive");
        }
    }
    else if ((UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_GiantCrater")) {
        lib1_gf_PING_CreatePingForUnit(EventUnit(), lib1_ge_PING_ModelType_GiantCrater, false);
        if ((lib1_gv_mETEORITE_GiantImpactCount == 0)) {
            lib1_gf_PING_CreatePingOneShot(UnitGetPosition(EventUnit()), 270.0, lib1_ge_PING_ModelType_GiantImpact, 1.0);
        }
    }
    else if ((UnitGetType(EventUnit()) == "SOLARCRYSTAL_ShieldGenerator") && (UnitGetOwner(EventUnit()) != 15)) {
        if ((UnitBehaviorCount(EventUnit(), "SOLARCRYSTAL_EnergyPort_HasCrystal") != 0)) {
            lib1_gf_PING_CreatePingForUnit(EventUnit(), lib1_ge_PING_ModelType_GeneratorActive, true);
        }
        else {
            lib1_gf_PING_CreatePingForUnit(EventUnit(), lib1_ge_PING_ModelType_GeneratorSleep, true);
        }
    }
    else if ((UnitGetType(EventUnit()) == "SOLARCRYSTAL_PhotonicAnchor")) {
        lib1_gf_PING_CreatePingForUnit(EventUnit(), lib1_ge_PING_ModelType_PhotonicAnchor, true);
    }
    else if ((UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_Giant")) {
        SoundPlayOnUnitForPlayer(SoundLink("METEORITE_ShieldGenerator_GiantGroundLaunchSound", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 160.0, 0.0);
        DataTableSetSound(true, (lib1_gv_mETEORITE_HashtableName + IntToString(UnitGetTag(EventUnit())) + lib1_gv_mETEORITE_Sound), SoundLastPlayed());
    }
    else if ((UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_Micro")) {
        SoundPlayOnUnitForPlayer(SoundLink("METEORITE_ShieldGenerator_MicroGroundLaunchSound", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 160.0, 0.0);
        DataTableSetSound(true, (lib1_gv_mETEORITE_HashtableName + IntToString(UnitGetTag(EventUnit())) + lib1_gv_mETEORITE_Sound), SoundLastPlayed());
    }
    else if ((UnitGetType(EventUnit()) == "HybridDominatorVoid") && (lib1_gv_lIB_NotOnInit == true)) {
        lib1_gf_PING_CreatePingForUnit(EventUnit(), lib1_ge_PING_ModelType_HybridDominator, true);
        if ((libCOMI_gf_GameIsOver() == false)) {
          //  lib1_gf_COOP_Transmission_Send("WaringEnemy", -1, true);
            libCOMI_gf_SendMissionTransmission("WaringEnemy", false, -1);
        }
    }
    else if (((UnitGetType(EventUnit()) == "VoidSeekerDarkDean") || (UnitGetType(EventUnit()) == "VoidSeekerGroundDarkDean") || (UnitGetType(EventUnit()) == "VoidSeekerGroundDarkDean"))) {
        lib1_gf_PING_CreatePingForUnitKeepFacing(EventUnit(), lib1_ge_PING_ModelType_VoidSeeker);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_LIB_UnitCreate_Init () {
    lib1_gt_LIB_UnitCreate = TriggerCreate("lib1_gt_LIB_UnitCreate_Func");
    TriggerAddEventUnitRegion(lib1_gt_LIB_UnitCreate, null, RegionEntireMap(), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LIB_UnitRevive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LIB_UnitRevive_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "K5Kerrigan"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_PauseUnit(EventUnit(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_LIB_UnitRevive_Init () {
    lib1_gt_LIB_UnitRevive = TriggerCreate("lib1_gt_LIB_UnitRevive_Func");
    TriggerAddEventUnitRevive(lib1_gt_LIB_UnitRevive, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LIB_NotOnInit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LIB_NotOnInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gv_lIB_NotOnInit = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_LIB_NotOnInit_Init () {
    lib1_gt_LIB_NotOnInit = TriggerCreate("lib1_gt_LIB_NotOnInit_Func");
    TriggerAddEventTimeElapsed(lib1_gt_LIB_NotOnInit, 0.0625, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SOLARCRYSTAL_Spectroscope_Active
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SOLARCRYSTAL_Spectroscope_Active_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    DataTableSetUnit(false, TriggerEventParamName(("SOLARCRYSTAL_" + IntToString(UnitGetTag(lv_unit)) + "_Active"), "Spectroscope"), lv_unit);
    TriggerSendEvent(("SOLARCRYSTAL_" + IntToString(UnitGetTag(lv_unit)) + "_Active"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_SOLARCRYSTAL_Spectroscope_Active_Init () {
    lib1_gt_SOLARCRYSTAL_Spectroscope_Active = TriggerCreate("lib1_gt_SOLARCRYSTAL_Spectroscope_Active_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_SOLARCRYSTAL_Spectroscope_Active, c_playerAny, "SOLARCRYSTAL_EnergyPort_PlaceCrystal");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spectroscope;
    int lv_i;
    // Variable Initialization
    lv_spectroscope = DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "Spectroscope"));
    lv_i = DataTableGetInt(true, (lib1_gv_sOLARCRYSTAL_HashtableName + lib1_gv_sOLARCRYSTAL_SpectroscopeName + IntToString(UnitGetTag(lv_spectroscope))));
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(lv_spectroscope, "SOLARCRYSTAL_SolarCrystal_Locker", lv_spectroscope, 1);
    libNtve_gf_SendActorMessageToUnit(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_cybrosLock, "Signal DisattachMegalithCutter");
    Wait(15.0, c_timeGame);
    UnitBehaviorRemove(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit, "SOLARCRYSTAL_MegalithCutter_DockHide", 1);
    UnitSetFacing(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit, UnitGetFacing(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_cybrosLock), 0.5);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_isStart = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth_Init () {
    lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth = TriggerCreate("lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SOLARCRYSTAL_Spectroscope_MegalithCutter_Start
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    lv_i = DataTableGetInt(true, (lib1_gv_sOLARCRYSTAL_HashtableName + lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithName + lib1_gv_sOLARCRYSTAL_Spectroscope_StartIndex + IntToString(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartIndex)));
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_SOLARCRYSTAL_Spectroscope_SetAlive(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_spectroscope);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartIndex += 1;
    lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step(lv_i);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit), StringExternal("Param/Value/lib_1_63062B80"));
    PingSetUnit(PingLastCreated(), lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_unit);
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_ping = PingLastCreated();
    //lib1_gf_COOP_Transmission_Send(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartIndex].lv_bonusStart, -1, true);
    libCOMI_gf_SendMissionTransmission(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartIndex].lv_bonusStart, false, -1);
    while (((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_step) < lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_Error)) {
        Wait((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter_ObjectivesTime / (lib1_ge_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step_End)), c_timeGame);
        lib1_gf_SOLARCRYSTAL_Spectroscope_MegalithCutter_Step(lv_i);
        if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_isStart == true)) {
            return true;
        }
    }
    lib1_gf_SOLARCRYSTAL_Spectroscope_SetDead(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_spectroscope, false);
    //lib1_gf_COOP_Transmission_Send(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_bonusFail, -1, true);
    libCOMI_gf_SendMissionTransmission(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lv_i].lv_bonusFail, false, -1);
    if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartIndex >= lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithStartCount)) {
        TriggerExecute(lib1_gt_COOP_Objective_GiantMeteoritesImpact_Failed, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Init () {
    lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start = TriggerCreate("lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_GeneratorActive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_GeneratorActive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_ShieldGenerator") && (UnitBehaviorCount(lv_unit, "SOLARCRYSTAL_EnergyPort_HasCrystal") != 0)) {
        lib1_gf_PING_ModifyModelForUnit(lv_unit, lib1_ge_PING_ModelType_GeneratorActive);
    }
    else if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_Spectroscope")) {
        lib1_gf_PING_CreatePingForUnit(lv_unit, lib1_ge_PING_ModelType_SolarCrystal, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_GeneratorActive_Init () {
    lib1_gt_PING_GeneratorActive = TriggerCreate("lib1_gt_PING_GeneratorActive_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_PING_GeneratorActive, c_playerAny, "SOLARCRYSTAL_EnergyPort_PlaceCrystal");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_GeneratorActiveBehavior
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_GeneratorActiveBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    lv_unit = EventUnit();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_ShieldGenerator") && (UnitBehaviorCount(lv_unit, "SOLARCRYSTAL_EnergyPort_HasCrystal") != 0)) {
        lib1_gf_PING_ModifyModelForUnit(lv_unit, lib1_ge_PING_ModelType_GeneratorActive);
    }
    else if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_Spectroscope")) {
        lib1_gf_PING_CreatePingForUnit(lv_unit, lib1_ge_PING_ModelType_SolarCrystal, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_GeneratorActiveBehavior_Init () {
    lib1_gt_PING_GeneratorActiveBehavior = TriggerCreate("lib1_gt_PING_GeneratorActiveBehavior_Func");
    TriggerAddEventUnitBehaviorChange(lib1_gt_PING_GeneratorActiveBehavior, null, "METEORITE_ShieldGenerator_EnergyLost", c_unitBehaviorChangeDecrease);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_GeneratorSleep
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_GeneratorSleep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_ShieldGenerator")) {
        lib1_gf_PING_ModifyModelForUnit(lv_unit, lib1_ge_PING_ModelType_GeneratorSleep);
    }
    else if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_Spectroscope")) {
        lib1_gf_PING_DestroyPingForUnit(lv_unit);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_GeneratorSleep_Init () {
    lib1_gt_PING_GeneratorSleep = TriggerCreate("lib1_gt_PING_GeneratorSleep_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_PING_GeneratorSleep, c_playerAny, "SOLARCRYSTAL_EnergyPort_RemoveCrystal");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_GeneratorSleepBehavior
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_GeneratorSleepBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    lv_unit = EventUnit();
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_ShieldGenerator")) {
        lib1_gf_PING_ModifyModelForUnit(lv_unit, lib1_ge_PING_ModelType_GeneratorSleep);
    }
    else if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_Spectroscope")) {
        lib1_gf_PING_DestroyPingForUnit(lv_unit);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_GeneratorSleepBehavior_Init () {
    lib1_gt_PING_GeneratorSleepBehavior = TriggerCreate("lib1_gt_PING_GeneratorSleepBehavior_Func");
    TriggerAddEventUnitBehaviorChange(lib1_gt_PING_GeneratorSleepBehavior, null, "METEORITE_ShieldGenerator_EnergyLost", c_unitBehaviorChangeIncrease);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_SolarCrystalWorkerGet
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_SolarCrystalWorkerGet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) != "ZeratulDarkDean")) {
        lib1_gf_PING_CreatePingForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), lib1_ge_PING_ModelType_PickupedWorker, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_SolarCrystalWorkerGet_Init () {
    lib1_gt_PING_SolarCrystalWorkerGet = TriggerCreate("lib1_gt_PING_SolarCrystalWorkerGet_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_PING_SolarCrystalWorkerGet, c_playerAny, "SOLARCRYSTAL_Worker_GetCrystal");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_SolarCrystalWorkerLost
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_SolarCrystalWorkerLost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_PING_DestroyPingForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_SolarCrystalWorkerLost_Init () {
    lib1_gt_PING_SolarCrystalWorkerLost = TriggerCreate("lib1_gt_PING_SolarCrystalWorkerLost_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_PING_SolarCrystalWorkerLost, c_playerAny, "SOLARCRYSTAL_Worker_LostCrystal");
    TriggerAddEventPlayerEffectUsed(lib1_gt_PING_SolarCrystalWorkerLost, c_playerAny, "SOLARCRYSTAL_SolarCrystal_DeathDrop");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_SolarCrystalPickup
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_SolarCrystalPickup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_PING_DestroyPingForUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_SolarCrystalPickup_Init () {
    lib1_gt_PING_SolarCrystalPickup = TriggerCreate("lib1_gt_PING_SolarCrystalPickup_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_PING_SolarCrystalPickup, c_playerAny, "SOLARCRYSTAL_SolarCrystal_Pickup");
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_SolarCrystalInteract
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_SolarCrystalInteract_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unitgroup lv_unitGroup;
    region lv_region;
    // Variable Initialization
    lv_target = EventUnitTargetUnit();
    lv_unitGroup = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    if (((EventUnitAbilityStage() == c_unitAbilStageQueue) || (EventUnitAbilityStage() == c_unitAbilStageExecute))) {
        if ((lv_target == null)) {
            lv_region = RegionCircle(EventUnitTargetPoint(), 1.5);
            UnitGroupAddUnitGroup(lv_unitGroup, UnitGroup("SOLARCRYSTAL_SolarCrystalUnit", c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_unitGroup, UnitGroup("SOLARCRYSTAL_ShieldGenerator", c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_unitGroup, UnitGroup("SOLARCRYSTAL_Spectroscope", c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            lv_target = UnitGroupClosestToPoint(lv_unitGroup, EventUnitTargetPoint());
        }
        lib1_gf_PING_CreatePingForInteract(lv_target, EventUnit());
    }
    else if (((EventUnitAbilityStage() == c_unitAbilStageCancel) || (EventUnitAbilityStage() == c_unitAbilStageComplete))) {
        lib1_gf_PING_DestroyPingForInteract(EventUnit());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_SolarCrystalInteract_Init () {
    lib1_gt_PING_SolarCrystalInteract = TriggerCreate("lib1_gt_PING_SolarCrystalInteract_Func");
    TriggerAddEventUnitAbility(lib1_gt_PING_SolarCrystalInteract, null, AbilityCommand("SOLARCRYSTAL_SolarCrystal_Interact", 0), c_unitAbilStageAll, false);
   // TriggerAddEventUnitAbility(lib1_gt_PING_SolarCrystalInteract, null, AbilityCommand("MapObjectInteract", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: PING_GiantFallTimerColor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PING_GiantFallTimerColor_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitBehaviorCount(EventUnit(), "METEORITE_Timer_ImpactTimerCover") == 0)) {
        lib1_gf_PING_ChangeModelForUnit(EventUnit(), "PING_MiniMapPing_GiantFall");
    }
    else {
        lib1_gf_PING_ChangeModelForUnit(EventUnit(), "PING_MiniMapPing_GiantFallActive");
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PING_GiantFallTimerColor_Init () {
    lib1_gt_PING_GiantFallTimerColor = TriggerCreate("lib1_gt_PING_GiantFallTimerColor_Func");
    TriggerAddEventUnitBehaviorChange(lib1_gt_PING_GiantFallTimerColor, null, "METEORITE_Timer_ImpactTimerCover", c_unitBehaviorChangeAny);
}
//--------------------------------------------------------------------------------------------------
// Trigger: METEORITE_CatchDropPeriodNotice
//--------------------------------------------------------------------------------------------------
bool lib1_gt_METEORITE_CatchDropPeriodNotice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spellUnit;
    unit lv_targetUnit;
    point lv_spellPoint;
    point lv_targetPoint;
    fixed lv_radius;
    actor lv_actor;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        lv_spellUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
        lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);
        lv_spellPoint = UnitGetPosition(lv_spellUnit);
        lv_targetPoint = UnitGetPosition(lv_targetUnit);
        lv_radius = ((UnitGetHeight(lv_spellUnit) + 9.0) - UnitGetHeight(lv_targetUnit));
        if (((DistanceSquaredBetweenPoints(lv_spellPoint, lv_targetPoint) + (lv_radius * lv_radius)) <= 361.0)) {
            UnitCreateEffectUnit(lv_spellUnit, "METEORITE_MeteoriteDrop_MicroDamageShield", lv_targetUnit);
            if ((UnitGetType(lv_spellUnit) == "METEORITE_MeteoriteDrop_Giant")) {
                SoundPlayAtPointForPlayer(SoundLink("METEORITE_ShieldGenerator_GiantShieldImpactSound", -1), c_maxPlayers, PlayerGroupAll(), lv_spellPoint, UnitGetHeight(lv_spellUnit), 200.0, 0.0);
                SoundPlayAtPointForPlayer(SoundLink("METEORITE_ShieldGenerator_GiantGroundImpactSound", -1), c_maxPlayers, PlayerGroupAll(), lv_spellPoint, UnitGetHeight(lv_spellUnit), 200.0, 0.0);
            }
            else if ((UnitGetType(lv_spellUnit) == "METEORITE_MeteoriteDrop_Micro")) {
                SoundPlayAtPointForPlayer(SoundLink("METEORITE_ShieldGenerator_MicroShieldImpactSound", -1), c_maxPlayers, PlayerGroupAll(), lv_spellPoint, UnitGetHeight(lv_spellUnit), 200.0, 0.0);
            }
            SoundStop(DataTableGetSound(true, (lib1_gv_mETEORITE_HashtableName + IntToString(UnitGetTag(lv_spellUnit)) + lib1_gv_mETEORITE_Sound)), false);
            UnitCreateEffectUnit(lv_spellUnit, "METEORITE_MeteoriteDrop_ImapctShieldSuicide", lv_spellUnit);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_METEORITE_CatchDropPeriodNotice_Init () {
    lib1_gt_METEORITE_CatchDropPeriodNotice = TriggerCreate("lib1_gt_METEORITE_CatchDropPeriodNotice_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_METEORITE_CatchDropPeriodNotice, c_playerAny, "METEORITE_MeteoriteDrop_PeriodNotice");
}
//--------------------------------------------------------------------------------------------------
// Trigger: METEORITE_CatchDropGiantImpactNotice
//--------------------------------------------------------------------------------------------------
bool lib1_gt_METEORITE_CatchDropGiantImpactNotice_Func (bool testConds, bool runActions) {
    unitgroup autoBBE7EB53_g;
    int autoBBE7EB53_u;
    // Variable Declarations
    point lv_point;
    region lv_region;
    unit lv_unit;
    // Variable Initialization
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_region = RegionCircle(lv_point, 5.0);
    // Actions
    if (!runActions) {
        return true;
    }
    autoBBE7EB53_g = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBBE7EB53_u = 1;
    for ( ; autoBBE7EB53_u <= UnitGroupCount(autoBBE7EB53_g, c_unitCountAll) ; autoBBE7EB53_u += BoolToInt(lv_unit == UnitGroupUnit(autoBBE7EB53_g, autoBBE7EB53_u)) ) {
        lv_unit = UnitGroupUnit(autoBBE7EB53_g, autoBBE7EB53_u);
        if (((UnitGetType(lv_unit) == "SCV") || (UnitGetType(lv_unit) == "Probe") || (UnitGetType(lv_unit) == "Drone")) && (UnitBehaviorCount(lv_unit, "SOLARCRYSTAL_Worker_HasCrystal") != 0)) {
            UnitBehaviorRemove(lv_unit, "SOLARCRYSTAL_Worker_HasCrystal", c_unitBehaviorCountAll);
            UnitCreate(1, "SOLARCRYSTAL_SolarCrystalUnit", 0, 0, UnitGetPosition(lv_unit), 270.0);
            UnitCreateEffectPoint(UnitLastCreated(), "METEORITE_MeteoriteDrop_ThrowSolarCrystal", PointWithOffsetPolar(lv_point, RandomFixed(4.0, 6.0), AngleBetweenPoints(lv_point, UnitGetPosition(lv_unit))));
        }
        if ((UnitGetType(lv_unit) == "SOLARCRYSTAL_SolarCrystalUnit")) {
            UnitCreateEffectPoint(lv_unit, "METEORITE_MeteoriteDrop_ThrowSolarCrystal", PointWithOffsetPolar(lv_point, RandomFixed(4.0, 6.0), libNtve_gf_RandomAngle()));
        }
        else {
            if ((UnitTestState(lv_unit, c_unitStateTargetable) == true)) {
                UnitKill(lv_unit);
            }
        }
    }
    TerrainShowRegion(RegionRect((TruncI(PointGetX(lv_point)) - 2.5), (TruncI(PointGetY(lv_point)) - 2.5), (TruncI(PointGetX(lv_point)) + 2.5), (TruncI(PointGetY(lv_point)) + 2.5)), false);
    VisExploreArea(lib1_gv_cOOP_Init_PLAYER_01_USER, lv_region, true, false);
    VisExploreArea(lib1_gv_cOOP_Init_PLAYER_02_USER, lv_region, true, false);
    UnitCreate(1, "METEORITE_MeteoriteDrop_GiantCrater", 0, 0, lv_point, 270.0);
    lib1_gf_METEORITE_CameraShakeForPlayer(lv_point, 20.0, PlayerGroupActive(), 1.5, 2.0, 100.0, c_cameraPositionTarget, c_cameraDirectionXYZ, 1.0, 3.0);
    SoundStop(DataTableGetSound(true, (lib1_gv_mETEORITE_HashtableName + IntToString(UnitGetTag(EventPlayerEffectUsedUnit(c_effectUnitSource))) + lib1_gv_mETEORITE_Sound)), false);
    SoundPlayAtPointForPlayer(SoundLink("METEORITE_ShieldGenerator_GiantGroundImpactSound", -1), c_maxPlayers, PlayerGroupAll(), lv_point, 0.0, 200.0, 0.0);
    if ((libCOMI_gf_GameIsOver() == false)) {
        if ((lib1_gv_mETEORITE_FinishFirstDrop == true)) {
            lib1_gv_mETEORITE_GiantImpactCount += 1;
            TriggerExecute(lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update, true, false);
            if ((lib1_gv_mETEORITE_GiantImpactCount == 1)) {
                //lib1_gf_COOP_Transmission_Send("DropHitFirstSF", -1, true);
                libCOMI_gf_SendMissionTransmission("DropHitFirstSF", false, -1);
            }
            else if ((lib1_gv_mETEORITE_GiantImpactCount == (lib1_gv_mETEORITE_GiantImpactDefeatCount - 1))) {
                //lib1_gf_COOP_Transmission_Send("DropHitLastSF", -1, true);
                libCOMI_gf_SendMissionTransmission("DropHitLastSF", false, -1);
            }
            else if ((lib1_gv_mETEORITE_GiantImpactCount == lib1_gv_mETEORITE_GiantImpactDefeatCount)) {
                TriggerExecute(lib1_gt_COOP_VictoryDefeat_DefeatPrimaryObjectiveFailed, true, false);
            }
        }
        else {
            lib1_gv_mETEORITE_FinishFirstDrop = true;
           // lib1_gf_COOP_Transmission_Send("Intro2SF", -1, true);
            libCOMI_gf_SendMissionTransmission("Intro2SF", false, -1);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_METEORITE_CatchDropGiantImpactNotice_Init () {
    lib1_gt_METEORITE_CatchDropGiantImpactNotice = TriggerCreate("lib1_gt_METEORITE_CatchDropGiantImpactNotice_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_METEORITE_CatchDropGiantImpactNotice, c_playerAny, "METEORITE_MeteoriteDrop_GiantImapctNotice");
}
//--------------------------------------------------------------------------------------------------
// Trigger: METEORITE_CatchDropMicroImpactNotice
//--------------------------------------------------------------------------------------------------
bool lib1_gt_METEORITE_CatchDropMicroImpactNotice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    // Variable Initialization
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    // Actions
    if (!runActions) {
        return true;
    }
    SoundPlayAtPointForPlayer(SoundLink("METEORITE_ShieldGenerator_MicroGroundImpactSound", -1), c_maxPlayers, PlayerGroupAll(), lv_point, 0.0, 200.0, 0.0);
    SoundStop(DataTableGetSound(true, (lib1_gv_mETEORITE_HashtableName + IntToString(UnitGetTag(EventPlayerEffectUsedUnit(c_effectUnitSource))) + lib1_gv_mETEORITE_Sound)), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_METEORITE_CatchDropMicroImpactNotice_Init () {
    lib1_gt_METEORITE_CatchDropMicroImpactNotice = TriggerCreate("lib1_gt_METEORITE_CatchDropMicroImpactNotice_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_METEORITE_CatchDropMicroImpactNotice, c_playerAny, "METEORITE_MeteoriteDrop_MicroImapctNotice");
}
//--------------------------------------------------------------------------------------------------
// Trigger: METEORITE_TimerExpiredDropGiant
//--------------------------------------------------------------------------------------------------
bool lib1_gt_METEORITE_TimerExpiredDropGiant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_createPoint;
    point lv_targetPoint;
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationSourcePoint);
    // Actions
    if (!runActions) {
        return true;
    }
    lv_createPoint = PointWithOffsetPolar(lv_targetPoint, 19.0, -60.0);
    UnitCreate(1, "METEORITE_MeteoriteDrop_Giant", 0, lib1_gv_mETEORITE_MeteoritePlayer, lv_createPoint, 270.0);
    UnitCreateEffectPoint(UnitLastCreated(), "METEORITE_MeteoriteDrop_GiantLM", lv_targetPoint);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_METEORITE_TimerExpiredDropGiant_Init () {
    lib1_gt_METEORITE_TimerExpiredDropGiant = TriggerCreate("lib1_gt_METEORITE_TimerExpiredDropGiant_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_METEORITE_TimerExpiredDropGiant, lib1_gv_mETEORITE_MeteoritePlayer, "METEORITE_MeteoriteDrop_GiantTimerExpired");
}
//--------------------------------------------------------------------------------------------------
// Trigger: METEORITE_MeteoriteDie
//--------------------------------------------------------------------------------------------------
bool lib1_gt_METEORITE_MeteoriteDie_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_Giant"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_Giant")) {
        SoundStop(DataTableGetSound(true, (lib1_gv_mETEORITE_HashtableName + IntToString(UnitGetTag(EventUnit())) + lib1_gv_mETEORITE_Sound)), false);
    }
    else if ((UnitGetType(EventUnit()) == "METEORITE_MeteoriteDrop_Micro")) {
        SoundStop(DataTableGetSound(true, (lib1_gv_mETEORITE_HashtableName + IntToString(UnitGetTag(EventUnit())) + lib1_gv_mETEORITE_Sound)), false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_METEORITE_MeteoriteDie_Init () {
    lib1_gt_METEORITE_MeteoriteDie = TriggerCreate("lib1_gt_METEORITE_MeteoriteDie_Func");
    TriggerAddEventUnitBehaviorChange(lib1_gt_METEORITE_MeteoriteDie, null, "METEORITE_MeteoriteDrop_Marker", c_unitBehaviorChangeDeactivate);
}
//--------------------------------------------------------------------------------------------------
// Trigger: METEORITE_CameraShakeDropBegin
//--------------------------------------------------------------------------------------------------
bool lib1_gt_METEORITE_CameraShakeDropBegin_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(1.0, c_timeGame);
    lib1_gf_METEORITE_CameraShakeForPlayer(EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), 20.0, PlayerGroupActive(), 0.5, 2.0, 100.0, c_cameraPositionTarget, c_cameraDirectionXYZ, 3.0, 3.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_METEORITE_CameraShakeDropBegin_Init () {
    lib1_gt_METEORITE_CameraShakeDropBegin = TriggerCreate("lib1_gt_METEORITE_CameraShakeDropBegin_Func");
    TriggerAddEventPlayerEffectUsed(lib1_gt_METEORITE_CameraShakeDropBegin, c_playerAny, "METEORITE_MeteoriteDrop_GiantLM");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_01_LoadData
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_01_LoadData_Func (bool testConds, bool runActions) {
    lib1_gf_PING_Initialization();
    libCOMI_gf_LoadCoopMission("AC_Skyfall", lib1_gt_COOP_Init_03_LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_01_LoadData_Init () {
    lib1_gt_COOP_Init_01_LoadData = TriggerCreate("lib1_gt_COOP_Init_01_LoadData_Func");
    TriggerAddEventMapInit(lib1_gt_COOP_Init_01_LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_02_Players
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_02_Players_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_02_Players_Init () {
    lib1_gt_COOP_Init_02_Players = TriggerCreate("lib1_gt_COOP_Init_02_Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_03_LoadingComplete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_03_LoadingComplete_Func (bool testConds, bool runActions) {
    lib1_gv_mETEORITE_GiantImpactDefeatCount = 2;
    lib1_gv_cOOP_Init_AIDifficult = 3;
    lib1_gv_cOOP_Init_PLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    lib1_gv_cOOP_Init_PLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    TriggerExecute(lib1_gt_COOP_Init_04_Technology, true, false);
    TriggerExecute(lib1_gt_COOP_Init_05_Units, true, false);
    TriggerExecute(lib1_gt_COOP_Init_06_MusicSound, true, false);
    TriggerExecute(lib1_gt_COOP_Init_07_Environment, true, false);
    TriggerExecute(lib1_gt_COOP_Init_08_Difficulties, true, false);
    TriggerExecute(lib1_gt_COOP_Init_09_Start_Game, true, false);
    TriggerExecute(lib1_gt_COOP_Init_10_AI, true, false);
    lib1_gv_mETEORITE_GiantDropTime = 360.0;
    lib1_gv_cOOP_Objective_TotalTime = 1620.0;
    lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter_ObjectivesTime = 600.0;
    CatalogFieldValueSet(c_gameCatalogBehavior, "METEORITE_Timer_GiantImpactTimerDropTime", "Duration", lib1_gv_mETEORITE_MeteoritePlayer, FixedToString(358.0, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "METEORITE_Timer_GiantImpactTimerRemoveTime", "Duration", lib1_gv_mETEORITE_MeteoritePlayer, FixedToString(360.0, c_fixedPrecisionAny));
   
    lib1_gf_LIB_InitUnit();
    lib1_gf_SOLARCRYSTAL_Init();
    lib1_gf_METEORITE_Init();
    lib1_gf_LIB_EventList();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_03_LoadingComplete_Init () {
    lib1_gt_COOP_Init_03_LoadingComplete = TriggerCreate("lib1_gt_COOP_Init_03_LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_04_Technology
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_04_Technology_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_04_Technology_Init () {
    lib1_gt_COOP_Init_04_Technology = TriggerCreate("lib1_gt_COOP_Init_04_Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_05_Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_05_Units_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_05_Units_Init () {
    lib1_gt_COOP_Init_05_Units = TriggerCreate("lib1_gt_COOP_Init_05_Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_06_Music/Sound
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_06_MusicSound_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_06_MusicSound_Init () {
    lib1_gt_COOP_Init_06_MusicSound = TriggerCreate("lib1_gt_COOP_Init_06_MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_07_Environment
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_07_Environment_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_07_Environment_Init () {
    lib1_gt_COOP_Init_07_Environment = TriggerCreate("lib1_gt_COOP_Init_07_Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_08_Difficulties
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_08_Difficulties_Func (bool testConds, bool runActions) {
  //  string auto14FB6BAB_val;
    string auto53A7B0DB_val;
    string auto53A7B0DC_val;
    string auto53A7B0DD_val;
    int auto14FB6BAB_val;
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    auto14FB6BAB_val = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 4, 0, 0);
    if (auto14FB6BAB_val == 1) {
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLifeMax, 2500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLife, 2500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShieldsMax, 2500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShields, 2500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLife, 2500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLifeMax, 2500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShields, 2500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShieldsMax, 2500.0);
    }
    else if (auto14FB6BAB_val == 2) {
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLifeMax, 3000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLife, 3000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShieldsMax, 3000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShields, 3000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLife, 3000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLifeMax, 3000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShields, 3000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShieldsMax, 3000.0);
    }
    else if (auto14FB6BAB_val == 3) {
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLifeMax, 3500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLife, 3500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShieldsMax, 3500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShields, 3500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLife, 3500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLifeMax, 3500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShields, 3500.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShieldsMax, 3500.0);
        UnitSetPropertyFixed(UnitFromId(455547116), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(455547116), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(1426395440), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(1426395440), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(1147613871), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(1147613871), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(616475980), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(616475980), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(846978711), c_unitPropLifeMax, 2000);
        UnitSetPropertyFixed(UnitFromId(846978711), c_unitPropLife, 2000);
        UnitSetPropertyFixed(UnitFromId(400215186), c_unitPropLifeMax, 2000);
        UnitSetPropertyFixed(UnitFromId(400215186), c_unitPropLife, 2000);
    }
    else if (auto14FB6BAB_val == 4) {
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLifeMax, 4000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropLife, 4000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShieldsMax, 4000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[1].lv_unit, c_unitPropShields, 4000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLife, 4000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropLifeMax, 4000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShields, 4000.0);
        UnitSetPropertyFixed(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[2].lv_unit, c_unitPropShieldsMax, 4000.0);
        UnitSetPropertyFixed(UnitFromId(455547116), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(455547116), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(1426395440), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(1426395440), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(1147613871), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(1147613871), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(616475980), c_unitPropLifeMax, 1000);
        UnitSetPropertyFixed(UnitFromId(616475980), c_unitPropLife, 1000);
        UnitSetPropertyFixed(UnitFromId(846978711), c_unitPropLifeMax, 2000);
        UnitSetPropertyFixed(UnitFromId(846978711), c_unitPropLife, 2000);
        UnitSetPropertyFixed(UnitFromId(400215186), c_unitPropLifeMax, 2000);
        UnitSetPropertyFixed(UnitFromId(400215186), c_unitPropLife, 2000);
        UnitRemove(UnitFromId(2142347070));
        UnitRemove(UnitFromId(476735999));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_08_Difficulties_Init () {
    lib1_gt_COOP_Init_08_Difficulties = TriggerCreate("lib1_gt_COOP_Init_08_Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_09_Start_Game
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_09_Start_Game_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_COOP_Transmission_Init();
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_09_Start_Game_Init () {
    lib1_gt_COOP_Init_09_Start_Game = TriggerCreate("lib1_gt_COOP_Init_09_Start_Game_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Init_10_AI
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Init_10_AI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_aIPlayerRace;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    lib1_gv_cOOP_AI_Wave_StartPoint[lib1_ge_COOP_AI_Wave_StartPointType_Point0] = PointFromId(1516671991);
    lib1_gv_cOOP_AI_Wave_StartPoint[lib1_ge_COOP_AI_Wave_StartPointType_Point1] = PointFromId(215937935);
    lib1_gv_cOOP_AI_Wave_StartPoint[lib1_ge_COOP_AI_Wave_StartPointType_Point2] = PointFromId(1503096096);
    lib1_gv_cOOP_AI_Wave_StartPoint[lib1_ge_COOP_AI_Wave_StartPointType_Point3] = PointFromId(661512900);
    lib1_gv_cOOP_AI_Wave_StartPoint[lib1_ge_COOP_AI_Wave_StartPointType_Point4] = PointFromId(1578249262);
    lib1_gv_cOOP_AI_Wave_StartDoodad[lib1_ge_COOP_AI_Wave_StartPointType_Point0] = null;
    lib1_gv_cOOP_AI_Wave_StartDoodad[lib1_ge_COOP_AI_Wave_StartPointType_Point1] = ActorFromDoodad(DoodadFromId(674095059));
    lib1_gv_cOOP_AI_Wave_StartDoodad[lib1_ge_COOP_AI_Wave_StartPointType_Point2] = ActorFromDoodad(DoodadFromId(1991107106));
    lib1_gv_cOOP_AI_Wave_StartDoodad[lib1_ge_COOP_AI_Wave_StartPointType_Point3] = ActorFromDoodad(DoodadFromId(1927638732));
    lib1_gv_cOOP_AI_Wave_StartDoodad[lib1_ge_COOP_AI_Wave_StartPointType_Point4] = null;
    UnitGroupAdd(lib1_gv_cOOP_AI_Wave_HomeShield, UnitFromId(884931564));
    UnitGroupAdd(lib1_gv_cOOP_AI_Wave_HomeShield, UnitFromId(152052602));
    UnitGroupAdd(lib1_gv_cOOP_AI_Wave_HomeShield, UnitFromId(1695897175));
    UnitGroupAdd(lib1_gv_cOOP_AI_Wave_HomeShield, UnitFromId(2079699024));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Init_10_AI_Init () {
    lib1_gt_COOP_Init_10_AI = TriggerCreate("lib1_gt_COOP_Init_10_AI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Transmission_Frog
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Transmission_Frog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == lib1_gv_cOOP_Init_PLAYER_01_USER) || (UnitGetOwner(EventUnit()) == lib1_gv_cOOP_Init_PLAYER_02_USER)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
  //  lib1_gf_COOP_Transmission_Send("MeetFrogSF", -1, true);
    libCOMI_gf_SendMissionTransmission("MeetFrogSF", false, -1);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Transmission_Frog_Init () {
    lib1_gt_COOP_Transmission_Frog = TriggerCreate("lib1_gt_COOP_Transmission_Frog_Func");
    TriggerAddEventUnitRegion(lib1_gt_COOP_Transmission_Frog, null, RegionFromId(15), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_AI_Wave_Start
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_AI_Wave_Start_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_tag;
    int lv_pointType;
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_targetType;
    // Variable Initialization
    lv_tag = (lib1_gv_cOOP_HashtablName + lib1_gv_cOOP_AI_Wave_Name + IntToString(lib1_gv_cOOP_AI_Wave_Index));
    lv_pointType = DataTableGetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_PointName));
    lv_resourceBucket = DataTableGetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_BucketsName));
    lv_techBucket = DataTableGetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_TechName));
    lv_targetType = DataTableGetInt(true, (lv_tag + lib1_gv_cOOP_AI_Wave_TargetName));
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_COOP_AI_WaveStart_Create(lv_pointType, lv_resourceBucket, lv_techBucket, lv_targetType);
    lib1_gv_cOOP_AI_Wave_Index += 1;
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_AI_Wave_Start_Init () {
    lib1_gt_COOP_AI_Wave_Start = TriggerCreate("lib1_gt_COOP_AI_Wave_Start_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_AI_Enemy_Attacking
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_AI_Enemy_Attacking_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SendMissionTransmission("AttackWave", false, -1);
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_AI_Enemy_Attacking_Init () {
    lib1_gt_COOP_AI_Enemy_Attacking = TriggerCreate("lib1_gt_COOP_AI_Enemy_Attacking_Func");
    TriggerAddEventPlayerAIWave(lib1_gt_COOP_AI_Enemy_Attacking, lib1_gv_cOOP_Init_PLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(lib1_gt_COOP_AI_Enemy_Attacking, lib1_gv_cOOP_Init_PLAYER_04_ENEMY);
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Victory/Defeat_DefeatPrimaryObjectiveFailed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_VictoryDefeat_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatSF", false, -1);
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(1055579115), 2.0);
    Wait(0.5, c_timeGame);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/lib_1_6FDF91A2"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    ActorSend(ActorFromDoodad(DoodadFromId(130647579)), "Signal Death");
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_VictoryDefeat_DefeatPrimaryObjectiveFailed_Init () {
    lib1_gt_COOP_VictoryDefeat_DefeatPrimaryObjectiveFailed = TriggerCreate("lib1_gt_COOP_VictoryDefeat_DefeatPrimaryObjectiveFailed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Victory/Defeat_VictoryPrimaryObjectiveComplete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_VictoryDefeat_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1_gt_COOP_Objective_GameTime_Complete, true, false);
    TriggerExecute(lib1_gt_COOP_VictoryDefeat_VictoryFanfare, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_VictoryDefeat_VictoryPrimaryObjectiveComplete_Init () {
    lib1_gt_COOP_VictoryDefeat_VictoryPrimaryObjectiveComplete = TriggerCreate("lib1_gt_COOP_VictoryDefeat_VictoryPrimaryObjectiveComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Victory/Defeat_VictoryFanfare
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_VictoryDefeat_VictoryFanfare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendMissionTransmission("VictorySF", false, -1);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    ActorSend(ActorFromDoodad(DoodadFromId(130647579)), "Signal Startup");
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(1055579115), 2.0);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/lib_1_68DD932B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objectives_Show
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objectives_Show_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_type;
    // Variable Initialization
    lv_type = DataTableGetInt(true, (lib1_gv_cOOP_HashtablName + lib1_gv_cOOP_Objectives_Name + IntToString(lib1_gv_cOOP_Objectives_Index)));
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gv_cOOP_Objectives_Index += 1;
    if ((lv_type == lib1_ge_COOP_Objectives_Type_GameTime)) {
        TriggerExecute(lib1_gt_COOP_Objective_GameTime_Window, true, true);
        TriggerExecute(lib1_gt_COOP_Objective_GameTime_Create, true, true);
    }
    else if ((lv_type == lib1_ge_COOP_Objectives_Type_GiantMeteoritesImpact)) {
        TriggerExecute(lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create, true, true);
    }
    else if ((lv_type == lib1_ge_COOP_Objectives_Type_DestroyMegalith)) {
        TriggerExecute(lib1_gt_COOP_Objective_DestroyMegalith_Create, true, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objectives_Show_Init () {
    lib1_gt_COOP_Objectives_Show = TriggerCreate("lib1_gt_COOP_Objectives_Show_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GameTime_Create
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GameTime_Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SkyFall_Primary01");
    lib1_gv_cOOP_Objective_GameTime = ObjectiveLastCreated();
    ObjectiveSetPriority(lib1_gv_cOOP_Objective_GameTime, 10);
    TriggerExecute(lib1_gt_COOP_Objective_GameTime_Update, true, false);
    //lib1_gf_COOP_Transmission_Send("Intro1SF", -1, true);
    libCOMI_gf_SendMissionTransmission("Intro1SF", false, -1);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GameTime_Create_Init () {
    lib1_gt_COOP_Objective_GameTime_Create = TriggerCreate("lib1_gt_COOP_Objective_GameTime_Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GameTime_Update
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GameTime_Update_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib1_gt_COOP_Objective_GameTime_Create, true, false);
    TextExpressionSetToken("Param/Expression/lib_1_41E56450", "GameTime", libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(lib1_gv_cOOP_Objective_GameTimer))));
    ObjectiveSetName(lib1_gv_cOOP_Objective_GameTime, TextExpressionAssemble("Param/Expression/lib_1_41E56450"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GameTime_Update_Init () {
    lib1_gt_COOP_Objective_GameTime_Update = TriggerCreate("lib1_gt_COOP_Objective_GameTime_Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GameTime_Complete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GameTime_Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1_gt_COOP_Objective_GameTime_Create, true, false);
    ObjectiveSetState(lib1_gv_cOOP_Objective_GameTime, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GameTime_Complete_Init () {
    lib1_gt_COOP_Objective_GameTime_Complete = TriggerCreate("lib1_gt_COOP_Objective_GameTime_Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GameTime_Failed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GameTime_Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1_gt_COOP_Objective_GameTime_Create, true, false);
    ObjectiveSetState(lib1_gv_cOOP_Objective_GameTime, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GameTime_Failed_Init () {
    lib1_gt_COOP_Objective_GameTime_Failed = TriggerCreate("lib1_gt_COOP_Objective_GameTime_Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GameTime_Window
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GameTime_Window_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_pass50;
    bool lv_pass90;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TimerStart(lib1_gv_cOOP_Objective_GameTimer, lib1_gv_cOOP_Objective_TotalTime, false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(lib1_gv_cOOP_Objective_GameTimer, StringExternal("Param/Value/lib_1_37BE242A"), true, false);
    lib1_gv_cOOP_Objective_GameTimerWindow = TimerWindowLastCreated();
    TriggerExecute(lib1_gt_COOP_Objective_GameTime_Update, true, false);
    TextExpressionSetToken("Param/Expression/lib_1_51937B6D", "GameTime", libCOMI_gf_FormatTimeCampaign(FixedToInt((TimerGetRemaining(lib1_gv_cOOP_Objective_GameTimer) - 3.0))));
    ObjectiveSetName(lib1_gv_cOOP_Objective_GameTime, TextExpressionAssemble("Param/Expression/lib_1_51937B6D"));
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lib1_gt_COOP_Objective_GameTime_Update, true, false);
        if ((lv_pass50 == false) && ((TimerGetRemaining(lib1_gv_cOOP_Objective_GameTimer) / lib1_gv_cOOP_Objective_TotalTime) <= 0.5)) {
            lv_pass50 = true;
            //lib1_gf_COOP_Transmission_Send("Pass50SF", -1, false);
            libCOMI_gf_SendMissionTransmission("Pass50SF", false, -1);
        }
        else if ((lv_pass90 == false) && ((TimerGetRemaining(lib1_gv_cOOP_Objective_GameTimer) / lib1_gv_cOOP_Objective_TotalTime) <= 0.1)) {
            lv_pass90 = true;
            //lib1_gf_COOP_Transmission_Send("DropFinalSF", -1, true);
            libCOMI_gf_SendMissionTransmission("DropFinalSF", false, -1);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GameTime_Window_Init () {
    lib1_gt_COOP_Objective_GameTime_Window = TriggerCreate("lib1_gt_COOP_Objective_GameTime_Window_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GameTime_Expired
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GameTime_Expired_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib1_gt_COOP_VictoryDefeat_VictoryPrimaryObjectiveComplete, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GameTime_Expired_Init () {
    lib1_gt_COOP_Objective_GameTime_Expired = TriggerCreate("lib1_gt_COOP_Objective_GameTime_Expired_Func");
    TriggerAddEventTimer(lib1_gt_COOP_Objective_GameTime_Expired, lib1_gv_cOOP_Objective_GameTimer);
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GiantMeteoritesImpact_Create
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SkyFall_Primary02");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", lib1_gv_mETEORITE_GiantImpactCount);
    lib1_gv_cOOP_Objective_GiantMeteoritesImpact = ObjectiveLastCreated();
    TriggerExecute(lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update, true, false);
    ObjectiveSetPriority(lib1_gv_cOOP_Objective_GiantMeteoritesImpact, 9);
    TextExpressionSetToken("Param/Expression/lib_1_64FEA95F", "GiantMeteoritesCount", IntToText(lib1_gv_mETEORITE_GiantImpactDefeatCount));
    ObjectiveSetDescription(lib1_gv_cOOP_Objective_GiantMeteoritesImpact, TextExpressionAssemble("Param/Expression/lib_1_64FEA95F"));
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create_Init () {
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create = TriggerCreate("lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GiantMeteoritesImpact_Update
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", lib1_gv_mETEORITE_GiantImpactCount);
    TextExpressionSetToken("Param/Expression/lib_1_63AD369B", "DefeatCount", IntToText(lib1_gv_mETEORITE_GiantImpactDefeatCount));
    TextExpressionSetToken("Param/Expression/lib_1_63AD369B", "MeteoriteCount", IntToText(lib1_gv_mETEORITE_GiantImpactCount));
    TextExpressionSetToken("Param/Expression/lib_1_63AD369B", "DefeatCount", IntToText(lib1_gv_mETEORITE_GiantImpactDefeatCount));
    ObjectiveSetName(lib1_gv_cOOP_Objective_GiantMeteoritesImpact, TextExpressionAssemble("Param/Expression/lib_1_63AD369B"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update_Init () {
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update = TriggerCreate("lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GiantMeteoritesImpact_Complete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GiantMeteoritesImpact_Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create, true, false);
    ObjectiveSetState(lib1_gv_cOOP_Objective_GiantMeteoritesImpact, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GiantMeteoritesImpact_Complete_Init () {
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Complete = TriggerCreate("lib1_gt_COOP_Objective_GiantMeteoritesImpact_Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_GiantMeteoritesImpact_Failed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_GiantMeteoritesImpact_Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create, true, false);
    ObjectiveSetState(lib1_gv_cOOP_Objective_GiantMeteoritesImpact, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_GiantMeteoritesImpact_Failed_Init () {
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Failed = TriggerCreate("lib1_gt_COOP_Objective_GiantMeteoritesImpact_Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_DestroyMegalith_Create
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_DestroyMegalith_Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_SkyFall_Bonus01");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderSecondary", lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithKillCount);
    lib1_gv_cOOP_Objective_DestroyMegalith = ObjectiveLastCreated();
    ObjectiveSetPriority(lib1_gv_cOOP_Objective_DestroyMegalith, 7);
    TriggerExecute(lib1_gt_COOP_Objective_DestroyMegalith_Update, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_DestroyMegalith_Create_Init () {
    lib1_gt_COOP_Objective_DestroyMegalith_Create = TriggerCreate("lib1_gt_COOP_Objective_DestroyMegalith_Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_DestroyMegalith_Update
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_DestroyMegalith_Update_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(lib1_gt_COOP_Objective_DestroyMegalith_Create, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderSecondary", lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithKillCount);
    TextExpressionSetToken("Param/Expression/lib_1_2E167A95", "KillCount", IntToText(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithKillCount));
    TextExpressionSetToken("Param/Expression/lib_1_2E167A95", "DefeatCount", IntToText(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCount));
    ObjectiveSetName(lib1_gv_cOOP_Objective_DestroyMegalith, TextExpressionAssemble("Param/Expression/lib_1_2E167A95"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_DestroyMegalith_Update_Init () {
    lib1_gt_COOP_Objective_DestroyMegalith_Update = TriggerCreate("lib1_gt_COOP_Objective_DestroyMegalith_Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_DestroyMegalith_Complete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_DestroyMegalith_Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1_gt_COOP_Objective_DestroyMegalith_Create, true, false);
    ObjectiveSetName(lib1_gv_cOOP_Objective_DestroyMegalith, StringExternal("Param/Value/lib_1_8E01A35B"));
    ObjectiveSetState(lib1_gv_cOOP_Objective_DestroyMegalith, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_DestroyMegalith_Complete_Init () {
    lib1_gt_COOP_Objective_DestroyMegalith_Complete = TriggerCreate("lib1_gt_COOP_Objective_DestroyMegalith_Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_DestroyMegalith_Failed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_DestroyMegalith_Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(lib1_gt_COOP_Objective_DestroyMegalith_Create, true, false);
    ObjectiveSetState(lib1_gv_cOOP_Objective_DestroyMegalith, c_objectiveStateFailed);
    ObjectiveSetName(lib1_gv_cOOP_Objective_DestroyMegalith, StringExternal("Param/Value/lib_1_AF099B29"));
    if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lib1_gv_cOOP_Init_PLAYER_01_USER].lv_ping != c_invalidPingId)) {
        PingDestroy(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lib1_gv_cOOP_Init_PLAYER_01_USER].lv_ping);
    }
    if ((lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lib1_gv_cOOP_Init_PLAYER_02_USER].lv_ping != c_invalidPingId)) {
        PingDestroy(lib1_gv_sOLARCRYSTAL_Spectroscope_MegalithCutter[lib1_gv_cOOP_Init_PLAYER_02_USER].lv_ping);
    }
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_DestroyMegalith_Failed_Init () {
    lib1_gt_COOP_Objective_DestroyMegalith_Failed = TriggerCreate("lib1_gt_COOP_Objective_DestroyMegalith_Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: COOP_Objective_Zeratul_Complete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_COOP_Objective_Zeratul_Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == lib1_gv_cOOP_Init_PLAYER_01_USER) || (UnitGetOwner(EventUnit()) == lib1_gv_cOOP_Init_PLAYER_02_USER)))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((UnitMoverExists(EventUnit(), "Ground") == true))) {
            return false;
        }
    }
    TriggerEnable(TriggerGetCurrent(), false);
    ActorSend(ActorFromDoodad(DoodadFromId(621441189)), "Signal WarpOut");
    ObjectiveCreate(StringExternal("Param/Value/lib_1_18ABDC4F"), StringExternal("Param/Value/lib_1_75E0E7BF"), c_objectiveStateCompleted, false);
    lib1_gv_cOOP_Objective_Zeratul = ObjectiveLastCreated();
    ObjectiveSetPriority(lib1_gv_cOOP_Objective_Zeratul, 5);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_Secret, StringExternal("Param/Value/lib_1_D039A88B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_COOP_Objective_Zeratul_Complete_Init () {
    lib1_gt_COOP_Objective_Zeratul_Complete = TriggerCreate("lib1_gt_COOP_Objective_Zeratul_Complete_Func");
    TriggerAddEventUnitRegion(lib1_gt_COOP_Objective_Zeratul_Complete, null, RegionFromId(16), true);
}
void lib1_InitTriggers () {
    lib1_gt_LIB_Initialization_Init();
    lib1_gt_LIB_UnitDeath_Init();
    lib1_gt_LIB_UnitCreate_Init();
    lib1_gt_LIB_UnitRevive_Init();
    lib1_gt_LIB_NotOnInit_Init();
    lib1_gt_SOLARCRYSTAL_Spectroscope_Active_Init();
    lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Birth_Init();
    lib1_gt_SOLARCRYSTAL_Spectroscope_MegalithCutter_Start_Init();
    lib1_gt_PING_GeneratorActive_Init();
    lib1_gt_PING_GeneratorActiveBehavior_Init();
    lib1_gt_PING_GeneratorSleep_Init();
    lib1_gt_PING_GeneratorSleepBehavior_Init();
    lib1_gt_PING_SolarCrystalWorkerGet_Init();
    lib1_gt_PING_SolarCrystalWorkerLost_Init();
    lib1_gt_PING_SolarCrystalPickup_Init();
    lib1_gt_PING_SolarCrystalInteract_Init();
    lib1_gt_PING_GiantFallTimerColor_Init();
    lib1_gt_METEORITE_CatchDropPeriodNotice_Init();
    lib1_gt_METEORITE_CatchDropGiantImpactNotice_Init();
    lib1_gt_METEORITE_CatchDropMicroImpactNotice_Init();
    lib1_gt_METEORITE_TimerExpiredDropGiant_Init();
    lib1_gt_METEORITE_MeteoriteDie_Init();
    lib1_gt_METEORITE_CameraShakeDropBegin_Init();
    lib1_gt_COOP_Init_01_LoadData_Init();
    lib1_gt_COOP_Init_02_Players_Init();
    lib1_gt_COOP_Init_03_LoadingComplete_Init();
    lib1_gt_COOP_Init_04_Technology_Init();
    lib1_gt_COOP_Init_05_Units_Init();
    lib1_gt_COOP_Init_06_MusicSound_Init();
    lib1_gt_COOP_Init_07_Environment_Init();
    lib1_gt_COOP_Init_08_Difficulties_Init();
    lib1_gt_COOP_Init_09_Start_Game_Init();
    lib1_gt_COOP_Init_10_AI_Init();
    lib1_gt_COOP_Transmission_Frog_Init();
    lib1_gt_COOP_AI_Wave_Start_Init();
    lib1_gt_COOP_AI_Enemy_Attacking_Init();
    lib1_gt_COOP_VictoryDefeat_DefeatPrimaryObjectiveFailed_Init();
    lib1_gt_COOP_VictoryDefeat_VictoryPrimaryObjectiveComplete_Init();
    lib1_gt_COOP_Objectives_Show_Init();
    lib1_gt_COOP_Objective_GameTime_Create_Init();
    lib1_gt_COOP_Objective_GameTime_Update_Init();
    lib1_gt_COOP_Objective_GameTime_Complete_Init();
    lib1_gt_COOP_Objective_GameTime_Failed_Init();
    lib1_gt_COOP_Objective_GameTime_Window_Init();
    lib1_gt_COOP_Objective_GameTime_Expired_Init();
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Create_Init();
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Update_Init();
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Complete_Init();
    lib1_gt_COOP_Objective_GiantMeteoritesImpact_Failed_Init();
    lib1_gt_COOP_Objective_DestroyMegalith_Create_Init();
    lib1_gt_COOP_Objective_DestroyMegalith_Update_Init();
    lib1_gt_COOP_Objective_DestroyMegalith_Complete_Init();
    lib1_gt_COOP_Objective_DestroyMegalith_Failed_Init();
    lib1_gt_COOP_Objective_Zeratul_Complete_Init();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;
void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }
    lib1_InitLib_completed = true;
    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    libNtve_InitLib();
    libCOMI_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
