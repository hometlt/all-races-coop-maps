//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ALL RACES COOP
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_mAPS_MAX = 70;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_aF_Score_FinalButton;
int gv_aF_Score_FinalButtonLabel;
int gv_dialog;
int gv_startMissionDialogButton;
int gv_selectMissionDialog;
int gv_selectMissionDialogBig;
int gv_selectMissionPulldownDialog;
int gv_totalMaps;
int[gv_mAPS_MAX + 1] gv_mapSlots;
string[gv_mAPS_MAX + 1] gv_mapFiles;
text[gv_mAPS_MAX + 1] gv_mapNames;
int[gv_mAPS_MAX + 1] gv_missionButton;
int[gv_mAPS_MAX + 1] gv_missionImage;
int[gv_mAPS_MAX + 1] gv_missionText;
int[gv_mAPS_MAX + 1] gv_mapBorder;
int[16] gv_selected;
int gv_missionsButton;

void InitGlobals () {
    int init_i;

    gv_aF_Score_FinalButton = c_invalidDialogControlId;
    gv_aF_Score_FinalButtonLabel = c_invalidDialogControlId;
    gv_dialog = c_invalidDialogId;
    gv_startMissionDialogButton = c_invalidDialogControlId;
    gv_selectMissionDialog = c_invalidDialogId;
    gv_selectMissionDialogBig = c_invalidDialogId;
    gv_selectMissionPulldownDialog = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_mAPS_MAX; init_i += 1) {
        gv_mapFiles[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_mAPS_MAX; init_i += 1) {
        gv_missionButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_mAPS_MAX; init_i += 1) {
        gv_missionImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_mAPS_MAX; init_i += 1) {
        gv_missionText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_mAPS_MAX; init_i += 1) {
        gv_mapBorder[init_i] = c_invalidDialogControlId;
    }
    gv_missionsButton = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_HookUpDialogItemandshowforplayers (string lp_name, int lp_type, int lp_parent, playergroup lp_players);
void gf_UpdateMapSelection (int lp_player, int lp_mapIndex);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init;
trigger gt_AF_Score;
trigger gt_AF_Score_QuitButtonCreate;
trigger gt_AF_Score_FinalButtonClicked;
trigger gt_MapListslectionChanged;
trigger gt_MapButtonClicked;
trigger gt_MissionsButtonClicked;
trigger gt_StartMission;
trigger gt_CreateMissionsDialog;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_HookUpDialogItemandshowforplayers (string lp_name, int lp_type, int lp_parent, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_parent, lp_type, lp_name);
    if ((lp_players == PlayerGroupEmpty())) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), lp_players, true);
    }
    return DialogControlLastCreated();
}

void gf_UpdateMapSelection (int lp_player, int lp_mapIndex) {
    // Variable Declarations
    int lv_i;
    color lv_color;
    int lv_p;
    int lv_votes;
    int lv_mapIndex;
    int lv_old;

    // Automatic Variable Declarations
    int autoF5C1E6F1_ae;
    const int autoF5C1E6F1_ai = 1;
    playergroup autoCE36D4E8_g;
    int autoE57B2178_val;

    // Variable Initialization
    lv_color = Color(0,0,0);
    lv_mapIndex = lp_mapIndex;
    lv_old = gv_selected[lp_player];

    // Implementation
    gv_selected[lp_player] = lv_mapIndex;
    autoF5C1E6F1_ae = gv_totalMaps;
    lv_i = 1;
    for ( ; ( (autoF5C1E6F1_ai >= 0 && lv_i <= autoF5C1E6F1_ae) || (autoF5C1E6F1_ai < 0 && lv_i >= autoF5C1E6F1_ae) ) ; lv_i += autoF5C1E6F1_ai ) {
        lv_votes = 0;
        autoCE36D4E8_g = PlayerGroupAll();
        lv_p = -1;
        while (true) {
            lv_p = PlayerGroupNextPlayer(autoCE36D4E8_g, lv_p);
            if (lv_p < 0) { break; }
            if ((PlayerType(lv_p) == c_playerTypeUser) && (gv_selected[lv_p] == lv_i)) {
                lv_votes += 1;
                lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false));
            }

        }
        autoE57B2178_val = lv_votes;
        if (autoE57B2178_val == 0) {
            DialogControlSetVisible(gv_mapBorder[lv_i], PlayerGroupAll(), false);
        }
        else if (autoE57B2178_val == 1) {
            libNtve_gf_SetDialogItemColor(gv_mapBorder[lv_i], lv_color, PlayerGroupAll());
            DialogControlSetVisible(gv_mapBorder[lv_i], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemColor(gv_mapBorder[lv_i], Color(100.00, 100.00, 100.00), PlayerGroupAll());
            DialogControlSetVisible(gv_mapBorder[lv_i], PlayerGroupAll(), true);
        }
    }
    DialogControlSelectItem(gv_selectMissionPulldownDialog, PlayerGroupAll(), lv_mapIndex);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool gt_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AF_Score, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init_Init () {
    gt_Init = TriggerCreate("gt_Init_Func");
    TriggerAddEventMapInit(gt_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score
//--------------------------------------------------------------------------------------------------
bool gt_AF_Score_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vBackgroundDialogPanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vBackgroundDialogPanel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeReal);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), false);
    GameSetMissionTimePaused(true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 550);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 50, c_anchorTop, 0, 90, GameMapName(), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_MapTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_ScoreBackground/Scorebackgrond");
    lv_vBackgroundDialogPanel = DialogControlLastCreated();
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_Image");
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 1.5, 0.0);
    TriggerExecute(gt_AF_Score_QuitButtonCreate, true, false);
    TriggerExecute(gt_CreateMissionsDialog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AF_Score_Init () {
    gt_AF_Score = TriggerCreate("gt_AF_Score_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_QuitButtonCreate
//--------------------------------------------------------------------------------------------------
bool gt_AF_Score_QuitButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 50, c_anchorBottomRight, 75, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/94BBE23D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    gv_aF_Score_FinalButtonLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_aF_Score_FinalButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9A498DEC"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AF_Score_QuitButtonCreate_Init () {
    gt_AF_Score_QuitButtonCreate = TriggerCreate("gt_AF_Score_QuitButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Final Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_AF_Score_FinalButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_aF_Score_FinalButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Void_Error_Back", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    GameOver(EventPlayer(), c_gameOverVictory, false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AF_Score_FinalButtonClicked_Init () {
    gt_AF_Score_FinalButtonClicked = TriggerCreate("gt_AF_Score_FinalButtonClicked_Func");
    TriggerAddEventDialogControl(gt_AF_Score_FinalButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapListslectionChanged
//--------------------------------------------------------------------------------------------------
bool gt_MapListslectionChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_selectMissionPulldownDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateMapSelection(EventPlayer(), DialogControlGetSelectedItem(gv_selectMissionPulldownDialog, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapListslectionChanged_Init () {
    gt_MapListslectionChanged = TriggerCreate("gt_MapListslectionChanged_Func");
    TriggerAddEventDialogControl(gt_MapListslectionChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapButtonClicked
//--------------------------------------------------------------------------------------------------
bool gt_MapButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_votes;
    int lv_i;
    int lv_old;

    // Automatic Variable Declarations
    int auto4A1587F4_ae;
    const int auto4A1587F4_ai = 1;

    // Variable Initialization
    lv_old = gv_selected[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A1587F4_ae = gv_totalMaps;
    lv_i = 1;
    for ( ; ( (auto4A1587F4_ai >= 0 && lv_i <= auto4A1587F4_ae) || (auto4A1587F4_ai < 0 && lv_i >= auto4A1587F4_ae) ) ; lv_i += auto4A1587F4_ai ) {
        if ((EventDialogControl() == gv_missionButton[lv_i])) {
            gf_UpdateMapSelection(EventPlayer(), lv_i);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapButtonClicked_Init () {
    gt_MapButtonClicked = TriggerCreate("gt_MapButtonClicked_Func");
    TriggerAddEventDialogControl(gt_MapButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissionsButtonClicked
//--------------------------------------------------------------------------------------------------
bool gt_MissionsButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_missionsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_selectMissionDialogBig, EventPlayer()) == true)) {
        DialogSetVisible(gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionsButtonClicked_Init () {
    gt_MissionsButtonClicked = TriggerCreate("gt_MissionsButtonClicked_Func");
    TriggerAddEventDialogControl(gt_MissionsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Mission
//--------------------------------------------------------------------------------------------------
bool gt_StartMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selected;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selected = DialogControlGetSelectedItem(gv_selectMissionPulldownDialog, 1);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_startMissionDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_selected == 1)) {
        lv_selected = RandomInt(2, gv_totalMaps);
    }

    if ((GameIsOnline() == true)) {
        OnlineMapToMapLoad(gv_mapSlots[lv_selected], PlayerGroupAll(), PlayerGroupEmpty());
    }
    else {
        GameSetNextMap(("coop/" + gv_mapFiles[lv_selected]));
        GameOver(1, c_gameOverVictory, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartMission_Init () {
    gt_StartMission = TriggerCreate("gt_StartMission_Func");
    TriggerEnable(gt_StartMission, false);
    TriggerAddEventDialogControl(gt_StartMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Missions Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateMissionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_x;
    string lv_map;
    int lv_y;
    int lv_image;
    int lv_buttonWidth;
    int lv_buttonsInRow;

    // Automatic Variable Declarations
    int auto8A1AEE79_ae;
    int auto8A1AEE79_var;
    playergroup auto1B9162E8_g;
    int auto1B9162E8_var;

    // Variable Initialization
    lv_offsetX = 10;
    lv_offsetY = -60;
    lv_image = c_invalidDialogControlId;
    lv_buttonWidth = 180;
    lv_buttonsInRow = 9;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    DialogCreate(1000, 1000, c_anchorTopRight, 20, 20, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_selectMissionDialog = DialogLastCreated();
    DialogSetRenderPriority(gv_selectMissionDialog, 9000);
    DialogControlCreate(gv_selectMissionDialog, c_triggerControlTypePulldown);
    gv_selectMissionPulldownDialog = DialogControlLastCreated();
    DialogControlSetSize(gv_selectMissionPulldownDialog, PlayerGroupAll(), 470, 90);
    DialogControlSetPosition(gv_selectMissionPulldownDialog, PlayerGroupAll(), c_anchorTopRight, 390, -5);
    libNtve_gf_CreateDialogItemButton(gv_selectMissionDialog, 350, 80, c_anchorTopRight, 0, 0, StringExternal("Param/Value/EA8FA5C3"), StringExternal("Param/Value/4269D687"), "");
    gv_startMissionDialogButton = DialogControlLastCreated();
    DialogSetVisible(gv_selectMissionDialog, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_selectMissionPulldownDialog, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_startMissionDialogButton, PlayerGroupAll(), true);
    DialogCreate(1820, 970, c_anchorTopLeft, 120, 125, true);
    gv_selectMissionDialogBig = DialogLastCreated();
    DialogSetRenderPriority(gv_selectMissionDialogBig, 5000);
    DialogSetTitle(gv_selectMissionDialogBig, StringExternal("Param/Value/30558920"));
    DialogSetVisible(gv_selectMissionDialogBig, PlayerGroupAll(), true);
    auto8A1AEE79_ae = UserDataInstanceCount("Maps");
    auto8A1AEE79_var = 1;
    for ( ; auto8A1AEE79_var <= auto8A1AEE79_ae; auto8A1AEE79_var += 1 ) {
        lv_map = UserDataInstance("Maps", auto8A1AEE79_var);
        if ((UserDataGetInt("Maps", lv_map, "Hidden", 1) == 0)) {
            if ((((UserDataGetInt("Maps", lv_map, "Map Slot", 1) != 0) && (GameIsOnline() == true)) || ((UserDataGetString("Maps", lv_map, "localFile", 1) != "") && (GameIsOnline() == false)))) {
                lv_x = (lv_offsetX + ((lv_buttonWidth + 10) * ((gv_totalMaps - (lv_buttonsInRow * (gv_totalMaps / lv_buttonsInRow))) - 0)));
                lv_y = (lv_offsetY + (140 * (gv_totalMaps / lv_buttonsInRow)));
                gv_totalMaps += 1;
                gv_mapNames[gv_totalMaps] = UserDataGetText("Maps", lv_map, "Name", 1);
                gv_mapSlots[gv_totalMaps] = UserDataGetInt("Maps", lv_map, "Map Slot", 1);
                gv_mapFiles[gv_totalMaps] = UserDataGetString("Maps", lv_map, "localFile", 1);
                DialogControlAddItem(gv_selectMissionPulldownDialog, PlayerGroupAll(), gv_mapNames[gv_totalMaps]);
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonWidth, 130, c_anchorTopLeft, (lv_x + 50), (lv_y + 145), UserDataGetText("Maps", lv_map, "Description", 1), gv_mapNames[gv_totalMaps], UserDataGetImagePath("Maps", lv_map, "Image", 1));
                DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "Coop_CommanderSelection/CommanderButtonTemplate");
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonWidth, 130);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_x + 50), (lv_y + 145));
                gv_missionButton[gv_totalMaps] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(gv_missionButton[gv_totalMaps], UserDataGetText("Maps", lv_map, "Description", 1), PlayerGroupAll());
                DialogControlHookup(gv_missionButton[gv_totalMaps], c_triggerControlTypeImage, "CheckMark");
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetVisible(gf_HookUpDialogItemandshowforplayers("CommanderPortrait", c_triggerControlTypePortrait, gv_missionButton[gv_totalMaps], PlayerGroupAll()), PlayerGroupAll(), false);
                gv_missionImage[gv_totalMaps] = gf_HookUpDialogItemandshowforplayers("Locked", c_triggerControlTypeImage, gv_missionButton[gv_totalMaps], PlayerGroupAll());
                DialogControlSetVisible(gv_missionImage[gv_totalMaps], PlayerGroupAll(), false);
                gv_missionImage[gv_totalMaps] = gf_HookUpDialogItemandshowforplayers("BackgroundImage", c_triggerControlTypeImage, gv_missionButton[gv_totalMaps], PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_missionImage[gv_totalMaps], UserDataGetImagePath("Maps", lv_map, "Image", 1), PlayerGroupAll());
                gv_missionText[gv_totalMaps] = gf_HookUpDialogItemandshowforplayers("CommanderName", c_triggerControlTypeLabel, gv_missionButton[gv_totalMaps], PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_missionText[gv_totalMaps], gv_mapNames[gv_totalMaps], PlayerGroupAll());
                gv_mapBorder[gv_totalMaps] = gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, gv_missionButton[gv_totalMaps], PlayerGroupAll());
                DialogControlSetVisible(gv_mapBorder[gv_totalMaps], PlayerGroupAll(), false);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_buttonWidth - 20), 50, c_anchorTopLeft, (lv_x + 55), (lv_y + 230), gv_mapNames[gv_totalMaps], ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_missionText[gv_totalMaps] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupAll());
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12", PlayerGroupAll());
            }

        }

    }
    DialogControlSelectItem(gv_selectMissionPulldownDialog, PlayerGroupAll(), 1);
    DialogCreate(1200, 100, c_anchorBottomLeft, 120, 20, true);
    gv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(gv_dialog, 200, 80, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/B15AD0D5"), StringExternal("Param/Value/41D47390"), "");
    gv_missionsButton = DialogControlLastCreated();
    DialogControlSetVisible(gv_missionsButton, PlayerGroupAll(), true);
    DialogSetVisible(gv_dialog, PlayerGroupAll(), true);
    auto1B9162E8_g = PlayerGroupActive();
    auto1B9162E8_var = -1;
    while (true) {
        auto1B9162E8_var = PlayerGroupNextPlayer(auto1B9162E8_g, auto1B9162E8_var);
        if (auto1B9162E8_var < 0) { break; }
        gf_UpdateMapSelection(auto1B9162E8_var, 1);
    }
    TriggerEnable(gt_StartMission, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMissionsDialog_Init () {
    gt_CreateMissionsDialog = TriggerCreate("gt_CreateMissionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init_Init();
    gt_AF_Score_Init();
    gt_AF_Score_QuitButtonCreate_Init();
    gt_AF_Score_FinalButtonClicked_Init();
    gt_MapListslectionChanged_Init();
    gt_MapButtonClicked_Init();
    gt_MissionsButtonClicked_Init();
    gt_StartMission_Init();
    gt_CreateMissionsDialog_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
