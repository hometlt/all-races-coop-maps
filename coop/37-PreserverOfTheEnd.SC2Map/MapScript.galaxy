//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Preserver of the End
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_ENEMY = 6;
const int gv_pLAYER_04_ENEMY = 7;
const int gv_mAXGAMEPHASES = 5;
const fixed gv_cONDUITRANGE = 33.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_ScenarioData {
    int lv_pRESETGAMEDIFFICULTY;
    int[gv_mAXGAMEPHASES + 1] lv_pRESETPhaseTime;
    unit lv_xENOSUnit;
    unitgroup lv_xENOSUnitGroup;
    unitgroup lv_xENOSEscortGroup;
    int lv_xenoReviveTimer;
    int lv_xenosSpawnTokens;
    int lv_xenosDeathsAmount;
    bool lv_xenosPermitRevival;
    int lv_objectivePhase;
    int lv_currentPhaseElapsedTime;
    int lv_playersVoidHarvested;
    int lv_playersVoidWinAmount;
    int lv_aMONVoidHarvested;
    int lv_aMONVoidWinAmount;
    unitgroup[gv_mAXGAMEPHASES + 1][2] lv_voidConduitPhaseGroup;
    int lv_voidConduitActivationTime;
    int lv_voidConduitDebtTime;
    int lv_voidConduitActivationTextLabel;
    bool lv_voidConduitsAreActive;
    int[gv_mAXGAMEPHASES + 1] lv_voidCrystalsperphaseatstartofthegame;
    int[gv_mAXGAMEPHASES + 1] lv_voidCrystalsperphaseGatheredByAmon;
    int lv_voidCrystalsTotalDecreased;
    unitgroup lv_voidMineralFieldHintActiveGroup;
    unitgroup[41] lv_clusterGroups;
    int[41] lv_clusterGroupsPhaseAssignments;
    int[41] lv_clusterPings;
    int lv_lastAssignedClusterID;
    int lv_spareSmallPingAmount;
    int lv_objectiveHarvestResource;
    int lv_objectiveDoNotLetAmonHarvestResource;
    int[2] lv_dIALOGAreaRemainingAmountLABEL;
    int[2] lv_dIALOGAreaRemainingAmountPANEL;
    int lv_dIALOGAreaRemainingAmountANCHORLABEL;
    int lv_dIALOGAreaRemainingAmount;
    int lv_attackWaveNum;
    bool lv_eLEMENTALOBJECTIVETRIGGERED;
    bool lv_eLEMENTALOBJECTIVEFINISHED;
    unit lv_eLEMENTALUnit;
    int lv_objectiveProtectVoidElemental;
    int lv_eLEMENTALEventTimer;
    int lv_eLEMENTALEventPhase;
    unitgroup lv_eLEMENTALEscrotThrowawayGuarddogs;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
gs_ScenarioData gv_sD;
point gv_victoryCompletePan;
int gv_assignedWavenum;

void InitGlobals () {
    int init_i1;
    int init_j1;

    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_sD.lv_pRESETGAMEDIFFICULTY = 2;
    gv_sD.lv_xENOSUnitGroup = UnitGroupEmpty();
    gv_sD.lv_xENOSEscortGroup = UnitGroupEmpty();
    gv_sD.lv_xenosPermitRevival = true;
    gv_sD.lv_playersVoidWinAmount = 10000;
    gv_sD.lv_aMONVoidWinAmount = 1500;
    for (init_i1 = 0; init_i1 <= gv_mAXGAMEPHASES; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 1; init_j1 += 1) {
            gv_sD.lv_voidConduitPhaseGroup[init_i1][init_j1] = UnitGroupEmpty();
        }
    }
    gv_sD.lv_voidConduitActivationTextLabel = c_invalidDialogControlId;
    gv_sD.lv_voidMineralFieldHintActiveGroup = UnitGroupEmpty();
    for (init_i1 = 0; init_i1 <= 40; init_i1 += 1) {
        gv_sD.lv_clusterGroups[init_i1] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 40; init_i1 += 1) {
        gv_sD.lv_clusterPings[init_i1] = c_invalidPingId;
    }
    gv_sD.lv_objectiveHarvestResource = c_invalidObjectiveId;
    gv_sD.lv_objectiveDoNotLetAmonHarvestResource = c_invalidObjectiveId;
    for (init_i1 = 0; init_i1 <= 1; init_i1 += 1) {
        gv_sD.lv_dIALOGAreaRemainingAmountLABEL[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 1; init_i1 += 1) {
        gv_sD.lv_dIALOGAreaRemainingAmountPANEL[init_i1] = c_invalidDialogControlId;
    }
    gv_sD.lv_dIALOGAreaRemainingAmountANCHORLABEL = c_invalidDialogControlId;
    gv_sD.lv_dIALOGAreaRemainingAmount = c_invalidDialogId;
    gv_sD.lv_objectiveProtectVoidElemental = c_invalidObjectiveId;
    gv_sD.lv_eLEMENTALEscrotThrowawayGuarddogs = UnitGroupEmpty();
    gv_victoryCompletePan = UnitGetPosition(UnitFromId(528414728));
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_DISPLAYDEBUGMESSAGE (text lp_tEXT);
void gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void gf_ShuffleMineralsInUnitGroup (int lp_aMOUNT, unitgroup lp_uNITGROUP);
void gf_VoidMineralFieldNormalizeCluster (point lp_pOINT, int lp_tOTALAMOUNT, int lp_pHASE);
void gf_VoidMineralFieldNormalizeClusterRegion (region lp_rEGION, int lp_tOTALAMOUNT, int lp_pHASE);
void gf_ELEMENTALActivationConditionCheckDEPRICATED ();
void gf_ELEMENTALSpawn ();
void gf_ELEMENTALAttackWaves (fixed lp_delay);
void gf_ELEMENTALAttackWaveEscortFollow (unitgroup lp_eSCORTGROUP, unitgroup lp_mAINGROUP);
void gf_PHASEEVENTXENOSSPAWN ();
void gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED ();
void gf_SetXenosStats ();
unit gf_GetXenosDefenseGoalPhase23l ();
void gf_XenosAIPhase23 ();
void gf_XenosAIPhase4 ();
void gf_XenosAIPhase4EscortAddControl ();
int gf_XenosAIPhase4SeekformostEnemyPopulatedRegion (int lp_cURRENTREGIONID);
point gf_XenosAIGetCondutAreaPoint (unit lp_cONDUIT);
fixed gf_TRGetUnharvestedHarvestBeginning ();
void gf_InitalizationCreateConduitActivationTimerDialog ();
void gf_ObjectiveBeginGameMechanics ();
void gf_ObjectiveProgressGamePhase ();
void gf_ObjectiveAwakenVoidConduit ();
void gf_ObjectivePHASEGAMELOOPRefreshControlTimers ();
void gf_ObjectiveVoidConduitBeginHarvest ();
void gf_PHASEEVENTActivatingConduits ();
void gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION ();
void gf_ObjectiveProtectVoidElementalCREATEREFRESH ();
fixed gf_GetWaveTimeStartOffset (int lp_waveNum);
void gf_RunAttackWave (int lp_pRESUMEDSPAWNPLAYER);
void gf_AttackWaveTemplatePhase1 (int lp_pRESUMEDSPAWNPLAYER);
void gf_AttackWaveTemplatePhase2 ();
void gf_AttackWaveTemplatePhase3 ();
void gf_AttackWaveTemplatePhase4 ();
int gf_GetTechBucket (bool lp_sub);
int gf_GetResourceBucket ();
void gf_RunAttackWaveatMissionTimeNormal (fixed lp_time);
void gf_RunAttackWaveatMissionTimePossibleLaunchOffset (int lp_untitledParameter001, fixed lp_time);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init03LoadingComplete;
trigger gt_Init02Players;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init07Environment;
trigger gt_Init08DifficultiesFinal;
trigger gt_StartGameQ;
trigger gt_StartAI;
trigger gt_Init09VoidConduitsInitilizeAreaClustersDataINITALIZATION;
trigger gt_HintAutodisableon10thminute;
trigger gt_VoidMineralFieldHint;
trigger gt_VoidMineralFieldHintExpired;
trigger gt_VoidMineralFieldGather;
trigger gt_VoidMineralFieldMinedOut;
trigger gt_VoidMineralFieldGatherAMON;
trigger gt_VoidConduitActivation;
trigger gt_VoidConduitStandbyActivation;
trigger gt_XenosMonochromeWaveCastMarker;
trigger gt_XenosMonochromeVeilCastMarker;
trigger gt_XenosMonochromeWallActivation;
trigger gt_XenosDeathPingRemove;
trigger gt_TRHarvestActivation;
trigger gt_TRHarvestClear;
trigger gt_TRMissionFail;
trigger gt_TRMissionVictory;
trigger gt_TRXenosDeath;
trigger gt_TRXenosSpawn;
trigger gt_TRXenosElementallSpawn;
trigger gt_TRXenosElementalSuccess;
trigger gt_TRXenosElementalDefeat;
trigger gt_ObjectiveGatherVoidResourceCREATE;
trigger gt_ObjectiveDenyAmonResourceCREATE;
trigger gt_ObjectiveHarvestPereodicRefreshREFRESH;
trigger gt_EnemyAttackingQ;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_AIAttackWaves;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_DISPLAYDEBUGMESSAGE (text lp_tEXT) {
    // Automatic Variable Declarations
    // Implementation
    return ;
    if ((GameIsTestMap(false) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_tEXT);
    }

}

void gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;
    string lv_portraitActor;

    // Automatic Variable Declarations
    string auto43E25B10_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    auto43E25B10_val = UnitGetType(lp_unit);
    if (auto43E25B10_val == "KerriganVoidUlnar02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto43E25B10_val == "KerriganVoidBurrowed") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto43E25B10_val == "KerriganEpilogue02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else {
    }
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libCOMI_gf_CM_SendTransmissionCampaignInternal(true, lp_unit, lp_model, SoundLink("nDLC_Music_Blank", -1), lp_speaker, (StringToText("") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void gf_ShuffleMineralsInUnitGroup (int lp_aMOUNT, unitgroup lp_uNITGROUP) {
    // Variable Declarations
    int lv_amount;
    unitgroup lv_resourceGroup;
    int lv_totalUnitInGroup;
    int lv_assignValue;
    unit lv_assignUnit;
    unit lv_shuffleUnit;

    // Automatic Variable Declarations
    unitgroup auto268234BF_g;
    int auto268234BF_u;
    unit auto268234BF_var;

    // Variable Initialization
    lv_amount = lp_aMOUNT;
    lv_resourceGroup = UnitGroupCopy(lp_uNITGROUP);

    // Implementation
    lv_totalUnitInGroup = UnitGroupCount(lv_resourceGroup, c_unitCountAlive);
    lv_assignValue = (lv_amount/lv_totalUnitInGroup);
    auto268234BF_g = lv_resourceGroup;
    auto268234BF_u = UnitGroupCount(auto268234BF_g, c_unitCountAll);
    for (;; auto268234BF_u -= 1) {
        auto268234BF_var = UnitGroupUnitFromEnd(auto268234BF_g, auto268234BF_u);
        if (auto268234BF_var == null) { break; }
        UnitSetPropertyFixed(auto268234BF_var, c_unitPropResources, (IntToFixed(lv_assignValue)));
        lv_amount -= lv_assignValue;
    }
    lv_assignUnit = UnitGroupRandomUnit(lv_resourceGroup, c_unitCountAlive);
    UnitSetPropertyFixed(lv_assignUnit, c_unitPropResources, (UnitGetPropertyFixed(lv_assignUnit, c_unitPropResources, c_unitPropCurrent)+IntToFixed(lv_amount)));
    while ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 1)) {
        lv_assignUnit = UnitGroupRandomUnit(lv_resourceGroup, c_unitCountAlive);
        lv_assignValue = FixedToInt((UnitGetPropertyFixed(lv_assignUnit, c_unitPropResources, c_unitPropCurrent)/2));
        lv_assignValue = MaxI(RandomInt(0, lv_assignValue), RandomInt(0, lv_assignValue));
        lv_shuffleUnit = UnitGroupRandomUnit(lv_resourceGroup, c_unitCountAlive);
        UnitSetPropertyFixed(lv_assignUnit, c_unitPropResources, (UnitGetPropertyFixed(lv_assignUnit, c_unitPropResources, c_unitPropCurrent)+IntToFixed(lv_assignValue)));
        UnitSetPropertyFixed(lv_shuffleUnit, c_unitPropResources, (UnitGetPropertyFixed(lv_shuffleUnit, c_unitPropResources, c_unitPropCurrent)-IntToFixed(lv_assignValue)));
        UnitGroupRemove(lv_resourceGroup, lv_assignUnit);
        UnitGroupRemove(lv_resourceGroup, lv_shuffleUnit);
    }
}

void gf_VoidMineralFieldNormalizeCluster (point lp_pOINT, int lp_tOTALAMOUNT, int lp_pHASE) {
    // Variable Declarations
    int lv_paramPATCHMIN;
    int lv_paramPATCHMAX;
    unitgroup lv_group;
    int lv_bank;
    int lv_unitAmount;
    int lv_softeningMargin;
    int lv_randomSoftening;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoFDB2BAF1_g;
    int autoFDB2BAF1_u;
    unit autoFDB2BAF1_var;

    // Variable Initialization
    lv_paramPATCHMIN = 15;
    lv_paramPATCHMAX = 105;
    lv_group = UnitGroupEmpty();
    lv_bank = lp_tOTALAMOUNT;

    // Implementation
    if ((lp_pHASE == 1)) {
        lv_paramPATCHMAX = 50;
    }
    else {
        lv_paramPATCHMAX = MinI((50+(lp_pHASE-1)*15), 105);
    }
    if ((lp_tOTALAMOUNT >= 500)) {
        lv_paramPATCHMAX = 160;
    }

    UnitGroupAddUnitGroup(lv_group, UnitGroup("VoidMineralField", c_playerAny, RegionCircle(lp_pOINT, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gv_sD.lv_lastAssignedClusterID += 1;
    UnitGroupAddUnitGroup(gv_sD.lv_clusterGroups[0], lv_group);
    UnitGroupAddUnitGroup(gv_sD.lv_clusterGroups[gv_sD.lv_lastAssignedClusterID], lv_group);
    gv_sD.lv_clusterGroupsPhaseAssignments[gv_sD.lv_lastAssignedClusterID] = lp_pHASE;
    lv_unitAmount = UnitGroupCount(lv_group, c_unitCountAlive);
    lv_softeningMargin = (lv_paramPATCHMIN/2);
    lv_randomSoftening = (lp_tOTALAMOUNT - (lv_softeningMargin*lv_unitAmount)-(lv_paramPATCHMIN*lv_unitAmount));
    if ((lv_randomSoftening < 0)) {
        lv_softeningMargin = 0;
    }

    autoFDB2BAF1_g = lv_group;
    autoFDB2BAF1_u = UnitGroupCount(autoFDB2BAF1_g, c_unitCountAll);
    for (;; autoFDB2BAF1_u -= 1) {
        autoFDB2BAF1_var = UnitGroupUnitFromEnd(autoFDB2BAF1_g, autoFDB2BAF1_u);
        if (autoFDB2BAF1_var == null) { break; }
        lv_randomSoftening = RandomInt(0, lv_softeningMargin);
        UnitSetPropertyFixed(autoFDB2BAF1_var, c_unitPropResources, IntToFixed((lv_paramPATCHMIN+lv_randomSoftening)));
        lv_bank -= lv_paramPATCHMIN;
        lv_bank -= lv_randomSoftening;
    }
    while ((lv_bank > 0) && (UnitGroupCount(lv_group, c_unitCountAlive) >= 1)) {
        lv_unit = UnitGroupRandomUnit(lv_group, c_unitCountAlive);
        UnitGroupRemove(lv_group, lv_unit);
        if ((UnitGroupCount(lv_group, c_unitCountAlive) >= 1)) {
            lv_randomSoftening = MinI(RandomInt(0, lv_bank), (lv_paramPATCHMAX-FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropResources, c_unitPropCurrent))));
        }
        else {
            lv_randomSoftening = lv_bank;
        }
        UnitSetPropertyFixed(lv_unit, c_unitPropResources, (UnitGetPropertyFixed(lv_unit, c_unitPropResources, c_unitPropCurrent)+IntToFixed(lv_randomSoftening)));
        lv_bank -= lv_randomSoftening;
    }
}

void gf_VoidMineralFieldNormalizeClusterRegion (region lp_rEGION, int lp_tOTALAMOUNT, int lp_pHASE) {
    // Variable Declarations
    int lv_paramPATCHMIN;
    int lv_paramPATCHMAX;
    unitgroup lv_group;
    int lv_bank;
    int lv_unitAmount;
    int lv_softeningMargin;
    int lv_randomSoftening;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto9CB2908C_g;
    int auto9CB2908C_u;
    unit auto9CB2908C_var;

    // Variable Initialization
    lv_paramPATCHMIN = 15;
    lv_paramPATCHMAX = 105;
    lv_group = UnitGroupEmpty();
    lv_bank = lp_tOTALAMOUNT;

    // Implementation
    if ((lp_pHASE == 1)) {
        lv_paramPATCHMAX = 50;
    }
    else {
        lv_paramPATCHMAX = MinI((50+(lp_pHASE-1)*10), 105);
    }
    UnitGroupAddUnitGroup(lv_group, UnitGroup("VoidMineralField", c_playerAny, lp_rEGION, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    gv_sD.lv_lastAssignedClusterID += 1;
    UnitGroupAddUnitGroup(gv_sD.lv_clusterGroups[0], lv_group);
    UnitGroupAddUnitGroup(gv_sD.lv_clusterGroups[gv_sD.lv_lastAssignedClusterID], lv_group);
    gv_sD.lv_clusterGroupsPhaseAssignments[gv_sD.lv_lastAssignedClusterID] = lp_pHASE;
    lv_unitAmount = UnitGroupCount(lv_group, c_unitCountAlive);
    lv_softeningMargin = (lv_paramPATCHMIN/2);
    lv_randomSoftening = (lp_tOTALAMOUNT - (lv_softeningMargin*lv_unitAmount)-(lv_paramPATCHMIN*lv_unitAmount));
    if ((lv_randomSoftening < 0)) {
        lv_softeningMargin = 0;
    }

    auto9CB2908C_g = lv_group;
    auto9CB2908C_u = UnitGroupCount(auto9CB2908C_g, c_unitCountAll);
    for (;; auto9CB2908C_u -= 1) {
        auto9CB2908C_var = UnitGroupUnitFromEnd(auto9CB2908C_g, auto9CB2908C_u);
        if (auto9CB2908C_var == null) { break; }
        lv_randomSoftening = RandomInt(0, lv_softeningMargin);
        UnitSetPropertyFixed(auto9CB2908C_var, c_unitPropResources, IntToFixed((lv_paramPATCHMIN+lv_randomSoftening)));
        lv_bank -= lv_paramPATCHMIN;
        lv_bank -= lv_randomSoftening;
    }
    while ((lv_bank > 0) && (UnitGroupCount(lv_group, c_unitCountAlive) >= 1)) {
        lv_unit = UnitGroupRandomUnit(lv_group, c_unitCountAlive);
        UnitGroupRemove(lv_group, lv_unit);
        if ((UnitGroupCount(lv_group, c_unitCountAlive) >= 1)) {
            lv_randomSoftening = MinI(RandomInt(0, lv_bank), (lv_paramPATCHMAX-FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropResources, c_unitPropCurrent))));
        }
        else {
            lv_randomSoftening = lv_bank;
        }
        UnitSetPropertyFixed(lv_unit, c_unitPropResources, (UnitGetPropertyFixed(lv_unit, c_unitPropResources, c_unitPropCurrent)+IntToFixed(lv_randomSoftening)));
        lv_bank -= lv_randomSoftening;
    }
}

trigger auto_gf_ELEMENTALActivationConditionCheckDEPRICATED_Trigger = null;

void gf_ELEMENTALActivationConditionCheckDEPRICATED () {
    if (auto_gf_ELEMENTALActivationConditionCheckDEPRICATED_Trigger == null) {
        auto_gf_ELEMENTALActivationConditionCheckDEPRICATED_Trigger = TriggerCreate("auto_gf_ELEMENTALActivationConditionCheckDEPRICATED_TriggerFunc");
    }

    TriggerExecute(auto_gf_ELEMENTALActivationConditionCheckDEPRICATED_Trigger, false, false);
}

bool auto_gf_ELEMENTALActivationConditionCheckDEPRICATED_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_sD.lv_eLEMENTALOBJECTIVETRIGGERED == false) && ((gv_sD.lv_voidCrystalsTotalDecreased >= 3620) || ((gv_sD.lv_objectivePhase == 3) && (gv_sD.lv_currentPhaseElapsedTime >= (gv_sD.lv_pRESETPhaseTime[gv_sD.lv_objectivePhase]/2))))) {
        gv_sD.lv_eLEMENTALOBJECTIVETRIGGERED = true;
        TriggerQueueEnter();
        gf_ELEMENTALSpawn();
        TriggerQueueExit();
    }

    return true;
}

trigger auto_gf_ELEMENTALSpawn_Trigger = null;

void gf_ELEMENTALSpawn () {
    if (auto_gf_ELEMENTALSpawn_Trigger == null) {
        auto_gf_ELEMENTALSpawn_Trigger = TriggerCreate("auto_gf_ELEMENTALSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_ELEMENTALSpawn_Trigger, false, false);
}

bool auto_gf_ELEMENTALSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    revealer lv_revealer;
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    libNtve_gf_SetAlliance(1, 5, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(2, 5, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(3, 5, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(4, 5, libNtve_ge_AllianceSetting_Enemy);
    TriggerQueueEnter();
    TriggerExecute(gt_TRXenosElementallSpawn, true, false);
    TriggerQueueExit();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidElemental", c_unitCreateIgnorePlacement, 5, PointFromId(1229051675));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitLastCreated()), StringExternal("Param/Value/BE3A6DEB"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    libARRA_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    lv_ping = PingLastCreated();
    gv_sD.lv_eLEMENTALUnit = UnitLastCreated();
    libCOMI_gf_CreateRevealerCoop(1, RegionCircle(PointFromId(1229051675), 8.0));
    lv_revealer = VisRevealerLastCreated();
    gf_ObjectiveProtectVoidElementalCREATEREFRESH();
    gf_ELEMENTALAttackWaves(20.0);
    gf_ELEMENTALAttackWaves((20.0+90.0));
    gf_ELEMENTALAttackWaves((20.0+180.0));
    gf_ELEMENTALAttackWaves((20.0+270.0));
    while ((UnitIsAlive(gv_sD.lv_eLEMENTALUnit) == true) && (gv_sD.lv_eLEMENTALEventTimer > 0)) {
        Wait(0.5, c_timeGame);
    }
    VisRevealerDestroy(lv_revealer);
    libCOMI_gf_DestroyPingCoop(lv_ping);
    gv_sD.lv_eLEMENTALOBJECTIVEFINISHED = true;
    UnitGroupIssueOrder(gv_sD.lv_eLEMENTALEscrotThrowawayGuarddogs, OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(1387244244)), c_orderQueueReplace);
    if ((UnitIsAlive(gv_sD.lv_eLEMENTALUnit) == false)) {
        ObjectiveSetState(gv_sD.lv_objectiveProtectVoidElemental, c_objectiveStateFailed);
        TriggerQueueEnter();
        TriggerExecute(gt_TRXenosElementalDefeat, true, false);
        TriggerQueueExit();
        return true;
    }

    if ((UnitIsAlive(gv_sD.lv_eLEMENTALUnit) == true) && (gv_sD.lv_eLEMENTALEventTimer <= 0)) {
        libCOMI_gf_SetMissionObjectiveProgress("HarvestProtectVoidElemental", 1);
        ObjectiveSetState(gv_sD.lv_objectiveProtectVoidElemental, c_objectiveStateCompleted);
        libNtve_gf_MakeUnitInvulnerable(gv_sD.lv_eLEMENTALUnit, true);
        TriggerQueueEnter();
        TriggerExecute(gt_TRXenosElementalSuccess, true, false);
        TriggerQueueExit();
        return true;
    }

    return true;
}

trigger auto_gf_ELEMENTALAttackWaves_Trigger = null;
fixed auto_gf_ELEMENTALAttackWaves_lp_delay;

void gf_ELEMENTALAttackWaves (fixed lp_delay) {
    auto_gf_ELEMENTALAttackWaves_lp_delay = lp_delay;

    if (auto_gf_ELEMENTALAttackWaves_Trigger == null) {
        auto_gf_ELEMENTALAttackWaves_Trigger = TriggerCreate("auto_gf_ELEMENTALAttackWaves_TriggerFunc");
    }

    TriggerExecute(auto_gf_ELEMENTALAttackWaves_Trigger, false, false);
}

bool auto_gf_ELEMENTALAttackWaves_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_gf_ELEMENTALAttackWaves_lp_delay;

    // Variable Declarations
    int lv_attackForcePing;
    unitgroup lv_mainAttackForce;
    unitgroup lv_escortAttackForce;
    unit lv_mainForcePingUnit;
    point lv_arrowPoint;
    fixed lv_arrowAngle;
    int lv_pingLoop;
    int lv_pingsMax;
    fixed lv_pingDistance;

    // Automatic Variable Declarations
    int autoC9F3BF2E_val;

    // Variable Initialization
    lv_attackForcePing = c_invalidPingId;
    lv_mainAttackForce = UnitGroupEmpty();
    lv_escortAttackForce = UnitGroupEmpty();
    lv_pingsMax = 12;

    // Implementation
    Wait(lp_delay, c_timeAI);
    if (((libCOMI_gf_GameIsOver() == true) || (UnitIsAlive(gv_sD.lv_eLEMENTALUnit) == false) || (gv_sD.lv_eLEMENTALEventTimer <= 0))) {
        return true;
    }

    gv_sD.lv_eLEMENTALEventPhase += 1;
    autoC9F3BF2E_val = gv_sD.lv_eLEMENTALEventPhase;
    if (autoC9F3BF2E_val == 1) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
    }
    else if (autoC9F3BF2E_val == 2) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 2, 0, 0), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
    }
    else if (autoC9F3BF2E_val == 3) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 2, 3, 0, 0), "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 2, 3, 3, 0, 0), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
    }
    else if (autoC9F3BF2E_val == 4) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 1, 1, 1, 0, 0), "HybridDominatorVoid", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 2, 4, 0, 0), "HybridDestroyer", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 3, 0, 2, 4, 0, 0), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
    }
    else {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 0, 0), "HybridNemesis", 0, gv_pLAYER_03_ENEMY, PointFromId(708), 270.0);
        UnitGroupAddUnitGroup(lv_mainAttackForce, UnitLastCreatedGroup());
    }
    lv_mainForcePingUnit = UnitGroupUnit(lv_mainAttackForce, 1);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", UnitGetPosition(lv_mainForcePingUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), lv_mainForcePingUnit);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/39452931"));
    lv_attackForcePing = PingLastCreated();
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, gf_GetResourceBucket(), gf_GetTechBucket(true), PointFromId(708), true);
    UnitGroupAddUnitGroup(lv_escortAttackForce, libCOMI_gf_LastCreatedCoopAttackForce());
    lv_arrowAngle = AngleBetweenPoints(PointFromId(708), PointFromId(1229051675));
    lv_pingDistance = (DistanceBetweenPoints(PointFromId(708), PointFromId(1229051675))/IntToFixed(lv_pingsMax));
    lv_pingLoop += 1;
    while ((lv_pingLoop < lv_pingsMax)) {
        lv_arrowPoint = PointFromId(708);
        lv_arrowPoint = PointWithOffsetPolar(PointFromId(708), (lv_pingDistance*IntToFixed(lv_pingLoop)), lv_arrowAngle);
        PointSetFacing(lv_arrowPoint, lv_arrowAngle);
        libCOMI_gf_CreatePingWithPointFacingCoop(PlayerGroupAll(), "PingArrow", lv_arrowPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 1);
        Wait(0.0625, c_timeGame);
        lv_pingLoop += 1;
    }
    Wait(5.0, c_timeGame);
    gf_ELEMENTALAttackWaveEscortFollow(lv_escortAttackForce, lv_mainAttackForce);
    while ((UnitGroupCount(lv_mainAttackForce, c_unitCountAlive) > 0) && (gv_sD.lv_eLEMENTALOBJECTIVEFINISHED == false)) {
        if ((UnitIsAlive(lv_mainForcePingUnit) == false)) {
            lv_mainForcePingUnit = UnitGroupUnit(lv_mainAttackForce, 1);
            PingSetUnit(lv_attackForcePing, lv_mainForcePingUnit);
        }

        UnitGroupIssueOrder(lv_mainAttackForce, OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(1229051675)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(lv_attackForcePing);
    UnitGroupAddUnitGroup(lv_mainAttackForce, lv_escortAttackForce);
    UnitGroupClear(lv_escortAttackForce);
    if ((UnitGroupCount(lv_mainAttackForce, c_unitCountAlive) > 0)) {
        if ((gv_sD.lv_eLEMENTALOBJECTIVEFINISHED == false)) {
            UnitGroupIssueOrder(lv_mainAttackForce, OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(1229051675)), c_orderQueueReplace);
            UnitGroupAddUnitGroup(gv_sD.lv_eLEMENTALEscrotThrowawayGuarddogs, lv_mainAttackForce);
        }

    }

    return true;
}

trigger auto_gf_ELEMENTALAttackWaveEscortFollow_Trigger = null;
unitgroup auto_gf_ELEMENTALAttackWaveEscortFollow_lp_eSCORTGROUP;
unitgroup auto_gf_ELEMENTALAttackWaveEscortFollow_lp_mAINGROUP;

void gf_ELEMENTALAttackWaveEscortFollow (unitgroup lp_eSCORTGROUP, unitgroup lp_mAINGROUP) {
    auto_gf_ELEMENTALAttackWaveEscortFollow_lp_eSCORTGROUP = lp_eSCORTGROUP;
    auto_gf_ELEMENTALAttackWaveEscortFollow_lp_mAINGROUP = lp_mAINGROUP;

    if (auto_gf_ELEMENTALAttackWaveEscortFollow_Trigger == null) {
        auto_gf_ELEMENTALAttackWaveEscortFollow_Trigger = TriggerCreate("auto_gf_ELEMENTALAttackWaveEscortFollow_TriggerFunc");
    }

    TriggerExecute(auto_gf_ELEMENTALAttackWaveEscortFollow_Trigger, false, false);
}

bool auto_gf_ELEMENTALAttackWaveEscortFollow_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_eSCORTGROUP = auto_gf_ELEMENTALAttackWaveEscortFollow_lp_eSCORTGROUP;
    unitgroup lp_mAINGROUP = auto_gf_ELEMENTALAttackWaveEscortFollow_lp_mAINGROUP;

    // Variable Declarations
    bool lv_toggle;
    unitgroup lv_escortGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_escortGroup = lp_eSCORTGROUP;

    // Implementation
    while ((UnitGroupCount(lv_escortGroup, c_unitCountAlive) > 0) && (UnitGroupCount(lp_mAINGROUP, c_unitCountAlive) > 0)) {
        if ((DistanceBetweenPoints(UnitGroupCenterOfGroup(lp_mAINGROUP), UnitGroupCenterOfGroup(lp_eSCORTGROUP)) > 4.0)) {
            if ((lv_toggle == true)) {
                lv_toggle = false;
                UnitGroupIssueOrder(lp_eSCORTGROUP, OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGroupCenterOfGroup(lp_mAINGROUP)), c_orderQueueReplace);
            }
            else {
                UnitGroupIssueOrder(lp_eSCORTGROUP, OrderTargetingPoint(AbilityCommand("move", 3), UnitGroupCenterOfGroup(lp_mAINGROUP)), c_orderQueueReplace);
                lv_toggle = true;
            }
        }

        if ((UnitIsAlive(gv_sD.lv_eLEMENTALUnit) == true) && (gv_sD.lv_eLEMENTALOBJECTIVEFINISHED == false) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(lv_escortGroup), PointFromId(1229051675)) <= 10.0)) {
            UnitGroupIssueOrder(lp_eSCORTGROUP, OrderTargetingRelativePoint(AbilityCommand("move", 3), PointFromId(1229051675)), c_orderQueueReplace);
            UnitGroupAddUnitGroup(gv_sD.lv_eLEMENTALEscrotThrowawayGuarddogs, lv_escortGroup);
            UnitGroupClear(lv_escortGroup);
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_PHASEEVENTXENOSSPAWN_Trigger = null;

void gf_PHASEEVENTXENOSSPAWN () {
    if (auto_gf_PHASEEVENTXENOSSPAWN_Trigger == null) {
        auto_gf_PHASEEVENTXENOSSPAWN_Trigger = TriggerCreate("auto_gf_PHASEEVENTXENOSSPAWN_TriggerFunc");
    }

    TriggerExecute(auto_gf_PHASEEVENTXENOSSPAWN_Trigger, false, false);
}

bool auto_gf_PHASEEVENTXENOSSPAWN_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_defenseGoal;
    point lv_attackPoint;
    unit lv_spawnRiftVisual;
    unit lv_xenos;

    // Automatic Variable Declarations
    int auto69FC241E_val;

    // Variable Initialization

    // Implementation
    gv_sD.lv_xenosSpawnTokens += 1;
    gv_sD.lv_xenosPermitRevival = false;
    while (!((gv_sD.lv_voidConduitsAreActive == false))) {
        Wait(2.0, c_timeGame);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "XenosRespawnArea", 0, 0, PointFromId(412666040));
    lv_spawnRiftVisual = UnitLastCreated();
    auto69FC241E_val = gv_sD.lv_objectivePhase;
    if (auto69FC241E_val == 2) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(412666040), true);
    }
    else if (auto69FC241E_val == 3) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, PointFromId(412666040), true);
    }
    else if (auto69FC241E_val == 4) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(412666040), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(412666040), true);
    }
    gv_sD.lv_xENOSEscortGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    if ((gv_sD.lv_objectivePhase < 4)) {
        TriggerQueueEnter();
        TriggerExecute(gt_TRXenosSpawn, true, true);
        TriggerQueueExit();
        UnitKill(lv_spawnRiftVisual);
        UnitCreate(1, "Xenos", c_unitCreateIgnorePlacement, 3, PointFromId(412666040), 270.0);
        gv_sD.lv_xENOSUnit = UnitLastCreated();
        lv_xenos = UnitLastCreated();
    }
    else {
        UnitKill(lv_spawnRiftVisual);
        UnitCreate(1, "Xenos", c_unitCreateIgnorePlacement, 3, PointFromId(412666040), 270.0);
        gv_sD.lv_xENOSUnit = UnitLastCreated();
        lv_xenos = UnitLastCreated();
        TriggerQueueEnter();
        TriggerExecute(gt_TRXenosSpawn, true, true);
        TriggerQueueExit();
    }
    gf_SetXenosStats();
    UnitSetPropertyFixed(lv_xenos, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_xenos, c_unitPropShieldsPercent, 100.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(lv_xenos), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), lv_xenos);
    libARRA_gf_StorePingForUnit(lv_xenos, 1, PingLastCreated());
    UnitGroupAdd(gv_sD.lv_xENOSUnitGroup, lv_xenos);
    if ((gv_sD.lv_objectivePhase == 4)) {
        gf_XenosAIPhase4();
        gf_XenosAIPhase4EscortAddControl();
    }
    else {
        gf_XenosAIPhase23();
    }
    return true;
}

trigger auto_gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED_Trigger = null;

void gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED () {
    if (auto_gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED_Trigger == null) {
        auto_gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED_Trigger = TriggerCreate("auto_gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED_TriggerFunc");
    }

    TriggerExecute(auto_gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED_Trigger, false, false);
}

bool auto_gf_XenosSpawnConditionMineralsMinedCheckDEPRICATED_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_sD.lv_xenosSpawnTokens == 0) && (gv_sD.lv_xenosPermitRevival == true) && (UnitGroupCount(gv_sD.lv_xENOSUnitGroup, c_unitCountAlive) == 0) && ((gv_sD.lv_voidCrystalsTotalDecreased >= 1200) || ((gv_sD.lv_objectivePhase == 2) && (gv_sD.lv_currentPhaseElapsedTime >= (gv_sD.lv_pRESETPhaseTime[gv_sD.lv_objectivePhase]/2))))) {
        gv_sD.lv_xenosPermitRevival = false;
        return true;
    }

    if ((gv_sD.lv_xenosSpawnTokens > 0) && (gv_sD.lv_xenosPermitRevival == true) && (UnitGroupCount(gv_sD.lv_xENOSUnitGroup, c_unitCountAlive) == 0) && (gv_sD.lv_xenoReviveTimer <= 0)) {
        gv_sD.lv_xenosPermitRevival = false;
        gf_PHASEEVENTXENOSSPAWN();
    }

    return true;
}

void gf_SetXenosStats () {
    // Variable Declarations
    unit lv_xenos;
    fixed lv_difficultyMultiplier;

    // Automatic Variable Declarations
    int autoD7F6B838_val;

    // Variable Initialization
    lv_xenos = gv_sD.lv_xENOSUnit;
    lv_difficultyMultiplier = 1.0;

    // Implementation
    UnitSetPropertyFixed(lv_xenos, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_xenos, c_unitPropLifeMax, c_unitPropNormal)*(IntToFixed(gv_sD.lv_objectivePhase)-1)));
    UnitSetPropertyFixed(lv_xenos, c_unitPropShieldsMax, (UnitGetPropertyFixed(lv_xenos, c_unitPropShieldsMax, c_unitPropNormal)*(IntToFixed(gv_sD.lv_objectivePhase)-1)));
    autoD7F6B838_val = gv_sD.lv_pRESETGAMEDIFFICULTY;
    if (autoD7F6B838_val == 1) {
        lv_difficultyMultiplier = 0.25;
    }
    else if (autoD7F6B838_val == 2) {
        lv_difficultyMultiplier = 0.5;
    }
    else if (autoD7F6B838_val == 3) {
        lv_difficultyMultiplier = 0.75;
    }
    else {
    }
    UnitSetPropertyFixed(lv_xenos, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_xenos, c_unitPropLifeMax, c_unitPropCurrent)*lv_difficultyMultiplier));
    UnitSetPropertyFixed(lv_xenos, c_unitPropShieldsMax, (UnitGetPropertyFixed(lv_xenos, c_unitPropShieldsMax, c_unitPropCurrent)*lv_difficultyMultiplier));
    if ((gv_sD.lv_objectivePhase < 3)) {
        UnitAbilityEnable(lv_xenos, "XenosMonochromeVeil", false);
    }
    else {
        UnitAbilityEnable(lv_xenos, "XenosMonochromeVeil", true);
    }
    if ((gv_sD.lv_objectivePhase < 4)) {
        UnitAbilityEnable(lv_xenos, "XenosMonochromeWall", false);
    }
    else {
        UnitAbilityEnable(lv_xenos, "XenosMonochromeWall", true);
    }
}

unit gf_GetXenosDefenseGoalPhase23l () {
    // Variable Declarations
    unitgroup lv_combined;
    int lv_maxConduits;
    int[11] lv_mineralAmount;
    unit lv_conduit;
    int lv_topValue;
    unit lv_topUnit;

    // Automatic Variable Declarations
    unitgroup autoA1FC68C5_g;
    int autoA1FC68C5_u;
    unitgroup autoAF4A421C_g;
    int autoAF4A421C_u;
    unit autoAF4A421C_var;

    // Variable Initialization
    lv_combined = UnitGroupEmpty();
    lv_maxConduits = 1;
    lv_topUnit = UnitFromId(845201277);

    // Implementation
    UnitGroupAddUnitGroup(lv_combined, gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][0]);
    UnitGroupAddUnitGroup(lv_combined, gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][1]);
    autoA1FC68C5_g = lv_combined;
    autoA1FC68C5_u = UnitGroupCount(autoA1FC68C5_g, c_unitCountAll);
    for (;; autoA1FC68C5_u -= 1) {
        lv_conduit = UnitGroupUnitFromEnd(autoA1FC68C5_g, autoA1FC68C5_u);
        if (lv_conduit == null) { break; }
        autoAF4A421C_g = UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_conduit), gv_cONDUITRANGE), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAF4A421C_u = UnitGroupCount(autoAF4A421C_g, c_unitCountAll);
        for (;; autoAF4A421C_u -= 1) {
            autoAF4A421C_var = UnitGroupUnitFromEnd(autoAF4A421C_g, autoAF4A421C_u);
            if (autoAF4A421C_var == null) { break; }
            lv_mineralAmount[lv_maxConduits] += FixedToInt(UnitGetPropertyFixed(autoAF4A421C_var, c_unitPropResources, c_unitPropCurrent));
        }
        lv_maxConduits += 1;
    }
    lv_maxConduits -= 1;
    lv_topValue = lv_mineralAmount[1];
    lv_topUnit = UnitGroupUnit(lv_combined, 1);
    while ((lv_maxConduits >= 1)) {
        if ((lv_mineralAmount[lv_maxConduits] >= lv_topValue)) {
            lv_topValue = lv_mineralAmount[lv_maxConduits];
            lv_topUnit = UnitGroupUnit(lv_combined, lv_maxConduits);
        }

        lv_maxConduits -= 1;
    }
    return lv_topUnit;
}

trigger auto_gf_XenosAIPhase23_Trigger = null;

void gf_XenosAIPhase23 () {
    if (auto_gf_XenosAIPhase23_Trigger == null) {
        auto_gf_XenosAIPhase23_Trigger = TriggerCreate("auto_gf_XenosAIPhase23_TriggerFunc");
    }

    TriggerExecute(auto_gf_XenosAIPhase23_Trigger, false, false);
}

bool auto_gf_XenosAIPhase23_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_xenos;
    unitgroup lv_escort;
    int lv_currentPhase;
    unit lv_defenseGoal;
    point lv_attackPoint;
    bool lv_reachedDefenseGoal;
    bool lv_escortGatheredUp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_xenos = gv_sD.lv_xENOSUnit;
    lv_escort = gv_sD.lv_xENOSEscortGroup;
    lv_currentPhase = gv_sD.lv_objectivePhase;

    // Implementation
    lv_defenseGoal = gf_GetXenosDefenseGoalPhase23l();
    lv_attackPoint = gf_XenosAIGetCondutAreaPoint(lv_defenseGoal);
    UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), lv_attackPoint), c_orderQueueReplace);
    while ((UnitIsAlive(lv_xenos) == true) && (gv_sD.lv_objectivePhase != 4)) {
        if ((lv_reachedDefenseGoal == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_xenos), lv_attackPoint) >= 4.0)) {
                UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), lv_attackPoint), c_orderQueueReplace);
            }
            else {
                lv_reachedDefenseGoal = true;
            }
        }

        if ((lv_reachedDefenseGoal == true) && (DistanceBetweenPoints(UnitGetPosition(lv_xenos), lv_attackPoint) >= 8.0)) {
            UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), lv_attackPoint), c_orderQueueReplace);
        }

        if ((UnitGroupCount(lv_escort, c_unitCountAlive) > 0)) {
            if ((lv_reachedDefenseGoal == false)) {
                UnitGroupIssueOrder(lv_escort, OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
            }

            if ((lv_reachedDefenseGoal == true) && (lv_escortGatheredUp == false)) {
                lv_escortGatheredUp = true;
                UnitGroupIssueOrder(lv_escort, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
            }

            if ((lv_reachedDefenseGoal == true) && (lv_escortGatheredUp == true) && (DistanceBetweenPoints(UnitGetPosition(lv_xenos), UnitGroupCenterOfGroup(lv_escort)) >= 4.0)) {
                UnitGroupIssueOrder(lv_escort, OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
            }

        }

        if ((gv_sD.lv_objectivePhase != lv_currentPhase)) {
            lv_currentPhase = gv_sD.lv_objectivePhase;
            gf_SetXenosStats();
            lv_defenseGoal = gf_GetXenosDefenseGoalPhase23l();
            lv_attackPoint = gf_XenosAIGetCondutAreaPoint(lv_defenseGoal);
            lv_reachedDefenseGoal = false;
            lv_escortGatheredUp = false;
            UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), lv_attackPoint), c_orderQueueReplace);
        }

        Wait(2.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_xenos) == true) && (gv_sD.lv_objectivePhase == 4)) {
        gf_XenosAIPhase4();
        gf_XenosAIPhase4EscortAddControl();
        return true;
    }

    if ((UnitGroupCount(lv_escort, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lv_escort, OrderTargetingRelativePoint(AbilityCommand("move", 3), PointFromId(249)), c_orderQueueReplace);
    }

    return true;
}

trigger auto_gf_XenosAIPhase4_Trigger = null;

void gf_XenosAIPhase4 () {
    if (auto_gf_XenosAIPhase4_Trigger == null) {
        auto_gf_XenosAIPhase4_Trigger = TriggerCreate("auto_gf_XenosAIPhase4_TriggerFunc");
    }

    TriggerExecute(auto_gf_XenosAIPhase4_Trigger, false, false);
}

bool auto_gf_XenosAIPhase4_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_areaScanrange;
    int lv_lEFT;
    int lv_mID;
    int lv_rIGHT;
    unit lv_xenos;
    unitgroup lv_escort;
    point[3] lv_waypoints;
    region[3] lv_waypointRegion;
    int[3] lv_hostileAmount;
    fixed lv_waypointShiftCooldown;
    int lv_cycle;
    int lv_topEnemyRegionUnitAmounts;
    int lv_topEnemyRegionRegionID;
    int lv_currentlyAssignedRegion;
    unit lv_randomTarget;
    unitgroup lv_combinedEnemyAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_areaScanrange = 18.0;
    lv_mID = 1;
    lv_rIGHT = 2;
    lv_xenos = gv_sD.lv_xENOSUnit;
    lv_escort = gv_sD.lv_xENOSEscortGroup;
    lv_combinedEnemyAmount = UnitGroupEmpty();

    // Implementation
    lv_waypoints[lv_lEFT] = PointFromId(727246440);
    lv_waypoints[lv_mID] = PointFromId(1387244244);
    lv_waypoints[lv_rIGHT] = PointFromId(1015291725);
    lv_waypointRegion[lv_lEFT] = RegionCircle(lv_waypoints[lv_lEFT], lv_areaScanrange);
    lv_waypointRegion[lv_mID] = RegionCircle(lv_waypoints[lv_mID], lv_areaScanrange);
    lv_waypointRegion[lv_rIGHT] = RegionCircle(lv_waypoints[lv_rIGHT], lv_areaScanrange);
    lv_currentlyAssignedRegion = lv_mID;
    UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), lv_waypoints[lv_currentlyAssignedRegion]), c_orderQueueReplace);
    while ((UnitIsAlive(lv_xenos) == true)) {
        if ((UnitGroupCount(UnitGroupAlliance(3, c_unitAllianceEnemy, lv_waypointRegion[lv_currentlyAssignedRegion], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            if ((lv_waypointShiftCooldown == 0.0) && ((UnitGroupCount(UnitGroupAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_waypoints[0], lv_areaScanrange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_waypoints[0], lv_areaScanrange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_waypoints[2], lv_areaScanrange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                lv_currentlyAssignedRegion = gf_XenosAIPhase4SeekformostEnemyPopulatedRegion(lv_currentlyAssignedRegion);
                UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), lv_waypoints[lv_currentlyAssignedRegion]), c_orderQueueReplace);
                lv_waypointShiftCooldown = 40.0;
            }

        }
        else {
            lv_randomTarget = UnitGroupRandomUnit(UnitGroupAlliance(3, c_unitAllianceEnemy, lv_waypointRegion[lv_currentlyAssignedRegion], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_randomTarget)), c_orderQueueReplace);
        }
        if ((DistanceBetweenPoints(UnitGetPosition(lv_xenos), lv_waypoints[lv_currentlyAssignedRegion]) >= lv_areaScanrange)) {
            UnitIssueOrder(lv_xenos, OrderTargetingPoint(AbilityCommand("move", 3), lv_waypoints[lv_currentlyAssignedRegion]), c_orderQueueReplace);
        }

        lv_waypointShiftCooldown = MaxF(0.0, (lv_waypointShiftCooldown-2.0));
        Wait(2.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_XenosAIPhase4EscortAddControl_Trigger = null;

void gf_XenosAIPhase4EscortAddControl () {
    if (auto_gf_XenosAIPhase4EscortAddControl_Trigger == null) {
        auto_gf_XenosAIPhase4EscortAddControl_Trigger = TriggerCreate("auto_gf_XenosAIPhase4EscortAddControl_TriggerFunc");
    }

    TriggerExecute(auto_gf_XenosAIPhase4EscortAddControl_Trigger, false, false);
}

bool auto_gf_XenosAIPhase4EscortAddControl_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_xenos;
    unitgroup lv_escort;
    fixed lv_pARAMResummonFrequency;
    int lv_addSummonTreshold;
    fixed lv_addSummonCooldown;
    unitgroup[3] lv_newForces;
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    int autoD6BCA714_val;

    // Variable Initialization
    lv_xenos = gv_sD.lv_xENOSUnit;
    lv_escort = gv_sD.lv_xENOSEscortGroup;
    lv_pARAMResummonFrequency = 60.0;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_newForces[init_i] = UnitGroupEmpty();
    }
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Implementation
    autoD6BCA714_val = gv_sD.lv_pRESETGAMEDIFFICULTY;
    if (autoD6BCA714_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        lv_pARAMResummonFrequency = 60.0;
    }
    else if (autoD6BCA714_val == 3) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        lv_pARAMResummonFrequency = 50.0;
    }
    else if (autoD6BCA714_val == 4) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
        lv_pARAMResummonFrequency = 40.0;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    lv_addSummonTreshold = MaxI(10, (UnitGroupCount(lv_escort, c_unitCountAlive)/2));
    UnitGroupAddUnitGroup(lv_newForces[0], lv_escort);
    while ((UnitIsAlive(lv_xenos) == true)) {
        if ((UnitGroupCount(lv_escort, c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGetPosition(lv_xenos), UnitGroupCenterOfGroup(lv_escort)) >= 4.0)) {
            UnitGroupIssueOrder(lv_escort, OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
        }

        if ((UnitGroupCount(lv_newForces[1], c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGetPosition(lv_xenos), UnitGroupCenterOfGroup(lv_newForces[1])) >= 4.0)) {
            UnitGroupIssueOrder(lv_newForces[1], OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_newForces[1], OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
        }

        if ((UnitGroupCount(lv_newForces[2], c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGetPosition(lv_xenos), UnitGroupCenterOfGroup(lv_newForces[2])) >= 4.0)) {
            UnitGroupIssueOrder(lv_newForces[2], OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
            UnitGroupIssueOrder(lv_escort, OrderTargetingRelativePoint(AbilityCommand("move", 3), UnitGetPosition(lv_xenos)), c_orderQueueReplace);
        }

        if ((gv_sD.lv_pRESETGAMEDIFFICULTY != 1) && (UnitGroupCount(lv_newForces[0], c_unitCountAlive) <= lv_addSummonTreshold) && (lv_addSummonCooldown == 0.0)) {
            UnitGroupAddUnitGroup(lv_escort, lv_newForces[0]);
            UnitGroupClear(lv_newForces[0]);
            UnitGroupClear(lv_newForces[1]);
            UnitGroupClear(lv_newForces[2]);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(708), true);
            UnitGroupAddUnitGroup(lv_newForces[0], libCOMI_gf_LastCreatedCoopAttackForce());
            UnitGroupAddUnitGroup(lv_newForces[1], libCOMI_gf_LastCreatedCoopAttackForce());
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(710), true);
            UnitGroupAddUnitGroup(lv_newForces[0], libCOMI_gf_LastCreatedCoopAttackForce());
            UnitGroupAddUnitGroup(lv_newForces[2], libCOMI_gf_LastCreatedCoopAttackForce());
            lv_addSummonTreshold = MaxI(10, (UnitGroupCount(lv_newForces[0], c_unitCountAlive)/2));
            lv_addSummonCooldown = lv_pARAMResummonFrequency;
        }

        lv_addSummonCooldown = MaxF(0.0, (lv_addSummonCooldown-2.0));
        Wait(2.0, c_timeGame);
    }
    if ((UnitGroupCount(lv_escort, c_unitCountAlive) > 0)) {
        UnitGroupIssueOrder(lv_escort, OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(249)), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_newForces[0], OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(249)), c_orderQueueReplace);
    }

    return true;
}

int gf_XenosAIPhase4SeekformostEnemyPopulatedRegion (int lp_cURRENTREGIONID) {
    // Variable Declarations
    fixed lv_areaScanrange;
    int lv_lEFT;
    int lv_mID;
    int lv_rIGHT;
    point[3] lv_waypoints;
    int[3] lv_hostileAmount;
    int lv_cycle;
    int lv_topEnemyRegionUnitAmounts;
    int lv_topEnemyRegionRegionID;
    int lv_currentlyAssignedRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_areaScanrange = 22.0;
    lv_mID = 1;
    lv_rIGHT = 2;
    lv_currentlyAssignedRegion = lp_cURRENTREGIONID;

    // Implementation
    lv_waypoints[lv_lEFT] = PointFromId(727246440);
    lv_waypoints[lv_mID] = PointFromId(1387244244);
    lv_waypoints[lv_rIGHT] = PointFromId(1015291725);
    lv_cycle = 0;
    while ((lv_cycle <= 2)) {
        lv_hostileAmount[lv_cycle] = UnitGroupCount(UnitGroupAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_waypoints[lv_cycle], lv_areaScanrange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        lv_cycle += 1;
    }
    lv_topEnemyRegionRegionID = lv_currentlyAssignedRegion;
    lv_topEnemyRegionUnitAmounts = lv_hostileAmount[lv_currentlyAssignedRegion];
    lv_cycle = 0;
    while ((lv_cycle <= 2)) {
        if ((lv_hostileAmount[lv_cycle] > lv_topEnemyRegionUnitAmounts)) {
            lv_topEnemyRegionRegionID = lv_cycle;
            lv_topEnemyRegionUnitAmounts = lv_hostileAmount[lv_cycle];
        }

        lv_cycle += 1;
    }
    return lv_topEnemyRegionRegionID;
}

point gf_XenosAIGetCondutAreaPoint (unit lp_cONDUIT) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_point = UnitGetPosition(lp_cONDUIT);
    while ((UnitIsAlive(gv_sD.lv_xENOSUnit) == true) && ((PointPathingPassable(lv_point) == false) || (PointPathingIsConnected(UnitGetPosition(gv_sD.lv_xENOSUnit), lv_point) == false))) {
        lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_cONDUIT), 6.0));
        Wait(0.0625, c_timeGame);
    }
    return lv_point;
}

fixed gf_TRGetUnharvestedHarvestBeginning () {
    // Variable Declarations
    unitgroup lv_group;
    fixed lv_totalResources;
    fixed lv_return;

    // Automatic Variable Declarations
    unitgroup auto78AAFA7C_g;
    int auto78AAFA7C_u;
    unit auto78AAFA7C_var;
    unitgroup autoBC7781E9_g;
    int autoBC7781E9_u;
    unit autoBC7781E9_var;
    unitgroup auto92FD3DA2_g;
    int auto92FD3DA2_u;
    unit auto92FD3DA2_var;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    auto78AAFA7C_g = gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][0];
    auto78AAFA7C_u = UnitGroupCount(auto78AAFA7C_g, c_unitCountAll);
    for (;; auto78AAFA7C_u -= 1) {
        auto78AAFA7C_var = UnitGroupUnitFromEnd(auto78AAFA7C_g, auto78AAFA7C_u);
        if (auto78AAFA7C_var == null) { break; }
        UnitGroupAddUnitGroup(lv_group, UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(auto78AAFA7C_var), 33.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    autoBC7781E9_g = gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][1];
    autoBC7781E9_u = UnitGroupCount(autoBC7781E9_g, c_unitCountAll);
    for (;; autoBC7781E9_u -= 1) {
        autoBC7781E9_var = UnitGroupUnitFromEnd(autoBC7781E9_g, autoBC7781E9_u);
        if (autoBC7781E9_var == null) { break; }
        UnitGroupAddUnitGroup(lv_group, UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(autoBC7781E9_var), 33.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    auto92FD3DA2_g = lv_group;
    auto92FD3DA2_u = UnitGroupCount(auto92FD3DA2_g, c_unitCountAll);
    for (;; auto92FD3DA2_u -= 1) {
        auto92FD3DA2_var = UnitGroupUnitFromEnd(auto92FD3DA2_g, auto92FD3DA2_u);
        if (auto92FD3DA2_var == null) { break; }
        lv_totalResources += UnitGetPropertyFixed(auto92FD3DA2_var, c_unitPropResources, c_unitPropCurrent);
    }
    lv_return = ((lv_totalResources/gv_sD.lv_voidCrystalsperphaseatstartofthegame[gv_sD.lv_objectivePhase])*100);
    return lv_return;
}

void gf_InitalizationCreateConduitActivationTimerDialog () {
    // Variable Declarations
    int lv_item;
    int lv_panel1Image1;
    int lv_panel2;
    int lv_panel;
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = c_invalidDialogControlId;
    lv_panel1Image1 = c_invalidDialogControlId;
    lv_panel2 = c_invalidDialogControlId;
    lv_panel = c_invalidDialogControlId;

    // Implementation
    DialogCreate(400, 400, c_anchorTopRight, 20, 100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_sD.lv_dIALOGAreaRemainingAmount = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), 80, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_toastbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_panel1Image1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 20, c_anchorTop, 0, 20, StringExternal("Param/Value/807B2E5A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 20, c_anchorTop, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_item, c_anchorBottom, 0, 5);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    lv_item = DialogControlLastCreated();
    gv_sD.lv_voidConduitActivationTextLabel = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/7850F6D7", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), 500));
    libNtve_gf_SetDialogItemText(lv_item, TextExpressionAssemble("Param/Expression/7850F6D7"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), 80, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_lotv_timerpanel_frame.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_panel1Image1, c_anchorBottom, 0, 5);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_panel2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 20, c_anchorTop, 0, 20, StringExternal("Param/Value/A6E8B049"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_panel2, c_anchorTop, 0, 20);
    gv_sD.lv_dIALOGAreaRemainingAmountANCHORLABEL = DialogControlLastCreated();
    while ((lv_cycle <= 1)) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 120, 40);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_panel = DialogControlLastCreated();
        gv_sD.lv_dIALOGAreaRemainingAmountPANEL[lv_cycle] = DialogControlLastCreated();
        DialogControlCreateInPanel(lv_panel, c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\icon-mineral-nobg_TEAL.dds", PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 40, 40);
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), false, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_panel, c_anchorLeft, 0, 0);
        lv_item = DialogControlLastCreated();
        DialogControlCreateInPanel(lv_panel, c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 40);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lv_item, c_anchorRight, 0, 0);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(5), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        gv_sD.lv_dIALOGAreaRemainingAmountLABEL[lv_cycle] = DialogControlLastCreated();
        DialogControlCreateInPanel(lv_panel, c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_subpanel_protoss.dds", PlayerGroupAll());
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 510, PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_cycle += 1;
    }
    DialogControlSetPositionRelative(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[0], PlayerGroupAll(), c_anchorTopRight, gv_sD.lv_dIALOGAreaRemainingAmountANCHORLABEL, c_anchorBottom, 20, 10);
    DialogControlSetPositionRelative(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[1], PlayerGroupAll(), c_anchorTopLeft, gv_sD.lv_dIALOGAreaRemainingAmountANCHORLABEL, c_anchorBottom, 20, 10);
}

trigger auto_gf_ObjectiveBeginGameMechanics_Trigger = null;

void gf_ObjectiveBeginGameMechanics () {
    if (auto_gf_ObjectiveBeginGameMechanics_Trigger == null) {
        auto_gf_ObjectiveBeginGameMechanics_Trigger = TriggerCreate("auto_gf_ObjectiveBeginGameMechanics_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObjectiveBeginGameMechanics_Trigger, false, false);
}

bool auto_gf_ObjectiveBeginGameMechanics_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_sD.lv_objectivePhase = 1;
    gf_ObjectiveAwakenVoidConduit();
    gv_sD.lv_voidConduitActivationTime = gv_sD.lv_pRESETPhaseTime[gv_sD.lv_objectivePhase];
    gf_InitalizationCreateConduitActivationTimerDialog();
    gf_ObjectivePHASEGAMELOOPRefreshControlTimers();
    return true;
}

void gf_ObjectiveProgressGamePhase () {
    // Variable Declarations
    int lv_bonusTime;

    // Automatic Variable Declarations
    unitgroup auto7EF49217_g;
    int auto7EF49217_u;
    unit auto7EF49217_var;
    unitgroup auto534DC0BE_g;
    int auto534DC0BE_u;
    unit auto534DC0BE_var;

    // Variable Initialization

    // Implementation
    auto7EF49217_g = gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][0];
    auto7EF49217_u = UnitGroupCount(auto7EF49217_g, c_unitCountAll);
    for (;; auto7EF49217_u -= 1) {
        auto7EF49217_var = UnitGroupUnitFromEnd(auto7EF49217_g, auto7EF49217_u);
        if (auto7EF49217_var == null) { break; }
        UnitBehaviorRemove(auto7EF49217_var, "VoidConduitActivate", 1);
        UnitBehaviorRemove(auto7EF49217_var, "VoidConduitStandby", 1);
        UnitSetInfoTip(auto7EF49217_var, StringExternal("Param/Value/65D57034"));
        libCOMI_gf_ShowHideUnitProgressBar(auto7EF49217_var, false);
    }
    auto534DC0BE_g = gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][1];
    auto534DC0BE_u = UnitGroupCount(auto534DC0BE_g, c_unitCountAll);
    for (;; auto534DC0BE_u -= 1) {
        auto534DC0BE_var = UnitGroupUnitFromEnd(auto534DC0BE_g, auto534DC0BE_u);
        if (auto534DC0BE_var == null) { break; }
        UnitBehaviorRemove(auto534DC0BE_var, "VoidConduitActivate", 1);
        UnitBehaviorRemove(auto534DC0BE_var, "VoidConduitStandby", 1);
        UnitSetInfoTip(auto534DC0BE_var, StringExternal("Param/Value/2AFCDA58"));
        libCOMI_gf_ShowHideUnitProgressBar(auto534DC0BE_var, false);
    }
    lv_bonusTime = gv_sD.lv_voidConduitActivationTime;
    gv_sD.lv_spareSmallPingAmount = 0;
    gv_sD.lv_voidConduitDebtTime = 0;
    gv_sD.lv_voidConduitsAreActive = false;
    if ((gv_sD.lv_xenoReviveTimer > 2)) {
        gv_sD.lv_xenoReviveTimer /= 2;
    }

    gv_sD.lv_objectivePhase += 1;
    gv_sD.lv_currentPhaseElapsedTime = 0;
    gv_sD.lv_voidConduitActivationTime = gv_sD.lv_pRESETPhaseTime[gv_sD.lv_objectivePhase];
    gv_sD.lv_voidConduitActivationTime += lv_bonusTime;
    gv_sD.lv_pRESETPhaseTime[gv_sD.lv_objectivePhase] += lv_bonusTime;
    gf_ObjectiveAwakenVoidConduit();
    gf_ObjectivePHASEGAMELOOPRefreshControlTimers();
}

trigger auto_gf_ObjectiveAwakenVoidConduit_Trigger = null;

void gf_ObjectiveAwakenVoidConduit () {
    if (auto_gf_ObjectiveAwakenVoidConduit_Trigger == null) {
        auto_gf_ObjectiveAwakenVoidConduit_Trigger = TriggerCreate("auto_gf_ObjectiveAwakenVoidConduit_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObjectiveAwakenVoidConduit_Trigger, false, false);
}

bool auto_gf_ObjectiveAwakenVoidConduit_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_revealerID;
    revealer[11] lv_revealers;
    int lv_phase;

    // Automatic Variable Declarations
    unitgroup auto41C23EAA_g;
    int auto41C23EAA_u;
    unit auto41C23EAA_var;
    unitgroup autoA0F66B2E_g;
    int autoA0F66B2E_u;
    unit autoA0F66B2E_var;

    // Variable Initialization
    lv_phase = gv_sD.lv_objectivePhase;

    // Implementation
    auto41C23EAA_g = gv_sD.lv_voidConduitPhaseGroup[lv_phase][0];
    auto41C23EAA_u = UnitGroupCount(auto41C23EAA_g, c_unitCountAll);
    for (;; auto41C23EAA_u -= 1) {
        auto41C23EAA_var = UnitGroupUnitFromEnd(auto41C23EAA_g, auto41C23EAA_u);
        if (auto41C23EAA_var == null) { break; }
        UnitBehaviorAdd(auto41C23EAA_var, "VoidConduitStandby", auto41C23EAA_var, 1);
        VisRevealerCreate(1, RegionCircle(UnitGetPosition(auto41C23EAA_var), 4.0));
        lv_revealers[lv_revealerID] = VisRevealerLastCreated();
        lv_revealerID += 1;
    }
    autoA0F66B2E_g = gv_sD.lv_voidConduitPhaseGroup[lv_phase][1];
    autoA0F66B2E_u = UnitGroupCount(autoA0F66B2E_g, c_unitCountAll);
    for (;; autoA0F66B2E_u -= 1) {
        autoA0F66B2E_var = UnitGroupUnitFromEnd(autoA0F66B2E_g, autoA0F66B2E_u);
        if (autoA0F66B2E_var == null) { break; }
        UnitBehaviorAdd(autoA0F66B2E_var, "VoidConduitStandby", autoA0F66B2E_var, 1);
        VisRevealerCreate(1, RegionCircle(UnitGetPosition(autoA0F66B2E_var), 4.0));
        lv_revealers[lv_revealerID] = VisRevealerLastCreated();
        lv_revealerID += 1;
    }
    while (!((gv_sD.lv_objectivePhase != lv_phase))) {
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    while ((lv_revealerID > 0)) {
        lv_revealerID -= 1;
        VisRevealerDestroy(lv_revealers[lv_revealerID]);
    }
    return true;
}

trigger auto_gf_ObjectivePHASEGAMELOOPRefreshControlTimers_Trigger = null;

void gf_ObjectivePHASEGAMELOOPRefreshControlTimers () {
    if (auto_gf_ObjectivePHASEGAMELOOPRefreshControlTimers_Trigger == null) {
        auto_gf_ObjectivePHASEGAMELOOPRefreshControlTimers_Trigger = TriggerCreate("auto_gf_ObjectivePHASEGAMELOOPRefreshControlTimers_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObjectivePHASEGAMELOOPRefreshControlTimers_Trigger, false, false);
}

bool auto_gf_ObjectivePHASEGAMELOOPRefreshControlTimers_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_setPhase;
    unitgroup[2] lv_group;
    fixed lv_totalResources;
    int lv_label;
    int lv_cycle;
    int lv_segmentAmount;
    unitgroup lv_pingableIndividualFormations;
    int lv_initialPingAmount;
    bool lv_beginDisplayingAdditionalPings;
    unit lv_pingTargetUnit;
    bool lv_allPhaseAreasMinedOut;
    bool lv_voidConduitsActivated;

    // Automatic Variable Declarations
    unitgroup autoD4BA2ABA_g;
    int autoD4BA2ABA_u;
    unit autoD4BA2ABA_var;
    unitgroup auto0AADEEAD_g;
    int auto0AADEEAD_u;
    unit auto0AADEEAD_var;
    unitgroup auto203D6CE5_g;
    int auto203D6CE5_u;
    unit auto203D6CE5_var;
    unitgroup autoAB53F97A_g;
    int autoAB53F97A_u;
    unit autoAB53F97A_var;
    unitgroup autoD0711DAC_g;
    int autoD0711DAC_u;
    unit autoD0711DAC_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_group[init_i] = UnitGroupEmpty();
    }
    lv_segmentAmount = 1;
    lv_pingableIndividualFormations = UnitGroupEmpty();

    // Implementation
    lv_setPhase = gv_sD.lv_objectivePhase;
    DialogControlSetVisible(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[1], PlayerGroupAll(), false);
    if ((UnitGroupCount(gv_sD.lv_voidConduitPhaseGroup[lv_setPhase][1], c_unitCountAlive) > 0)) {
        lv_segmentAmount = 2;
        DialogControlSetPositionRelative(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[0], PlayerGroupAll(), c_anchorTopRight, gv_sD.lv_dIALOGAreaRemainingAmountANCHORLABEL, c_anchorBottom, 20, 10);
        DialogControlSetPositionRelative(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[1], PlayerGroupAll(), c_anchorTopLeft, gv_sD.lv_dIALOGAreaRemainingAmountANCHORLABEL, c_anchorBottom, 20, 10);
        DialogControlSetVisible(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[1], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[0], PlayerGroupAll(), true);
        auto0AADEEAD_g = gv_sD.lv_voidConduitPhaseGroup[lv_setPhase][0];
        auto0AADEEAD_u = UnitGroupCount(auto0AADEEAD_g, c_unitCountAll);
        for (;; auto0AADEEAD_u -= 1) {
            auto0AADEEAD_var = UnitGroupUnitFromEnd(auto0AADEEAD_g, auto0AADEEAD_u);
            if (auto0AADEEAD_var == null) { break; }
            UnitGroupAddUnitGroup(lv_group[0], UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(auto0AADEEAD_var), 33.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        auto203D6CE5_g = gv_sD.lv_voidConduitPhaseGroup[lv_setPhase][1];
        auto203D6CE5_u = UnitGroupCount(auto203D6CE5_g, c_unitCountAll);
        for (;; auto203D6CE5_u -= 1) {
            auto203D6CE5_var = UnitGroupUnitFromEnd(auto203D6CE5_g, auto203D6CE5_u);
            if (auto203D6CE5_var == null) { break; }
            UnitGroupAddUnitGroup(lv_group[1], UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(auto203D6CE5_var), 33.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
    }
    else {
        DialogControlSetPositionRelative(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[0], PlayerGroupAll(), c_anchorTop, gv_sD.lv_dIALOGAreaRemainingAmountANCHORLABEL, c_anchorBottom, 0, 10);
        DialogControlSetVisible(gv_sD.lv_dIALOGAreaRemainingAmountPANEL[0], PlayerGroupAll(), true);
        autoD4BA2ABA_g = gv_sD.lv_voidConduitPhaseGroup[lv_setPhase][0];
        autoD4BA2ABA_u = UnitGroupCount(autoD4BA2ABA_g, c_unitCountAll);
        for (;; autoD4BA2ABA_u -= 1) {
            autoD4BA2ABA_var = UnitGroupUnitFromEnd(autoD4BA2ABA_g, autoD4BA2ABA_u);
            if (autoD4BA2ABA_var == null) { break; }
            UnitGroupAddUnitGroup(lv_group[0], UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(autoD4BA2ABA_var), 33.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
    }
    lv_cycle = 0;
    while ((lv_cycle <= 40)) {
        if ((gv_sD.lv_clusterGroupsPhaseAssignments[lv_cycle] == lv_setPhase) && (UnitGroupCount(gv_sD.lv_clusterGroups[lv_cycle], c_unitCountAlive) > 0)) {
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", UnitGroupCenterOfGroup(gv_sD.lv_clusterGroups[lv_cycle]), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.8);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C920FD75"));
            gv_sD.lv_clusterPings[lv_cycle] = PingLastCreated();
            lv_initialPingAmount += 1;
        }

        lv_cycle += 1;
    }
    while ((gv_sD.lv_objectivePhase == lv_setPhase)) {
        gv_sD.lv_currentPhaseElapsedTime += 1;
        gv_sD.lv_xenoReviveTimer -= 1;
        if ((lv_allPhaseAreasMinedOut == false)) {
            if ((gv_sD.lv_voidConduitActivationTime > 0)) {
                TextExpressionSetToken("Param/Expression/1F84B269", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), gv_sD.lv_voidConduitActivationTime));
                libNtve_gf_SetDialogItemText(gv_sD.lv_voidConduitActivationTextLabel, TextExpressionAssemble("Param/Expression/1F84B269"), PlayerGroupAll());
                gv_sD.lv_voidConduitActivationTime -= 1;
            }
            else {
                TextExpressionSetToken("Param/Expression/D3456FE6", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), gv_sD.lv_voidConduitActivationTime));
                libNtve_gf_SetDialogItemText(gv_sD.lv_voidConduitActivationTextLabel, TextExpressionAssemble("Param/Expression/D3456FE6"), PlayerGroupAll());
                gv_sD.lv_voidConduitDebtTime += 1;
            }
        }

        lv_cycle = 0;
        while ((lv_cycle <= 40)) {
            if ((gv_sD.lv_clusterGroupsPhaseAssignments[lv_cycle] == lv_setPhase) && (UnitGroupCount(gv_sD.lv_clusterGroups[lv_cycle], c_unitCountAlive) == 0)) {
                gv_sD.lv_clusterGroupsPhaseAssignments[lv_cycle] = 0;
                PingDestroy(gv_sD.lv_clusterPings[lv_cycle]);
                gv_sD.lv_clusterPings[lv_cycle] = c_invalidPingId;
                gv_sD.lv_spareSmallPingAmount += 1;
            }

            lv_cycle += 1;
        }
        if ((gv_sD.lv_spareSmallPingAmount >= (lv_initialPingAmount/2)) && (lv_beginDisplayingAdditionalPings == false)) {
            lv_beginDisplayingAdditionalPings = true;
        }

        UnitGroupAddUnitGroup(lv_pingableIndividualFormations, lv_group[0]);
        UnitGroupAddUnitGroup(lv_pingableIndividualFormations, lv_group[1]);
        UnitGroupRemoveUnitGroup(lv_pingableIndividualFormations, gv_sD.lv_clusterGroups[0]);
        while ((lv_beginDisplayingAdditionalPings == true) && (gv_sD.lv_spareSmallPingAmount > 0) && (UnitGroupCount(lv_pingableIndividualFormations, c_unitCountAlive) > 0)) {
            lv_pingTargetUnit = UnitGroupRandomUnit(lv_pingableIndividualFormations, c_unitCountAlive);
            UnitGroupRemove(lv_pingableIndividualFormations, lv_pingTargetUnit);
            UnitGroupAdd(gv_sD.lv_clusterGroups[0], lv_pingTargetUnit);
            libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", UnitGetPosition(lv_pingTargetUnit), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), 0.6);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C9D68A34"));
            libARRA_gf_StorePingForUnit(lv_pingTargetUnit, 1, PingLastCreated());
            gv_sD.lv_spareSmallPingAmount -= 1;
        }
        if ((UnitGroupCount(lv_group[0], c_unitCountAlive) == 0) && (UnitGroupCount(lv_group[1], c_unitCountAlive) == 0) && (lv_allPhaseAreasMinedOut == false)) {
            lv_allPhaseAreasMinedOut = true;
            gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION();
        }

        if ((gv_sD.lv_voidConduitActivationTime <= 0) && (lv_voidConduitsActivated == false)) {
            lv_voidConduitsActivated = true;
            gf_PHASEEVENTActivatingConduits();
        }

        lv_totalResources = 0.0;
        autoAB53F97A_g = lv_group[0];
        autoAB53F97A_u = UnitGroupCount(autoAB53F97A_g, c_unitCountAll);
        for (;; autoAB53F97A_u -= 1) {
            autoAB53F97A_var = UnitGroupUnitFromEnd(autoAB53F97A_g, autoAB53F97A_u);
            if (autoAB53F97A_var == null) { break; }
            lv_totalResources += UnitGetPropertyFixed(autoAB53F97A_var, c_unitPropResources, c_unitPropCurrent);
        }
        TextExpressionSetToken("Param/Expression/13B95290", "A", FixedToText(lv_totalResources, 0));
        libNtve_gf_SetDialogItemText(gv_sD.lv_dIALOGAreaRemainingAmountLABEL[0], TextExpressionAssemble("Param/Expression/13B95290"), PlayerGroupAll());
        if ((lv_segmentAmount > 1)) {
            lv_totalResources = 0.0;
            autoD0711DAC_g = lv_group[1];
            autoD0711DAC_u = UnitGroupCount(autoD0711DAC_g, c_unitCountAll);
            for (;; autoD0711DAC_u -= 1) {
                autoD0711DAC_var = UnitGroupUnitFromEnd(autoD0711DAC_g, autoD0711DAC_u);
                if (autoD0711DAC_var == null) { break; }
                lv_totalResources += UnitGetPropertyFixed(autoD0711DAC_var, c_unitPropResources, c_unitPropCurrent);
            }
            TextExpressionSetToken("Param/Expression/085A3AD2", "A", FixedToText(lv_totalResources, 0));
            libNtve_gf_SetDialogItemText(gv_sD.lv_dIALOGAreaRemainingAmountLABEL[1], TextExpressionAssemble("Param/Expression/085A3AD2"), PlayerGroupAll());
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

void gf_ObjectiveVoidConduitBeginHarvest () {
    // Automatic Variable Declarations
    unitgroup auto9DD3B565_g;
    int auto9DD3B565_u;
    unit auto9DD3B565_var;
    unitgroup auto7340A06D_g;
    int auto7340A06D_u;
    unit auto7340A06D_var;

    // Implementation
    auto9DD3B565_g = gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][0];
    auto9DD3B565_u = UnitGroupCount(auto9DD3B565_g, c_unitCountAll);
    for (;; auto9DD3B565_u -= 1) {
        auto9DD3B565_var = UnitGroupUnitFromEnd(auto9DD3B565_g, auto9DD3B565_u);
        if (auto9DD3B565_var == null) { break; }
        UnitBehaviorAdd(auto9DD3B565_var, "VoidConduitActivate", auto9DD3B565_var, 1);
    }
    auto7340A06D_g = gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][1];
    auto7340A06D_u = UnitGroupCount(auto7340A06D_g, c_unitCountAll);
    for (;; auto7340A06D_u -= 1) {
        auto7340A06D_var = UnitGroupUnitFromEnd(auto7340A06D_g, auto7340A06D_u);
        if (auto7340A06D_var == null) { break; }
        UnitBehaviorAdd(auto7340A06D_var, "VoidConduitActivate", auto7340A06D_var, 1);
    }
}

trigger auto_gf_PHASEEVENTActivatingConduits_Trigger = null;

void gf_PHASEEVENTActivatingConduits () {
    if (auto_gf_PHASEEVENTActivatingConduits_Trigger == null) {
        auto_gf_PHASEEVENTActivatingConduits_Trigger = TriggerCreate("auto_gf_PHASEEVENTActivatingConduits_TriggerFunc");
    }

    TriggerExecute(auto_gf_PHASEEVENTActivatingConduits_Trigger, false, false);
}

bool auto_gf_PHASEEVENTActivatingConduits_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    gf_DISPLAYDEBUGMESSAGE(StringExternal("Param/Value/4D526303"));
    gf_ObjectiveVoidConduitBeginHarvest();
    gv_sD.lv_voidConduitsAreActive = true;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TriggerExecute(gt_TRHarvestActivation, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

trigger auto_gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION_Trigger = null;

void gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION () {
    if (auto_gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION_Trigger == null) {
        auto_gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION_Trigger = TriggerCreate("auto_gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION_TriggerFunc");
    }

    TriggerExecute(auto_gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION_Trigger, false, false);
}

bool auto_gf_PHASEEVENTMINEDOUTNEXTPHASETRANSITION_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    gf_DISPLAYDEBUGMESSAGE(TextExpressionAssemble("Param/Expression/7B9D502F"));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TriggerExecute(gt_TRHarvestClear, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    gf_ObjectiveProgressGamePhase();
    TriggerQueueExit();
    return true;
}

trigger auto_gf_ObjectiveProtectVoidElementalCREATEREFRESH_Trigger = null;

void gf_ObjectiveProtectVoidElementalCREATEREFRESH () {
    if (auto_gf_ObjectiveProtectVoidElementalCREATEREFRESH_Trigger == null) {
        auto_gf_ObjectiveProtectVoidElementalCREATEREFRESH_Trigger = TriggerCreate("auto_gf_ObjectiveProtectVoidElementalCREATEREFRESH_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObjectiveProtectVoidElementalCREATEREFRESH_Trigger, false, false);
}

bool auto_gf_ObjectiveProtectVoidElementalCREATEREFRESH_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_sD.lv_eLEMENTALEventTimer = (6*60);
    libCOMI_gf_CreateObjectiveCampaign("HarvestProtectVoidElemental");
    ObjectiveSetPrimary(ObjectiveLastCreated(), false);
    libCOMI_gf_SetObjectiveRequiredCountCampaign("HarvestProtectVoidElemental", 1);
    gv_sD.lv_objectiveProtectVoidElemental = ObjectiveLastCreated();
    Wait(5.0, c_timeGame);
    while ((UnitIsAlive(gv_sD.lv_eLEMENTALUnit) == true) && (gv_sD.lv_eLEMENTALEventTimer > 0)) {
        Wait(1.0, c_timeGame);
        gv_sD.lv_eLEMENTALEventTimer -= 1;
        TextExpressionSetToken("Param/Expression/0D9FB075", "DepartTimer", libCOMI_gf_FormatTimeCampaign(FixedToInt(gv_sD.lv_eLEMENTALEventTimer)));
        libCOMI_gf_SetMissionObjectiveCustomText("HarvestProtectVoidElemental", TextExpressionAssemble("Param/Expression/0D9FB075"));
    }
    return true;
}

fixed gf_GetWaveTimeStartOffset (int lp_waveNum) {
    // Variable Declarations
    fixed lv_speed;
    fixed lv_minSpeed;
    fixed lv_combinedDistanceLeft;
    fixed lv_combinedDistanceRight;
    fixed lv_timetoreachviaLeft;
    fixed lv_timetoreachviaRight;
    fixed lv_timeWindow;

    // Automatic Variable Declarations
    int autoF37D1460_val;
    unitgroup auto8DC36871_g;
    int auto8DC36871_u;
    unit auto8DC36871_var;

    // Variable Initialization

    // Implementation
    autoF37D1460_val = lp_waveNum;
    if (autoF37D1460_val == 1) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, PointFromId(708), true);
    }
    else if (autoF37D1460_val == 2) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(708), true);
    }
    else if (autoF37D1460_val == 3) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(708), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(708), true);
    }
    lv_minSpeed = UnitGetPropertyFixed(UnitGroupUnit(libCOMI_gf_LastCreatedCoopAttackForce(), 1), c_unitPropMovementSpeed, c_unitPropNormal);
    auto8DC36871_g = libCOMI_gf_LastCreatedCoopAttackForce();
    auto8DC36871_u = UnitGroupCount(auto8DC36871_g, c_unitCountAll);
    for (;; auto8DC36871_u -= 1) {
        auto8DC36871_var = UnitGroupUnitFromEnd(auto8DC36871_g, auto8DC36871_u);
        if (auto8DC36871_var == null) { break; }
        lv_speed = UnitGetPropertyFixed(auto8DC36871_var, c_unitPropMovementSpeed, c_unitPropNormal);
        lv_minSpeed = MinF(lv_minSpeed, lv_speed);
        UnitRemove(auto8DC36871_var);
    }
    lv_combinedDistanceLeft += DistanceBetweenPoints(PointFromId(708), PointFromId(1018157068));
    lv_combinedDistanceLeft += DistanceBetweenPoints(PointFromId(1018157068), PointFromId(575023711));
    lv_combinedDistanceLeft += DistanceBetweenPoints(PointFromId(575023711), PointFromId(709812543));
    lv_combinedDistanceRight += DistanceBetweenPoints(PointFromId(710), PointFromId(1329782654));
    lv_combinedDistanceRight += DistanceBetweenPoints(PointFromId(1329782654), PointFromId(709812543));
    lv_timetoreachviaLeft = (lv_combinedDistanceLeft/lv_minSpeed);
    lv_timetoreachviaRight = (lv_combinedDistanceRight/lv_minSpeed);
    lv_timeWindow = (lv_timetoreachviaLeft-lv_timetoreachviaRight);
    lv_timeWindow = (lv_timeWindow*0.8);
    return lv_timeWindow;
}

void gf_RunAttackWave (int lp_pRESUMEDSPAWNPLAYER) {
    // Automatic Variable Declarations
    // Implementation
    gv_sD.lv_attackWaveNum += 1;
    if (((gv_sD.lv_objectivePhase == 0) || (gv_sD.lv_objectivePhase == 1))) {
        gf_AttackWaveTemplatePhase1(lp_pRESUMEDSPAWNPLAYER);
    }

    if ((gv_sD.lv_objectivePhase == 2)) {
        gf_AttackWaveTemplatePhase2();
    }

    if ((gv_sD.lv_objectivePhase == 3)) {
        gf_AttackWaveTemplatePhase3();
    }

    if ((gv_sD.lv_objectivePhase == 4)) {
        gf_AttackWaveTemplatePhase4();
    }

}

void gf_AttackWaveTemplatePhase1 (int lp_pRESUMEDSPAWNPLAYER) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawn;
    point[6] lv_waypoints;
    int lv_cycle;
    int lv_sPAWNPLAYER;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Implementation
    if (((gv_sD.lv_pRESETGAMEDIFFICULTY == 1) || (gv_sD.lv_pRESETGAMEDIFFICULTY == 2))) {
        return ;
    }

    lv_resourceBucket = gf_GetResourceBucket();
    lv_techBucket = gf_GetTechBucket(false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    if ((lp_pRESUMEDSPAWNPLAYER != 0)) {
        lv_sPAWNPLAYER = lp_pRESUMEDSPAWNPLAYER;
    }
    else {
        lv_sPAWNPLAYER = RandomInt(1, 2);
    }
    if ((lv_sPAWNPLAYER == 1)) {
        lv_attackWaveSpawn = PointFromId(708);
        lv_waypoints[0] = PointFromId(1018157068);
        lv_waypoints[1] = PointFromId(575023711);
        lv_waypoints[2] = PointFromId(709812543);
    }
    else {
        lv_attackWaveSpawn = PointFromId(710);
        lv_waypoints[0] = PointFromId(1329782654);
        lv_waypoints[1] = PointFromId(709812543);
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawn, true);
    while ((lv_cycle <= 5)) {
        if ((lv_waypoints[lv_cycle] != null)) {
            libCOMI_gf_AddAttackForceWaypoint(lv_waypoints[lv_cycle], false);
        }

        lv_cycle += 1;
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
}

void gf_AttackWaveTemplatePhase2 () {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawn;
    point[6] lv_waypoints;
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Implementation
    lv_resourceBucket = gf_GetResourceBucket();
    lv_techBucket = gf_GetTechBucket(false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    if ((RandomInt(1, 2) == 1)) {
        lv_attackWaveSpawn = PointFromId(708);
        lv_waypoints[0] = PointFromId(1520719998);
        lv_waypoints[1] = PointFromId(2132078137);
        lv_waypoints[2] = PointFromId(358);
    }
    else {
        lv_attackWaveSpawn = PointFromId(710);
        lv_waypoints[0] = PointFromId(1494865543);
        lv_waypoints[1] = PointFromId(2132078137);
        lv_waypoints[2] = PointFromId(367);
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawn, true);
    while ((lv_cycle <= 5)) {
        if ((lv_waypoints[lv_cycle] != null)) {
            libCOMI_gf_AddAttackForceWaypoint(lv_waypoints[lv_cycle], false);
        }

        lv_cycle += 1;
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
}

void gf_AttackWaveTemplatePhase3 () {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawn;
    point[6] lv_waypoints;
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Implementation
    lv_resourceBucket = gf_GetResourceBucket();
    lv_techBucket = gf_GetTechBucket(false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    if ((RandomInt(1, 2) == 1)) {
        lv_attackWaveSpawn = PointFromId(708);
        lv_waypoints[0] = PointFromId(957277660);
        lv_waypoints[1] = PointFromId(511874442);
        lv_waypoints[2] = PointFromId(208979877);
        lv_waypoints[3] = PointFromId(354995671);
        lv_waypoints[4] = PointFromId(2132078137);
        lv_waypoints[5] = PointFromId(358);
    }
    else {
        lv_attackWaveSpawn = PointFromId(710);
        lv_waypoints[0] = PointFromId(208979877);
        lv_waypoints[1] = PointFromId(511874442);
        lv_waypoints[2] = PointFromId(957277660);
        lv_waypoints[3] = PointFromId(2132078137);
        lv_waypoints[4] = PointFromId(367);
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, lv_attackWaveSpawn, true);
    while ((lv_cycle <= 5)) {
        if ((lv_waypoints[lv_cycle] != null)) {
            libCOMI_gf_AddAttackForceWaypoint(lv_waypoints[lv_cycle], false);
        }

        lv_cycle += 1;
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
}

void gf_AttackWaveTemplatePhase4 () {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackWaveSpawn;
    point[6] lv_waypoints;
    int lv_cycle;
    unitgroup lv_globalAttackForce;
    string lv_hybridGreather;
    string lv_hybridLesser;
    int[2] lv_loopPlayer;
    point[2] lv_loopPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_globalAttackForce = UnitGroupEmpty();

    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        lv_hybridGreather = "HybridBehemoth";
        lv_hybridLesser = "HybridReaver";
    }
    else {
        lv_hybridGreather = "HybridDominatorVoid";
        lv_hybridLesser = "HybridDestroyer";
    }
    lv_resourceBucket = gf_GetResourceBucket();
    lv_techBucket = gf_GetTechBucket(false);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    lv_loopPlayer[0] = gv_pLAYER_03_ENEMY;
    lv_loopPlayer[1] = gv_pLAYER_04_ENEMY;
    lv_loopPoint[0] = PointFromId(708);
    lv_loopPoint[1] = PointFromId(710);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(708), true);
    UnitGroupAddUnitGroup(lv_globalAttackForce, libCOMI_gf_LastCreatedCoopAttackForce());
    if ((gv_sD.lv_pRESETGAMEDIFFICULTY != 4)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, c_playerAny, lv_resourceBucket, gf_GetTechBucket(true), PointFromId(708), true);
        UnitGroupAddUnitGroup(lv_globalAttackForce, libCOMI_gf_LastCreatedCoopAttackForce());
    }

    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_ENEMY, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(710), true);
    UnitGroupAddUnitGroup(lv_globalAttackForce, libCOMI_gf_LastCreatedCoopAttackForce());
    if ((gv_sD.lv_pRESETGAMEDIFFICULTY != 4)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_ENEMY, c_playerAny, lv_resourceBucket, gf_GetTechBucket(true), PointFromId(710), true);
        UnitGroupAddUnitGroup(lv_globalAttackForce, libCOMI_gf_LastCreatedCoopAttackForce());
    }

    lv_cycle = 0;
    while ((lv_cycle <= 1)) {
        if ((gv_sD.lv_attackWaveNum > 7)) {
            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 1, 0, 0), lv_hybridLesser, 0, lv_loopPlayer[lv_cycle], lv_loopPoint[lv_cycle], 270.0);
            AIAttackWaveUseGroup(lv_loopPlayer[lv_cycle], UnitLastCreatedGroup());
            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 0, 1, 0, 0), lv_hybridGreather, 0, lv_loopPlayer[lv_cycle], lv_loopPoint[lv_cycle], 270.0);
            AIAttackWaveUseGroup(lv_loopPlayer[lv_cycle], UnitLastCreatedGroup());
            if ((gv_sD.lv_attackWaveNum > 8)) {
                UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 2, 0, 0), "HybridNemesis", 0, lv_loopPlayer[lv_cycle], lv_loopPoint[lv_cycle], 270.0);
                AIAttackWaveUseGroup(lv_loopPlayer[lv_cycle], UnitLastCreatedGroup());
                if ((gv_sD.lv_attackWaveNum > 9)) {
                    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 2, 0, 0), "HybridNemesis", 0, lv_loopPlayer[lv_cycle], lv_loopPoint[lv_cycle], 270.0);
                    AIAttackWaveUseGroup(lv_loopPlayer[lv_cycle], UnitLastCreatedGroup());
                    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 0, 0, 0, 0), lv_hybridLesser, 0, lv_loopPlayer[lv_cycle], lv_loopPoint[lv_cycle], 270.0);
                    AIAttackWaveUseGroup(lv_loopPlayer[lv_cycle], UnitLastCreatedGroup());
                    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 0, 0, 0), lv_hybridGreather, 0, lv_loopPlayer[lv_cycle], lv_loopPoint[lv_cycle], 270.0);
                    AIAttackWaveUseGroup(lv_loopPlayer[lv_cycle], UnitLastCreatedGroup());
                }

            }

        }

        lv_cycle += 1;
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1817805932), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(93035015), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(263979213), false);
    if ((RandomInt(0, 1) == 1)) {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(358), false);
    }
    else {
        libCOMI_gf_AddAttackForceWaypoint(PointFromId(367), false);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_globalAttackForce, 0, true);
}

int gf_GetTechBucket (bool lp_sub) {
    // Variable Declarations
    int lv_techBucket;
    int lv_techSubBucket;

    // Automatic Variable Declarations
    int auto578DD985_val;

    // Variable Initialization
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Implementation
    auto578DD985_val = gv_sD.lv_attackWaveNum;
    if (auto578DD985_val == 1) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (auto578DD985_val == 2) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (auto578DD985_val == 3) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto578DD985_val == 4) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto578DD985_val == 5) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (auto578DD985_val == 6) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (auto578DD985_val == 7) {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else {
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        lv_techSubBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    if ((lp_sub == false)) {
        return lv_techBucket;
    }
    else {
        return lv_techSubBucket;
    }
}

int gf_GetResourceBucket () {
    // Variable Declarations
    int lv_resourceBucket;

    // Automatic Variable Declarations
    int auto0BC399D9_val;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;

    // Implementation
    auto0BC399D9_val = gv_sD.lv_attackWaveNum;
    if (auto0BC399D9_val == 1) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
    else if (auto0BC399D9_val == 2) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    }
    else if (auto0BC399D9_val == 3) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    }
    else if (auto0BC399D9_val == 4) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    }
    else if (auto0BC399D9_val == 5) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    }
    else if (auto0BC399D9_val == 6) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    }
    else if (auto0BC399D9_val == 7) {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    }
    else {
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    }
    return lv_resourceBucket;
}

trigger auto_gf_RunAttackWaveatMissionTimeNormal_Trigger = null;
fixed auto_gf_RunAttackWaveatMissionTimeNormal_lp_time;

void gf_RunAttackWaveatMissionTimeNormal (fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTimeNormal_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTimeNormal_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTimeNormal_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTimeNormal_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTimeNormal_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTimeNormal_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_RunAttackWaveatMissionTimeNormal_lp_time;

    // Variable Declarations
    int lv_currentWaveID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_assignedWavenum += 1;
    lv_currentWaveID = gv_assignedWavenum;
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        gf_RunAttackWave(0);
    }

    return true;
}

trigger auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_Trigger = null;
int auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_lp_untitledParameter001;
fixed auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_lp_time;

void gf_RunAttackWaveatMissionTimePossibleLaunchOffset (int lp_untitledParameter001, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_lp_untitledParameter001 = lp_untitledParameter001;
    auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_TriggerFunc (bool testConds, bool runActions) {
    int lp_untitledParameter001 = auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_lp_untitledParameter001;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTimePossibleLaunchOffset_lp_time;

    // Variable Declarations
    int lv_launchPlayer;
    fixed lv_launchTimeOffset;
    int lv_currentWaveID;
    fixed lv_finalTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_finalTime = lp_time;

    // Implementation
    gv_assignedWavenum += 1;
    lv_currentWaveID = gv_assignedWavenum;
    lv_launchPlayer = RandomInt(1, 2);
    if ((lv_launchPlayer == 1)) {
        lv_launchTimeOffset = gf_GetWaveTimeStartOffset(lv_currentWaveID);
        lv_finalTime -= lv_launchTimeOffset;
        lv_finalTime = MaxF(90.0, lv_finalTime);
    }

    while (!((lv_finalTime <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        gf_RunAttackWave(lv_launchPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_diffMarkers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_diffMarkers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08DifficultiesFinal, true, false);
    TriggerExecute(gt_Init09VoidConduitsInitilizeAreaClustersDataINITALIZATION, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto617B8BC4_g;
    int auto617B8BC4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto617B8BC4_g = libCOMI_gf_GetAlliesPlayers();
    auto617B8BC4_var = -1;
    while (true) {
        auto617B8BC4_var = PlayerGroupNextPlayer(auto617B8BC4_g, auto617B8BC4_var);
        if (auto617B8BC4_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto617B8BC4_var, "GameMineralTip", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(528414728), true);
    UnitSetState(UnitFromId(528414728), c_unitStateCursorable, false);
    UnitSetState(UnitFromId(528414728), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(528414728), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(528414728), c_unitStateStatusBar, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties/Final
//--------------------------------------------------------------------------------------------------
bool gt_Init08DifficultiesFinal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    fixed lv_xenosCooldownFactor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_xenosCooldownFactor = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sD.lv_pRESETPhaseTime[1] = (60*6);
    gv_sD.lv_pRESETPhaseTime[2] = (60*7);
    gv_sD.lv_pRESETPhaseTime[3] = (60*8);
    gv_sD.lv_pRESETPhaseTime[4] = (60*9);
    CatalogFieldValueModify(c_gameCatalogAbil, "XenosMonochromeWave", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", 1, FixedToString(lv_xenosCooldownFactor, 0), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogAbil, "XenosMonochromeVeil", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", 1, FixedToString(lv_xenosCooldownFactor, 0), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogAbil, "XenosMonochromeVeil", "Cost[" + IntToString(0) + "].Charge.TimeUse", 1, FixedToString(lv_xenosCooldownFactor, 0), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogAbil, "XenosMonochromeWall", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", 1, FixedToString(lv_xenosCooldownFactor, 0), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogAbil, "XenosDarkStardust", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", 1, FixedToString(lv_xenosCooldownFactor, 0), c_upgradeOperationMultiply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08DifficultiesFinal_Init () {
    gt_Init08DifficultiesFinal = TriggerCreate("gt_Init08DifficultiesFinal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;

    // Automatic Variable Declarations
    int auto59E32155_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveGatherVoidResourceCREATE, true, true);
    TriggerExecute(gt_ObjectiveDenyAmonResourceCREATE, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto59E32155_val = RandomInt(1, 3);
    if (auto59E32155_val == 1) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/46D9E419"), StringExternal("Param/Value/22F61BD6"), 6.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/052F1A87"), StringExternal("Param/Value/DA7FDC6E"), 8.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        Wait(6.0, c_timeReal);
    }
    else {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/629470C3"), StringExternal("Param/Value/10F64C25"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/AB139B73"), StringExternal("Param/Value/E9C0F9D8"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(30.0, c_timeReal);
    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/4FC967D0"), StringExternal("Param/Value/90F629C8"), 9.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_ObjectiveBeginGameMechanics();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 09 Void Conduits - Initilize Area/Clusters Data (INITALIZATION)
//--------------------------------------------------------------------------------------------------
bool gt_Init09VoidConduitsInitilizeAreaClustersDataINITALIZATION_Func (bool testConds, bool runActions) {
    int init_i;
    int init_j;

    // Variable Declarations
    int lv_phaseID;
    int lv_phaseAmount;
    unit lv_conduit;
    unitgroup lv_randomCluster;
    unitgroup lv_temp;
    unitgroup lv_combined;
    int lv_int;
    unitgroup lv_absorbableMinerals;
    unitgroup[gv_mAXGAMEPHASES + 1][2] lv_phaseScatterAddMinerals;
    int[gv_mAXGAMEPHASES + 1][2] lv_pARAMClustersResourceBank;
    int[gv_mAXGAMEPHASES + 1][2] lv_pARAMScatterResourceBank;
    int lv_pARAMNonAbsorbableBank;
    unitgroup lv_nonAbsorbableMinerals;

    // Automatic Variable Declarations
    unitgroup autoFBC38E25_g;
    int autoFBC38E25_u;
    unit autoFBC38E25_var;
    unitgroup autoB03CE4F6_g;
    int autoB03CE4F6_u;
    unit autoB03CE4F6_var;
    unitgroup autoC7AF4185_g;
    int autoC7AF4185_u;
    unitgroup autoB10BBF2D_g;
    int autoB10BBF2D_u;
    unit autoB10BBF2D_var;
    unitgroup auto40CA01EF_g;
    int auto40CA01EF_u;
    unitgroup autoBA1190B6_g;
    int autoBA1190B6_u;
    unit autoBA1190B6_var;
    unitgroup auto8EB91ADF_g;
    int auto8EB91ADF_u;
    unitgroup auto6CC23AE7_g;
    int auto6CC23AE7_u;
    unit auto6CC23AE7_var;

    // Variable Initialization
    lv_randomCluster = UnitGroupEmpty();
    lv_temp = UnitGroupEmpty();
    lv_combined = UnitGroupEmpty();
    lv_absorbableMinerals = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_mAXGAMEPHASES; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lv_phaseScatterAddMinerals[init_i][init_j] = UnitGroupEmpty();
        }
    }
    lv_nonAbsorbableMinerals = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pARAMClustersResourceBank[1][0] = 600;
    lv_pARAMClustersResourceBank[2][0] = 750;
    lv_pARAMClustersResourceBank[2][1] = 750;
    lv_pARAMClustersResourceBank[3][0] = 2400;
    lv_pARAMClustersResourceBank[4][0] = 4550;
    lv_pARAMScatterResourceBank[1][0] = 100;
    lv_pARAMScatterResourceBank[2][0] = 100;
    lv_pARAMScatterResourceBank[2][1] = 100;
    lv_pARAMScatterResourceBank[3][0] = 650;
    lv_pARAMNonAbsorbableBank = 1000;
    autoFBC38E25_g = UnitGroup("VoidMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFBC38E25_u = UnitGroupCount(autoFBC38E25_g, c_unitCountAll);
    for (;; autoFBC38E25_u -= 1) {
        autoFBC38E25_var = UnitGroupUnitFromEnd(autoFBC38E25_g, autoFBC38E25_u);
        if (autoFBC38E25_var == null) { break; }
        RegionAddCircle(RegionFromId(10), true, UnitGetPosition(autoFBC38E25_var), 2.5);
    }
    autoB03CE4F6_g = UnitGroup("VoidConduit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB03CE4F6_u = UnitGroupCount(autoB03CE4F6_g, c_unitCountAll);
    for (;; autoB03CE4F6_u -= 1) {
        autoB03CE4F6_var = UnitGroupUnitFromEnd(autoB03CE4F6_g, autoB03CE4F6_u);
        if (autoB03CE4F6_var == null) { break; }
        libCOMI_gf_DisplayUnitProgressBar(autoB03CE4F6_var, StringExternal("Param/Value/882FD67A"), 0, 1);
        libCOMI_gf_ShowHideUnitProgressBar(autoB03CE4F6_var, false);
    }
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[1][0], UnitFromId(845201277));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[2][0], UnitFromId(840617384));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[2][1], UnitFromId(1894432035));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[3][0], UnitFromId(606931698));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[3][0], UnitFromId(1037448478));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[3][0], UnitFromId(1943620529));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[4][0], UnitFromId(85819819));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[4][0], UnitFromId(753875857));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[4][0], UnitFromId(2147247337));
    UnitGroupAdd(gv_sD.lv_voidConduitPhaseGroup[4][0], UnitFromId(823537480));
    lv_phaseID = 1;
    lv_phaseAmount = (lv_pARAMClustersResourceBank[lv_phaseID][0]/4);
    lv_phaseAmount = 150;
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1370725935)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1717168571)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(726941444)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(622773043)), lv_phaseAmount, lv_phaseID);
    lv_phaseID = 2;
    lv_phaseAmount = (lv_pARAMClustersResourceBank[lv_phaseID][0]/5);
    lv_phaseAmount = 150;
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1044589086)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(815742673)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1645408764)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1962210902)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(486385366)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(2029362521)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1094535007)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1858893395)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1620630260)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(189552784)), lv_phaseAmount, lv_phaseID);
    lv_phaseID = 3;
    lv_phaseAmount = (lv_pARAMClustersResourceBank[lv_phaseID][0]/8);
    lv_phaseAmount = 300;
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1148165071)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeClusterRegion(RegionFromId(12), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeClusterRegion(RegionFromId(20), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeClusterRegion(RegionFromId(15), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeClusterRegion(RegionFromId(19), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeClusterRegion(RegionFromId(16), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeClusterRegion(RegionFromId(18), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeClusterRegion(RegionFromId(17), lv_phaseAmount, lv_phaseID);
    lv_phaseID = 4;
    lv_phaseAmount = (lv_pARAMClustersResourceBank[lv_phaseID][0]/13);
    lv_phaseAmount = 350;
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(139338807)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(886148545)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(363190663)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1108149396)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1186567288)), lv_phaseAmount, lv_phaseID);
    lv_phaseAmount = (350+(gv_sD.lv_aMONVoidWinAmount/3));
    lv_int = (gv_sD.lv_aMONVoidWinAmount-((gv_sD.lv_aMONVoidWinAmount/3)*3));
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1454623493)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(741991874)), (lv_phaseAmount+lv_int), lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(958984248)), lv_phaseAmount, lv_phaseID);
    lv_phaseAmount = 350;
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(388575238)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1509382105)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(354293125)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(853216590)), lv_phaseAmount, lv_phaseID);
    gf_VoidMineralFieldNormalizeCluster(UnitGetPosition(UnitFromId(1038185202)), lv_phaseAmount, lv_phaseID);
    lv_phaseID = 1;
    while ((lv_phaseID <= gv_mAXGAMEPHASES)) {
        UnitGroupClear(lv_temp);
        autoC7AF4185_g = gv_sD.lv_voidConduitPhaseGroup[lv_phaseID][0];
        autoC7AF4185_u = UnitGroupCount(autoC7AF4185_g, c_unitCountAll);
        for (;; autoC7AF4185_u -= 1) {
            lv_conduit = UnitGroupUnitFromEnd(autoC7AF4185_g, autoC7AF4185_u);
            if (lv_conduit == null) { break; }
            autoB10BBF2D_g = UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_conduit), gv_cONDUITRANGE), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB10BBF2D_u = UnitGroupCount(autoB10BBF2D_g, c_unitCountAll);
            for (;; autoB10BBF2D_u -= 1) {
                autoB10BBF2D_var = UnitGroupUnitFromEnd(autoB10BBF2D_g, autoB10BBF2D_u);
                if (autoB10BBF2D_var == null) { break; }
                if ((UnitGroupHasUnit(gv_sD.lv_clusterGroups[0], autoB10BBF2D_var) == false)) {
                    UnitGroupAdd(lv_temp, autoB10BBF2D_var);
                }

            }
        }
        if ((UnitGroupCount(lv_temp, c_unitCountAlive) > 0) && (lv_pARAMScatterResourceBank[lv_phaseID][0] > 0)) {
            gf_ShuffleMineralsInUnitGroup(lv_pARAMScatterResourceBank[lv_phaseID][0], lv_temp);
        }

        UnitGroupClear(lv_temp);
        auto40CA01EF_g = gv_sD.lv_voidConduitPhaseGroup[lv_phaseID][1];
        auto40CA01EF_u = UnitGroupCount(auto40CA01EF_g, c_unitCountAll);
        for (;; auto40CA01EF_u -= 1) {
            lv_conduit = UnitGroupUnitFromEnd(auto40CA01EF_g, auto40CA01EF_u);
            if (lv_conduit == null) { break; }
            autoBA1190B6_g = UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_conduit), gv_cONDUITRANGE), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBA1190B6_u = UnitGroupCount(autoBA1190B6_g, c_unitCountAll);
            for (;; autoBA1190B6_u -= 1) {
                autoBA1190B6_var = UnitGroupUnitFromEnd(autoBA1190B6_g, autoBA1190B6_u);
                if (autoBA1190B6_var == null) { break; }
                if ((UnitGroupHasUnit(gv_sD.lv_clusterGroups[0], autoBA1190B6_var) == false)) {
                    UnitGroupAdd(lv_temp, autoBA1190B6_var);
                }

            }
        }
        if ((UnitGroupCount(lv_temp, c_unitCountAlive) > 0) && (lv_pARAMScatterResourceBank[lv_phaseID][1] > 0)) {
            gf_ShuffleMineralsInUnitGroup(lv_pARAMScatterResourceBank[lv_phaseID][1], lv_temp);
        }

        lv_phaseID += 1;
    }
    lv_phaseID = 1;
    UnitGroupClear(lv_temp);
    while ((lv_phaseID <= gv_mAXGAMEPHASES)) {
        UnitGroupClear(lv_combined);
        UnitGroupAddUnitGroup(lv_combined, gv_sD.lv_voidConduitPhaseGroup[lv_phaseID][0]);
        UnitGroupAddUnitGroup(lv_combined, gv_sD.lv_voidConduitPhaseGroup[lv_phaseID][1]);
        auto8EB91ADF_g = lv_combined;
        auto8EB91ADF_u = UnitGroupCount(auto8EB91ADF_g, c_unitCountAll);
        for (;; auto8EB91ADF_u -= 1) {
            lv_conduit = UnitGroupUnitFromEnd(auto8EB91ADF_g, auto8EB91ADF_u);
            if (lv_conduit == null) { break; }
            auto6CC23AE7_g = UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_conduit), gv_cONDUITRANGE), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto6CC23AE7_u = UnitGroupCount(auto6CC23AE7_g, c_unitCountAll);
            for (;; auto6CC23AE7_u -= 1) {
                auto6CC23AE7_var = UnitGroupUnitFromEnd(auto6CC23AE7_g, auto6CC23AE7_u);
                if (auto6CC23AE7_var == null) { break; }
                if ((UnitGroupHasUnit(lv_temp, auto6CC23AE7_var) == false)) {
                    UnitGroupAdd(lv_temp, auto6CC23AE7_var);
                    gv_sD.lv_voidCrystalsperphaseatstartofthegame[lv_phaseID] += FixedToInt(UnitGetPropertyFixed(auto6CC23AE7_var, c_unitPropResources, c_unitPropCurrent));
                    gv_sD.lv_voidCrystalsperphaseatstartofthegame[0] += FixedToInt(UnitGetPropertyFixed(auto6CC23AE7_var, c_unitPropResources, c_unitPropCurrent));
                }

            }
        }
        TextExpressionSetToken("Param/Expression/5A7F6EC8", "A", IntToText(lv_phaseID));
        TextExpressionSetToken("Param/Expression/5A7F6EC8", "B", IntToText(gv_sD.lv_voidCrystalsperphaseatstartofthegame[lv_phaseID]));
        gf_DISPLAYDEBUGMESSAGE(TextExpressionAssemble("Param/Expression/5A7F6EC8"));
        lv_phaseID += 1;
    }
    UnitGroupClear(lv_nonAbsorbableMinerals);
    UnitGroupAddUnitGroup(lv_nonAbsorbableMinerals, UnitGroup("VoidMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(lv_nonAbsorbableMinerals, lv_temp);
    gf_ShuffleMineralsInUnitGroup(lv_pARAMNonAbsorbableBank, lv_nonAbsorbableMinerals);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init09VoidConduitsInitilizeAreaClustersDataINITALIZATION_Init () {
    gt_Init09VoidConduitsInitilizeAreaClustersDataINITALIZATION = TriggerCreate("gt_Init09VoidConduitsInitilizeAreaClustersDataINITALIZATION_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hint Auto disable on 10th minute
//--------------------------------------------------------------------------------------------------
bool gt_HintAutodisableon10thminute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VoidMineralFieldHint, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HintAutodisableon10thminute_Init () {
    gt_HintAutodisableon10thminute = TriggerCreate("gt_HintAutodisableon10thminute_Func");
    TriggerAddEventTimeElapsed(gt_HintAutodisableon10thminute, (10.0*60.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Mineral Field - Hint
//--------------------------------------------------------------------------------------------------
bool gt_VoidMineralFieldHint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearbyCrystals;

    // Automatic Variable Declarations
    unitgroup auto3BD45D95_g;
    int auto3BD45D95_u;
    unit auto3BD45D95_var;

    // Variable Initialization
    lv_nearbyCrystals = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((((UnitGetOwner(EventUnit()) == 1) && (PlayerGetPropertyInt(1, c_playerPropTerrazine) < 15)) || ((UnitGetOwner(EventUnit()) == 2) && (PlayerGetPropertyInt(2, c_playerPropTerrazine) < 15))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_nearbyCrystals, UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemoveUnitGroup(lv_nearbyCrystals, gv_sD.lv_voidMineralFieldHintActiveGroup);
    if ((UnitGroupCount(lv_nearbyCrystals, c_unitCountAlive) == 0)) {
        return true;
    }

    auto3BD45D95_g = lv_nearbyCrystals;
    auto3BD45D95_u = UnitGroupCount(auto3BD45D95_g, c_unitCountAll);
    for (;; auto3BD45D95_u -= 1) {
        auto3BD45D95_var = UnitGroupUnitFromEnd(auto3BD45D95_g, auto3BD45D95_u);
        if (auto3BD45D95_var == null) { break; }
        libCOMI_gf_CreateReticleEffectAndTextTagAtPoint(libCOMI_ge_CampaginReticleType_ProtossBonusObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/C0DF6FF7"), UnitGetPosition(auto3BD45D95_var));
        TextTagSetPosition(TextTagLastCreated(), UnitGetPosition(auto3BD45D95_var), 0.0);
        libARRA_gf_StoreActorForUnit(auto3BD45D95_var, 1, libNtve_gf_ActorLastCreated());
        libARRA_gf_StoreTextTagForUnit(auto3BD45D95_var, 1, TextTagLastCreated());
        UnitBehaviorAdd(auto3BD45D95_var, "VoidMineralFieldHintDuration", auto3BD45D95_var, 1);
        UnitGroupAdd(gv_sD.lv_voidMineralFieldHintActiveGroup, auto3BD45D95_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidMineralFieldHint_Init () {
    gt_VoidMineralFieldHint = TriggerCreate("gt_VoidMineralFieldHint_Func");
    TriggerAddEventUnitRegion(gt_VoidMineralFieldHint, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Mineral Field - Hint Expired
//--------------------------------------------------------------------------------------------------
bool gt_VoidMineralFieldHintExpired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libARRA_gf_TextTagForUnit(EventUnit(), 1));
    libNtve_gf_KillModel(libARRA_gf_ActorForUnit(EventUnit(), 1));
    UnitGroupRemove(gv_sD.lv_voidMineralFieldHintActiveGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidMineralFieldHintExpired_Init () {
    gt_VoidMineralFieldHintExpired = TriggerCreate("gt_VoidMineralFieldHintExpired_Func");
    TriggerAddEventUnitBehaviorChange(gt_VoidMineralFieldHintExpired, null, "VoidMineralFieldHintDuration", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Mineral Field - Gather
//--------------------------------------------------------------------------------------------------
bool gt_VoidMineralFieldGather_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amount = 5.0;
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amount = UnitGetPropertyFixed(EventUnit(), c_unitPropCarriedTerrazine, c_unitPropCurrent);
    gv_sD.lv_playersVoidHarvested += FixedToInt(lv_amount);
    gv_sD.lv_voidCrystalsTotalDecreased += FixedToInt(lv_amount);
    UnitBehaviorRemove(EventUnit(), "VoidMineralFieldCarryBehavior", 1);
    TextExpressionSetToken("Param/Expression/C74FBF6B", "A", StringExternal("Param/Value/6B49A59F"));
    TextExpressionSetToken("Param/Expression/C74FBF6B", "B", FixedToText(lv_amount, 0));
    TextExpressionSetToken("Param/Expression/C74FBF6B", "C", StringExternal("Param/Value/3CDC0CE2"));
    TextTagCreate(TextExpressionAssemble("Param/Expression/C74FBF6B"), 19, UnitGetPosition(EventUnit()), 2.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.33, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    if ((PlayerGetPropertyInt(lv_player, c_playerPropTerrazine) >= 15) && (TechTreeUpgradeCount(lv_player, "GameMineralTip", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "GameMineralTip", 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidMineralFieldGather_Init () {
    gt_VoidMineralFieldGather = TriggerCreate("gt_VoidMineralFieldGather_Func");
    TriggerAddEventUnitBehaviorChange(gt_VoidMineralFieldGather, null, "VoidMineralFieldCarryBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Mineral Field - Mined Out
//--------------------------------------------------------------------------------------------------
bool gt_VoidMineralFieldMinedOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gf_PingStoredForUnit(EventUnit(), 1) != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(EventUnit(), 1));
        gv_sD.lv_spareSmallPingAmount += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidMineralFieldMinedOut_Init () {
    gt_VoidMineralFieldMinedOut = TriggerCreate("gt_VoidMineralFieldMinedOut_Func");
    TriggerAddEventUnitBehaviorChange(gt_VoidMineralFieldMinedOut, null, "VoidMineralFieldResourceBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Mineral Field - Gather (AMON)
//--------------------------------------------------------------------------------------------------
bool gt_VoidMineralFieldGatherAMON_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amount = 5.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "VoidConduitHarvestTick", 1);
    lv_amount = MinF(lv_amount, UnitGetPropertyFixed(EventUnit(), c_unitPropResources, c_unitPropCurrent));
    TextExpressionSetToken("Param/Expression/DDCDAFAB", "A", StringExternal("Param/Value/32E10F5C"));
    TextExpressionSetToken("Param/Expression/DDCDAFAB", "B", FixedToText(lv_amount, 0));
    TextExpressionSetToken("Param/Expression/DDCDAFAB", "C", StringExternal("Param/Value/61CF8EB4"));
    TextTagCreate(TextExpressionAssemble("Param/Expression/DDCDAFAB"), 36, UnitGetPosition(EventUnit()), 2.5, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 0.33, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropResources, (UnitGetPropertyFixed(EventUnit(), c_unitPropResources, c_unitPropCurrent)-lv_amount));
    gv_sD.lv_aMONVoidHarvested += FixedToInt(lv_amount);
    gv_sD.lv_voidCrystalsTotalDecreased += FixedToInt(lv_amount);
    gv_sD.lv_voidCrystalsperphaseGatheredByAmon[gv_sD.lv_objectivePhase] += FixedToInt(lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidMineralFieldGatherAMON_Init () {
    gt_VoidMineralFieldGatherAMON = TriggerCreate("gt_VoidMineralFieldGatherAMON_Func");
    TriggerAddEventUnitBehaviorChange(gt_VoidMineralFieldGatherAMON, null, "VoidConduitHarvestTick", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Conduit - Activation
//--------------------------------------------------------------------------------------------------
bool gt_VoidConduitActivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_tIME;
    int lv_progress;

    // Automatic Variable Declarations
    unitgroup auto3173361B_g;
    int auto3173361B_u;
    unit auto3173361B_var;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_tIME = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tIME = FixedToInt((IntToFixed(lv_tIME)/0.0625));
    libCOMI_gf_DisplayUnitProgressBar(lv_caster, StringExternal("Param/Value/8BCA10DC"), 0, lv_tIME);
    libCOMI_gf_ShowHideUnitProgressBar2(lv_caster, false);
    while ((lv_progress < lv_tIME)) {
        libCOMI_gf_SetUnitProgressBarProgress(lv_caster, lv_progress);
        lv_progress += 1;
        Wait(0.0625, c_timeGame);
    }
    libCOMI_gf_ShowHideUnitProgressBar(lv_caster, false);
    UnitSetInfoTip(lv_caster, StringExternal("Param/Value/0F33718C"));
    auto3173361B_g = UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_caster), 33.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3173361B_u = UnitGroupCount(auto3173361B_g, c_unitCountAll);
    for (;; auto3173361B_u -= 1) {
        auto3173361B_var = UnitGroupUnitFromEnd(auto3173361B_g, auto3173361B_u);
        if (auto3173361B_var == null) { break; }
        UnitBehaviorAdd(auto3173361B_var, "VoidConduitHarvest", lv_caster, 1);
        libCOMI_gf_ShareVisionofUnitCoop(auto3173361B_var, true, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidConduitActivation_Init () {
    gt_VoidConduitActivation = TriggerCreate("gt_VoidConduitActivation_Func");
    TriggerAddEventUnitBehaviorChange(gt_VoidConduitActivation, null, "VoidConduitActivate", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Conduit - Standby Activation
//--------------------------------------------------------------------------------------------------
bool gt_VoidConduitStandbyActivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultTime;
    unit lv_conduit;

    // Automatic Variable Declarations
    unitgroup auto81445BBF_g;
    int auto81445BBF_u;
    unit auto81445BBF_var;

    // Variable Initialization
    lv_defaultTime = gv_sD.lv_voidConduitActivationTime;
    lv_conduit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto81445BBF_g = UnitGroup("VoidMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_conduit), 33.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81445BBF_u = UnitGroupCount(auto81445BBF_g, c_unitCountAll);
    for (;; auto81445BBF_u -= 1) {
        auto81445BBF_var = UnitGroupUnitFromEnd(auto81445BBF_g, auto81445BBF_u);
        if (auto81445BBF_var == null) { break; }
        VisRevealArea(1, RegionCircle(UnitGetPosition(auto81445BBF_var), 1.5), 1.5, false);
    }
    libCOMI_gf_DisplayUnitProgressBar(lv_conduit, StringExternal("Param/Value/ADF6E373"), 0, lv_defaultTime);
    libCOMI_gf_SetUnitProgressBarProgress(lv_conduit, gv_sD.lv_voidConduitActivationTime);
    libCOMI_gf_SetUnitProgressBarProgress2(lv_conduit, gv_sD.lv_voidConduitActivationTime);
    while ((UnitHasBehavior2(lv_conduit, "VoidConduitStandby") == true) && (UnitHasBehavior2(lv_conduit, "VoidConduitActivate") == false)) {
        libCOMI_gf_SetUnitProgressBarProgress(lv_conduit, gv_sD.lv_voidConduitActivationTime);
        libCOMI_gf_SetUnitProgressBarProgress2(lv_conduit, gv_sD.lv_voidConduitActivationTime);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidConduitStandbyActivation_Init () {
    gt_VoidConduitStandbyActivation = TriggerCreate("gt_VoidConduitStandbyActivation_Func");
    TriggerAddEventUnitBehaviorChange(gt_VoidConduitStandbyActivation, null, "VoidConduitStandby", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xenos - Monochrome Wave Cast Marker
//--------------------------------------------------------------------------------------------------
bool gt_XenosMonochromeWaveCastMarker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "XenosMonochromeWaveCasterToken", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XenosMonochromeWaveCastMarker_Init () {
    gt_XenosMonochromeWaveCastMarker = TriggerCreate("gt_XenosMonochromeWaveCastMarker_Func");
    TriggerAddEventUnitAbility(gt_XenosMonochromeWaveCastMarker, null, AbilityCommand("XenosMonochromeWave", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xenos - Monochrome Veil Cast Marker
//--------------------------------------------------------------------------------------------------
bool gt_XenosMonochromeVeilCastMarker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "XenosMonochromeVeilCastToken", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XenosMonochromeVeilCastMarker_Init () {
    gt_XenosMonochromeVeilCastMarker = TriggerCreate("gt_XenosMonochromeVeilCastMarker_Func");
    TriggerAddEventUnitAbility(gt_XenosMonochromeVeilCastMarker, null, AbilityCommand("XenosMonochromeVeil", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xenos - Monochrome Wall (Activation)
//--------------------------------------------------------------------------------------------------
bool gt_XenosMonochromeWallActivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_visualUnit;
    point lv_originPoint;
    fixed lv_maxDuration;
    fixed lv_rangeCurrnet;
    fixed lv_rangeMax;
    fixed lv_pushTick;
    region lv_pushArea;
    point lv_pushPoint;
    unitgroup lv_stuckUnits;
    unitgroup lv_affectedUnits;
    fixed lv_sCALE;
    unitgroup lv_scanGroup;

    // Automatic Variable Declarations
    unitgroup auto3D4E0C7A_g;
    int auto3D4E0C7A_u;
    unit auto3D4E0C7A_var;
    unitgroup autoF39F5C3E_g;
    int autoF39F5C3E_u;
    unit autoF39F5C3E_var;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_originPoint = UnitGetPosition(lv_caster);
    lv_maxDuration = 10.0;
    lv_rangeMax = 20.0;
    lv_pushTick = 0.25;
    lv_stuckUnits = UnitGroupEmpty();
    lv_affectedUnits = UnitGroupEmpty();
    lv_scanGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "XenosMonochromeWall", c_unitCreateIgnorePlacement, UnitGetOwner(lv_caster), lv_originPoint);
    lv_visualUnit = UnitLastCreated();
    lv_sCALE = 20.0;
    UnitSetScale(lv_visualUnit, lv_sCALE, lv_sCALE, 100.0);
    lv_maxDuration = 6.0;
    while ((UnitIsAlive(lv_caster) == true) && (lv_maxDuration > 0.0)) {
        lv_rangeCurrnet = MinF(lv_rangeMax, (lv_rangeCurrnet+0.25));
        lv_pushArea = RegionCircle(lv_originPoint, (lv_rangeCurrnet+1.0));
        UnitGroupClear(lv_scanGroup);
        UnitGroupAddUnitGroup(lv_scanGroup, UnitGroup(null, 1, lv_pushArea, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_scanGroup, UnitGroup(null, 2, lv_pushArea, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupRemoveUnitGroup(lv_scanGroup, lv_stuckUnits);
        auto3D4E0C7A_g = lv_scanGroup;
        auto3D4E0C7A_u = UnitGroupCount(auto3D4E0C7A_g, c_unitCountAll);
        for (;; auto3D4E0C7A_u -= 1) {
            auto3D4E0C7A_var = UnitGroupUnitFromEnd(auto3D4E0C7A_g, auto3D4E0C7A_u);
            if (auto3D4E0C7A_var == null) { break; }
            lv_pushPoint = PointWithOffsetPolar(UnitGetPosition(auto3D4E0C7A_var), (-lv_pushTick), AngleBetweenPoints(UnitGetPosition(auto3D4E0C7A_var), lv_originPoint));
            if (((PointPathingPassable(lv_pushPoint) == true) || (UnitMoverExists(auto3D4E0C7A_var, "Fly") == true))) {
                UnitSetPosition(auto3D4E0C7A_var, lv_pushPoint, true);
                UnitGroupAdd(lv_affectedUnits, auto3D4E0C7A_var);
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(auto3D4E0C7A_var), c_unitAttributeHeroic) == false)) {
                    UnitGroupAdd(lv_stuckUnits, auto3D4E0C7A_var);
                }

            }
            UnitBehaviorAdd(auto3D4E0C7A_var, "XenosMonochromeWallPush", lv_caster, 1);
        }
        lv_sCALE = MinF(350.0, (lv_sCALE+4.1));
        UnitSetScale(lv_visualUnit, lv_sCALE, lv_sCALE, 100.0);
        CatalogFieldValueSet(c_gameCatalogActor, "XenosMonochromeWallRANGE", "Range", UnitGetOwner(lv_caster), FixedToString(lv_rangeCurrnet, c_fixedPrecisionAny));
        VisRevealArea(1, lv_pushArea, 1.0, true);
        Wait(0.0625, c_timeGame);
        lv_maxDuration -= 0.0625;
    }
    libNtve_gf_SendActorMessageToUnit(lv_visualUnit, libNtve_gf_SetScale((0.01*lv_sCALE), (0.01*lv_sCALE), 0.1, 0.5));
    if ((UnitIsAlive(lv_caster) == true)) {
        UnitBehaviorRemove(lv_caster, "XenosMonochromeWallCasterToken", 1);
        if ((UnitGroupCount(lv_affectedUnits, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_caster, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitGroupRandomUnit(lv_affectedUnits, c_unitCountAlive))), c_orderQueueReplace);
        }

    }

    Wait(0.0625, c_timeGame);
    autoF39F5C3E_g = lv_affectedUnits;
    autoF39F5C3E_u = UnitGroupCount(autoF39F5C3E_g, c_unitCountAll);
    for (;; autoF39F5C3E_u -= 1) {
        autoF39F5C3E_var = UnitGroupUnitFromEnd(autoF39F5C3E_g, autoF39F5C3E_u);
        if (autoF39F5C3E_var == null) { break; }
        UnitBehaviorRemove(autoF39F5C3E_var, "XenosMonochromeWallAffectedPostPushNormal", 1);
    }
    Wait(0.5, c_timeGame);
    UnitKill(lv_visualUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XenosMonochromeWallActivation_Init () {
    gt_XenosMonochromeWallActivation = TriggerCreate("gt_XenosMonochromeWallActivation_Func");
    TriggerAddEventUnitBehaviorChange(gt_XenosMonochromeWallActivation, null, "XenosMonochromeWallCasterToken", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xenos - Death Ping Remove
//--------------------------------------------------------------------------------------------------
bool gt_XenosDeathPingRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3112C2ED_val;
    unitgroup auto841090E8_g;
    int auto841090E8_u;
    unit auto841090E8_var;
    unitgroup auto1C31B63E_g;
    int auto1C31B63E_u;
    unit auto1C31B63E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(EventUnit(), 1));
    gv_sD.lv_xenoReviveTimer = 0;
    auto3112C2ED_val = gv_sD.lv_pRESETGAMEDIFFICULTY;
    if (auto3112C2ED_val == 4) {
        gv_sD.lv_xenoReviveTimer += (60*4);
    }
    else if (auto3112C2ED_val == 3) {
        gv_sD.lv_xenoReviveTimer += (60*5);
    }
    else if (auto3112C2ED_val == 2) {
        gv_sD.lv_xenoReviveTimer += (60*6);
    }
    else {
        gv_sD.lv_xenoReviveTimer += (60*8);
    }
    gv_sD.lv_xenosDeathsAmount += 1;
    gv_sD.lv_xenosPermitRevival = true;
    TriggerQueueEnter();
    TriggerExecute(gt_TRXenosDeath, true, true);
    TriggerQueueExit();
    Wait(1.0, c_timeGame);
    auto841090E8_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto841090E8_u = UnitGroupCount(auto841090E8_g, c_unitCountAll);
    for (;; auto841090E8_u -= 1) {
        auto841090E8_var = UnitGroupUnitFromEnd(auto841090E8_g, auto841090E8_u);
        if (auto841090E8_var == null) { break; }
        if (((UnitHasBehavior2(auto841090E8_var, "XenosMonochromeVeil") == true) || (UnitHasBehavior2(auto841090E8_var, "XenosMonochromeVeilHeroic") == true))) {
            UnitBehaviorRemove(auto841090E8_var, "XenosMonochromeVeil", 1);
            UnitBehaviorRemove(auto841090E8_var, "XenosMonochromeVeilHeroic", 1);
        }

    }
    auto1C31B63E_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1C31B63E_u = UnitGroupCount(auto1C31B63E_g, c_unitCountAll);
    for (;; auto1C31B63E_u -= 1) {
        auto1C31B63E_var = UnitGroupUnitFromEnd(auto1C31B63E_g, auto1C31B63E_u);
        if (auto1C31B63E_var == null) { break; }
        if (((UnitHasBehavior2(auto1C31B63E_var, "XenosMonochromeVeil") == true) || (UnitHasBehavior2(auto1C31B63E_var, "XenosMonochromeVeilHeroic") == true))) {
            UnitBehaviorRemove(auto1C31B63E_var, "XenosMonochromeVeil", 1);
            UnitBehaviorRemove(auto1C31B63E_var, "XenosMonochromeVeilHeroic", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XenosDeathPingRemove_Init () {
    gt_XenosDeathPingRemove = TriggerCreate("gt_XenosDeathPingRemove_Func");
    TriggerAddEventUnitBehaviorChange(gt_XenosDeathPingRemove, null, "XenosEntombAutoHost", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Harvest Activation
//--------------------------------------------------------------------------------------------------
bool gt_TRHarvestActivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentageUnharvested;

    // Automatic Variable Declarations
    int autoE0841F27_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentageUnharvested = gf_TRGetUnharvestedHarvestBeginning();
    autoE0841F27_val = gv_sD.lv_objectivePhase;
    if (autoE0841F27_val == 1) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/11B71211"), StringExternal("Param/Value/E3DEBE8B"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE0841F27_val == 2) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/777B43D2"), StringExternal("Param/Value/FD96525B"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE0841F27_val == 3) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/E8904229"), StringExternal("Param/Value/AD960C60"), 6.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (autoE0841F27_val == 4) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/C2213246"), StringExternal("Param/Value/0F0530AE"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRHarvestActivation_Init () {
    gt_TRHarvestActivation = TriggerCreate("gt_TRHarvestActivation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Harvest Clear
//--------------------------------------------------------------------------------------------------
bool gt_TRHarvestClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amonHarvest;

    // Automatic Variable Declarations
    int auto8FEB8384_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amonHarvest = IntToFixed(((gv_sD.lv_voidCrystalsperphaseGatheredByAmon[gv_sD.lv_objectivePhase]/gv_sD.lv_voidCrystalsperphaseatstartofthegame[gv_sD.lv_objectivePhase])*100));
    TextExpressionSetToken("Param/Expression/D94B98EA", "A", FixedToText(lv_amonHarvest, 2));
    gf_DISPLAYDEBUGMESSAGE(TextExpressionAssemble("Param/Expression/D94B98EA"));
    auto8FEB8384_val = gv_sD.lv_objectivePhase;
    if (auto8FEB8384_val == 1) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/0744A325"), StringExternal("Param/Value/1ACB1ABD"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto8FEB8384_val == 2) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/12F8A160"), StringExternal("Param/Value/4D5DFF84"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto8FEB8384_val == 3) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/E99CA2AD"), StringExternal("Param/Value/62B94296"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto8FEB8384_val == 4) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/141D668E"), StringExternal("Param/Value/CE6EEC60"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRHarvestClear_Init () {
    gt_TRHarvestClear = TriggerCreate("gt_TRHarvestClear_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Mission Fail
//--------------------------------------------------------------------------------------------------
bool gt_TRMissionFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRMissionFail_Init () {
    gt_TRMissionFail = TriggerCreate("gt_TRMissionFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Mission Victory
//--------------------------------------------------------------------------------------------------
bool gt_TRMissionVictory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRMissionVictory_Init () {
    gt_TRMissionVictory = TriggerCreate("gt_TRMissionVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Xenos Death
//--------------------------------------------------------------------------------------------------
bool gt_TRXenosDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto73E2FB75_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto73E2FB75_val = gv_sD.lv_xenosDeathsAmount;
    if (auto73E2FB75_val == 1) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/E20C8FD4"), StringExternal("Param/Value/25A63F0D"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto73E2FB75_val == 2) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/B948F685"), StringExternal("Param/Value/BDD631D0"), 6.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto73E2FB75_val == 3) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/42491C27"), StringExternal("Param/Value/0FD9DEEB"), 6.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto73E2FB75_val == 4) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/9C9D0765"), StringExternal("Param/Value/3E25E2C2"), 8.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/41C1A1D5"), StringExternal("Param/Value/BA20EC62"), 4.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRXenosDeath_Init () {
    gt_TRXenosDeath = TriggerCreate("gt_TRXenosDeath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Xenos Spawn
//--------------------------------------------------------------------------------------------------
bool gt_TRXenosSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1660BB64_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1660BB64_val = gv_sD.lv_xenosSpawnTokens;
    if (auto1660BB64_val == 1) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/742A92E0"), StringExternal("Param/Value/827B097D"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1660BB64_val == 2) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/6B7D977A"), StringExternal("Param/Value/69458EE0"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1660BB64_val == 3) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/2F13DED6"), StringExternal("Param/Value/5E622CA7"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto1660BB64_val == 4) {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/A0D95D2F"), StringExternal("Param/Value/38FD6C02"), 6.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
        gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/29FCBF45"), StringExternal("Param/Value/C96F6A6C"), 6.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRXenosSpawn_Init () {
    gt_TRXenosSpawn = TriggerCreate("gt_TRXenosSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Xenos Elementall Spawn
//--------------------------------------------------------------------------------------------------
bool gt_TRXenosElementallSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/8C4CA28D"), StringExternal("Param/Value/3313E3BE"), 8.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/331259B4"), StringExternal("Param/Value/5E954879"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRXenosElementallSpawn_Init () {
    gt_TRXenosElementallSpawn = TriggerCreate("gt_TRXenosElementallSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Xenos Elemental Success
//--------------------------------------------------------------------------------------------------
bool gt_TRXenosElementalSuccess_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/20E84736"), StringExternal("Param/Value/C0C4976B"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRXenosElementalSuccess_Init () {
    gt_TRXenosElementalSuccess = TriggerCreate("gt_TRXenosElementalSuccess_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TR - Xenos Elemental Defeat
//--------------------------------------------------------------------------------------------------
bool gt_TRXenosElementalDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/6A18341D"), StringExternal("Param/Value/B52C3134"), 9.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TRXenosElementalDefeat_Init () {
    gt_TRXenosElementalDefeat = TriggerCreate("gt_TRXenosElementalDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Gather Void Resource (CREATE)
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGatherVoidResourceCREATE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("HarvestHarvestResource");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("HarvestHarvestResource", gv_sD.lv_playersVoidWinAmount);
    gv_sD.lv_objectiveHarvestResource = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveHarvestPereodicRefreshREFRESH, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGatherVoidResourceCREATE_Init () {
    gt_ObjectiveGatherVoidResourceCREATE = TriggerCreate("gt_ObjectiveGatherVoidResourceCREATE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Deny Amon Resource (CREATE)
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDenyAmonResourceCREATE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("EnemyForcesMustNotGather500VoidCrystals");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("EnemyForcesMustNotGather500VoidCrystals", gv_sD.lv_aMONVoidWinAmount);
    gv_sD.lv_objectiveDoNotLetAmonHarvestResource = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    TriggerExecute(gt_ObjectiveHarvestPereodicRefreshREFRESH, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDenyAmonResourceCREATE_Init () {
    gt_ObjectiveDenyAmonResourceCREATE = TriggerCreate("gt_ObjectiveDenyAmonResourceCREATE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Harvest Pereodic Refresh (REFRESH)
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestPereodicRefreshREFRESH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameGetMissionTime() >= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveGatherVoidResourceCREATE, true, false);
    TriggerExecute(gt_ObjectiveDenyAmonResourceCREATE, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("HarvestHarvestResource", gv_sD.lv_playersVoidHarvested);
    libCOMI_gf_SetMissionObjectiveProgress("EnemyForcesMustNotGather500VoidCrystals", gv_sD.lv_aMONVoidHarvested);
    if ((gv_sD.lv_playersVoidHarvested >= gv_sD.lv_playersVoidWinAmount)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    }

    if ((gv_sD.lv_aMONVoidHarvested >= gv_sD.lv_aMONVoidWinAmount)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }

    if ((PlayerGetPropertyInt(1, c_playerPropTerrazine) > 0) && (PlayerGetPropertyInt(2, c_playerPropTerrazine) > 0) && (TriggerIsEnabled(gt_VoidMineralFieldHint) == true)) {
        TriggerEnable(gt_VoidMineralFieldHint, false);
        TriggerEnable(gt_HintAutodisableon10thminute, false);
    }

    if ((gv_sD.lv_eLEMENTALOBJECTIVETRIGGERED == false) && ((gv_sD.lv_voidCrystalsTotalDecreased >= 3620) || ((gv_sD.lv_objectivePhase == 3) && (gv_sD.lv_currentPhaseElapsedTime >= (gv_sD.lv_pRESETPhaseTime[gv_sD.lv_objectivePhase]/2))))) {
        gv_sD.lv_eLEMENTALOBJECTIVETRIGGERED = true;
        TriggerQueueEnter();
        gf_ELEMENTALSpawn();
        TriggerQueueExit();
    }

    if ((gv_sD.lv_xenosSpawnTokens == 0) && (gv_sD.lv_xenosPermitRevival == true) && (UnitGroupCount(gv_sD.lv_xENOSUnitGroup, c_unitCountAlive) == 0) && ((gv_sD.lv_voidCrystalsTotalDecreased >= 1200) || ((gv_sD.lv_objectivePhase == 2) && (gv_sD.lv_currentPhaseElapsedTime >= (gv_sD.lv_pRESETPhaseTime[gv_sD.lv_objectivePhase]/2))))) {
        gv_sD.lv_xenosPermitRevival = false;
        gf_PHASEEVENTXENOSSPAWN();
    }

    if ((gv_sD.lv_xenosSpawnTokens > 0) && (gv_sD.lv_xenosPermitRevival == true) && (UnitGroupCount(gv_sD.lv_xENOSUnitGroup, c_unitCountAlive) == 0) && (gv_sD.lv_xenoReviveTimer <= 0)) {
        gv_sD.lv_xenosPermitRevival = false;
        gf_PHASEEVENTXENOSSPAWN();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestPereodicRefreshREFRESH_Init () {
    gt_ObjectiveHarvestPereodicRefreshREFRESH = TriggerCreate("gt_ObjectiveHarvestPereodicRefreshREFRESH_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveHarvestPereodicRefreshREFRESH, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_sD.lv_objectiveDoNotLetAmonHarvestResource, c_objectiveStateFailed);
    Wait(4.0, c_timeGame);
    DialogSetVisible(gv_sD.lv_dIALOGAreaRemainingAmount, PlayerGroupAll(), false);
    UnitGroupAddUnitGroup(lv_group, gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][0]);
    UnitGroupAddUnitGroup(lv_group, gv_sD.lv_voidConduitPhaseGroup[gv_sD.lv_objectivePhase][1]);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/E7301810"), StringExternal("Param/Value/DF6FADB8"), 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FD5E87AE"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(UnitGetPosition(UnitGroupRandomUnit(lv_group, c_unitCountAlive)), 1.5);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_sD.lv_objectiveHarvestResource, c_objectiveStateCompleted);
    DialogSetVisible(gv_sD.lv_dIALOGAreaRemainingAmount, PlayerGroupAll(), false);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/CD6F6099"), StringExternal("Param/Value/05F21AF1"), 2.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    gf_SendTransmissionCampaignPlaceHolder(null, "PortraitXenos", StringExternal("Param/Value/06A90DE7"), StringExternal("Param/Value/C62F461E"), 6.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(6.0, c_timeReal);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/2D3E2175"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_victoryCompletePan, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTimePossibleLaunchOffset(0, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTimePossibleLaunchOffset(0, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTimePossibleLaunchOffset(0, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((11.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((14.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((17.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((20.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((23.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((26.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((29.0 * 60.0));
    gf_RunAttackWaveatMissionTimeNormal((32.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init02Players_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init07Environment_Init();
    gt_Init08DifficultiesFinal_Init();
    gt_StartGameQ_Init();
    gt_StartAI_Init();
    gt_Init09VoidConduitsInitilizeAreaClustersDataINITALIZATION_Init();
    gt_HintAutodisableon10thminute_Init();
    gt_VoidMineralFieldHint_Init();
    gt_VoidMineralFieldHintExpired_Init();
    gt_VoidMineralFieldGather_Init();
    gt_VoidMineralFieldMinedOut_Init();
    gt_VoidMineralFieldGatherAMON_Init();
    gt_VoidConduitActivation_Init();
    gt_VoidConduitStandbyActivation_Init();
    gt_XenosMonochromeWaveCastMarker_Init();
    gt_XenosMonochromeVeilCastMarker_Init();
    gt_XenosMonochromeWallActivation_Init();
    gt_XenosDeathPingRemove_Init();
    gt_TRHarvestActivation_Init();
    gt_TRHarvestClear_Init();
    gt_TRMissionFail_Init();
    gt_TRMissionVictory_Init();
    gt_TRXenosDeath_Init();
    gt_TRXenosSpawn_Init();
    gt_TRXenosElementallSpawn_Init();
    gt_TRXenosElementalSuccess_Init();
    gt_TRXenosElementalDefeat_Init();
    gt_ObjectiveGatherVoidResourceCREATE_Init();
    gt_ObjectiveDenyAmonResourceCREATE_Init();
    gt_ObjectiveHarvestPereodicRefreshREFRESH_Init();
    gt_EnemyAttackingQ_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_AIAttackWaves_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
