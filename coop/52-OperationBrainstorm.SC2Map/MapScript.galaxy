//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Operation: Brainstorm
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Operation: Brainstorm
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_atUNKNOWN = 0;
const int gv_atTERRAN_BIO = 1;
const int gv_atTERRAN_MECH = 2;
const int gv_atTERRAN_SKY = 3;
const int gv_atTERRAN_SHADOW = 4;
const int gv_afSTANDARD = 0;
const int gv_afCOMBO = 1;
const int gv_afBRUTALISK = 2;
const int gv_afLEVIATHAN = 3;
const int gv_pLAYER_1 = 1;
const int gv_pLAYER_2 = 2;
const int gv_eNEMY_AMON_1 = 3;
const int gv_eNEMY_AMON_2 = 4;
const int gv_eNEMY_OVERMIND = 5;
const int gv_aLLY_NAKTUL = 6;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_AITargetPlayer;
playergroup gv_enemyGroup;
int gv_gameDifficulty;
int gv_naktulSuperior;
int gv_attackFlavour;
int gv_brutaliskWaveNo;
int gv_comboWaveNo;
bool gv_lightningCooldown;
int gv_AttackType;
int gv_brutaliskPing;
unit gv_brutalisk;
unit gv_leviathan;
wave gv_leviathanAttackWave;
bool gv_stormOnCooldown;
bool gv_implosionOnCooldown;
bool gv_confusionOnCooldown;
bool gv_feedbackOnCooldown;
bool gv_pulseOnCooldown;
bool gv_mindBlastOnCooldown;
bool gv_mindControlOnCooldown;
bool gv_gravitonPrisonOnCooldown;
point gv_attackWaveNaturals;
int gv_objectiveDestroyTheOvermind;
int gv_objectiveKillTheCerebrates;
int gv_cerebratesKilled;

void InitGlobals () {
    gv_AITargetPlayer = 1;
    gv_enemyGroup = PlayerGroupEmpty();
    gv_gameDifficulty = 2;
    gv_AttackType = gv_atUNKNOWN;
    gv_brutaliskPing = c_invalidPingId;
    gv_objectiveDestroyTheOvermind = c_invalidObjectiveId;
    gv_objectiveKillTheCerebrates = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_LightningFlash ();
void gf_NaktulReclaimsUnits (region lp_controlRegion, region lp_airRetreatRegion);
void gf_NaktulGroundUnitRemoval (region lp_targetRegion);
bool gf_IsPlayerTerran (int lp_player);
int gf_PlayBrainstormTransmission (soundlink lp_soundClip, playergroup lp_targetGroup);
void gf_BrainstormTransmission (soundlink lp_soundClip);
void gf_BrainstormSplitTransmission (int lp_specialPlayer, soundlink lp_soundClipSpecial, soundlink lp_soundClipOther);
fixed gf_LongestSoundDuration (soundlink lp_sound1, soundlink lp_sound2);
fixed gf_ShortestSoundDuration (soundlink lp_sound1, soundlink lp_sound2);
void gf_OvermindSpellScript (unit lp_spellcaster);
void gf_OvermindCastPsionicStorm (unit lp_spellcaster, point lp_targetPoint);
void gf_OvermindCastImplosion (unit lp_spellcaster, unit lp_targetUnit);
void gf_OvermindCastConfusion (unit lp_spellcaster, point lp_targetPoint);
void gf_OvermindCastFeedback (unit lp_spellcaster, unit lp_targetUnit);
void gf_OvermindCastMindBlast (unit lp_spellcaster, unit lp_targetUnit);
void gf_OvermindCastUltrasonicPulse (unit lp_spellcaster, point lp_targetPoint);
void gf_OvermindCastMindControl (unit lp_spellcaster, unit lp_targetUnit);
void gf_OvermindCastGravitonPrison (unit lp_spellcaster, unit lp_targetUnit);
void gf_DetermineAttackWaveType ();
void gf_CreateBrutalisk ();
void gf_CreateLeviathan ();
void gf_AddUnittoCurrentWave (string lp_unitType, int lp_count, int lp_player, point lp_point);
void gf_AddZergUnitstoAttackWave (point lp_location);
void gf_PlotBrutaliskPath (int lp_targetPlayer);
void gf_SetTargetLocation (int lp_player);
void gf_SetTargetPlayer (int lp_player);
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
void gf_RunRepeatingAttackWavefromMissionTime (trigger lp_attackWave, fixed lp_time, fixed lp_delta);
point gf_AttackWaveSpawnCentre ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt__1MapStart;
trigger gt__2PlayerSetup;
trigger gt__3LoadingComplete;
trigger gt__4Technology;
trigger gt__5Units;
trigger gt__6MusicSound;
trigger gt__7Environment;
trigger gt__8Difficulties;
trigger gt_CentreOutpostReveal;
trigger gt_BrutaliskPing;
trigger gt_BrutaliskDies;
trigger gt_CerebrateDies;
trigger gt_OvermindDies;
trigger gt_StartGame;
trigger gt_SetupCerebrateObjective;
trigger gt_StateCheck;
trigger gt_CentreOutpostEncroached;
trigger gt_OvermindEncroached;
trigger gt_LeftCerebrateEncroached;
trigger gt_RightCerebrateEncroached;
trigger gt_LeftCerebrateKilled;
trigger gt_RightCerebrateKilled;
trigger gt_NaktulAirUnitRetreat;
trigger gt_RemoveNaktulsGroundUnits;
trigger gt_AmonsForcesAttacking;
trigger gt_NaktulRevealsCentralOutpost;
trigger gt_OvermindUnderAttack;
trigger gt_OvermindSpellControl;
trigger gt_BioComboWave01;
trigger gt_BioComboWave02;
trigger gt_BioComboWave03;
trigger gt_BioComboWave04;
trigger gt_MechComboWave01;
trigger gt_MechComboWave02;
trigger gt_MechComboWave03;
trigger gt_MechComboWave04;
trigger gt_SkyComboWave01;
trigger gt_SkyComboWave02;
trigger gt_SkyComboWave03;
trigger gt_SkyComboWave04;
trigger gt_ShadowComboWave01;
trigger gt_ShadowComboWave02;
trigger gt_ShadowComboWave03;
trigger gt_ShadowComboWave04;
trigger gt_AIAttackWaves;
trigger gt_InitialWave;
trigger gt_ComboWave01;
trigger gt_ComboWave02;
trigger gt_ComboWave03;
trigger gt_ComboWave04;
trigger gt_DoubleWave01;
trigger gt_DoubleWave02;
trigger gt_DoubleWave03;
trigger gt_DoubleWave04;
trigger gt_Brutalisk01;
trigger gt_Brutalisk02;
trigger gt_Brutalisk03;
trigger gt_ZergSuicide;
trigger gt_StartAI;
trigger gt_OvermindDead;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_ObjectiveDestroyTheOvermindCreate;
trigger gt_BonusObjectiveKillTheCerebratesCreate;
trigger gt_BonusObjectiveKillTheCerebratesUpdate;
trigger gt_BonusObjectiveKillTheCerebratesComplete;
trigger gt_ObjectiveDestroyTheOvermindComplete;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_LightningFlash_Trigger = null;

void gf_LightningFlash () {
    if (auto_gf_LightningFlash_Trigger == null) {
        auto_gf_LightningFlash_Trigger = TriggerCreate("auto_gf_LightningFlash_TriggerFunc");
    }

    TriggerExecute(auto_gf_LightningFlash_Trigger, false, false);
}

bool auto_gf_LightningFlash_TriggerFunc (bool testConds, bool runActions) {
    int auto2BF39C97_val;
    int autoBF29E675_ae;
    int autoBF29E675_ai;
    int auto6379F020_ae;
    int auto6379F020_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    gv_lightningCooldown = true;
    auto2BF39C97_val = RandomInt(0, 2);
    if (auto2BF39C97_val == 0) {
        autoBF29E675_ae = 3;
        autoBF29E675_ai = 1;
        lv_count = 1;
        for ( ; ( (autoBF29E675_ai >= 0 && lv_count <= autoBF29E675_ae) || (autoBF29E675_ai <= 0 && lv_count >= autoBF29E675_ae) ) ; lv_count += autoBF29E675_ai ) {
            Wait(0.05, c_timeGame);
            GameSetLighting("LightningFlash", 0.025);
            Wait(0.05, c_timeGame);
            GameSetLighting("Zerus", 0.15);
        }
    }
    else if (auto2BF39C97_val == 1) {
        GameSetLighting("LightningFlash", 0.5);
        Wait(0.2, c_timeGame);
        GameSetLighting("LightningFlash", 0.0);
        Wait(0.05, c_timeGame);
        GameSetLighting("Zerus", 0.15);
    }
    else if (auto2BF39C97_val == 2) {
        auto6379F020_ae = 2;
        auto6379F020_ai = 1;
        lv_count = 1;
        for ( ; ( (auto6379F020_ai >= 0 && lv_count <= auto6379F020_ae) || (auto6379F020_ai <= 0 && lv_count >= auto6379F020_ae) ) ; lv_count += auto6379F020_ai ) {
            Wait(0.1, c_timeGame);
            GameSetLighting("LightningFlash", 0.025);
            Wait(0.05, c_timeGame);
            GameSetLighting("Zerus", 0.15);
        }
    }
    else {
    }
    if ((RandomInt(0, 2) == 0)) {
        SoundPlayForPlayer(SoundLink("Lightning_Strike2", -1), c_maxPlayers, PlayerGroupAll(), 350.0, 0.0);
        Wait(0.5, c_timeGame);
        SoundPlayForPlayer(SoundLink("ZerusThunder", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    }
    else {
        Wait(RandomFixed(3.0, 7.0), c_timeGame);
        SoundPlayForPlayer(SoundLink("ZerusThunder", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    Wait(5.0, c_timeGame);
    gv_lightningCooldown = false;
    return true;
}

void gf_NaktulReclaimsUnits (region lp_controlRegion, region lp_airRetreatRegion) {
    unitgroup auto2BD2035A_g;
    int auto2BD2035A_u;
    string autoA52C0924_val;
    string auto707C9EB3_val;

    // Variable Declarations
    unit lv_unitIter;

    // Variable Initialization

    // Implementation
    auto2BD2035A_g = UnitGroup(null, gv_eNEMY_OVERMIND, lp_controlRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2BD2035A_u = 1;
    for ( ; auto2BD2035A_u <= UnitGroupCount(auto2BD2035A_g, c_unitCountAll) ; auto2BD2035A_u += BoolToInt(lv_unitIter == UnitGroupUnit(auto2BD2035A_g, auto2BD2035A_u)) ) {
        lv_unitIter = UnitGroupUnit(auto2BD2035A_g, auto2BD2035A_u);
        autoA52C0924_val = UnitGetType(lv_unitIter);
        if (autoA52C0924_val == "Broodling") {
            continue;
        }
        else if (autoA52C0924_val == "KerriganInfestBroodling") {
            continue;
        }
        else if (autoA52C0924_val == "Medic") {
            continue;
        }
        else if (autoA52C0924_val == "Medivac") {
            continue;
        }
        else if (autoA52C0924_val == "Marine") {
            continue;
        }
        else if (autoA52C0924_val == "Reaper") {
            continue;
        }
        else if (autoA52C0924_val == "Marauder") {
            continue;
        }
        else if (autoA52C0924_val == "Firebat") {
            continue;
        }
        else if (autoA52C0924_val == "Ghost") {
            continue;
        }
        else if (autoA52C0924_val == "Hellion") {
            continue;
        }
        else if (autoA52C0924_val == "HellionTank") {
            continue;
        }
        else if (autoA52C0924_val == "SiegeTank") {
            continue;
        }
        else if (autoA52C0924_val == "SiegeTankSieged") {
            continue;
        }
        else if (autoA52C0924_val == "Goliath") {
            continue;
        }
        else if (autoA52C0924_val == "Cyclone") {
            continue;
        }
        else if (autoA52C0924_val == "WidowMine") {
            continue;
        }
        else if (autoA52C0924_val == "WidowMineBurrowed") {
            continue;
        }
        else if (autoA52C0924_val == "Vulture") {
            continue;
        }
        else if (autoA52C0924_val == "SpiderMine") {
            continue;
        }
        else if (autoA52C0924_val == "SpiderMineBurrowed") {
            continue;
        }
        else if (autoA52C0924_val == "Wraith") {
            continue;
        }
        else if (autoA52C0924_val == "VikingAssault") {
            continue;
        }
        else if (autoA52C0924_val == "VikingFighter") {
            continue;
        }
        else if (autoA52C0924_val == "Liberator") {
            continue;
        }
        else if (autoA52C0924_val == "LiberatorAG") {
            continue;
        }
        else if (autoA52C0924_val == "ScienceVessel") {
            continue;
        }
        else if (autoA52C0924_val == "Raven") {
            continue;
        }
        else if (autoA52C0924_val == "Battlecruiser") {
            continue;
        }
        else if (autoA52C0924_val == "Hercules") {
            continue;
        }
        else if (autoA52C0924_val == "Hatchery") {
            continue;
        }
        else if (autoA52C0924_val == "Lair") {
            continue;
        }
        else if (autoA52C0924_val == "Hive") {
            continue;
        }
        else if (autoA52C0924_val == "Extractor") {
            continue;
        }
        else if (autoA52C0924_val == "CreepTumor") {
            continue;
        }
        else if (autoA52C0924_val == "CreepTumorUsed") {
            continue;
        }
        else if (autoA52C0924_val == "CreepTumorBurrowed") {
            continue;
        }
        else if (autoA52C0924_val == "SpawningPool") {
            continue;
        }
        else if (autoA52C0924_val == "EvolutionChamber") {
            continue;
        }
        else if (autoA52C0924_val == "RoachWarren") {
            continue;
        }
        else if (autoA52C0924_val == "HydraliskDen") {
            continue;
        }
        else if (autoA52C0924_val == "LurkerDenMP") {
            continue;
        }
        else if (autoA52C0924_val == "LurkerDenMP") {
            continue;
        }
        else if (autoA52C0924_val == "Spire") {
            continue;
        }
        else if (autoA52C0924_val == "GreaterSpire") {
            continue;
        }
        else if (autoA52C0924_val == "InfestationPit") {
            continue;
        }
        else if (autoA52C0924_val == "NydusNetwork") {
            continue;
        }
        else if (autoA52C0924_val == "UltraliskCavern") {
            continue;
        }
        else if (autoA52C0924_val == "Cerebrate") {
            continue;
        }
        else if (autoA52C0924_val == "Overmind") {
            continue;
        }
        else if (autoA52C0924_val == "Larva") {
            continue;
        }
        else if (autoA52C0924_val == "SpineCrawler") {
            UnitKill(lv_unitIter);
            continue;
        }
        else if (autoA52C0924_val == "SpineCrawlerUprooted") {
            UnitKill(lv_unitIter);
            continue;
        }
        else if (autoA52C0924_val == "SporeCrawler") {
            UnitKill(lv_unitIter);
            continue;
        }
        else if (autoA52C0924_val == "SporeCrawlerUprooted") {
            UnitKill(lv_unitIter);
            continue;
        }
        else if (autoA52C0924_val == "BrutaliskEnemy") {
            continue;
        }
        else if (autoA52C0924_val == "BrutaliskBurrowedEnemy") {
            continue;
        }
        else if (autoA52C0924_val == "Leviathan") {
            continue;
        }
        else if (autoA52C0924_val == "HunterKiller") {
            continue;
        }
        else if (autoA52C0924_val == "HunterKillerBurrowed") {
            continue;
        }
        else {
            libNtve_gf_RescueUnit(lv_unitIter, gv_aLLY_NAKTUL, true);
            UnitIssueOrder(lv_unitIter, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            AIRemoveUnitFromAnyWaves(lv_unitIter);
            auto707C9EB3_val = UnitGetType(lv_unitIter);
            if (auto707C9EB3_val == "Drone") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowDroneDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Zergling") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowZerglingDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Baneling") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowBanelingDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "InfestedAbomination") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowInfestedAbominationDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Roach") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowRoachDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Queen") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowSwarmQueenDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Ravager") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowRavagerDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Hydralisk") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowHydraliskDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "LurkerMP") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowLurkerMPDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "SwarmHostMP") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("MorphToSwarmHostBurrowedMP", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Infestor") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowInfestorDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "Ultralisk") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueAddToEnd);
            }
            else if (auto707C9EB3_val == "HotSNoxious") {
                UnitIssueOrder(lv_unitIter, Order(AbilityCommand("BurrowUltraliskDown", 0)), c_orderQueueAddToEnd);
            }
            else {
                UnitIssueOrder(lv_unitIter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_airRetreatRegion)), c_orderQueueReplace);
            }
        }
    }
}

void gf_NaktulGroundUnitRemoval (region lp_targetRegion) {
    unitgroup autoB2F27301_g;
    int autoB2F27301_u;

    // Variable Declarations
    unit lv_unitIter;

    // Variable Initialization

    // Implementation
    autoB2F27301_g = UnitGroup(null, gv_aLLY_NAKTUL, lp_targetRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2F27301_u = 1;
    for ( ; autoB2F27301_u <= UnitGroupCount(autoB2F27301_g, c_unitCountAll) ; autoB2F27301_u += BoolToInt(lv_unitIter == UnitGroupUnit(autoB2F27301_g, autoB2F27301_u)) ) {
        lv_unitIter = UnitGroupUnit(autoB2F27301_g, autoB2F27301_u);
        if (((UnitGetType(lv_unitIter) == "DroneBurrowed") || (UnitGetType(lv_unitIter) == "ZerglingBurrowed") || (UnitGetType(lv_unitIter) == "BanelingBurrowed") || (UnitGetType(lv_unitIter) == "InfestedAbominationBurrowed") || (UnitGetType(lv_unitIter) == "RoachBurrowed") || (UnitGetType(lv_unitIter) == "QueenBurrowed") || (UnitGetType(lv_unitIter) == "RavagerBurrowed") || (UnitGetType(lv_unitIter) == "HydraliskBurrowed") || (UnitGetType(lv_unitIter) == "LurkerMPBurrowed") || (UnitGetType(lv_unitIter) == "InfestorBurrowed") || (UnitGetType(lv_unitIter) == "UltraliskBurrowed") || (UnitGetType(lv_unitIter) == "HotSNoxiousBurrowed"))) {
            UnitRemove(lv_unitIter);
        }

    }
}

bool gf_IsPlayerTerran (int lp_player) {
    // Implementation
    return false;
}

int gf_PlayBrainstormTransmission (soundlink lp_soundClip, playergroup lp_targetGroup) {
    // Implementation
    if ((lp_soundClip == SoundLink("TValerian03Adjutant00066", -1))) {
        PortraitSetModel(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "AdjutantPortrait_L", true);
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lp_targetGroup, true, false);
        libNtve_gf_PortraitSetAnim(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
        TransmissionSendAdvanced(lp_targetGroup, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "AdjutantPortrait_L", "Talk", lp_soundClip, StringExternal("Param/Value/50A8D453"), SoundSubtitleText(lp_soundClip), 0.0, c_transmissionDurationAdd, false);
    }
    else {
        PortraitSetActor(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "SwarmQueenPortrait");
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lp_targetGroup, true, false);
        libNtve_gf_PortraitSetAnim(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
        TransmissionSendAdvanced(lp_targetGroup, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "SwarmQueenPortrait", "Talk", lp_soundClip, StringExternal("Param/Value/76065367"), SoundSubtitleText(lp_soundClip), 0.0, c_transmissionDurationAdd, false);
    }
    return TransmissionLastSent();
}

void gf_BrainstormTransmission (soundlink lp_soundClip) {
    // Implementation
    TransmissionWait(gf_PlayBrainstormTransmission(lp_soundClip, libCOMI_gf_HumanPlayers()), 0.0);
    PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), libCOMI_gf_HumanPlayers(), false, false);
    libNtve_gf_ClearPortraitAnimation(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "TriggerPortraitAnim");
}

void gf_BrainstormSplitTransmission (int lp_specialPlayer, soundlink lp_soundClipSpecial, soundlink lp_soundClipOther) {
    playergroup autoDBF084E3_g;
    int autoDBF084E3_p;

    // Variable Declarations
    int lv_transmissionSpecial;
    int lv_transmissionOther;
    int lv_playerIter;
    playergroup lv_specialGroup;
    playergroup lv_otherGroup;
    fixed lv_specialLength;
    fixed lv_otherLength;

    // Variable Initialization
    lv_transmissionSpecial = c_invalidTransmissionId;
    lv_transmissionOther = c_invalidTransmissionId;
    lv_specialGroup = PlayerGroupEmpty();
    lv_otherGroup = PlayerGroupEmpty();

    // Implementation
    lv_specialLength = SoundLengthSync(lp_soundClipSpecial);
    lv_otherLength = SoundLengthSync(lp_soundClipOther);
    autoDBF084E3_g = libCOMI_gf_HumanPlayers();
    autoDBF084E3_p = 1;
    for ( ; autoDBF084E3_p <= PlayerGroupCount(autoDBF084E3_g) ; autoDBF084E3_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(autoDBF084E3_g, autoDBF084E3_p)) ) {
        lv_playerIter = PlayerGroupPlayer(autoDBF084E3_g, autoDBF084E3_p);
        if ((lv_playerIter == lp_specialPlayer)) {
            PlayerGroupAdd(lv_specialGroup, lv_playerIter);
        }
        else {
            PlayerGroupAdd(lv_otherGroup, lv_playerIter);
        }
    }
    lv_transmissionSpecial = gf_PlayBrainstormTransmission(lp_soundClipSpecial, lv_specialGroup);
    lv_transmissionOther = gf_PlayBrainstormTransmission(lp_soundClipOther, lv_otherGroup);
    if ((lv_otherLength <= lv_specialLength)) {
        TransmissionWait(lv_transmissionOther, 0.0);
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lv_otherGroup, false, false);
        TransmissionWait(lv_transmissionSpecial, 0.0);
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lv_specialGroup, false, false);
    }
    else {
        TransmissionWait(lv_transmissionSpecial, 0.0);
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lv_specialGroup, false, false);
        TransmissionWait(lv_transmissionOther, 0.0);
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lv_otherGroup, false, false);
    }
    libNtve_gf_ClearPortraitAnimation(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "TriggerPortraitAnim");
}

fixed gf_LongestSoundDuration (soundlink lp_sound1, soundlink lp_sound2) {
    // Variable Declarations
    fixed lv_soundLength1;
    fixed lv_soundLength2;

    // Variable Initialization

    // Implementation
    lv_soundLength1 = SoundLengthSync(lp_sound1);
    lv_soundLength2 = SoundLengthSync(lp_sound2);
    return MaxF(lv_soundLength1, lv_soundLength2);
}

fixed gf_ShortestSoundDuration (soundlink lp_sound1, soundlink lp_sound2) {
    // Variable Declarations
    fixed lv_soundLength1;
    fixed lv_soundLength2;

    // Variable Initialization

    // Implementation
    lv_soundLength1 = SoundLengthSync(lp_sound1);
    lv_soundLength2 = SoundLengthSync(lp_sound2);
    return MinF(lv_soundLength1, lv_soundLength2);
}

void gf_OvermindSpellScript (unit lp_spellcaster) {
    unitgroup auto21C5DBC9_g;
    int auto21C5DBC9_u;

    // Variable Declarations
    region lv_searchRange;
    unitgroup lv_candidates;
    unitgroup lv_grouping;
    int lv_largestGroupSize;
    int lv_thisGroupSize;
    fixed lv_highestHP_Mechanical;
    fixed lv_highestHP_NonHeroic;
    fixed lv_highestHP_Ground;
    fixed lv_highestHP_Overall;
    fixed lv_thisHP;
    fixed lv_thisEnergy;
    unit lv_highestHPUnit_Mechanical;
    unit lv_highestHPUnit_NonHeroic;
    unit lv_highestHPUnit_Ground;
    unit lv_highestHPUnit_Overall;
    unit lv_highestEnergyUnit;
    fixed lv_highestEnergyHPRatio;
    unit lv_groupCentralUnit;
    unit lv_unitIter;

    // Variable Initialization
    lv_candidates = UnitGroupEmpty();
    lv_grouping = UnitGroupEmpty();

    // Implementation
    lv_searchRange = RegionCircle(UnitGetPosition(lp_spellcaster), 19.0);
    lv_candidates = UnitGroupAlliance(gv_eNEMY_OVERMIND, c_unitAllianceEnemy, lv_searchRange, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21C5DBC9_g = lv_candidates;
    auto21C5DBC9_u = 1;
    for ( ; auto21C5DBC9_u <= UnitGroupCount(auto21C5DBC9_g, c_unitCountAll) ; auto21C5DBC9_u += BoolToInt(lv_unitIter == UnitGroupUnit(auto21C5DBC9_g, auto21C5DBC9_u)) ) {
        lv_unitIter = UnitGroupUnit(auto21C5DBC9_g, auto21C5DBC9_u);
        lv_thisHP = UnitGetPropertyFixed(lv_unitIter, c_unitPropLife, c_unitPropCurrent);
        lv_thisHP += UnitGetPropertyFixed(lv_unitIter, c_unitPropShields, c_unitPropCurrent);
        if ((lv_thisHP < 0.1)) {
            continue;
        }

        if ((lv_thisHP > lv_highestHP_Overall)) {
            lv_highestHP_Overall = lv_thisHP;
            lv_highestHPUnit_Overall = lv_unitIter;
        }

        if ((UnitGetPropertyFixed(lv_unitIter, c_unitPropEnergy, c_unitPropCurrent) > 0.0) && (UnitHasBehavior2(lv_unitIter, "ImplosionTempBuff") == false)) {
            lv_thisEnergy = UnitGetPropertyFixed(lv_unitIter, c_unitPropEnergy, c_unitPropCurrent);
            lv_thisEnergy /= lv_thisHP;
            if ((lv_highestEnergyHPRatio >= 1.0)) {
                if ((lv_thisEnergy < lv_highestEnergyHPRatio) && (lv_thisEnergy >= 1.0)) {
                    lv_highestEnergyHPRatio = lv_thisEnergy;
                    lv_highestEnergyUnit = lv_unitIter;
                }

            }
            else {
                if ((lv_thisEnergy > lv_highestEnergyHPRatio)) {
                    lv_highestEnergyHPRatio = lv_thisEnergy;
                    lv_highestEnergyUnit = lv_unitIter;
                }

            }
        }

        if ((UnitFilterMatch(lv_unitIter, gv_pLAYER_1, UnitFilter(0, 0, (1 << c_targetFilterHeroic), 0)) == true) && (UnitFilterMatch(lv_unitIter, gv_pLAYER_2, UnitFilter(0, 0, (1 << c_targetFilterHeroic), 0)) == true) && (UnitHasBehavior2(lv_unitIter, "HybridDominatorVoidGravitonPrison") == false) && (UnitHasBehavior2(lv_unitIter, "ImplosionTempBuff") == false) && (UnitHasBehavior2(lv_unitIter, "DarkArchonConfusion") == false)) {
            if ((UnitGetType(lv_unitIter) != "Ultralisk") && (UnitGetType(lv_unitIter) != "UltraliskBurrowed") && (UnitGetType(lv_unitIter) != "HotSTorrasque") && (UnitGetType(lv_unitIter) != "HotSTorrasqueBurrowed")) {
                if ((lv_thisHP > lv_highestHP_NonHeroic)) {
                    lv_highestHP_NonHeroic = lv_thisHP;
                    lv_highestHPUnit_NonHeroic = lv_unitIter;
                }

                if ((UnitFilterMatch(lv_unitIter, gv_eNEMY_OVERMIND, UnitFilter((1 << c_targetFilterGround), 0, 0, 0)) == true) && (lv_thisHP > lv_highestHP_Ground)) {
                    lv_highestHP_Ground = lv_thisHP;
                    lv_highestHPUnit_Ground = lv_unitIter;
                }

            }

            if ((UnitFilterMatch(lv_unitIter, gv_eNEMY_OVERMIND, UnitFilter((1 << c_targetFilterMechanical), 0, 0, 0)) == true) && (lv_thisHP > lv_highestHP_Mechanical)) {
                lv_highestHP_Mechanical = lv_thisHP;
                lv_highestHPUnit_Mechanical = lv_unitIter;
            }

        }

        lv_grouping = UnitGroupAlliance(gv_eNEMY_OVERMIND, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_unitIter), 1.5), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_thisGroupSize = MaxI(lv_largestGroupSize, UnitGroupCount(lv_grouping, c_unitCountAlive));
        if ((lv_thisGroupSize > lv_largestGroupSize)) {
            lv_largestGroupSize = lv_thisGroupSize;
            lv_groupCentralUnit = lv_unitIter;
        }

    }
    if ((gv_gameDifficulty != 2) && (lv_highestHP_NonHeroic > 65.0) && ((UnitFilterMatch(lv_highestHPUnit_NonHeroic, gv_eNEMY_OVERMIND, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0)) == true) || (lv_highestHP_NonHeroic > 100.0)) && (gv_mindControlOnCooldown == false)) {
        gf_OvermindCastMindControl(lp_spellcaster, lv_highestHPUnit_NonHeroic);
        return ;
    }

    if ((lv_largestGroupSize >= 4) && (gv_pulseOnCooldown == false) && (gv_stormOnCooldown == false)) {
        gf_OvermindCastUltrasonicPulse(lp_spellcaster, UnitGetPosition(lv_groupCentralUnit));
        return ;
    }

    if ((lv_largestGroupSize >= 3) && (gv_stormOnCooldown == false)) {
        gf_OvermindCastPsionicStorm(lp_spellcaster, UnitGetPosition(lv_groupCentralUnit));
        return ;
    }

    if ((lv_highestHP_Mechanical > 0.0) && (gv_implosionOnCooldown == false)) {
        gf_OvermindCastImplosion(lp_spellcaster, lv_highestHPUnit_Mechanical);
        return ;
    }

    if ((lv_highestEnergyHPRatio > 0.1) && (gv_feedbackOnCooldown == false)) {
        gf_OvermindCastFeedback(lp_spellcaster, lv_highestEnergyUnit);
        return ;
    }

    if ((lv_highestHP_Overall > 65.0) && ((UnitFilterMatch(lv_highestHPUnit_Overall, gv_eNEMY_OVERMIND, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0)) == true) || (lv_highestHP_Overall > 100.0)) && (gv_mindBlastOnCooldown == false)) {
        gf_OvermindCastMindBlast(lp_spellcaster, lv_highestHPUnit_Overall);
        return ;
    }

    if ((lv_largestGroupSize >= 4) && (gv_confusionOnCooldown == false)) {
        gf_OvermindCastConfusion(lp_spellcaster, UnitGetPosition(lv_groupCentralUnit));
        return ;
    }

    if ((lv_highestHP_Ground > 0.0) && (gv_gravitonPrisonOnCooldown == false)) {
        gf_OvermindCastGravitonPrison(lp_spellcaster, lv_highestHPUnit_Ground);
        return ;
    }

    if ((gv_confusionOnCooldown == false) && (lv_highestHP_NonHeroic > 0.0)) {
        gf_OvermindCastConfusion(lp_spellcaster, UnitGetPosition(lv_highestHPUnit_NonHeroic));
        return ;
    }

    if ((lv_highestHP_Overall > 65.0) && (gv_stormOnCooldown == false)) {
        gf_OvermindCastPsionicStorm(lp_spellcaster, UnitGetPosition(lv_groupCentralUnit));
        return ;
    }

}

trigger auto_gf_OvermindCastPsionicStorm_Trigger = null;
unit auto_gf_OvermindCastPsionicStorm_lp_spellcaster;
point auto_gf_OvermindCastPsionicStorm_lp_targetPoint;

void gf_OvermindCastPsionicStorm (unit lp_spellcaster, point lp_targetPoint) {
    auto_gf_OvermindCastPsionicStorm_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastPsionicStorm_lp_targetPoint = lp_targetPoint;

    if (auto_gf_OvermindCastPsionicStorm_Trigger == null) {
        auto_gf_OvermindCastPsionicStorm_Trigger = TriggerCreate("auto_gf_OvermindCastPsionicStorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastPsionicStorm_Trigger, false, false);
}

bool auto_gf_OvermindCastPsionicStorm_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastPsionicStorm_lp_spellcaster;
    point lp_targetPoint = auto_gf_OvermindCastPsionicStorm_lp_targetPoint;

    // Implementation
    gv_stormOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingPoint(AbilityCommand("PsiStormEnemy", 0), lp_targetPoint), c_orderQueueReplace);
    Wait(5.5, c_timeGame);
    gv_stormOnCooldown = false;
    return true;
}

trigger auto_gf_OvermindCastImplosion_Trigger = null;
unit auto_gf_OvermindCastImplosion_lp_spellcaster;
unit auto_gf_OvermindCastImplosion_lp_targetUnit;

void gf_OvermindCastImplosion (unit lp_spellcaster, unit lp_targetUnit) {
    auto_gf_OvermindCastImplosion_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastImplosion_lp_targetUnit = lp_targetUnit;

    if (auto_gf_OvermindCastImplosion_Trigger == null) {
        auto_gf_OvermindCastImplosion_Trigger = TriggerCreate("auto_gf_OvermindCastImplosion_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastImplosion_Trigger, false, false);
}

bool auto_gf_OvermindCastImplosion_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastImplosion_lp_spellcaster;
    unit lp_targetUnit = auto_gf_OvermindCastImplosion_lp_targetUnit;

    // Implementation
    gv_implosionOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingUnit(AbilityCommand("Implosion", 0), lp_targetUnit), c_orderQueueReplace);
    Wait(7.5, c_timeGame);
    gv_implosionOnCooldown = false;
    return true;
}

trigger auto_gf_OvermindCastConfusion_Trigger = null;
unit auto_gf_OvermindCastConfusion_lp_spellcaster;
point auto_gf_OvermindCastConfusion_lp_targetPoint;

void gf_OvermindCastConfusion (unit lp_spellcaster, point lp_targetPoint) {
    auto_gf_OvermindCastConfusion_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastConfusion_lp_targetPoint = lp_targetPoint;

    if (auto_gf_OvermindCastConfusion_Trigger == null) {
        auto_gf_OvermindCastConfusion_Trigger = TriggerCreate("auto_gf_OvermindCastConfusion_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastConfusion_Trigger, false, false);
}

bool auto_gf_OvermindCastConfusion_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastConfusion_lp_spellcaster;
    point lp_targetPoint = auto_gf_OvermindCastConfusion_lp_targetPoint;

    // Implementation
    gv_confusionOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingPoint(AbilityCommand("OvermindConfusion", 0), lp_targetPoint), c_orderQueueReplace);
    Wait(5.5, c_timeGame);
    gv_confusionOnCooldown = false;
    return true;
}

trigger auto_gf_OvermindCastFeedback_Trigger = null;
unit auto_gf_OvermindCastFeedback_lp_spellcaster;
unit auto_gf_OvermindCastFeedback_lp_targetUnit;

void gf_OvermindCastFeedback (unit lp_spellcaster, unit lp_targetUnit) {
    auto_gf_OvermindCastFeedback_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastFeedback_lp_targetUnit = lp_targetUnit;

    if (auto_gf_OvermindCastFeedback_Trigger == null) {
        auto_gf_OvermindCastFeedback_Trigger = TriggerCreate("auto_gf_OvermindCastFeedback_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastFeedback_Trigger, false, false);
}

bool auto_gf_OvermindCastFeedback_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastFeedback_lp_spellcaster;
    unit lp_targetUnit = auto_gf_OvermindCastFeedback_lp_targetUnit;

    // Implementation
    gv_feedbackOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingUnit(AbilityCommand("OvermindFeedback", 0), lp_targetUnit), c_orderQueueReplace);
    Wait(5.5, c_timeGame);
    gv_feedbackOnCooldown = false;
    return true;
}

trigger auto_gf_OvermindCastMindBlast_Trigger = null;
unit auto_gf_OvermindCastMindBlast_lp_spellcaster;
unit auto_gf_OvermindCastMindBlast_lp_targetUnit;

void gf_OvermindCastMindBlast (unit lp_spellcaster, unit lp_targetUnit) {
    auto_gf_OvermindCastMindBlast_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastMindBlast_lp_targetUnit = lp_targetUnit;

    if (auto_gf_OvermindCastMindBlast_Trigger == null) {
        auto_gf_OvermindCastMindBlast_Trigger = TriggerCreate("auto_gf_OvermindCastMindBlast_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastMindBlast_Trigger, false, false);
}

bool auto_gf_OvermindCastMindBlast_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastMindBlast_lp_spellcaster;
    unit lp_targetUnit = auto_gf_OvermindCastMindBlast_lp_targetUnit;

    // Implementation
    gv_mindBlastOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingUnit(AbilityCommand("OvermindMindBlast", 0), lp_targetUnit), c_orderQueueReplace);
    Wait(7.5, c_timeGame);
    gv_mindBlastOnCooldown = false;
    return true;
}

trigger auto_gf_OvermindCastUltrasonicPulse_Trigger = null;
unit auto_gf_OvermindCastUltrasonicPulse_lp_spellcaster;
point auto_gf_OvermindCastUltrasonicPulse_lp_targetPoint;

void gf_OvermindCastUltrasonicPulse (unit lp_spellcaster, point lp_targetPoint) {
    auto_gf_OvermindCastUltrasonicPulse_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastUltrasonicPulse_lp_targetPoint = lp_targetPoint;

    if (auto_gf_OvermindCastUltrasonicPulse_Trigger == null) {
        auto_gf_OvermindCastUltrasonicPulse_Trigger = TriggerCreate("auto_gf_OvermindCastUltrasonicPulse_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastUltrasonicPulse_Trigger, false, false);
}

bool auto_gf_OvermindCastUltrasonicPulse_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastUltrasonicPulse_lp_spellcaster;
    point lp_targetPoint = auto_gf_OvermindCastUltrasonicPulse_lp_targetPoint;

    // Implementation
    gv_pulseOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingPoint(AbilityCommand("OvermindUltrasonicPulse", 0), lp_targetPoint), c_orderQueueReplace);
    Wait(7.5, c_timeGame);
    gv_pulseOnCooldown = false;
    return true;
}

trigger auto_gf_OvermindCastMindControl_Trigger = null;
unit auto_gf_OvermindCastMindControl_lp_spellcaster;
unit auto_gf_OvermindCastMindControl_lp_targetUnit;

void gf_OvermindCastMindControl (unit lp_spellcaster, unit lp_targetUnit) {
    auto_gf_OvermindCastMindControl_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastMindControl_lp_targetUnit = lp_targetUnit;

    if (auto_gf_OvermindCastMindControl_Trigger == null) {
        auto_gf_OvermindCastMindControl_Trigger = TriggerCreate("auto_gf_OvermindCastMindControl_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastMindControl_Trigger, false, false);
}

bool auto_gf_OvermindCastMindControl_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastMindControl_lp_spellcaster;
    unit lp_targetUnit = auto_gf_OvermindCastMindControl_lp_targetUnit;

    // Implementation
    gv_mindControlOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingUnit(AbilityCommand("OvermindMindControl", 0), lp_targetUnit), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    AISetUnitSuicide(lp_targetUnit, true);
    Wait(11.0, c_timeGame);
    gv_mindControlOnCooldown = false;
    return true;
}

trigger auto_gf_OvermindCastGravitonPrison_Trigger = null;
unit auto_gf_OvermindCastGravitonPrison_lp_spellcaster;
unit auto_gf_OvermindCastGravitonPrison_lp_targetUnit;

void gf_OvermindCastGravitonPrison (unit lp_spellcaster, unit lp_targetUnit) {
    auto_gf_OvermindCastGravitonPrison_lp_spellcaster = lp_spellcaster;
    auto_gf_OvermindCastGravitonPrison_lp_targetUnit = lp_targetUnit;

    if (auto_gf_OvermindCastGravitonPrison_Trigger == null) {
        auto_gf_OvermindCastGravitonPrison_Trigger = TriggerCreate("auto_gf_OvermindCastGravitonPrison_TriggerFunc");
    }

    TriggerExecute(auto_gf_OvermindCastGravitonPrison_Trigger, false, false);
}

bool auto_gf_OvermindCastGravitonPrison_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spellcaster = auto_gf_OvermindCastGravitonPrison_lp_spellcaster;
    unit lp_targetUnit = auto_gf_OvermindCastGravitonPrison_lp_targetUnit;

    // Implementation
    gv_gravitonPrisonOnCooldown = true;
    UnitIssueOrder(lp_spellcaster, OrderTargetingUnit(AbilityCommand("OvermindGravitonPrison", 0), lp_targetUnit), c_orderQueueReplace);
    Wait(5.5, c_timeGame);
    gv_gravitonPrisonOnCooldown = false;
    return true;
}

void gf_DetermineAttackWaveType () {
    unitgroup auto8D8725B4_g;
    int auto8D8725B4_u;
    string autoF3C729C0_val;

    // Variable Declarations
    unit lv_currentUnit;
    unitgroup lv_attackWave;

    // Variable Initialization
    lv_attackWave = UnitGroupEmpty();

    // Implementation
    lv_attackWave = libCOMI_gf_LastCreatedCoopAttackForce();
    auto8D8725B4_g = lv_attackWave;
    auto8D8725B4_u = 1;
    for ( ; auto8D8725B4_u <= UnitGroupCount(auto8D8725B4_g, c_unitCountAll) ; auto8D8725B4_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto8D8725B4_g, auto8D8725B4_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto8D8725B4_g, auto8D8725B4_u);
        autoF3C729C0_val = UnitGetType(lv_currentUnit);
        if (autoF3C729C0_val == "Firebat") {
            gv_AttackType = gv_atTERRAN_BIO;
            return ;
        }
        else if (autoF3C729C0_val == "Marine") {
            gv_AttackType = gv_atTERRAN_BIO;
            return ;
        }
        else if (autoF3C729C0_val == "Reaper") {
            gv_AttackType = gv_atTERRAN_SHADOW;
            return ;
        }
        else if (autoF3C729C0_val == "VikingFighter") {
            gv_AttackType = gv_atTERRAN_SKY;
            return ;
        }
        else if (autoF3C729C0_val == "VikingAssault") {
            gv_AttackType = gv_atTERRAN_SKY;
            return ;
        }
        else if (autoF3C729C0_val == "Banshee") {
            gv_AttackType = gv_atTERRAN_SKY;
            return ;
        }
        else if (autoF3C729C0_val == "Liberator") {
            gv_AttackType = gv_atTERRAN_SKY;
            return ;
        }
        else if (autoF3C729C0_val == "LiberatorAG") {
            gv_AttackType = gv_atTERRAN_SKY;
            return ;
        }
        else if (autoF3C729C0_val == "Hellion") {
            gv_AttackType = gv_atTERRAN_MECH;
            return ;
        }
        else if (autoF3C729C0_val == "HellionTank") {
            gv_AttackType = gv_atTERRAN_MECH;
            return ;
        }
        else if (autoF3C729C0_val == "WarHound") {
            gv_AttackType = gv_atTERRAN_MECH;
            return ;
        }
        else if (autoF3C729C0_val == "SiegeTank") {
            gv_AttackType = gv_atTERRAN_MECH;
            return ;
        }
        else if (autoF3C729C0_val == "SiegeTankSieged") {
            gv_AttackType = gv_atTERRAN_MECH;
            return ;
        }
        else {
            gv_AttackType = gv_atTERRAN_SHADOW;
        }
    }
}

void gf_CreateBrutalisk () {
    // Implementation
    gv_brutaliskWaveNo += 1;
    gv_attackFlavour = gv_afBRUTALISK;
    UnitCreate(1, "BrutaliskEnemy", 0, gv_eNEMY_OVERMIND, PointFromId(47149978), 270.0);
    libCOMI_gf_DropPodWarpInUnitGroup(UnitLastCreatedGroup(), PointFromId(1679632823));
    gv_brutalisk = UnitLastCreated();
    AIAttackWaveUseGroup(gv_eNEMY_OVERMIND, UnitLastCreatedGroup());
    if ((gv_gameDifficulty == 4)) {
        UnitSetPropertyFixed(gv_brutalisk, c_unitPropLifeMax, 3500.0);
    }
    else {
        if ((gv_gameDifficulty == 3)) {
            UnitSetPropertyFixed(gv_brutalisk, c_unitPropLifeMax, 2500.0);
        }

    }
    UnitSetPropertyFixed(gv_brutalisk, c_unitPropLifePercent, 100.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_brutalisk), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A0DA713A"));
    PingSetUnit(PingLastCreated(), gv_brutalisk);
    libARRA_gf_StorePingForUnit(gv_brutalisk, 0, PingLastCreated());
}

void gf_CreateLeviathan () {
    // Implementation
    gv_attackFlavour = gv_afLEVIATHAN;
    UnitCreate(1, "Leviathan", 0, gv_eNEMY_OVERMIND, PointFromId(1679632823), 270.0);
    gv_leviathan = UnitLastCreated();
    libCOMI_gf_DropPodWarpInUnitGroup(UnitLastCreatedGroup(), PointFromId(1679632823));
    AIAttackWaveUseGroup(gv_eNEMY_OVERMIND, UnitLastCreatedGroup());
    if ((gv_gameDifficulty == 4)) {
        UnitSetPropertyFixed(gv_leviathan, c_unitPropLifeMax, 4000.0);
    }
    else {
        if ((gv_gameDifficulty == 3)) {
            UnitSetPropertyFixed(gv_leviathan, c_unitPropLifeMax, 3000.0);
        }

    }
    UnitSetPropertyFixed(gv_leviathan, c_unitPropLifePercent, 100.0);
    gv_leviathanAttackWave = AIUnitGetWave(gv_leviathan);
}

void gf_AddUnittoCurrentWave (string lp_unitType, int lp_count, int lp_player, point lp_point) {
    // Implementation
    UnitCreate(lp_count, lp_unitType, 0, lp_player, lp_point, 270.0);
    libCOMI_gf_DropPodWarpInUnitGroup(UnitLastCreatedGroup(), lp_point);
    AIAttackWaveUseGroup(lp_player, UnitLastCreatedGroup());
}

trigger auto_gf_AddZergUnitstoAttackWave_Trigger = null;
point auto_gf_AddZergUnitstoAttackWave_lp_location;

void gf_AddZergUnitstoAttackWave (point lp_location) {
    auto_gf_AddZergUnitstoAttackWave_lp_location = lp_location;

    if (auto_gf_AddZergUnitstoAttackWave_Trigger == null) {
        auto_gf_AddZergUnitstoAttackWave_Trigger = TriggerCreate("auto_gf_AddZergUnitstoAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddZergUnitstoAttackWave_Trigger, false, false);
}

bool auto_gf_AddZergUnitstoAttackWave_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_gf_AddZergUnitstoAttackWave_lp_location;

    // Implementation
    UnitGroupLoopBegin(libCOMI_gf_LastCreatedCoopAttackForce());
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(EventUnit()) == "VikingFighter") || (UnitGetType(EventUnit()) == "VikingAssault") || (UnitGetType(EventUnit()) == "Banshee") || (UnitGetType(EventUnit()) == "Battlecruiser") || (UnitGetType(EventUnit()) == "Phoenix") || (UnitGetType(EventUnit()) == "Oracle") || (UnitGetType(EventUnit()) == "VoidRay") || (UnitGetType(EventUnit()) == "Carrier") || (UnitGetType(EventUnit()) == "Tempest") || (UnitGetType(EventUnit()) == "Mutalisk") || (UnitGetType(EventUnit()) == "BroodLord"))) {
            gf_AddUnittoCurrentWave("Devourer", 2, UnitGetOwner(EventUnit()), lp_location);
            gf_AddUnittoCurrentWave("Mutalisk", 2, UnitGetOwner(EventUnit()), lp_location);
            gf_AddUnittoCurrentWave("Guardian", 2, UnitGetOwner(EventUnit()), lp_location);
            return true;
        }
        else if (((UnitGetType(EventUnit()) == "Marauder") || (UnitGetType(EventUnit()) == "Firebat") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "Archon"))) {
            gf_AddUnittoCurrentWave("Roach", 4, UnitGetOwner(EventUnit()), lp_location);
            gf_AddUnittoCurrentWave("Hydralisk", 4, UnitGetOwner(EventUnit()), lp_location);
            gf_AddUnittoCurrentWave("Zergling", 8, UnitGetOwner(EventUnit()), lp_location);
            return true;
        }
        else if (((UnitGetType(EventUnit()) == "SiegeTank") || (UnitGetType(EventUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnit()) == "Thor") || (UnitGetType(EventUnit()) == "ThorAP") || (UnitGetType(EventUnit()) == "Colossus") || (UnitGetType(EventUnit()) == "Disruptor") || (UnitGetType(EventUnit()) == "Reaver"))) {
            return true;
            gf_AddUnittoCurrentWave("Ultralisk", 1, UnitGetOwner(EventUnit()), lp_location);
            gf_AddUnittoCurrentWave("Hydralisk", 4, UnitGetOwner(EventUnit()), lp_location);
        }
        else if (((UnitGetType(EventUnit()) == "Roach") || (UnitGetType(EventUnit()) == "Hydralisk") || (UnitGetType(EventUnit()) == "Ultralisk"))) {
            libCOMI_gf_AddAttackWaveUnitType(3, "Queen");
            libCOMI_gf_AddAttackWaveUnitType(3, "Infestor");
            return true;
        }
    }
    UnitGroupLoopEnd();
    return true;
}

void gf_PlotBrutaliskPath (int lp_targetPlayer) {
    int auto52D41622_val;
    int auto253C50B2_val;

    // Variable Declarations
    int lv_randomPath;

    // Variable Initialization

    // Implementation
    lv_randomPath = RandomInt(0, 3);
    if ((lp_targetPlayer == gv_pLAYER_1)) {
        auto253C50B2_val = lv_randomPath;
        if (auto253C50B2_val == 1) {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1617665258), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
        }
        else if (auto253C50B2_val == 2) {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1617665258), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
        }
        else if (auto253C50B2_val == 3) {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1649933459), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
        }
        else {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1170993917), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
        }
    }
    else {
        auto52D41622_val = lv_randomPath;
        if (auto52D41622_val == 1) {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(307245764), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
        }
        else if (auto52D41622_val == 2) {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(307245764), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
        }
        else if (auto52D41622_val == 3) {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(362326409), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
        }
        else {
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1170993917), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1899600828), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(38696207), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(1930310231), false);
            AIAttackWaveAddWaypoint(gv_eNEMY_OVERMIND, PointFromId(524821060), false);
        }
    }
}

void gf_SetTargetLocation (int lp_player) {
    // Variable Declarations
    unitgroup lv_playerBuildingsInNatural;
    unitgroup lv_playerBuildingsInCerebrateBase;
    region lv_targetRegion;
    point lv_targetPoint;
    point lv_cerebrateWaypoint;
    point lv_valleyWaypoint;
    point lv_naturalWaypoint;

    // Variable Initialization
    lv_playerBuildingsInNatural = UnitGroupEmpty();
    lv_playerBuildingsInCerebrateBase = UnitGroupEmpty();

    // Implementation
    if ((lp_player == gv_pLAYER_2)) {
        lv_naturalWaypoint = PointFromId(38696207);
        lv_valleyWaypoint = PointFromId(1034484148);
        lv_playerBuildingsInNatural = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_eNEMY_AMON_1, c_unitAllianceEnemy, RegionFromId(1), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        lv_playerBuildingsInCerebrateBase = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_eNEMY_AMON_1, c_unitAllianceEnemy, RegionFromId(20), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    }
    else {
        lv_naturalWaypoint = PointFromId(524821060);
        lv_valleyWaypoint = PointFromId(827787221);
        lv_playerBuildingsInNatural = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_eNEMY_AMON_1, c_unitAllianceEnemy, RegionFromId(5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        lv_playerBuildingsInCerebrateBase = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_eNEMY_AMON_1, c_unitAllianceEnemy, RegionFromId(17), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    }
    if ((UnitGroupCount(lv_playerBuildingsInNatural, c_unitCountAlive) > 0)) {
        libCOMI_gf_AddAttackForceWaypoint(lv_cerebrateWaypoint, false);
        if ((RandomInt(0, 1) == 1)) {
            libCOMI_gf_AddAttackForceWaypoint(lv_cerebrateWaypoint, false);
            libCOMI_gf_AddAttackForceWaypoint(lv_naturalWaypoint, false);
        }
        else {
            if (((UnitGroupCount(lv_playerBuildingsInCerebrateBase, c_unitCountAlive) > 0) || (RandomInt(0, 1) == 1))) {
                libCOMI_gf_AddAttackForceWaypoint(lv_cerebrateWaypoint, false);
            }
            else {
                libCOMI_gf_AddAttackForceWaypoint(lv_valleyWaypoint, false);
            }
        }
    }
    else {
        if (((UnitGroupCount(lv_playerBuildingsInCerebrateBase, c_unitCountAlive) > 0) || (RandomInt(0, 1) == 1))) {
            libCOMI_gf_AddAttackForceWaypoint(lv_cerebrateWaypoint, false);
        }
        else {
            libCOMI_gf_AddAttackForceWaypoint(lv_valleyWaypoint, false);
        }
    }
    gf_SetTargetPlayer(lp_player);
}

void gf_SetTargetPlayer (int lp_player) {
    // Variable Declarations
    point lv_targetPoint;

    // Variable Initialization

    // Implementation
    if ((lp_player == gv_pLAYER_2)) {
        lv_targetPoint = PointFromId(1899600828);
    }
    else {
        lv_targetPoint = PointFromId(1930310231);
    }
    AIAttackWaveSetTargetPoint(gv_eNEMY_AMON_1, lv_targetPoint);
    AIAttackWaveSetTargetPoint(gv_eNEMY_AMON_2, lv_targetPoint);
    AIAttackWaveSetTargetPoint(gv_eNEMY_OVERMIND, lv_targetPoint);
}

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(1.0, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

}

trigger auto_gf_RunRepeatingAttackWavefromMissionTime_Trigger = null;
trigger auto_gf_RunRepeatingAttackWavefromMissionTime_lp_attackWave;
fixed auto_gf_RunRepeatingAttackWavefromMissionTime_lp_time;
fixed auto_gf_RunRepeatingAttackWavefromMissionTime_lp_delta;

void gf_RunRepeatingAttackWavefromMissionTime (trigger lp_attackWave, fixed lp_time, fixed lp_delta) {
    auto_gf_RunRepeatingAttackWavefromMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunRepeatingAttackWavefromMissionTime_lp_time = lp_time;
    auto_gf_RunRepeatingAttackWavefromMissionTime_lp_delta = lp_delta;

    if (auto_gf_RunRepeatingAttackWavefromMissionTime_Trigger == null) {
        auto_gf_RunRepeatingAttackWavefromMissionTime_Trigger = TriggerCreate("auto_gf_RunRepeatingAttackWavefromMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunRepeatingAttackWavefromMissionTime_Trigger, false, false);
}

bool auto_gf_RunRepeatingAttackWavefromMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunRepeatingAttackWavefromMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunRepeatingAttackWavefromMissionTime_lp_time;
    fixed lp_delta = auto_gf_RunRepeatingAttackWavefromMissionTime_lp_delta;

    // Variable Declarations
    fixed lv_triggerTime;

    // Variable Initialization

    // Implementation
    lv_triggerTime = lp_time;
    while (true) {
        while (!((lv_triggerTime <= GameGetMissionTime()))) {
            Wait(0.3, c_timeAI);
        }
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        TriggerExecute(lp_attackWave, true, false);
        lv_triggerTime += lp_delta;
    }
    return true;
}

point gf_AttackWaveSpawnCentre () {
    // Implementation
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    gf_SetTargetPlayer(gv_AITargetPlayer);
    return PointFromId(47149978);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1: Map Start
//--------------------------------------------------------------------------------------------------
bool gt__1MapStart_Func (bool testConds, bool runActions) {
    string auto5C34AED8_val;
    string auto50760B47_val;
    playergroup auto7ADC1B90_g;
    int auto7ADC1B90_p;
    string autoA68F6373_val;
    string autoB366A338_val;
    string auto0F29F30B_val;
    string auto80080B6F_val;
    string autoB5A94328_val;

    // Variable Declarations
    int lv_playerIter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }


    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt__3LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1MapStart_Init () {
    gt__1MapStart = TriggerCreate("gt__1MapStart_Func");
    TriggerAddEventMapInit(gt__1MapStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2: Player Setup
//--------------------------------------------------------------------------------------------------
bool gt__2PlayerSetup_Func (bool testConds, bool runActions) {
    playergroup auto8499F428_g;
    int auto8499F428_p;
    playergroup auto2BA949F3_g;
    int auto2BA949F3_p;
    playergroup auto7641527A_g;
    int auto7641527A_p;
    playergroup auto5B51480A_g;
    int auto5B51480A_p;

    // Variable Declarations
    int lv_playerIterEnemy;
    int lv_playerIterEnemy2;
    int lv_playerIterAlly;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetDifficulty(gv_pLAYER_1, gv_gameDifficulty);
    PlayerSetDifficulty(gv_pLAYER_2, gv_gameDifficulty);
    PlayerSetDifficulty(gv_eNEMY_AMON_1, gv_gameDifficulty);
    PlayerSetDifficulty(gv_eNEMY_AMON_2, gv_gameDifficulty);
    PlayerSetDifficulty(gv_eNEMY_OVERMIND, gv_gameDifficulty);
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        AISetDifficulty(gv_eNEMY_AMON_1, c_diffFleeDanger, true);
        AISetDifficulty(gv_eNEMY_OVERMIND, c_diffFleeDanger, true);
        AISetDifficulty(gv_eNEMY_AMON_2, c_diffFleeDanger, true);
        if ((gv_gameDifficulty == 4)) {
            AISetDifficulty(gv_eNEMY_AMON_1, c_diffAllowKiting, true);
            AISetDifficulty(gv_eNEMY_AMON_2, c_diffAllowKiting, true);
            AISetDifficulty(gv_eNEMY_OVERMIND, c_diffAllowKiting, true);
        }

    }

    PlayerGroupAdd(gv_enemyGroup, gv_eNEMY_AMON_1);
    PlayerGroupAdd(gv_enemyGroup, gv_eNEMY_AMON_2);
    PlayerGroupAdd(gv_enemyGroup, gv_eNEMY_OVERMIND);

    auto2BA949F3_g = gv_enemyGroup; 
    auto2BA949F3_p = 1;
    for ( ; auto2BA949F3_p <= PlayerGroupCount(auto2BA949F3_g) ; auto2BA949F3_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(auto2BA949F3_g, auto2BA949F3_p)) ) {
        lv_playerIterEnemy = PlayerGroupPlayer(auto2BA949F3_g, auto2BA949F3_p);
        libCOMI_gf_SetAllianceOneWayCoop(lv_playerIterEnemy, gv_aLLY_NAKTUL, libNtve_ge_AllianceSetting_Enemy);
        libCOMI_gf_SetAllianceOneWayCoop(gv_aLLY_NAKTUL, lv_playerIterEnemy, libNtve_ge_AllianceSetting_Neutral);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2PlayerSetup_Init () {
    gt__2PlayerSetup = TriggerCreate("gt__2PlayerSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3: Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt__3LoadingComplete_Func (bool testConds, bool runActions) {
    playergroup auto5BBE7DD4_g;
    int auto5BBE7DD4_p;

    // Variable Declarations
    int lv_playerIter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt__2PlayerSetup, true, false);
    auto5BBE7DD4_g = libCOMI_gf_HumanPlayers();
    auto5BBE7DD4_p = 1;
    for ( ; auto5BBE7DD4_p <= PlayerGroupCount(auto5BBE7DD4_g) ; auto5BBE7DD4_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(auto5BBE7DD4_g, auto5BBE7DD4_p)) ) {
        lv_playerIter = PlayerGroupPlayer(auto5BBE7DD4_g, auto5BBE7DD4_p);
    }
    TriggerExecute(gt__4Technology, true, false);
    TriggerExecute(gt__5Units, true, false);
    TriggerExecute(gt__6MusicSound, true, false);
    TriggerExecute(gt__7Environment, true, false);
    TriggerExecute(gt__8Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3LoadingComplete_Init () {
    gt__3LoadingComplete = TriggerCreate("gt__3LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4: Technology
//--------------------------------------------------------------------------------------------------
bool gt__4Technology_Func (bool testConds, bool runActions) {
    playergroup autoE2A9BCD2_g;
    int autoE2A9BCD2_p;

    // Variable Declarations
    int lv_playerIter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_eNEMY_OVERMIND, AbilityCommand("CreepTumorBuild", 2), false);
    TechTreeAbilityAllow(gv_eNEMY_OVERMIND, AbilityCommand("CreepTumorBuild", 0), false);
    TechTreeAbilityAllow(gv_eNEMY_OVERMIND, AbilityCommand("CreepTumorUsed", 0), false);
    TechTreeAbilityAllow(gv_eNEMY_OVERMIND, AbilityCommand("QueenBuild", 0), false);
    TechTreeAbilityAllow(gv_eNEMY_OVERMIND, AbilityCommand("QueenBuild", 2), false);
    TechTreeAbilityAllow(gv_eNEMY_OVERMIND, AbilityCommand("BurrowDroneDown", 0), false);
    TechTreeUpgradeAddLevel(gv_aLLY_NAKTUL, "overlordspeed", 1);
    autoE2A9BCD2_g = gv_enemyGroup; 
    autoE2A9BCD2_p = 1;
    for ( ; autoE2A9BCD2_p <= PlayerGroupCount(autoE2A9BCD2_g) ; autoE2A9BCD2_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(autoE2A9BCD2_g, autoE2A9BCD2_p)) ) {
        lv_playerIter = PlayerGroupPlayer(autoE2A9BCD2_g, autoE2A9BCD2_p);
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            TechTreeUpgradeAddLevel(lv_playerIter, "FireSuppressionSystems", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "ShieldWall", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "GlialReconstitution", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "AbathurBioMechanicalTransfusion", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "ChitinousPlating", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "WraithCloak", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "DevourerAoEDamage", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "HotSViciousGlaive", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "HotSRapidRegeneration", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "ProjectileAccelerators", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "SiegeTankShapedBlast", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "HotSBanelingCorrosiveBile", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "SwannCommanderVehicleWeaponRange", 1);
            if ((gv_gameDifficulty == 4)) {
                TechTreeUpgradeAddLevel(lv_playerIter, "TerranBuildingArmor", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "zerglingattackspeed", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "hydraliskspeed", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "RegenerativeBioSteel", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "HotSTissueAssimilation", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "HotSPressurizedGlands", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "NeuralParasite", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "GuardianAttackRangeIncrease", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "MutaliskSunderingGlave", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "ScourgeSplashDamage", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "DrillClaws", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "MaelstromRounds", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "AresClassWeaponsSystemViking", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "HotSRupture", 1);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4Technology_Init () {
    gt__4Technology = TriggerCreate("gt__4Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 5: Units
//--------------------------------------------------------------------------------------------------
bool gt__5Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__5Units_Init () {
    gt__5Units = TriggerCreate("gt__5Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 6: Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt__6MusicSound_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__6MusicSound_Init () {
    gt__6MusicSound = TriggerCreate("gt__6MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 7: Environment
//--------------------------------------------------------------------------------------------------
bool gt__7Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    doodad lv_lightningIter;
    point lv_thisPoint;
    fixed lv_x;
    fixed lv_y;
    fixed lv_w;
    fixed lv_h;
    fixed lv_increment;

    // Variable Initialization
    lv_increment = 11.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/353074]3") == "0002")) {
        lv_w = libNtve_gf_WidthOfRegion(RegionFromId(23));
        lv_h = libNtve_gf_HeightOfRegion(RegionFromId(23));
        while ((lv_y < lv_h)) {
            while ((lv_x < lv_w)) {
                lv_thisPoint = Point(lv_x, lv_y);
                if ((RegionContainsPoint(RegionFromId(23), lv_thisPoint) == true)) {
                    libNtve_gf_CreateActorAtPoint("RainEmitterLarge", lv_thisPoint);
                }

                lv_x += lv_increment;
            }
            lv_x = 0.0;
            lv_y += lv_increment;
        }
    }

    GameTimeOfDaySet("04:00:00");
    VisExploreArea(gv_pLAYER_1, RegionFromId(6), true, false);
    VisExploreArea(gv_pLAYER_1, RegionFromId(3), true, false);
    VisExploreArea(gv_pLAYER_2, RegionFromId(6), true, false);
    VisExploreArea(gv_pLAYER_2, RegionFromId(3), true, false);
    VisExploreArea(gv_pLAYER_1, RegionFromId(7), true, false);
    VisExploreArea(gv_pLAYER_1, RegionFromId(8), true, false);
    VisExploreArea(gv_pLAYER_2, RegionFromId(7), true, false);
    VisExploreArea(gv_pLAYER_2, RegionFromId(8), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__7Environment_Init () {
    gt__7Environment = TriggerCreate("gt__7Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 8: Difficulties
//--------------------------------------------------------------------------------------------------
bool gt__8Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mainObjectiveLife;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameDifficulty != 4)) {
        UnitRemove(UnitFromId(649904276));
        UnitRemove(UnitFromId(593664082));
        UnitRemove(UnitFromId(2100189226));
        UnitRemove(UnitFromId(1733194844));
        UnitRemove(UnitFromId(1880199512));
        UnitRemove(UnitFromId(2091968492));
        UnitRemove(UnitFromId(1374571457));
        UnitRemove(UnitFromId(1476035045));
        UnitRemove(UnitFromId(1784281075));
        UnitRemove(UnitFromId(1507022723));
        UnitRemove(UnitFromId(847808932));
        UnitRemove(UnitFromId(1226043273));
        UnitRemove(UnitFromId(549385025));
        UnitRemove(UnitFromId(1246186848));
        UnitRemove(UnitFromId(2000190646));
        UnitRemove(UnitFromId(242807692));
        UnitRemove(UnitFromId(1465263326));
        UnitRemove(UnitFromId(264884041));
        if ((gv_gameDifficulty != 3)) {
            UnitRemove(UnitFromId(1811882317));
            UnitRemove(UnitFromId(882373995));
            UnitRemove(UnitFromId(2147289533));
            UnitRemove(UnitFromId(911502680));
            UnitRemove(UnitFromId(334398350));
            UnitRemove(UnitFromId(13445909));
            if ((gv_gameDifficulty == 1)) {
                UnitRemove(UnitFromId(610839908));
                UnitRemove(UnitFromId(604036701));
                UnitRemove(UnitFromId(89071338));
                UnitRemove(UnitFromId(762201753));
                UnitRemove(UnitFromId(2032646073));
                UnitRemove(UnitFromId(1454129588));
            }

        }

    }
    else {
        AIToggleBulliesInRegion(gv_eNEMY_OVERMIND, RegionFromId(26), false);
        AIToggleBulliesInRegion(gv_eNEMY_OVERMIND, RegionFromId(27), false);
        AIToggleBulliesInRegion(gv_eNEMY_OVERMIND, RegionFromId(28), false);
        UnitRemove(UnitFromId(1564398275));
        UnitRemove(UnitFromId(2010867342));
        UnitRemove(UnitFromId(193796986));
        UnitCreate(1, "Omegalisk", 0, gv_eNEMY_OVERMIND, RegionGetCenter(RegionFromId(26)), 270.0);
        UnitCreate(1, "HotSNoxious", 0, gv_eNEMY_OVERMIND, RegionGetCenter(RegionFromId(27)), 90.0);
        UnitCreate(1, "HotSNoxious", 0, gv_eNEMY_OVERMIND, RegionGetCenter(RegionFromId(28)), 90.0);
    }
    if (((gv_gameDifficulty == 1) || (gv_gameDifficulty == 2))) {
        UnitRemove(UnitFromId(887469206));
        UnitRemove(UnitFromId(468676018));
        UnitRemove(UnitFromId(1354424317));
        UnitRemove(UnitFromId(720415709));
        UnitRemove(UnitFromId(1017377278));
        UnitRemove(UnitFromId(707987712));
        UnitRemove(UnitFromId(521854717));
        UnitRemove(UnitFromId(519906841));
        UnitRemove(UnitFromId(1497510852));
        UnitRemove(UnitFromId(457432891));
        UnitRemove(UnitFromId(517756199));
        UnitRemove(UnitFromId(1020710140));
        UnitRemove(UnitFromId(850942131));
        UnitRemove(UnitFromId(940709457));
        UnitRemove(UnitFromId(547849637));
        UnitRemove(UnitFromId(27034729));
        UnitRemove(UnitFromId(1370551517));
        UnitRemove(UnitFromId(1422082755));
        if ((gv_gameDifficulty == 1)) {
            UnitRemove(UnitFromId(1241751327));
            UnitRemove(UnitFromId(487107506));
            UnitRemove(UnitFromId(1924140328));
            UnitRemove(UnitFromId(1650678491));
            UnitRemove(UnitFromId(1790805042));
            UnitRemove(UnitFromId(509384348));
            UnitRemove(UnitFromId(280644281));
        }

    }

    if ((gv_gameDifficulty == 4)) {
        UnitRemove(UnitFromId(1268479440));
        UnitRemove(UnitFromId(202698783));
        UnitCreate(1, "HotSNoxious", 0, gv_eNEMY_OVERMIND, RegionGetCenter(RegionFromId(24)), 315.0);
        UnitRemove(UnitFromId(212777002));
        UnitRemove(UnitFromId(299439556));
        UnitCreate(1, "HotSNoxious", 0, gv_eNEMY_OVERMIND, RegionGetCenter(RegionFromId(25)), 225.0);
    }
    else {
        UnitRemove(UnitFromId(1990345722));
        UnitRemove(UnitFromId(1263944162));
        UnitRemove(UnitFromId(233587226));
        UnitRemove(UnitFromId(797463523));
        UnitRemove(UnitFromId(218212543));
        UnitRemove(UnitFromId(1501730976));
        if ((gv_gameDifficulty != 3)) {
            UnitRemove(UnitFromId(626852746));
            UnitRemove(UnitFromId(14648687));
            UnitRemove(UnitFromId(1861139872));
            UnitRemove(UnitFromId(1134668161));
            UnitRemove(UnitFromId(749851081));
            UnitRemove(UnitFromId(1865236797));
            UnitRemove(UnitFromId(1824329217));
            UnitRemove(UnitFromId(1405553539));
            UnitRemove(UnitFromId(1234988644));
            UnitRemove(UnitFromId(963850385));
            UnitRemove(UnitFromId(557412500));
            UnitRemove(UnitFromId(596017893));
            UnitRemove(UnitFromId(316930217));
            UnitRemove(UnitFromId(245748602));
            UnitRemove(UnitFromId(270793935));
            UnitRemove(UnitFromId(1356685804));
            UnitRemove(UnitFromId(239089950));
            UnitRemove(UnitFromId(1946740099));
        }

    }
    lv_mainObjectiveLife = 5000;
    if ((gv_gameDifficulty == 4)) {
        lv_mainObjectiveLife += 6000;
    }
    else {
        if ((gv_gameDifficulty == 3)) {
            lv_mainObjectiveLife += 3000;
        }

    }
    UnitSetPropertyFixed(UnitFromId(1436250425), c_unitPropLifeMax, lv_mainObjectiveLife);
    UnitSetPropertyFixed(UnitFromId(1436250425), c_unitPropShieldsMax, lv_mainObjectiveLife);
    UnitSetPropertyFixed(UnitFromId(1436250425), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitFromId(1436250425), c_unitPropShieldsPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__8Difficulties_Init () {
    gt__8Difficulties = TriggerCreate("gt__8Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Centre Outpost Reveal
//--------------------------------------------------------------------------------------------------
bool gt_CentreOutpostReveal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CentreOutpostEncroached, false);
    UnitCreate(1, "Overseer", 0, gv_aLLY_NAKTUL, PointFromId(1861155842), 90.0);
    libCOMI_gf_DropPodWarpInUnitGroup(UnitLastCreatedGroup(), PointFromId(1861155842));
    Wait(3.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1170993917)), c_orderQueueReplace);
    libCOMI_gf_ShareVisionofUnitCoop(UnitLastCreated(), true, gv_pLAYER_1);
    libCOMI_gf_ShareVisionofUnitCoop(UnitLastCreated(), true, gv_pLAYER_2);
    Wait(3.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1142304317), 4.0, Color(50.20, 100.00, 50.20));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_NaktulRevealsCentralOutpost, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CentreOutpostReveal_Init () {
    gt_CentreOutpostReveal = TriggerCreate("gt_CentreOutpostReveal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk Ping
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskPing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.25, c_timeGame);
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        if (((gv_brutaliskPing != c_invalidPingId) && (gv_brutalisk != null))) {
            PingSetPosition(gv_brutaliskPing, UnitGetPosition(gv_brutalisk));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskPing_Init () {
    gt_BrutaliskPing = TriggerCreate("gt_BrutaliskPing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk Dies
//--------------------------------------------------------------------------------------------------
bool gt_BrutaliskDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Leviathan") || (UnitGetType(EventUnit()) == "BrutaliskEnemy") || (UnitGetType(EventUnit()) == "BrutaliskBurrowedEnemy")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 0));
    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutaliskDies_Init () {
    gt_BrutaliskDies = TriggerCreate("gt_BrutaliskDies_Func");
    TriggerAddEventUnitDied(gt_BrutaliskDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cerebrate Dies
//--------------------------------------------------------------------------------------------------
bool gt_CerebrateDies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 0));
    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CerebrateDies_Init () {
    gt_CerebrateDies = TriggerCreate("gt_CerebrateDies_Func");
    TriggerAddEventUnitDied(gt_CerebrateDies, UnitRefFromUnit(UnitFromId(606816855)));
    TriggerAddEventUnitDied(gt_CerebrateDies, UnitRefFromUnit(UnitFromId(1026764097)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Dies
//--------------------------------------------------------------------------------------------------
bool gt_OvermindDies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 0));
    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindDies_Init () {
    gt_OvermindDies = TriggerCreate("gt_OvermindDies_Func");
    TriggerAddEventUnitDied(gt_OvermindDies, UnitRefFromUnit(UnitFromId(1436250425)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    int lv_randomPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_1, StringExternal("Param/Value/2E071849"), null, PlayerStartLocation(gv_pLAYER_1));
    UIAlertPoint("Trigger", gv_pLAYER_2, StringExternal("Param/Value/BF52C830"), null, PlayerStartLocation(gv_pLAYER_2));
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyTheOvermindCreate, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_naktulSuperior != 0)) {
        gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulIntro1K", -1), SoundLink("NaktulIntro1", -1));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1436250425)), StringExternal("Param/Value/A74F0723"));
        libARRA_gf_StorePingForUnit(UnitFromId(1436250425), 1, PingLastCreated());
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulIntro2K", -1), SoundLink("NaktulIntro2", -1));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeGame);
        lv_randomPlayer = gv_naktulSuperior;
    }
    else {
        gf_BrainstormTransmission(SoundLink("NaktulIntro1", -1));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerExecute(gt_ObjectiveDestroyTheOvermindCreate, true, true);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1436250425)), StringExternal("Param/Value/723C08A7"));
        libARRA_gf_StorePingForUnit(UnitFromId(1436250425), 1, PingLastCreated());
        Wait(2.0, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        gf_BrainstormTransmission(SoundLink("NaktulIntro2", -1));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(2.0, c_timeGame);
        lv_randomPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("IntroductionResponseOBS", true, lv_randomPlayer);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Cerebrate Objective
//--------------------------------------------------------------------------------------------------
bool gt_SetupCerebrateObjective_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LeftCerebrateEncroached, false);
    TriggerEnable(gt_RightCerebrateEncroached, false);
    TriggerQueueEnter();
    TriggerExecute(gt_BonusObjectiveKillTheCerebratesCreate, true, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(606816855)), StringExternal("Param/Value/B59DEECE"));
    libARRA_gf_StorePingForUnit(UnitFromId(606816855), 1, PingLastCreated());
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(1026764097)), StringExternal("Param/Value/DEBB7564"));
    libARRA_gf_StorePingForUnit(UnitFromId(1026764097), 1, PingLastCreated());
    SoundPlayForPlayer(SoundLink("UI_ObjectiveBonusDiscovered", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_naktulSuperior != 0)) {
        gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulCerebrateRevealZ", -1), SoundLink("NaktulCerebrateReveal", -1));
        Wait(gf_LongestSoundDuration(SoundLink("NaktulCerebrateReveal", -1), SoundLink("NaktulCerebrateRevealZ", -1)), c_timeGame);
    }
    else {
        gf_BrainstormTransmission(SoundLink("NaktulCerebrateReveal", -1));
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupCerebrateObjective_Init () {
    gt_SetupCerebrateObjective = TriggerCreate("gt_SetupCerebrateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: State Check
//--------------------------------------------------------------------------------------------------
bool gt_StateCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_VictoryPrimaryObjectiveComplete) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/353074]3") == "0002") && (gv_lightningCooldown == false) && (RandomInt(1, 50) == 1)) {
        gf_LightningFlash();
    }

    TriggerExecute(gt_RemoveNaktulsGroundUnits, true, false);
    if ((GameGetMissionTime() >= 660.0)) {
        TriggerExecute(gt_SetupCerebrateObjective, true, true);
    }
    else {
        if ((GameGetMissionTime() >= 300.0)) {
            TriggerExecute(gt_CentreOutpostReveal, true, true);
        }

    }
    if ((UnitIsAlive(UnitFromId(1436250425)) == true) && (UnitGetPropertyFixed(UnitFromId(1436250425), c_unitPropShieldsPercent, c_unitPropCurrent) <= 50.0)) {
        TriggerExecute(gt_OvermindUnderAttack, true, false);
        if ((gv_gameDifficulty != 1) && (UnitGetPropertyFixed(UnitFromId(1436250425), c_unitPropShieldsPercent, c_unitPropCurrent) <= 5.0)) {
            TriggerExecute(gt_OvermindSpellControl, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StateCheck_Init () {
    gt_StateCheck = TriggerCreate("gt_StateCheck_Func");
    TriggerAddEventTimePeriodic(gt_StateCheck, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Centre Outpost Encroached
//--------------------------------------------------------------------------------------------------
bool gt_CentreOutpostEncroached_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_1) || (EventPlayer() == gv_pLAYER_2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CentreOutpostReveal, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CentreOutpostEncroached_Init () {
    gt_CentreOutpostEncroached = TriggerCreate("gt_CentreOutpostEncroached_Func");
    TriggerAddEventUnitRegion(gt_CentreOutpostEncroached, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Encroached
//--------------------------------------------------------------------------------------------------
bool gt_OvermindEncroached_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_1) || (EventPlayer() == gv_pLAYER_2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_naktulSuperior != 0)) {
        gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulOvermindEncroachZ", -1), SoundLink("NaktulOvermindEncroach", -1));
    }
    else {
        gf_BrainstormTransmission(SoundLink("NaktulOvermindEncroach", -1));
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindEncroached_Init () {
    gt_OvermindEncroached = TriggerCreate("gt_OvermindEncroached_Func");
    TriggerAddEventUnitRegion(gt_OvermindEncroached, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Cerebrate Encroached
//--------------------------------------------------------------------------------------------------
bool gt_LeftCerebrateEncroached_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_1) || (EventPlayer() == gv_pLAYER_2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetupCerebrateObjective, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeftCerebrateEncroached_Init () {
    gt_LeftCerebrateEncroached = TriggerCreate("gt_LeftCerebrateEncroached_Func");
    TriggerAddEventUnitRegion(gt_LeftCerebrateEncroached, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Cerebrate Encroached
//--------------------------------------------------------------------------------------------------
bool gt_RightCerebrateEncroached_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_1) || (EventPlayer() == gv_pLAYER_2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetupCerebrateObjective, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RightCerebrateEncroached_Init () {
    gt_RightCerebrateEncroached = TriggerCreate("gt_RightCerebrateEncroached_Func");
    TriggerAddEventUnitRegion(gt_RightCerebrateEncroached, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Cerebrate Killed
//--------------------------------------------------------------------------------------------------
bool gt_LeftCerebrateKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unitIter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cerebratesKilled += 1;
    gf_NaktulReclaimsUnits(RegionFromId(17), RegionFromId(18));
    TriggerExecute(gt_BonusObjectiveKillTheCerebratesUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeftCerebrateKilled_Init () {
    gt_LeftCerebrateKilled = TriggerCreate("gt_LeftCerebrateKilled_Func");
    TriggerAddEventUnitDied(gt_LeftCerebrateKilled, UnitRefFromUnit(UnitFromId(606816855)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Cerebrate Killed
//--------------------------------------------------------------------------------------------------
bool gt_RightCerebrateKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cerebratesKilled += 1;
    gf_NaktulReclaimsUnits(RegionFromId(20), RegionFromId(19));
    TriggerExecute(gt_BonusObjectiveKillTheCerebratesUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RightCerebrateKilled_Init () {
    gt_RightCerebrateKilled = TriggerCreate("gt_RightCerebrateKilled_Func");
    TriggerAddEventUnitDied(gt_RightCerebrateKilled, UnitRefFromUnit(UnitFromId(1026764097)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Naktul Air Unit Retreat
//--------------------------------------------------------------------------------------------------
bool gt_NaktulAirUnitRetreat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_aLLY_NAKTUL))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NaktulAirUnitRetreat_Init () {
    gt_NaktulAirUnitRetreat = TriggerCreate("gt_NaktulAirUnitRetreat_Func");
    TriggerAddEventUnitRegion(gt_NaktulAirUnitRetreat, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_NaktulAirUnitRetreat, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Naktul's Ground Units
//--------------------------------------------------------------------------------------------------
bool gt_RemoveNaktulsGroundUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_NaktulGroundUnitRemoval(RegionFromId(17));
    gf_NaktulGroundUnitRemoval(RegionFromId(20));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveNaktulsGroundUnits_Init () {
    gt_RemoveNaktulsGroundUnits = TriggerCreate("gt_RemoveNaktulsGroundUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon's Forces Attacking
//--------------------------------------------------------------------------------------------------
bool gt_AmonsForcesAttacking_Func (bool testConds, bool runActions) {
    int auto5DA4B1AC_val;

    // Variable Declarations
    playergroup lv_terranPlayers;
    playergroup lv_otherPlayers;
    playergroup lv_kerriganAndZagara;
    int lv_otherPlayer;

    // Variable Initialization
    lv_terranPlayers = PlayerGroupEmpty();
    lv_otherPlayers = PlayerGroupEmpty();
    lv_kerriganAndZagara = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto5DA4B1AC_val = gv_attackFlavour;
    if (auto5DA4B1AC_val == gv_afCOMBO) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        if ((gv_comboWaveNo == 1)) {
            gf_BrainstormTransmission(SoundLink("NaktulComboAttacks", -1));
        }
        else {
            libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_AITargetPlayer);
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto5DA4B1AC_val == gv_afBRUTALISK) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        if ((gv_brutaliskWaveNo == 1)) {
            if ((gv_naktulSuperior != 0)) {
                gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulBrutaliskZ", -1), SoundLink("NaktulBrutalisk", -1));
            }
            else {
                gf_BrainstormTransmission(SoundLink("NaktulBrutalisk", -1));
            }
        }
        else {
            gf_BrainstormTransmission(SoundLink("NaktulSubsequentBrutalisks", -1));
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else if (auto5DA4B1AC_val == gv_afLEVIATHAN) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        if ((gv_naktulSuperior != 0)) {
            if ((gv_naktulSuperior == gv_pLAYER_1)) {
                lv_otherPlayer = gv_pLAYER_2;
            }
            else {
                lv_otherPlayer = gv_pLAYER_1;
            }
            if ((gf_IsPlayerTerran(lv_otherPlayer) == true)) {
                gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulLeviathanWarningZ", -1), SoundLink("TValerian03Adjutant00066", -1));
            }
            else {
                gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulLeviathanWarningZ", -1), SoundLink("NaktulLeviathanWarning", -1));
            }
        }
        else {
            if ((gf_IsPlayerTerran(gv_pLAYER_1) == true)) {
                if ((gf_IsPlayerTerran(gv_pLAYER_2) == true)) {
                    gf_BrainstormTransmission(SoundLink("TValerian03Adjutant00066", -1));
                }
                else {
                    gf_BrainstormSplitTransmission(gv_pLAYER_1, SoundLink("TValerian03Adjutant00066", -1), SoundLink("NaktulLeviathanWarning", -1));
                }
            }
            else {
                if ((gf_IsPlayerTerran(gv_pLAYER_2) == true)) {
                    gf_BrainstormSplitTransmission(gv_pLAYER_2, SoundLink("TValerian03Adjutant00066", -1), SoundLink("NaktulLeviathanWarning", -1));
                }
                else {
                    gf_BrainstormTransmission(SoundLink("NaktulLeviathanWarning", -1));
                }
            }
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_AITargetPlayer);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    gv_attackFlavour = gv_afSTANDARD;
    Wait(40.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmonsForcesAttacking_Init () {
    gt_AmonsForcesAttacking = TriggerCreate("gt_AmonsForcesAttacking_Func");
    TriggerAddEventPlayerAIWave(gt_AmonsForcesAttacking, gv_eNEMY_OVERMIND);
    TriggerAddEventPlayerAIWave(gt_AmonsForcesAttacking, gv_eNEMY_AMON_1);
    TriggerAddEventPlayerAIWave(gt_AmonsForcesAttacking, gv_eNEMY_AMON_2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Naktul Reveals Central Outpost
//--------------------------------------------------------------------------------------------------
bool gt_NaktulRevealsCentralOutpost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_naktulSuperior != 0)) {
        gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulOutpostRevealZ", -1), SoundLink("NaktulOutpostReveal", -1));
        Wait(gf_LongestSoundDuration(SoundLink("NaktulOutpostReveal", -1), SoundLink("NaktulOutpostRevealZ", -1)), c_timeGame);
    }
    else {
        gf_BrainstormTransmission(SoundLink("NaktulOutpostReveal", -1));
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NaktulRevealsCentralOutpost_Init () {
    gt_NaktulRevealsCentralOutpost = TriggerCreate("gt_NaktulRevealsCentralOutpost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_OvermindUnderAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_gameDifficulty != 1)) {
        gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
        gf_CreateLeviathan();
        gf_SetTargetLocation(gv_AITargetPlayer);
        AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
        libCOMI_gf_DestroyPingCoop(PingLastCreated());
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_leviathan), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3B322E89"));
        PingSetUnit(PingLastCreated(), gv_leviathan);
        libARRA_gf_StorePingForUnit(gv_leviathan, 0, PingLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindUnderAttack_Init () {
    gt_OvermindUnderAttack = TriggerCreate("gt_OvermindUnderAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Spell Control
//--------------------------------------------------------------------------------------------------
bool gt_OvermindSpellControl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeGame);
    gf_OvermindSpellScript(UnitFromId(1436250425));
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindSpellControl_Init () {
    gt_OvermindSpellControl = TriggerCreate("gt_OvermindSpellControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bio Combo Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_BioComboWave01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Zergling", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Marauder", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Marine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Medic", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        gf_AddUnittoCurrentWave("Zergling", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marauder", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Firebat", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if ((gv_gameDifficulty == 4)) {
            gf_AddUnittoCurrentWave("Zergling", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Marauder", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Firebat", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Marine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BioComboWave01_Init () {
    gt_BioComboWave01 = TriggerCreate("gt_BioComboWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bio Combo Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_BioComboWave02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty != 1)) {
        gf_AddUnittoCurrentWave("LurkerMP", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Infestor", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("LurkerMP", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("SwarmHostMP", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("LurkerMP", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("SwarmHostMP", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BioComboWave02_Init () {
    gt_BioComboWave02 = TriggerCreate("gt_BioComboWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bio Combo Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_BioComboWave03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Mutalisk", 7, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Guardian", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Devourer", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Scourge", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("QueenClassic", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Viper", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("VikingFighter", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marine", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Firebat", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medic", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Marine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Marauder", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HotSNoxious", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }
            else {
                gf_AddUnittoCurrentWave("Ultralisk", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }
        }

    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BioComboWave03_Init () {
    gt_BioComboWave03 = TriggerCreate("gt_BioComboWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bio Combo Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_BioComboWave04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Overseer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("QueenClassic", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Mutalisk", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Devourer", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Guardian", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 5, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Battlecruiser", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("ScienceVessel", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Scourge", 16, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Viper", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridNemesis", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marine", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Firebat", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medic", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridDominatorVoid", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Marine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("SiegeTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HotSNoxious", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Marauder", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("SiegeTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HybridDominatorVoid", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }
            else {
                gf_AddUnittoCurrentWave("Ultralisk", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }
        }
        else {
            gf_AddUnittoCurrentWave("Ultralisk", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }
    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BioComboWave04_Init () {
    gt_BioComboWave04 = TriggerCreate("gt_BioComboWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech Combo Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_MechComboWave01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("HellionTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Goliath", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Medic", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        gf_AddUnittoCurrentWave("Goliath", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HellionTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if ((gv_gameDifficulty == 4)) {
            gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Goliath", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechComboWave01_Init () {
    gt_MechComboWave01 = TriggerCreate("gt_MechComboWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech Combo Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_MechComboWave02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Cyclone", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Ravager", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty != 1)) {
        gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Cyclone", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Ravager", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Cyclone", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("SwarmHostMP", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Ravager", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Cyclone", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Ravager", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechComboWave02_Init () {
    gt_MechComboWave02 = TriggerCreate("gt_MechComboWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech Combo Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_MechComboWave03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("Medivac", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 7, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 7, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marine", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Firebat", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medic", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marauder", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HotSNoxious", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HellionTank", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Goliath", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("WarHound", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("WidowMine", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("WarHound", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Goliath", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("HellionTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("WidowMine", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Roach", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Goliath", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("WarHound", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HellionTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Thor", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HotSNoxious", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }
            else {
                gf_AddUnittoCurrentWave("Ultralisk", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }
        }

    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechComboWave03_Init () {
    gt_MechComboWave03 = TriggerCreate("gt_MechComboWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech Combo Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_MechComboWave04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Overseer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("Medivac", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marine", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Firebat", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medic", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Infestor", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HotSNoxious", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marauder", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridDominatorVoid", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HellionTank", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Goliath", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("WarHound", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridBehemoth", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("WarHound", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("HellionTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Thor", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HotSNoxious", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Hydralisk", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("WarHound", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HellionTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("SiegeTank", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Thor", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HybridBehemoth", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }
        else {
            gf_AddUnittoCurrentWave("Ultralisk", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }
    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechComboWave04_Init () {
    gt_MechComboWave04 = TriggerCreate("gt_MechComboWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sky Combo Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_SkyComboWave01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Mutalisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("VikingFighter", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Banshee", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("VikingFighter", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Guardian", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Banshee", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Mutalisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if ((gv_gameDifficulty == 4)) {
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("VikingFighter", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Guardian", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Banshee", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Mutalisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkyComboWave01_Init () {
    gt_SkyComboWave01 = TriggerCreate("gt_SkyComboWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sky Combo Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_SkyComboWave02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Banshee", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Wraith", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty != 1)) {
        gf_AddUnittoCurrentWave("LurkerMP", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("Banshee", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Wraith", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("LurkerMP", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Banshee", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Wraith", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("LurkerMP", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkyComboWave02_Init () {
    gt_SkyComboWave02 = TriggerCreate("gt_SkyComboWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sky Combo Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_SkyComboWave03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 7, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 5, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HellionTank", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Goliath", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("WarHound", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Thor", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HotSNoxious", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Mutalisk", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Guardian", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Devourer", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Scourge", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("VikingFighter", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Mutalisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Guardian", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Scourge", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("VikingFighter", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Guardian", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Mutalisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Scourge", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("VikingFighter", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkyComboWave03_Init () {
    gt_SkyComboWave03 = TriggerCreate("gt_SkyComboWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sky Combo Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_SkyComboWave04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Overseer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("WidowMine", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HellionTank", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Goliath", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("WarHound", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 5, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("ScienceVessel", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Infestor", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Thor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HotSNoxious", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridBehemoth", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Battlecruiser", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Mutalisk", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Devourer", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Guardian", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Scourge", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridNemesis", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("VikingFighter", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Guardian", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Devourer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Mutalisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Scourge", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("VikingFighter", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Guardian", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Devourer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Mutalisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Scourge", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HybridNemesis", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("VikingFighter", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkyComboWave04_Init () {
    gt_SkyComboWave04 = TriggerCreate("gt_SkyComboWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Combo Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_ShadowComboWave01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Reaper", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Zergling", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Reaper", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Zergling", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if ((gv_gameDifficulty == 4)) {
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Reaper", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Hydralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Zergling", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowComboWave01_Init () {
    gt_ShadowComboWave01 = TriggerCreate("gt_ShadowComboWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Combo Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_ShadowComboWave02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Cyclone", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty != 1)) {
        gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Cyclone", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Liberator", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Ghost", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Cyclone", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Infestor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Roach", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowComboWave02_Init () {
    gt_ShadowComboWave02 = TriggerCreate("gt_ShadowComboWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Combo Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_ShadowComboWave03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("WidowMine", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 7, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 5, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HellionTank", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Goliath", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("WarHound", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Thor", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HotSNoxious", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Devourer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Cyclone", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Zergling", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Devourer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Liberator", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Cyclone", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Zergling", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Devourer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Liberator", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Cyclone", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Zergling", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowComboWave03_Init () {
    gt_ShadowComboWave03 = TriggerCreate("gt_ShadowComboWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Combo Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_ShadowComboWave04_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddUnittoCurrentWave("Overseer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if ((gv_gameDifficulty == 4) && (RandomInt(0, 1) == 1)) {
        gf_AddUnittoCurrentWave("WidowMine", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Roach", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Hydralisk", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HellionTank", 8, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Goliath", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("SiegeTank", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("WarHound", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 5, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("ScienceVessel", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Infestor", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Thor", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HotSNoxious", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Viper", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridBehemoth", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    }
    else {
        gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Marauder", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Reaper", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Devourer", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Liberator", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medivac", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Cyclone", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Ravager", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Infestor", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Zergling", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Baneling", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Raven", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HybridDominatorVoid", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Liberator", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Guardian", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Devourer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Marauder", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Reaper", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Cyclone", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Ravager", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("InfestorBurrowed", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Zergling", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Baneling", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Raven", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            if ((gv_gameDifficulty == 4)) {
                gf_AddUnittoCurrentWave("Battlecruiser", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Liberator", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Guardian", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Devourer", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("ScienceVessel", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Marauder", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Reaper", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Cyclone", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Ravager", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("InfestorBurrowed", 3, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Zergling", 6, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Baneling", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("Raven", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
                gf_AddUnittoCurrentWave("HybridDominatorVoid", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            }

        }

    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowComboWave04_Init () {
    gt_ShadowComboWave04 = TriggerCreate("gt_ShadowComboWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_InitialWave, 190.0);
    gf_RunAttackWaveatMissionTime(gt_DoubleWave01, (6.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_ComboWave01, (8.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Brutalisk01, (12.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_DoubleWave02, (15.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_ComboWave02, (18.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_Brutalisk02, (21.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_ComboWave03, (23.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_DoubleWave03, (26.0 * 60.0));
    gf_RunRepeatingAttackWavefromMissionTime(gt_DoubleWave04, (30.0 * 60.0), (6.0 * 60.0));
    gf_RunRepeatingAttackWavefromMissionTime(gt_ComboWave04, (30.0 * 60.0), (4.0 * 60.0));
    gf_RunRepeatingAttackWavefromMissionTime(gt_Brutalisk03, (32.0 * 60.0), (6.0 * 60.0));
    gf_RunRepeatingAttackWavefromMissionTime(gt_ZergSuicide, (38.25 * 60.0), (2.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Wave
//--------------------------------------------------------------------------------------------------
bool gt_InitialWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((gv_gameDifficulty != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackFlavour = gv_afSTANDARD;
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    if ((gv_gameDifficulty == 4)) {
        gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
        gf_SetTargetLocation(gv_pLAYER_1);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_2, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
        gf_SetTargetLocation(gv_pLAYER_2);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, c_playerAny, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnCentre(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialWave_Init () {
    gt_InitialWave = TriggerCreate("gt_InitialWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combo Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_ComboWave01_Func (bool testConds, bool runActions) {
    int autoB44C4AB2_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_comboWaveNo += 1;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    autoB44C4AB2_val = gv_AttackType;
    if (autoB44C4AB2_val == gv_atTERRAN_BIO) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_BioComboWave01, true, false);
    }
    else if (autoB44C4AB2_val == gv_atTERRAN_MECH) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_MechComboWave01, true, false);
    }
    else if (autoB44C4AB2_val == gv_atTERRAN_SKY) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_SkyComboWave01, true, false);
    }
    else if (autoB44C4AB2_val == gv_atTERRAN_SHADOW) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_ShadowComboWave01, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComboWave01_Init () {
    gt_ComboWave01 = TriggerCreate("gt_ComboWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combo Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_ComboWave02_Func (bool testConds, bool runActions) {
    playergroup auto816A8B7C_g;
    int auto816A8B7C_p;
    int autoCEB01938_val;

    // Variable Declarations
    int lv_playerIter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        auto816A8B7C_g = gv_enemyGroup; 
        auto816A8B7C_p = 1;
        for ( ; auto816A8B7C_p <= PlayerGroupCount(auto816A8B7C_g) ; auto816A8B7C_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(auto816A8B7C_g, auto816A8B7C_p)) ) {
            lv_playerIter = PlayerGroupPlayer(auto816A8B7C_g, auto816A8B7C_p);
            TechTreeUpgradeAddLevel(lv_playerIter, "BearclawNozzles", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "Stimpack", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "HotSZerglingHealth", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "HighCapacityBarrels", 1);
            TechTreeUpgradeAddLevel(lv_playerIter, "AresClassWeaponsSystemViking", 1);
            if ((gv_gameDifficulty == 4)) {
                TechTreeUpgradeAddLevel(lv_playerIter, "PunisherGrenades", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "AdvancedHealingAI", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "ZerglingArmorShred", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "ReaperU238Rounds", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "StabilizerMedPacks", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "HailstormMissilePods", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "FortifiedBunkerCarapace", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "HALORockets", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "SeismicSpines", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "HotSBanelingHeal", 1);
                TechTreeUpgradeAddLevel(lv_playerIter, "LiberatorImprovedAARange", 1);
            }

        }
    }

    gv_comboWaveNo += 1;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    autoCEB01938_val = gv_AttackType;
    if (autoCEB01938_val == gv_atTERRAN_BIO) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_BioComboWave02, true, false);
    }
    else if (autoCEB01938_val == gv_atTERRAN_MECH) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_MechComboWave02, true, false);
    }
    else if (autoCEB01938_val == gv_atTERRAN_SKY) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_SkyComboWave02, true, false);
    }
    else if (autoCEB01938_val == gv_atTERRAN_SHADOW) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_ShadowComboWave02, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComboWave02_Init () {
    gt_ComboWave02 = TriggerCreate("gt_ComboWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combo Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_ComboWave03_Func (bool testConds, bool runActions) {
    int auto65E87D51_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_comboWaveNo += 1;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    auto65E87D51_val = gv_AttackType;
    if (auto65E87D51_val == gv_atTERRAN_BIO) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_BioComboWave03, true, false);
    }
    else if (auto65E87D51_val == gv_atTERRAN_MECH) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_MechComboWave03, true, false);
    }
    else if (auto65E87D51_val == gv_atTERRAN_SKY) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_SkyComboWave03, true, false);
    }
    else if (auto65E87D51_val == gv_atTERRAN_SHADOW) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_ShadowComboWave03, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComboWave03_Init () {
    gt_ComboWave03 = TriggerCreate("gt_ComboWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combo Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_ComboWave04_Func (bool testConds, bool runActions) {
    int auto5038CDB7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_comboWaveNo += 1;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    auto5038CDB7_val = gv_AttackType;
    if (auto5038CDB7_val == gv_atTERRAN_BIO) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_BioComboWave04, true, false);
    }
    else if (auto5038CDB7_val == gv_atTERRAN_MECH) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_MechComboWave04, true, false);
    }
    else if (auto5038CDB7_val == gv_atTERRAN_SKY) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_SkyComboWave04, true, false);
    }
    else if (auto5038CDB7_val == gv_atTERRAN_SHADOW) {
        gv_attackFlavour = gv_afCOMBO;
        TriggerExecute(gt_ShadowComboWave04, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComboWave04_Init () {
    gt_ComboWave04 = TriggerCreate("gt_ComboWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_DoubleWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackFlavour = gv_afSTANDARD;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
    }
    gf_SetTargetLocation(gv_pLAYER_1);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_2, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
    }
    gf_SetTargetLocation(gv_pLAYER_2);
    gf_DetermineAttackWaveType();
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleWave01_Init () {
    gt_DoubleWave01 = TriggerCreate("gt_DoubleWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_DoubleWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackFlavour = gv_afSTANDARD;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
    }
    gf_SetTargetLocation(gv_pLAYER_1);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_2, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
    }
    gf_SetTargetLocation(gv_pLAYER_2);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleWave02_Init () {
    gt_DoubleWave02 = TriggerCreate("gt_DoubleWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_DoubleWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackFlavour = gv_afSTANDARD;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    if ((gv_gameDifficulty != 1)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
    }
    gf_SetTargetLocation(gv_pLAYER_1);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    if ((gv_gameDifficulty != 1)) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_2, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
    }
    gf_SetTargetLocation(gv_pLAYER_2);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleWave03_Init () {
    gt_DoubleWave03 = TriggerCreate("gt_DoubleWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_DoubleWave04_Func (bool testConds, bool runActions) {
    int auto6EFFC9B0_val;
    int auto1C1A2BA7_val;
    int auto1ECCA670_val;
    int auto906388C9_val;
    int auto9DDC1EB9_val;
    int auto23D7FF66_val;

    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackFlavour = gv_afSTANDARD;
    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    if ((UnitIsAlive(UnitFromId(606816855)) == true)) {
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            auto1ECCA670_val = gv_AttackType;
            if (auto1ECCA670_val == gv_atTERRAN_BIO) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
                libCOMI_gf_AddAttackWaveUnitType(2, "Infestor");
                libCOMI_gf_AddAttackWaveUnitType(4, "Roach");
            }
            else if (auto1ECCA670_val == gv_atTERRAN_MECH) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridBehemoth");
                libCOMI_gf_AddAttackWaveUnitType(2, "Infestor");
                libCOMI_gf_AddAttackWaveUnitType(4, "LurkerMP");
            }
            else if (auto1ECCA670_val == gv_atTERRAN_SKY) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
                libCOMI_gf_AddAttackWaveUnitType(2, "Viper");
                libCOMI_gf_AddAttackWaveUnitType(4, "Mutalisk");
            }
            else if (auto1ECCA670_val == gv_atTERRAN_SHADOW) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
                libCOMI_gf_AddAttackWaveUnitType(2, "Viper");
                libCOMI_gf_AddAttackWaveUnitType(4, "Hydralisk");
            }
            else {
            }
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
        }
        else {
            if ((gv_gameDifficulty == 2)) {
                auto1C1A2BA7_val = gv_AttackType;
                if (auto1C1A2BA7_val == gv_atTERRAN_BIO) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Infestor");
                    libCOMI_gf_AddAttackWaveUnitType(2, "Roach");
                }
                else if (auto1C1A2BA7_val == gv_atTERRAN_MECH) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Infestor");
                    libCOMI_gf_AddAttackWaveUnitType(2, "LurkerMP");
                }
                else if (auto1C1A2BA7_val == gv_atTERRAN_SKY) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Viper");
                    libCOMI_gf_AddAttackWaveUnitType(2, "Mutalisk");
                }
                else if (auto1C1A2BA7_val == gv_atTERRAN_SHADOW) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Viper");
                    libCOMI_gf_AddAttackWaveUnitType(2, "Hydralisk");
                }
                else {
                }
            }

        }
    }
    else {
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            auto6EFFC9B0_val = gv_AttackType;
            if (auto6EFFC9B0_val == gv_atTERRAN_BIO) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            }
            else if (auto6EFFC9B0_val == gv_atTERRAN_MECH) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridBehemoth");
            }
            else if (auto6EFFC9B0_val == gv_atTERRAN_SKY) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
            }
            else if (auto6EFFC9B0_val == gv_atTERRAN_SHADOW) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            }
            else {
            }
        }

    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(291628582), true);
    gf_SetTargetLocation(gv_pLAYER_1);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    if ((UnitIsAlive(UnitFromId(1026764097)) == true)) {
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            auto23D7FF66_val = gv_AttackType;
            if (auto23D7FF66_val == gv_atTERRAN_BIO) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
                libCOMI_gf_AddAttackWaveUnitType(2, "Infestor");
                libCOMI_gf_AddAttackWaveUnitType(4, "Roach");
            }
            else if (auto23D7FF66_val == gv_atTERRAN_MECH) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridBehemoth");
                libCOMI_gf_AddAttackWaveUnitType(2, "Infestor");
                libCOMI_gf_AddAttackWaveUnitType(4, "LurkerMP");
            }
            else if (auto23D7FF66_val == gv_atTERRAN_SKY) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
                libCOMI_gf_AddAttackWaveUnitType(2, "Viper");
                libCOMI_gf_AddAttackWaveUnitType(4, "Mutalisk");
            }
            else if (auto23D7FF66_val == gv_atTERRAN_SHADOW) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
                libCOMI_gf_AddAttackWaveUnitType(2, "Viper");
                libCOMI_gf_AddAttackWaveUnitType(4, "Hydralisk");
            }
            else {
            }
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_1, gv_eNEMY_AMON_2, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
        }
        else {
            if ((gv_gameDifficulty == 2)) {
                auto9DDC1EB9_val = gv_AttackType;
                if (auto9DDC1EB9_val == gv_atTERRAN_BIO) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Infestor");
                    libCOMI_gf_AddAttackWaveUnitType(2, "Roach");
                }
                else if (auto9DDC1EB9_val == gv_atTERRAN_MECH) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Infestor");
                    libCOMI_gf_AddAttackWaveUnitType(2, "LurkerMP");
                }
                else if (auto9DDC1EB9_val == gv_atTERRAN_SKY) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Viper");
                    libCOMI_gf_AddAttackWaveUnitType(2, "Mutalisk");
                }
                else if (auto9DDC1EB9_val == gv_atTERRAN_SHADOW) {
                    libCOMI_gf_AddAttackWaveUnitType(1, "Viper");
                    libCOMI_gf_AddAttackWaveUnitType(2, "Hydralisk");
                }
                else {
                }
            }

        }
    }
    else {
        if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
            auto906388C9_val = gv_AttackType;
            if (auto906388C9_val == gv_atTERRAN_BIO) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            }
            else if (auto906388C9_val == gv_atTERRAN_MECH) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridBehemoth");
            }
            else if (auto906388C9_val == gv_atTERRAN_SKY) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridNemesis");
            }
            else if (auto906388C9_val == gv_atTERRAN_SHADOW) {
                libCOMI_gf_AddAttackWaveUnitType(1, "HybridDominatorVoid");
            }
            else {
            }
        }

    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_eNEMY_AMON_2, c_playerAny, lv_resourceBucket, lv_techBucket, PointFromId(210241538), true);
    gf_SetTargetLocation(gv_pLAYER_2);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleWave04_Init () {
    gt_DoubleWave04 = TriggerCreate("gt_DoubleWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk 01
//--------------------------------------------------------------------------------------------------
bool gt_Brutalisk01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    gf_CreateBrutalisk();
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if ((gv_gameDifficulty == 4)) {
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Brutalisk01_Init () {
    gt_Brutalisk01 = TriggerCreate("gt_Brutalisk01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk 02
//--------------------------------------------------------------------------------------------------
bool gt_Brutalisk02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    gf_CreateBrutalisk();
    gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
    gf_AddUnittoCurrentWave("HunterKiller", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        gf_AddUnittoCurrentWave("HunterKiller", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if ((gv_gameDifficulty == 4)) {
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("HunterKiller", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }

    }

    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Brutalisk02_Init () {
    gt_Brutalisk02 = TriggerCreate("gt_Brutalisk02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutalisk 03
//--------------------------------------------------------------------------------------------------
bool gt_Brutalisk03_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_AITargetPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    gf_CreateBrutalisk();
    if (((gv_gameDifficulty == 3) || (gv_gameDifficulty == 4))) {
        gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("HunterKiller", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        gf_AddUnittoCurrentWave("QueenClassic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        if ((gv_gameDifficulty == 4)) {
            gf_AddUnittoCurrentWave("Medic", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("HunterKiller", 4, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("HotSNoxious", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }
        else {
            gf_AddUnittoCurrentWave("Ultralisk", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }
    }
    else {
        if ((gv_gameDifficulty == 1)) {
            gf_AddUnittoCurrentWave("Queen", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 1, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }
        else {
            gf_AddUnittoCurrentWave("Queen", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medivac", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Medic", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("HunterKiller", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
            gf_AddUnittoCurrentWave("Ultralisk", 2, gv_eNEMY_OVERMIND, PointFromId(47149978));
        }
    }
    gf_PlotBrutaliskPath(gv_AITargetPlayer);
    AIAttackWaveSend(gv_eNEMY_OVERMIND, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Brutalisk03_Init () {
    gt_Brutalisk03 = TriggerCreate("gt_Brutalisk03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Suicide
//--------------------------------------------------------------------------------------------------
bool gt_ZergSuicide_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AIGlobalSuicide(gv_eNEMY_OVERMIND);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergSuicide_Init () {
    gt_ZergSuicide = TriggerCreate("gt_ZergSuicide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_townID;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopAI(gv_eNEMY_AMON_1, gv_pLAYER_1);
    libCOMI_gf_StartCoopAI(gv_eNEMY_AMON_2, gv_pLAYER_2);
    libCOMI_gf_StartCoopAI(gv_eNEMY_OVERMIND, gv_pLAYER_1);
    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind Dead
//--------------------------------------------------------------------------------------------------
bool gt_OvermindDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OvermindDead_Init () {
    gt_OvermindDead = TriggerCreate("gt_OvermindDead_Func");
    TriggerAddEventUnitDied(gt_OvermindDead, UnitRefFromUnit(UnitFromId(1436250425)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    unitgroup auto9F3F3F3F_g;
    int auto9F3F3F3F_u;
    unitgroup auto13712A4E_g;
    int auto13712A4E_u;

    // Variable Declarations
    unit lv_unitIter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9F3F3F3F_g = UnitGroup(null, gv_eNEMY_OVERMIND, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9F3F3F3F_u = 1;
    for ( ; auto9F3F3F3F_u <= UnitGroupCount(auto9F3F3F3F_g, c_unitCountAll) ; auto9F3F3F3F_u += BoolToInt(lv_unitIter == UnitGroupUnit(auto9F3F3F3F_g, auto9F3F3F3F_u)) ) {
        lv_unitIter = UnitGroupUnit(auto9F3F3F3F_g, auto9F3F3F3F_u);
        libNtve_gf_RescueUnit(lv_unitIter, gv_aLLY_NAKTUL, true);
        UnitIssueOrder(lv_unitIter, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPropertyFixed(lv_unitIter, c_unitPropLifePercent, 100.0);
        AIRemoveUnitFromAnyWaves(lv_unitIter);
    }
    auto13712A4E_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_eNEMY_OVERMIND, c_unitAllianceAllyExcludeSelf, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto13712A4E_u = 1;
    for ( ; auto13712A4E_u <= UnitGroupCount(auto13712A4E_g, c_unitCountAll) ; auto13712A4E_u += BoolToInt(lv_unitIter == UnitGroupUnit(auto13712A4E_g, auto13712A4E_u)) ) {
        lv_unitIter = UnitGroupUnit(auto13712A4E_g, auto13712A4E_u);
        UnitIssueOrder(lv_unitIter, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1337575092)), c_orderQueueReplace);
        AIRemoveUnitFromAnyWaves(lv_unitIter);
    }
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    playergroup auto948D387D_g;
    int auto948D387D_p;

    // Variable Declarations
    unit lv_naktulUnit;
    unit lv_unitIter;
    int lv_playerIter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveDestroyTheOvermindComplete, true, true);
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    SoundPlayForPlayer(SoundLink("UI_MissionComplete", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 100.0, 0.0);
    auto948D387D_g = gv_enemyGroup; 
    auto948D387D_p = 1;
    for ( ; auto948D387D_p <= PlayerGroupCount(auto948D387D_g) ; auto948D387D_p += BoolToInt(lv_playerIter == PlayerGroupPlayer(auto948D387D_g, auto948D387D_p)) ) {
        lv_playerIter = PlayerGroupPlayer(auto948D387D_g, auto948D387D_p);
        libCOMI_gf_SetAllianceOneWayCoop(lv_playerIter, gv_aLLY_NAKTUL, libNtve_ge_AllianceSetting_Neutral);
    }
    UnitPauseAll(true);
    UnitCreate(1, "BroodMotherBurrowed", 0, gv_aLLY_NAKTUL, PointFromId(1461720002), 90.0);
    AISetUnitScriptControlled(lv_naktulUnit, false);
    lv_naktulUnit = UnitLastCreated();
    libNtve_gf_PauseUnit(lv_naktulUnit, false);
    UnitIssueOrder(lv_naktulUnit, Order(AbilityCommand("BurrowBroodMotherUp", 0)), c_orderQueueReplace);
    CameraLockInput(gv_pLAYER_1, true);
    CameraLockInput(gv_pLAYER_2, true);
    UnitClearSelection(gv_pLAYER_1);
    UnitClearSelection(gv_pLAYER_2);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_1, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_1, PointFromId(1461720002), 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_2, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_2, PointFromId(1461720002), 2.0, -1, 10.0, false);
    libNtve_gf_AttachActorToUnit(lv_naktulUnit, "TalkIconBubble", "Ref_Overhead");
    gf_BrainstormTransmission(SoundLink("NaktulVictory", -1));
    ActorScopeKill(ActorScopeFromActor(libNtve_gf_ActorLastCreated()));
    UnitSetFacing(lv_naktulUnit, 270.0, 1.5);
    Wait(2.0, c_timeGame);
    libNtve_gf_AttachActorToUnit(lv_naktulUnit, "TalkIconBubble", "Ref_Overhead");
    if ((gv_naktulSuperior != 0)) {
        gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulBlessingZ", -1), SoundLink("NaktulBlessing", -1));
    }
    else {
        gf_BrainstormTransmission(SoundLink("NaktulBlessing", -1));
    }
    ActorScopeKill(ActorScopeFromActor(libNtve_gf_ActorLastCreated()));
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameOver(gv_pLAYER_1, c_gameOverVictory, true, true);
    GameOver(gv_pLAYER_2, c_gameOverVictory, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameOver(gv_pLAYER_1, c_gameOverDefeat, true, true);
    GameOver(gv_pLAYER_2, c_gameOverDefeat, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheOvermind - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheOvermindCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("UnknownObjective");
    gv_objectiveDestroyTheOvermind = ObjectiveLastCreated();
    ObjectiveSetName(gv_objectiveDestroyTheOvermind, TextExpressionAssemble("Param/Expression/2932E47B"));
    ObjectiveSetPriority(gv_objectiveDestroyTheOvermind, 10);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheOvermindCreate_Init () {
    gt_ObjectiveDestroyTheOvermindCreate = TriggerCreate("gt_ObjectiveDestroyTheOvermindCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - KillTheCerebrates - Create
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveKillTheCerebratesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("KilltheCerebrates");
    gv_objectiveKillTheCerebrates = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveKillTheCerebratesCreate_Init () {
    gt_BonusObjectiveKillTheCerebratesCreate = TriggerCreate("gt_BonusObjectiveKillTheCerebratesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - KillTheCerebrates - Update
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveKillTheCerebratesUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BonusObjectiveKillTheCerebratesCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("KilltheCerebrates", gv_cerebratesKilled);
    TextExpressionSetToken("Param/Expression/81B5E0D1", "StructureCount", IntToText(gv_cerebratesKilled));
    ObjectiveSetName(gv_objectiveKillTheCerebrates, TextExpressionAssemble("Param/Expression/81B5E0D1"));
    if ((gv_cerebratesKilled >= 2)) {
        TriggerExecute(gt_BonusObjectiveKillTheCerebratesComplete, true, false);
    }
    else {
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("UI_ObjectiveUpdate", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 100.0, 0.0);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        if ((gv_naktulSuperior != 0)) {
            gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulCerebrateDeathZ", -1), SoundLink("NaktulCerebrateDeath", -1));
            Wait(gf_LongestSoundDuration(SoundLink("NaktulCerebrateDeath", -1), SoundLink("NaktulCerebrateDeathZ", -1)), c_timeGame);
        }
        else {
            gf_BrainstormTransmission(SoundLink("NaktulCerebrateDeath", -1));
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveKillTheCerebratesUpdate_Init () {
    gt_BonusObjectiveKillTheCerebratesUpdate = TriggerCreate("gt_BonusObjectiveKillTheCerebratesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - KillTheCerebrates - Complete
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveKillTheCerebratesComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveKillTheCerebratesCreate, true, false);
    ObjectiveSetState(gv_objectiveKillTheCerebrates, c_objectiveStateCompleted);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 100.0, 0.0);
    TriggerQueueEnter();
    Wait(2.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_naktulSuperior != 0)) {
        gf_BrainstormSplitTransmission(gv_naktulSuperior, SoundLink("NaktulCerebrateCompleteZ", -1), SoundLink("NaktulCerebrateComplete", -1));
    }
    else {
        gf_BrainstormTransmission(SoundLink("NaktulCerebrateComplete", -1));
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    lv_randomPlayer = RandomInt(gv_pLAYER_1, gv_pLAYER_2);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("CerebrateResponseOBS", true, lv_randomPlayer);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveKillTheCerebratesComplete_Init () {
    gt_BonusObjectiveKillTheCerebratesComplete = TriggerCreate("gt_BonusObjectiveKillTheCerebratesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - DestroyTheOvermind - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyTheOvermindComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyTheOvermindCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyTheOvermind, c_objectiveStateCompleted);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 100.0, 0.0);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyTheOvermindComplete_Init () {
    gt_ObjectiveDestroyTheOvermindComplete = TriggerCreate("gt_ObjectiveDestroyTheOvermindComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt__1MapStart_Init();
    gt__2PlayerSetup_Init();
    gt__3LoadingComplete_Init();
    gt__4Technology_Init();
    gt__5Units_Init();
    gt__6MusicSound_Init();
    gt__7Environment_Init();
    gt__8Difficulties_Init();
    gt_CentreOutpostReveal_Init();
    gt_BrutaliskPing_Init();
    gt_BrutaliskDies_Init();
    gt_CerebrateDies_Init();
    gt_OvermindDies_Init();
    gt_StartGame_Init();
    gt_SetupCerebrateObjective_Init();
    gt_StateCheck_Init();
    gt_CentreOutpostEncroached_Init();
    gt_OvermindEncroached_Init();
    gt_LeftCerebrateEncroached_Init();
    gt_RightCerebrateEncroached_Init();
    gt_LeftCerebrateKilled_Init();
    gt_RightCerebrateKilled_Init();
    gt_NaktulAirUnitRetreat_Init();
    gt_RemoveNaktulsGroundUnits_Init();
    gt_AmonsForcesAttacking_Init();
    gt_NaktulRevealsCentralOutpost_Init();
    gt_OvermindUnderAttack_Init();
    gt_OvermindSpellControl_Init();
    gt_BioComboWave01_Init();
    gt_BioComboWave02_Init();
    gt_BioComboWave03_Init();
    gt_BioComboWave04_Init();
    gt_MechComboWave01_Init();
    gt_MechComboWave02_Init();
    gt_MechComboWave03_Init();
    gt_MechComboWave04_Init();
    gt_SkyComboWave01_Init();
    gt_SkyComboWave02_Init();
    gt_SkyComboWave03_Init();
    gt_SkyComboWave04_Init();
    gt_ShadowComboWave01_Init();
    gt_ShadowComboWave02_Init();
    gt_ShadowComboWave03_Init();
    gt_ShadowComboWave04_Init();
    gt_AIAttackWaves_Init();
    gt_InitialWave_Init();
    gt_ComboWave01_Init();
    gt_ComboWave02_Init();
    gt_ComboWave03_Init();
    gt_ComboWave04_Init();
    gt_DoubleWave01_Init();
    gt_DoubleWave02_Init();
    gt_DoubleWave03_Init();
    gt_DoubleWave04_Init();
    gt_Brutalisk01_Init();
    gt_Brutalisk02_Init();
    gt_Brutalisk03_Init();
    gt_ZergSuicide_Init();
    gt_StartAI_Init();
    gt_OvermindDead_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_ObjectiveDestroyTheOvermindCreate_Init();
    gt_BonusObjectiveKillTheCerebratesCreate_Init();
    gt_BonusObjectiveKillTheCerebratesUpdate_Init();
    gt_BonusObjectiveKillTheCerebratesComplete_Init();
    gt_ObjectiveDestroyTheOvermindComplete_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
