//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Mercenary Business
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_player03AI = 6;
const int gv_player04AI = 7;
const fixed gv_eventMinutes = 0.5;
const int gv_stateBarRange = 12500;
const int gv_maxIndexBonusObjective = 2;
const int gv_maxIndexMULEsSpawns = 2;
const int gv_maxIndexAttackWaveSpawns = 2;
const int gv_maxIndexAttackWaveTargets = 5;
const int gv_maxIndexAttackWaves = 11;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_AttackWave {
    int lv_resourceBucket;
    int lv_techBucket;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_playerGroup;
int gv_player01User;
int gv_player02User;
int gv_difficulty;
int gv_eventCounter;
timer gv_roundTimer;
int gv_roundCurrent;
int gv_shipmentRemaining;
int gv_shipmentLost;
int gv_shipmentWon;
int gv_roundType;
int gv_roundLimitToLose;
int gv_availableMineralsRounds;
int gv_availableGasRounds;
int gv_availableResourceRounds;
bool gv_transmissionSent;
int gv_stateDialog;
int[6] gv_addMineralDialogItem;
int[6] gv_addGasDialogItem;
int gv_stateWindow;
int gv_mineralCountPlayers;
int gv_gasCountPlayers;
int gv_mineralCountAmon;
int gv_gasCountAmon;
bool gv_lastFlashIsBlackText;
text gv_textPlayersShipmentMinerals;
text gv_textPlayersShipmentGas;
text gv_textAmonShipmentMinerals;
text gv_textAmonShipmentGas;
int gv_resourceMarkersUp;
int gv_resourceMarkersLeft;
bool gv_resourceMarkerAvailableUp;
bool gv_resourceMarkerAvailableLeft;
int gv_enemyBaseMarkerMain;
int gv_enemyBaseMarkerCentral;
int gv_enemyBaseMarkerSideP03;
int gv_enemyBaseMarkerSideP04;
bool gv_enemyBaseMarkerMainAvailable;
bool gv_enemyBaseMarkerCentralAvailable;
bool gv_enemyBaseMarkerSideP03Available;
bool gv_enemyBaseMarkerSideP04Available;
int gv_pickupMarkersP01;
bool gv_pickupMarkersAvailableP01;
int gv_pickupMarkersP02;
bool gv_pickupMarkersAvailableP02;
unit[5] gv_pickupReticleP01Unit;
actor[5] gv_pickupReticleP01Actor;
int[5] gv_pickupReticleP01Text;
unit[5] gv_pickupReticleP02Unit;
actor[5] gv_pickupReticleP02Actor;
int[5] gv_pickupReticleP02Text;
unit[3] gv_enemyReticleUnit;
actor[3] gv_enemyReticleActor;
int[3] gv_enemyReticleText;
actor gv_relicReticleActor;
int gv_relicReticleText;
actor gv_wreckedTransportReticleActor;
int gv_wreckedTransportReticleText;
unit[gv_maxIndexBonusObjective + 1] gv_bonusObjectiveTransport;
point[gv_maxIndexBonusObjective + 1] gv_bonusObjectiveTransportDropPod;
bool[gv_maxIndexBonusObjective + 1] gv_bonusObjectiveTransportDropPodDone;
int[gv_maxIndexBonusObjective + 1] gv_bonusObjectiveMarkers;
int gv_bonusObjectiveCounter;
int gv_bonusObjectiveRemaining;
point[2][gv_maxIndexMULEsSpawns + 1] gv_mULEsSpawnPoints;
unitgroup gv_lastMULEsGroupA;
unitgroup gv_lastMULEsGroupB;
unitgroup[4] gv_hiddenSCVs;
fixed gv_transmissionDuration;
bool gv_hybridWaveFired;
bool gv_mercenaryWaveFired;
region[2][gv_maxIndexAttackWaveSpawns + 1] gv_attackWaveSpawnRegions;
region[gv_maxIndexAttackWaveTargets + 1] gv_attackWaveTargetRegions;
gs_AttackWave[gv_maxIndexAttackWaves + 1] gv_attackWave;
int gv_attackWaveCounter;
unitgroup gv_attackWaveMajorGroup;
int gv_attackWaveMajorPing;
int gv_objectiveHarvest;
int gv_objectiveRounds;
int gv_objectiveOptionalCollectRelics;
unit gv_junkerWest;
unit gv_junkerEast;

void InitGlobals () {
    int init_i;

    gv_playerGroup = PlayerGroupEmpty();
    gv_player01User = 1;
    gv_player02User = 2;
    gv_difficulty = 2;
    gv_roundTimer = TimerCreate();
    gv_roundCurrent = 1;
    gv_shipmentRemaining = 6;
    gv_roundType = 1;
    gv_roundLimitToLose = 2;
    gv_availableMineralsRounds = 1;
    gv_availableGasRounds = 2;
    gv_availableResourceRounds = 1;
    gv_stateDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_addMineralDialogItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_addGasDialogItem[init_i] = c_invalidDialogControlId;
    }
    gv_stateWindow = c_boardNone;
    gv_textPlayersShipmentMinerals = StringExternal("Param/Value/1E32FCDE");
    gv_textPlayersShipmentGas = StringExternal("Param/Value/EEC1BEBC");
    gv_textAmonShipmentMinerals = StringExternal("Param/Value/177739F8");
    gv_textAmonShipmentGas = StringExternal("Param/Value/3D30DD0D");
    gv_resourceMarkersUp = c_invalidPingId;
    gv_resourceMarkersLeft = c_invalidPingId;
    gv_resourceMarkerAvailableUp = true;
    gv_resourceMarkerAvailableLeft = true;
    gv_enemyBaseMarkerMain = c_invalidPingId;
    gv_enemyBaseMarkerCentral = c_invalidPingId;
    gv_enemyBaseMarkerSideP03 = c_invalidPingId;
    gv_enemyBaseMarkerSideP04 = c_invalidPingId;
    gv_enemyBaseMarkerMainAvailable = true;
    gv_enemyBaseMarkerCentralAvailable = true;
    gv_enemyBaseMarkerSideP03Available = true;
    gv_enemyBaseMarkerSideP04Available = true;
    gv_pickupMarkersP01 = c_invalidPingId;
    gv_pickupMarkersAvailableP01 = true;
    gv_pickupMarkersP02 = c_invalidPingId;
    gv_pickupMarkersAvailableP02 = true;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_pickupReticleP01Text[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_pickupReticleP02Text[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_enemyReticleText[init_i] = c_textTagNone;
    }
    gv_relicReticleText = c_textTagNone;
    gv_wreckedTransportReticleText = c_textTagNone;
    for (init_i = 0; init_i <= gv_maxIndexBonusObjective; init_i += 1) {
        gv_bonusObjectiveMarkers[init_i] = c_invalidPingId;
    }
    gv_bonusObjectiveRemaining = 3;
    gv_lastMULEsGroupA = UnitGroupEmpty();
    gv_lastMULEsGroupB = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_hiddenSCVs[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_maxIndexAttackWaves; init_i += 1) {
        gv_attackWave[init_i].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        gv_attackWave[init_i].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    gv_attackWaveMajorGroup = UnitGroupEmpty();
    gv_attackWaveMajorPing = c_invalidPingId;
    gv_objectiveHarvest = c_invalidObjectiveId;
    gv_objectiveRounds = c_invalidObjectiveId;
    gv_objectiveOptionalCollectRelics = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
text gf_GetRemainingDurationofTimerText (timer lp_timer);
point gf_GetMULEsSpawn (int lp_indexPlayer);
void gf_CreateWindow ();
void gf_SetupMULEsSpawn ();
void gf_ShowPickupArea (region lp_region);
void gf_ShowBonusObjective (unit lp_unit, region lp_region, int lp_indexBonusObjective, point lp_dropPodPoint);
void gf_ShowSCVs (unitgroup lp_sCVsGroup);
void gf_MiraHanTransmission (text lp_text, soundlink lp_sound);
point gf_GetAttackWaveSpawn ();
point gf_GetAttackWaveTarget ();
void gf_SetupAttackWaveSpawns ();
void gf_SetupAttackWaveTargets ();
void gf_SetupAttackWaves ();
void gf_SendNextAttackWave (int lp_indexAttackWave, bool lp_double);
void gf_SendMajorAttackWave (bool lp_hybrid);
void gf_SendDropAttackWave ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init03LoadingComplete;
trigger gt_Init05Units;
trigger gt_Init07Environment;
trigger gt_StartAI;
trigger gt_StartGameQ;
trigger gt_PickupsGenerate;
trigger gt_PickupsCollect;
trigger gt_FlashAddResourcesDialogItems;
trigger gt_ResetShipmentsResources;
trigger gt_EventDispatcher;
trigger gt_RoundExpire;
trigger gt_ResourceUpdateAmon;
trigger gt_ResourceUpdatePlayers;
trigger gt_WindowUpdate;
trigger gt_MULEsNext;
trigger gt_MarkerResourcesShow;
trigger gt_MarkerRevealerShow;
trigger gt_MarkerEnemyBasesShow;
trigger gt_MarkerRemove;
trigger gt_EnemyBuildingsRevealer;
trigger gt_BonusObjectiveNext;
trigger gt_BonusObjectiveDrop;
trigger gt_BonusObjectiveRelic;
trigger gt_BonusObjectivePickup;
trigger gt_EnemyAttackingQ;
trigger gt_RoundLostQ;
trigger gt_RoundDrawQ;
trigger gt_RoundWonQ;
trigger gt_RoundEndingQ;
trigger gt_NewRoundQ;
trigger gt_EnemyDropPodsQ;
trigger gt_MajorWaveHybridsQ;
trigger gt_MajorWaveMercenariesQ;
trigger gt_RelicMarkerQ;
trigger gt_RelicCompleteQ;
trigger gt_MULEsSpawnQ;
trigger gt_MiraHanTalkingPortrait;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_RemoveSCVsonBaseDestroyed;
trigger gt_SpawnHybridforMainBaseDefence;
trigger gt_NextAttackWave;
trigger gt_NextMajorWave;
trigger gt_UpdateMajorAttackWavePing;
trigger gt_ObjectiveHarvestCreate;
trigger gt_ObjectiveHarvestComplete;
trigger gt_ObjectiveHarvestUpdate;
trigger gt_ObjectiveHarvestFailed;
trigger gt_ObjectiveRoundsCreate;
trigger gt_ObjectiveRoundsComplete;
trigger gt_ObjectiveRoundsUpdate;
trigger gt_ObjectiveRoundsFailed;
trigger gt_ObjectiveOptionalCollectRelicsCreate;
trigger gt_ObjectiveOptionalCollectRelicsComplete;
trigger gt_ObjectiveOptionalCollectRelicsUpdate;
trigger gt_ObjectiveOptionalCollectRelicsFailed;
trigger gt_SuperCraneActivation;
trigger gt_JunkerWestSpawn;
trigger gt_JunkerWestPitstop1;
trigger gt_JunkerWestPitstop2;
trigger gt_JunkerWestPitstop3;
trigger gt_JunkerWestDespawn;
trigger gt_JunkerEastSpawn;
trigger gt_JunkerEastPitstop1;
trigger gt_JunkerEastPitstop2;
trigger gt_JunkerEastPitstop3;
trigger gt_JunkerEastDespawn;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
text gf_GetRemainingDurationofTimerText (timer lp_timer) {
    // Variable Declarations
    fixed lv_currentTimerValue;
    int lv_minutes;
    int lv_seconds;
    text lv_textMinutes;
    text lv_textSeconds;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentTimerValue = TimerGetRemaining(lp_timer);

    // Implementation
    if ((lv_currentTimerValue > 0.0)) {
        lv_seconds = ModI(FixedToInt(lv_currentTimerValue), 60);
        lv_minutes = (FixedToInt(lv_currentTimerValue) / 60);
        if ((lv_minutes < 10)) {
            lv_textMinutes = (StringExternal("Param/Value/5FE0A160") + IntToText(lv_minutes));
        }
        else {
            lv_textMinutes = IntToText(lv_minutes);
        }
        if ((lv_seconds < 10)) {
            lv_textSeconds = (StringExternal("Param/Value/C869F1BF") + IntToText(lv_seconds));
        }
        else {
            lv_textSeconds = IntToText(lv_seconds);
        }
        return (lv_textMinutes + StringExternal("Param/Value/9F809450") + lv_textSeconds);
    }
    else {
        return StringExternal("Param/Value/4F3DB549");
    }
}

point gf_GetMULEsSpawn (int lp_indexPlayer) {
    // Variable Declarations
    int lv_indexSpawn;

    // Automatic Variable Declarations
    const int auto41C95C40_ae = gv_maxIndexMULEsSpawns;
    const int auto41C95C40_ai = 1;

    // Variable Initialization

    // Implementation
    lv_indexSpawn = 0;
    for ( ; ( (auto41C95C40_ai >= 0 && lv_indexSpawn <= auto41C95C40_ae) || (auto41C95C40_ai < 0 && lv_indexSpawn >= auto41C95C40_ae) ) ; lv_indexSpawn += auto41C95C40_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_player01User, c_unitAllianceEnemy, RegionCircle(gv_mULEsSpawnPoints[lp_indexPlayer][lv_indexSpawn], 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5)) && ((UnitGroupCount(UnitGroup("PlanetaryFortress", gv_player03AI, RegionCircle(gv_mULEsSpawnPoints[lp_indexPlayer][lv_indexSpawn], 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("PlanetaryFortress", gv_player04AI, RegionCircle(gv_mULEsSpawnPoints[lp_indexPlayer][lv_indexSpawn], 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("OrbitalCommand", gv_player03AI, RegionCircle(gv_mULEsSpawnPoints[lp_indexPlayer][lv_indexSpawn], 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup("OrbitalCommand", gv_player04AI, RegionCircle(gv_mULEsSpawnPoints[lp_indexPlayer][lv_indexSpawn], 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            break;
        }

    }
    return gv_mULEsSpawnPoints[lp_indexPlayer][lv_indexSpawn];
}

void gf_CreateWindow () {
    // Variable Declarations
    int lv_zergMineralDialogItem;
    int lv_terranMineralDialogItem;
    int lv_protossMineralDialogItem;
    int lv_zergGasDialogItem;
    int lv_terranGasDialogItem;
    int lv_protossGasDialogItem;
    int lv_xOffsetP01;
    int lv_xOffsetTerranP01;

    // Automatic Variable Declarations
    playergroup autoF5F7708C_g;
    int autoF5F7708C_var;
    string auto8FAC7C2A_val;

    // Variable Initialization
    lv_zergMineralDialogItem = c_invalidDialogControlId;
    lv_terranMineralDialogItem = c_invalidDialogControlId;
    lv_protossMineralDialogItem = c_invalidDialogControlId;
    lv_zergGasDialogItem = c_invalidDialogControlId;
    lv_terranGasDialogItem = c_invalidDialogControlId;
    lv_protossGasDialogItem = c_invalidDialogControlId;
    lv_xOffsetP01 = 45;

    // Implementation
    gv_mineralCountPlayers = 0;
    DialogCreate(500, 100, c_anchorTopRight, 10, 30, false);
    gv_stateDialog = DialogLastCreated();
    DialogSetImageVisible(gv_stateDialog, false);
    DialogControlCreateFromTemplate(gv_stateDialog, c_triggerControlTypeButton, "CustomButtonTemplate/ZergButtonTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_zergMineralDialogItem = DialogControlLastCreated();
    DialogControlCreateFromTemplate(gv_stateDialog, c_triggerControlTypeButton, "CustomButtonTemplate/ProtossButtonTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_protossMineralDialogItem = DialogControlLastCreated();
    DialogControlCreateFromTemplate(gv_stateDialog, c_triggerControlTypeButton, "CustomButtonTemplate/TerranButtonTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_terranMineralDialogItem = DialogControlLastCreated();
    DialogControlCreateFromTemplate(gv_stateDialog, c_triggerControlTypeButton, "CustomButtonTemplate/ZergButtonTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_zergGasDialogItem = DialogControlLastCreated();
    DialogControlCreateFromTemplate(gv_stateDialog, c_triggerControlTypeButton, "CustomButtonTemplate/ProtossButtonTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_protossGasDialogItem = DialogControlLastCreated();
    DialogControlCreateFromTemplate(gv_stateDialog, c_triggerControlTypeButton, "CustomButtonTemplate/TerranButtonTemplate");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_terranGasDialogItem = DialogControlLastCreated();
    autoF5F7708C_g = gv_playerGroup;
    autoF5F7708C_var = -1;
    while (true) {
        autoF5F7708C_var = PlayerGroupNextPlayer(autoF5F7708C_g, autoF5F7708C_var);
        if (autoF5F7708C_var < 0) { break; }
        auto8FAC7C2A_val = PlayerRace(autoF5F7708C_var);
        if (auto8FAC7C2A_val == "Terr") {
            gv_addMineralDialogItem[autoF5F7708C_var] = lv_terranMineralDialogItem;
            gv_addGasDialogItem[autoF5F7708C_var] = lv_terranGasDialogItem;
            lv_xOffsetP01 = 20;
            lv_xOffsetTerranP01 = 25;
        }
        else if (auto8FAC7C2A_val == "Prot") {
            gv_addMineralDialogItem[autoF5F7708C_var] = lv_protossMineralDialogItem;
            gv_addGasDialogItem[autoF5F7708C_var] = lv_protossGasDialogItem;
        }
        else {
            gv_addMineralDialogItem[autoF5F7708C_var] = lv_zergMineralDialogItem;
            gv_addGasDialogItem[autoF5F7708C_var] = lv_zergGasDialogItem;
        }
        DialogControlSetPosition(gv_addMineralDialogItem[autoF5F7708C_var], PlayerGroupSingle(autoF5F7708C_var), c_anchorBottomLeft, lv_xOffsetP01, 17);
        DialogControlSetPosition(gv_addGasDialogItem[autoF5F7708C_var], PlayerGroupSingle(autoF5F7708C_var), c_anchorBottomLeft, (235 + (lv_xOffsetP01 - lv_xOffsetTerranP01)), 17);
        libNtve_gf_SetDialogItemText(gv_addMineralDialogItem[autoF5F7708C_var], StringExternal("Param/Value/579D9A38"), PlayerGroupSingle(autoF5F7708C_var));
        libNtve_gf_SetDialogItemText(gv_addGasDialogItem[autoF5F7708C_var], StringExternal("Param/Value/53D16FE7"), PlayerGroupSingle(autoF5F7708C_var));
        DialogSetVisible(gv_stateDialog, PlayerGroupSingle(autoF5F7708C_var), true);
        DialogControlSetVisible(gv_addMineralDialogItem[autoF5F7708C_var], PlayerGroupSingle(autoF5F7708C_var), true);
        DialogControlSetVisible(gv_addGasDialogItem[autoF5F7708C_var], PlayerGroupSingle(autoF5F7708C_var), true);
        libNtve_gf_SetDialogItemTooltip(gv_addMineralDialogItem[autoF5F7708C_var], StringExternal("Param/Value/E80D1E52"), libCOMI_gf_HumanPlayers());
        libNtve_gf_SetDialogItemTooltip(gv_addGasDialogItem[autoF5F7708C_var], StringExternal("Param/Value/EA2F11BD"), libCOMI_gf_HumanPlayers());
        DialogControlSetEnabled(gv_addMineralDialogItem[autoF5F7708C_var], libCOMI_gf_HumanPlayers(), false);
        DialogControlSetEnabled(gv_addGasDialogItem[autoF5F7708C_var], libCOMI_gf_HumanPlayers(), false);
    }
    BoardCreate(1, 4, StringToText(""), Color(0.00, 100.00, 0.00));
    gv_stateWindow = BoardLastCreated();
    BoardSetAnchor(gv_stateWindow, c_anchorTopRight, 0, 40);
    BoardSetColumnWidth(gv_stateWindow, 1, 24.0);
    BoardSetState(gv_stateWindow, PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, StringExternal("Param/Value/236CA653"));
    BoardItemSetFontSize(gv_stateWindow, 1, c_boardRowHeader, 20);
    BoardItemSetProgressShow(gv_stateWindow, 1, 1, true);
    BoardItemSetText(gv_stateWindow, 1, 1, (gv_textPlayersShipmentMinerals + IntToText(gv_mineralCountPlayers) + StringExternal("Param/Value/91DC613C")));
    BoardItemSetFontSize(gv_stateWindow, 1, 1, 15);
    BoardItemSetProgressRange(gv_stateWindow, 1, 1, 0.0, IntToFixed(gv_stateBarRange));
    BoardItemSetProgressColor(gv_stateWindow, 1, 1, Color(2.35, 57.25, 97.65), 1);
    BoardItemSetProgressShow(gv_stateWindow, 1, 2, true);
    BoardItemSetText(gv_stateWindow, 1, 2, (gv_textAmonShipmentMinerals + IntToText(gv_mineralCountAmon) + StringExternal("Param/Value/CB5F6F54")));
    BoardItemSetFontSize(gv_stateWindow, 1, 2, 15);
    BoardItemSetProgressRange(gv_stateWindow, 1, 2, 0.0, IntToFixed(gv_stateBarRange));
    BoardItemSetProgressColor(gv_stateWindow, 1, 2, Color(83.53, 0.00, 0.00), 1);
    BoardItemSetProgressValue(gv_stateWindow, 1, 1, IntToFixed(gv_mineralCountPlayers));
    BoardItemSetProgressValue(gv_stateWindow, 1, 2, IntToFixed(gv_mineralCountAmon));
    BoardItemSetIcon(gv_stateWindow, 1, 1, "Assets\\Textures\\icon-mineral-nobg.dds", false);
    BoardItemSetIcon(gv_stateWindow, 1, 2, "Assets\\Textures\\icon-mineral-nobg.dds", false);
    BoardItemSetProgressShow(gv_stateWindow, 1, 3, true);
    BoardItemSetText(gv_stateWindow, 1, 3, (gv_textPlayersShipmentGas + IntToText(gv_gasCountPlayers) + StringExternal("Param/Value/35C0643D")));
    BoardItemSetFontSize(gv_stateWindow, 1, 3, 15);
    BoardItemSetProgressRange(gv_stateWindow, 1, 3, 0.0, IntToFixed(gv_stateBarRange));
    BoardItemSetProgressColor(gv_stateWindow, 1, 3, Color(2.35, 57.25, 97.65), 1);
    BoardItemSetProgressShow(gv_stateWindow, 1, 4, true);
    BoardItemSetText(gv_stateWindow, 1, 4, (gv_textAmonShipmentGas + IntToText(gv_gasCountAmon) + StringExternal("Param/Value/E9BE4F22")));
    BoardItemSetFontSize(gv_stateWindow, 1, 4, 15);
    BoardItemSetProgressRange(gv_stateWindow, 1, 4, 0.0, IntToFixed(gv_stateBarRange));
    BoardItemSetProgressColor(gv_stateWindow, 1, 4, Color(83.53, 0.00, 0.00), 1);
    BoardItemSetProgressValue(gv_stateWindow, 1, 3, IntToFixed(gv_gasCountPlayers));
    BoardItemSetProgressValue(gv_stateWindow, 1, 4, IntToFixed(gv_gasCountAmon));
    BoardItemSetIcon(gv_stateWindow, 1, 3, "Assets\\Textures\\icon-gas-protoss-nobg.dds", false);
    BoardItemSetIcon(gv_stateWindow, 1, 4, "Assets\\Textures\\icon-gas-protoss-nobg.dds", false);
    BoardItemSetProgressColor(gv_stateWindow, 1, 3, Color(75.29, 75.29, 75.29), 1);
    BoardItemSetProgressColor(gv_stateWindow, 1, 4, Color(75.29, 75.29, 75.29), 1);
    BoardMinimizeShow(gv_stateWindow, PlayerGroupAll(), false);
    SoundPlay(SoundLink("TUI_StarmapMenuPopup", -1), PlayerGroupAll(), 100.0, 0.0);
}

void gf_SetupMULEsSpawn () {
    // Variable Declarations
    int lv_indexSpawn;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    const int auto95E3FF95_ae = gv_maxIndexMULEsSpawns;
    const int auto95E3FF95_ai = 1;

    // Variable Initialization

    // Implementation
    lv_indexSpawn = 0;
    for ( ; ( (auto95E3FF95_ai >= 0 && lv_indexSpawn <= auto95E3FF95_ae) || (auto95E3FF95_ai < 0 && lv_indexSpawn >= auto95E3FF95_ae) ) ; lv_indexSpawn += auto95E3FF95_ai ) {
        lv_spawnPoint = PointFromName(("MULEs Spawn Point P0" + IntToString(3) + " " + IntToString((lv_indexSpawn + 1))));
        if ((lv_spawnPoint != null)) {
            gv_mULEsSpawnPoints[0][lv_indexSpawn] = lv_spawnPoint;
        }

        lv_spawnPoint = PointFromName(("MULEs Spawn Point P0" + IntToString(4) + " " + IntToString((lv_indexSpawn + 1))));
        if ((lv_spawnPoint != null)) {
            gv_mULEsSpawnPoints[1][lv_indexSpawn] = lv_spawnPoint;
        }

    }
}

void gf_ShowPickupArea (region lp_region) {
    // Automatic Variable Declarations
    playergroup autoDF002451_g;
    int autoDF002451_var;

    // Implementation
    autoDF002451_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoDF002451_var = -1;
    while (true) {
        autoDF002451_var = PlayerGroupNextPlayer(autoDF002451_g, autoDF002451_var);
        if (autoDF002451_var < 0) { break; }
        VisRevealArea(autoDF002451_var, lp_region, 1.5, false);
        UIAlertPoint("Trigger", autoDF002451_var, StringExternal("Param/Value/FA831738"), null, RegionGetCenter(lp_region));
    }
}

void gf_ShowBonusObjective (unit lp_unit, region lp_region, int lp_indexBonusObjective, point lp_dropPodPoint) {
    // Variable Declarations
    point lv_transportPosition;
    fixed lv_transportAngle;

    // Automatic Variable Declarations
    playergroup auto2CE6C14C_g;
    int auto2CE6C14C_var;

    // Variable Initialization

    // Implementation
    gv_bonusObjectiveTransportDropPod[lp_indexBonusObjective] = lp_dropPodPoint;
    lv_transportAngle = UnitGetFacing(lp_unit);
    lv_transportPosition = UnitGetPosition(lp_unit);
    UnitRemove(lp_unit);
    UnitCreate(1, "ScrapHuge2", 0, 0, lv_transportPosition, lv_transportAngle);
    gv_bonusObjectiveTransport[lp_indexBonusObjective] = UnitLastCreated();
    if ((lp_indexBonusObjective == 0)) {
        HelpPanelAddTip(libCOMI_gf_HumanPlayers(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/681A12B5"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/F30B592D"), StringExternal("Param/Value/EC6784AE"), "Assets\\Textures\\btn-tips-protossrelic.dds");
        libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranBonusObjective, libCOMI_ge_CampaginReticleSize_Large, StringExternal("Param/Value/3A3E51D0"), gv_bonusObjectiveTransport[lp_indexBonusObjective], "Ref_Center");
        gv_wreckedTransportReticleActor = libNtve_gf_ActorLastCreated();
        gv_wreckedTransportReticleText = TextTagLastCreated();
    }

    Wait(1.0, c_timeGame);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, RegionGetCenter(lp_region), StringExternal("Param/Value/F2B218FC"));
    gv_bonusObjectiveMarkers[lp_indexBonusObjective] = PingLastCreated();
    auto2CE6C14C_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto2CE6C14C_var = -1;
    while (true) {
        auto2CE6C14C_var = PlayerGroupNextPlayer(auto2CE6C14C_g, auto2CE6C14C_var);
        if (auto2CE6C14C_var < 0) { break; }
        VisRevealArea(auto2CE6C14C_var, lp_region, 3.0, false);
        UIAlertPoint("Trigger", auto2CE6C14C_var, StringExternal("Param/Value/0FFBA317"), null, RegionGetCenter(lp_region));
    }
}

void gf_ShowSCVs (unitgroup lp_sCVsGroup) {
    // Variable Declarations
    bool lv_lastShown;

    // Automatic Variable Declarations
    unitgroup auto75FE8DCD_g;
    int auto75FE8DCD_u;
    unit auto75FE8DCD_var;

    // Variable Initialization

    // Implementation
    auto75FE8DCD_g = lp_sCVsGroup;
    auto75FE8DCD_u = UnitGroupCount(auto75FE8DCD_g, c_unitCountAll);
    for (;; auto75FE8DCD_u -= 1) {
        auto75FE8DCD_var = UnitGroupUnitFromEnd(auto75FE8DCD_g, auto75FE8DCD_u);
        if (auto75FE8DCD_var == null) { break; }
        if (((UnitCount(null, gv_player03AI, RegionCircle(UnitGetPosition(auto75FE8DCD_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 5) || (UnitCount(null, gv_player04AI, RegionCircle(UnitGetPosition(auto75FE8DCD_var), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 5))) {
            if ((gv_difficulty == 1)) {
                if ((lv_lastShown == true)) {
                    libNtve_gf_ShowHideUnit(auto75FE8DCD_var, true);
                    lv_lastShown = false;
                }
                else {
                    lv_lastShown = true;
                }
            }
            else {
                libNtve_gf_ShowHideUnit(auto75FE8DCD_var, true);
            }
        }

    }
}

void gf_MiraHanTransmission (text lp_text, soundlink lp_sound) {
    // Variable Declarations
    fixed lv_soundDuration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soundDuration = SoundLengthSync(lp_sound);

    // Implementation
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 100.0, 0.0);
    if ((lv_soundDuration <= 12.0)) {
        TransmissionSendForPlayerSelect(libCOMI_gf_HumanPlayers(), TransmissionSourceFromModel("HanPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", lp_sound, StringExternal("Param/Value/CD12C2C3"), lp_text, (lv_soundDuration + 1.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    }
    else {
        gv_transmissionDuration = (lv_soundDuration - 10.0);
        TriggerExecute(gt_MiraHanTalkingPortrait, true, false);
        TransmissionSendForPlayerSelect(libCOMI_gf_HumanPlayers(), TransmissionSource(), c_invalidPortraitId, "", "", lp_sound, StringExternal("Param/Value/2DC41CD0"), lp_text, (lv_soundDuration + 1.0), c_transmissionDurationSet, true, c_maxPlayers, false);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
}

point gf_GetAttackWaveSpawn () {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_indexSpawn;
    int lv_offset;

    // Automatic Variable Declarations
    const int auto9A2E02E3_ae = 0;
    const int auto9A2E02E3_ai = -1;

    // Variable Initialization

    // Implementation
    lv_indexPlayer = RandomInt(0, 1);
    if ((gv_maxIndexAttackWaveSpawns > 1)) {
        lv_offset = 1;
    }

    lv_indexSpawn = (gv_maxIndexAttackWaveSpawns - RandomInt(0, lv_offset));
    for ( ; ( (auto9A2E02E3_ai >= 0 && lv_indexSpawn <= auto9A2E02E3_ae) || (auto9A2E02E3_ai < 0 && lv_indexSpawn >= auto9A2E02E3_ae) ) ; lv_indexSpawn += auto9A2E02E3_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_player01User, c_unitAllianceEnemy, gv_attackWaveSpawnRegions[lv_indexPlayer][lv_indexSpawn], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            break;
        }

    }
    return RegionGetCenter(gv_attackWaveSpawnRegions[lv_indexPlayer][lv_indexSpawn]);
}

point gf_GetAttackWaveTarget () {
    // Variable Declarations
    int lv_indexTarget;
    region[gv_maxIndexAttackWaveTargets + 1] lv_foundRegions;
    int lv_foundRegionsCount;

    // Automatic Variable Declarations
    const int autoE10A7852_ae = gv_maxIndexAttackWaveTargets;
    const int autoE10A7852_ai = 1;

    // Variable Initialization
    lv_foundRegionsCount = -1;

    // Implementation
    lv_indexTarget = 0;
    for ( ; ( (autoE10A7852_ai >= 0 && lv_indexTarget <= autoE10A7852_ae) || (autoE10A7852_ai < 0 && lv_indexTarget >= autoE10A7852_ae) ) ; lv_indexTarget += autoE10A7852_ai ) {
        if ((gv_attackWaveTargetRegions[lv_indexTarget] != null) && ((UnitCount(null, gv_player01User, gv_attackWaveTargetRegions[lv_indexTarget], UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > RandomInt(2, 5)) || (UnitCount(null, gv_player02User, gv_attackWaveTargetRegions[lv_indexTarget], UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > RandomInt(2, 5)))) {
            lv_foundRegionsCount += 1;
            lv_foundRegions[lv_foundRegionsCount] = gv_attackWaveTargetRegions[lv_indexTarget];
        }

    }
    if ((lv_foundRegionsCount > -1)) {
        return RegionGetCenter(lv_foundRegions[RandomInt(0, lv_foundRegionsCount)]);
    }
    else {
        return null;
    }
}

void gf_SetupAttackWaveSpawns () {
    // Variable Declarations
    int lv_indexSpawn;
    region lv_spawnRegion;

    // Automatic Variable Declarations
    const int auto67D2A20B_ae = gv_maxIndexAttackWaveSpawns;
    const int auto67D2A20B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_indexSpawn = 0;
    for ( ; ( (auto67D2A20B_ai >= 0 && lv_indexSpawn <= auto67D2A20B_ae) || (auto67D2A20B_ai < 0 && lv_indexSpawn >= auto67D2A20B_ae) ) ; lv_indexSpawn += auto67D2A20B_ai ) {
        lv_spawnRegion = RegionFromName(("Attack Wave Spawn P0" + IntToString(3) + " " + IntToString((lv_indexSpawn + 1))));
        if ((lv_spawnRegion != null)) {
            gv_attackWaveSpawnRegions[0][lv_indexSpawn] = lv_spawnRegion;
        }

        lv_spawnRegion = RegionFromName(("Attack Wave Spawn P0" + IntToString(4) + " " + IntToString((lv_indexSpawn + 1))));
        if ((lv_spawnRegion != null)) {
            gv_attackWaveSpawnRegions[1][lv_indexSpawn] = lv_spawnRegion;
        }

    }
}

void gf_SetupAttackWaveTargets () {
    // Variable Declarations
    int lv_indexTarget;
    region lv_targetRegion;

    // Automatic Variable Declarations
    const int autoBCCAB24F_ae = gv_maxIndexAttackWaveTargets;
    const int autoBCCAB24F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_indexTarget = 0;
    for ( ; ( (autoBCCAB24F_ai >= 0 && lv_indexTarget <= autoBCCAB24F_ae) || (autoBCCAB24F_ai < 0 && lv_indexTarget >= autoBCCAB24F_ae) ) ; lv_indexTarget += autoBCCAB24F_ai ) {
        lv_targetRegion = RegionFromName(("Resources " + IntToString((lv_indexTarget + 1))));
        if ((lv_targetRegion != null)) {
            gv_attackWaveTargetRegions[lv_indexTarget] = lv_targetRegion;
        }

    }
}

void gf_SetupAttackWaves () {
    // Variable Declarations
    int lv_indexWave;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    lv_indexWave += 1;
    gv_attackWave[lv_indexWave].lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    gv_attackWave[lv_indexWave].lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
}

trigger auto_gf_SendNextAttackWave_Trigger = null;
int auto_gf_SendNextAttackWave_lp_indexAttackWave;
bool auto_gf_SendNextAttackWave_lp_double;

void gf_SendNextAttackWave (int lp_indexAttackWave, bool lp_double) {
    auto_gf_SendNextAttackWave_lp_indexAttackWave = lp_indexAttackWave;
    auto_gf_SendNextAttackWave_lp_double = lp_double;

    if (auto_gf_SendNextAttackWave_Trigger == null) {
        auto_gf_SendNextAttackWave_Trigger = TriggerCreate("auto_gf_SendNextAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendNextAttackWave_Trigger, false, false);
}

bool auto_gf_SendNextAttackWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_indexAttackWave = auto_gf_SendNextAttackWave_lp_indexAttackWave;
    bool lp_double = auto_gf_SendNextAttackWave_lp_double;

    // Variable Declarations
    bool lv_doubleWave;
    point lv_targetPoint;
    point lv_spawnPointWave1;
    point lv_spawnPointWave2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_doubleWave = lp_double;

    // Implementation
    if ((gv_attackWaveCounter == 1)) {
        lv_spawnPointWave1 = RegionGetCenter(gv_attackWaveSpawnRegions[RandomInt(0, 1)][0]);
        lv_doubleWave = false;
    }
    else {
        lv_spawnPointWave1 = gf_GetAttackWaveSpawn();
    }
    if ((lv_doubleWave == true)) {
        lv_spawnPointWave2 = gf_GetAttackWaveSpawn();
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_player03AI, gv_player04AI, gv_attackWave[(gv_attackWaveCounter - 1)].lv_resourceBucket, gv_attackWave[(gv_attackWaveCounter - 1)].lv_techBucket, lv_spawnPointWave1, true);
        lv_targetPoint = gf_GetAttackWaveTarget();
        if ((lv_targetPoint != null) && (RandomInt(0, 100) < 30)) {
            libCOMI_gf_AddAttackForceWaypoint(lv_targetPoint, false);
        }

        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_player03AI, gv_player04AI, gv_attackWave[(gv_attackWaveCounter - 1)].lv_resourceBucket, gv_attackWave[(gv_attackWaveCounter - 1)].lv_techBucket, lv_spawnPointWave2, true);
        lv_targetPoint = gf_GetAttackWaveTarget();
        if ((lv_targetPoint != null)) {
            libCOMI_gf_AddAttackForceWaypoint(lv_targetPoint, false);
        }

        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    }
    else {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_player03AI, gv_player04AI, gv_attackWave[gv_attackWaveCounter].lv_resourceBucket, gv_attackWave[gv_attackWaveCounter].lv_techBucket, lv_spawnPointWave1, true);
        lv_targetPoint = gf_GetAttackWaveTarget();
        if ((lv_targetPoint != null)) {
            libCOMI_gf_AddAttackForceWaypoint(lv_targetPoint, false);
        }

        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    }
    return true;
}

trigger auto_gf_SendMajorAttackWave_Trigger = null;
bool auto_gf_SendMajorAttackWave_lp_hybrid;

void gf_SendMajorAttackWave (bool lp_hybrid) {
    auto_gf_SendMajorAttackWave_lp_hybrid = lp_hybrid;

    if (auto_gf_SendMajorAttackWave_Trigger == null) {
        auto_gf_SendMajorAttackWave_Trigger = TriggerCreate("auto_gf_SendMajorAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendMajorAttackWave_Trigger, false, false);
}

bool auto_gf_SendMajorAttackWave_TriggerFunc (bool testConds, bool runActions) {
    bool lp_hybrid = auto_gf_SendMajorAttackWave_lp_hybrid;

    // Variable Declarations
    text lv_pingTooltip;

    // Automatic Variable Declarations
    playergroup auto7810BEAB_g;
    int auto7810BEAB_var;
    int auto80D5C9E4_val;
    int auto59BE322E_val;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(gv_attackWaveMajorGroup, c_unitCountAlive) == 0)) {
        UnitGroupClear(gv_attackWaveMajorGroup);
        if ((lp_hybrid == true)) {
            lv_pingTooltip = StringExternal("Param/Value/FBA493C2");
            TriggerExecute(gt_MajorWaveHybridsQ, true, false);
            Wait(16.0, c_timeGame);
            UIAlertPoint("Trigger", gv_player01User, StringExternal("Param/Value/A83C019A"), null, PointFromId(886379334));
            UIAlertPoint("Trigger", gv_player02User, StringExternal("Param/Value/E3D3EC49"), null, PointFromId(886379334));
            auto59BE322E_val = gv_difficulty;
            if (auto59BE322E_val == 1) {
                UnitCreate(1, "HybridDestroyer", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridReaver", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridDominatorVoid", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridNemesis", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
            else if (auto59BE322E_val == 2) {
                UnitCreate(2, "HybridDestroyer", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "HybridReaver", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridDominatorVoid", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridNemesis", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
            else if (auto59BE322E_val == 3) {
                UnitCreate(2, "HybridDestroyer", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "HybridReaver", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridDominatorVoid", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridBehemoth", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "HybridNemesis", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
            else {
                UnitCreate(2, "HybridDestroyer", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(3, "HybridReaver", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "HybridDominatorVoid", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "HybridBehemoth", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "HybridNemesis", 0, gv_player03AI, PointFromId(886379334), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
        }
        else {
            lv_pingTooltip = StringExternal("Param/Value/D4E18F90");
            TriggerExecute(gt_MajorWaveMercenariesQ, true, false);
            Wait(16.0, c_timeGame);
            auto7810BEAB_g = libCOMI_gf_GetAlliedCommandersPlayers();
            auto7810BEAB_var = -1;
            while (true) {
                auto7810BEAB_var = PlayerGroupNextPlayer(auto7810BEAB_g, auto7810BEAB_var);
                if (auto7810BEAB_var < 0) { break; }
                UIAlertPoint("Trigger", auto7810BEAB_var, StringExternal("Param/Value/2D3184D2"), null, PointFromId(1010974628));
            }
            auto80D5C9E4_val = gv_difficulty;
            if (auto80D5C9E4_val == 1) {
                UnitCreate(8, "WarPig", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "HammerSecurity", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(3, "SpartanCompany", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "SiegeBreaker", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "HelsAngelFighter", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
            else if (auto80D5C9E4_val == 2) {
                UnitCreate(10, "WarPig", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "HammerSecurity", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "SpartanCompany", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "SiegeBreaker", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "HelsAngelFighter", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "DuskWing", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
            else if (auto80D5C9E4_val == 3) {
                UnitCreate(12, "WarPig", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(6, "HammerSecurity", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "MercMedic", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "SpartanCompany", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "SiegeBreaker", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(5, "HelsAngelFighter", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(3, "DuskWing", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(1, "DukesRevenge", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
            else {
                UnitCreate(12, "WarPig", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(6, "HammerSecurity", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(6, "MercReaper", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(6, "MercMedic", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "SpartanCompany", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "SiegeBreaker", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(6, "HelsAngelFighter", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(4, "DuskWing", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
                UnitCreate(2, "DukesRevenge", 0, gv_player03AI, PointFromId(1010974628), 270.0);
                UnitGroupAddUnitGroup(gv_attackWaveMajorGroup, UnitLastCreatedGroup());
            }
        }
        PingDestroy(gv_attackWaveMajorPing);
        libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingBoss", UnitGroupCenterOfGroup(gv_attackWaveMajorGroup), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        gv_attackWaveMajorPing = PingLastCreated();
        PingSetTooltip(gv_attackWaveMajorPing, lv_pingTooltip);
        PingSetScale(gv_attackWaveMajorPing, 0.75);
        TriggerEnable(gt_UpdateMajorAttackWavePing, true);
        AIAttackWaveUseGroup(gv_player03AI, gv_attackWaveMajorGroup);
        libCOMI_gf_EnableDisableCoopAIWavePing(AIUnitGetWave(UnitGroupRandomUnit(gv_attackWaveMajorGroup, c_unitCountAlive)), false);
        if ((lp_hybrid == false)) {
            AIAttackWaveAddWaypoint(gv_player03AI, PointFromId(1683079646), false);
        }

        AIAttackWaveAddWaypoint(gv_player03AI, PointFromId(531053930), false);
        AIAttackWaveAddWaypoint(gv_player03AI, PointFromId(67029144), false);
        AIAttackWaveAddWaypoint(gv_player03AI, PointFromId(2042804637), false);
        AIAttackWaveAddWaypoint(gv_player03AI, PointFromId(1477639171), false);
        AIAttackWaveAddWaypoint(gv_player03AI, PointFromId(1848390428), false);
        AIAttackWaveSend(gv_player03AI, 0, false);
        libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
    }

    return true;
}

trigger auto_gf_SendDropAttackWave_Trigger = null;

void gf_SendDropAttackWave () {
    if (auto_gf_SendDropAttackWave_Trigger == null) {
        auto_gf_SendDropAttackWave_Trigger = TriggerCreate("auto_gf_SendDropAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendDropAttackWave_Trigger, false, false);
}

bool auto_gf_SendDropAttackWave_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    region[2] lv_mainBaseTargets;
    int lv_ping;

    // Automatic Variable Declarations
    playergroup auto33BFEFEB_g;
    int auto33BFEFEB_var;
    playergroup autoD2826D46_g;
    int autoD2826D46_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    lv_mainBaseTargets[0] = RegionFromId(43);
    lv_mainBaseTargets[1] = RegionFromId(44);
    TriggerExecute(gt_EnemyDropPodsQ, true, false);
    lv_targetPoint = gf_GetAttackWaveTarget();
    if ((lv_targetPoint != null)) {
        libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingBaseAttack", lv_targetPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 20.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(lv_ping, StringExternal("Param/Value/6BF11BD7"));
        auto33BFEFEB_g = libCOMI_gf_GetAlliedCommandersPlayers();
        auto33BFEFEB_var = -1;
        while (true) {
            auto33BFEFEB_var = PlayerGroupNextPlayer(auto33BFEFEB_g, auto33BFEFEB_var);
            if (auto33BFEFEB_var < 0) { break; }
            UIAlertPoint("Trigger", auto33BFEFEB_var, StringExternal("Param/Value/D5D5AF4E"), null, lv_targetPoint);
        }
        Wait(17.5, c_timeGame);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_player03AI, gv_player04AI, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionRandomPoint(RegionCircle(lv_targetPoint, 7.5)), true);
        libCOMI_gf_AddAttackForceWaypoint(lv_targetPoint, false);
    }
    else {
        lv_targetPoint = RegionRandomPoint(lv_mainBaseTargets[RandomInt(0, 1)]);
        libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingBaseAttack", lv_targetPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 14.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0F4B9524"));
        autoD2826D46_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoD2826D46_var = -1;
        while (true) {
            autoD2826D46_var = PlayerGroupNextPlayer(autoD2826D46_g, autoD2826D46_var);
            if (autoD2826D46_var < 0) { break; }
            UIAlertPoint("Trigger", autoD2826D46_var, StringExternal("Param/Value/1E6F4FB5"), null, lv_targetPoint);
        }
        Wait(17.5, c_timeGame);
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_player03AI, gv_player04AI, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_targetPoint, true);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_player01User = libCOMI_gf_GetRolePlayer(1);
    gv_player02User = libCOMI_gf_GetRolePlayer(2);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetHumanPlayers(), gv_playerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), gv_playerGroup);
    TriggerExecute(gt_Init05Units, true, true);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexSCVsGroup;

    // Automatic Variable Declarations
    const int auto0BF21370_ae = 3;
    const int auto0BF21370_ai = 1;
    unitgroup auto755ECE9F_g;
    int auto755ECE9F_u;
    unit auto755ECE9F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_hiddenSCVs[0], UnitFromId(1274273574));
    UnitGroupAdd(gv_hiddenSCVs[0], UnitFromId(1704073311));
    UnitGroupAdd(gv_hiddenSCVs[0], UnitFromId(1118206711));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(545229297));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(1288486844));
    UnitGroupAdd(gv_hiddenSCVs[0], UnitFromId(1578719515));
    UnitGroupAdd(gv_hiddenSCVs[0], UnitFromId(259087232));
    UnitGroupAdd(gv_hiddenSCVs[0], UnitFromId(1583983121));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(1597660323));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(473432275));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(662481869));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(1546613994));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(1960618187));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(1229719061));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(1186769596));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(1753598285));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(25397242));
    UnitGroupAdd(gv_hiddenSCVs[1], UnitFromId(1446908299));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(323641112));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(792251635));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(664382166));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(320919344));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(1084399455));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(1351620561));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(793140819));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(1178209812));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(271410198));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(389634689));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(1784336019));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(369979302));
    UnitGroupAdd(gv_hiddenSCVs[2], UnitFromId(1013402547));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(1482016171));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(440759824));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(1171344839));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(2046242212));
    UnitGroupAdd(gv_hiddenSCVs[3], UnitFromId(1942358571));
    lv_indexSCVsGroup = 0;
    for ( ; ( (auto0BF21370_ai >= 0 && lv_indexSCVsGroup <= auto0BF21370_ae) || (auto0BF21370_ai < 0 && lv_indexSCVsGroup >= auto0BF21370_ae) ) ; lv_indexSCVsGroup += auto0BF21370_ai ) {
        auto755ECE9F_g = gv_hiddenSCVs[lv_indexSCVsGroup];
        auto755ECE9F_u = UnitGroupCount(auto755ECE9F_g, c_unitCountAll);
        for (;; auto755ECE9F_u -= 1) {
            auto755ECE9F_var = UnitGroupUnitFromEnd(auto755ECE9F_g, auto755ECE9F_u);
            if (auto755ECE9F_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto755ECE9F_var, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEC235A9C_g;
    int autoEC235A9C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC235A9C_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoEC235A9C_var = -1;
    while (true) {
        autoEC235A9C_var = PlayerGroupNextPlayer(autoEC235A9C_g, autoEC235A9C_var);
        if (autoEC235A9C_var < 0) { break; }
        libARRA_gf_AutoRevealRegion(RegionFromId(26), RegionFromId(30), autoEC235A9C_var);
        libARRA_gf_AutoRevealRegion(RegionFromId(27), RegionFromId(31), autoEC235A9C_var);
        libARRA_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(32), autoEC235A9C_var);
        libARRA_gf_AutoRevealRegion(RegionFromId(29), RegionFromId(33), autoEC235A9C_var);
        libARRA_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(58), autoEC235A9C_var);
        libARRA_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(59), autoEC235A9C_var);
        libARRA_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(60), autoEC235A9C_var);
        libARRA_gf_AutoRevealRegion(RegionFromId(62), RegionFromId(61), autoEC235A9C_var);
    }
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1668060666), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(380259798), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(303717300), true);
    TriggerEnable(gt_JunkerEastSpawn, true);
    TriggerEnable(gt_JunkerWestSpawn, true);
    TriggerEnable(gt_SuperCraneActivation, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AISetDifficulty(gv_player03AI, c_diffRepairDamage, false);
    AISetDifficulty(gv_player04AI, c_diffRepairDamage, false);
    AISetDifficulty(gv_player03AI, c_diffFleeWorkers, false);
    AISetDifficulty(gv_player04AI, c_diffFleeWorkers, false);
    AIAttackWaveSetTargetPoint(gv_player03AI, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_player04AI, PointFromId(249));
    gf_SetupAttackWaveSpawns();
    gf_SetupAttackWaveTargets();
    gf_SetupAttackWaves();
    TriggerEnable(gt_RemoveSCVsonBaseDestroyed, true);
    TriggerEnable(gt_SpawnHybridforMainBaseDefence, true);
    TriggerEnable(gt_NextAttackWave, true);
    TriggerEnable(gt_NextMajorWave, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_flashingDialogItemP01;
    int lv_flashingDialogItemP02;

    // Automatic Variable Declarations
    int auto3F260790_val;
    playergroup auto13711040_g;
    int auto13711040_var;

    // Variable Initialization
    lv_flashingDialogItemP01 = c_invalidDialogControlId;
    lv_flashingDialogItemP02 = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryPrimaryObjectiveComplete, true);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, true);
    HelpPanelAddTip(libCOMI_gf_HumanPlayers(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/2327CC54"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/B0164CA6"), StringExternal("Param/Value/4C8BBCB1"), "Assets\\Textures\\btn-tips-mercenarycontract.dds");
    Wait(10.0, c_timeGame);
    TriggerQueueEnter();
    TriggerEnable(gt_EnemyBuildingsRevealer, true);
    TriggerEnable(gt_MarkerRemove, true);
    TriggerEnable(gt_PickupsCollect, true);
    TriggerEnable(gt_PickupsGenerate, true);
    TriggerEnable(gt_BonusObjectiveNext, true);
    TriggerEnable(gt_MULEsNext, true);
    gf_SetupMULEsSpawn();
    TriggerExecute(gt_ObjectiveHarvestCreate, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveRoundsCreate, true, true);
    Wait(1.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(SoundLink("IncomingTransmission", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(1.5, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicEventA", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(1.0, c_timeGame);
    gf_MiraHanTransmission(StringExternal("Param/Value/D85AEDDF"), SoundLink("HanIntro01", -1));
    Wait(3.0, c_timeGame);
    if ((PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("Raynor", 1)) > 0)) {
        gf_MiraHanTransmission(StringExternal("Param/Value/865AD830"), SoundLink("HanIntro02A", -1));
    }
    else {
        gf_MiraHanTransmission(StringExternal("Param/Value/858429F5"), SoundLink("HanIntro02", -1));
    }
    Wait(1.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("MiraResponse", true, gv_player01User);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(12.0, c_timeGame);
    TriggerEnable(gt_MarkerResourcesShow, true);
    TriggerEnable(gt_MarkerRevealerShow, true);
    TriggerEnable(gt_MarkerEnemyBasesShow, true);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_MarkerResourcesShow, true, false);
    gf_MiraHanTransmission(StringExternal("Param/Value/87C88C24"), SoundLink("HanIntro03", -1));
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_MarkerRevealerShow, true, false);
    if ((PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("Raynor", 1)) > 0)) {
        gf_MiraHanTransmission(StringExternal("Param/Value/1354046C"), SoundLink("HanIntro04A", -1));
    }
    else {
        gf_MiraHanTransmission(StringExternal("Param/Value/872783F5"), SoundLink("HanIntro04", -1));
    }
    Wait(0.5, c_timeGame);
    HelpPanelAddTip(libCOMI_gf_HumanPlayers(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/6E57BBC9"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/0DFFAB2B"), StringExternal("Param/Value/8276D22C"), "Assets\\Textures\\btn-tips-scrap.dds");
    TriggerExecute(gt_MarkerEnemyBasesShow, true, false);
    Wait(15.0, c_timeGame);
    gf_CreateWindow();
    HelpPanelAddTip(libCOMI_gf_HumanPlayers(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C185C003"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/D0BAB574"), StringExternal("Param/Value/21A288CE"), "Assets\\Textures\\btn-tips-resourcecaches.dds");
    Wait(45.0, c_timeGame);
    gf_MiraHanTransmission(StringExternal("Param/Value/CDD23F78"), SoundLink("HanShipment01", -1));
    BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/90A55DD3") + StringExternal("Param/Value/29387E70") + StringExternal("Param/Value/B0E6DCC8")));
    Wait(1.5, c_timeGame);
    BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/DEDF937D") + StringExternal("Param/Value/4DA5014F") + StringExternal("Param/Value/AE51495C")));
    Wait(1.5, c_timeGame);
    BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/2D00A923") + StringExternal("Param/Value/84F6D586") + StringExternal("Param/Value/88BB16B2")));
    Wait(1.5, c_timeGame);
    BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/D2E94BE0") + StringExternal("Param/Value/33A23441") + StringExternal("Param/Value/F3B1550A")));
    Wait(1.5, c_timeGame);
    BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/D6F75239") + StringExternal("Param/Value/8F37DD27") + StringExternal("Param/Value/FB27C301")));
    Wait(2.0, c_timeGame);
    TimerStart(gv_roundTimer, (4.0 * 60.0), false, c_timeGame);
    auto3F260790_val = gv_difficulty;
    if (auto3F260790_val == 1) {
        gv_mineralCountAmon += 75;
    }
    else if (auto3F260790_val == 2) {
        gv_mineralCountAmon += 100;
    }
    else if (auto3F260790_val == 3) {
        gv_mineralCountAmon += 125;
    }
    else {
        gv_mineralCountAmon += 150;
    }
    TriggerEnable(gt_RoundExpire, true);
    TriggerEnable(gt_EventDispatcher, true);
    TriggerEnable(gt_WindowUpdate, true);
    TriggerEnable(gt_ResourceUpdateAmon, true);
    TriggerEnable(gt_ResourceUpdatePlayers, true);
    auto13711040_g = libCOMI_gf_GetHumanPlayers();
    auto13711040_var = -1;
    while (true) {
        auto13711040_var = PlayerGroupNextPlayer(auto13711040_g, auto13711040_var);
        if (auto13711040_var < 0) { break; }
        DialogControlSetEnabled(gv_addMineralDialogItem[auto13711040_var], libCOMI_gf_HumanPlayers(), true);
    }
    TriggerExecute(gt_FlashAddResourcesDialogItems, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickups Generate
//--------------------------------------------------------------------------------------------------
bool gt_PickupsGenerate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnChance;

    // Automatic Variable Declarations
    int autoAB7E3FA0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((((UnitGetType(EventUnit()) == "PortJunker") && (EventPlayer() == 0)) || ((UnitFilterMatch(EventUnit(), gv_player03AI, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true) && (EventPlayer() == gv_player03AI)) || ((UnitFilterMatch(EventUnit(), gv_player04AI, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true) && (EventPlayer() == gv_player04AI))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "PortJunker")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(1, 2), "ScrapSalvage1x1", 0, 0, UnitGetPosition(EventUnit()));
    }
    else {
        if (((UnitGetType(EventUnit()) == "PlanetaryFortress") || (UnitGetType(EventUnit()) == "CommandCenter") || (UnitGetType(EventUnit()) == "OrbitalCommand") || (EventUnit() == UnitFromId(1229370550)) || (EventUnit() == UnitFromId(1188961779)) || (EventUnit() == UnitFromId(1655247062)))) {
            lv_spawnChance = 100;
        }
        else {
            lv_spawnChance = 60;
        }
        if ((RandomInt(0, 100) <= lv_spawnChance) && (UnitGetType(EventUnit()) != "Refinery") && (UnitGetType(EventUnit()) != "AutoTurret")) {
            if (((RandomInt(0, 100) < 50) || (UnitGetType(EventUnit()) == "Bunker") || (UnitGetType(EventUnit()) == "MissileTurret") || (UnitGetType(EventUnit()) == "BarracksTechReactor") || (UnitGetType(EventUnit()) == "FactoryTechReactor") || (UnitGetType(EventUnit()) == "StarportTechReactor"))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(1, 2), "ScrapSalvage1x1", 0, 0, UnitGetPosition(EventUnit()));
                if ((RandomInt(0, 100) < 25)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(0, 1), "PalletGas", 0, 0, UnitGetPosition(EventUnit()));
                }

            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 4), "ScrapSalvage1x1", 0, 0, UnitGetPosition(EventUnit()));
                if ((RandomInt(0, 100) < 80)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(0, 2), "PalletGas", 0, 0, UnitGetPosition(EventUnit()));
                }

            }
            if ((TriggerIsEnabled(gt_ResourceUpdateAmon) == true)) {
                autoAB7E3FA0_val = gv_difficulty;
                if (autoAB7E3FA0_val == 1) {
                    if ((gv_roundType == 1)) {
                        gv_mineralCountAmon += 5;
                    }

                    if ((gv_roundType == 2)) {
                        gv_gasCountAmon += 4;
                    }

                    if ((gv_roundType == 0)) {
                        if ((RandomInt(0, 100) < 30)) {
                            gv_gasCountAmon += 4;
                        }
                        else {
                            gv_mineralCountAmon += 5;
                        }
                    }

                }
                else if (autoAB7E3FA0_val == 2) {
                    if ((gv_roundType == 1)) {
                        gv_mineralCountAmon += 10;
                    }

                    if ((gv_roundType == 2)) {
                        gv_gasCountAmon += 8;
                    }

                    if ((gv_roundType == 0)) {
                        if ((RandomInt(0, 100) < 30)) {
                            gv_gasCountAmon += 8;
                        }
                        else {
                            gv_mineralCountAmon += 10;
                        }
                    }

                }
                else if (autoAB7E3FA0_val == 3) {
                    if ((gv_roundType == 1)) {
                        gv_mineralCountAmon += 20;
                    }

                    if ((gv_roundType == 2)) {
                        gv_gasCountAmon += 16;
                    }

                    if ((gv_roundType == 0)) {
                        if ((RandomInt(0, 100) < 30)) {
                            gv_gasCountAmon += 16;
                        }
                        else {
                            gv_mineralCountAmon += 20;
                        }
                    }

                }
                else {
                    if ((gv_roundType == 1)) {
                        gv_mineralCountAmon += 30;
                    }

                    if ((gv_roundType == 2)) {
                        gv_gasCountAmon += 24;
                    }

                    if ((gv_roundType == 0)) {
                        if ((RandomInt(0, 100) < 30)) {
                            gv_gasCountAmon += 24;
                        }
                        else {
                            gv_mineralCountAmon += 30;
                        }
                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupsGenerate_Init () {
    gt_PickupsGenerate = TriggerCreate("gt_PickupsGenerate_Func");
    TriggerEnable(gt_PickupsGenerate, false);
    TriggerAddEventUnitDied(gt_PickupsGenerate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickups Collect
//--------------------------------------------------------------------------------------------------
bool gt_PickupsCollect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_textTag;
    string lv_mineralIconP02;
    string lv_gasIconP02;

    // Automatic Variable Declarations
    playergroup autoE7A65B1C_g;
    int autoE7A65B1C_var;
    string auto0C4D9F41_val;
    string auto4353B788_val;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnitTargetUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7A65B1C_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoE7A65B1C_var = -1;
    while (true) {
        autoE7A65B1C_var = PlayerGroupNextPlayer(autoE7A65B1C_g, autoE7A65B1C_var);
        if (autoE7A65B1C_var < 0) { break; }
        auto0C4D9F41_val = PlayerRace(autoE7A65B1C_var);
        if (auto0C4D9F41_val == "Zerg") {
            lv_mineralIconP02 = "Assets\\Textures\\icon-mineral-zerg.dds";
            lv_gasIconP02 = "Assets\\Textures\\icon-gas-zerg.dds";
        }
        else if (auto0C4D9F41_val == "Prot") {
            lv_mineralIconP02 = "Assets\\Textures\\icon-mineral-protoss.dds";
            lv_gasIconP02 = "Assets\\Textures\\icon-gas-protoss.dds";
        }
        else {
            lv_mineralIconP02 = "Assets\\Textures\\icon-mineral-terran.dds";
            lv_gasIconP02 = "Assets\\Textures\\icon-gas-terran.dds";
        }
        auto4353B788_val = UnitGetType(EventUnit());
        if (auto4353B788_val == "ScrapSalvage1x1") {
            libCOMI_gf_DestroyCacheAndGivePlayerResources(EventUnit(), libCOMI_ge_CacheResourceType_Mineral, 25, lv_mineralIconP02, null, autoE7A65B1C_var);
        }
        else if (auto4353B788_val == "ScrapSalvage2x2") {
            libCOMI_gf_DestroyCacheAndGivePlayerResources(EventUnit(), libCOMI_ge_CacheResourceType_Mineral, 50, lv_mineralIconP02, null, autoE7A65B1C_var);
        }
        else if (auto4353B788_val == "PalletGas") {
            libCOMI_gf_DestroyCacheAndGivePlayerResources(EventUnit(), libCOMI_ge_CacheResourceType_Vespene, 50, lv_gasIconP02, null, autoE7A65B1C_var);
        }
        else if (auto4353B788_val == "ProtossRelic") {
            TextTagDestroy(gv_relicReticleText);
            ActorScopeKill(ActorScopeFromActor(gv_relicReticleActor));
            SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
            TextTagCreate(StringExternal("Param/Value/6224739E"), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libCOMI_gf_HumanPlayers());
            lv_textTag = TextTagLastCreated();
            TextTagSetVelocity(lv_textTag, 0.5, 90.0);
            TextTagSetTime(lv_textTag, c_textTagTimeDuration, 3.0);
            UnitKill(EventUnit());
            TriggerExecute(gt_BonusObjectivePickup, true, false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupsCollect_Init () {
    gt_PickupsCollect = TriggerCreate("gt_PickupsCollect_Func");
    TriggerEnable(gt_PickupsCollect, false);
    TriggerAddEventUnitAbility(gt_PickupsCollect, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Add Resources Dialog Items
//--------------------------------------------------------------------------------------------------
bool gt_FlashAddResourcesDialogItems_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_index;
    int[6] lv_flashingDialogItem;
    string lv_imageP01;
    int lv_sizeXP01;
    int lv_sizeYP01;
    int lv_offsetXP01;
    int lv_offsetYP01;

    // Automatic Variable Declarations
    playergroup auto225DC44A_g;
    int auto225DC44A_var;
    string auto8A1BB355_val;
    const int autoECEE85D8_ae = 12;
    const int autoECEE85D8_ai = 1;
    playergroup auto823F9834_g;
    int auto823F9834_var;
    playergroup auto50279081_g;
    int auto50279081_var;
    playergroup auto3E07E7E6_g;
    int auto3E07E7E6_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_flashingDialogItem[init_i] = c_invalidDialogControlId;
    }
    lv_sizeXP01 = 205;
    lv_sizeYP01 = 80;
    lv_offsetXP01 = 43;
    lv_offsetYP01 = 4;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto225DC44A_g = libCOMI_gf_GetHumanPlayers();
    auto225DC44A_var = -1;
    while (true) {
        auto225DC44A_var = PlayerGroupNextPlayer(auto225DC44A_g, auto225DC44A_var);
        if (auto225DC44A_var < 0) { break; }
        auto8A1BB355_val = PlayerRace(auto225DC44A_var);
        if (auto8A1BB355_val == "Terr") {
            lv_imageP01 = "Assets\\Textures\\ui_options_selectonbutton_anim_terran.dds";
            lv_offsetXP01 = 48;
            lv_offsetYP01 = 11;
            lv_sizeXP01 = 225;
            lv_sizeYP01 = 76;
        }
        else if (auto8A1BB355_val == "Prot") {
            lv_imageP01 = "ui_options_selectonbutton_anim_protoss.dds";
        }
        else {
            lv_imageP01 = "ui_options_selectonbutton_anim_zerg.dds";
        }
        libNtve_gf_CreateDialogItemImage(gv_stateDialog, lv_sizeXP01, lv_sizeYP01, DialogControlGetAnchor(gv_addMineralDialogItem[auto225DC44A_var], auto225DC44A_var), lv_offsetXP01, lv_offsetYP01, StringToText(""), lv_imageP01, c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        lv_flashingDialogItem[auto225DC44A_var] = DialogControlLastCreated();
        DialogControlSetVisible(lv_flashingDialogItem[auto225DC44A_var], PlayerGroupAll(), false);
        DialogControlSetVisible(lv_flashingDialogItem[auto225DC44A_var], PlayerGroupSingle(auto225DC44A_var), true);
    }
    lv_index = 0;
    for ( ; ( (autoECEE85D8_ai >= 0 && lv_index <= autoECEE85D8_ae) || (autoECEE85D8_ai < 0 && lv_index >= autoECEE85D8_ae) ) ; lv_index += autoECEE85D8_ai ) {
        auto823F9834_g = libCOMI_gf_GetAlliedCommandersPlayers();
        auto823F9834_var = -1;
        while (true) {
            auto823F9834_var = PlayerGroupNextPlayer(auto823F9834_g, auto823F9834_var);
            if (auto823F9834_var < 0) { break; }
            DialogControlFadeTransparency(lv_flashingDialogItem[auto823F9834_var], PlayerGroupSingle(auto823F9834_var), 0.2, 0.0);
        }
        Wait(0.5, c_timeGame);
        auto50279081_g = libCOMI_gf_GetAlliedCommandersPlayers();
        auto50279081_var = -1;
        while (true) {
            auto50279081_var = PlayerGroupNextPlayer(auto50279081_g, auto50279081_var);
            if (auto50279081_var < 0) { break; }
            DialogControlFadeTransparency(lv_flashingDialogItem[auto50279081_var], PlayerGroupSingle(auto50279081_var), 0.2, 100.0);
        }
        Wait(0.5, c_timeGame);
    }
    auto3E07E7E6_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto3E07E7E6_var = -1;
    while (true) {
        auto3E07E7E6_var = PlayerGroupNextPlayer(auto3E07E7E6_g, auto3E07E7E6_var);
        if (auto3E07E7E6_var < 0) { break; }
        DialogControlDestroy(lv_flashingDialogItem[auto3E07E7E6_var]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlashAddResourcesDialogItems_Init () {
    gt_FlashAddResourcesDialogItems = TriggerCreate("gt_FlashAddResourcesDialogItems_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Shipments Resources
//--------------------------------------------------------------------------------------------------
bool gt_ResetShipmentsResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexAnimation;
    int lv_mineralsStepAmon;
    int lv_gasStepAmon;
    int lv_mineralsStepPlayers;
    int lv_gasStepPlayers;

    // Automatic Variable Declarations
    const int auto40A29074_ae = 100;
    const int auto40A29074_ai = 1;

    // Variable Initialization
    lv_mineralsStepAmon = (gv_mineralCountAmon / 100);
    lv_gasStepAmon = (gv_gasCountAmon / 100);
    lv_mineralsStepPlayers = (gv_mineralCountPlayers / 100);
    lv_gasStepPlayers = (gv_gasCountPlayers / 100);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexAnimation = 0;
    for ( ; ( (auto40A29074_ai >= 0 && lv_indexAnimation <= auto40A29074_ae) || (auto40A29074_ai < 0 && lv_indexAnimation >= auto40A29074_ae) ) ; lv_indexAnimation += auto40A29074_ai ) {
        gv_mineralCountAmon -= lv_mineralsStepAmon;
        gv_mineralCountPlayers -= lv_mineralsStepPlayers;
        gv_gasCountAmon -= lv_gasStepAmon;
        gv_gasCountPlayers -= lv_gasStepPlayers;
        if ((gv_mineralCountAmon < 0)) {
            gv_mineralCountAmon = 0;
        }

        if ((gv_mineralCountPlayers < 0)) {
            gv_mineralCountPlayers = 0;
        }

        if ((gv_gasCountAmon < 0)) {
            gv_gasCountAmon = 0;
        }

        if ((gv_gasCountPlayers < 0)) {
            gv_gasCountPlayers = 0;
        }

        BoardItemSetProgressValue(gv_stateWindow, 1, 1, IntToFixed(gv_mineralCountPlayers));
        BoardItemSetText(gv_stateWindow, 1, 1, (gv_textPlayersShipmentMinerals + IntToText(gv_mineralCountPlayers) + StringExternal("Param/Value/A66836A0")));
        BoardItemSetProgressValue(gv_stateWindow, 1, 3, IntToFixed(gv_gasCountPlayers));
        BoardItemSetText(gv_stateWindow, 1, 3, (gv_textPlayersShipmentGas + IntToText(gv_gasCountPlayers) + StringExternal("Param/Value/1BB79C2A")));
        BoardItemSetProgressValue(gv_stateWindow, 1, 2, IntToFixed(gv_mineralCountAmon));
        BoardItemSetText(gv_stateWindow, 1, 2, (gv_textAmonShipmentMinerals + IntToText(gv_mineralCountAmon) + StringExternal("Param/Value/6255D2E5")));
        BoardItemSetProgressValue(gv_stateWindow, 1, 4, IntToFixed(gv_gasCountAmon));
        BoardItemSetText(gv_stateWindow, 1, 4, (gv_textAmonShipmentGas + IntToText(gv_gasCountAmon) + StringExternal("Param/Value/2F56FD32")));
        Wait(0.01, c_timeGame);
    }
    gv_mineralCountAmon = 0;
    gv_mineralCountPlayers = 0;
    gv_gasCountAmon = 0;
    gv_gasCountPlayers = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetShipmentsResources_Init () {
    gt_ResetShipmentsResources = TriggerCreate("gt_ResetShipmentsResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event Dispatcher
//--------------------------------------------------------------------------------------------------
bool gt_EventDispatcher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto31D7BD81_val;
    int auto1AA89CA7_val;
    int auto51DDF167_val;
    int auto949D17A2_val;
    int auto4E32AB0B_val;
    int auto314EE0CD_val;
    int auto6D599E03_val;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eventCounter += 1;
    auto31D7BD81_val = gv_roundCurrent;
    if (auto31D7BD81_val == 1) {
        auto1AA89CA7_val = gv_eventCounter;
        if (auto1AA89CA7_val == 1) {
            TriggerExecute(gt_NextAttackWave, true, false);
        }
        else if (auto1AA89CA7_val == 6) {
            if ((gv_difficulty != 1)) {
                TriggerExecute(gt_NextAttackWave, true, false);
            }

        }
        else {
        }
    }
    else if (auto31D7BD81_val == 2) {
        auto51DDF167_val = gv_eventCounter;
        if (auto51DDF167_val == 2) {
            TriggerExecute(gt_BonusObjectiveNext, true, false);
        }
        else if (auto51DDF167_val == 4) {
            TriggerExecute(gt_NextAttackWave, true, false);
        }
        else if (auto51DDF167_val == 7) {
            if ((gv_difficulty != 1) && (gv_difficulty != 2) && (gv_difficulty != 3)) {
                TriggerExecute(gt_NextAttackWave, true, false);
            }

        }
        else {
        }
    }
    else if (auto31D7BD81_val == 3) {
        auto949D17A2_val = gv_eventCounter;
        if (auto949D17A2_val == 2) {
            if ((gv_difficulty != 1)) {
                TriggerExecute(gt_NextAttackWave, true, false);
            }

        }
        else if (auto949D17A2_val == 5) {
            if ((gv_difficulty != 1) && (gv_difficulty != 2)) {
                TriggerExecute(gt_NextAttackWave, true, false);
            }

        }
        else if (auto949D17A2_val == 6) {
            TriggerExecute(gt_BonusObjectiveNext, true, false);
        }
        else if (auto949D17A2_val == 7) {
            TriggerExecute(gt_MULEsNext, true, false);
        }
        else {
        }
    }
    else if (auto31D7BD81_val == 4) {
        auto4E32AB0B_val = gv_eventCounter;
        if (auto4E32AB0B_val == 1) {
            TriggerExecute(gt_NextMajorWave, true, false);
        }
        else if (auto4E32AB0B_val == 2) {
            TriggerExecute(gt_NextAttackWave, true, false);
        }
        else if (auto4E32AB0B_val == 3) {
            TriggerExecute(gt_BonusObjectiveNext, true, false);
        }
        else {
        }
    }
    else if (auto31D7BD81_val == 5) {
        auto314EE0CD_val = gv_eventCounter;
        if (auto314EE0CD_val == 1) {
            TriggerExecute(gt_NextMajorWave, true, false);
        }
        else if (auto314EE0CD_val == 2) {
            TriggerExecute(gt_MULEsNext, true, false);
        }
        else if (auto314EE0CD_val == 3) {
            if ((gv_difficulty != 1) && (gv_difficulty != 2) && (gv_difficulty != 3)) {
                TriggerExecute(gt_NextAttackWave, true, false);
            }

        }
        else {
        }
    }
    else if (auto31D7BD81_val == 6) {
        auto6D599E03_val = gv_eventCounter;
        if (auto6D599E03_val == 1) {
            TriggerExecute(gt_NextAttackWave, true, false);
        }
        else if (auto6D599E03_val == 3) {
            if ((gv_difficulty != 1) && (gv_difficulty != 2)) {
                TriggerExecute(gt_NextAttackWave, true, false);
            }

        }
        else if (auto6D599E03_val == 4) {
            TriggerExecute(gt_MULEsNext, true, false);
        }
        else if (auto6D599E03_val == 6) {
            TriggerExecute(gt_NextAttackWave, true, false);
        }
        else if (auto6D599E03_val == 7) {
            TriggerExecute(gt_MULEsNext, true, false);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EventDispatcher_Init () {
    gt_EventDispatcher = TriggerCreate("gt_EventDispatcher_Func");
    TriggerEnable(gt_EventDispatcher, false);
    TriggerAddEventTimePeriodic(gt_EventDispatcher, (gv_eventMinutes * 60.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Expire
//--------------------------------------------------------------------------------------------------
bool gt_RoundExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_goalAmonMinerals;
    int lv_goalAmonGas;
    int lv_roundTypeRandom;
    fixed lv_roundTimerLength;
    bool lv_playersWonMinerals;
    bool lv_playersWonGas;
    text lv_coundownText;
    int lv_roundVictory;
    int lv_indexAnimation;

    // Automatic Variable Declarations
    playergroup autoC15F22A2_g;
    int autoC15F22A2_var;
    int auto3F36F463_val;
    int auto193D30C8_val;
    int auto45E6BE0D_val;
    int autoD973C61A_val;
    int autoFB7E5C7B_val;
    int auto1490E231_val;
    int autoEABA68F4_val;
    int autoAC896591_val;
    int auto00E6FBD5_val;
    const int autoA726635A_ae = 100;
    const int autoA726635A_ai = 1;
    playergroup auto911DD0A7_g;
    int auto911DD0A7_var;
    playergroup auto6D07C19D_g;
    int auto6D07C19D_var;
    playergroup autoC5FE9A9E_g;
    int autoC5FE9A9E_var;
    int auto63015F9F_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_roundCurrent += 1;
    TimerPause(gv_roundTimer, true);
    libNtve_gf_StopTimer(gv_roundTimer);
    TriggerEnable(gt_EventDispatcher, false);
    TriggerEnable(gt_WindowUpdate, false);
    TriggerEnable(gt_ResourceUpdateAmon, false);
    autoC15F22A2_g = libCOMI_gf_GetHumanPlayers();
    autoC15F22A2_var = -1;
    while (true) {
        autoC15F22A2_var = PlayerGroupNextPlayer(autoC15F22A2_g, autoC15F22A2_var);
        if (autoC15F22A2_var < 0) { break; }
        DialogControlSetEnabled(gv_addMineralDialogItem[autoC15F22A2_var], libCOMI_gf_HumanPlayers(), false);
        DialogControlSetEnabled(gv_addGasDialogItem[autoC15F22A2_var], libCOMI_gf_HumanPlayers(), false);
    }
    if ((gv_roundType != 2)) {
        if ((gv_mineralCountAmon > gv_mineralCountPlayers)) {
            lv_playersWonMinerals = false;
            gv_shipmentLost += 1;
        }
        else {
            lv_playersWonMinerals = true;
            gv_shipmentWon += 1;
        }
    }

    if ((gv_roundType != 1)) {
        if ((gv_gasCountAmon > gv_gasCountPlayers)) {
            gv_shipmentLost += 1;
            lv_playersWonGas = false;
        }
        else {
            lv_playersWonGas = true;
            gv_shipmentWon += 1;
        }
    }

    auto3F36F463_val = gv_roundType;
    if (auto3F36F463_val == 1) {
        if ((lv_playersWonMinerals == false)) {
            lv_playersWonGas = false;
        }
        else {
            lv_playersWonGas = true;
        }
    }
    else if (auto3F36F463_val == 2) {
        if ((lv_playersWonGas == false)) {
            lv_playersWonMinerals = false;
        }
        else {
            lv_playersWonMinerals = true;
        }
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Cinematic);
    if ((lv_playersWonMinerals == false) && (lv_playersWonGas == false)) {
        lv_roundVictory = -1;
        BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, StringExternal("Param/Value/14DE315D"));
        SoundPlayForPlayer(SoundLink("UI_ObjectiveFailed", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        lv_roundVictory = 0;
        if (((lv_playersWonMinerals == false) || (lv_playersWonGas == false))) {
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, StringExternal("Param/Value/6403CAD1"));
            SoundPlayForPlayer(SoundLink("UI_ObjectiveDiscoveredStinger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            lv_roundVictory = 1;
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, StringExternal("Param/Value/74443CF9"));
            SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
    }
    auto193D30C8_val = lv_roundVictory;
    if (auto193D30C8_val == 0) {
        gv_shipmentRemaining -= 1;
    }
    else if (auto193D30C8_val == 1) {
        if ((gv_roundType == 0)) {
            gv_shipmentRemaining -= 2;
        }
        else {
            gv_shipmentRemaining -= 1;
        }
    }
    else {
    }
    if ((gv_shipmentRemaining < 0)) {
        gv_shipmentRemaining = 0;
    }

    if ((gv_shipmentWon > 6)) {
        gv_shipmentWon = 6;
    }

    TriggerExecute(gt_ObjectiveHarvestUpdate, true, false);
    TriggerExecute(gt_ObjectiveRoundsUpdate, true, false);
    Wait(3.5, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if ((gv_shipmentRemaining <= 0)) {
    }
    else {
        auto45E6BE0D_val = lv_roundVictory;
        if (auto45E6BE0D_val == -1) {
            TriggerExecute(gt_RoundLostQ, true, false);
        }
        else if (auto45E6BE0D_val == 0) {
            TriggerExecute(gt_RoundDrawQ, true, false);
        }
        else if (auto45E6BE0D_val == 1) {
            TriggerExecute(gt_RoundWonQ, true, false);
        }
        else {
        }
    }
    if ((gv_shipmentLost > gv_roundLimitToLose)) {
        Wait(5.5, c_timeGame);
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }
    else {
        if ((gv_shipmentRemaining <= 0)) {
            Wait(4.0, c_timeGame);
            TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
        }
        else {
            Wait(12.5, c_timeGame);
            lv_roundTypeRandom = RandomInt(0, 100);
            if ((((lv_roundTypeRandom <= 66) && ((gv_availableMineralsRounds > 0) || (gv_availableGasRounds > 0))) || (gv_availableResourceRounds <= 0))) {
                if ((((lv_roundTypeRandom <= 33) && (gv_availableMineralsRounds > 0)) || (gv_availableGasRounds <= 0))) {
                    gv_availableMineralsRounds -= 1;
                    gv_roundType = 1;
                }
                else {
                    gv_availableGasRounds -= 1;
                    gv_roundType = 2;
                }
            }
            else {
                gv_availableResourceRounds -= 1;
                gv_roundType = 0;
            }
            TriggerExecute(gt_ResetShipmentsResources, true, true);
            autoD973C61A_val = gv_roundCurrent;
            if (autoD973C61A_val == 2) {
                lv_roundTimerLength = 4.0;
            }
            else if (autoD973C61A_val == 3) {
                lv_roundTimerLength = 4.0;
                autoFB7E5C7B_val = gv_roundType;
                if (autoFB7E5C7B_val == 0) {
                    lv_goalAmonMinerals = 1700;
                    lv_goalAmonGas = 800;
                }
                else if (autoFB7E5C7B_val == 1) {
                    lv_goalAmonMinerals = 1700;
                }
                else if (autoFB7E5C7B_val == 2) {
                    lv_goalAmonGas = 800;
                }
                else {
                }
            }
            else if (autoD973C61A_val == 4) {
                lv_roundTimerLength = 2.0;
            }
            else if (autoD973C61A_val == 5) {
                lv_roundTimerLength = 2.0;
                auto1490E231_val = gv_roundType;
                if (auto1490E231_val == 0) {
                    lv_goalAmonMinerals = 2200;
                    lv_goalAmonGas = 1300;
                }
                else if (auto1490E231_val == 1) {
                    lv_goalAmonMinerals = 2200;
                }
                else if (auto1490E231_val == 2) {
                    lv_goalAmonGas = 1300;
                }
                else {
                }
            }
            else if (autoD973C61A_val == 6) {
                gv_roundType = 0;
                lv_roundTimerLength = 4.0;
                autoEABA68F4_val = gv_roundType;
                if (autoEABA68F4_val == 0) {
                    lv_goalAmonMinerals = 700;
                    lv_goalAmonGas = 300;
                }
                else if (autoEABA68F4_val == 1) {
                    lv_goalAmonMinerals = 700;
                }
                else if (autoEABA68F4_val == 2) {
                    lv_goalAmonGas = 300;
                }
                else {
                }
            }
            else {
            }
            if ((gv_roundType == 0)) {
                BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, StringExternal("Param/Value/D942C962"));
            }
            else {
                BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, StringExternal("Param/Value/84DE262B"));
            }
            autoAC896591_val = gv_roundType;
            if (autoAC896591_val == 1) {
                gv_textPlayersShipmentMinerals = StringExternal("Param/Value/6F18B120");
                gv_textPlayersShipmentGas = StringExternal("Param/Value/C458C046");
                gv_textAmonShipmentMinerals = StringExternal("Param/Value/FEDDDC66");
                gv_textAmonShipmentGas = StringExternal("Param/Value/7D8729F3");
            }
            else if (autoAC896591_val == 2) {
                gv_textPlayersShipmentMinerals = StringExternal("Param/Value/06B05095");
                gv_textPlayersShipmentGas = StringExternal("Param/Value/7BD4ACA7");
                gv_textAmonShipmentMinerals = StringExternal("Param/Value/E22E4EA0");
                gv_textAmonShipmentGas = StringExternal("Param/Value/D968EF6F");
            }
            else {
                gv_textPlayersShipmentMinerals = StringExternal("Param/Value/03DD00DE");
                gv_textPlayersShipmentGas = StringExternal("Param/Value/D0E5C978");
                gv_textAmonShipmentMinerals = StringExternal("Param/Value/C4E07230");
                gv_textAmonShipmentGas = StringExternal("Param/Value/00B49C44");
            }
            BoardItemSetProgressValue(gv_stateWindow, 1, 1, IntToFixed(gv_mineralCountPlayers));
            BoardItemSetText(gv_stateWindow, 1, 1, (gv_textPlayersShipmentMinerals + IntToText(gv_mineralCountPlayers) + StringExternal("Param/Value/4EFD1687")));
            BoardItemSetProgressValue(gv_stateWindow, 1, 3, IntToFixed(gv_gasCountPlayers));
            BoardItemSetText(gv_stateWindow, 1, 3, (gv_textPlayersShipmentGas + IntToText(gv_mineralCountPlayers) + StringExternal("Param/Value/61B7E9D7")));
            BoardItemSetProgressValue(gv_stateWindow, 1, 2, IntToFixed(gv_mineralCountAmon));
            BoardItemSetText(gv_stateWindow, 1, 2, (gv_textAmonShipmentMinerals + IntToText(gv_mineralCountAmon) + StringExternal("Param/Value/9AACFAA1")));
            BoardItemSetProgressValue(gv_stateWindow, 1, 4, IntToFixed(gv_gasCountAmon));
            BoardItemSetText(gv_stateWindow, 1, 4, (gv_textAmonShipmentGas + IntToText(gv_gasCountAmon) + StringExternal("Param/Value/38C2627F")));
            auto00E6FBD5_val = gv_roundType;
            if (auto00E6FBD5_val == 1) {
                BoardItemSetProgressColor(gv_stateWindow, 1, 1, Color(2.35, 57.25, 97.65), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 2, Color(83.53, 0.00, 0.00), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 3, Color(30.20, 30.20, 30.20), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 4, Color(30.20, 30.20, 30.20), 1);
            }
            else if (auto00E6FBD5_val == 2) {
                BoardItemSetProgressColor(gv_stateWindow, 1, 3, Color(2.35, 57.25, 97.65), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 4, Color(83.53, 0.00, 0.00), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 1, Color(30.20, 30.20, 30.20), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 2, Color(30.20, 30.20, 30.20), 1);
            }
            else {
                BoardItemSetProgressColor(gv_stateWindow, 1, 1, Color(2.35, 57.25, 97.65), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 2, Color(83.53, 0.00, 0.00), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 3, Color(2.35, 57.25, 97.65), 1);
                BoardItemSetProgressColor(gv_stateWindow, 1, 4, Color(83.53, 0.00, 0.00), 1);
            }
            Wait(27.0, c_timeGame);
            TriggerExecute(gt_NewRoundQ, true, false);
            lv_indexAnimation = 1;
            for ( ; ( (autoA726635A_ai >= 0 && lv_indexAnimation <= autoA726635A_ae) || (autoA726635A_ai < 0 && lv_indexAnimation >= autoA726635A_ae) ) ; lv_indexAnimation += autoA726635A_ai ) {
                gv_mineralCountAmon += (lv_goalAmonMinerals / 100);
                gv_gasCountAmon += (lv_goalAmonGas / 100);
                BoardItemSetProgressValue(gv_stateWindow, 1, 1, IntToFixed(gv_mineralCountPlayers));
                BoardItemSetText(gv_stateWindow, 1, 1, (gv_textPlayersShipmentMinerals + IntToText(gv_mineralCountPlayers) + StringExternal("Param/Value/26A43CB5")));
                BoardItemSetProgressValue(gv_stateWindow, 1, 3, IntToFixed(gv_gasCountPlayers));
                BoardItemSetText(gv_stateWindow, 1, 3, (gv_textPlayersShipmentGas + IntToText(gv_gasCountPlayers) + StringExternal("Param/Value/8F29273F")));
                BoardItemSetProgressValue(gv_stateWindow, 1, 2, IntToFixed(gv_mineralCountAmon));
                BoardItemSetText(gv_stateWindow, 1, 2, (gv_textAmonShipmentMinerals + IntToText(gv_mineralCountAmon) + StringExternal("Param/Value/05D0CFD2")));
                BoardItemSetProgressValue(gv_stateWindow, 1, 4, IntToFixed(gv_gasCountAmon));
                BoardItemSetText(gv_stateWindow, 1, 4, (gv_textAmonShipmentGas + IntToText(gv_gasCountAmon) + StringExternal("Param/Value/462A6477")));
                Wait(0.1, c_timeGame);
            }
            if ((gv_roundType == 0)) {
                lv_coundownText = StringExternal("Param/Value/F72F2F04");
            }
            else {
                lv_coundownText = StringExternal("Param/Value/414EB367");
            }
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (lv_coundownText + StringExternal("Param/Value/87CD835B") + StringExternal("Param/Value/28A83C71")));
            Wait(1.5, c_timeGame);
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (lv_coundownText + StringExternal("Param/Value/CDD73802") + StringExternal("Param/Value/EB1F59D1")));
            Wait(1.5, c_timeGame);
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (lv_coundownText + StringExternal("Param/Value/4C74EE50") + StringExternal("Param/Value/D170383C")));
            Wait(1.5, c_timeGame);
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (lv_coundownText + StringExternal("Param/Value/9F3CA109") + StringExternal("Param/Value/B9BFF724")));
            Wait(1.5, c_timeGame);
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (lv_coundownText + StringExternal("Param/Value/588038C9") + StringExternal("Param/Value/B4A1D461")));
            Wait(2.0, c_timeGame);
            TimerStart(gv_roundTimer, (lv_roundTimerLength * 60.0), false, c_timeGame);
            TriggerEnable(gt_EventDispatcher, true);
            gv_eventCounter = 0;
            gv_transmissionSent = false;
            TriggerEnable(gt_WindowUpdate, true);
            TriggerEnable(gt_ResourceUpdateAmon, true);
            if (((gv_roundType == 0) || (gv_roundType == 1))) {
                auto6D07C19D_g = libCOMI_gf_GetHumanPlayers();
                auto6D07C19D_var = -1;
                while (true) {
                    auto6D07C19D_var = PlayerGroupNextPlayer(auto6D07C19D_g, auto6D07C19D_var);
                    if (auto6D07C19D_var < 0) { break; }
                    DialogControlSetEnabled(gv_addMineralDialogItem[auto6D07C19D_var], libCOMI_gf_HumanPlayers(), true);
                }
                if ((gv_roundType == 0)) {
                    autoC5FE9A9E_g = libCOMI_gf_GetHumanPlayers();
                    autoC5FE9A9E_var = -1;
                    while (true) {
                        autoC5FE9A9E_var = PlayerGroupNextPlayer(autoC5FE9A9E_g, autoC5FE9A9E_var);
                        if (autoC5FE9A9E_var < 0) { break; }
                        DialogControlSetEnabled(gv_addGasDialogItem[autoC5FE9A9E_var], libCOMI_gf_HumanPlayers(), true);
                    }
                }

            }
            else {
                auto911DD0A7_g = libCOMI_gf_GetHumanPlayers();
                auto911DD0A7_var = -1;
                while (true) {
                    auto911DD0A7_var = PlayerGroupNextPlayer(auto911DD0A7_g, auto911DD0A7_var);
                    if (auto911DD0A7_var < 0) { break; }
                    DialogControlSetEnabled(gv_addGasDialogItem[auto911DD0A7_var], libCOMI_gf_HumanPlayers(), true);
                }
            }
            auto63015F9F_val = gv_roundCurrent;
            if (auto63015F9F_val == 2) {
                gf_ShowSCVs(gv_hiddenSCVs[0]);
            }
            else if (auto63015F9F_val == 3) {
                gf_ShowSCVs(gv_hiddenSCVs[1]);
            }
            else if (auto63015F9F_val == 4) {
                gf_ShowSCVs(gv_hiddenSCVs[2]);
            }
            else if (auto63015F9F_val == 5) {
                gf_ShowSCVs(gv_hiddenSCVs[3]);
            }
            else {
            }
            TriggerEnable(TriggerGetCurrent(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundExpire_Init () {
    gt_RoundExpire = TriggerCreate("gt_RoundExpire_Func");
    TriggerEnable(gt_RoundExpire, false);
    TriggerAddEventTimer(gt_RoundExpire, gv_roundTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Update Amon
//--------------------------------------------------------------------------------------------------
bool gt_ResourceUpdateAmon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_doNotCountThis;
    int lv_skipCargoChance;

    // Automatic Variable Declarations
    int autoAC9788DA_val;
    int auto5B409A4B_val;
    int auto67A9B12E_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_player03AI) || (UnitGetOwner(EventUnit()) == gv_player04AI)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC9788DA_val = gv_difficulty;
    if (autoAC9788DA_val == 1) {
        lv_skipCargoChance = 15;
    }
    else if (autoAC9788DA_val == 2) {
        lv_skipCargoChance = 7;
    }
    else if (autoAC9788DA_val == 3) {
        lv_skipCargoChance = 3;
    }
    else {
    }
    if ((RandomInt(0, 100) < lv_skipCargoChance)) {
        lv_doNotCountThis = true;
    }

    if ((lv_doNotCountThis == false)) {
        if ((RandomInt(0, 100) > 30)) {
            if ((UnitGetType(EventUnit()) == "MULE")) {
                if ((gv_roundType != 2)) {
                    gv_mineralCountAmon += 30;
                }

            }
            else {
                if ((gv_roundType != 2)) {
                    auto67A9B12E_val = gv_difficulty;
                    if (auto67A9B12E_val == 1) {
                        gv_mineralCountAmon += 5;
                    }
                    else if (auto67A9B12E_val == 2) {
                        if ((RandomInt(0, 100) < 5)) {
                            gv_mineralCountAmon += 10;
                        }
                        else {
                            gv_mineralCountAmon += 5;
                        }
                    }
                    else if (auto67A9B12E_val == 3) {
                        if ((RandomInt(0, 100) < 10)) {
                            gv_mineralCountAmon += 10;
                        }
                        else {
                            gv_mineralCountAmon += 5;
                        }
                    }
                    else {
                        if ((RandomInt(0, 100) < 15)) {
                            gv_mineralCountAmon += 10;
                        }
                        else {
                            gv_mineralCountAmon += 5;
                        }
                    }
                }

            }
        }
        else {
            if ((UnitGetType(EventUnit()) == "MULE")) {
                if ((gv_roundType != 1)) {
                    gv_gasCountAmon += 24;
                }

            }
            else {
                if ((gv_roundType != 1)) {
                    auto5B409A4B_val = gv_difficulty;
                    if (auto5B409A4B_val == 1) {
                        if ((RandomInt(0, 100) < 15)) {
                            gv_gasCountAmon += 8;
                        }
                        else {
                            gv_gasCountAmon += 4;
                        }
                    }
                    else if (auto5B409A4B_val == 2) {
                        if ((RandomInt(0, 100) < 25)) {
                            gv_gasCountAmon += 8;
                        }
                        else {
                            gv_gasCountAmon += 4;
                        }
                    }
                    else if (auto5B409A4B_val == 3) {
                        if ((RandomInt(0, 100) < 40)) {
                            gv_gasCountAmon += 8;
                        }
                        else {
                            gv_gasCountAmon += 4;
                        }
                    }
                    else {
                        if ((RandomInt(0, 100) < 60)) {
                            gv_gasCountAmon += 8;
                        }
                        else {
                            gv_gasCountAmon += 4;
                        }
                    }
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceUpdateAmon_Init () {
    gt_ResourceUpdateAmon = TriggerCreate("gt_ResourceUpdateAmon_Func");
    TriggerEnable(gt_ResourceUpdateAmon, false);
    TriggerAddEventUnitAbility(gt_ResourceUpdateAmon, null, AbilityCommand("SCVHarvest", 1), c_abilHarvestStageDropOff, false);
    TriggerAddEventUnitAbility(gt_ResourceUpdateAmon, null, AbilityCommand("MULEGather", 1), c_abilHarvestStageDropOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Update Players
//--------------------------------------------------------------------------------------------------
bool gt_ResourceUpdatePlayers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_addMineralDialogItem[1]) || (EventDialogControl() == gv_addGasDialogItem[1]) || (EventDialogControl() == gv_addMineralDialogItem[2]) || (EventDialogControl() == gv_addGasDialogItem[2]) || (EventDialogControl() == gv_addMineralDialogItem[3]) || (EventDialogControl() == gv_addGasDialogItem[3]) || (EventDialogControl() == gv_addMineralDialogItem[4]) || (EventDialogControl() == gv_addGasDialogItem[4]) || (EventDialogControl() == gv_addMineralDialogItem[5]) || (EventDialogControl() == gv_addGasDialogItem[5])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == gv_addMineralDialogItem[1]) || (EventDialogControl() == gv_addMineralDialogItem[2]) || (EventDialogControl() == gv_addMineralDialogItem[3]) || (EventDialogControl() == gv_addMineralDialogItem[4]) || (EventDialogControl() == gv_addMineralDialogItem[5]))) {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 100)) {
            if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true)) {
                gv_mineralCountPlayers += 100;
            }
            else {
                gv_mineralCountAmon += 100;
            }
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 100);
        }
        else {
            libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/4428A0CB"), SoundLink("UI_GenericError", 0));
        }
    }

    if (((EventDialogControl() == gv_addGasDialogItem[1]) || (EventDialogControl() == gv_addGasDialogItem[2]) || (EventDialogControl() == gv_addGasDialogItem[3]) || (EventDialogControl() == gv_addGasDialogItem[4]) || (EventDialogControl() == gv_addGasDialogItem[5]))) {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 50)) {
            if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true)) {
                gv_gasCountPlayers += 50;
            }
            else {
                gv_gasCountAmon += 50;
            }
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, 50);
        }
        else {
            libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/A7C786B9"), SoundLink("UI_GenericError", 0));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceUpdatePlayers_Init () {
    gt_ResourceUpdatePlayers = TriggerCreate("gt_ResourceUpdatePlayers_Func");
    TriggerEnable(gt_ResourceUpdatePlayers, false);
    TriggerAddEventDialogControl(gt_ResourceUpdatePlayers, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Window Update
//--------------------------------------------------------------------------------------------------
bool gt_WindowUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_remainingTimerTime;

    // Automatic Variable Declarations
    int autoE8BA6F8C_val;

    // Variable Initialization
    lv_remainingTimerTime = TimerGetRemaining(gv_roundTimer);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE8BA6F8C_val = gv_roundType;
    if (autoE8BA6F8C_val == 1) {
        gv_gasCountPlayers = 0;
        gv_gasCountAmon = 0;
        gv_textPlayersShipmentMinerals = StringExternal("Param/Value/4D841542");
        gv_textPlayersShipmentGas = StringExternal("Param/Value/6F5B7925");
        gv_textAmonShipmentMinerals = StringExternal("Param/Value/ACDCA70B");
        gv_textAmonShipmentGas = StringExternal("Param/Value/1321FCA8");
    }
    else if (autoE8BA6F8C_val == 2) {
        gv_mineralCountPlayers = 0;
        gv_mineralCountAmon = 0;
        gv_textPlayersShipmentMinerals = StringExternal("Param/Value/AE2CF6C2");
        gv_textPlayersShipmentGas = StringExternal("Param/Value/0517F7AF");
        gv_textAmonShipmentMinerals = StringExternal("Param/Value/C3942DA0");
        gv_textAmonShipmentGas = StringExternal("Param/Value/ECAC060F");
    }
    else {
        gv_textPlayersShipmentMinerals = StringExternal("Param/Value/3FC29798");
        gv_textPlayersShipmentGas = StringExternal("Param/Value/F2A8FDAB");
        gv_textAmonShipmentMinerals = StringExternal("Param/Value/52AB29C2");
        gv_textAmonShipmentGas = StringExternal("Param/Value/38954A99");
    }
    if ((lv_remainingTimerTime < 60.0)) {
        if ((gv_roundType == 0)) {
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/452180AB") + gf_GetRemainingDurationofTimerText(gv_roundTimer) + StringExternal("Param/Value/1995F1F3")));
        }
        else {
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/98B72DDB") + gf_GetRemainingDurationofTimerText(gv_roundTimer) + StringExternal("Param/Value/E5935193")));
        }
    }
    else {
        if ((gv_roundType == 0)) {
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/D72F1774") + gf_GetRemainingDurationofTimerText(gv_roundTimer) + StringExternal("Param/Value/CCFF1562")));
        }
        else {
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/DF2651EA") + gf_GetRemainingDurationofTimerText(gv_roundTimer) + StringExternal("Param/Value/C0D034EF")));
        }
    }
    if ((lv_remainingTimerTime < 30.0) && (gv_lastFlashIsBlackText == false)) {
        if ((gv_roundType == 0)) {
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/114A955C") + gf_GetRemainingDurationofTimerText(gv_roundTimer) + StringExternal("Param/Value/F37DBBD8")));
        }
        else {
            BoardItemSetText(gv_stateWindow, 1, c_boardRowHeader, (StringExternal("Param/Value/815F8A51") + gf_GetRemainingDurationofTimerText(gv_roundTimer) + StringExternal("Param/Value/29CD74CB")));
        }
        gv_lastFlashIsBlackText = true;
    }
    else {
        gv_lastFlashIsBlackText = false;
    }
    if ((lv_remainingTimerTime <= 20.0) && (gv_transmissionSent == false)) {
        TriggerExecute(gt_RoundEndingQ, true, false);
        gv_transmissionSent = true;
    }

    if ((lv_remainingTimerTime <= RandomFixed(10.0, 5.0)) && (TriggerIsEnabled(gt_ResourceUpdateAmon) == true)) {
        TriggerEnable(gt_ResourceUpdateAmon, false);
    }

    BoardItemSetProgressValue(gv_stateWindow, 1, 1, IntToFixed(gv_mineralCountPlayers));
    BoardItemSetText(gv_stateWindow, 1, 1, (gv_textPlayersShipmentMinerals + IntToText(gv_mineralCountPlayers) + StringExternal("Param/Value/4CF65434")));
    BoardItemSetProgressValue(gv_stateWindow, 1, 3, IntToFixed(gv_gasCountPlayers));
    BoardItemSetText(gv_stateWindow, 1, 3, (gv_textPlayersShipmentGas + IntToText(gv_gasCountPlayers) + StringExternal("Param/Value/06986B41")));
    BoardItemSetProgressValue(gv_stateWindow, 1, 2, IntToFixed(gv_mineralCountAmon));
    BoardItemSetText(gv_stateWindow, 1, 2, (gv_textAmonShipmentMinerals + IntToText(gv_mineralCountAmon) + StringExternal("Param/Value/31D8FDD5")));
    BoardItemSetProgressValue(gv_stateWindow, 1, 4, IntToFixed(gv_gasCountAmon));
    BoardItemSetText(gv_stateWindow, 1, 4, (gv_textAmonShipmentGas + IntToText(gv_gasCountAmon) + StringExternal("Param/Value/E3568C06")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WindowUpdate_Init () {
    gt_WindowUpdate = TriggerCreate("gt_WindowUpdate_Func");
    TriggerEnable(gt_WindowUpdate, false);
    TriggerAddEventTimePeriodic(gt_WindowUpdate, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MULEs Next
//--------------------------------------------------------------------------------------------------
bool gt_MULEsNext_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aIPlayer;
    point lv_spawnPoint;
    int lv_ping;

    // Automatic Variable Declarations
    playergroup auto64EB09AF_g;
    int auto64EB09AF_var;
    int autoF92308F9_val;
    unitgroup auto18F4F41C_g;
    int auto18F4F41C_u;
    unit auto18F4F41C_var;
    unitgroup auto7F3F86AA_g;
    int auto7F3F86AA_u;
    unit auto7F3F86AA_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lastMULEsGroupA = UnitGroupEmpty();
    if (((UnitIsAlive(UnitFromId(646792654)) == true) || (UnitIsAlive(UnitFromId(1076521328)) == true))) {
        if ((UnitIsAlive(UnitFromId(646792654)) == true) && (UnitIsAlive(UnitFromId(1076521328)) == true)) {
            lv_aIPlayer = RandomInt(gv_player03AI, gv_player04AI);
        }
        else {
            if ((UnitIsAlive(UnitFromId(646792654)) == true)) {
                lv_aIPlayer = gv_player03AI;
            }

            if ((UnitIsAlive(UnitFromId(1076521328)) == true)) {
                lv_aIPlayer = gv_player04AI;
            }

        }
        lv_spawnPoint = gf_GetMULEsSpawn((lv_aIPlayer - 3));
        TriggerExecute(gt_MULEsSpawnQ, true, false);
        libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingBaseAttack", lv_spawnPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(lv_ping, StringExternal("Param/Value/0D26B0EE"));
        Wait(2.5, c_timeGame);
        auto64EB09AF_g = libCOMI_gf_GetAlliedCommandersPlayers();
        auto64EB09AF_var = -1;
        while (true) {
            auto64EB09AF_var = PlayerGroupNextPlayer(auto64EB09AF_g, auto64EB09AF_var);
            if (auto64EB09AF_var < 0) { break; }
            VisRevealArea(auto64EB09AF_var, RegionCircle(lv_spawnPoint, 7.5), 7.5, false);
            UIAlertPoint("Trigger", auto64EB09AF_var, StringExternal("Param/Value/669B7882"), null, lv_spawnPoint);
        }
        autoF92308F9_val = gv_difficulty;
        if (autoF92308F9_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "MULE", 0, lv_aIPlayer, lv_spawnPoint);
        }
        else if (autoF92308F9_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "MULE", 0, lv_aIPlayer, lv_spawnPoint);
        }
        else if (autoF92308F9_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "MULE", 0, lv_aIPlayer, lv_spawnPoint);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "MULE", 0, lv_aIPlayer, lv_spawnPoint);
        }
        if ((UnitGroupCount(gv_lastMULEsGroupA, c_unitCountAlive) > 0)) {
            UnitGroupAddUnitGroup(gv_lastMULEsGroupB, UnitLastCreatedGroup());
            Wait(90.0, c_timeGame);
            auto18F4F41C_g = gv_lastMULEsGroupB;
            auto18F4F41C_u = UnitGroupCount(auto18F4F41C_g, c_unitCountAll);
            for (;; auto18F4F41C_u -= 1) {
                auto18F4F41C_var = UnitGroupUnitFromEnd(auto18F4F41C_g, auto18F4F41C_u);
                if (auto18F4F41C_var == null) { break; }
                UnitKill(auto18F4F41C_var);
            }
        }
        else {
            UnitGroupAddUnitGroup(gv_lastMULEsGroupA, UnitLastCreatedGroup());
            Wait(90.0, c_timeGame);
            auto7F3F86AA_g = gv_lastMULEsGroupA;
            auto7F3F86AA_u = UnitGroupCount(auto7F3F86AA_g, c_unitCountAll);
            for (;; auto7F3F86AA_u -= 1) {
                auto7F3F86AA_var = UnitGroupUnitFromEnd(auto7F3F86AA_g, auto7F3F86AA_u);
                if (auto7F3F86AA_var == null) { break; }
                UnitKill(auto7F3F86AA_var);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MULEsNext_Init () {
    gt_MULEsNext = TriggerCreate("gt_MULEsNext_Func");
    TriggerEnable(gt_MULEsNext, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marker Resources Show
//--------------------------------------------------------------------------------------------------
bool gt_MarkerResourcesShow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBCB54DEC_g;
    int autoBCB54DEC_var;
    playergroup auto11482A66_g;
    int auto11482A66_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    if (((gv_resourceMarkerAvailableUp == true) || (gv_resourceMarkerAvailableLeft == true))) {
        if ((gv_resourceMarkerAvailableUp == true)) {
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_OnMyWay", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingSimple", RegionGetCenter(RegionFromId(2)), Color(0.00, 100.00, 0.00), 0.0);
            gv_resourceMarkersUp = PingLastCreated();
            PingSetTooltip(gv_resourceMarkersUp, StringExternal("Param/Value/5B418E99"));
            PingSetScale(gv_resourceMarkersUp, 0.6);
            gv_resourceMarkerAvailableUp = false;
            autoBCB54DEC_g = libCOMI_gf_GetAlliedCommandersPlayers();
            autoBCB54DEC_var = -1;
            while (true) {
                autoBCB54DEC_var = PlayerGroupNextPlayer(autoBCB54DEC_g, autoBCB54DEC_var);
                if (autoBCB54DEC_var < 0) { break; }
                VisRevealArea(autoBCB54DEC_var, RegionFromId(2), 3.0, false);
                UIAlertPoint("Trigger", autoBCB54DEC_var, StringExternal("Param/Value/3B475B22"), null, RegionGetCenter(RegionFromId(2)));
            }
            Wait(1.5, c_timeGame);
        }

        if ((gv_resourceMarkerAvailableLeft == true)) {
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_OnMyWay", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingSimple", RegionGetCenter(RegionFromId(1)), Color(0.00, 100.00, 0.00), 0.0);
            gv_resourceMarkersLeft = PingLastCreated();
            PingSetTooltip(gv_resourceMarkersLeft, StringExternal("Param/Value/9E53DEA8"));
            PingSetScale(gv_resourceMarkersLeft, 0.6);
            gv_resourceMarkerAvailableLeft = false;
            auto11482A66_g = libCOMI_gf_GetAlliedCommandersPlayers();
            auto11482A66_var = -1;
            while (true) {
                auto11482A66_var = PlayerGroupNextPlayer(auto11482A66_g, auto11482A66_var);
                if (auto11482A66_var < 0) { break; }
                VisRevealArea(auto11482A66_var, RegionFromId(1), 3.0, false);
                UIAlertPoint("Trigger", auto11482A66_var, StringExternal("Param/Value/E25154F8"), null, RegionGetCenter(RegionFromId(1)));
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkerResourcesShow_Init () {
    gt_MarkerResourcesShow = TriggerCreate("gt_MarkerResourcesShow_Func");
    TriggerEnable(gt_MarkerResourcesShow, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marker Revealer Show
//--------------------------------------------------------------------------------------------------
bool gt_MarkerRevealerShow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    region lv_region;

    // Automatic Variable Declarations
    const int auto733DA453_ae = 22;
    const int auto733DA453_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.5, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto733DA453_ai >= 0 && lv_index <= auto733DA453_ae) || (auto733DA453_ai < 0 && lv_index >= auto733DA453_ae) ) ; lv_index += auto733DA453_ai ) {
        lv_region = RegionFromName(("Pickup " + IntToString(lv_index)));
        if ((lv_region != null)) {
            if ((lv_region == RegionFromId(36))) {
                libARRA_gf_AutoRevealRegion(RegionFromId(36), RegionFromId(49), gv_player01User);
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/4F153774"), UnitFromId(1344736113), "Ref_Center");
                gv_pickupReticleP01Unit[0] = UnitFromId(1344736113);
                gv_pickupReticleP01Actor[0] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP01Text[0] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/E94A9E53"), UnitFromId(1314869914), "Ref_Center");
                gv_pickupReticleP01Unit[1] = UnitFromId(1314869914);
                gv_pickupReticleP01Actor[1] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP01Text[1] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/6A51752E"), UnitFromId(1860755920), "Ref_Center");
                gv_pickupReticleP01Unit[2] = UnitFromId(1860755920);
                gv_pickupReticleP01Actor[2] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP01Text[2] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/C3A11A46"), UnitFromId(1871430038), "Ref_Center");
                gv_pickupReticleP01Unit[3] = UnitFromId(1871430038);
                gv_pickupReticleP01Actor[3] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP01Text[3] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/68D5BF6A"), UnitFromId(64706718), "Ref_Center");
                gv_pickupReticleP01Unit[4] = UnitFromId(64706718);
                gv_pickupReticleP01Actor[4] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP01Text[4] = TextTagLastCreated();
                if ((gv_pickupMarkersAvailableP01 == true)) {
                    gv_pickupMarkersAvailableP01 = false;
                    SoundPlayForPlayer(SoundLink("UI_PingAdvanced_OnMyWay", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 75.0, 0.0);
                    libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingSimple", RegionGetCenter(RegionFromId(36)), Color(0.00, 100.00, 0.00), 0.0);
                    gv_pickupMarkersP01 = PingLastCreated();
                    PingSetTooltip(gv_pickupMarkersP01, StringExternal("Param/Value/DE53183E"));
                    PingSetScale(gv_pickupMarkersP01, 0.5);
                    gv_pickupMarkersAvailableP01 = false;
                }

            }

            if ((lv_region == RegionFromId(38))) {
                libARRA_gf_AutoRevealRegion(RegionFromId(38), RegionFromId(49), gv_player02User);
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/67A15B15"), UnitFromId(927355481), "Ref_Center");
                gv_pickupReticleP02Unit[0] = UnitFromId(927355481);
                gv_pickupReticleP02Actor[0] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP02Text[0] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/CB72DE9F"), UnitFromId(591604274), "Ref_Center");
                gv_pickupReticleP02Unit[1] = UnitFromId(591604274);
                gv_pickupReticleP02Actor[1] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP02Text[1] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/62897B42"), UnitFromId(227005556), "Ref_Center");
                gv_pickupReticleP02Unit[2] = UnitFromId(227005556);
                gv_pickupReticleP02Actor[2] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP02Text[2] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/1879A0A0"), UnitFromId(879914435), "Ref_Center");
                gv_pickupReticleP02Unit[3] = UnitFromId(879914435);
                gv_pickupReticleP02Actor[3] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP02Text[3] = TextTagLastCreated();
                libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/FD4BC7CD"), UnitFromId(743486357), "Ref_Center");
                gv_pickupReticleP02Unit[4] = UnitFromId(743486357);
                gv_pickupReticleP02Actor[4] = libNtve_gf_ActorLastCreated();
                gv_pickupReticleP02Text[4] = TextTagLastCreated();
                if ((gv_pickupMarkersAvailableP02 == true)) {
                    gv_pickupMarkersAvailableP02 = false;
                    SoundPlayForPlayer(SoundLink("UI_PingAdvanced_OnMyWay", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 75.0, 0.0);
                    libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingSimple", RegionGetCenter(RegionFromId(38)), Color(0.00, 100.00, 0.00), 0.0);
                    gv_pickupMarkersP02 = PingLastCreated();
                    PingSetTooltip(gv_pickupMarkersP02, StringExternal("Param/Value/0C0469F9"));
                    PingSetScale(gv_pickupMarkersP02, 0.5);
                    gv_pickupMarkersAvailableP02 = false;
                }

            }

            gf_ShowPickupArea(lv_region);
            Wait(0.5, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkerRevealerShow_Init () {
    gt_MarkerRevealerShow = TriggerCreate("gt_MarkerRevealerShow_Func");
    TriggerEnable(gt_MarkerRevealerShow, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marker Enemy Bases Show
//--------------------------------------------------------------------------------------------------
bool gt_MarkerEnemyBasesShow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD15A8B7C_g;
    int autoD15A8B7C_var;
    playergroup autoA0B35B96_g;
    int autoA0B35B96_var;
    playergroup auto0D1A4B6B_g;
    int auto0D1A4B6B_var;
    playergroup autoAFD16039_g;
    int autoAFD16039_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.5, c_timeGame);
    if ((gv_enemyBaseMarkerMainAvailable == true)) {
        gv_enemyBaseMarkerMainAvailable = false;
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(34)), StringExternal("Param/Value/75D4206E"));
        gv_enemyBaseMarkerMain = PingLastCreated();
        autoD15A8B7C_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoD15A8B7C_var = -1;
        while (true) {
            autoD15A8B7C_var = PlayerGroupNextPlayer(autoD15A8B7C_g, autoD15A8B7C_var);
            if (autoD15A8B7C_var < 0) { break; }
            VisRevealArea(autoD15A8B7C_var, RegionFromId(34), 3.0, false);
            UIAlertPoint("Trigger", autoD15A8B7C_var, StringExternal("Param/Value/FBC5659A"), null, RegionGetCenter(RegionFromId(34)));
        }
        Wait(1.5, c_timeGame);
    }

    if ((gv_enemyBaseMarkerCentralAvailable == true)) {
        gv_enemyBaseMarkerCentralAvailable = false;
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(65)), StringExternal("Param/Value/A2FFAAAB"));
        gv_enemyBaseMarkerCentral = PingLastCreated();
        autoA0B35B96_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoA0B35B96_var = -1;
        while (true) {
            autoA0B35B96_var = PlayerGroupNextPlayer(autoA0B35B96_g, autoA0B35B96_var);
            if (autoA0B35B96_var < 0) { break; }
            VisRevealArea(autoA0B35B96_var, RegionFromId(65), 3.0, false);
            UIAlertPoint("Trigger", autoA0B35B96_var, StringExternal("Param/Value/7DFDC613"), null, RegionGetCenter(RegionFromId(65)));
        }
        Wait(1.5, c_timeGame);
    }

    if ((gv_enemyBaseMarkerSideP03Available == true)) {
        gv_enemyBaseMarkerSideP03Available = false;
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(64)), StringExternal("Param/Value/C856B7EA"));
        gv_enemyBaseMarkerSideP03 = PingLastCreated();
        auto0D1A4B6B_g = libCOMI_gf_GetAlliedCommandersPlayers();
        auto0D1A4B6B_var = -1;
        while (true) {
            auto0D1A4B6B_var = PlayerGroupNextPlayer(auto0D1A4B6B_g, auto0D1A4B6B_var);
            if (auto0D1A4B6B_var < 0) { break; }
            VisRevealArea(auto0D1A4B6B_var, RegionFromId(64), 3.0, false);
            UIAlertPoint("Trigger", auto0D1A4B6B_var, StringExternal("Param/Value/CE04F9D3"), null, RegionGetCenter(RegionFromId(64)));
        }
        Wait(1.5, c_timeGame);
    }

    if ((gv_enemyBaseMarkerSideP04Available == true)) {
        gv_enemyBaseMarkerSideP04Available = false;
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(63)), StringExternal("Param/Value/B6873ABA"));
        gv_enemyBaseMarkerSideP04 = PingLastCreated();
        autoAFD16039_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoAFD16039_var = -1;
        while (true) {
            autoAFD16039_var = PlayerGroupNextPlayer(autoAFD16039_g, autoAFD16039_var);
            if (autoAFD16039_var < 0) { break; }
            VisRevealArea(autoAFD16039_var, RegionFromId(63), 3.0, false);
            UIAlertPoint("Trigger", autoAFD16039_var, StringExternal("Param/Value/37589E56"), null, RegionGetCenter(RegionFromId(63)));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkerEnemyBasesShow_Init () {
    gt_MarkerEnemyBasesShow = TriggerCreate("gt_MarkerEnemyBasesShow_Func");
    TriggerEnable(gt_MarkerEnemyBasesShow, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marker Remove
//--------------------------------------------------------------------------------------------------
bool gt_MarkerRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    region auto4DEE980F_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4DEE980F_val = EventUnitRegion();
    if (auto4DEE980F_val == RegionFromId(2)) {
        if ((gv_resourceMarkersUp != c_invalidPingId)) {
            PingDestroy(gv_resourceMarkersUp);
            gv_resourceMarkersUp = c_invalidPingId;
        }

        gv_resourceMarkerAvailableUp = false;
    }
    else if (auto4DEE980F_val == RegionFromId(1)) {
        if ((gv_resourceMarkersLeft != c_invalidPingId)) {
            PingDestroy(gv_resourceMarkersLeft);
            gv_resourceMarkersLeft = c_invalidPingId;
        }

        gv_resourceMarkerAvailableLeft = false;
    }
    else if (auto4DEE980F_val == RegionFromId(64)) {
        if ((gv_enemyBaseMarkerSideP03 != c_invalidPingId)) {
            PingDestroy(gv_enemyBaseMarkerSideP03);
            gv_enemyBaseMarkerSideP03 = c_invalidPingId;
        }

        gv_enemyBaseMarkerSideP03Available = false;
    }
    else if (auto4DEE980F_val == RegionFromId(63)) {
        if ((gv_enemyBaseMarkerSideP04 != c_invalidPingId)) {
            PingDestroy(gv_enemyBaseMarkerSideP04);
            gv_enemyBaseMarkerSideP04 = c_invalidPingId;
        }

        gv_enemyBaseMarkerSideP04Available = false;
    }
    else if (auto4DEE980F_val == RegionFromId(34)) {
        if ((gv_enemyBaseMarkerMain != c_invalidPingId)) {
            PingDestroy(gv_enemyBaseMarkerMain);
            gv_enemyBaseMarkerMain = c_invalidPingId;
        }

        gv_enemyBaseMarkerMainAvailable = false;
    }
    else if (auto4DEE980F_val == RegionFromId(65)) {
        if ((gv_enemyBaseMarkerCentral != c_invalidPingId)) {
            PingDestroy(gv_enemyBaseMarkerCentral);
            gv_enemyBaseMarkerCentral = c_invalidPingId;
        }

        gv_enemyBaseMarkerCentralAvailable = false;
    }
    else if (auto4DEE980F_val == RegionFromId(36)) {
        if ((gv_pickupMarkersP01 != c_invalidPingId)) {
            PingDestroy(gv_pickupMarkersP01);
            gv_pickupMarkersP01 = c_invalidPingId;
        }

        gv_pickupMarkersAvailableP01 = false;
    }
    else if (auto4DEE980F_val == RegionFromId(38)) {
        if ((gv_pickupMarkersP02 != c_invalidPingId)) {
            PingDestroy(gv_pickupMarkersP02);
            gv_pickupMarkersP02 = c_invalidPingId;
        }

        gv_pickupMarkersAvailableP02 = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkerRemove_Init () {
    gt_MarkerRemove = TriggerCreate("gt_MarkerRemove_Func");
    TriggerEnable(gt_MarkerRemove, false);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(1), true);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(64), true);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(63), true);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(65), true);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_MarkerRemove, null, RegionFromId(38), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Buildings Revealer
//--------------------------------------------------------------------------------------------------
bool gt_EnemyBuildingsRevealer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3DD5BAD3_g;
    int auto3DD5BAD3_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3DD5BAD3_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto3DD5BAD3_var = -1;
    while (true) {
        auto3DD5BAD3_var = PlayerGroupNextPlayer(auto3DD5BAD3_g, auto3DD5BAD3_var);
        if (auto3DD5BAD3_var < 0) { break; }
        libARRA_gf_AutoRevealRegion(RegionFromId(68), RegionFromId(45), auto3DD5BAD3_var);
    }
    SoundPlayForPlayer(SoundLink("UI_PingAdvanced_OnMyWay", -1), c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
    HelpPanelAddTip(libCOMI_gf_HumanPlayers(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/3D7C596E"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/ED399312"), StringExternal("Param/Value/89C68181"), "Assets\\Textures\\ui_btn_generic_exclemation_red.dds");
    if ((UnitIsAlive(UnitFromId(1229370550)) == true)) {
        libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/6E7F4A58"), UnitFromId(1229370550), "Ref_Center");
        gv_enemyReticleUnit[0] = UnitFromId(1229370550);
        gv_enemyReticleActor[0] = libNtve_gf_ActorLastCreated();
        gv_enemyReticleText[0] = TextTagLastCreated();
    }

    if ((UnitIsAlive(UnitFromId(1655247062)) == true)) {
        libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/CFF396E1"), UnitFromId(1655247062), "Ref_Center");
        gv_enemyReticleUnit[1] = UnitFromId(1655247062);
        gv_enemyReticleActor[1] = libNtve_gf_ActorLastCreated();
        gv_enemyReticleText[1] = TextTagLastCreated();
    }

    if ((UnitIsAlive(UnitFromId(1188961779)) == true)) {
        libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/72D2C798"), UnitFromId(1188961779), "Ref_Center");
        gv_enemyReticleUnit[2] = UnitFromId(1188961779);
        gv_enemyReticleActor[2] = libNtve_gf_ActorLastCreated();
        gv_enemyReticleText[2] = TextTagLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyBuildingsRevealer_Init () {
    gt_EnemyBuildingsRevealer = TriggerCreate("gt_EnemyBuildingsRevealer_Func");
    TriggerEnable(gt_EnemyBuildingsRevealer, false);
    TriggerAddEventUnitRegion(gt_EnemyBuildingsRevealer, null, RegionFromId(45), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Next
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveNext_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    region lv_region;
    point lv_dropPodPoint;
    int lv_currentIndexBonusObjective;

    // Automatic Variable Declarations
    int auto61C32DA3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjectiveCounter += 1;
    lv_currentIndexBonusObjective = (gv_bonusObjectiveCounter - 1);
    TriggerExecute(gt_RelicMarkerQ, true, false);
    auto61C32DA3_val = gv_bonusObjectiveCounter;
    if (auto61C32DA3_val == 1) {
        lv_unit = UnitFromId(303717300);
        lv_region = RegionFromId(15);
        lv_dropPodPoint = PointFromId(1713792284);
        Wait(1.5, c_timeGame);
        TriggerExecute(gt_ObjectiveOptionalCollectRelicsCreate, true, false);
    }
    else if (auto61C32DA3_val == 2) {
        lv_unit = UnitFromId(1668060666);
        lv_region = RegionFromId(16);
        lv_dropPodPoint = PointFromId(323364342);
    }
    else if (auto61C32DA3_val == 3) {
        lv_unit = UnitFromId(380259798);
        lv_region = RegionFromId(17);
        lv_dropPodPoint = PointFromId(1978956129);
    }
    else {
    }
    Wait(1.5, c_timeGame);
    TriggerEnable(gt_BonusObjectiveDrop, true);
    TriggerEnable(gt_BonusObjectiveRelic, true);
    TriggerEnable(gt_BonusObjectivePickup, true);
    gf_ShowBonusObjective(lv_unit, lv_region, lv_currentIndexBonusObjective, lv_dropPodPoint);
    if ((gv_bonusObjectiveCounter == 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveNext_Init () {
    gt_BonusObjectiveNext = TriggerCreate("gt_BonusObjectiveNext_Func");
    TriggerEnable(gt_BonusObjectiveNext, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Drop
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;
    point lv_currentDropPodPoint;
    unitgroup lv_currentDropPodGroup;

    // Automatic Variable Declarations
    unit auto728AE066_val;
    playergroup auto618D9074_g;
    int auto618D9074_var;
    int auto9FF2D60F_val;
    playergroup autoB5AE62C8_g;
    int autoB5AE62C8_var;
    int auto72120619_val;
    playergroup auto02319AAC_g;
    int auto02319AAC_var;
    int auto879C8AED_val;

    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_currentDropPodGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto728AE066_val = EventUnit();
    if (auto728AE066_val == gv_bonusObjectiveTransport[0]) {
        if ((gv_bonusObjectiveTransportDropPodDone[0] == false)) {
            gv_bonusObjectiveTransportDropPodDone[0] = true;
            lv_currentDropPodPoint = gv_bonusObjectiveTransportDropPod[0];
            TriggerExecute(gt_EnemyDropPodsQ, true, false);
            libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingBaseAttack", lv_currentDropPodPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.5);
            lv_ping = PingLastCreated();
            PingSetTooltip(lv_ping, StringExternal("Param/Value/060CCBE1"));
            auto618D9074_g = libCOMI_gf_GetAlliedCommandersPlayers();
            auto618D9074_var = -1;
            while (true) {
                auto618D9074_var = PlayerGroupNextPlayer(auto618D9074_g, auto618D9074_var);
                if (auto618D9074_var < 0) { break; }
                UIAlertPoint("Trigger", auto618D9074_var, StringExternal("Param/Value/7CA1E20F"), null, lv_currentDropPodPoint);
            }
            Wait(5.0, c_timeGame);
            auto9FF2D60F_val = gv_difficulty;
            if (auto9FF2D60F_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else if (auto9FF2D60F_val == 2) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HammerSecurity", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else if (auto9FF2D60F_val == 3) {
                libNtve_gf_CreateUnitsWithDefaultFacing(8, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HammerSecurity", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(10, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "HammerSecurity", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, lv_currentDropPodPoint, lv_currentDropPodGroup, false, gv_player04AI);
            AISetGroupScriptControlled(libCOMI_gf_LastDroppedUnits(), false);
        }

    }
    else if (auto728AE066_val == gv_bonusObjectiveTransport[1]) {
        if ((gv_bonusObjectiveTransportDropPodDone[1] == false)) {
            gv_bonusObjectiveTransportDropPodDone[1] = true;
            lv_currentDropPodPoint = gv_bonusObjectiveTransportDropPod[1];
            TriggerExecute(gt_EnemyDropPodsQ, true, false);
            libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingBaseAttack", lv_currentDropPodPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
            lv_ping = PingLastCreated();
            PingSetTooltip(lv_ping, StringExternal("Param/Value/AEDBC2B2"));
            autoB5AE62C8_g = libCOMI_gf_GetAlliedCommandersPlayers();
            autoB5AE62C8_var = -1;
            while (true) {
                autoB5AE62C8_var = PlayerGroupNextPlayer(autoB5AE62C8_g, autoB5AE62C8_var);
                if (autoB5AE62C8_var < 0) { break; }
                UIAlertPoint("Trigger", autoB5AE62C8_var, StringExternal("Param/Value/2A50DBA7"), null, lv_currentDropPodPoint);
            }
            Wait(5.0, c_timeGame);
            auto72120619_val = gv_difficulty;
            if (auto72120619_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else if (auto72120619_val == 2) {
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "MercHellion", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else if (auto72120619_val == 3) {
                libNtve_gf_CreateUnitsWithDefaultFacing(5, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "MercHellion", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "MercHellion", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, lv_currentDropPodPoint, lv_currentDropPodGroup, false, gv_player04AI);
            AISetGroupScriptControlled(libCOMI_gf_LastDroppedUnits(), false);
        }

    }
    else if (auto728AE066_val == gv_bonusObjectiveTransport[2]) {
        if ((gv_bonusObjectiveTransportDropPodDone[2] == false)) {
            gv_bonusObjectiveTransportDropPodDone[2] = true;
            lv_currentDropPodPoint = gv_bonusObjectiveTransportDropPod[2];
            TriggerExecute(gt_EnemyDropPodsQ, true, false);
            libCOMI_gf_CreatePingCoop(libCOMI_gf_HumanPlayers(), "PingBaseAttack", lv_currentDropPodPoint, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
            lv_ping = PingLastCreated();
            PingSetTooltip(lv_ping, StringExternal("Param/Value/EDC51E4E"));
            auto02319AAC_g = libCOMI_gf_GetAlliedCommandersPlayers();
            auto02319AAC_var = -1;
            while (true) {
                auto02319AAC_var = PlayerGroupNextPlayer(auto02319AAC_g, auto02319AAC_var);
                if (auto02319AAC_var < 0) { break; }
                UIAlertPoint("Trigger", auto02319AAC_var, StringExternal("Param/Value/DFC38665"), null, lv_currentDropPodPoint);
            }
            Wait(5.0, c_timeGame);
            auto879C8AED_val = gv_difficulty;
            if (auto879C8AED_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else if (auto879C8AED_val == 2) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HammerSecurity", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else if (auto879C8AED_val == 3) {
                libNtve_gf_CreateUnitsWithDefaultFacing(8, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HammerSecurity", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(3, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MercHellion", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(8, "WarPig", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "HammerSecurity", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "MercMedic", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(4, "SpartanCompany", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "MercHellion", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
                libNtve_gf_CreateUnitsWithDefaultFacing(2, "SiegeBreaker", 0, gv_player04AI, lv_currentDropPodPoint);
                UnitGroupAddUnitGroup(lv_currentDropPodGroup, UnitLastCreatedGroup());
            }
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, lv_currentDropPodPoint, lv_currentDropPodGroup, false, gv_player04AI);
            AISetGroupScriptControlled(libCOMI_gf_LastDroppedUnits(), false);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveDrop_Init () {
    gt_BonusObjectiveDrop = TriggerCreate("gt_BonusObjectiveDrop_Func");
    TriggerEnable(gt_BonusObjectiveDrop, false);
    TriggerAddEventUnitAttacked2(gt_BonusObjectiveDrop, UnitRefFromVariable("gv_bonusObjectiveTransport[0]"), null);
    TriggerAddEventUnitAttacked2(gt_BonusObjectiveDrop, UnitRefFromVariable("gv_bonusObjectiveTransport[1]"), null);
    TriggerAddEventUnitAttacked2(gt_BonusObjectiveDrop, UnitRefFromVariable("gv_bonusObjectiveTransport[2]"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Relic
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRelic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexRelic;
    point lv_relicPoint;

    // Automatic Variable Declarations
    unit auto04FD8D41_val;

    // Variable Initialization
    lv_indexRelic = -1;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto04FD8D41_val = EventUnit();
    if (auto04FD8D41_val == gv_bonusObjectiveTransport[0]) {
        lv_indexRelic = 0;
        lv_relicPoint = PointFromId(197372255);
        TextTagDestroy(gv_wreckedTransportReticleText);
        ActorScopeKill(ActorScopeFromActor(gv_wreckedTransportReticleActor));
    }
    else if (auto04FD8D41_val == gv_bonusObjectiveTransport[1]) {
        lv_indexRelic = 1;
        lv_relicPoint = PointFromId(850776695);
    }
    else if (auto04FD8D41_val == gv_bonusObjectiveTransport[2]) {
        lv_indexRelic = 2;
        lv_relicPoint = PointFromId(1764747251);
    }
    else {
    }
    if ((lv_indexRelic > -1)) {
        if ((gv_bonusObjectiveMarkers[lv_indexRelic] != c_invalidPingId)) {
            PingDestroy(gv_bonusObjectiveMarkers[lv_indexRelic]);
            gv_bonusObjectiveMarkers[lv_indexRelic] = c_invalidPingId;
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_OnMyWay", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        libNtve_gf_UnitCreateFacingPoint(1, "ProtossRelic", 0, 0, lv_relicPoint, UnitGetPosition(EventUnit()));
        if ((lv_indexRelic == 0)) {
            libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranBonusObjective, libCOMI_ge_CampaginReticleSize_Small, StringExternal("Param/Value/2F6267A0"), UnitLastCreated(), "Ref_Center");
            gv_relicReticleActor = libNtve_gf_ActorLastCreated();
            gv_relicReticleText = TextTagLastCreated();
        }

        libNtve_gf_UnitCreateFacingPoint(4, "ScrapSalvage1x1", 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), 1.0, 0.0), UnitGetPosition(EventUnit()));
        libNtve_gf_UnitCreateFacingPoint(2, "ScrapSalvage2x2", 0, 0, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 1.0), UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRelic_Init () {
    gt_BonusObjectiveRelic = TriggerCreate("gt_BonusObjectiveRelic_Func");
    TriggerEnable(gt_BonusObjectiveRelic, false);
    TriggerAddEventUnitDied(gt_BonusObjectiveRelic, UnitRefFromVariable("gv_bonusObjectiveTransport[0]"));
    TriggerAddEventUnitDied(gt_BonusObjectiveRelic, UnitRefFromVariable("gv_bonusObjectiveTransport[1]"));
    TriggerAddEventUnitDied(gt_BonusObjectiveRelic, UnitRefFromVariable("gv_bonusObjectiveTransport[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Pickup
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectivePickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjectiveRemaining -= 1;
    Wait(2.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_ObjectiveComplete", -1), c_maxPlayers, libCOMI_gf_HumanPlayers(), 100.0, 0.0);
    TriggerExecute(gt_ObjectiveOptionalCollectRelicsUpdate, true, false);
    if ((gv_bonusObjectiveRemaining <= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_RelicCompleteQ, true, false);
        TriggerExecute(gt_ObjectiveOptionalCollectRelicsComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectivePickup_Init () {
    gt_BonusObjectivePickup = TriggerCreate("gt_BonusObjectivePickup_Func");
    TriggerEnable(gt_BonusObjectivePickup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Cinematic);
    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    if (((RandomInt(0, 100) < 55) || (gv_attackWaveCounter == 1))) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player01User);
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    if (((RandomInt(0, 100) < 15) || (gv_attackWaveCounter == 1))) {
        SoundtrackPlay(libCOMI_gf_HumanPlayers(), c_soundtrackCategoryMusic, "LOTV_General_High", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Lost Q
//--------------------------------------------------------------------------------------------------
bool gt_RoundLostQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("TugofWarLost", true, RandomInt(gv_player01User, gv_player02User));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundLostQ_Init () {
    gt_RoundLostQ = TriggerCreate("gt_RoundLostQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Draw Q
//--------------------------------------------------------------------------------------------------
bool gt_RoundDrawQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveUpdated", true, RandomInt(gv_player01User, gv_player02User));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundDrawQ_Init () {
    gt_RoundDrawQ = TriggerCreate("gt_RoundDrawQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Won Q
//--------------------------------------------------------------------------------------------------
bool gt_RoundWonQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("CaptureObjectComplete", true, RandomInt(gv_player01User, gv_player02User));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundWonQ_Init () {
    gt_RoundWonQ = TriggerCreate("gt_RoundWonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Ending Q
//--------------------------------------------------------------------------------------------------
bool gt_RoundEndingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3EFE1E8D_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    auto3EFE1E8D_val = gv_roundType;
    if (auto3EFE1E8D_val == 0) {
        if (((gv_mineralCountAmon >= gv_mineralCountPlayers) || (gv_gasCountAmon >= gv_gasCountPlayers))) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("TugofWarNearlyLost", true, RandomInt(gv_player01User, gv_player02User));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        }
        else {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("PrimaryObjectiveAlmostDone", true, RandomInt(gv_player01User, gv_player02User));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else if (auto3EFE1E8D_val == 1) {
        if ((gv_mineralCountAmon >= gv_mineralCountPlayers)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("TugofWarNearlyLost", true, RandomInt(gv_player01User, gv_player02User));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        }
        else {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("PrimaryObjectiveAlmostDone", true, RandomInt(gv_player01User, gv_player02User));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else if (auto3EFE1E8D_val == 2) {
        if ((gv_gasCountAmon >= gv_gasCountPlayers)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("TugofWarNearlyLost", true, RandomInt(gv_player01User, gv_player02User));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        }
        else {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("PrimaryObjectiveAlmostDone", true, RandomInt(gv_player01User, gv_player02User));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        }
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundEndingQ_Init () {
    gt_RoundEndingQ = TriggerCreate("gt_RoundEndingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Round Q
//--------------------------------------------------------------------------------------------------
bool gt_NewRoundQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD79EE536_val;
    int auto0F1C2414_val;
    int autoF8575E08_val;
    int auto38A24D60_val;
    int auto8DDEA16B_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    autoD79EE536_val = gv_roundCurrent;
    if (autoD79EE536_val == 2) {
        auto0F1C2414_val = gv_roundType;
        if (auto0F1C2414_val == 0) {
            gf_MiraHanTransmission(StringExternal("Param/Value/F9D4D834"), SoundLink("HanShipment02A", -1));
        }
        else if (auto0F1C2414_val == 1) {
            gf_MiraHanTransmission(StringExternal("Param/Value/F2639BCB"), SoundLink("HanShipment02B", -1));
        }
        else if (auto0F1C2414_val == 2) {
            gf_MiraHanTransmission(StringExternal("Param/Value/B6D83865"), SoundLink("HanShipment02C", -1));
        }
        else {
        }
    }
    else if (autoD79EE536_val == 3) {
        autoF8575E08_val = gv_roundType;
        if (autoF8575E08_val == 0) {
            gf_MiraHanTransmission(StringExternal("Param/Value/53433A78"), SoundLink("HanShipment03A", -1));
        }
        else if (autoF8575E08_val == 1) {
            gf_MiraHanTransmission(StringExternal("Param/Value/CF77BC5C"), SoundLink("HanShipment03B", -1));
        }
        else if (autoF8575E08_val == 2) {
            gf_MiraHanTransmission(StringExternal("Param/Value/0AA8F08A"), SoundLink("HanShipment03C", -1));
        }
        else {
        }
    }
    else if (autoD79EE536_val == 4) {
        auto38A24D60_val = gv_roundType;
        if (auto38A24D60_val == 0) {
            gf_MiraHanTransmission(StringExternal("Param/Value/B324E4E0"), SoundLink("HanShipment04A", -1));
        }
        else if (auto38A24D60_val == 1) {
            gf_MiraHanTransmission(StringExternal("Param/Value/D4D3FF58"), SoundLink("HanShipment04B", -1));
        }
        else if (auto38A24D60_val == 2) {
            gf_MiraHanTransmission(StringExternal("Param/Value/E2FEF296"), SoundLink("HanShipment04C", -1));
        }
        else {
        }
    }
    else if (autoD79EE536_val == 5) {
        auto8DDEA16B_val = gv_roundType;
        if (auto8DDEA16B_val == 0) {
            gf_MiraHanTransmission(StringExternal("Param/Value/7B1FC1CC"), SoundLink("HanShipment05A", -1));
        }
        else if (auto8DDEA16B_val == 1) {
            gf_MiraHanTransmission(StringExternal("Param/Value/5BB2E8D7"), SoundLink("HanShipment05B", -1));
        }
        else if (auto8DDEA16B_val == 2) {
            gf_MiraHanTransmission(StringExternal("Param/Value/C9165A5C"), SoundLink("HanShipment05C", -1));
        }
        else {
        }
    }
    else if (autoD79EE536_val == 6) {
        gf_MiraHanTransmission(StringExternal("Param/Value/E77F936B"), SoundLink("HanShipment06", -1));
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewRoundQ_Init () {
    gt_NewRoundQ = TriggerCreate("gt_NewRoundQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Drop Pods Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyDropPodsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Cinematic);
    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("EnemyWarningDropPods", true, RandomInt(gv_player01User, gv_player02User));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyDropPodsQ_Init () {
    gt_EnemyDropPodsQ = TriggerCreate("gt_EnemyDropPodsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Major Wave Hybrids Q
//--------------------------------------------------------------------------------------------------
bool gt_MajorWaveHybridsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_hybridWaveFired == false)) {
        gv_hybridWaveFired = true;
        gf_MiraHanTransmission(StringExternal("Param/Value/358501EF"), SoundLink("HanHybrid", -1));
        Wait(2.0, c_timeGame);
    }
    else {
        Wait(10.0, c_timeGame);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Cinematic);
    SoundPlayForPlayer(SoundLink("UI_TerranKlaxonAlert", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_player01User, gv_player02User));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    SoundtrackPlay(libCOMI_gf_HumanPlayers(), c_soundtrackCategoryMusic, "LOTV_General_High", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MajorWaveHybridsQ_Init () {
    gt_MajorWaveHybridsQ = TriggerCreate("gt_MajorWaveHybridsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Major Wave Mercenaries Q
//--------------------------------------------------------------------------------------------------
bool gt_MajorWaveMercenariesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_mercenaryWaveFired == false)) {
        gv_mercenaryWaveFired = true;
        gf_MiraHanTransmission(StringExternal("Param/Value/662B2237"), SoundLink("HanMercenaries", -1));
        Wait(2.0, c_timeGame);
    }
    else {
        Wait(10.0, c_timeGame);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Cinematic);
    SoundPlayForPlayer(SoundLink("UI_TerranKlaxonAlert", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveHoldout", true, RandomInt(gv_player01User, gv_player02User));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    SoundtrackPlay(libCOMI_gf_HumanPlayers(), c_soundtrackCategoryMusic, "LOTV_General_High", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MajorWaveMercenariesQ_Init () {
    gt_MajorWaveMercenariesQ = TriggerCreate("gt_MajorWaveMercenariesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Relic Marker Q
//--------------------------------------------------------------------------------------------------
bool gt_RelicMarkerQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2B71510B_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    auto2B71510B_val = gv_bonusObjectiveCounter;
    if (auto2B71510B_val == 1) {
        if ((PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("Raynor", 1)) > 0)) {
            gf_MiraHanTransmission(StringExternal("Param/Value/7F4B0B8E"), SoundLink("HanBonusA01A", -1));
        }
        else {
            gf_MiraHanTransmission(StringExternal("Param/Value/911A1763"), SoundLink("HanBonusA01", -1));
        }
        gf_MiraHanTransmission(StringExternal("Param/Value/CF196DFC"), SoundLink("HanBonusA02", -1));
        Wait(1.5, c_timeGame);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BonusObjectiveDestroy", true, RandomInt(gv_player01User, gv_player02User));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto2B71510B_val == 2) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BonusObjectiveAdditional", true, RandomInt(gv_player01User, gv_player02User));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    else if (auto2B71510B_val == 3) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BonusObjectiveAdditional", true, RandomInt(gv_player01User, gv_player02User));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    else {
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RelicMarkerQ_Init () {
    gt_RelicMarkerQ = TriggerCreate("gt_RelicMarkerQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Relic Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_RelicCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    gf_MiraHanTransmission(StringExternal("Param/Value/A8558448"), SoundLink("HanBonusComplete", -1));
    Wait(1.5, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveSuccess", true, RandomInt(gv_player01User, gv_player02User));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RelicCompleteQ_Init () {
    gt_RelicCompleteQ = TriggerCreate("gt_RelicCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MULEs Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_MULEsSpawnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_MiraHanTransmission(StringExternal("Param/Value/93A92DF5"), SoundLink("HanMULEs", -1));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MULEsSpawnQ_Init () {
    gt_MULEsSpawnQ = TriggerCreate("gt_MULEsSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mira Han Talking Portrait
//--------------------------------------------------------------------------------------------------
bool gt_MiraHanTalkingPortrait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionSendForPlayerSelect(libCOMI_gf_HumanPlayers(), TransmissionSourceFromModel("HanPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("MutedSound", -1), StringExternal("Param/Value/73E35D9D"), StringToText(""), 11.0, c_transmissionDurationSet, false, c_maxPlayers, false);
    Wait(10.5, c_timeReal);
    TransmissionSendForPlayerSelect(libCOMI_gf_HumanPlayers(), TransmissionSourceFromModel("HanPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", SoundLink("MutedSound", -1), StringExternal("Param/Value/840AA6F7"), StringToText(""), (gv_transmissionDuration + 0.5), c_transmissionDurationSet, true, c_maxPlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiraHanTalkingPortrait_Init () {
    gt_MiraHanTalkingPortrait = TriggerCreate("gt_MiraHanTalkingPortrait_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
    TriggerEnable(gt_RoundExpire, false);
    TriggerEnable(gt_ResourceUpdateAmon, false);
    TriggerEnable(gt_WindowUpdate, false);
    TriggerEnable(gt_MarkerResourcesShow, false);
    TriggerEnable(gt_MarkerRemove, false);
    TriggerEnable(gt_NextAttackWave, false);
    TriggerEnable(gt_RemoveSCVsonBaseDestroyed, false);
    TriggerEnable(gt_SpawnHybridforMainBaseDefence, false);
    TriggerEnable(gt_BonusObjectiveNext, false);
    TriggerEnable(gt_BonusObjectiveRelic, false);
    TriggerEnable(gt_BonusObjectiveDrop, false);
    TriggerEnable(gt_PickupsGenerate, false);
    TriggerEnable(gt_BonusObjectivePickup, false);
    TriggerEnable(gt_JunkerEastSpawn, false);
    TriggerEnable(gt_JunkerWestSpawn, false);
    TriggerEnable(gt_SuperCraneActivation, false);
    TriggerExecute(gt_ObjectiveRoundsFailed, true, false);
    Wait(2.5, c_timeReal);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(1234543775), 1.5);
    Wait(1.5, c_timeGame);
    gf_MiraHanTransmission(StringExternal("Param/Value/5219F4EB"), SoundLink("HanOutroDefeat", -1));
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(1.5, c_timeGame);
    Wait(1.0, c_timeGame);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
    TriggerEnable(gt_RoundExpire, false);
    TriggerEnable(gt_ResourceUpdateAmon, false);
    TriggerEnable(gt_WindowUpdate, false);
    TriggerEnable(gt_MarkerResourcesShow, false);
    TriggerEnable(gt_MarkerRemove, false);
    TriggerEnable(gt_NextAttackWave, false);
    TriggerEnable(gt_RemoveSCVsonBaseDestroyed, false);
    TriggerEnable(gt_SpawnHybridforMainBaseDefence, false);
    TriggerEnable(gt_BonusObjectiveNext, false);
    TriggerEnable(gt_BonusObjectiveRelic, false);
    TriggerEnable(gt_BonusObjectiveDrop, false);
    TriggerEnable(gt_PickupsGenerate, false);
    TriggerEnable(gt_BonusObjectivePickup, false);
    TriggerEnable(gt_JunkerEastSpawn, false);
    TriggerEnable(gt_JunkerWestSpawn, false);
    TriggerEnable(gt_SuperCraneActivation, false);
    TriggerExecute(gt_ObjectiveHarvestComplete, true, false);
    TriggerExecute(gt_ObjectiveRoundsComplete, true, false);
    DialogSetVisible(gv_stateDialog, libCOMI_gf_HumanPlayers(), false);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    Wait(1.5, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveVictory", true, gv_player01User);
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("Victory", true, gv_player01User);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeReal);
    libCOMI_gf_MoveCameraForAllPlayers(PointFromId(1234543775), 1.5);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/52D63292"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(1.0, c_timeGame);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "THorner02MusicOutro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    if ((PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("Raynor", 1)) > 0)) {
        gf_MiraHanTransmission(StringExternal("Param/Value/A93AB4BC"), SoundLink("HanOutroVictoryA", -1));
    }
    else {
        gf_MiraHanTransmission(StringExternal("Param/Value/835F4608"), SoundLink("HanOutroVictory", -1));
    }
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
    TriggerEnable(gt_VictoryPrimaryObjectiveComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove SCVs on Base Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSCVsonBaseDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unit autoEFA97D22_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEFA97D22_val = EventUnit();
    if (autoEFA97D22_val == UnitFromId(2087968346)) {
        AIToggleBulliesInRegion(gv_player03AI, RegionFromId(6), false);
        AIToggleBulliesInRegion(gv_player04AI, RegionFromId(6), false);
    }
    else if (autoEFA97D22_val == UnitFromId(486818571)) {
        AIToggleBulliesInRegion(gv_player03AI, RegionFromId(7), false);
        AIToggleBulliesInRegion(gv_player04AI, RegionFromId(7), false);
    }
    else if (autoEFA97D22_val == UnitFromId(2079055947)) {
        AIToggleBulliesInRegion(gv_player03AI, RegionFromId(5), false);
        AIToggleBulliesInRegion(gv_player04AI, RegionFromId(5), false);
    }
    else if (autoEFA97D22_val == UnitFromId(281990604)) {
        AIToggleBulliesInRegion(gv_player03AI, RegionFromId(13), false);
        AIToggleBulliesInRegion(gv_player04AI, RegionFromId(13), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSCVsonBaseDestroyed_Init () {
    gt_RemoveSCVsonBaseDestroyed = TriggerCreate("gt_RemoveSCVsonBaseDestroyed_Func");
    TriggerEnable(gt_RemoveSCVsonBaseDestroyed, false);
    TriggerAddEventUnitDied(gt_RemoveSCVsonBaseDestroyed, UnitRefFromUnit(UnitFromId(2087968346)));
    TriggerAddEventUnitDied(gt_RemoveSCVsonBaseDestroyed, UnitRefFromUnit(UnitFromId(486818571)));
    TriggerAddEventUnitDied(gt_RemoveSCVsonBaseDestroyed, UnitRefFromUnit(UnitFromId(2079055947)));
    TriggerAddEventUnitDied(gt_RemoveSCVsonBaseDestroyed, UnitRefFromUnit(UnitFromId(281990604)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Hybrid for Main Base Defence
//--------------------------------------------------------------------------------------------------
bool gt_SpawnHybridforMainBaseDefence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupAlliance(gv_player01User, c_unitAllianceAlly, RegionFromId(34), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SendMajorAttackWave(true);
    Wait(210.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnHybridforMainBaseDefence_Init () {
    gt_SpawnHybridforMainBaseDefence = TriggerCreate("gt_SpawnHybridforMainBaseDefence_Func");
    TriggerEnable(gt_SpawnHybridforMainBaseDefence, false);
    TriggerAddEventUnitRegion(gt_SpawnHybridforMainBaseDefence, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Next Attack Wave
//--------------------------------------------------------------------------------------------------
bool gt_NextAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexAttackWaveCurrent;
    int lv_multipleWaveChance;

    // Automatic Variable Declarations
    int auto00B67041_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackWaveCounter += 1;
    lv_indexAttackWaveCurrent = (gv_attackWaveCounter - 1);
    TriggerExecute(gt_EnemyAttackingQ, true, false);
    auto00B67041_val = gv_difficulty;
    if (auto00B67041_val == 1) {
        lv_multipleWaveChance = 20;
    }
    else if (auto00B67041_val == 2) {
        lv_multipleWaveChance = 30;
    }
    else if (auto00B67041_val == 3) {
        lv_multipleWaveChance = 40;
    }
    else {
        lv_multipleWaveChance = 50;
    }
    if ((RandomInt(0, 100) < lv_multipleWaveChance)) {
        gf_SendNextAttackWave(lv_indexAttackWaveCurrent, true);
    }
    else {
        gf_SendNextAttackWave(lv_indexAttackWaveCurrent, false);
    }
    if (((gv_attackWaveCounter == 4) || (gv_attackWaveCounter == 6) || (gv_attackWaveCounter == 8) || (gv_attackWaveCounter == 10))) {
        Wait(12.5, c_timeGame);
        gf_SendDropAttackWave();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NextAttackWave_Init () {
    gt_NextAttackWave = TriggerCreate("gt_NextAttackWave_Func");
    TriggerEnable(gt_NextAttackWave, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Next Major Wave
//--------------------------------------------------------------------------------------------------
bool gt_NextMajorWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 100) <= 50)) {
        gf_SendMajorAttackWave(true);
    }
    else {
        gf_SendMajorAttackWave(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NextMajorWave_Init () {
    gt_NextMajorWave = TriggerCreate("gt_NextMajorWave_Func");
    TriggerEnable(gt_NextMajorWave, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Major Attack Wave Ping
//--------------------------------------------------------------------------------------------------
bool gt_UpdateMajorAttackWavePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackWaveMajorGroup, c_unitCountAlive) > 0)) {
        PingSetPosition(gv_attackWaveMajorPing, UnitGroupCenterOfGroup(gv_attackWaveMajorGroup));
    }
    else {
        PingDestroy(gv_attackWaveMajorPing);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateMajorAttackWavePing_Init () {
    gt_UpdateMajorAttackWavePing = TriggerCreate("gt_UpdateMajorAttackWavePing_Func");
    TriggerEnable(gt_UpdateMajorAttackWavePing, false);
    TriggerAddEventTimePeriodic(gt_UpdateMajorAttackWavePing, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Harvest - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", gv_shipmentRemaining);
    gv_objectiveHarvest = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    ObjectiveSetDescription(gv_objectiveHarvest, StringExternal("Param/Value/EC0CE5F9"));
    TriggerExecute(gt_ObjectiveHarvestUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestCreate_Init () {
    gt_ObjectiveHarvestCreate = TriggerCreate("gt_ObjectiveHarvestCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Harvest - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHarvestCreate, true, false);
    ObjectiveSetState(gv_objectiveHarvest, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestComplete_Init () {
    gt_ObjectiveHarvestComplete = TriggerCreate("gt_ObjectiveHarvestComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Harvest - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveHarvestCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_shipmentRemaining);
    TextExpressionSetToken("Param/Expression/849F7659", "RoundTot", IntToText(gv_shipmentWon));
    ObjectiveSetName(gv_objectiveHarvest, TextExpressionAssemble("Param/Expression/849F7659"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestUpdate_Init () {
    gt_ObjectiveHarvestUpdate = TriggerCreate("gt_ObjectiveHarvestUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Harvest - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveHarvestFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveHarvestCreate, true, false);
    ObjectiveSetState(gv_objectiveHarvest, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveHarvestFailed_Init () {
    gt_ObjectiveHarvestFailed = TriggerCreate("gt_ObjectiveHarvestFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rounds - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRoundsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    gv_objectiveRounds = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 8);
    ObjectiveSetDescription(gv_objectiveRounds, StringExternal("Param/Value/8038318E"));
    TriggerExecute(gt_ObjectiveRoundsUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRoundsCreate_Init () {
    gt_ObjectiveRoundsCreate = TriggerCreate("gt_ObjectiveRoundsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rounds - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRoundsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRoundsCreate, true, false);
    ObjectiveSetState(gv_objectiveRounds, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRoundsComplete_Init () {
    gt_ObjectiveRoundsComplete = TriggerCreate("gt_ObjectiveRoundsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rounds - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRoundsUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveRoundsCreate, true, false);
    TextExpressionSetToken("Param/Expression/F6A42A6B", "losingLimit", IntToText((gv_roundLimitToLose + 1)));
    TextExpressionSetToken("Param/Expression/F6A42A6B", "timerRemaining", IntToText(gv_shipmentLost));
    ObjectiveSetName(gv_objectiveRounds, TextExpressionAssemble("Param/Expression/F6A42A6B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRoundsUpdate_Init () {
    gt_ObjectiveRoundsUpdate = TriggerCreate("gt_ObjectiveRoundsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Rounds - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRoundsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRoundsCreate, true, false);
    ObjectiveSetState(gv_objectiveRounds, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRoundsFailed_Init () {
    gt_ObjectiveRoundsFailed = TriggerCreate("gt_ObjectiveRoundsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Optional - Collect Relics - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOptionalCollectRelicsCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    gv_objectiveOptionalCollectRelics = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 6);
    ObjectiveSetDescription(gv_objectiveOptionalCollectRelics, StringExternal("Param/Value/D739F7AB"));
    TriggerExecute(gt_ObjectiveOptionalCollectRelicsUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOptionalCollectRelicsCreate_Init () {
    gt_ObjectiveOptionalCollectRelicsCreate = TriggerCreate("gt_ObjectiveOptionalCollectRelicsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Optional - Collect Relics - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOptionalCollectRelicsComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveOptionalCollectRelicsCreate, true, false);
    ObjectiveSetState(gv_objectiveOptionalCollectRelics, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOptionalCollectRelicsComplete_Init () {
    gt_ObjectiveOptionalCollectRelicsComplete = TriggerCreate("gt_ObjectiveOptionalCollectRelicsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Optional - Collect Relics - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOptionalCollectRelicsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bonusObjectiveDone;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bonusObjectiveDone = (3 - gv_bonusObjectiveRemaining);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveOptionalCollectRelicsCreate, true, false);
    TextExpressionSetToken("Param/Expression/A364609C", "relicsRemaining", IntToText(lv_bonusObjectiveDone));
    ObjectiveSetName(gv_objectiveOptionalCollectRelics, TextExpressionAssemble("Param/Expression/A364609C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOptionalCollectRelicsUpdate_Init () {
    gt_ObjectiveOptionalCollectRelicsUpdate = TriggerCreate("gt_ObjectiveOptionalCollectRelicsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Optional - Collect Relics - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveOptionalCollectRelicsFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveOptionalCollectRelicsCreate, true, false);
    ObjectiveSetState(gv_objectiveOptionalCollectRelics, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveOptionalCollectRelicsFailed_Init () {
    gt_ObjectiveOptionalCollectRelicsFailed = TriggerCreate("gt_ObjectiveOptionalCollectRelicsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Super Crane Activation
//--------------------------------------------------------------------------------------------------
bool gt_SuperCraneActivation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_maxSuperCraneRegions = 3;
    region lv_superCraneRegion;
    int lv_indexCrane;

    // Automatic Variable Declarations
    const int autoA80A085A_ae = lv_maxSuperCraneRegions;
    const int autoA80A085A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_indexCrane = 0;
    for ( ; ( (autoA80A085A_ai >= 0 && lv_indexCrane <= autoA80A085A_ae) || (autoA80A085A_ai < 0 && lv_indexCrane >= autoA80A085A_ae) ) ; lv_indexCrane += autoA80A085A_ai ) {
        lv_superCraneRegion = RegionFromName(("Super Crane " + IntToString((lv_indexCrane + 1))));
        if ((lv_superCraneRegion != null)) {
            if ((RandomInt(1, 2) == 1)) {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(lv_superCraneRegion, "SuperCrane", c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
            }
            else {
                libNtve_gf_PlayAnimationOnDoodadsInRegion(lv_superCraneRegion, "SuperCrane", c_animNameDefault, "Spell 01", c_animFlagNonLooping, c_animTimeDefault);
            }
        }

        Wait(RandomFixed(2.0, 4.0), c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuperCraneActivation_Init () {
    gt_SuperCraneActivation = TriggerCreate("gt_SuperCraneActivation_Func");
    TriggerEnable(gt_SuperCraneActivation, false);
    TriggerAddEventTimePeriodic(gt_SuperCraneActivation, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker West Spawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWestSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_JunkerWestPitstop1, true);
    libNtve_gf_UnitCreateFacingPoint(1, "PortJunker", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(3)), PointFromId(2126220572));
    gv_junkerWest = UnitLastCreated();
    UnitIssueOrder(gv_junkerWest, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2126220572)), c_orderQueueReplace);
    UnitIssueOrder(gv_junkerWest, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWestSpawn_Init () {
    gt_JunkerWestSpawn = TriggerCreate("gt_JunkerWestSpawn_Func");
    TriggerEnable(gt_JunkerWestSpawn, false);
    TriggerAddEventTimePeriodic(gt_JunkerWestSpawn, 180.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker West Pitstop 1
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWestPitstop1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_JunkerWestPitstop2, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(115167231)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(11))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWestPitstop1_Init () {
    gt_JunkerWestPitstop1 = TriggerCreate("gt_JunkerWestPitstop1_Func");
    TriggerEnable(gt_JunkerWestPitstop1, false);
    TriggerAddEventUnitRegion(gt_JunkerWestPitstop1, UnitRefFromVariable("gv_junkerWest"), RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker West Pitstop 2
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWestPitstop2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_JunkerWestPitstop3, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(19.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1163025134)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWestPitstop2_Init () {
    gt_JunkerWestPitstop2 = TriggerCreate("gt_JunkerWestPitstop2_Func");
    TriggerEnable(gt_JunkerWestPitstop2, false);
    TriggerAddEventUnitRegion(gt_JunkerWestPitstop2, UnitRefFromVariable("gv_junkerWest"), RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker West Pitstop 3
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWestPitstop3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_JunkerWestDespawn, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(4))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWestPitstop3_Init () {
    gt_JunkerWestPitstop3 = TriggerCreate("gt_JunkerWestPitstop3_Func");
    TriggerEnable(gt_JunkerWestPitstop3, false);
    TriggerAddEventUnitRegion(gt_JunkerWestPitstop3, UnitRefFromVariable("gv_junkerWest"), RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker West Despawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerWestDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerWestDespawn_Init () {
    gt_JunkerWestDespawn = TriggerCreate("gt_JunkerWestDespawn_Func");
    TriggerEnable(gt_JunkerWestDespawn, false);
    TriggerAddEventUnitRegion(gt_JunkerWestDespawn, UnitRefFromVariable("gv_junkerWest"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker East Spawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerEastSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_JunkerEastPitstop1, true);
    libNtve_gf_UnitCreateFacingPoint(1, "PortJunker", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(21)), PointFromId(1152980149));
    gv_junkerEast = UnitLastCreated();
    UnitIssueOrder(gv_junkerEast, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1152980149)), c_orderQueueReplace);
    UnitIssueOrder(gv_junkerEast, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(22))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerEastSpawn_Init () {
    gt_JunkerEastSpawn = TriggerCreate("gt_JunkerEastSpawn_Func");
    TriggerEnable(gt_JunkerEastSpawn, false);
    TriggerAddEventTimePeriodic(gt_JunkerEastSpawn, 240.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker East Pitstop 1
//--------------------------------------------------------------------------------------------------
bool gt_JunkerEastPitstop1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_JunkerEastPitstop2, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(105149480)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(23))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerEastPitstop1_Init () {
    gt_JunkerEastPitstop1 = TriggerCreate("gt_JunkerEastPitstop1_Func");
    TriggerEnable(gt_JunkerEastPitstop1, false);
    TriggerAddEventUnitRegion(gt_JunkerEastPitstop1, UnitRefFromVariable("gv_junkerEast"), RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker East Pitstop 2
//--------------------------------------------------------------------------------------------------
bool gt_JunkerEastPitstop2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_JunkerEastPitstop3, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(19.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(637726726)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerEastPitstop2_Init () {
    gt_JunkerEastPitstop2 = TriggerCreate("gt_JunkerEastPitstop2_Func");
    TriggerEnable(gt_JunkerEastPitstop2, false);
    TriggerAddEventUnitRegion(gt_JunkerEastPitstop2, UnitRefFromVariable("gv_junkerEast"), RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker East Pitstop 3
//--------------------------------------------------------------------------------------------------
bool gt_JunkerEastPitstop3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_JunkerEastDespawn, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
    Wait(13.3, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Work End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(1.2, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(25))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerEastPitstop3_Init () {
    gt_JunkerEastPitstop3 = TriggerCreate("gt_JunkerEastPitstop3_Func");
    TriggerEnable(gt_JunkerEastPitstop3, false);
    TriggerAddEventUnitRegion(gt_JunkerEastPitstop3, UnitRefFromVariable("gv_junkerEast"), RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junker East Despawn
//--------------------------------------------------------------------------------------------------
bool gt_JunkerEastDespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JunkerEastDespawn_Init () {
    gt_JunkerEastDespawn = TriggerCreate("gt_JunkerEastDespawn_Func");
    TriggerEnable(gt_JunkerEastDespawn, false);
    TriggerAddEventUnitRegion(gt_JunkerEastDespawn, UnitRefFromVariable("gv_junkerEast"), RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init03LoadingComplete_Init();
    gt_Init05Units_Init();
    gt_Init07Environment_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
    gt_PickupsGenerate_Init();
    gt_PickupsCollect_Init();
    gt_FlashAddResourcesDialogItems_Init();
    gt_ResetShipmentsResources_Init();
    gt_EventDispatcher_Init();
    gt_RoundExpire_Init();
    gt_ResourceUpdateAmon_Init();
    gt_ResourceUpdatePlayers_Init();
    gt_WindowUpdate_Init();
    gt_MULEsNext_Init();
    gt_MarkerResourcesShow_Init();
    gt_MarkerRevealerShow_Init();
    gt_MarkerEnemyBasesShow_Init();
    gt_MarkerRemove_Init();
    gt_EnemyBuildingsRevealer_Init();
    gt_BonusObjectiveNext_Init();
    gt_BonusObjectiveDrop_Init();
    gt_BonusObjectiveRelic_Init();
    gt_BonusObjectivePickup_Init();
    gt_EnemyAttackingQ_Init();
    gt_RoundLostQ_Init();
    gt_RoundDrawQ_Init();
    gt_RoundWonQ_Init();
    gt_RoundEndingQ_Init();
    gt_NewRoundQ_Init();
    gt_EnemyDropPodsQ_Init();
    gt_MajorWaveHybridsQ_Init();
    gt_MajorWaveMercenariesQ_Init();
    gt_RelicMarkerQ_Init();
    gt_RelicCompleteQ_Init();
    gt_MULEsSpawnQ_Init();
    gt_MiraHanTalkingPortrait_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_RemoveSCVsonBaseDestroyed_Init();
    gt_SpawnHybridforMainBaseDefence_Init();
    gt_NextAttackWave_Init();
    gt_NextMajorWave_Init();
    gt_UpdateMajorAttackWavePing_Init();
    gt_ObjectiveHarvestCreate_Init();
    gt_ObjectiveHarvestComplete_Init();
    gt_ObjectiveHarvestUpdate_Init();
    gt_ObjectiveHarvestFailed_Init();
    gt_ObjectiveRoundsCreate_Init();
    gt_ObjectiveRoundsComplete_Init();
    gt_ObjectiveRoundsUpdate_Init();
    gt_ObjectiveRoundsFailed_Init();
    gt_ObjectiveOptionalCollectRelicsCreate_Init();
    gt_ObjectiveOptionalCollectRelicsComplete_Init();
    gt_ObjectiveOptionalCollectRelicsUpdate_Init();
    gt_ObjectiveOptionalCollectRelicsFailed_Init();
    gt_SuperCraneActivation_Init();
    gt_JunkerWestSpawn_Init();
    gt_JunkerWestPitstop1_Init();
    gt_JunkerWestPitstop2_Init();
    gt_JunkerWestPitstop3_Init();
    gt_JunkerWestDespawn_Init();
    gt_JunkerEastSpawn_Init();
    gt_JunkerEastPitstop1_Init();
    gt_JunkerEastPitstop2_Init();
    gt_JunkerEastPitstop3_Init();
    gt_JunkerEastDespawn_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
