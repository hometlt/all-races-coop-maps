//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Ulnar locks
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_Player01Enemy = 6;
const int gv_pLAYER_04_Player02Enemy = 7;
const fixed gv_tickInterval = 1.0;
const int gv_celestialLocksRequired = 5;
const int gv_lockProgressMIN = 0;
const int gv_lockProgressMAX = 480;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORD_CelestialLock {
    unit lv_celestialLock;
    int lv_state;
    bool lv_transitionInProgress;
    region lv_captureRegion;
    region lv_firstCaptureRegion;
    region lv_celestialLockRegion;
    region lv_defenseRegion;
    region lv_revealRegion;
    revealer lv_revealer;
    int lv_objectivePing;
    unit lv_progressBarDummyUnit;
    timer lv_bullyMicroCooldown;
    trigger lv_contestedTranmissionTrigger;
    int lv_contestedTranmission;
    bool lv_previouslyOverloaded;
    unitgroup lv_callForHelpRespondents;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ExcludedUnitTypeController_None = 0;
const int ge_ExcludedUnitTypeController_Both = 1;
const int ge_ExcludedUnitTypeController_Players = 2;
const int ge_ExcludedUnitTypeController_EnemyAI = 3;
const int ge_PRESET_CelestialLockState_Inactive = 0;
const int ge_PRESET_CelestialLockState_PlayerControlled = 1;
const int ge_PRESET_CelestialLockState_EnemyControlled = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
string gv_mapMusicTrack;
playergroup gv_playerGroup;
playergroup gv_enemyPlayerGroup;
unitfilter gv_captureFilterEnemy;
unitfilter gv_captureFilterEnemyAllowCloak;
unitfilter gv_captureFilterAlly;
int gv_leaderboardTimeScore;
int gv_leaderboardBonusScoreFinal;
int gv_leaderboardLockScore;
int gv_excludedUnitCount;
timer gv_tickTimer;
int gv_tickTimerWindow;
fixed gv_maxTicks;
fixed gv_currentTicks;
fixed gv_tickPerSecond;
fixed[6] gv_tickValue;
gs_RECORD_CelestialLock[6] gv_celestialLocks;
int gv_celestialLocksActivated;
int gv_celestialLocksOverloaded;
unit gv_lastActivatedLock;
bool gv_firstOverloadedLock;
bool gv_firstEnemyContestLock;
bool gv_firstPlayerActivation;
fixed gv_effortValueCurrent;
timer gv_lockTransmissionCooldownTimer;
unit gv_firstConstruct;
unit gv_bonusObjectiveUnit;
int gv_bonusObjectivePing;
timer gv_titanicWarpPrismAchievementTimer;
int gv_locksRecapturedByEnemy;
int gv_firstLockIndex;
bool gv_firstLockRecaptured;
region[8] gv_attackTargetList_PARAM;
int gv_attackTargetCount_PARAM;
int[8] gv_attackUnitNumbers_PARAM;
string[8] gv_attackUnitTypes_PARAM;
int gv_attackUnitsCount_PARAM;
wave gv_attackWave_PARAM;
unitgroup gv_attackWaveUnits_PARAM;
wave[8] gv_recentlySentAttackWaves;
int gv_recentlySentAttackWaveCounter;
bool gv_lockWarningIssued;
bool gv_baseWarningIssued;
int gv_objectiveDestroyZergBase;
int gv_objectiveDestroyZergBase3;
int gv_objectiveRescueStalkers2;

void InitGlobals () {
    int init_i;

    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_playerGroup = PlayerGroupEmpty();
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_captureFilterEnemy = UnitFilter(0, 0, 0, 0);
    gv_captureFilterEnemyAllowCloak = UnitFilter(0, 0, 0, 0);
    gv_captureFilterAlly = UnitFilter(0, 0, 0, 0);
    gv_tickTimer = TimerCreate();
    gv_tickTimerWindow = c_timerWindowNone;
    gv_maxTicks = 9000.0;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_celestialLocks[init_i].lv_state = ge_PRESET_CelestialLockState_Inactive;
        gv_celestialLocks[init_i].lv_captureRegion = RegionFromId(3);
        gv_celestialLocks[init_i].lv_firstCaptureRegion = RegionFromId(40);
        gv_celestialLocks[init_i].lv_celestialLockRegion = RegionFromId(16);
        gv_celestialLocks[init_i].lv_objectivePing = c_invalidPingId;
        gv_celestialLocks[init_i].lv_bullyMicroCooldown = TimerCreate();
        gv_celestialLocks[init_i].lv_contestedTranmission = c_invalidConversationId;
        gv_celestialLocks[init_i].lv_callForHelpRespondents = UnitGroupEmpty();
    }
    gv_firstOverloadedLock = true;
    gv_firstEnemyContestLock = true;
    gv_firstPlayerActivation = true;
    gv_lockTransmissionCooldownTimer = TimerCreate();
    gv_bonusObjectiveUnit = UnitFromId(1934);
    gv_bonusObjectivePing = c_invalidPingId;
    gv_titanicWarpPrismAchievementTimer = TimerCreate();
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_attackTargetList_PARAM[init_i] = RegionFromId(28);
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_attackUnitNumbers_PARAM[init_i] = 1;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_attackUnitTypes_PARAM[init_i] = "Zealot";
    }
    gv_attackWaveUnits_PARAM = UnitGroupEmpty();
    gv_recentlySentAttackWaveCounter = 1;
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ExcludeUnitTypefromLockCapture (string lp_excludedType, int lp_exclusionOwner);
void gf_ActivateDeactivateCelestialLock (bool lp_activateDeactivate, int lp_index);
void gf_SetCelestialLockState (int lp_index, int lp_state);
void gf_SendBulliesHome (int lp_index);
bool gf_CapturingUnitsPresentOnLock (int lp_player, int lp_lockIndex);
unitgroup gf_CapturingUnitsOnLock (int lp_player, int lp_lockIndex);
void gf_SetEffortValueforLocksCaptured ();
void gf_SendBulliestoDefendLock (int lp_lockIndex);
void gf_LockAllyNeededTransmissionQ (int lp_lockIndex, int lp_primaryPlayer);
void gf_ActivateXelNagaConstructAI (unit lp_construct);
bool gf_AttackRegionisValid (region lp_region);
void gf_AddLockAttackTarget (region lp_region);
void gf_AddLockAttackWaveUnits (int lp_count, string lp_unitType);
void gf_SendLockAttackWave (int lp_player, int lp_duration);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init03LoadingComplete;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_Init09AI;
trigger gt_StartGameQ;
trigger gt_TickCounter;
trigger gt_CelestialLockInit;
trigger gt_CelestialLockController;
trigger gt_FirstCaptureQ;
trigger gt_InitialEnemyCaptures;
trigger gt_OverloadBarInitilization;
trigger gt_TicketWarningController;
trigger gt_TicketWarning50TransmissionQ;
trigger gt_TicketWarning25TransmissionQ;
trigger gt_TicketWarning05TransmissionQ;
trigger gt_GlobalLockContestedTransmissionQ;
trigger gt_MainObjectiveTransmissionQ;
trigger gt_LockAllyNeededTransmissionOldFartsQ;
trigger gt_CelestialLockDeactivatedQ;
trigger gt_CelestialLockCapturedQ;
trigger gt_BonusObjectiveQ;
trigger gt_BonusObjectiveWaitTrigger;
trigger gt_BonusObjectiveProximityTrigger;
trigger gt_SetUpBonusObjectiveEscorts;
trigger gt_BonusObjectiveDies;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryActivateLocksCompleted;
trigger gt_AttackWaves;
trigger gt_RecentlySentWaves;
trigger gt_ObjectiveActivateLocksCreate;
trigger gt_ObjectiveActivateLocksComplete;
trigger gt_ObjectiveActivateLocksUpdate;
trigger gt_ObjectiveActivateLocksFailed;
trigger gt_ObjectivePreventOverloadCreate;
trigger gt_ObjectivePreventOverloadComplete;
trigger gt_ObjectivePreventOverloadUpdate;
trigger gt_ObjectivePreventOverloadFailed;
trigger gt_ObjectiveDestroyXelNagaConstructCreate;
trigger gt_ObjectiveDestroyXelNagaConstructComplete;
trigger gt_ObjectiveDestroyXelNagaConstructFailed;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ExcludeUnitTypefromLockCapture (string lp_excludedType, int lp_exclusionOwner) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_exclusionOwner == ge_ExcludedUnitTypeController_None)) {
        return ;
    }

    gv_excludedUnitCount += 1;
    DataTableSetString(true, ("ExcludedUnit_" + IntToString(gv_excludedUnitCount)), (lp_excludedType));
    if (((DataTableGetInt(true, (lp_excludedType)) == ge_ExcludedUnitTypeController_None) || (lp_exclusionOwner == ge_ExcludedUnitTypeController_Both))) {
        DataTableSetInt(true, (lp_excludedType), (lp_exclusionOwner));
    }
    else {
        if ((DataTableGetInt(true, (lp_excludedType)) != lp_exclusionOwner)) {
            DataTableSetInt(true, (lp_excludedType), (ge_ExcludedUnitTypeController_Both));
        }

    }
}

trigger auto_gf_ActivateDeactivateCelestialLock_Trigger = null;
bool auto_gf_ActivateDeactivateCelestialLock_lp_activateDeactivate;
int auto_gf_ActivateDeactivateCelestialLock_lp_index;

void gf_ActivateDeactivateCelestialLock (bool lp_activateDeactivate, int lp_index) {
    auto_gf_ActivateDeactivateCelestialLock_lp_activateDeactivate = lp_activateDeactivate;
    auto_gf_ActivateDeactivateCelestialLock_lp_index = lp_index;

    if (auto_gf_ActivateDeactivateCelestialLock_Trigger == null) {
        auto_gf_ActivateDeactivateCelestialLock_Trigger = TriggerCreate("auto_gf_ActivateDeactivateCelestialLock_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateDeactivateCelestialLock_Trigger, false, false);
}

bool auto_gf_ActivateDeactivateCelestialLock_TriggerFunc (bool testConds, bool runActions) {
    bool lp_activateDeactivate = auto_gf_ActivateDeactivateCelestialLock_lp_activateDeactivate;
    int lp_index = auto_gf_ActivateDeactivateCelestialLock_lp_index;

    // Variable Declarations
    int lv_warningPing;
    bool lv_enemyUnitsPresent;
    bool lv_anyFriendlyUnitsPresent;
    bool lv_bothFriendlyUnitsPresent;
    int lv_progress;
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    playergroup auto9F464E01_g;
    int auto9F464E01_var;
    playergroup auto07B4B875_g;
    int auto07B4B875_var;

    // Variable Initialization
    lv_warningPing = c_invalidPingId;
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    if (((libCOMI_gf_GameIsOver() == true) || (gv_celestialLocks[lp_index].lv_transitionInProgress == true))) {
        return true;
    }

    gv_celestialLocks[lp_index].lv_transitionInProgress = true;
    if ((lp_activateDeactivate == true)) {
        libCOMI_gf_SetUnitProgresBarTitle(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, StringExternal("Param/Value/5DD54AFA"));
    }
    else {
        libCOMI_gf_SetUnitProgresBarTitle(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, StringExternal("Param/Value/EE862F48"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", UnitGetPosition(gv_celestialLocks[lp_index].lv_celestialLock), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        lv_warningPing = PingLastCreated();
        TriggerExecute(gt_GlobalLockContestedTransmissionQ, true, false);
    }
    libCOMI_gf_SetUnitProgressBarProgress(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, gv_lockProgressMIN);
    libCOMI_gf_ShowHideUnitProgressBar(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, true);
    libCOMI_gf_SetUnitProgressBarProgress2(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, -99999);
    libCOMI_gf_ShowHideUnitProgressBar2(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, false);
    while (true) {
        if ((libCOMI_gf_GameIsOver() == true)) {
            libCOMI_gf_ShowHideUnitProgressBar(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, false);
            PingDestroy(lv_warningPing);
            TransmissionClear(gv_celestialLocks[lp_index].lv_contestedTranmission);
            gv_celestialLocks[lp_index].lv_transitionInProgress = false;
            return true;
        }

        lv_anyFriendlyUnitsPresent = false;
        lv_bothFriendlyUnitsPresent = true;
        lv_enemyUnitsPresent = false;
        auto9F464E01_g = libCOMI_gf_GetAlliedCommandersPlayers();
        auto9F464E01_var = -1;
        while (true) {
            auto9F464E01_var = PlayerGroupNextPlayer(auto9F464E01_g, auto9F464E01_var);
            if (auto9F464E01_var < 0) { break; }
            if ((gf_CapturingUnitsPresentOnLock(auto9F464E01_var, lp_index) == true)) {
                lv_anyFriendlyUnitsPresent = true;
            }
            else {
                lv_bothFriendlyUnitsPresent = false;
            }
        }
        auto07B4B875_g = libCOMI_gf_GetEnemyPlayers();
        auto07B4B875_var = -1;
        while (true) {
            auto07B4B875_var = PlayerGroupNextPlayer(auto07B4B875_g, auto07B4B875_var);
            if (auto07B4B875_var < 0) { break; }
            if ((gf_CapturingUnitsPresentOnLock(auto07B4B875_var, lp_index) == true)) {
                lv_enemyUnitsPresent = true;
            }

        }
        if ((((lp_activateDeactivate == true) && (lv_bothFriendlyUnitsPresent == true) && (lv_enemyUnitsPresent == false)) || ((lp_activateDeactivate == false) && (lv_anyFriendlyUnitsPresent == false) && (lv_enemyUnitsPresent == true)))) {
            lv_progress += 1;
            if ((lp_activateDeactivate == true)) {
                libCOMI_gf_SetUnitProgresBarTitle(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, StringExternal("Param/Value/41DB985A"));
            }
            else {
                libCOMI_gf_SetUnitProgresBarTitle(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, StringExternal("Param/Value/9D7B28D7"));
            }
            if ((lv_progress == (gv_lockProgressMAX + 1))) {
                if ((lp_activateDeactivate == true)) {
                    gf_SetCelestialLockState(lp_index, ge_PRESET_CelestialLockState_PlayerControlled);
                    gf_SetEffortValueforLocksCaptured();
                }
                else {
                    gf_SetCelestialLockState(lp_index, ge_PRESET_CelestialLockState_EnemyControlled);
                    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == false) && (libCOMI_gf_GameIsOver() == true)) {
                        gv_locksRecapturedByEnemy += 1;
                    }

                }
                gv_celestialLocks[lp_index].lv_transitionInProgress = false;
                libCOMI_gf_ShowHideUnitProgressBar(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, false);
                PingDestroy(lv_warningPing);
                TransmissionClear(gv_celestialLocks[lp_index].lv_contestedTranmission);
                return true;
            }
            else {
                libCOMI_gf_SetUnitProgressBarProgress(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, lv_progress);
                libCOMI_gf_SetUnitProgressBarProgress2(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, FixedToInt(((gv_lockProgressMAX - lv_progress) * 0.0625)));
                libCOMI_gf_ShowHideUnitProgressBar2(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, false);
            }
        }
        else {
            if ((((lv_anyFriendlyUnitsPresent == false) && (lv_enemyUnitsPresent == false)) || ((lp_activateDeactivate == false) && (lv_anyFriendlyUnitsPresent == true) && (lv_enemyUnitsPresent == false)) || ((lp_activateDeactivate == true) && (lv_anyFriendlyUnitsPresent == false) && (lv_enemyUnitsPresent == true)))) {
                libCOMI_gf_ShowHideUnitProgressBar(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, false);
                gv_celestialLocks[lp_index].lv_transitionInProgress = false;
                PingDestroy(lv_warningPing);
                TransmissionClear(gv_celestialLocks[lp_index].lv_contestedTranmission);
                return true;
            }
            else {
                if (((lv_anyFriendlyUnitsPresent == true) && (lv_bothFriendlyUnitsPresent == false) && (lv_enemyUnitsPresent == false))) {
                    libCOMI_gf_SetUnitProgresBarTitle(gv_celestialLocks[lp_index].lv_progressBarDummyUnit, StringExternal("Param/Value/9931FCA5"));
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void gf_SetCelestialLockState (int lp_index, int lp_state) {
    // Variable Declarations
    int lv_i;
    int lv_locksActivated_LOCAL;
    int lv_locksOverloaded_LOCAL;

    // Automatic Variable Declarations
    int auto0A4BDBC1_val;
    const int auto0836C870_ae = 5;
    const int auto0836C870_ai = 1;
    int auto78498760_val;

    // Variable Initialization

    // Implementation
    auto0A4BDBC1_val = lp_state;
    if (auto0A4BDBC1_val == ge_PRESET_CelestialLockState_Inactive) {
        gv_celestialLocks[lp_index].lv_state = ge_PRESET_CelestialLockState_Inactive;
        libCOMI_gf_SetUnitInfoTextCampaign(gv_celestialLocks[lp_index].lv_celestialLock, null, StringExternal("Param/Value/5C98621B"), StringExternal("Param/Value/48D45698"));
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_celestialLocks[lp_index].lv_celestialLock), c_animNameDefault);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_celestialLocks[lp_index].lv_celestialLock), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
        PingSetTooltip(gv_celestialLocks[lp_index].lv_objectivePing, StringExternal("Param/Value/462975A2"));
        PingSetColor(gv_celestialLocks[lp_index].lv_objectivePing, Color(100.00, 100.00, 100.00));
        VisRevealerEnable(gv_celestialLocks[lp_index].lv_revealer, false);
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[lp_index].lv_defenseRegion, false);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[lp_index].lv_defenseRegion, false);
    }
    else if (auto0A4BDBC1_val == ge_PRESET_CelestialLockState_PlayerControlled) {
        if ((gv_firstLockIndex == 0) && (GameGetMissionTime() <= 360.0)) {
            gv_firstLockIndex = lp_index;
        }

        gv_celestialLocks[lp_index].lv_state = ge_PRESET_CelestialLockState_PlayerControlled;
        gv_lastActivatedLock = gv_celestialLocks[lp_index].lv_celestialLock;
        UnitSetInfoSubTip(gv_celestialLocks[lp_index].lv_celestialLock, StringExternal("Param/Value/FB3483AF"));
        libCOMI_gf_SetUnitInfoTextCampaign(gv_celestialLocks[lp_index].lv_celestialLock, null, StringExternal("Param/Value/2651F194"), StringExternal("Param/Value/69A2D34D"));
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[lp_index].lv_defenseRegion, false);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[lp_index].lv_defenseRegion, false);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_celestialLocks[lp_index].lv_celestialLock), c_animNameDefault);
        ActorSend(libNtve_gf_MainActorofUnit(gv_celestialLocks[lp_index].lv_celestialLock), "Signal StateGood");
        PingDestroy(gv_celestialLocks[lp_index].lv_objectivePing);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_celestialLocks[lp_index].lv_progressBarDummyUnit), StringExternal("Param/Value/EE287664"));
        gv_celestialLocks[lp_index].lv_objectivePing = PingLastCreated();
        PingSetTooltip(gv_celestialLocks[lp_index].lv_objectivePing, StringExternal("Param/Value/15D062CD"));
        PingSetColor(gv_celestialLocks[lp_index].lv_objectivePing, Color(0.00, 100.00, 0.00));
        VisRevealerEnable(gv_celestialLocks[lp_index].lv_revealer, true);
        gf_SendBulliesHome(lp_index);
    }
    else if (auto0A4BDBC1_val == ge_PRESET_CelestialLockState_EnemyControlled) {
        if ((gv_firstLockIndex == lp_index) && (gv_firstLockRecaptured == false)) {
            gv_firstLockRecaptured = true;
        }

        TriggerExecute(gt_OverloadBarInitilization, true, false);
        gv_celestialLocks[lp_index].lv_state = ge_PRESET_CelestialLockState_EnemyControlled;
        gv_celestialLocks[lp_index].lv_previouslyOverloaded = true;
        libCOMI_gf_SetUnitInfoTextCampaign(gv_celestialLocks[lp_index].lv_celestialLock, null, StringExternal("Param/Value/204CD87A"), StringExternal("Param/Value/C98C2B75"));
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[lp_index].lv_revealRegion, true);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[lp_index].lv_revealRegion, true);
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_celestialLocks[lp_index].lv_celestialLock), c_animNameDefault);
        ActorSend(libNtve_gf_MainActorofUnit(gv_celestialLocks[lp_index].lv_celestialLock), "Signal StateBad");
        PingDestroy(gv_celestialLocks[lp_index].lv_objectivePing);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_celestialLocks[lp_index].lv_progressBarDummyUnit), StringExternal("Param/Value/A15289B4"));
        gv_celestialLocks[lp_index].lv_objectivePing = PingLastCreated();
        PingSetTooltip(gv_celestialLocks[lp_index].lv_objectivePing, StringExternal("Param/Value/C60D7505"));
        PingSetColor(gv_celestialLocks[lp_index].lv_objectivePing, Color(100.00, 0.00, 0.00));
        VisRevealerEnable(gv_celestialLocks[lp_index].lv_revealer, false);
    }
    else {
    }
    lv_i = 1;
    for ( ; ( (auto0836C870_ai >= 0 && lv_i <= auto0836C870_ae) || (auto0836C870_ai < 0 && lv_i >= auto0836C870_ae) ) ; lv_i += auto0836C870_ai ) {
        if ((gv_celestialLocks[lv_i].lv_state == ge_PRESET_CelestialLockState_PlayerControlled)) {
            lv_locksActivated_LOCAL += 1;
        }
        else {
            if ((gv_celestialLocks[lv_i].lv_state == ge_PRESET_CelestialLockState_EnemyControlled)) {
                lv_locksOverloaded_LOCAL += 1;
            }

        }
    }
    if ((lv_locksActivated_LOCAL != gv_celestialLocksActivated)) {
        gv_celestialLocksActivated = lv_locksActivated_LOCAL;
        TriggerExecute(gt_ObjectiveActivateLocksUpdate, true, false);
    }

    if ((lv_locksOverloaded_LOCAL != gv_celestialLocksOverloaded)) {
        gv_celestialLocksOverloaded = lv_locksOverloaded_LOCAL;
        TriggerExecute(gt_ObjectiveActivateLocksUpdate, true, false);
    }

    auto78498760_val = lp_state;
    if (auto78498760_val == ge_PRESET_CelestialLockState_PlayerControlled) {
        TriggerExecute(gt_CelestialLockCapturedQ, true, false);
    }
    else if (auto78498760_val == ge_PRESET_CelestialLockState_EnemyControlled) {
        TriggerExecute(gt_CelestialLockDeactivatedQ, true, false);
    }
    else {
    }
    if ((gv_celestialLocksActivated == gv_celestialLocksRequired)) {
        TriggerExecute(gt_VictoryActivateLocksCompleted, true, false);
    }

}

void gf_SendBulliesHome (int lp_index) {
    // Variable Declarations
    unitgroup lv_enemyUnits;

    // Automatic Variable Declarations
    playergroup autoEFF4E43D_g;
    int autoEFF4E43D_var;
    unitgroup auto9B3A7B5C_g;
    int auto9B3A7B5C_u;
    unit auto9B3A7B5C_var;

    // Variable Initialization
    lv_enemyUnits = UnitGroupEmpty();

    // Implementation
    autoEFF4E43D_g = gv_enemyPlayerGroup;
    autoEFF4E43D_var = -1;
    while (true) {
        autoEFF4E43D_var = PlayerGroupNextPlayer(autoEFF4E43D_g, autoEFF4E43D_var);
        if (autoEFF4E43D_var < 0) { break; }
        UnitGroupAddUnitGroup(lv_enemyUnits, UnitGroup(null, autoEFF4E43D_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    }
    auto9B3A7B5C_g = lv_enemyUnits;
    auto9B3A7B5C_u = UnitGroupCount(auto9B3A7B5C_g, c_unitCountAll);
    for (;; auto9B3A7B5C_u -= 1) {
        auto9B3A7B5C_var = UnitGroupUnitFromEnd(auto9B3A7B5C_g, auto9B3A7B5C_u);
        if (auto9B3A7B5C_var == null) { break; }
        if ((AIUnitGetWave(auto9B3A7B5C_var) == null) && (RegionContainsPoint(gv_celestialLocks[lp_index].lv_defenseRegion, UnitGetGoalPosition(auto9B3A7B5C_var)) == true)) {
            AIRemoveUnitFromAnyWavesAndSetHome(auto9B3A7B5C_var, PlayerStartLocation(UnitGetOwner(auto9B3A7B5C_var)));
            UnitIssueOrder(auto9B3A7B5C_var, OrderTargetingPoint(null, PlayerStartLocation(UnitGetOwner(auto9B3A7B5C_var))), c_orderQueueReplace);
            AISetUnitScriptControlled(auto9B3A7B5C_var, false);
            UnitSetAIOption(auto9B3A7B5C_var, c_unitAIOptionUsable, true);
        }

    }
}

bool gf_CapturingUnitsPresentOnLock (int lp_player, int lp_lockIndex) {
    // Variable Declarations
    unitgroup lv_capturingUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_capturingUnits = UnitGroupEmpty();

    // Implementation
    lv_capturingUnits = gf_CapturingUnitsOnLock(lp_player, lp_lockIndex);
    return (UnitGroupCount(lv_capturingUnits, c_unitCountAlive) > 0);
}

unitgroup gf_CapturingUnitsOnLock (int lp_player, int lp_lockIndex) {
    // Variable Declarations
    unitgroup lv_capturingUnits;
    string lv_indexUnitType;
    int lv_excludingFaction;

    // Automatic Variable Declarations
    int auto41C8BAF3_ai;

    // Variable Initialization
    lv_capturingUnits = UnitGroupEmpty();

    // Implementation
    if (((lp_player == gv_pLAYER_01_USER) || (lp_player == gv_pLAYER_02_USER))) {
        lv_capturingUnits = UnitGroup(null, lp_player, gv_celestialLocks[lp_lockIndex].lv_captureRegion, gv_captureFilterAlly, 0);
        lv_excludingFaction = ge_ExcludedUnitTypeController_Players;
    }
    else {
        if ((libCOMI_gf_MutatorIsEnabled("AllEnemiesCloaked") == true)) {
            lv_capturingUnits = UnitGroup(null, lp_player, gv_celestialLocks[lp_lockIndex].lv_captureRegion, gv_captureFilterEnemyAllowCloak, 0);
        }
        else {
            lv_capturingUnits = UnitGroup(null, lp_player, gv_celestialLocks[lp_lockIndex].lv_captureRegion, gv_captureFilterEnemy, 0);
        }
        lv_excludingFaction = ge_ExcludedUnitTypeController_EnemyAI;
    }
    auto41C8BAF3_ai = 1;
    while (auto41C8BAF3_ai <= gv_excludedUnitCount) {    
        lv_indexUnitType = DataTableGetString(true, ("ExcludedUnit_" + IntToString(auto41C8BAF3_ai)));
        auto41C8BAF3_ai = auto41C8BAF3_ai + 1;
        if( lv_indexUnitType == null ) {
            break;
        }
        if (((DataTableGetInt(true, (lv_indexUnitType)) == (lv_excludingFaction)) || (DataTableGetInt(true, (lv_indexUnitType)) == ge_ExcludedUnitTypeController_Both))) {
            UnitGroupRemoveUnitGroup(lv_capturingUnits, UnitGroupFilter(lv_indexUnitType, c_playerAny, lv_capturingUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }

    }
    return lv_capturingUnits;
}

void gf_SetEffortValueforLocksCaptured () {
    // Variable Declarations
    fixed lv_newEffortValue;

    // Automatic Variable Declarations
    int autoADEC6BA0_val;

    // Variable Initialization

    // Implementation
    autoADEC6BA0_val = gv_celestialLocksActivated;
    if (autoADEC6BA0_val == 2) {
        lv_newEffortValue = 25.0;
    }
    else if (autoADEC6BA0_val == 3) {
        lv_newEffortValue = 50.0;
    }
    else if (autoADEC6BA0_val == 4) {
        lv_newEffortValue = 100.0;
    }
    else {
    }
    if ((lv_newEffortValue > gv_effortValueCurrent)) {
        gv_effortValueCurrent = lv_newEffortValue;
        libCOMI_gf_SetMissionEffort(lv_newEffortValue);
    }

}

trigger auto_gf_SendBulliestoDefendLock_Trigger = null;
int auto_gf_SendBulliestoDefendLock_lp_lockIndex;

void gf_SendBulliestoDefendLock (int lp_lockIndex) {
    auto_gf_SendBulliestoDefendLock_lp_lockIndex = lp_lockIndex;

    if (auto_gf_SendBulliestoDefendLock_Trigger == null) {
        auto_gf_SendBulliestoDefendLock_Trigger = TriggerCreate("auto_gf_SendBulliestoDefendLock_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendBulliestoDefendLock_Trigger, false, false);
}

bool auto_gf_SendBulliestoDefendLock_TriggerFunc (bool testConds, bool runActions) {
    int lp_lockIndex = auto_gf_SendBulliestoDefendLock_lp_lockIndex;

    // Variable Declarations
    int lv_bullyToSendCount;
    unit lv_defensiveBully;
    unitgroup lv_defensiveBullies;

    // Automatic Variable Declarations
    int autoCA700D13_n;
    int autoCA700D13_i;
    unitgroup autoA090941C_g;
    int autoA090941C_u;

    // Variable Initialization
    lv_defensiveBullies = UnitGroupEmpty();

    // Implementation
    if ((UnitGroupCount(gv_celestialLocks[lp_lockIndex].lv_callForHelpRespondents, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_bullyToSendCount = FixedToInt((UnitGroupCount(gv_celestialLocks[lp_lockIndex].lv_callForHelpRespondents, c_unitCountAlive) * 0.33));
    autoCA700D13_n = lv_bullyToSendCount;
    for (autoCA700D13_i = 1; autoCA700D13_i <= autoCA700D13_n; autoCA700D13_i += 1) {
        if ((UnitGroupCount(gv_celestialLocks[lp_lockIndex].lv_callForHelpRespondents, c_unitCountAlive) == 0)) {
            break;
        }

        lv_defensiveBully = UnitGroupRandomUnit(gv_celestialLocks[lp_lockIndex].lv_callForHelpRespondents, c_unitCountAlive);
        UnitGroupAdd(lv_defensiveBullies, lv_defensiveBully);
        if ((UnitGetType(lv_defensiveBully) == "SiegeTankSieged")) {
            libNtve_gf_AICast(lv_defensiveBully, Order(AbilityCommand("Unsiege", 0)));
        }
        else {
            libNtve_gf_AICast(lv_defensiveBully, Order(AbilityCommand("MorphToSwarmHostMP", 0)));
        }
        libNtve_gf_SleepUnit(lv_defensiveBully, false);
    }
    Wait(0.5, c_timeAI);
    autoA090941C_g = lv_defensiveBullies;
    autoA090941C_u = UnitGroupCount(autoA090941C_g, c_unitCountAll);
    for (;; autoA090941C_u -= 1) {
        lv_defensiveBully = UnitGroupUnitFromEnd(autoA090941C_g, autoA090941C_u);
        if (lv_defensiveBully == null) { break; }
        libNtve_gf_AICast(lv_defensiveBully, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_celestialLocks[lp_lockIndex].lv_captureRegion)));
    }
    return true;
}

trigger auto_gf_LockAllyNeededTransmissionQ_Trigger = null;
int auto_gf_LockAllyNeededTransmissionQ_lp_lockIndex;
int auto_gf_LockAllyNeededTransmissionQ_lp_primaryPlayer;

void gf_LockAllyNeededTransmissionQ (int lp_lockIndex, int lp_primaryPlayer) {
    auto_gf_LockAllyNeededTransmissionQ_lp_lockIndex = lp_lockIndex;
    auto_gf_LockAllyNeededTransmissionQ_lp_primaryPlayer = lp_primaryPlayer;

    if (auto_gf_LockAllyNeededTransmissionQ_Trigger == null) {
        auto_gf_LockAllyNeededTransmissionQ_Trigger = TriggerCreate("auto_gf_LockAllyNeededTransmissionQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_LockAllyNeededTransmissionQ_Trigger, false, false);
}

bool auto_gf_LockAllyNeededTransmissionQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_lockIndex = auto_gf_LockAllyNeededTransmissionQ_lp_lockIndex;
    int lp_primaryPlayer = auto_gf_LockAllyNeededTransmissionQ_lp_primaryPlayer;

    // Variable Declarations
    int lv_secondaryPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_primaryPlayer == gv_pLAYER_01_USER)) {
        lv_secondaryPlayer = gv_pLAYER_02_USER;
    }
    else {
        lv_secondaryPlayer = gv_pLAYER_01_USER;
    }
    if ((TimerGetRemaining(gv_lockTransmissionCooldownTimer) > 0.0)) {
        return true;
    }

    Wait(5.0, c_timeGame);
    TriggerQueueEnter();
    if (((TimerGetRemaining(gv_lockTransmissionCooldownTimer) > 0.0) || (gf_CapturingUnitsPresentOnLock(lp_primaryPlayer, lp_lockIndex) == false) || (gf_CapturingUnitsPresentOnLock(lv_secondaryPlayer, lp_lockIndex) == true))) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TimerStart(gv_lockTransmissionCooldownTimer, 90.0, false, c_timeGame);
    libCOMI_gf_SendSplitMissionTransmission("CaptureNeedAlly", true, lp_primaryPlayer, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

trigger auto_gf_ActivateXelNagaConstructAI_Trigger = null;
unit auto_gf_ActivateXelNagaConstructAI_lp_construct;

void gf_ActivateXelNagaConstructAI (unit lp_construct) {
    auto_gf_ActivateXelNagaConstructAI_lp_construct = lp_construct;

    if (auto_gf_ActivateXelNagaConstructAI_Trigger == null) {
        auto_gf_ActivateXelNagaConstructAI_Trigger = TriggerCreate("auto_gf_ActivateXelNagaConstructAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateXelNagaConstructAI_Trigger, false, false);
}

bool auto_gf_ActivateXelNagaConstructAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_construct = auto_gf_ActivateXelNagaConstructAI_lp_construct;

    // Variable Declarations
    unitgroup lv_splashTargets;
    unitgroup lv_attackTargets;
    timer lv_splashCooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_splashTargets = UnitGroupEmpty();
    lv_attackTargets = UnitGroupEmpty();
    lv_splashCooldown = TimerCreate();

    // Implementation
    TimerStart(lv_splashCooldown, 2.0, false, c_timeAI);
    while ((UnitIsAlive(lp_construct) == true) && (libCOMI_gf_GameIsOver() == false)) {
        if ((TimerGetRemaining(lv_splashCooldown) == 0.0)) {
            lv_splashTargets = UnitGroupAlliance(gv_pLAYER_03_Player01Enemy, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_construct), 4.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_splashTargets, c_unitCountAlive) >= 1)) {
                libNtve_gf_AICast(lp_construct, OrderTargetingUnit(AbilityCommand("XelNagaConstructSmash", 0), UnitGroupClosestToPoint(lv_splashTargets, UnitGetPosition(lp_construct))));
                TimerStart(lv_splashCooldown, libARRA_gf_DifficultyValueFixed2(20.0, 15.0, 12.0, 9.0), false, c_timeAI);
                Wait(3.0, c_timeAI);
            }
            else {
                lv_splashTargets = UnitGroupAlliance(gv_pLAYER_03_Player01Enemy, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_construct), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_splashTargets, c_unitCountAlive) >= 1)) {
                    libNtve_gf_AICast(lp_construct, OrderTargetingPoint(AbilityCommand("EntropicBlast", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_splashTargets, UnitGetPosition(lp_construct)))));
                    TimerStart(lv_splashCooldown, libARRA_gf_DifficultyValueFixed2(20.0, 15.0, 12.0, 9.0), false, c_timeAI);
                    Wait(4.5, c_timeAI);
                }

            }
        }

        if (((UnitIsAlive(lp_construct) == false) || (libCOMI_gf_GameIsOver() == true))) {
            return true;
        }

        if (((UnitIsAlive(lp_construct) == false) || (libCOMI_gf_GameIsOver() == true))) {
            return true;
        }

        lv_attackTargets = UnitGroupAlliance(gv_pLAYER_03_Player01Enemy, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_construct), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_attackTargets, c_unitCountAlive) >= 1)) {
            libNtve_gf_AICast(lp_construct, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_attackTargets, UnitGetPosition(lp_construct))));
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

bool gf_AttackRegionisValid (region lp_region) {
    // Variable Declarations
    int lv_lockIndex;
    int lv_i;

    // Automatic Variable Declarations
    const int autoD6885509_ae = 5;
    const int autoD6885509_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoD6885509_ai >= 0 && lv_i <= autoD6885509_ae) || (autoD6885509_ai < 0 && lv_i >= autoD6885509_ae) ) ; lv_i += autoD6885509_ai ) {
        if ((lp_region == gv_celestialLocks[lv_i].lv_captureRegion)) {
            lv_lockIndex = lv_i;
            break;
        }

    }
    if ((lv_lockIndex > 0)) {
        if (((gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_PlayerControlled) || (gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_Inactive))) {
            return true;
        }

    }
    else {
        if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return true;
        }

    }
    return false;
}

void gf_AddLockAttackTarget (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    gv_attackTargetCount_PARAM += 1;
    if ((gv_attackTargetCount_PARAM > 7)) {
        gv_attackTargetCount_PARAM = 7;
        return ;
    }
    else {
        gv_attackTargetList_PARAM[gv_attackTargetCount_PARAM] = lp_region;
    }
}

void gf_AddLockAttackWaveUnits (int lp_count, string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    gv_attackUnitsCount_PARAM += 1;
    if ((gv_attackUnitsCount_PARAM > 7)) {
        gv_attackUnitsCount_PARAM = 7;
        return ;
    }
    else {
        gv_attackUnitNumbers_PARAM[gv_attackUnitsCount_PARAM] = lp_count;
        gv_attackUnitTypes_PARAM[gv_attackUnitsCount_PARAM] = lp_unitType;
    }
}

trigger auto_gf_SendLockAttackWave_Trigger = null;
int auto_gf_SendLockAttackWave_lp_player;
int auto_gf_SendLockAttackWave_lp_duration;

void gf_SendLockAttackWave (int lp_player, int lp_duration) {
    auto_gf_SendLockAttackWave_lp_player = lp_player;
    auto_gf_SendLockAttackWave_lp_duration = lp_duration;

    if (auto_gf_SendLockAttackWave_Trigger == null) {
        auto_gf_SendLockAttackWave_Trigger = TriggerCreate("auto_gf_SendLockAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendLockAttackWave_Trigger, false, false);
}

bool auto_gf_SendLockAttackWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SendLockAttackWave_lp_player;
    int lp_duration = auto_gf_SendLockAttackWave_lp_duration;

    int init_i;

    // Variable Declarations
    int lv_attackTargetCount;
    region[8] lv_attackTargetList;
    int lv_attackUnitsCount;
    int[8] lv_attackUnitNumbers;
    string[8] lv_attackUnitTypes;
    int lv_i;
    int lv_currentValidTarget;
    wave lv_attackWave;
    unitgroup lv_attackWaveUnits;
    bool lv_lowerRightAttack;
    string lv_detectorUnitType;
    int lv_detectorCount;
    unit lv_detectorUnitGrabbed;

    // Automatic Variable Declarations
    int autoF5E78594_ae;
    const int autoF5E78594_ai = 1;
    int auto627DC2EF_ae;
    const int auto627DC2EF_ai = 1;
    int auto223CD357_ae;
    const int auto223CD357_ai = 1;
    int autoB50F7D5D_val;
    int auto98F88ADF_ae;
    const int auto98F88ADF_ai = 1;
    int autoCB8D5903_ae;
    const int autoCB8D5903_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_attackTargetList[init_i] = RegionFromId(28);
    }
    lv_attackWaveUnits = UnitGroupEmpty();

    // Implementation
    lv_attackTargetCount = gv_attackTargetCount_PARAM;
    autoF5E78594_ae = lv_attackTargetCount;
    lv_i = 1;
    for ( ; ( (autoF5E78594_ai >= 0 && lv_i <= autoF5E78594_ae) || (autoF5E78594_ai < 0 && lv_i >= autoF5E78594_ae) ) ; lv_i += autoF5E78594_ai ) {
        lv_attackTargetList[lv_i] = gv_attackTargetList_PARAM[lv_i];
    }
    lv_attackUnitsCount = gv_attackUnitsCount_PARAM;
    auto627DC2EF_ae = lv_attackUnitsCount;
    lv_i = 1;
    for ( ; ( (auto627DC2EF_ai >= 0 && lv_i <= auto627DC2EF_ae) || (auto627DC2EF_ai < 0 && lv_i >= auto627DC2EF_ae) ) ; lv_i += auto627DC2EF_ai ) {
        lv_attackUnitNumbers[lv_i] = gv_attackUnitNumbers_PARAM[lv_i];
        lv_attackUnitTypes[lv_i] = gv_attackUnitTypes_PARAM[lv_i];
    }
    gv_attackTargetCount_PARAM = 0;
    gv_attackUnitsCount_PARAM = 0;
    if ((lv_attackTargetCount == 0)) {
        AIAttackWaveSetTargetPlayer(lp_player, libCOMI_gf_HumanPlayers());
        if ((lp_player == gv_pLAYER_03_Player01Enemy)) {
            AIAttackWaveSetGatherPoint(lp_player, PointFromId(1002));
            AIAttackWaveAddWaypoint(lp_player, PointFromId(344), false);
        }
        else {
            AIAttackWaveSetGatherPoint(lp_player, PointFromId(904));
            AIAttackWaveAddWaypoint(lp_player, PointFromId(452), false);
        }
    }
    else {
        if (((lv_attackTargetList[1] == gv_celestialLocks[1].lv_captureRegion) || (lv_attackTargetList[1] == gv_celestialLocks[4].lv_captureRegion) || (lv_attackTargetList[1] == gv_celestialLocks[5].lv_captureRegion))) {
            if ((lp_player == gv_pLAYER_03_Player01Enemy)) {
                AIAttackWaveSetTargetRegion(lp_player, RegionCircle(PointFromId(432), 4.0), 0);
                AIAttackWaveSetGatherPoint(lp_player, PointFromId(1003));
            }
            else {
                AIAttackWaveSetTargetRegion(lp_player, RegionCircle(PointFromId(907), 4.0), 0);
                AIAttackWaveSetGatherPoint(lp_player, PointFromId(905));
            }
        }
        else {
            if ((lp_player == gv_pLAYER_03_Player01Enemy)) {
                AIAttackWaveSetTargetRegion(lp_player, RegionCircle(PointFromId(344), 4.0), 0);
                AIAttackWaveSetGatherPoint(lp_player, PointFromId(1002));
            }
            else {
                lv_lowerRightAttack = true;
                AIAttackWaveSetTargetRegion(lp_player, RegionCircle(PointFromId(452), 4.0), 0);
                AIAttackWaveSetGatherPoint(lp_player, PointFromId(904));
            }
        }
    }
    auto223CD357_ae = lv_attackUnitsCount;
    lv_i = 1;
    for ( ; ( (auto223CD357_ai >= 0 && lv_i <= auto223CD357_ae) || (auto223CD357_ai < 0 && lv_i >= auto223CD357_ae) ) ; lv_i += auto223CD357_ai ) {
        if ((lv_attackUnitNumbers[lv_i] > 0)) {
            AIAttackWaveAddUnits4(lv_attackUnitNumbers[lv_i], lv_attackUnitNumbers[lv_i], lv_attackUnitNumbers[lv_i], lv_attackUnitNumbers[lv_i], lv_attackUnitTypes[lv_i]);
        }

    }
    lv_detectorUnitType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, lp_player);
    if ((lv_detectorUnitType != null)) {
        autoB50F7D5D_val = gv_celestialLocksActivated;
        if (autoB50F7D5D_val == 3) {
            lv_detectorCount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 3, 3);
        }
        else if (autoB50F7D5D_val == 4) {
            lv_detectorCount = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 3, 4, 4);
        }
        else {
            lv_detectorCount = 1;
        }
    }

    if ((lv_detectorCount > 0)) {
        UnitCreate(lv_detectorCount, lv_detectorUnitType, 0, lp_player, PlayerStartLocation(lp_player), 270.0);
        AIAttackWaveUseGroup(lp_player, UnitLastCreatedGroup());
    }

    AIAttackWaveSend(lp_player, lp_duration, false);
    if ((lv_attackTargetCount == 0)) {
        return true;
    }

    lv_attackWave = WaveLastCreated();
    Wait((lp_duration - 15.0), c_timeAI);
    gv_attackTargetCount_PARAM = lv_attackTargetCount;
    auto98F88ADF_ae = lv_attackTargetCount;
    lv_i = 1;
    for ( ; ( (auto98F88ADF_ai >= 0 && lv_i <= auto98F88ADF_ae) || (auto98F88ADF_ai < 0 && lv_i >= auto98F88ADF_ae) ) ; lv_i += auto98F88ADF_ai ) {
        gv_attackTargetList_PARAM[lv_i] = lv_attackTargetList[lv_i];
    }
    gv_attackWave_PARAM = lv_attackWave;
    Wait(15.0, c_timeAI);
    lv_attackWaveUnits = AIWaveGetUnits(lv_attackWave);
    if (((lv_attackWaveUnits == null) || (lv_attackWaveUnits == UnitGroupEmpty()))) {
        return true;
    }

    while (true) {
        if (((libCOMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_attackWaveUnits) == true))) {
            return true;
        }

        if ((gf_AttackRegionisValid(lv_attackTargetList[lv_currentValidTarget]) == false)) {
            if (((lv_attackTargetList[lv_currentValidTarget] == gv_celestialLocks[1].lv_captureRegion) || (lv_attackTargetList[lv_currentValidTarget] == gv_celestialLocks[2].lv_captureRegion) || (lv_attackTargetList[lv_currentValidTarget] == gv_celestialLocks[3].lv_captureRegion) || (lv_attackTargetList[lv_currentValidTarget] == gv_celestialLocks[4].lv_captureRegion) || (lv_attackTargetList[lv_currentValidTarget] == gv_celestialLocks[5].lv_captureRegion))) {
                if ((lv_attackTargetList[lv_currentValidTarget] == gv_celestialLocks[1].lv_captureRegion)) {
                    Wait(30.0, c_timeAI);
                }
                else {
                    Wait(20.0, c_timeAI);
                }
                if (((libCOMI_gf_GameIsOver() == true) || (libNtve_gf_UnitGroupIsDead(lv_attackWaveUnits) == true))) {
                    return true;
                }

            }

            autoCB8D5903_ae = lv_attackTargetCount;
            lv_i = (lv_currentValidTarget + 1);
            for ( ; ( (autoCB8D5903_ai >= 0 && lv_i <= autoCB8D5903_ae) || (autoCB8D5903_ai < 0 && lv_i >= autoCB8D5903_ae) ) ; lv_i += autoCB8D5903_ai ) {
                if ((gf_AttackRegionisValid(lv_attackTargetList[lv_i]) == true)) {
                    lv_currentValidTarget = lv_i;
                    break;
                }

            }
            if ((libNtve_gf_UnitGroupIsDead(lv_attackWaveUnits) == true)) {
                return true;
            }

            if ((gf_AttackRegionisValid(lv_attackTargetList[lv_currentValidTarget]) == true)) {
                lv_attackWaveUnits = AIWaveGetUnits(lv_attackWave);
                AIRemoveGroupFromAnyWavesAndSetHome(lv_attackWaveUnits, UnitGroupCenterOfGroup(lv_attackWaveUnits));
                AIAttackWaveSetTargetRegion(lp_player, lv_attackTargetList[lv_currentValidTarget], 0);
                AIAttackWaveSetGatherPoint(lp_player, UnitGroupCenterOfGroup(lv_attackWaveUnits));
                if ((lv_lowerRightAttack == true)) {
                    AIAttackWaveAddWaypoint(lp_player, PointFromId(702), false);
                }

                AIAttackWaveUseGroup(lp_player, lv_attackWaveUnits);
                AIAttackWaveSend(lp_player, 0, false);
                lv_attackWave = WaveLastCreated();
            }
            else {
                break;
            }
        }

        if ((UnitGroupCount(UnitGroupFilter(lv_detectorUnitType, lp_player, AIWaveGetUnits(lv_attackWave), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < lv_detectorCount)) {
            if (((UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(lv_attackWave), gv_celestialLocks[1].lv_defenseRegion, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(lv_attackWave), gv_celestialLocks[2].lv_defenseRegion, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(lv_attackWave), gv_celestialLocks[3].lv_defenseRegion, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(lv_attackWave), gv_celestialLocks[4].lv_defenseRegion, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroupFilterRegion(AIWaveGetUnits(lv_attackWave), gv_celestialLocks[5].lv_defenseRegion, 1), c_unitCountAlive) > 0))) {
                if (((UnitCount(null, c_playerAny, RegionCircle(UnitGroupCenterOfGroup(AIWaveGetUnits(lv_attackWave)), 9.0), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) > 0) || (UnitCount(null, c_playerAny, RegionCircle(UnitGroupCenterOfGroup(AIWaveGetUnits(lv_attackWave)), 9.0), UnitFilter((1 << c_targetFilterBuried), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) > 0))) {
                    lv_detectorUnitGrabbed = UnitGroupClosestToPoint(UnitGroup(lv_detectorUnitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), UnitGroupCenterOfGroup(AIWaveGetUnits(lv_attackWave)));
                    AISetUnitScriptControlled(lv_detectorUnitGrabbed, false);
                    AIWaveAddUnit(lv_attackWave, lv_detectorUnitGrabbed);
                    lv_attackWaveUnits = AIWaveGetUnits(lv_attackWave);
                }

            }

        }

        Wait(1.0, c_timeAI);
    }
    lv_attackWaveUnits = AIWaveGetUnits(lv_attackWave);
    AIRemoveGroupFromAnyWavesAndSetHome(lv_attackWaveUnits, UnitGroupCenterOfGroup(lv_attackWaveUnits));
    AIAttackWaveSetTargetPlayer(lp_player, PlayerGroupSingle(gv_pLAYER_01_USER));
    AIAttackWaveSetGatherPoint(lp_player, UnitGroupCenterOfGroup(lv_attackWaveUnits));
    AIAttackWaveUseGroup(lp_player, lv_attackWaveUnits);
    AIAttackWaveSend(lp_player, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_Init09AI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_bunkers;
    int lv_marines;
    unitgroup lv_rocksBig;
    unitgroup lv_rocksSmall;

    // Automatic Variable Declarations
    const int auto0D4D9835_ae = 5;
    const int auto0D4D9835_ai = 1;
    unitgroup autoC51B1C59_g;
    int autoC51B1C59_u;
    unit autoC51B1C59_var;
    unitgroup autoCC79BC32_g;
    int autoCC79BC32_u;
    unit autoCC79BC32_var;

    // Variable Initialization
    lv_rocksBig = UnitGroupEmpty();
    lv_rocksSmall = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto0D4D9835_ai >= 0 && lv_index <= auto0D4D9835_ae) || (auto0D4D9835_ai < 0 && lv_index >= auto0D4D9835_ae) ) ; lv_index += auto0D4D9835_ai ) {
        gv_celestialLocks[lv_index].lv_captureRegion = RegionFromName(("Capture Region " + IntToString(lv_index)));
        gv_celestialLocks[lv_index].lv_firstCaptureRegion = RegionFromName(("First Capture " + IntToString(lv_index)));
        gv_celestialLocks[lv_index].lv_defenseRegion = RegionFromName(("Defense Region " + IntToString(lv_index)));
        gv_celestialLocks[lv_index].lv_revealRegion = RegionFromName(("Mechanism Reveal " + IntToString(lv_index)));
        gv_celestialLocks[lv_index].lv_celestialLockRegion = RegionFromName(("Mechanism " + IntToString(lv_index)));
        gv_celestialLocks[lv_index].lv_celestialLock = UnitGroupUnit(UnitGroup("CelestialLock", c_playerAny, gv_celestialLocks[lv_index].lv_celestialLockRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        libCOMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), null, StringExternal("Param/Value/4F760621"), null);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_celestialLocks[lv_index].lv_celestialLock), c_animNameDefault, "Stand Morph", c_animFlagPlayForever, c_animTimeDefault);
        gv_celestialLocks[lv_index].lv_callForHelpRespondents = UnitGroup(null, gv_pLAYER_03_Player01Enemy, RegionFromName(("Bullies to Aid Lock " + IntToString(lv_index))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(gv_celestialLocks[lv_index].lv_callForHelpRespondents, UnitGroup(null, gv_pLAYER_04_Player02Enemy, RegionFromName(("Bullies to Aid Lock " + IntToString(lv_index))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    gv_captureFilterAlly = UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    gv_captureFilterEnemy = UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    gv_captureFilterEnemyAllowCloak = UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    gf_ExcludeUnitTypefromLockCapture("ThorWreckageSwann", ge_ExcludedUnitTypeController_Players);
    gf_ExcludeUnitTypefromLockCapture("SiegeTankWreckage", ge_ExcludedUnitTypeController_Players);
    autoC51B1C59_g = UnitGroup("Bunker", gv_pLAYER_03_Player01Enemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC51B1C59_u = UnitGroupCount(autoC51B1C59_g, c_unitCountAll);
    for (;; autoC51B1C59_u -= 1) {
        autoC51B1C59_var = UnitGroupUnitFromEnd(autoC51B1C59_g, autoC51B1C59_u);
        if (autoC51B1C59_var == null) { break; }
        UnitCargoCreate(autoC51B1C59_var, "Marauder", 1);
        UnitCargoCreate(autoC51B1C59_var, "Marine", 2);
    }
    autoCC79BC32_g = UnitGroup("Bunker", gv_pLAYER_04_Player02Enemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCC79BC32_u = UnitGroupCount(autoCC79BC32_g, c_unitCountAll);
    for (;; autoCC79BC32_u -= 1) {
        autoCC79BC32_var = UnitGroupUnitFromEnd(autoCC79BC32_g, autoCC79BC32_u);
        if (autoCC79BC32_var == null) { break; }
        UnitCargoCreate(autoCC79BC32_var, "Marauder", 1);
        UnitCargoCreate(autoCC79BC32_var, "Marine", 2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "PUlnar01_Music_Main";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_bonusObjectiveUnit, c_unitPropLifeMax, libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_GetMissionDifficulty(), 5000.0, 7500.0, 10000.0, 12500.0, 0.0, 0.0));
    UnitSetPropertyFixed(gv_bonusObjectiveUnit, c_unitPropLifePercent, 100.0);
    gv_tickValue[5] = 2.0;
    gv_tickValue[4] = 2.25;
    gv_tickValue[3] = 2.67;
    gv_tickValue[2] = 3.5;
    gv_tickValue[1] = 6.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 09 AI
//--------------------------------------------------------------------------------------------------
bool gt_Init09AI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AttackWaves, true, false);
    AISetBullyRebuildDelay(99.0, 100.0, gv_pLAYER_03_Player01Enemy);
    AISetBullyRebuildDelay(99.0, 100.0, gv_pLAYER_04_Player02Enemy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init09AI_Init () {
    gt_Init09AI = TriggerCreate("gt_Init09AI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA0F23710_ae = 5;
    const int autoA0F23710_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ActivateXelNagaConstructAI(gv_bonusObjectiveUnit);
    TriggerExecute(gt_BonusObjectiveWaitTrigger, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_CelestialLockInit, true, true);
    TriggerQueueEnter();
    lv_index = 1;
    for ( ; ( (autoA0F23710_ai >= 0 && lv_index <= autoA0F23710_ae) || (autoA0F23710_ai < 0 && lv_index >= autoA0F23710_ae) ) ; lv_index += autoA0F23710_ai ) {
        VisExploreArea(gv_pLAYER_01_USER, gv_celestialLocks[lv_index].lv_revealRegion, true, false);
        VisExploreArea(gv_pLAYER_02_USER, gv_celestialLocks[lv_index].lv_revealRegion, true, false);
    }
    TriggerExecute(gt_ObjectiveActivateLocksCreate, true, false);
    Wait(2.0, c_timeReal);
    TriggerQueueExit();
    TriggerExecute(gt_CelestialLockController, true, false);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_MainObjectiveTransmissionQ, true, false);
    Wait(8.0, c_timeGame);
    TriggerExecute(gt_InitialEnemyCaptures, true, false);
    TriggerExecute(gt_TicketWarningController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tick Counter
//--------------------------------------------------------------------------------------------------
bool gt_TickCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoBBABC216_ae = 5;
    const int autoBBABC216_ai = 1;
    int auto5ACC51B0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tickPerSecond = 0.0;
    lv_index = 1;
    for ( ; ( (autoBBABC216_ai >= 0 && lv_index <= autoBBABC216_ae) || (autoBBABC216_ai < 0 && lv_index >= autoBBABC216_ae) ) ; lv_index += autoBBABC216_ai ) {
        if ((gv_celestialLocks[lv_index].lv_state == ge_PRESET_CelestialLockState_EnemyControlled) && (gv_celestialLocks[lv_index].lv_transitionInProgress == false)) {
            gv_currentTicks = (gv_currentTicks + gv_tickValue[gv_celestialLocksOverloaded]);
            gv_tickPerSecond = (gv_tickPerSecond + gv_tickValue[gv_celestialLocksOverloaded]);
        }

    }
    libCOMI_gf_SetProgressBarProgress(FixedToInt(gv_currentTicks));
    PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, "UlnarOverload", ((gv_currentTicks / gv_maxTicks) * 100.0));
    PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, "UlnarOverload", ((gv_currentTicks / gv_maxTicks) * 100.0));
    TriggerExecute(gt_ObjectivePreventOverloadUpdate, true, false);
    auto5ACC51B0_val = gv_celestialLocksOverloaded;
    if (auto5ACC51B0_val == 1) {
        libCOMI_gf_SetProgressBarLabel(StringExternal("Param/Value/74AE3A5E"));
    }
    else if (auto5ACC51B0_val == 2) {
        libCOMI_gf_SetProgressBarLabel(StringExternal("Param/Value/288C511E"));
    }
    else if (auto5ACC51B0_val == 3) {
        libCOMI_gf_SetProgressBarLabel(StringExternal("Param/Value/C2F1801C"));
    }
    else if (auto5ACC51B0_val == 4) {
        libCOMI_gf_SetProgressBarLabel(StringExternal("Param/Value/B22952D1"));
    }
    else if (auto5ACC51B0_val == 5) {
        libCOMI_gf_SetProgressBarLabel(StringExternal("Param/Value/F95470B9"));
    }
    else {
        libCOMI_gf_SetProgressBarLabel(StringToText(""));
    }
    if ((gv_currentTicks >= gv_maxTicks)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_StopTimer(gv_tickTimer);
        TimerWindowDestroy(gv_tickTimerWindow);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TickCounter_Init () {
    gt_TickCounter = TriggerCreate("gt_TickCounter_Func");
    TriggerEnable(gt_TickCounter, false);
    TriggerAddEventTimePeriodic(gt_TickCounter, gv_tickInterval, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Lock Init
//--------------------------------------------------------------------------------------------------
bool gt_CelestialLockInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto8EFD56F8_ae = 5;
    const int auto8EFD56F8_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromFixed(gv_pLAYER_01_USER, "UlnarOverload", 0.0);
    PlayerScoreValueSetFromFixed(gv_pLAYER_02_USER, "UlnarOverload", 0.0);
    lv_index = 1;
    for ( ; ( (auto8EFD56F8_ai >= 0 && lv_index <= auto8EFD56F8_ae) || (auto8EFD56F8_ai < 0 && lv_index >= auto8EFD56F8_ae) ) ; lv_index += auto8EFD56F8_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarDummy", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_celestialLocks[lv_index].lv_celestialLock));
        gv_celestialLocks[lv_index].lv_progressBarDummyUnit = UnitLastCreated();
        libCOMI_gf_DisplayUnitProgressBar(gv_celestialLocks[lv_index].lv_progressBarDummyUnit, StringToText(""), gv_lockProgressMIN, gv_lockProgressMAX);
        libCOMI_gf_SetUnitProgressBarProgress(gv_celestialLocks[lv_index].lv_progressBarDummyUnit, gv_lockProgressMIN);
        libCOMI_gf_ShowHideUnitProgressBar(gv_celestialLocks[lv_index].lv_progressBarDummyUnit, false);
        UnitSetState(gv_celestialLocks[lv_index].lv_celestialLock, c_unitStateStatusBar, false);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, UnitGetPosition(gv_celestialLocks[lv_index].lv_progressBarDummyUnit), StringExternal("Param/Value/F2FD0A64"));
        gv_celestialLocks[lv_index].lv_objectivePing = PingLastCreated();
        PingSetColor(gv_celestialLocks[lv_index].lv_objectivePing, Color(75.29, 75.29, 75.29));
        gf_SetCelestialLockState(lv_index, ge_PRESET_CelestialLockState_Inactive);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialLockInit_Init () {
    gt_CelestialLockInit = TriggerCreate("gt_CelestialLockInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Lock Controller
//--------------------------------------------------------------------------------------------------
bool gt_CelestialLockController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int lv_lockIndex;
    bool lv_enemyUnitsPresentOnLock;
    bool lv_friendlyUnitsPresentOnLock;
    bool lv_player1UnitsPresentOnLock;
    bool lv_player2UnitsPresentOnLock;
    bool lv_player3UnitsPresentOnLock;

    // Automatic Variable Declarations
    const int auto1687198B_ae = 5;
    const int auto1687198B_ai = 1;
    playergroup auto6B821AA9_g;
    int auto6B821AA9_var;
    playergroup auto9FB27B23_g;
    int auto9FB27B23_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetAlliedCommandersPlayers();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        lv_lockIndex = 1;
        for ( ; ( (auto1687198B_ai >= 0 && lv_lockIndex <= auto1687198B_ae) || (auto1687198B_ai < 0 && lv_lockIndex >= auto1687198B_ae) ) ; lv_lockIndex += auto1687198B_ai ) {
            lv_friendlyUnitsPresentOnLock = false;
            lv_enemyUnitsPresentOnLock = false;
            auto6B821AA9_g = lv_players;
            auto6B821AA9_var = -1;
            while (true) {
                auto6B821AA9_var = PlayerGroupNextPlayer(auto6B821AA9_g, auto6B821AA9_var);
                if (auto6B821AA9_var < 0) { break; }
                if ((gf_CapturingUnitsPresentOnLock(auto6B821AA9_var, lv_lockIndex) == true)) {
                    lv_friendlyUnitsPresentOnLock = true;
                }

            }
            auto9FB27B23_g = libCOMI_gf_GetEnemyPlayers();
            auto9FB27B23_var = -1;
            while (true) {
                auto9FB27B23_var = PlayerGroupNextPlayer(auto9FB27B23_g, auto9FB27B23_var);
                if (auto9FB27B23_var < 0) { break; }
                if ((gf_CapturingUnitsPresentOnLock(auto9FB27B23_var, lv_lockIndex) == true)) {
                    lv_enemyUnitsPresentOnLock = true;
                }

            }
            lv_player1UnitsPresentOnLock = gf_CapturingUnitsPresentOnLock(PlayerGroupPlayer(lv_players, 1), lv_lockIndex);
            if ((PlayerGroupCount(lv_players) >= 2)) {
                lv_player2UnitsPresentOnLock = gf_CapturingUnitsPresentOnLock(PlayerGroupPlayer(lv_players, 2), lv_lockIndex);
                if ((PlayerGroupCount(lv_players) >= 3)) {
                    lv_player3UnitsPresentOnLock = gf_CapturingUnitsPresentOnLock(PlayerGroupPlayer(lv_players, 3), lv_lockIndex);
                }

            }

            if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) == 2) && (lv_friendlyUnitsPresentOnLock == true)) {
                if ((lv_enemyUnitsPresentOnLock == false) && ((gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_EnemyControlled) || (gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_Inactive))) {
                    if ((lv_player1UnitsPresentOnLock == false)) {
                        gf_LockAllyNeededTransmissionQ(lv_lockIndex, gv_pLAYER_02_USER);
                    }

                    if ((lv_player2UnitsPresentOnLock == false)) {
                        gf_LockAllyNeededTransmissionQ(lv_lockIndex, gv_pLAYER_01_USER);
                    }

                }

            }

            if (((gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_EnemyControlled) || (gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_Inactive)) && (lv_friendlyUnitsPresentOnLock == true) && (lv_enemyUnitsPresentOnLock == false)) {
                gf_ActivateDeactivateCelestialLock(true, lv_lockIndex);
            }
            else {
                if (((gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_PlayerControlled) || (gv_celestialLocks[lv_lockIndex].lv_state == ge_PRESET_CelestialLockState_Inactive)) && (lv_friendlyUnitsPresentOnLock == false) && (lv_enemyUnitsPresentOnLock == true)) {
                    gf_ActivateDeactivateCelestialLock(false, lv_lockIndex);
                }

            }
            if ((lv_friendlyUnitsPresentOnLock == true)) {
                gf_SendBulliestoDefendLock(lv_lockIndex);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialLockController_Init () {
    gt_CelestialLockController = TriggerCreate("gt_CelestialLockController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Capture Q
//--------------------------------------------------------------------------------------------------
bool gt_FirstCaptureQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_lockIndex;

    // Automatic Variable Declarations
    const int auto6B8D3B1C_ae = 5;
    const int auto6B8D3B1C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        lv_i = 1;
        for ( ; ( (auto6B8D3B1C_ai >= 0 && lv_i <= auto6B8D3B1C_ae) || (auto6B8D3B1C_ai < 0 && lv_i >= auto6B8D3B1C_ae) ) ; lv_i += auto6B8D3B1C_ai ) {
            if (((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, gv_celestialLocks[lv_i].lv_firstCaptureRegion, gv_captureFilterAlly, 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_02_USER, gv_celestialLocks[lv_i].lv_firstCaptureRegion, gv_captureFilterAlly, 1), c_unitCountAlive) > 0)) && (gv_celestialLocks[lv_i].lv_state == ge_PRESET_CelestialLockState_EnemyControlled)) {
                lv_lockIndex = lv_i;
                break;
            }

        }
        if ((lv_lockIndex > 0)) {
            break;
        }

    }
    TriggerQueueEnter();
    if ((gv_celestialLocks[lv_i].lv_state == ge_PRESET_CelestialLockState_EnemyControlled)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TriggerDebugOutput(1, StringExternal("Param/Value/8A70A7AB"), true);
        libCOMI_gf_SendMissionTransmission("EnemySecuresLockFirst", true, RandomInt(1, 2));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    while (!((gv_celestialLocksActivated > 0))) {
        Wait(1.0, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    TriggerQueueEnter();
    if ((gv_celestialLocksActivated > 0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        TriggerDebugOutput(1, StringExternal("Param/Value/2DE17660"), true);
        libCOMI_gf_SendMissionTransmission("PlayerSecuresLockFirst", true, RandomInt(1, 2));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstCaptureQ_Init () {
    gt_FirstCaptureQ = TriggerCreate("gt_FirstCaptureQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Enemy Captures
//--------------------------------------------------------------------------------------------------
bool gt_InitialEnemyCaptures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeAI);
    if ((gv_celestialLocks[5].lv_previouslyOverloaded == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[5].lv_captureRegion, true);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[5].lv_captureRegion, true);
    }

    Wait(120.0, c_timeAI);
    if ((gv_celestialLocks[4].lv_previouslyOverloaded == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[4].lv_captureRegion, true);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[4].lv_captureRegion, true);
    }

    Wait(120.0, c_timeAI);
    if ((gv_celestialLocks[3].lv_previouslyOverloaded == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[3].lv_captureRegion, true);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[3].lv_captureRegion, true);
    }

    Wait(120.0, c_timeAI);
    if ((gv_celestialLocks[2].lv_previouslyOverloaded == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[2].lv_captureRegion, true);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[2].lv_captureRegion, true);
    }

    Wait(120.0, c_timeAI);
    if ((gv_celestialLocks[1].lv_previouslyOverloaded == false)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_Player01Enemy, gv_celestialLocks[1].lv_captureRegion, true);
        AIToggleBulliesInRegion(gv_pLAYER_04_Player02Enemy, gv_celestialLocks[1].lv_captureRegion, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialEnemyCaptures_Init () {
    gt_InitialEnemyCaptures = TriggerCreate("gt_InitialEnemyCaptures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overload Bar Initilization
//--------------------------------------------------------------------------------------------------
bool gt_OverloadBarInitilization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventOverloadCreate, true, false);
    Wait(2.0, c_timeReal);
    libCOMI_gf_DisplayProgressBar(StringExternal("Param/Value/1C08A974"), 0, FixedToInt(gv_maxTicks));
    libCOMI_gf_SetProgressBarColor(Color(100.00, 0.00, 0.00));
    TriggerEnable(gt_TickCounter, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverloadBarInitilization_Init () {
    gt_OverloadBarInitilization = TriggerCreate("gt_OverloadBarInitilization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ticket Warning Controller
//--------------------------------------------------------------------------------------------------
bool gt_TicketWarningController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_currentTicks >= (gv_maxTicks * 0.5)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TicketWarning50TransmissionQ, true, false);
    while (!((gv_currentTicks >= (gv_maxTicks * 0.75)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TicketWarning25TransmissionQ, true, false);
    while (!((gv_currentTicks >= (gv_maxTicks * 0.95)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TicketWarning05TransmissionQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TicketWarningController_Init () {
    gt_TicketWarningController = TriggerCreate("gt_TicketWarningController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ticket Warning 50 Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_TicketWarning50TransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("OverloadWarning", true, RandomInt(1, 2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TicketWarning50TransmissionQ_Init () {
    gt_TicketWarning50TransmissionQ = TriggerCreate("gt_TicketWarning50TransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ticket Warning 25 Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_TicketWarning25TransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("OverloadImminent", true, RandomInt(1, 2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TicketWarning25TransmissionQ_Init () {
    gt_TicketWarning25TransmissionQ = TriggerCreate("gt_TicketWarning25TransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ticket Warning 05 Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_TicketWarning05TransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("OverloadCritical", true, RandomInt(1, 2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TicketWarning05TransmissionQ_Init () {
    gt_TicketWarning05TransmissionQ = TriggerCreate("gt_TicketWarning05TransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Lock Contested Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_GlobalLockContestedTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstEnemyContestLock == true)) {
        gv_firstEnemyContestLock = false;
        libCOMI_gf_SendMissionTransmission("EnemyEngagesLockFirst", true, RandomInt(1, 2));
    }
    else {
        libCOMI_gf_SendMissionTransmission("EnemyContestsLock", true, RandomInt(1, 2));
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlobalLockContestedTransmissionQ_Init () {
    gt_GlobalLockContestedTransmissionQ = TriggerCreate("gt_GlobalLockContestedTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Objective Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_MainObjectiveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto395DA8F3_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto395DA8F3_val = RandomInt(1, 3);
    if (auto395DA8F3_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro1LnL", true, -1);
    }
    else if (auto395DA8F3_val == 2) {
        libCOMI_gf_SendMissionTransmission("Intro2LnL", true, -1);
    }
    else if (auto395DA8F3_val == 3) {
        libCOMI_gf_SendMissionTransmission("Intro3LnL", true, -1);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainObjectiveTransmissionQ_Init () {
    gt_MainObjectiveTransmissionQ = TriggerCreate("gt_MainObjectiveTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lock Ally Needed Transmission OldFarts Q
//--------------------------------------------------------------------------------------------------
bool gt_LockAllyNeededTransmissionOldFartsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendSplitMissionTransmission("CaptureNeedAlly", true, -1, -1);
    libCOMI_gf_SendMissionTransmission("CaptureNeedAlly", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(90.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LockAllyNeededTransmissionOldFartsQ_Init () {
    gt_LockAllyNeededTransmissionOldFartsQ = TriggerCreate("gt_LockAllyNeededTransmissionOldFartsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Lock Deactivated Q
//--------------------------------------------------------------------------------------------------
bool gt_CelestialLockDeactivatedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstOverloadedLock == true)) {
        gv_firstOverloadedLock = false;
        libCOMI_gf_SendMissionTransmission("EnemySecuresLockFirst", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("EnemySecuresLockRepeat", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialLockDeactivatedQ_Init () {
    gt_CelestialLockDeactivatedQ = TriggerCreate("gt_CelestialLockDeactivatedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Celestial Lock Captured Q
//--------------------------------------------------------------------------------------------------
bool gt_CelestialLockCapturedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_firstPlayerActivation == true)) {
        gv_firstPlayerActivation = false;
        libCOMI_gf_SendMissionTransmission("PlayerSecuresLockFirst", true, -1);
    }
    else {
        if ((gv_celestialLocksActivated == 3)) {
            libCOMI_gf_SendMissionTransmission("TwoLocksRemain", true, -1);
        }
        else {
            if ((gv_celestialLocksActivated == 4)) {
                libCOMI_gf_SendMissionTransmission("OneLockRemains", true, -1);
            }
            else {
                libCOMI_gf_SendMissionTransmission("PlayerSecuresLockRepeat", true, -1);
            }
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CelestialLockCapturedQ_Init () {
    gt_CelestialLockCapturedQ = TriggerCreate("gt_CelestialLockCapturedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveProximityTrigger, false);
    TriggerQueueEnter();
    if ((UnitIsAlive(gv_bonusObjectiveUnit) == false)) {
        return true;
    }

    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_bonusObjectiveUnit), 5.0, Color(100.00, 0.00, 0.00));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusObjectiveUnit), StringExternal("Param/Value/3CF93D59"));
    PingSetUnit(PingLastCreated(), gv_bonusObjectiveUnit);
    gv_bonusObjectivePing = PingLastCreated();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveLnL", true, RandomInt(1, 2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerExecute(gt_ObjectiveDestroyXelNagaConstructCreate, true, true);
    TriggerExecute(gt_SetUpBonusObjectiveEscorts, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveQ_Init () {
    gt_BonusObjectiveQ = TriggerCreate("gt_BonusObjectiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Wait Trigger
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveWaitTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(480.0, c_timeAI);
    TriggerExecute(gt_BonusObjectiveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveWaitTrigger_Init () {
    gt_BonusObjectiveWaitTrigger = TriggerCreate("gt_BonusObjectiveWaitTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Proximity Trigger
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveProximityTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BonusObjectiveProximityTrigger, false);
    TriggerExecute(gt_BonusObjectiveQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveProximityTrigger_Init () {
    gt_BonusObjectiveProximityTrigger = TriggerCreate("gt_BonusObjectiveProximityTrigger_Func");
    TriggerAddEventUnitRange(gt_BonusObjectiveProximityTrigger, null, UnitFromId(1934), 16.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Bonus Objective Escorts
//--------------------------------------------------------------------------------------------------
bool gt_SetUpBonusObjectiveEscorts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3B7AD548_g;
    int auto3B7AD548_u;
    unit auto3B7AD548_var;
    unitgroup auto014AB9DE_g;
    int auto014AB9DE_u;
    unit auto014AB9DE_var;
    unitgroup auto76D6F86A_g;
    int auto76D6F86A_u;
    unit auto76D6F86A_var;
    unitgroup auto9F06B7A6_g;
    int auto9F06B7A6_u;
    unit auto9F06B7A6_var;
    unitgroup auto0DA63D89_g;
    int auto0DA63D89_u;
    unit auto0DA63D89_var;
    unitgroup auto933B8311_g;
    int auto933B8311_u;
    unit auto933B8311_var;
    unitgroup auto161CCDF5_g;
    int auto161CCDF5_u;
    unit auto161CCDF5_var;
    unitgroup auto2185C5D4_g;
    int auto2185C5D4_u;
    unit auto2185C5D4_var;
    unitgroup auto0F5FC870_g;
    int auto0F5FC870_u;
    unit auto0F5FC870_var;

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetGatherPoint(gv_pLAYER_03_Player01Enemy, UnitGetPosition(gv_bonusObjectiveUnit));
    AIAttackWaveSetTargetEscort(gv_pLAYER_03_Player01Enemy, libNtve_gf_ConvertUnitToUnitGroup(gv_bonusObjectiveUnit), 0);
    auto3B7AD548_g = UnitGroup("VikingFighter", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B7AD548_u = UnitGroupCount(auto3B7AD548_g, c_unitCountAll);
    for (;; auto3B7AD548_u -= 1) {
        auto3B7AD548_var = UnitGroupUnitFromEnd(auto3B7AD548_g, auto3B7AD548_u);
        if (auto3B7AD548_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto3B7AD548_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto3B7AD548_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto3B7AD548_var)));
    }
    auto014AB9DE_g = UnitGroup("Wraith", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto014AB9DE_u = UnitGroupCount(auto014AB9DE_g, c_unitCountAll);
    for (;; auto014AB9DE_u -= 1) {
        auto014AB9DE_var = UnitGroupUnitFromEnd(auto014AB9DE_g, auto014AB9DE_u);
        if (auto014AB9DE_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto014AB9DE_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto014AB9DE_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto014AB9DE_var)));
    }
    auto76D6F86A_g = UnitGroup("Battlecruiser", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto76D6F86A_u = UnitGroupCount(auto76D6F86A_g, c_unitCountAll);
    for (;; auto76D6F86A_u -= 1) {
        auto76D6F86A_var = UnitGroupUnitFromEnd(auto76D6F86A_g, auto76D6F86A_u);
        if (auto76D6F86A_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto76D6F86A_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto76D6F86A_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto76D6F86A_var)));
    }
    auto9F06B7A6_g = UnitGroup("VoidRay", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9F06B7A6_u = UnitGroupCount(auto9F06B7A6_g, c_unitCountAll);
    for (;; auto9F06B7A6_u -= 1) {
        auto9F06B7A6_var = UnitGroupUnitFromEnd(auto9F06B7A6_g, auto9F06B7A6_u);
        if (auto9F06B7A6_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto9F06B7A6_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto9F06B7A6_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto9F06B7A6_var)));
    }
    auto0DA63D89_g = UnitGroup("Scout", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DA63D89_u = UnitGroupCount(auto0DA63D89_g, c_unitCountAll);
    for (;; auto0DA63D89_u -= 1) {
        auto0DA63D89_var = UnitGroupUnitFromEnd(auto0DA63D89_g, auto0DA63D89_u);
        if (auto0DA63D89_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto0DA63D89_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto0DA63D89_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto0DA63D89_var)));
    }
    auto933B8311_g = UnitGroup("Carrier", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto933B8311_u = UnitGroupCount(auto933B8311_g, c_unitCountAll);
    for (;; auto933B8311_u -= 1) {
        auto933B8311_var = UnitGroupUnitFromEnd(auto933B8311_g, auto933B8311_u);
        if (auto933B8311_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto933B8311_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto933B8311_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto933B8311_var)));
    }
    auto161CCDF5_g = UnitGroup("Corruptor", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto161CCDF5_u = UnitGroupCount(auto161CCDF5_g, c_unitCountAll);
    for (;; auto161CCDF5_u -= 1) {
        auto161CCDF5_var = UnitGroupUnitFromEnd(auto161CCDF5_g, auto161CCDF5_u);
        if (auto161CCDF5_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto161CCDF5_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto161CCDF5_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto161CCDF5_var)));
    }
    auto2185C5D4_g = UnitGroup("Mutalisk", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2185C5D4_u = UnitGroupCount(auto2185C5D4_g, c_unitCountAll);
    for (;; auto2185C5D4_u -= 1) {
        auto2185C5D4_var = UnitGroupUnitFromEnd(auto2185C5D4_g, auto2185C5D4_u);
        if (auto2185C5D4_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto2185C5D4_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto2185C5D4_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto2185C5D4_var)));
    }
    auto0F5FC870_g = UnitGroup("BroodLord", gv_pLAYER_03_Player01Enemy, RegionCircle(UnitGetPosition(gv_bonusObjectiveUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0F5FC870_u = UnitGroupCount(auto0F5FC870_g, c_unitCountAll);
    for (;; auto0F5FC870_u -= 1) {
        auto0F5FC870_var = UnitGroupUnitFromEnd(auto0F5FC870_g, auto0F5FC870_u);
        if (auto0F5FC870_var == null) { break; }
        AIAttackWaveAddEscortUnit(gv_pLAYER_03_Player01Enemy, auto0F5FC870_var, gv_bonusObjectiveUnit, DistanceBetweenPoints(UnitGetPosition(auto0F5FC870_var), UnitGetPosition(gv_bonusObjectiveUnit)), AngleBetweenPoints(UnitGetPosition(gv_bonusObjectiveUnit), UnitGetPosition(auto0F5FC870_var)));
    }
    AIAttackWaveSend(gv_pLAYER_03_Player01Enemy, 0, false);
    libCOMI_gf_EnableDisableCoopAIWavePing(WaveLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetUpBonusObjectiveEscorts_Init () {
    gt_SetUpBonusObjectiveEscorts = TriggerCreate("gt_SetUpBonusObjectiveEscorts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_triggeringUnitPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_titanicWarpPrismAchievementTimer, true);
    TriggerExecute(gt_ObjectiveDestroyXelNagaConstructComplete, true, false);
    PingDestroy(gv_bonusObjectivePing);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusCompleteLnL", true, RandomInt(1, 2));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveDies_Init () {
    gt_BonusObjectiveDies = TriggerCreate("gt_BonusObjectiveDies_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveDies, UnitRefFromVariable("gv_bonusObjectiveUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    point lv_l_CameraTarget;

    // Automatic Variable Declarations
    const int auto25800E25_ae = 5;
    const int auto25800E25_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((gv_currentTicks >= gv_maxTicks))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveActivateLocksFailed, true, false);
    TriggerExecute(gt_ObjectivePreventOverloadFailed, true, false);
    if ((UnitIsAlive(gv_bonusObjectiveUnit) == true)) {
        TriggerExecute(gt_ObjectiveDestroyXelNagaConstructFailed, true, false);
    }

    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatLnL", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/2B339B97"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    lv_i = 1;
    for ( ; ( (auto25800E25_ai >= 0 && lv_i <= auto25800E25_ae) || (auto25800E25_ai < 0 && lv_i >= auto25800E25_ae) ) ; lv_i += auto25800E25_ai ) {
        if ((gv_celestialLocks[1].lv_state == ge_PRESET_CelestialLockState_EnemyControlled)) {
            libCOMI_gf_MoveCameraForAllPlayers(UnitGetPosition(gv_celestialLocks[lv_i].lv_celestialLock), 1.5);
            break;
        }

    }
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventTimePeriodic(gt_DefeatPrimaryObjectiveFailed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Activate Locks Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryActivateLocksCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveActivateLocksComplete, true, false);
    TriggerExecute(gt_ObjectivePreventOverloadComplete, true, true);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryLnL");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E42EB005"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(UnitGetPosition(gv_lastActivatedLock), 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryActivateLocksCompleted_Init () {
    gt_VictoryActivateLocksCompleted = TriggerCreate("gt_VictoryActivateLocksCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_attackWaveUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackWaveUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_Player01Enemy, PointFromId(1003));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_Player02Enemy, PointFromId(905));
    gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__1Early, PointFromId(1003), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 240, 240, 240, 240, 0, 0));
    Wait(240.0, c_timeAI);
    gf_AddLockAttackTarget(gv_celestialLocks[3].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, PointFromId(905), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 240, 240, 240, 240, 0, 0));
    Wait(240.0, c_timeAI);
    gf_AddLockAttackTarget(gv_celestialLocks[5].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[2].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(1003), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 180, 180, 180, 180, 0, 0));
    gf_AddLockAttackTarget(gv_celestialLocks[4].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[3].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(905), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 180, 180, 180, 180, 0, 0));
    Wait(180.0, c_timeAI);
    gf_AddLockAttackTarget(gv_celestialLocks[2].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(1003), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 180, 180, 180, 180, 0, 0));
    gf_AddLockAttackTarget(gv_celestialLocks[3].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__3Mid, PointFromId(905), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 180, 180, 180, 180, 0, 0));
    Wait(180.0, c_timeAI);
    gf_AddLockAttackTarget(gv_celestialLocks[5].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[2].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(1003), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 180, 180, 180, 180, 0, 0));
    gf_AddLockAttackTarget(gv_celestialLocks[4].lv_captureRegion);
    gf_AddLockAttackTarget(gv_celestialLocks[3].lv_captureRegion);
    gf_AddLockAttackTarget(RegionFromId(32));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(905), true);
    lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
    gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 180, 180, 180, 180, 0, 0));
    Wait(180.0, c_timeAI);
    while (true) {
        gf_AddLockAttackTarget(gv_celestialLocks[3].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, PointFromId(1003), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        gf_AddLockAttackTarget(gv_celestialLocks[2].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, PointFromId(905), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        Wait(120.0, c_timeAI);
        gf_AddLockAttackTarget(gv_celestialLocks[5].lv_captureRegion);
        gf_AddLockAttackTarget(gv_celestialLocks[2].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(1003), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        gf_AddLockAttackTarget(gv_celestialLocks[4].lv_captureRegion);
        gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(905), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        Wait(120.0, c_timeAI);
        gf_AddLockAttackTarget(gv_celestialLocks[2].lv_captureRegion);
        gf_AddLockAttackTarget(gv_celestialLocks[1].lv_captureRegion);
        gf_AddLockAttackTarget(gv_celestialLocks[3].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(1003), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        gf_AddLockAttackTarget(gv_celestialLocks[4].lv_captureRegion);
        gf_AddLockAttackTarget(gv_celestialLocks[5].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, PointFromId(905), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        Wait(120.0, c_timeAI);
        gf_AddLockAttackTarget(gv_celestialLocks[5].lv_captureRegion);
        gf_AddLockAttackTarget(gv_celestialLocks[2].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_Player01Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, PointFromId(1003), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits, PointFromId(1003), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_03_Player01Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_03_Player01Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        gf_AddLockAttackTarget(gv_celestialLocks[4].lv_captureRegion);
        gf_AddLockAttackTarget(gv_celestialLocks[3].lv_captureRegion);
        gf_AddLockAttackTarget(RegionFromId(32));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_04_Player02Enemy, c_playerAny, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, PointFromId(905), true);
        lv_attackWaveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
        libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits, PointFromId(905), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
        AIAttackWaveUseGroup(gv_pLAYER_04_Player02Enemy, lv_attackWaveUnits);
        gf_SendLockAttackWave(gv_pLAYER_04_Player02Enemy, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 120, 120, 120, 120, 0, 0));
        Wait(120.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaves_Init () {
    gt_AttackWaves = TriggerCreate("gt_AttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recently Sent Waves
//--------------------------------------------------------------------------------------------------
bool gt_RecentlySentWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_recentlySentAttackWaves[gv_recentlySentAttackWaveCounter] = EventPlayerWave();
    gv_recentlySentAttackWaveCounter += 1;
    if ((gv_recentlySentAttackWaveCounter > 7)) {
        gv_recentlySentAttackWaveCounter = 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecentlySentWaves_Init () {
    gt_RecentlySentWaves = TriggerCreate("gt_RecentlySentWaves_Func");
    TriggerAddEventPlayerAIWave(gt_RecentlySentWaves, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Locks Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateLocksCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_UlnarLocks_Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateLocksCreate_Init () {
    gt_ObjectiveActivateLocksCreate = TriggerCreate("gt_ObjectiveActivateLocksCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Locks Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateLocksComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveActivateLocksCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyZergBase, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateLocksComplete_Init () {
    gt_ObjectiveActivateLocksComplete = TriggerCreate("gt_ObjectiveActivateLocksComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Locks Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateLocksUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveActivateLocksCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_UlnarLocks_Primary01", gv_celestialLocksActivated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateLocksUpdate_Init () {
    gt_ObjectiveActivateLocksUpdate = TriggerCreate("gt_ObjectiveActivateLocksUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Activate Locks Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveActivateLocksFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveActivateLocksCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyZergBase, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveActivateLocksFailed_Init () {
    gt_ObjectiveActivateLocksFailed = TriggerCreate("gt_ObjectiveActivateLocksFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prevent Overload Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventOverloadCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_UlnarLocks_Primary02");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventOverloadCreate_Init () {
    gt_ObjectivePreventOverloadCreate = TriggerCreate("gt_ObjectivePreventOverloadCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prevent Overload Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventOverloadComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectivePreventOverloadCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyZergBase3, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventOverloadComplete_Init () {
    gt_ObjectivePreventOverloadComplete = TriggerCreate("gt_ObjectivePreventOverloadComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prevent Overload Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventOverloadUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePreventOverloadCreate, true, false);
    TextExpressionSetToken("Param/Expression/03ABB94D", "A", FixedToText(((gv_currentTicks / gv_maxTicks) * 100.0), 1));
    libCOMI_gf_SetMissionObjectiveCustomText("AC_UlnarLocks_Primary02", TextExpressionAssemble("Param/Expression/03ABB94D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventOverloadUpdate_Init () {
    gt_ObjectivePreventOverloadUpdate = TriggerCreate("gt_ObjectivePreventOverloadUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Prevent Overload Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventOverloadFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectivePreventOverloadCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyZergBase3, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventOverloadFailed_Init () {
    gt_ObjectivePreventOverloadFailed = TriggerCreate("gt_ObjectivePreventOverloadFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy XelNaga Construct- Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyXelNagaConstructCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false) && (libNtve_gf_PlayerInCinematicMode(gv_pLAYER_02_USER) == false)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CreateObjectiveCampaign("AC_UlnarLocks_Bonus01");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyXelNagaConstructCreate_Init () {
    gt_ObjectiveDestroyXelNagaConstructCreate = TriggerCreate("gt_ObjectiveDestroyXelNagaConstructCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy XelNaga Construct - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyXelNagaConstructComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyXelNagaConstructCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_UlnarLocks_Bonus01", 1);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_UlnarLocks_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(2.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyXelNagaConstructComplete_Init () {
    gt_ObjectiveDestroyXelNagaConstructComplete = TriggerCreate("gt_ObjectiveDestroyXelNagaConstructComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Destroy XelNaga Construct - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyXelNagaConstructFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveDestroyXelNagaConstructCreate, true, false);
    ObjectiveSetState(gv_objectiveRescueStalkers2, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyXelNagaConstructFailed_Init () {
    gt_ObjectiveDestroyXelNagaConstructFailed = TriggerCreate("gt_ObjectiveDestroyXelNagaConstructFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init03LoadingComplete_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_Init09AI_Init();
    gt_StartGameQ_Init();
    gt_TickCounter_Init();
    gt_CelestialLockInit_Init();
    gt_CelestialLockController_Init();
    gt_FirstCaptureQ_Init();
    gt_InitialEnemyCaptures_Init();
    gt_OverloadBarInitilization_Init();
    gt_TicketWarningController_Init();
    gt_TicketWarning50TransmissionQ_Init();
    gt_TicketWarning25TransmissionQ_Init();
    gt_TicketWarning05TransmissionQ_Init();
    gt_GlobalLockContestedTransmissionQ_Init();
    gt_MainObjectiveTransmissionQ_Init();
    gt_LockAllyNeededTransmissionOldFartsQ_Init();
    gt_CelestialLockDeactivatedQ_Init();
    gt_CelestialLockCapturedQ_Init();
    gt_BonusObjectiveQ_Init();
    gt_BonusObjectiveWaitTrigger_Init();
    gt_BonusObjectiveProximityTrigger_Init();
    gt_SetUpBonusObjectiveEscorts_Init();
    gt_BonusObjectiveDies_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryActivateLocksCompleted_Init();
    gt_AttackWaves_Init();
    gt_RecentlySentWaves_Init();
    gt_ObjectiveActivateLocksCreate_Init();
    gt_ObjectiveActivateLocksComplete_Init();
    gt_ObjectiveActivateLocksUpdate_Init();
    gt_ObjectiveActivateLocksFailed_Init();
    gt_ObjectivePreventOverloadCreate_Init();
    gt_ObjectivePreventOverloadComplete_Init();
    gt_ObjectivePreventOverloadUpdate_Init();
    gt_ObjectivePreventOverloadFailed_Init();
    gt_ObjectiveDestroyXelNagaConstructCreate_Init();
    gt_ObjectiveDestroyXelNagaConstructComplete_Init();
    gt_ObjectiveDestroyXelNagaConstructFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
