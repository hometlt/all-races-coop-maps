//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Amon's Reach
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_02_DOMINION2 = 9;
const int gv_pLAYER_02_DOMINION = 10;
const int gv_pLAYER_05_CONDUIT = 11;
const int gv_pLAYER_06_THRASHER = 6;
const int gv_pLAYER_07_CONDUIT_ENEMY = 7;
const int gv_pLAYER_08_MAP_OBJECTS = 8;
const int gv_wAYPOINT_MAX = 3;
const int gv_highCapacityCount = 8;
const int gv_objective_Evacuated_Quota = 400;
const int gv_buildPower = c_makePower;
const int gv_buildTech = c_avoidFactory | c_avoidDropoff | c_nearDefense | c_avoidChokePoint;
const int gv_buildProduction = c_avoidCloseFactory | c_avoidCloseDropoff | c_valueSpaceMinor | c_avoidChokePoint;
const int gv_buildDef = c_makeDefense;
const int gv_buildDefault = -1;
const fixed gv_conduitAttackDelayInitial = 300.0;
const fixed gv_conduitAttackDelayMin = 240.0;
const fixed gv_conduitAttackDelayMax = 260.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Teleporter {
    unit lv_unitP01;
    unit lv_unitP02;
    region lv_region;
    bool lv_active;
    string lv_minimapIcon;
    string lv_upgrade;
    int lv_textTag;
};

struct gs_LaunchBay {
    unit lv_bay;
    int lv_ping;
    point lv_location;
    int lv_highCapacityShuttles;
    bool lv_isFree;
    bool lv_isBusy;
    fixed lv_timing;
    int lv_player;
    region lv_bayRegion;
    bool lv_enableBullies;
};

struct gs_MapBoundsMinusX {
    fixed lv_minX;
    fixed lv_minY;
    fixed lv_maxX;
    fixed lv_maxY;
};

struct gs_AIHybridParams {
    string lv_hybridT1;
    string lv_hybridT2;
    string lv_hybridT3;
};

struct gs_AIWaveParams {
    point lv_spawnPoint;
    point lv_transportUnloadPoint;
    point[3] lv_waypoint;
    int lv_sidePlayer;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_AIWaveSide_AISideLeft = 0;
const int ge_AIWaveSide_AISideRight = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
int gv_pLAYER_01_USER;
int gv_pLAYER_01_USER2;
playergroup gv_humanPlayerGroup;
playergroup gv_enemyPlayerGroup;
string gv_c_ThrasherUnitType;
bool gv_bridgeExtended;
unit gv_bridgeKey;
gs_Teleporter[6] gv_teleporters;
int gv_teleportersActive;
int gv_exitNodeP1;
int gv_exitNodeP2;
unit gv_warpConduit;
int gv_warpConduitMaxLife;
timer gv_warpConduitDamagedTimer;
unit gv_firstDisabler;
bool gv_firstCreatingTransmission;
string gv_disablerType;
actor gv_fD_Reticle;
int gv_fD_TextTag;
gs_LaunchBay[5] gv_launchBays;
unitgroup gv_launchBaysGroup;
int gv_objective_Evacuated;
int gv_objective_Launched;
string gv_bayTransferCDLink;
bool gv_firstFreedTransmission;
int gv_thrashersAlive;
int gv_thrasherLifeIncrease;
int gv_thrasherShieldsIncrease;
int gv_thrasherLevel;
fixed gv_thrasherAttackCooldown_LightningBreath;
fixed gv_thrasherAttackCooldown_LightningBreathMin;
fixed gv_thrasherAttackCooldown_Bombardment;
unit gv_bonus;
bool gv_bonus_Conduit_Active;
timer gv_bonus_Timer;
timer gv_endgameTimer;
int gv_endgameTimerWindow;
gs_MapBoundsMinusX gv_transportBounds;
int gv_aIWave_NextSide;
gs_AIHybridParams gv_aIHybridsParams;
gs_AIWaveParams gv_aIWaveParams;
string gv_aITransportType;
int gv_aiTierExtra;
int[4] gv_tierResourceBucket;
int[4] gv_hybridTiers;
int[4] gv_hybridTimings;
int gv_hybridTierCurrent;
int gv_hybridWarning;
string gv_aIWorkerType;
int gv_objective_LaunchBays;
int gv_objective_WarpConduit;
int gv_objective_BonusConduit;

void InitGlobals () {
    int init_i;

    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_01_USER2 = 2;
    gv_humanPlayerGroup = PlayerGroupEmpty();
    gv_enemyPlayerGroup = PlayerGroupEmpty();
    gv_c_ThrasherUnitType = "VoidThrasher";
    gv_bridgeKey = UnitFromId(900604899);
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_teleporters[init_i].lv_minimapIcon = "MinimapIcon";
        gv_teleporters[init_i].lv_textTag = c_textTagNone;
    }
    gv_exitNodeP1 = 1;
    gv_exitNodeP2 = 1;
    gv_warpConduit = UnitFromId(19);
    gv_warpConduitDamagedTimer = TimerCreate();
    gv_firstDisabler = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), PointFromId(1198410366));
    gv_firstCreatingTransmission = true;
    gv_disablerType = UnitGetType(gv_firstDisabler);
    gv_fD_TextTag = c_textTagNone;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_launchBays[init_i].lv_ping = c_invalidPingId;
        gv_launchBays[init_i].lv_highCapacityShuttles = 10;
        gv_launchBays[init_i].lv_enableBullies = true;
    }
    gv_launchBaysGroup = UnitGroupEmpty();
    gv_bayTransferCDLink = "triggerBayTransferCD";
    gv_firstFreedTransmission = true;
    gv_thrasherAttackCooldown_LightningBreath = 10.0;
    gv_thrasherAttackCooldown_LightningBreathMin = 6.0;
    gv_thrasherAttackCooldown_Bombardment = 2.0;
    gv_bonus = UnitFromId(1269579259);
    gv_bonus_Timer = TimerCreate();
    gv_endgameTimer = TimerCreate();
    gv_endgameTimerWindow = c_timerWindowNone;
    gv_transportBounds.lv_minX = (PointGetX(RegionGetBoundsMin(RegionPlayableMap())) + 2.0);
    gv_transportBounds.lv_minY = (PointGetY(RegionGetBoundsMin(RegionPlayableMap())) + 2.0);
    gv_transportBounds.lv_maxX = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - 2.0);
    gv_transportBounds.lv_maxY = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - 2.0);
    gv_objective_LaunchBays = c_invalidObjectiveId;
    gv_objective_WarpConduit = c_invalidObjectiveId;
    gv_objective_BonusConduit = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_ClosestEnemyPlayer (point lp_point);
void gf_VoidThrasherAIThink2 (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup);
int gf_TeleporterIdxFromUnit (unit lp_unit);
void gf_TeleporterActivationCheck (int lp_idx);
void gf_InitTeleporters ();
void gf_TeleportersActorMessage (int lp_idx, string lp_message);
void gf_BayDisablerCreatingCheck (int lp_idx);
void gf_ShuttleLaunch (int lp_bayIdx, int lp_toEvacuate);
void gf_ShuttleBirth (unit lp_shuttle);
void gf_ShuttleMoveController (unit lp_shuttle, int lp_shuttleBayIndex);
void gf_ShuttleCurvePath (unit lp_shuttle, point lp_point1, point lp_point2, point lp_point3);
void gf_LaunchBayLogic (int lp_bayIdx);
void gf_SpawnVoidThrasher (point lp_spawnLocation);
void gf_VoidThrasherAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup);
unit gf_SpawnEndgameHybrid2 (point lp_spawnPoint, int lp_player);
string gf_GetT4UnitType ();
void gf_CreateWarpInEffectInstant (unit lp_unit);
void gf_CreateUnitforWarpConduit (string lp_unitType, point lp_createPoint);
void gf_WaitForAITime (fixed lp_aITime);
void gf_AIWaveSetupLeft ();
void gf_AIWaveSetupRight ();
void gf_CreateWarpInEffect (unit lp_unit);
unitgroup gf_AICreateHybrids (int lp_aIPlayer, int lp_waveTier, point lp_spawnLocation);
void gf_AIWaitForUnloadAndDespawn (unit lp_transport, point lp_despawnPoint);
void gf_AIWaitForUnloadAndDespawnInstant (unit lp_transport, point lp_despawnPoint);
void gf_AIAttackWave (int lp_baseTier);
void gf_AIAttackWaveInTransports (int lp_baseTier);
void gf_AIAttackWaveFromBonusConduit (int lp_baseTier);
void gf_TrainUnitIfNotInProgress (int lp_player, string lp_unitType, int lp_count, string lp_requiredTech);
void gf_BuildIfNotInProgress (int lp_player, string lp_unitType, int lp_count, string lp_requiredTech, fixed lp_aiTime, int lp_town, int lp_buildFlags);
void gf_TrainUnitTierIfNotInProgress (int lp_player, string lp_unitType, int lp_tier, string lp_requiredTech);
void gf_AddUnitsTierToConduitWave (int lp_player, string lp_unitType, int lp_tier);
void gf_InitConduitHybridTiersAndTimings ();
void gf_TrySendHybridsWaveToConduit ();
void gf_ConduitAINuke ();
point gf_ConduitAINukePoint (unit lp_ghost);
void gf_ConduitWavePing (unitgroup lp_waveGroup);
void gf_CoopAIInitMinimal (int lp_player, string lp_race);
void gf_AIFillBunkers ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init03LoadingComplete;
trigger gt_Init02Players;
trigger gt_Init04Technology;
trigger gt_Init05UnitsMapObjects;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_Perfomance;
trigger gt_VirophageWeapon;
trigger gt_VoidThrasherMissiles;
trigger gt_StartGame;
trigger gt_IntroQ;
trigger gt_ConduitEnemyIntroQ;
trigger gt_Revealvisibilitycheck;
trigger gt_Revealotherbays;
trigger gt_test1;
trigger gt_test2;
trigger gt_test3;
trigger gt_test4;
trigger gt_BridgeKeyTextTag;
trigger gt_BridgeExtend;
trigger gt_BridgeTransmissionQ;
trigger gt_Teleporter1Activate;
trigger gt_TeleportersIntroQ;
trigger gt_SetExitNode;
trigger gt_DoTeleportP01;
trigger gt_DoTeleportP02;
trigger gt_WarpConduitBossBar;
trigger gt_WarpConduitDamagedQ;
trigger gt_WarpConduitLow50Q;
trigger gt_WarpConduitLow25Q;
trigger gt_WarpConduitLow10Q;
trigger gt_FirstDisablerDeath;
trigger gt_FirstDisablerAttackedAquire;
trigger gt_DisablerCreated;
trigger gt_BayDisablerCreatingQ;
trigger gt_LaunchBayShuttleLaunchLogic;
trigger gt_LaunchBayUpdate;
trigger gt_TransmissionLaunchBayFreedQ;
trigger gt_TransmissionLaunchBayLockedQ;
trigger gt_TransmissionVoidThrasherSingleQ;
trigger gt_TransmissionVoidThrasherMultipleQ;
trigger gt_TransmissionVoidThrasherDeathQ;
trigger gt_Thrasher1Spawn;
trigger gt_Thrasher2Spawn;
trigger gt_Thrasher3Spawn;
trigger gt_Thrasher4Spawn;
trigger gt_ExtraThrasherBreathAttacks;
trigger gt_BonusAttackConduitVisual;
trigger gt_BonusStart;
trigger gt_BonusWave;
trigger gt_BonusTriggerArea;
trigger gt_BonusTriggerDamage;
trigger gt_BonusTimerExpires;
trigger gt_BonusDies;
trigger gt_BonusConduitActivate;
trigger gt_BonusEndgameSpawn;
trigger gt_BonusEndgameWarningQ;
trigger gt_VictoryPrimaryObjectiveCompleted;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_Defeat;
trigger gt_AIAttackWaves;
trigger gt_ConduitHybridWarningQ;
trigger gt_ConduitEnemyAIZerg2;
trigger gt_ConduitEnemyAITerran2;
trigger gt_ConduitEnemyAIProtoss2;
trigger gt_ConduitWave;
trigger gt_StartAI;
trigger gt_AIGiveResources;
trigger gt_AttackWaveWarningQ;
trigger gt_ObjectiveLaunchBaysCreate;
trigger gt_ObjectiveLaunchBaysComplete;
trigger gt_ObjectiveLaunchBaysUpdate;
trigger gt_ObjectiveWarpConduitCreate;
trigger gt_ObjectiveWarpConduitComplete;
trigger gt_ObjectiveWarpConduitFailed;
trigger gt_ObjectiveBonusConduitCreate;
trigger gt_ObjectiveBonusConduitComplete;
trigger gt_ObjectiveBonusConduitFailed;
trigger gt_ObjectiveBonusConduitUpdate;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_ClosestEnemyPlayer (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetOwner(UnitGroupClosestToPoint(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_point));
}

void gf_VoidThrasherAIThink2 (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    // Automatic Variable Declarations
    // Implementation
    AISetUnitTacticalDisabled(lp_aiUnit, true);
}

int gf_TeleporterIdxFromUnit (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto8EB4BB64_ae = 5;
    int auto8EB4BB64_var;

    // Variable Initialization

    // Implementation
    auto8EB4BB64_var = 1;
    for ( ; auto8EB4BB64_var <= auto8EB4BB64_ae; auto8EB4BB64_var += 1 ) {
        if (((lp_unit == gv_teleporters[auto8EB4BB64_var].lv_unitP01) || (lp_unit == gv_teleporters[auto8EB4BB64_var].lv_unitP02))) {
            return auto8EB4BB64_var;
        }

    }
    return 0;
}

trigger auto_gf_TeleporterActivationCheck_Trigger = null;
int auto_gf_TeleporterActivationCheck_lp_idx;

void gf_TeleporterActivationCheck (int lp_idx) {
    auto_gf_TeleporterActivationCheck_lp_idx = lp_idx;

    if (auto_gf_TeleporterActivationCheck_Trigger == null) {
        auto_gf_TeleporterActivationCheck_Trigger = TriggerCreate("auto_gf_TeleporterActivationCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_TeleporterActivationCheck_Trigger, false, false);
}

bool auto_gf_TeleporterActivationCheck_TriggerFunc (bool testConds, bool runActions) {
    int lp_idx = auto_gf_TeleporterActivationCheck_lp_idx;

    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    region lv_rgn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u1 = gv_teleporters[lp_idx].lv_unitP01;
    lv_u2 = gv_teleporters[lp_idx].lv_unitP02;
    lv_rgn = gv_teleporters[lp_idx].lv_region;

    // Implementation
    if ((UnitIsValid(lv_u1) == false)) {
        return true;
    }

    while (((gv_teleporters[1].lv_active == false) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_rgn, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, lv_rgn, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER2, lv_rgn, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeGame);
    }
    gv_teleportersActive += 1;
    gf_TeleportersActorMessage(lp_idx, "Signal On");
    UnitSetOwner(lv_u1, gv_pLAYER_01_USER, false);
    UnitSetOwner(lv_u2, gv_pLAYER_01_USER2, false);
    UnitBehaviorAdd(lv_u1, "DPCPoweringUp", lv_u1, 1);
    UnitBehaviorAdd(lv_u2, "DPCPoweringUp", lv_u2, 1);
    UnitCreateEffectPoint(lv_u1, "DarkPowerCellKnockbackSearch3", UnitGetPosition(lv_u1));
    AnimWait(libNtve_gf_MainActorofUnit(lv_u1), "WorkStart", 0.0, c_animationOffsetEnd);
    PathAddNoFlyZone(UnitGetPosition(lv_u1), 1.6, 2.0);
    gf_TeleportersActorMessage(lp_idx, gv_teleporters[lp_idx].lv_minimapIcon);
    MinimapPing(PlayerGroupAll(), UnitGetPosition(lv_u1), 2.0, Color(0.00, 100.00, 0.00));
    UnitBehaviorRemove(lv_u1, "DPCPoweringUp", 1);
    UnitBehaviorRemove(lv_u2, "DPCPoweringUp", 1);
    UnitBehaviorAdd(lv_u1, "TeleporterSearchP01", lv_u1, 1);
    UnitBehaviorAdd(lv_u2, "TeleporterSearchP02", lv_u2, 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, gv_teleporters[lp_idx].lv_upgrade, 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER2, gv_teleporters[lp_idx].lv_upgrade, 1);
    gv_teleporters[lp_idx].lv_active = true;
    return true;
}

void gf_InitTeleporters () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoB2899A6F_ae = 5;
    const int autoB2899A6F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoB2899A6F_ai >= 0 && lv_i <= autoB2899A6F_ae) || (autoB2899A6F_ai < 0 && lv_i >= autoB2899A6F_ae) ) ; lv_i += autoB2899A6F_ai ) {
        TextExpressionSetToken("Param/Expression/101334BD", "A", StringToText(("#" + IntToString(lv_i))));
        TextTagCreate(TextExpressionAssemble("Param/Expression/101334BD"), 26, UnitGetPosition(gv_teleporters[lv_i].lv_unitP01), 1.0, true, true, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), gv_teleporters[lv_i].lv_unitP01, 1.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkPowerCell", c_unitCreateIgnorePlacement, gv_pLAYER_08_MAP_OBJECTS, UnitGetPosition(gv_teleporters[lv_i].lv_unitP01));
        gv_teleporters[lv_i].lv_unitP02 = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[lv_i].lv_unitP01), "SetFilterPlayers 2");
        ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[lv_i].lv_unitP02), "SetFilterPlayers 1");
        gf_TeleportersActorMessage(lv_i, "SetMinimapVisibility");
        if ((lv_i != 1)) {
            gf_TeleporterActivationCheck(lv_i);
        }

    }
}

void gf_TeleportersActorMessage (int lp_idx, string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[lp_idx].lv_unitP01), lp_message);
    ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[lp_idx].lv_unitP02), lp_message);
}

trigger auto_gf_BayDisablerCreatingCheck_Trigger = null;
int auto_gf_BayDisablerCreatingCheck_lp_idx;

void gf_BayDisablerCreatingCheck (int lp_idx) {
    auto_gf_BayDisablerCreatingCheck_lp_idx = lp_idx;

    if (auto_gf_BayDisablerCreatingCheck_Trigger == null) {
        auto_gf_BayDisablerCreatingCheck_Trigger = TriggerCreate("auto_gf_BayDisablerCreatingCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_BayDisablerCreatingCheck_Trigger, false, false);
}

bool auto_gf_BayDisablerCreatingCheck_TriggerFunc (bool testConds, bool runActions) {
    int lp_idx = auto_gf_BayDisablerCreatingCheck_lp_idx;

    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = c_invalidPingId;

    // Implementation
    while ((libCOMI_gf_GameIsOver() == false) && (gv_objective_Launched < gv_objective_Evacuated_Quota)) {
        Wait(1.0, c_timeGame);
        if ((gv_launchBays[lp_idx].lv_isFree == true) && (UnitGroupCount(UnitGroup(gv_disablerType, c_playerAny, gv_launchBays[lp_idx].lv_bayRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
            libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/91960635"), null, gv_launchBays[lp_idx].lv_location);
            TriggerExecute(gt_BayDisablerCreatingQ, true, false);
            libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), gv_launchBays[lp_idx].lv_location, 270.0, "PingAlert", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
            lv_p = PingLastCreated();
            while ((UnitGroupCount(UnitGroup(gv_disablerType, c_playerAny, gv_launchBays[lp_idx].lv_bayRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0) && (gv_launchBays[lp_idx].lv_isFree == true) && (gv_objective_Launched < gv_objective_Evacuated_Quota)) {
                Wait(1.0, c_timeGame);
            }
            libCOMI_gf_DestroyPingCoop(lv_p);
        }

    }
    return true;
}

trigger auto_gf_ShuttleLaunch_Trigger = null;
int auto_gf_ShuttleLaunch_lp_bayIdx;
int auto_gf_ShuttleLaunch_lp_toEvacuate;

void gf_ShuttleLaunch (int lp_bayIdx, int lp_toEvacuate) {
    auto_gf_ShuttleLaunch_lp_bayIdx = lp_bayIdx;
    auto_gf_ShuttleLaunch_lp_toEvacuate = lp_toEvacuate;

    if (auto_gf_ShuttleLaunch_Trigger == null) {
        auto_gf_ShuttleLaunch_Trigger = TriggerCreate("auto_gf_ShuttleLaunch_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleLaunch_Trigger, false, false);
}

bool auto_gf_ShuttleLaunch_TriggerFunc (bool testConds, bool runActions) {
    int lp_bayIdx = auto_gf_ShuttleLaunch_lp_bayIdx;
    int lp_toEvacuate = auto_gf_ShuttleLaunch_lp_toEvacuate;

    // Variable Declarations
    unit lv_localShuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_launchBays[lp_bayIdx].lv_isBusy = true;
    gv_objective_Launched += lp_toEvacuate;
    libNtve_gf_CreateUnitsAtPoint2(1, "DarkTemplarShuttle", c_unitCreateIgnorePlacement, gv_pLAYER_05_CONDUIT, gv_launchBays[lp_bayIdx].lv_location);
    lv_localShuttle = UnitLastCreated();
    gf_ShuttleBirth(lv_localShuttle);
    TriggerExecute(gt_LaunchBayUpdate, true, false);
    Wait(12.0, c_timeGame);
    gv_launchBays[lp_bayIdx].lv_isBusy = false;
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_localShuttle), c_animNameDefault);
    libCOMI_gf_SetUnitInfoTextCampaign(lv_localShuttle, null, StringExternal("Param/Value/AA595CA7"), null);
    gf_ShuttleMoveController(lv_localShuttle, lp_bayIdx);
    gv_objective_Evacuated += lp_toEvacuate;
    TriggerExecute(gt_LaunchBayUpdate, true, false);
    return true;
}

trigger auto_gf_ShuttleBirth_Trigger = null;
unit auto_gf_ShuttleBirth_lp_shuttle;

void gf_ShuttleBirth (unit lp_shuttle) {
    auto_gf_ShuttleBirth_lp_shuttle = lp_shuttle;

    if (auto_gf_ShuttleBirth_Trigger == null) {
        auto_gf_ShuttleBirth_Trigger = TriggerCreate("auto_gf_ShuttleBirth_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleBirth_Trigger, false, false);
}

bool auto_gf_ShuttleBirth_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shuttle = auto_gf_ShuttleBirth_lp_shuttle;

    // Automatic Variable Declarations
    // Implementation
    UnitSetState(lp_shuttle, c_unitStateInvulnerable, true);
    UnitSetState(lp_shuttle, c_unitStateTargetable, false);
    UnitSetState(lp_shuttle, c_unitStateSelectable, false);
    UnitSetState(lp_shuttle, c_unitStateTooltipable, false);
    UnitSetState(lp_shuttle, c_unitStateCursorable, false);
    UnitSetState(lp_shuttle, c_unitStateStatusBar, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shuttle), c_animNameDefault, "Birth", 0, 0.0);
    UnitIssueOrder(lp_shuttle, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPropertyFixed(lp_shuttle, c_unitPropBaseMovementSpeed, 6.0);
    Wait(12.0, c_timeGame);
    UnitSetState(lp_shuttle, c_unitStateTooltipable, true);
    UnitSetState(lp_shuttle, c_unitStateCursorable, true);
    libCOMI_gf_SetUnitInfoTextCampaign(lp_shuttle, null, StringExternal("Param/Value/DDDBA841"), null);
    libNtve_gf_ChangeUnitDamage(lp_shuttle, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitBehaviorAdd(lp_shuttle, "CloackTargetUndetectable", lp_shuttle, 1);
    return true;
}

void gf_ShuttleMoveController (unit lp_shuttle, int lp_shuttleBayIndex) {
    // Automatic Variable Declarations
    int auto03AA9DB6_val;

    // Implementation
    auto03AA9DB6_val = lp_shuttleBayIndex;
    if (auto03AA9DB6_val == 0) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(931306576), PointFromId(419639473), PointFromId(1469873132));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1469873132), PointFromId(1604219152), PointFromId(1072819228));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1072819228), PointFromId(889973739), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else if (auto03AA9DB6_val == 1) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(159), PointFromId(1792), PointFromId(455));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(455), PointFromId(1794), PointFromId(1793));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1793), PointFromId(1795), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else if (auto03AA9DB6_val == 2) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(307), PointFromId(1797), PointFromId(1796));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1796), PointFromId(1802), PointFromId(1798));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1798), PointFromId(1800), PointFromId(1799));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1799), PointFromId(1801), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else if (auto03AA9DB6_val == 3) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1645), PointFromId(1806), PointFromId(513));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(513), PointFromId(1807), PointFromId(514));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(514), PointFromId(1808), PointFromId(723));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(723), PointFromId(1809), PointFromId(1803));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1803), PointFromId(1810), PointFromId(1804));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1804), PointFromId(1811), PointFromId(1805));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1805), PointFromId(1812), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else if (auto03AA9DB6_val == 4) {
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(314), PointFromId(1814), PointFromId(509));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(509), PointFromId(1815), PointFromId(511));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(511), PointFromId(1816), PointFromId(466));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(466), PointFromId(1817), PointFromId(489));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(489), PointFromId(1818), PointFromId(1813));
        gf_ShuttleCurvePath(lp_shuttle, PointFromId(1813), PointFromId(1819), PointFromId(245));
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
    }
    else {
    }
}

void gf_ShuttleCurvePath (unit lp_shuttle, point lp_point1, point lp_point2, point lp_point3) {
    // Variable Declarations
    point lv_currentTarget;
    point lv_baseOffsetPoint;
    point lv_modOffsetPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_GameIsOver() == true) || (libNtve_gf_PlayerInCinematicMode(1) == true) || (lp_shuttle == null))) {
        return ;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_shuttle), lp_point1) > 1)) {
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), lp_point1), c_orderQueueReplace);
    }

    lv_currentTarget = lp_point1;
    while ((DistanceBetweenPoints(lv_currentTarget, lp_point3) > 1)) {
        lv_baseOffsetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_currentTarget, 1.5, lp_point3);
        lv_modOffsetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_baseOffsetPoint, 0.5, lp_point2);
        UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), lv_modOffsetPoint), c_orderQueueAddToEnd);
        lv_currentTarget = lv_modOffsetPoint;
    }
    while (!((UnitOrderCount(lp_shuttle) <= 2))) {
        Wait(0.1, c_timeGame);
    }
    UnitIssueOrder(lp_shuttle, OrderTargetingPoint(AbilityCommand("move", 0), lp_point3), c_orderQueueReplace);
}

trigger auto_gf_LaunchBayLogic_Trigger = null;
int auto_gf_LaunchBayLogic_lp_bayIdx;

void gf_LaunchBayLogic (int lp_bayIdx) {
    auto_gf_LaunchBayLogic_lp_bayIdx = lp_bayIdx;

    if (auto_gf_LaunchBayLogic_Trigger == null) {
        auto_gf_LaunchBayLogic_Trigger = TriggerCreate("auto_gf_LaunchBayLogic_TriggerFunc");
    }

    TriggerExecute(auto_gf_LaunchBayLogic_Trigger, false, false);
}

bool auto_gf_LaunchBayLogic_TriggerFunc (bool testConds, bool runActions) {
    int lp_bayIdx = auto_gf_LaunchBayLogic_lp_bayIdx;

    // Variable Declarations
    unit lv_localShuttle;
    int lv_toEvacuate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libCOMI_gf_GameIsOver() == false) && (gv_objective_Launched < gv_objective_Evacuated_Quota)) {
        if ((gv_launchBays[lp_bayIdx].lv_isFree == false) && (UnitHasBehavior2(gv_launchBays[lp_bayIdx].lv_bay, "LaunchBayLockDummy") == false)) {
            TriggerExecute(gt_Revealotherbays, true, false);
            libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/1A9DCEAA"), null, gv_launchBays[lp_bayIdx].lv_location);
            TriggerExecute(gt_TransmissionLaunchBayFreedQ, true, false);
            PingDestroy(gv_launchBays[lp_bayIdx].lv_ping);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, gv_launchBays[lp_bayIdx].lv_location, StringExternal("Param/Value/86C657BF"));
            gv_launchBays[lp_bayIdx].lv_ping = PingLastCreated();
            PingSetColor(gv_launchBays[lp_bayIdx].lv_ping, Color(0.00, 100.00, 0.00));
            Wait(2.0, c_timeGame);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_launchBays[lp_bayIdx].lv_bay), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(6.0, c_timeGame);
            gv_launchBays[lp_bayIdx].lv_isFree = true;
            if ((gv_launchBays[lp_bayIdx].lv_enableBullies == true)) {
                AIToggleBulliesInRegion(gv_launchBays[lp_bayIdx].lv_player, gv_launchBays[lp_bayIdx].lv_bayRegion, true);
                gv_launchBays[lp_bayIdx].lv_enableBullies = false;
            }

            continue;
        }

        if ((gv_launchBays[lp_bayIdx].lv_isFree == true) && (UnitHasBehavior2(gv_launchBays[lp_bayIdx].lv_bay, "LaunchBayLockDummy") == true)) {
            libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/B3FE3FE4"), null, gv_launchBays[lp_bayIdx].lv_location);
            TriggerExecute(gt_TransmissionLaunchBayLockedQ, true, false);
            PingDestroy(gv_launchBays[lp_bayIdx].lv_ping);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, gv_launchBays[lp_bayIdx].lv_location, StringExternal("Param/Value/9DCB1F2D"));
            gv_launchBays[lp_bayIdx].lv_ping = PingLastCreated();
            PingSetColor(gv_launchBays[lp_bayIdx].lv_ping, Color(100.00, 0.00, 0.00));
            gv_launchBays[lp_bayIdx].lv_isFree = false;
            Wait(2.0, c_timeGame);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_launchBays[lp_bayIdx].lv_bay), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
            Wait(6.0, c_timeGame);
            continue;
        }

        Wait(1.0, c_timeGame);
    }
    PingDestroy(gv_launchBays[lp_bayIdx].lv_ping);
    gv_launchBays[lp_bayIdx].lv_isFree = false;
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_launchBays[lp_bayIdx].lv_bay), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

trigger auto_gf_SpawnVoidThrasher_Trigger = null;
point auto_gf_SpawnVoidThrasher_lp_spawnLocation;

void gf_SpawnVoidThrasher (point lp_spawnLocation) {
    auto_gf_SpawnVoidThrasher_lp_spawnLocation = lp_spawnLocation;

    if (auto_gf_SpawnVoidThrasher_Trigger == null) {
        auto_gf_SpawnVoidThrasher_Trigger = TriggerCreate("auto_gf_SpawnVoidThrasher_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnVoidThrasher_Trigger, false, false);
}

bool auto_gf_SpawnVoidThrasher_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnLocation = auto_gf_SpawnVoidThrasher_lp_spawnLocation;

    // Variable Declarations
    unit lv_thrasherUnit;
    region lv_terrainHideRegion;
    int lv_ping;

    // Automatic Variable Declarations
    int auto7442FD95_val;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    lv_terrainHideRegion = RegionRect((PointGetX(lp_spawnLocation) - 2.0), (PointGetY(lp_spawnLocation) - 2.0), (PointGetX(lp_spawnLocation) + 2.0), (PointGetY(lp_spawnLocation) + 2.0));
    libNtve_gf_UnitCreateFacingPoint(1, gv_c_ThrasherUnitType, c_unitCreateIgnorePlacement, gv_pLAYER_06_THRASHER, lp_spawnLocation, UnitGetPosition(gv_warpConduit));
    lv_thrasherUnit = UnitLastCreated();
    gv_thrashersAlive += 1;
    UnitSetPropertyFixed(lv_thrasherUnit, c_unitPropLifeMax, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_c_ThrasherUnitType, "LifeMax", gv_pLAYER_06_THRASHER) + gv_thrasherLifeIncrease * gv_thrasherLevel));
    UnitSetPropertyFixed(lv_thrasherUnit, c_unitPropShieldsMax, (CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_c_ThrasherUnitType, "ShieldsMax", gv_pLAYER_06_THRASHER) + gv_thrasherShieldsIncrease * gv_thrasherLevel));
    UnitSetPropertyFixed(lv_thrasherUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_thrasherUnit, c_unitPropShieldsPercent, 100.0);
    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(lp_spawnLocation, 6.0), true, false);
    VisExploreArea(gv_pLAYER_01_USER2, RegionCircle(lp_spawnLocation, 6.0), true, false);
    AISetUnitScriptControlled(lv_thrasherUnit, true);
    libNtve_gf_MakeUnitInvulnerable(lv_thrasherUnit, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_thrasherUnit), c_animNameDefault, "Birth", c_animFlagFullMatch | c_animFlagNonLooping, 0.0);
    AnimWait(libNtve_gf_MainActorofUnit(lv_thrasherUnit), c_animNameDefault, 1.0, c_animationOffsetStart);
    TerrainShowRegion(lv_terrainHideRegion, false);
    libNtve_gf_MakeUnitInvulnerable(lv_thrasherUnit, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_POI, lp_spawnLocation, StringExternal("Param/Value/325E99DC"));
    lv_ping = PingLastCreated();
    AnimWait(libNtve_gf_MainActorofUnit(lv_thrasherUnit), c_animNameDefault, 0.0, c_animationOffsetEnd);
    AISetUnitScriptControlled(lv_thrasherUnit, false);
    auto7442FD95_val = gv_thrasherLevel;
    if (auto7442FD95_val == 1) {
        gv_thrasherAttackCooldown_Bombardment = 2.0;
    }
    else if (auto7442FD95_val == 2) {
        gv_thrasherAttackCooldown_Bombardment = 1.75;
    }
    else if (auto7442FD95_val == 3) {
        gv_thrasherAttackCooldown_Bombardment = 1.6;
    }
    else if (auto7442FD95_val == 4) {
        gv_thrasherAttackCooldown_Bombardment = 1.5;
    }
    else {
    }
    gv_thrasherLevel += 1;
    UnitModifyCooldown(lv_thrasherUnit, "triggerVoidThrasherAttack", (gv_thrasherAttackCooldown_Bombardment * RandomFixed(0.95, 1.05)), c_cooldownOperationSet);
    AIAttackWaveUseUnit(gv_pLAYER_06_THRASHER, lv_thrasherUnit);
    AIAttackWaveSend(gv_pLAYER_06_THRASHER, 0, false);
    while (!((UnitIsAlive(lv_thrasherUnit) == false))) {
        Wait(1.0, c_timeGame);
    }
    TerrainShowRegion(lv_terrainHideRegion, true);
    libCOMI_gf_DestroyPingCoop(lv_ping);
    gv_thrashersAlive -= 1;
    TriggerExecute(gt_TransmissionVoidThrasherDeathQ, true, false);
    return true;
}

void gf_VoidThrasherAIThink (int lp_player, unit lp_aiUnit, unitgroup lp_scanGroup) {
    // Variable Declarations
    unitgroup lv_threatGroup;
    point lv_target;
    int lv_minScoreIter;
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    unitgroup autoF31226D5_g;
    int autoF31226D5_u;
    const int autoA2C11EA6_ae = 0;
    const int autoA2C11EA6_ai = -1;

    // Variable Initialization
    lv_threatGroup = UnitGroupEmpty();

    // Implementation
    lv_threatGroup = UnitGroupFilterAlliance(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_aiUnit), CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VoidThrasherLightningAoE", "Range[" + IntToString(0) + "]", c_playerAny)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), lp_player, c_unitAllianceEnemy, 0);
    autoF31226D5_g = lv_threatGroup;
    autoF31226D5_u = UnitGroupCount(autoF31226D5_g, c_unitCountAll);
    for (;; autoF31226D5_u -= 1) {
        lv_pickedUnit = UnitGroupUnitFromEnd(autoF31226D5_g, autoF31226D5_u);
        if (lv_pickedUnit == null) { break; }
        if (((UnitGetType(lv_pickedUnit) == "Observer") || (UnitGetType(lv_pickedUnit) == "Overseer"))) {
            UnitGroupRemove(lv_threatGroup, lv_pickedUnit);
        }

    }
    if ((UnitGroupCount(lv_threatGroup, c_unitCountAlive) > 0) && (UnitGetDamageTakenTime(lp_aiUnit) <= 10.0)) {
        if ((UnitGetCooldown(lp_aiUnit, "triggerVoidThrasherAttack") <= 0.0) && (UnitGetCooldown(lp_aiUnit, "triggerVoidThrasherAOE") <= 0.0)) {
            lv_minScoreIter = 4;
            for ( ; ( (autoA2C11EA6_ai >= 0 && lv_minScoreIter <= autoA2C11EA6_ae) || (autoA2C11EA6_ai < 0 && lv_minScoreIter >= autoA2C11EA6_ae) ) ; lv_minScoreIter += autoA2C11EA6_ai ) {
                lv_target = AIBestTargetPoint(lv_threatGroup, 1, 30, lv_minScoreIter, 2.2, UnitGetPosition(lp_aiUnit), CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VoidThrasherLightningAoE", "Range[" + IntToString(0) + "]", c_playerAny), c_unitAttributeNone);
                if ((lv_target != null)) {
                    UnitModifyCooldown(lp_aiUnit, "triggerVoidThrasherAttack", gv_thrasherAttackCooldown_LightningBreathMin, c_cooldownOperationDefault);
                    UnitModifyCooldown(lp_aiUnit, "triggerVoidThrasherAOE", gv_thrasherAttackCooldown_LightningBreath, c_cooldownOperationDefault);
                    libNtve_gf_AICast(lp_aiUnit, OrderTargetingPoint(AbilityCommand("VoidThrasherLightningAoE", 0), lv_target));
                }

            }
        }

    }
    else if ((UnitGetCooldown(lp_aiUnit, "triggerVoidThrasherAttack") <= 0.0) && (UnitIsAlive(gv_warpConduit) == true)) {
        UnitModifyCooldown(lp_aiUnit, "triggerVoidThrasherAttack", (gv_thrasherAttackCooldown_Bombardment * RandomFixed(0.95, 1.05)), c_cooldownOperationDefault);
        libNtve_gf_AICast(lp_aiUnit, OrderTargetingUnit(AbilityCommand("KaiserWormScourgeMissile", 0), gv_warpConduit));
    }
}

unit gf_SpawnEndgameHybrid2 (point lp_spawnPoint, int lp_player) {
    // Variable Declarations
    int lv_chance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chance = RandomInt(0, 100);

    // Implementation
    if ((lv_chance < libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 50, 40, 20, 15, 15, 15))) {
        libNtve_gf_UnitCreateFacingPoint(1, "HybridDestroyer", 0, lp_player, lp_spawnPoint, PointFromId(454225662));
    }
    else if ((lv_chance < libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 80, 80, 60, 50, 30, 30))) {
        libNtve_gf_UnitCreateFacingPoint(1, "HybridReaver", 0, lp_player, lp_spawnPoint, PointFromId(454225662));
    }
    else if ((lv_chance < libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 90, 90, 80, 75, 65, 65))) {
        libNtve_gf_UnitCreateFacingPoint(1, "HybridBehemoth", 0, lp_player, lp_spawnPoint, PointFromId(454225662));
    }
    else if (true) {
        libNtve_gf_UnitCreateFacingPoint(1, "HybridDominatorVoid", 0, lp_player, lp_spawnPoint, PointFromId(454225662));
    }
    gf_CreateWarpInEffectInstant(UnitLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
    return UnitLastCreated();
}

string gf_GetT4UnitType () {
    // Automatic Variable Declarations
    string autoDE43C8E1_val;

    // Implementation
    autoDE43C8E1_val = PlayerRace(3);
    if (autoDE43C8E1_val == "Prot") {
        return "Mothership";
    }
    else if (autoDE43C8E1_val == "Zerg") {
        return "Leviathan";
    }
    else {
        return "Loki";
    }
}

trigger auto_gf_CreateWarpInEffectInstant_Trigger = null;
unit auto_gf_CreateWarpInEffectInstant_lp_unit;

void gf_CreateWarpInEffectInstant (unit lp_unit) {
    auto_gf_CreateWarpInEffectInstant_lp_unit = lp_unit;

    if (auto_gf_CreateWarpInEffectInstant_Trigger == null) {
        auto_gf_CreateWarpInEffectInstant_Trigger = TriggerCreate("auto_gf_CreateWarpInEffectInstant_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWarpInEffectInstant_Trigger, false, false);
}

bool auto_gf_CreateWarpInEffectInstant_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateWarpInEffectInstant_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    PlayerCreateEffectUnit(UnitGetOwner(lp_unit), "CloakTargetUndetectablePartSec", lp_unit);
    libNtve_gf_AttachModelToUnit(lp_unit, "HybridConduitRecall", "Ref_Center");
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeAI);
    libNtve_gf_KillModel(lv_model);
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "attack", true);
    return true;
}

trigger auto_gf_CreateUnitforWarpConduit_Trigger = null;
string auto_gf_CreateUnitforWarpConduit_lp_unitType;
point auto_gf_CreateUnitforWarpConduit_lp_createPoint;

void gf_CreateUnitforWarpConduit (string lp_unitType, point lp_createPoint) {
    auto_gf_CreateUnitforWarpConduit_lp_unitType = lp_unitType;
    auto_gf_CreateUnitforWarpConduit_lp_createPoint = lp_createPoint;

    if (auto_gf_CreateUnitforWarpConduit_Trigger == null) {
        auto_gf_CreateUnitforWarpConduit_Trigger = TriggerCreate("auto_gf_CreateUnitforWarpConduit_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateUnitforWarpConduit_Trigger, false, false);
}

bool auto_gf_CreateUnitforWarpConduit_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_gf_CreateUnitforWarpConduit_lp_unitType;
    point lp_createPoint = auto_gf_CreateUnitforWarpConduit_lp_createPoint;

    // Variable Declarations
    unit lv_warpOutUnit;
    int lv_safetyCounter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_unitType, 0, gv_pLAYER_05_CONDUIT, lp_createPoint, UnitGetPosition(gv_warpConduit));
    lv_warpOutUnit = UnitLastCreated();
    UnitSetState(lv_warpOutUnit, c_unitStateSelectable, false);
    UnitSetState(lv_warpOutUnit, c_unitStateTargetable, false);
    UnitSetState(lv_warpOutUnit, c_unitStateStatusBar, false);
    UnitSetState(lv_warpOutUnit, c_unitStateCursorable, false);
    UnitSetState(lv_warpOutUnit, c_unitStateInvulnerable, true);
    libNtve_gf_ShareVisionofUnit(lv_warpOutUnit, true, gv_pLAYER_01_USER);
    if (((PointGetX(UnitGetPosition(lv_warpOutUnit)) > PointGetX(UnitGetPosition(gv_warpConduit))) || (PointGetY(UnitGetPosition(lv_warpOutUnit)) > PointGetY(UnitGetPosition(gv_warpConduit))))) {
        while (true) {
            if ((UnitIsAlive(lv_warpOutUnit) == false)) {
                return true;
            }

            if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), PointFromId(233)) > 2.0)) {
                UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(233)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
                break;
            }
            Wait(0.5, c_timeGame);
        }
    }

    while (true) {
        if ((UnitIsAlive(lv_warpOutUnit) == false)) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), UnitGetPosition(gv_warpConduit)) > 11.5)) {
            UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_warpConduit, OrderTargetingUnit(AbilityCommand("WarpConduitWarpAwayImminent", 0), lv_warpOutUnit), c_orderQueueReplace);
            break;
        }
        Wait(0.5, c_timeGame);
    }
    while (true) {
        if ((UnitIsAlive(lv_warpOutUnit) == false)) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), UnitGetPosition(gv_warpConduit)) > 5.5)) {
            UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_warpConduit, OrderTargetingUnit(AbilityCommand("WarpConduitWarpAwayImminent2", 0), lv_warpOutUnit), c_orderQueueReplace);
            break;
        }
        Wait(0.5, c_timeGame);
    }
    while (true) {
        if ((UnitIsAlive(lv_warpOutUnit) == false)) {
            return true;
        }

        if ((lv_safetyCounter >= 5)) {
            UnitRemove(lv_warpOutUnit);
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_warpOutUnit), UnitGetPosition(gv_warpConduit)) > 2.5)) {
            UnitIssueOrder(lv_warpOutUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_warpConduit)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_warpConduit, OrderTargetingUnit(AbilityCommand("WarpConduitWarpAway", 0), lv_warpOutUnit), c_orderQueueReplace);
            lv_safetyCounter += 1;
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void gf_WaitForAITime (fixed lp_aITime) {
    // Automatic Variable Declarations
    // Implementation
    while (!((AIGetTime() > lp_aITime))) {
        Wait(1.0, c_timeAI);
    }
}

void gf_AIWaveSetupLeft () {
    // Automatic Variable Declarations
    // Implementation
    gv_aIWaveParams.lv_sidePlayer = gv_pLAYER_02_DOMINION;
    if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION2, c_unitAllianceEnemy, RegionFromId(2), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
        gv_aIWaveParams.lv_waypoint[0] = PointFromId(1149951097);
        gv_aIWaveParams.lv_waypoint[1] = PointFromId(337661453);
        gv_aIWaveParams.lv_waypoint[2] = PointFromId(1964487864);
        gv_aIWaveParams.lv_spawnPoint = PointFromId(1403878414);
    }
    else {
        gv_aIWaveParams.lv_waypoint[0] = null;
        gv_aIWaveParams.lv_waypoint[1] = null;
        gv_aIWaveParams.lv_waypoint[2] = null;
        gv_aIWaveParams.lv_spawnPoint = PointFromId(1523338982);
    }
}

void gf_AIWaveSetupRight () {
    // Automatic Variable Declarations
    // Implementation
    gv_aIWaveParams.lv_sidePlayer = gv_pLAYER_02_DOMINION2;
    if ((gv_bridgeExtended == true)) {
        gv_aIWaveParams.lv_spawnPoint = PointFromId(2012001346);
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION2, c_unitAllianceEnemy, RegionFromId(2), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
            gv_aIWaveParams.lv_waypoint[0] = PointFromId(1149951097);
            gv_aIWaveParams.lv_waypoint[1] = PointFromId(337661453);
            gv_aIWaveParams.lv_waypoint[2] = PointFromId(1964487864);
        }
        else {
            gv_aIWaveParams.lv_waypoint[0] = PointFromId(337661453);
            gv_aIWaveParams.lv_waypoint[1] = null;
            gv_aIWaveParams.lv_waypoint[2] = null;
        }
    }
    else {
        gv_aIWaveParams.lv_spawnPoint = PointFromId(250252707);
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_02_DOMINION2, c_unitAllianceEnemy, RegionFromId(2), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
            gv_aIWaveParams.lv_waypoint[0] = PointFromId(1964487864);
            gv_aIWaveParams.lv_waypoint[1] = PointFromId(1149951097);
            gv_aIWaveParams.lv_waypoint[2] = PointFromId(337661453);
        }
        else {
            gv_aIWaveParams.lv_waypoint[0] = null;
            gv_aIWaveParams.lv_waypoint[1] = null;
            gv_aIWaveParams.lv_waypoint[2] = null;
        }
    }
}

trigger auto_gf_CreateWarpInEffect_Trigger = null;
unit auto_gf_CreateWarpInEffect_lp_unit;

void gf_CreateWarpInEffect (unit lp_unit) {
    auto_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_gf_CreateWarpInEffect_Trigger == null) {
        auto_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridDominatorVoid") || (UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridBehemoth") || (UnitGetType(lp_unit) == "HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "HybridWarpInEffect", "Ref_Center");
    }
    else {
        libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Center");
    }
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(5.0, c_timeAI);
    libNtve_gf_KillModel(lv_model);
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "attack", true);
    return true;
}

unitgroup gf_AICreateHybrids (int lp_aIPlayer, int lp_waveTier, point lp_spawnLocation) {
    // Variable Declarations
    int lv_costNumber;
    int lv_hybridNumber;
    unitgroup lv_hybrids;
    int lv_maxCount;

    // Automatic Variable Declarations
    int autoAD61BD43_val;
    unitgroup autoD8C9573B_g;
    int autoD8C9573B_u;
    unit autoD8C9573B_var;

    // Variable Initialization
    lv_costNumber = lp_waveTier;
    lv_hybrids = UnitGroupEmpty();
    lv_maxCount = 4;

    // Implementation
    if ((lv_costNumber < 2)) {
        return lv_hybrids;
    }

    autoAD61BD43_val = libCOMI_gf_GetMissionDifficulty();
    if (autoAD61BD43_val == 1) {
        lv_maxCount = 1;
    }
    else if (autoAD61BD43_val == 2) {
        lv_maxCount = 2;
    }
    else if (autoAD61BD43_val == 3) {
        lv_maxCount = 3;
    }
    else {
    }
    lv_maxCount += gv_aiTierExtra;
    while ((lv_hybridNumber < lv_maxCount) && (lv_costNumber >= 2)) {
        lv_hybridNumber += 1;
        if ((gv_aIHybridsParams.lv_hybridT3 != null) && (gv_objective_Launched > 150) && (RandomInt(0, 500) < gv_objective_Evacuated)) {
            lv_costNumber -= 2;
            UnitCreate(1, gv_aIHybridsParams.lv_hybridT3, 0, lp_aIPlayer, lp_spawnLocation, libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(lv_hybrids, UnitLastCreatedGroup());
        }
        else if ((gv_aIHybridsParams.lv_hybridT1 != null) && (RandomInt(0, 100) > 50)) {
            lv_costNumber -= 1;
            UnitCreate(1, gv_aIHybridsParams.lv_hybridT1, 0, lp_aIPlayer, lp_spawnLocation, libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(lv_hybrids, UnitLastCreatedGroup());
        }
        else if ((gv_aIHybridsParams.lv_hybridT2 != null)) {
            lv_costNumber -= 2;
            UnitCreate(1, gv_aIHybridsParams.lv_hybridT2, 0, lp_aIPlayer, lp_spawnLocation, libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(lv_hybrids, UnitLastCreatedGroup());
        }
    }
    autoD8C9573B_g = lv_hybrids;
    autoD8C9573B_u = UnitGroupCount(autoD8C9573B_g, c_unitCountAll);
    for (;; autoD8C9573B_u -= 1) {
        autoD8C9573B_var = UnitGroupUnitFromEnd(autoD8C9573B_g, autoD8C9573B_u);
        if (autoD8C9573B_var == null) { break; }
        UnitSetPosition(autoD8C9573B_var, lp_spawnLocation, false);
        gf_CreateWarpInEffect(autoD8C9573B_var);
    }
    return lv_hybrids;
}

trigger auto_gf_AIWaitForUnloadAndDespawn_Trigger = null;
unit auto_gf_AIWaitForUnloadAndDespawn_lp_transport;
point auto_gf_AIWaitForUnloadAndDespawn_lp_despawnPoint;

void gf_AIWaitForUnloadAndDespawn (unit lp_transport, point lp_despawnPoint) {
    auto_gf_AIWaitForUnloadAndDespawn_lp_transport = lp_transport;
    auto_gf_AIWaitForUnloadAndDespawn_lp_despawnPoint = lp_despawnPoint;

    if (auto_gf_AIWaitForUnloadAndDespawn_Trigger == null) {
        auto_gf_AIWaitForUnloadAndDespawn_Trigger = TriggerCreate("auto_gf_AIWaitForUnloadAndDespawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIWaitForUnloadAndDespawn_Trigger, false, false);
}

bool auto_gf_AIWaitForUnloadAndDespawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_AIWaitForUnloadAndDespawn_lp_transport;
    point lp_despawnPoint = auto_gf_AIWaitForUnloadAndDespawn_lp_despawnPoint;

    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(lp_transport);

    // Implementation
    while (!(((UnitIsAlive(lp_transport) == false) || (UnitGroupCount(UnitCargoGroup(lp_transport), c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeAI);
    }
    while ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == lv_owner) && (DistanceBetweenPoints(UnitGetPosition(lp_transport), lp_despawnPoint) > 6.0) && (PointGetX(UnitGetPosition(lp_transport)) < gv_transportBounds.lv_minX) && (PointGetY(UnitGetPosition(lp_transport)) < gv_transportBounds.lv_minY) && (PointGetX(UnitGetPosition(lp_transport)) > gv_transportBounds.lv_maxX) && (PointGetY(UnitGetPosition(lp_transport)) > gv_transportBounds.lv_maxY)) {
        UnitIssueOrder(lp_transport, OrderTargetingPoint(AbilityCommand("move", 0), lp_despawnPoint), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    if ((UnitIsAlive(lp_transport) == true)) {
        UnitSetHeight(lp_transport, 16.0, 3.0);
        while (!((UnitIsAlive(lp_transport) == true) && (UnitGetHeight(lp_transport) > 14.0))) {
            Wait(1.0, c_timeAI);
        }
        UnitRemove(lp_transport);
    }

    return true;
}

trigger auto_gf_AIWaitForUnloadAndDespawnInstant_Trigger = null;
unit auto_gf_AIWaitForUnloadAndDespawnInstant_lp_transport;
point auto_gf_AIWaitForUnloadAndDespawnInstant_lp_despawnPoint;

void gf_AIWaitForUnloadAndDespawnInstant (unit lp_transport, point lp_despawnPoint) {
    auto_gf_AIWaitForUnloadAndDespawnInstant_lp_transport = lp_transport;
    auto_gf_AIWaitForUnloadAndDespawnInstant_lp_despawnPoint = lp_despawnPoint;

    if (auto_gf_AIWaitForUnloadAndDespawnInstant_Trigger == null) {
        auto_gf_AIWaitForUnloadAndDespawnInstant_Trigger = TriggerCreate("auto_gf_AIWaitForUnloadAndDespawnInstant_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIWaitForUnloadAndDespawnInstant_Trigger, false, false);
}

bool auto_gf_AIWaitForUnloadAndDespawnInstant_TriggerFunc (bool testConds, bool runActions) {
    unit lp_transport = auto_gf_AIWaitForUnloadAndDespawnInstant_lp_transport;
    point lp_despawnPoint = auto_gf_AIWaitForUnloadAndDespawnInstant_lp_despawnPoint;

    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(lp_transport);

    // Implementation
    while (!(((UnitIsAlive(lp_transport) == false) || (UnitGroupCount(UnitCargoGroup(lp_transport), c_unitCountAlive) == 0)))) {
        Wait(1.0, c_timeAI);
    }
    while ((UnitIsAlive(lp_transport) == true) && (UnitGetOwner(lp_transport) == lv_owner) && (DistanceBetweenPoints(UnitGetPosition(lp_transport), lp_despawnPoint) > 2.0)) {
        UnitIssueOrder(lp_transport, OrderTargetingPoint(AbilityCommand("move", 0), lp_despawnPoint), c_orderQueueReplace);
        Wait(0.0625, c_timeAI);
    }
    if ((UnitIsAlive(lp_transport) == true)) {
        UnitBehaviorAdd(lp_transport, "CloackTargetUndetectable", lp_transport, 1);
        Wait(1.0, c_timeGame);
        UnitRemove(lp_transport);
    }

    return true;
}

trigger auto_gf_AIAttackWave_Trigger = null;
int auto_gf_AIAttackWave_lp_baseTier;

void gf_AIAttackWave (int lp_baseTier) {
    auto_gf_AIAttackWave_lp_baseTier = lp_baseTier;

    if (auto_gf_AIAttackWave_Trigger == null) {
        auto_gf_AIAttackWave_Trigger = TriggerCreate("auto_gf_AIAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIAttackWave_Trigger, false, false);
}

bool auto_gf_AIAttackWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_baseTier = auto_gf_AIAttackWave_lp_baseTier;

    // Variable Declarations
    int lv_waveSize;
    int lv_waveTech;
    unitgroup lv_waveUnits;

    // Automatic Variable Declarations
    const int auto5E1C1F98_ae = 2;
    int auto5E1C1F98_var;

    // Variable Initialization
    lv_waveUnits = UnitGroupEmpty();

    // Implementation
    // Init waveSize and waveTech
    lp_baseTier += gv_aiTierExtra;
    lv_waveSize = lp_baseTier;
    lv_waveTech = lp_baseTier;
    if (lp_baseTier > 6) {lv_waveSize = 6; lv_waveTech = 6;}
    if (lp_baseTier < 0) {lv_waveSize = 0; lv_waveTech = 0;}
    if ((gv_aIWave_NextSide == ge_AIWaveSide_AISideLeft)) {
        gf_AIWaveSetupLeft();
        gv_aIWave_NextSide = ge_AIWaveSide_AISideRight;
    }
    else {
        gf_AIWaveSetupRight();
        gv_aIWave_NextSide = ge_AIWaveSide_AISideLeft;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION, lv_waveSize, lv_waveTech, gv_aIWaveParams.lv_spawnPoint, true);
    lv_waveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    UnitGroupAddUnitGroup(lv_waveUnits, gf_AICreateHybrids(gv_aIWaveParams.lv_sidePlayer, lp_baseTier, gv_aIWaveParams.lv_spawnPoint));
    auto5E1C1F98_var = 0;
    for ( ; auto5E1C1F98_var <= auto5E1C1F98_ae; auto5E1C1F98_var += 1 ) {
        if ((gv_aIWaveParams.lv_waypoint[auto5E1C1F98_var] != null)) {
            libCOMI_gf_AddAttackForceWaypoint(gv_aIWaveParams.lv_waypoint[auto5E1C1F98_var], false);
        }

    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1424614645), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_waveUnits, 0, true);
    return true;
}

trigger auto_gf_AIAttackWaveInTransports_Trigger = null;
int auto_gf_AIAttackWaveInTransports_lp_baseTier;

void gf_AIAttackWaveInTransports (int lp_baseTier) {
    auto_gf_AIAttackWaveInTransports_lp_baseTier = lp_baseTier;

    if (auto_gf_AIAttackWaveInTransports_Trigger == null) {
        auto_gf_AIAttackWaveInTransports_Trigger = TriggerCreate("auto_gf_AIAttackWaveInTransports_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIAttackWaveInTransports_Trigger, false, false);
}

bool auto_gf_AIAttackWaveInTransports_TriggerFunc (bool testConds, bool runActions) {
    int lp_baseTier = auto_gf_AIAttackWaveInTransports_lp_baseTier;

    // Variable Declarations
    int lv_waveSize;
    int lv_waveTech;
    unitgroup lv_waveUnits;
    unitgroup lv_waveTransports;
    int lv_waveSidePlayer;
    point lv_spawnPoint;
    point lv_unloadPoint;
    region lv_unloadRegion;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto4A73E8C2_g;
    int auto4A73E8C2_u;
    unit auto4A73E8C2_var;
    fixed auto75F75709_at;

    // Variable Initialization
    lv_waveUnits = UnitGroupEmpty();
    lv_waveTransports = UnitGroupEmpty();

    // Implementation
    if ((gv_bonus_Conduit_Active == true) && (gv_aIWave_NextSide == ge_AIWaveSide_AISideRight) && (RandomInt(0, 100) < 50)) {
        gf_AIAttackWaveFromBonusConduit(0);
        return true;
    }

    // Init waveSize and waveTech
    lp_baseTier += gv_aiTierExtra;
    lv_waveSize = lp_baseTier;
    lv_waveTech = lp_baseTier;
    if (lp_baseTier > 6) {lv_waveSize = 6; lv_waveTech = 6;}
    if (lp_baseTier < 0) {lv_waveSize = 0; lv_waveTech = 0;}
    if ((gv_aIWave_NextSide == ge_AIWaveSide_AISideLeft)) {
        lv_spawnPoint = PointFromId(517563068);
        lv_unloadPoint = PointFromId(725799934);
        lv_waveSidePlayer = gv_pLAYER_02_DOMINION;
        gv_aIWave_NextSide = ge_AIWaveSide_AISideRight;
    }
    else {
        lv_spawnPoint = PointFromId(550888687);
        lv_unloadPoint = PointFromId(1869779225);
        lv_waveSidePlayer = gv_pLAYER_02_DOMINION2;
        gv_aIWave_NextSide = ge_AIWaveSide_AISideLeft;
    }
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(lv_waveSidePlayer, c_playerAny, lv_waveSize, lv_waveTech, lv_spawnPoint, gv_aITransportType);
    lv_waveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    lv_waveTransports = libCOMI_gf_LastCreatedCoopAttackForceTransports();
    if ((lp_baseTier > 8)) {
        libNtve_gf_UnitCreateFacingPoint(1, gf_GetT4UnitType(), 0, lv_waveSidePlayer, lv_spawnPoint, lv_unloadPoint);
        UnitGroupAdd(lv_waveUnits, UnitLastCreated());
    }

    auto4A73E8C2_g = lv_waveTransports;
    auto4A73E8C2_u = UnitGroupCount(auto4A73E8C2_g, c_unitCountAll);
    for (;; auto4A73E8C2_u -= 1) {
        auto4A73E8C2_var = UnitGroupUnitFromEnd(auto4A73E8C2_g, auto4A73E8C2_u);
        if (auto4A73E8C2_var == null) { break; }
        gf_AIWaitForUnloadAndDespawn(auto4A73E8C2_var, lv_spawnPoint);
    }
    libCOMI_gf_AddAttackForceWaypoint(lv_unloadPoint, true);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1424614645), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_waveUnits, 0, true);
    lv_unloadRegion = RegionCircle(lv_unloadPoint, 5.0);
    auto75F75709_at = 0;
    while (!(((UnitGroupCount(UnitGroupFilterRegion(lv_waveUnits, lv_unloadRegion, 0), c_unitCountAlive) > 0) || (UnitGroupCount(lv_waveUnits, c_unitCountAlive) == 0))) && auto75F75709_at <= 90.0) {
        Wait(1.0, c_timeAI);
        auto75F75709_at = auto75F75709_at + 1.0;
    }
    lv_waveUnits = gf_AICreateHybrids(lv_waveSidePlayer, (lp_baseTier/3), lv_unloadPoint);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1424614645), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_waveUnits, 0, true);
    return true;
}

trigger auto_gf_AIAttackWaveFromBonusConduit_Trigger = null;
int auto_gf_AIAttackWaveFromBonusConduit_lp_baseTier;

void gf_AIAttackWaveFromBonusConduit (int lp_baseTier) {
    auto_gf_AIAttackWaveFromBonusConduit_lp_baseTier = lp_baseTier;

    if (auto_gf_AIAttackWaveFromBonusConduit_Trigger == null) {
        auto_gf_AIAttackWaveFromBonusConduit_Trigger = TriggerCreate("auto_gf_AIAttackWaveFromBonusConduit_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIAttackWaveFromBonusConduit_Trigger, false, false);
}

bool auto_gf_AIAttackWaveFromBonusConduit_TriggerFunc (bool testConds, bool runActions) {
    int lp_baseTier = auto_gf_AIAttackWaveFromBonusConduit_lp_baseTier;

    // Variable Declarations
    int lv_waveSize;
    int lv_waveTech;
    unitgroup lv_waveUnits;
    unitgroup lv_waveTransports;
    int lv_waveSidePlayer;
    point lv_spawnPoint;
    point lv_unloadPoint;
    region lv_unloadRegion;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto85906C0B_g;
    int auto85906C0B_u;
    unit auto85906C0B_var;
    unitgroup autoFACADB68_g;
    int autoFACADB68_u;
    unit autoFACADB68_var;

    // Variable Initialization
    lv_waveUnits = UnitGroupEmpty();
    lv_waveTransports = UnitGroupEmpty();
    lv_waveSidePlayer = gv_pLAYER_02_DOMINION;
    lv_spawnPoint = PointFromId(146758894);
    lv_unloadPoint = PointFromId(454225662);

    // Implementation
    // Init waveSize and waveTech
    lp_baseTier += gv_aiTierExtra;
    lv_waveSize = lp_baseTier;
    lv_waveTech = lp_baseTier;
    if (lp_baseTier > 6) {lv_waveSize = 6; lv_waveTech = 6;}
    if (lp_baseTier < 0) {lv_waveSize = 0; lv_waveTech = 0;}
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(454225662), false);
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1424614645), false);
    libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(lv_waveSidePlayer, c_playerAny, lv_waveSize, lv_waveTech, lv_spawnPoint, gv_aITransportType);
    lv_waveUnits = libCOMI_gf_LastCreatedCoopAttackForce();
    lv_waveTransports = libCOMI_gf_LastCreatedCoopAttackForceTransports();
    UnitGroupIssueOrder(lv_waveTransports, OrderTargetingPoint(AbilityCommand("move", 0), lv_unloadPoint), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lv_waveUnits, gf_AICreateHybrids(lv_waveSidePlayer, (gv_aiTierExtra/2), PointFromId(88129238)));
    libNtve_gf_UnitCreateFacingPoint(1, gf_GetT4UnitType(), 0, lv_waveSidePlayer, PointFromId(146758894), PointFromId(88129238));
    UnitGroupAdd(lv_waveUnits, UnitLastCreated());
    auto85906C0B_g = lv_waveUnits;
    auto85906C0B_u = UnitGroupCount(auto85906C0B_g, c_unitCountAll);
    for (;; auto85906C0B_u -= 1) {
        auto85906C0B_var = UnitGroupUnitFromEnd(auto85906C0B_g, auto85906C0B_u);
        if (auto85906C0B_var == null) { break; }
        if ((UnitMoverExists(auto85906C0B_var, "Fly") == true)) {
            PlayerCreateEffectUnit(UnitGetOwner(auto85906C0B_var), "CloakTargetUndetectable1sec", auto85906C0B_var);
        }

    }
    autoFACADB68_g = lv_waveTransports;
    autoFACADB68_u = UnitGroupCount(autoFACADB68_g, c_unitCountAll);
    for (;; autoFACADB68_u -= 1) {
        autoFACADB68_var = UnitGroupUnitFromEnd(autoFACADB68_g, autoFACADB68_u);
        if (autoFACADB68_var == null) { break; }
        AISetUnitScriptControlled(autoFACADB68_var, false);
        PlayerCreateEffectUnit(UnitGetOwner(autoFACADB68_var), "CloakTargetUndetectable1sec", autoFACADB68_var);
        gf_AIWaitForUnloadAndDespawnInstant(autoFACADB68_var, lv_spawnPoint);
    }
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_waveUnits, 0, true);
    if ((TechTreeUnitCount(lv_waveSidePlayer, gv_aIWorkerType, c_techCountQueuedOrBetter) < 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, gv_aIWorkerType, 0, gv_pLAYER_02_DOMINION2, PointFromId(88129238));
        gf_CreateWarpInEffectInstant(UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, gv_aIWorkerType, 0, gv_pLAYER_02_DOMINION, PointFromId(88129238));
        gf_CreateWarpInEffectInstant(UnitLastCreated());
    }

    return true;
}

void gf_TrainUnitIfNotInProgress (int lp_player, string lp_unitType, int lp_count, string lp_requiredTech) {
    // Variable Declarations
    int lv_progressCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressCount = AITechCount(lp_player, lp_unitType, c_techCountQueuedOrBetter);

    // Implementation
    if (((lp_requiredTech == null) || (TechTreeUnitCount(lp_player, lp_requiredTech, c_techCountCompleteOnly) != 0)) && (lv_progressCount < lp_count)) {
        AITrain(lp_player, 0, -1, lp_unitType, 1);
    }

}

void gf_BuildIfNotInProgress (int lp_player, string lp_unitType, int lp_count, string lp_requiredTech, fixed lp_aiTime, int lp_town, int lp_buildFlags) {
    // Variable Declarations
    int lv_progressCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressCount = AITechCount(lp_player, lp_unitType, c_techCountQueuedOrBetter);

    // Implementation
    if ((AIGetTime() > lp_aiTime) && ((lp_requiredTech == null) || (TechTreeUnitCount(lp_player, lp_requiredTech, c_techCountCompleteOnly) != 0)) && (lv_progressCount < lp_count)) {
        AIBuild(lp_player, 2, lp_town, lp_unitType, 1, lp_buildFlags);
    }

}

void gf_TrainUnitTierIfNotInProgress (int lp_player, string lp_unitType, int lp_tier, string lp_requiredTech) {
    // Variable Declarations
    fixed lv_unitSupply;
    int lv_progressCount;
    int lv_neededCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitSupply = (AbsF(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lp_unitType, "Food", lp_player)) + 1.0);
    lv_progressCount = AITechCount(lp_player, lp_unitType, c_techCountQueuedOrBetter);
    lv_neededCount = RoundI(((gv_tierResourceBucket[lp_tier] * 1.4) / lv_unitSupply));

    // Implementation
    if (((lp_requiredTech == null) || (TechTreeUnitCount(lp_player, lp_requiredTech, c_techCountCompleteOnly) != 0)) && (lv_progressCount < lv_neededCount)) {
        AITrain(lp_player, 0, -1, lp_unitType, 1);
    }

}

void gf_AddUnitsTierToConduitWave (int lp_player, string lp_unitType, int lp_tier) {
    // Variable Declarations
    fixed lv_unitSupply;
    int lv_neededCount;
    unitgroup lv_readyGroup;
    int lv_offenceCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitSupply = (AbsF(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lp_unitType, "Food", lp_player)) + 1.0);
    lv_neededCount = RoundI((gv_tierResourceBucket[lp_tier] / lv_unitSupply));
    lv_readyGroup = UnitGroup(lp_unitType, gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_neededCount);
    lv_offenceCount = UnitGroupCount(lv_readyGroup, c_unitCountAlive);

    // Implementation
    if ((lv_offenceCount > 0)) {
        AIAttackWaveUseGroup(lp_player, lv_readyGroup);
    }

}

void gf_InitConduitHybridTiersAndTimings () {
    // Automatic Variable Declarations
    // Implementation
    gv_hybridTiers[0] = 4;
    gv_hybridTiers[1] = 8;
    gv_hybridTiers[2] = 0;
    gv_hybridTiers[3] = 15;
    gv_hybridTimings[0] = 100;
    gv_hybridTimings[1] = 200;
    gv_hybridTimings[2] = 300;
    gv_hybridTimings[3] = 360;
}

void gf_TrySendHybridsWaveToConduit () {
    // Variable Declarations
    unitgroup lv_hybrids;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hybrids = UnitGroupEmpty();

    // Implementation
    while ((gv_hybridTierCurrent <= 3) && (gv_objective_Launched > gv_hybridTimings[gv_hybridTierCurrent])) {
        UnitGroupAddUnitGroup(lv_hybrids, gf_AICreateHybrids(gv_pLAYER_07_CONDUIT_ENEMY, gv_hybridTiers[gv_hybridTierCurrent], PointFromId(992)));
        gv_hybridTierCurrent += 1;
    }
    if ((UnitGroupCount(lv_hybrids, c_unitCountAlive) > 0)) {
        TriggerExecute(gt_ConduitHybridWarningQ, true, false);
        AIAttackWaveUseGroup(gv_pLAYER_07_CONDUIT_ENEMY, lv_hybrids);
        AIAttackWaveSend(gv_pLAYER_07_CONDUIT_ENEMY, 0, true);
    }

}

void gf_ConduitAINuke () {
    // Variable Declarations
    unit lv_g;

    // Automatic Variable Declarations
    unitgroup auto288EEAFB_g;
    int auto288EEAFB_u;
    unit auto288EEAFB_var;

    // Variable Initialization

    // Implementation
    if (((TechTreeUnitCount(gv_pLAYER_07_CONDUIT_ENEMY, "Nuke", c_techCountCompleteOnly) == 0) || (PlayerGetCooldown(gv_pLAYER_07_CONDUIT_ENEMY, "triggerAINuke") > 0.0))) {
        return ;
    }

    auto288EEAFB_g = UnitGroup("Ghost", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto288EEAFB_u = UnitGroupCount(auto288EEAFB_g, c_unitCountAll);
    for (;; auto288EEAFB_u -= 1) {
        auto288EEAFB_var = UnitGroupUnitFromEnd(auto288EEAFB_g, auto288EEAFB_u);
        if (auto288EEAFB_var == null) { break; }
        if ((UnitGetPropertyFixed(auto288EEAFB_var, c_unitPropEnergy, c_unitPropCurrent) > 100.0)) {
            PlayerAddCooldown(gv_pLAYER_07_CONDUIT_ENEMY, "triggerAINuke", 20.0);
            libNtve_gf_AICast(auto288EEAFB_var, Order(AbilityCommand("GhostCloak", 0)));
            Wait(1.0, c_timeAI);
            libNtve_gf_AICast(auto288EEAFB_var, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), gf_ConduitAINukePoint(auto288EEAFB_var)));
            return ;
        }

    }
}

point gf_ConduitAINukePoint (unit lp_ghost) {
    // Variable Declarations
    point lv_p;
    int lv_u_path;
    int lv_path;

    // Automatic Variable Declarations
    unitgroup autoBE4BF8E1_g;
    int autoBE4BF8E1_u;
    unit autoBE4BF8E1_var;

    // Variable Initialization
    lv_p = PointFromId(561);
    lv_u_path = AIPathingCostUnit(lp_ghost, lv_p, c_ignoreEnemyBuildings);

    // Implementation
    autoBE4BF8E1_g = UnitGroupAlliance(gv_pLAYER_07_CONDUIT_ENEMY, c_unitAllianceEnemy, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoBE4BF8E1_u = UnitGroupCount(autoBE4BF8E1_g, c_unitCountAll);
    for (;; autoBE4BF8E1_u -= 1) {
        autoBE4BF8E1_var = UnitGroupUnitFromEnd(autoBE4BF8E1_g, autoBE4BF8E1_u);
        if (autoBE4BF8E1_var == null) { break; }
        lv_path = AIPathingCostUnit(lp_ghost, UnitGetPosition(autoBE4BF8E1_var), c_ignoreEnemyBuildings);
        if ((lv_path < lv_u_path)) {
            lv_u_path = lv_path;
            lv_p = UnitGetPosition(autoBE4BF8E1_var);
        }

    }
    return lv_p;
}

trigger auto_gf_ConduitWavePing_Trigger = null;
unitgroup auto_gf_ConduitWavePing_lp_waveGroup;

void gf_ConduitWavePing (unitgroup lp_waveGroup) {
    auto_gf_ConduitWavePing_lp_waveGroup = lp_waveGroup;

    if (auto_gf_ConduitWavePing_Trigger == null) {
        auto_gf_ConduitWavePing_Trigger = TriggerCreate("auto_gf_ConduitWavePing_TriggerFunc");
    }

    TriggerExecute(auto_gf_ConduitWavePing_Trigger, false, false);
}

bool auto_gf_ConduitWavePing_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_waveGroup = auto_gf_ConduitWavePing_lp_waveGroup;

    // Variable Declarations
    unitgroup lv_pingUnits;
    int lv_wavePing;
    bool lv_haveHybrid;

    // Automatic Variable Declarations
    unitgroup auto7042FAF6_g;
    int auto7042FAF6_u;
    unit auto7042FAF6_var;

    // Variable Initialization
    lv_pingUnits = UnitGroupEmpty();
    lv_wavePing = c_invalidPingId;

    // Implementation
    auto7042FAF6_g = lp_waveGroup;
    auto7042FAF6_u = UnitGroupCount(auto7042FAF6_g, c_unitCountAll);
    for (;; auto7042FAF6_u -= 1) {
        auto7042FAF6_var = UnitGroupUnitFromEnd(auto7042FAF6_g, auto7042FAF6_u);
        if (auto7042FAF6_var == null) { break; }
        if ((libCOMI_gf_UnitisValidforanAttackWavePing(auto7042FAF6_var) == true)) {
            if ((UnitHasBehavior2(auto7042FAF6_var, "HybridUnitDummy") == true)) {
                lv_haveHybrid = true;
            }

            UnitGroupAdd(lv_pingUnits, auto7042FAF6_var);
        }

    }
    if ((libNtve_gf_UnitGroupIsDead(lv_pingUnits) == true)) {
        return true;
    }

    if ((lv_haveHybrid == true)) {
        libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_pingUnits), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.6);
    }
    else {
        libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGroupCenterOfGroup(lv_pingUnits), 270.0, "PingDiamond", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.3);
    }
    lv_wavePing = PingLastCreated();
    PingSetTooltip(lv_wavePing, StringExternal("Param/Value/F4A31CBD"));
    while ((libNtve_gf_UnitGroupIsDead(lv_pingUnits) == false)) {
        PingSetPosition(lv_wavePing, UnitGroupCenterOfGroup(lv_pingUnits));
        Wait(0.25, c_timeAI);
    }
    PingDestroy(lv_wavePing);
    return true;
}

void gf_CoopAIInitMinimal (int lp_player, string lp_race) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetRace(lp_player, lp_race);
    PlayerSetDifficulty(lp_player, libCOMI_gf_GetMissionDifficulty());
    AICampaignStart(lp_player);
    AIAddDetectionDangerCampaignUnits(lp_player);
    AIAddAirDangerCampaignUnits(lp_player);
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 1) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 2))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("SiegeMode", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToSwarmHostBurrowedMP", 0), false);
        TechTreeUpgradeAddLevel(lp_player, "SwarmHostFakeWeapon", 1);
    }
    else {
        TechTreeUpgradeAddLevel(lp_player, "CausticSpray", 1);
    }
    TechTreeUpgradeAddLevel(lp_player, "CoopAIReaperCost", 1);
    TechTreeUpgradeAddLevel(lp_player, "CoopAIMutaliskCost", 1);
}

void gf_AIFillBunkers () {
    // Automatic Variable Declarations
    unitgroup autoD3B323EC_g;
    int autoD3B323EC_u;
    unit autoD3B323EC_var;

    // Implementation
    autoD3B323EC_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD3B323EC_u = UnitGroupCount(autoD3B323EC_g, c_unitCountAll);
    for (;; autoD3B323EC_u -= 1) {
        autoD3B323EC_var = UnitGroupUnitFromEnd(autoD3B323EC_g, autoD3B323EC_u);
        if (autoD3B323EC_var == null) { break; }
        if ((PlayerGroupHasPlayer(gv_enemyPlayerGroup, UnitGetOwner(autoD3B323EC_var)) == true)) {
            if ((RandomInt(0, 100) > 70)) {
                UnitCargoCreate(autoD3B323EC_var, "Reaper", 1);
                UnitCargoCreate(autoD3B323EC_var, "Marine", 2);
            }
            else {
                UnitCargoCreate(autoD3B323EC_var, "Marauder", 1);
                UnitCargoCreate(autoD3B323EC_var, "Marine", 1);
            }
        }

    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("PShakuras012", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugEnableType(1, true);
    TriggerDebugSetTypeFile(1, "TriggerDebug.txt");
    TriggerDebugEnableType(2, true);
    TriggerDebugSetTypeFile(2, "TriggerDebug02.txt");
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05UnitsMapObjects, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartGame, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_human;
    int lv_enemy;

    // Automatic Variable Declarations
    playergroup autoD1AAB48F_g;
    playergroup autoE2FE5494_g;
    playergroup autoF267AB7D_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_01_USER2 = libCOMI_gf_GetRolePlayer(2);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION2);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_02_DOMINION);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_06_THRASHER);
    autoD1AAB48F_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_human = -1;
    while (true) {
        lv_human = PlayerGroupNextPlayer(autoD1AAB48F_g, lv_human);
        if (lv_human < 0) { break; }
        PlayerSetAlliance(gv_pLAYER_05_CONDUIT, c_allianceIdPower, lv_human, true);
        autoE2FE5494_g = gv_enemyPlayerGroup;
        lv_enemy = -1;
        while (true) {
            lv_enemy = PlayerGroupNextPlayer(autoE2FE5494_g, lv_enemy);
            if (lv_enemy < 0) { break; }
            libNtve_gf_SetAlliance(lv_human, lv_enemy, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    autoF267AB7D_g = libCOMI_gf_GetEnemyPlayers();
    lv_enemy = -1;
    while (true) {
        lv_enemy = PlayerGroupNextPlayer(autoF267AB7D_g, lv_enemy);
        if (lv_enemy < 0) { break; }
        libNtve_gf_SetAlliance(gv_pLAYER_05_CONDUIT, lv_enemy, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(gv_pLAYER_07_CONDUIT_ENEMY, lv_enemy, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(gv_pLAYER_07_CONDUIT_ENEMY, c_allianceIdPower, lv_enemy, true);
    }
    libNtve_gf_SetAlliance(gv_pLAYER_05_CONDUIT, gv_pLAYER_07_CONDUIT_ENEMY, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    PlayerGroupAdd(gv_enemyPlayerGroup, gv_pLAYER_07_CONDUIT_ENEMY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_pLAYER_02_DOMINION, AbilityCommand("SpawnLarva", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units/Map Objects
//--------------------------------------------------------------------------------------------------
bool gt_Init05UnitsMapObjects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoCC8A3298_ae = 4;
    int autoCC8A3298_var;
    const int autoFEF278C1_ae = 4;
    int autoFEF278C1_var;
    unitgroup auto88E24685_g;
    int auto88E24685_u;
    unit auto88E24685_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BridgeKeyTextTag, true, false);
    libNtve_gf_SendActorMessageToUnit(gv_warpConduit, "Signal Off");
    libCOMI_gf_SetUnitInfoTextCampaign(gv_warpConduit, null, StringExternal("Param/Value/DA841D50"), null);
    UnitSetState(gv_warpConduit, c_unitStateTargetable, false);
    UnitSetState(UnitFromId(275334686), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(275334686), c_unitStateSelectable, false);
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal PadOn", "ProtossWarpInPadFlat", RegionFromId(3));
    gv_launchBays[0].lv_bay = UnitFromId(1226682968);
    gv_launchBays[1].lv_bay = UnitFromId(405);
    gv_launchBays[2].lv_bay = UnitFromId(497);
    gv_launchBays[3].lv_bay = UnitFromId(401);
    gv_launchBays[4].lv_bay = UnitFromId(98);
    gv_launchBays[0].lv_location = PointFromId(931306576);
    gv_launchBays[1].lv_location = PointFromId(159);
    gv_launchBays[2].lv_location = PointFromId(307);
    gv_launchBays[3].lv_location = PointFromId(1645);
    gv_launchBays[4].lv_location = PointFromId(314);
    gv_launchBays[0].lv_timing = 21.125;
    gv_launchBays[1].lv_timing = 25.375;
    gv_launchBays[2].lv_timing = 26.375;
    gv_launchBays[3].lv_timing = 34.5;
    gv_launchBays[4].lv_timing = 37.0;
    gv_launchBays[0].lv_player = gv_pLAYER_07_CONDUIT_ENEMY;
    gv_launchBays[1].lv_player = gv_pLAYER_02_DOMINION;
    gv_launchBays[2].lv_player = gv_pLAYER_02_DOMINION2;
    gv_launchBays[3].lv_player = gv_pLAYER_02_DOMINION;
    gv_launchBays[4].lv_player = gv_pLAYER_02_DOMINION2;
    gv_launchBays[0].lv_bayRegion = RegionFromId(16);
    gv_launchBays[1].lv_bayRegion = RegionFromId(8);
    gv_launchBays[2].lv_bayRegion = RegionFromId(10);
    gv_launchBays[3].lv_bayRegion = RegionFromId(9);
    gv_launchBays[4].lv_bayRegion = RegionFromId(12);
    gv_launchBays[0].lv_enableBullies = false;
    UnitGroupAdd(gv_launchBaysGroup, gv_launchBays[0].lv_bay);
    UnitGroupAdd(gv_launchBaysGroup, gv_launchBays[1].lv_bay);
    UnitGroupAdd(gv_launchBaysGroup, gv_launchBays[2].lv_bay);
    UnitGroupAdd(gv_launchBaysGroup, gv_launchBays[3].lv_bay);
    UnitGroupAdd(gv_launchBaysGroup, gv_launchBays[4].lv_bay);
    gv_teleporters[1].lv_unitP01 = UnitFromId(1176660088);
    gv_teleporters[2].lv_unitP01 = UnitFromId(556044776);
    gv_teleporters[3].lv_unitP01 = UnitFromId(1199524505);
    gv_teleporters[4].lv_unitP01 = UnitFromId(1879848931);
    gv_teleporters[5].lv_unitP01 = UnitFromId(1068182832);
    gv_teleporters[1].lv_region = RegionFromId(7);
    gv_teleporters[2].lv_region = RegionFromId(11);
    gv_teleporters[3].lv_region = RegionFromId(13);
    gv_teleporters[4].lv_region = RegionFromId(14);
    gv_teleporters[5].lv_region = RegionFromId(15);
    gv_teleporters[1].lv_minimapIcon = "MinimapIcon TgIcons\\icon-teleporter-1.dds";
    gv_teleporters[2].lv_minimapIcon = "MinimapIcon TgIcons\\icon-teleporter-2.dds";
    gv_teleporters[3].lv_minimapIcon = "MinimapIcon TgIcons\\icon-teleporter-3.dds";
    gv_teleporters[4].lv_minimapIcon = "MinimapIcon TgIcons\\icon-teleporter-4.dds";
    gv_teleporters[5].lv_minimapIcon = "MinimapIcon TgIcons\\icon-teleporter-5.dds";
    gv_teleporters[2].lv_upgrade = "TeleporterActive2";
    gv_teleporters[3].lv_upgrade = "TeleporterActive3";
    gv_teleporters[4].lv_upgrade = "TeleporterActive4";
    gv_teleporters[5].lv_upgrade = "TeleporterActive5";
    gf_InitTeleporters();
    libNtve_gf_SendActorMessageToUnit(UnitFromId(275334686), "SetMinimapVisibility");
    autoCC8A3298_var = 0;
    for ( ; autoCC8A3298_var <= autoCC8A3298_ae; autoCC8A3298_var += 1 ) {
        libNtve_gf_SendActorMessageToUnit(gv_launchBays[autoCC8A3298_var].lv_bay, "SetMinimapVisibility");
    }
    autoFEF278C1_var = 0;
    for ( ; autoFEF278C1_var <= autoFEF278C1_ae; autoFEF278C1_var += 1 ) {
        UnitSetState(gv_launchBays[autoFEF278C1_var].lv_bay, c_unitStateSelectable, false);
        UnitSetState(gv_launchBays[autoFEF278C1_var].lv_bay, c_unitStateTargetable, false);
        UnitSetState(gv_launchBays[autoFEF278C1_var].lv_bay, c_unitStateStatusBar, false);
        UnitSetState(gv_launchBays[autoFEF278C1_var].lv_bay, c_unitStateCursorable, false);
        UnitSetState(gv_launchBays[autoFEF278C1_var].lv_bay, c_unitStateInvulnerable, true);
    }
    auto88E24685_g = UnitGroup("CreepPodsUnit", gv_pLAYER_02_DOMINION, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto88E24685_u = UnitGroupCount(auto88E24685_g, c_unitCountAll);
    for (;; auto88E24685_u -= 1) {
        auto88E24685_var = UnitGroupUnitFromEnd(auto88E24685_g, auto88E24685_u);
        if (auto88E24685_var == null) { break; }
        UnitBehaviorAddPlayer(auto88E24685_var, "Harmless", gv_pLAYER_02_DOMINION, 1);
    }
    UnitSetOwner(UnitFromId(231010790), gv_pLAYER_01_USER, false);
    UnitBehaviorAdd(UnitFromId(231010790), "ConduitKhaydarinDamageTransfer", gv_warpConduit, 1);
    UnitSetState(UnitFromId(231010790), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(231010790), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(231010790), c_unitStateStatusBar, false);
    UnitSetOwner(UnitFromId(1273145682), gv_pLAYER_01_USER2, false);
    UnitBehaviorAdd(UnitFromId(1273145682), "ConduitKhaydarinDamageTransfer", gv_warpConduit, 1);
    UnitSetState(UnitFromId(1273145682), c_unitStateTargetable, false);
    UnitSetState(UnitFromId(1273145682), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1273145682), c_unitStateStatusBar, false);
    UnitCreateEffectPoint(gv_warpConduit, "ConduitKhaydarinBeamTargetAreaCP", RegionGetCenter(RegionFromId(4)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05UnitsMapObjects_Init () {
    gt_Init05UnitsMapObjects = TriggerCreate("gt_Init05UnitsMapObjects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ConversationDataRegisterPortrait("char_ACShakurasEvacAI", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_hybridAG;
    string lv_hybridG;
    int lv_i;
    int lv_disablerBuildP03;
    int lv_disablerBuildP04;
    point lv_pt;

    // Automatic Variable Declarations
    const int autoB11DC979_ae = 6;
    const int autoB11DC979_ai = 1;
    const int auto70C592D7_ae = 10;
    const int auto70C592D7_ai = 1;

    // Variable Initialization
    lv_hybridAG = libCOMI_gf_DifficultyValueFixed3(libCOMI_gf_GetMissionDifficulty(), null, "HybridDestroyer", "HybridNemesis", "HybridDominatorVoid", "HybridDominatorVoid", "HybridDominatorVoid");
    lv_hybridG = libCOMI_gf_DifficultyValueFixed3(libCOMI_gf_GetMissionDifficulty(), "HybridDestroyer", "HybridReaver", "HybridReaver", "HybridBehemoth", "HybridBehemoth", "HybridBehemoth");
    lv_disablerBuildP03 = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 60, 50, 40, 30, 30, 30);
    lv_disablerBuildP04 = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 100, 80, 60, 50, 30, 30);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_hybridAG != null)) {
        lv_i = 1;
        for ( ; ( (autoB11DC979_ai >= 0 && lv_i <= autoB11DC979_ae) || (autoB11DC979_ai < 0 && lv_i >= autoB11DC979_ae) ) ; lv_i += autoB11DC979_ai ) {
            lv_pt = PointFromName(("hybridAG" + IntToString(lv_i)));
            UnitCreate(1, lv_hybridAG, 0, gf_ClosestEnemyPlayer(lv_pt), lv_pt, libNtve_gf_RandomAngle());
        }
    }

    lv_i = 1;
    for ( ; ( (auto70C592D7_ai >= 0 && lv_i <= auto70C592D7_ae) || (auto70C592D7_ai < 0 && lv_i >= auto70C592D7_ae) ) ; lv_i += auto70C592D7_ai ) {
        lv_pt = PointFromName(("hybridG" + IntToString(lv_i)));
        UnitCreate(1, lv_hybridG, 0, gf_ClosestEnemyPlayer(lv_pt), lv_pt, libNtve_gf_RandomAngle());
    }
    gv_warpConduitMaxLife = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 9000, 8000, 6000, 5000, 3000, 1000);
    UnitSetPropertyFixed(gv_warpConduit, c_unitPropLifeMax, gv_warpConduitMaxLife);
    UnitSetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_bonus, c_unitPropLifeMax, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 4000, 6000, 8000, 9000, 10000, 11000));
    UnitSetPropertyFixed(gv_bonus, c_unitPropLifePercent, 100.0);
    gv_thrasherLifeIncrease = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 100, 200, 500, 500, 500);
    gv_thrasherShieldsIncrease = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 200, 500, 1000, 1500, 2000, 2000);
    CatalogFieldValueSet(c_gameCatalogBehavior, "ConduitKhaydarinDamageTransfer", "DamageResponse.ModifyFraction", gv_pLAYER_01_USER, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER), 1.2, 1.0, 0.8, 0.6, 0.2, 0.2), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "ConduitKhaydarinDamageTransfer", "DamageResponse.ModifyFraction", gv_pLAYER_01_USER2, FixedToString(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER2), 1.2, 1.0, 0.8, 0.6, 0.2, 0.2), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "DroneMorphHive", "InfoArray[" + IntToString(17) + "].Time", gv_pLAYER_02_DOMINION2, IntToString(lv_disablerBuildP03));
    CatalogFieldValueSet(c_gameCatalogAbil, "DroneMorphHive", "InfoArray[" + IntToString(17) + "].Time", gv_pLAYER_02_DOMINION, IntToString(lv_disablerBuildP04));
    CatalogFieldValueSet(c_gameCatalogAbil, "ProtossBuildAIOnly", "InfoArray[" + IntToString(0) + "].Time", gv_pLAYER_02_DOMINION2, IntToString(lv_disablerBuildP03));
    CatalogFieldValueSet(c_gameCatalogAbil, "ProtossBuildAIOnly", "InfoArray[" + IntToString(0) + "].Time", gv_pLAYER_02_DOMINION, IntToString(lv_disablerBuildP04));
    CatalogFieldValueSet(c_gameCatalogAbil, "TerranBuildAIOnly", "InfoArray[" + IntToString(7) + "].Time", gv_pLAYER_02_DOMINION2, IntToString(lv_disablerBuildP03));
    CatalogFieldValueSet(c_gameCatalogAbil, "TerranBuildAIOnly", "InfoArray[" + IntToString(7) + "].Time", gv_pLAYER_02_DOMINION, IntToString(lv_disablerBuildP04));
    gv_tierResourceBucket[0] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 2, 3, 4, 6, 8, 10);
    gv_tierResourceBucket[1] = (gv_tierResourceBucket[0] * 2);
    gv_tierResourceBucket[2] = (gv_tierResourceBucket[0] * 4);
    gv_tierResourceBucket[3] = (gv_tierResourceBucket[0] * 6);
    if (((libCOMI_gf_GetMissionDifficulty() == 1 || libCOMI_gf_GetMissionDifficulty() == 2) == false)) {
        gv_aIHybridsParams.lv_hybridT1 = "HybridDestroyer";
        gv_thrasherLevel = 1;
        if ((RandomInt(0, 100) < 50)) {
            gv_aIHybridsParams.lv_hybridT2 = "HybridNemesis";
            gv_aIHybridsParams.lv_hybridT3 = "HybridBehemoth";
        }
        else {
            gv_aIHybridsParams.lv_hybridT2 = "HybridReaver";
            gv_aIHybridsParams.lv_hybridT3 = "HybridDominatorVoid";
        }
    }
    else {
        if ((RandomInt(0, 100) < 50)) {
            gv_aIHybridsParams.lv_hybridT2 = "HybridNemesis";
        }
        else {
            gv_aIHybridsParams.lv_hybridT1 = "HybridDestroyer";
            gv_aIHybridsParams.lv_hybridT2 = "HybridReaver";
        }
    }
    if ((RandomInt(0, 100) < libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 20, 50, 60, 80, 80, 80))) {
        gv_aIWave_NextSide = ge_AIWaveSide_AISideLeft;
    }
    else {
        gv_aIWave_NextSide = ge_AIWaveSide_AISideRight;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Perfomance
//--------------------------------------------------------------------------------------------------
bool gt_Perfomance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SleepUnit(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Perfomance_Init () {
    gt_Perfomance = TriggerCreate("gt_Perfomance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virophage Weapon
//--------------------------------------------------------------------------------------------------
bool gt_VirophageWeapon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_caster, "VileStreamLM2", RegionRandomPoint(RegionCircle(UnitGetPosition(lv_target), 3.0)));
    Wait(0.2, c_timeGame);
    UnitCreateEffectPoint(lv_caster, "VileStreamLM2", RegionRandomPoint(RegionCircle(UnitGetPosition(lv_target), 3.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VirophageWeapon_Init () {
    gt_VirophageWeapon = TriggerCreate("gt_VirophageWeapon_Func");
    TriggerAddEventPlayerEffectUsed(gt_VirophageWeapon, c_playerAny, "VileStreamImpactSet2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Thrasher Missiles
//--------------------------------------------------------------------------------------------------
bool gt_VoidThrasherMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "KaiserWormScourgeMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missileUnit = EventUnit();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "KaiserWormScourgeMissile", UnitGetPosition(lv_missileUnit), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, UnitGetFacing(lv_missileUnit));
    libARRA_gf_StorePingForUnit(lv_missileUnit, 1, PingLastCreated());
    PingSetUnit(PingLastCreated(), lv_missileUnit);
    PingSetScale(PingLastCreated(), 0.075);
    while (!((UnitIsAlive(EventUnit()) == false))) {
        Wait(0.0625, c_timeGame);
    }
    PingDestroy(libARRA_gf_PingStoredForUnit(lv_missileUnit, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidThrasherMissiles_Init () {
    gt_VoidThrasherMissiles = TriggerCreate("gt_VoidThrasherMissiles_Func");
    TriggerAddEventUnitRegion(gt_VoidThrasherMissiles, null, RegionPlayableMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto164FF22D_g;
    int auto164FF22D_u;
    unit auto164FF22D_var;
    const int auto759BD870_ae = 4;
    int auto759BD870_var;
    const int autoBC711F32_ae = 4;
    int autoBC711F32_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/BCF92819"), null, PointFromId(1));
    UIAlertPoint("Trigger", gv_pLAYER_01_USER2, StringExternal("Param/Value/FFA9EBCC"), null, PointFromId(1143083995));
    auto164FF22D_g = UnitGroup(gv_disablerType, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto164FF22D_u = UnitGroupCount(auto164FF22D_g, c_unitCountAll);
    for (;; auto164FF22D_u -= 1) {
        auto164FF22D_var = UnitGroupUnitFromEnd(auto164FF22D_g, auto164FF22D_u);
        if (auto164FF22D_var == null) { break; }
        UnitIssueOrder(auto164FF22D_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_launchBaysGroup, UnitGetPosition(auto164FF22D_var))), c_orderQueueReplace);
    }
    libCOMI_gf_CreateReticleEffectAndTextTagAtPoint(libCOMI_ge_CampaginReticleType_ProtossEnemy, libCOMI_ge_CampaginReticleSize_Medium, null, PointFromId(1198410366));
    gv_fD_Reticle = libNtve_gf_ActorLastCreated();
    TextTagCreate(StringExternal("Param/Value/BF990AD1"), 18, UnitGetPosition(gv_firstDisabler), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), gv_firstDisabler, 1.0);
    gv_fD_TextTag = TextTagLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(1198410366), 1.0), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER2, RegionCircle(PointFromId(1198410366), 1.0), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(PointFromId(1401690211), 2.0), 0.1, false);
    VisRevealArea(gv_pLAYER_01_USER2, RegionCircle(PointFromId(1401690211), 2.0), 0.1, false);
    TriggerEnable(gt_FirstDisablerDeath, true);
    TriggerExecute(gt_IntroQ, true, false);
    TriggerExecute(gt_LaunchBayShuttleLaunchLogic, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerEnable(gt_Revealotherbays, true);
    TriggerEnable(gt_Revealvisibilitycheck, true);
    Wait(5.0, c_timeGame);
    auto759BD870_var = 0;
    for ( ; auto759BD870_var <= auto759BD870_ae; auto759BD870_var += 1 ) {
        gf_LaunchBayLogic(auto759BD870_var);
    }
    autoBC711F32_var = 1;
    for ( ; autoBC711F32_var <= autoBC711F32_ae; autoBC711F32_var += 1 ) {
        gf_BayDisablerCreatingCheck(autoBC711F32_var);
    }
    Wait(50.0, c_timeGame);
    TriggerExecute(gt_Teleporter1Activate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_launchBays[0].lv_location, 5.0), true, false);
    VisExploreArea(gv_pLAYER_01_USER2, RegionCircle(gv_launchBays[0].lv_location, 5.0), true, false);
    TriggerExecute(gt_ObjectiveLaunchBaysCreate, true, true);
    libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/543C4089"), null, gv_launchBays[0].lv_location);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, gv_launchBays[0].lv_location, StringExternal("Param/Value/88B6F537"));
    gv_launchBays[0].lv_ping = PingLastCreated();
    PingSetColor(gv_launchBays[0].lv_ping, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("Intro1SE", true, -1);
    TriggerQueueExit();
    while (!((GameGetMissionTime() > 150.0))) {
        Wait(10.0, c_timeGame);
    }
    TriggerExecute(gt_ConduitEnemyIntroQ, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit Enemy Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_ConduitEnemyIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER2)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/ECA5A008"), null, UnitGetPosition(gv_warpConduit));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_warpConduit), StringExternal("Param/Value/8A2AE8C8"));
    PingSetColor(PingLastCreated(), Color(0.00, 50.20, 50.20));
    PingSetScale(PingLastCreated(), 0.8);
    TriggerExecute(gt_ObjectiveWarpConduitCreate, true, false);
    TriggerExecute(gt_WarpConduitBossBar, true, false);
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("ConduitEnemyIntroSE", true, -1);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(1401690211), 5.0, Color(100.00, 0.00, 0.00));
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConduitEnemyIntroQ_Init () {
    gt_ConduitEnemyIntroQ = TriggerCreate("gt_ConduitEnemyIntroQ_Func");
    TriggerAddEventUnitRegion(gt_ConduitEnemyIntroQ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal visibility check
//--------------------------------------------------------------------------------------------------
bool gt_Revealvisibilitycheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[1].lv_bay, gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[2].lv_bay, gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[3].lv_bay, gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[4].lv_bay, gv_pLAYER_01_USER) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[1].lv_bay, gv_pLAYER_01_USER2) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[2].lv_bay, gv_pLAYER_01_USER2) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[3].lv_bay, gv_pLAYER_01_USER2) == true) || (libNtve_gf_UnitIsVisibleToPlayer(gv_launchBays[4].lv_bay, gv_pLAYER_01_USER2) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Revealotherbays, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Revealvisibilitycheck_Init () {
    gt_Revealvisibilitycheck = TriggerCreate("gt_Revealvisibilitycheck_Func");
    TriggerEnable(gt_Revealvisibilitycheck, false);
    TriggerAddEventTimePeriodic(gt_Revealvisibilitycheck, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal other bays
//--------------------------------------------------------------------------------------------------
bool gt_Revealotherbays_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0DCB0501_ae = 4;
    int auto0DCB0501_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Revealvisibilitycheck, false);
    auto0DCB0501_var = 1;
    for ( ; auto0DCB0501_var <= auto0DCB0501_ae; auto0DCB0501_var += 1 ) {
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, gv_launchBays[auto0DCB0501_var].lv_location, StringExternal("Param/Value/24EB95A0"));
        gv_launchBays[auto0DCB0501_var].lv_ping = PingLastCreated();
        PingSetColor(gv_launchBays[auto0DCB0501_var].lv_ping, Color(100.00, 0.00, 0.00));
        VisExploreArea(gv_pLAYER_01_USER, RegionCircle(gv_launchBays[auto0DCB0501_var].lv_location, 5.0), true, false);
        VisExploreArea(gv_pLAYER_01_USER2, RegionCircle(gv_launchBays[auto0DCB0501_var].lv_location, 5.0), true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Revealotherbays_Init () {
    gt_Revealotherbays = TriggerCreate("gt_Revealotherbays_Func");
    TriggerEnable(gt_Revealotherbays, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: test1
//--------------------------------------------------------------------------------------------------
bool gt_test1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_e;
    int lv_i;
    int lv_j;
    string lv_s;

    // Automatic Variable Declarations
    int autoE95CE2A1_catalog;
    int autoE95CE2A1_i;

    // Variable Initialization
    lv_s = "";

    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(3, "abil_id.txt");
    TriggerDebugSetTypeFile(4, "abil_id2.txt");
    autoE95CE2A1_catalog = c_gameCatalogAbil;
    autoE95CE2A1_i = 1;
    for ( ; autoE95CE2A1_i <= CatalogEntryCount(c_gameCatalogAbil) ; autoE95CE2A1_i += 1 ) {
        lv_e = CatalogEntryGet(autoE95CE2A1_catalog, autoE95CE2A1_i);
        TextExpressionSetToken("Param/Expression/102CBF36", "A", IntToText(lv_i));
        TextExpressionSetToken("Param/Expression/102CBF36", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogAbil, lv_e, "Name", c_playerAny)));
        TriggerDebugOutput(3, TextExpressionAssemble("Param/Expression/102CBF36"), false);
        lv_i += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_test1_Init () {
    gt_test1 = TriggerCreate("gt_test1_Func");
    TriggerAddEventChatMessage(gt_test1, c_playerAny, "test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: test2
//--------------------------------------------------------------------------------------------------
bool gt_test2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BonusStart, false);
    TriggerExecute(gt_BonusTimerExpires, true, false);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_BonusEndgameSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_test2_Init () {
    gt_test2 = TriggerCreate("gt_test2_Func");
    TriggerAddEventChatMessage(gt_test2, c_playerAny, "test2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: test3
//--------------------------------------------------------------------------------------------------
bool gt_test3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6D64F385_g;
    int auto6D64F385_u;
    unit auto6D64F385_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D64F385_g = UnitGroupSelected(1);
    auto6D64F385_u = UnitGroupCount(auto6D64F385_g, c_unitCountAll);
    for (;; auto6D64F385_u -= 1) {
        auto6D64F385_var = UnitGroupUnitFromEnd(auto6D64F385_g, auto6D64F385_u);
        if (auto6D64F385_var == null) { break; }
        UnitCreateEffectUnit(gv_teleporters[1].lv_unitP01, "DarkPowerCellTeleportAllOrder", auto6D64F385_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_test3_Init () {
    gt_test3 = TriggerCreate("gt_test3_Func");
    TriggerAddEventChatMessage(gt_test3, c_playerAny, "test3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: test4
//--------------------------------------------------------------------------------------------------
bool gt_test4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(1, "NukePersistent", CameraGetTarget(1));
    PlayerCreateEffectPoint(1, "NukeDetonate", CameraGetTarget(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_test4_Init () {
    gt_test4 = TriggerCreate("gt_test4_Func");
    TriggerAddEventChatMessage(gt_test4, c_playerAny, "test4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Key Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_BridgeKeyTextTag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bridgeTextTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bridgeTextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/D16A7B75"), 18, UnitGetPosition(gv_bridgeKey), 3.5, true, true, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), gv_bridgeKey, 3.5);
    lv_bridgeTextTag = TextTagLastCreated();
    while ((UnitGetType(gv_bridgeKey) == "NullCircuit2")) {
        Wait(0.2, c_timeGame);
    }
    TextTagDestroy(lv_bridgeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeKeyTextTag_Init () {
    gt_BridgeKeyTextTag = TriggerCreate("gt_BridgeKeyTextTag_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Extend
//--------------------------------------------------------------------------------------------------
bool gt_BridgeExtend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(525873880), Order(AbilityCommand("ShakurasLightBridgeNW10Out", 0)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    gv_bridgeExtended = true;
    libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/D38E9952"), null, RegionGetCenter(RegionFromId(1)));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(1)), 5.0, Color(100.00, 100.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeExtend_Init () {
    gt_BridgeExtend = TriggerCreate("gt_BridgeExtend_Func");
    TriggerAddEventUnitAbility(gt_BridgeExtend, UnitRefFromUnit(UnitFromId(900604899)), AbilityCommand("PowerConductorLockShakurasMorph", 0), c_abilMorphStageActorEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bridge Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BridgeTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((EventPlayer() == gv_pLAYER_01_USER) || (EventPlayer() == gv_pLAYER_01_USER2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/A0A3C7C9"), null, RegionGetCenter(RegionFromId(1)));
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(1)), 5.0, Color(100.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("BridgeSE", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BridgeTransmissionQ_Init () {
    gt_BridgeTransmissionQ = TriggerCreate("gt_BridgeTransmissionQ_Func");
    TriggerAddEventUnitRegion(gt_BridgeTransmissionQ, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleporter 1 Activate
//--------------------------------------------------------------------------------------------------
bool gt_Teleporter1Activate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto933BCDD2_ae = 5;
    const int auto933BCDD2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(7), 0.0, false);
    VisRevealArea(gv_pLAYER_01_USER2, RegionFromId(7), 0.0, false);
    gv_teleportersActive += 1;
    lv_i = 1;
    for ( ; ( (auto933BCDD2_ai >= 0 && lv_i <= auto933BCDD2_ae) || (auto933BCDD2_ai < 0 && lv_i >= auto933BCDD2_ae) ) ; lv_i += auto933BCDD2_ai ) {
        gf_TeleportersActorMessage(lv_i, "SetMinimapVisibility 1");
        VisExploreArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_teleporters[lv_i].lv_unitP01), 1.0), true, false);
        VisExploreArea(gv_pLAYER_01_USER2, RegionCircle(UnitGetPosition(gv_teleporters[lv_i].lv_unitP01), 1.0), true, false);
    }
    TriggerExecute(gt_TeleportersIntroQ, true, false);
    gf_TeleportersActorMessage(1, "Signal On");
    UnitSetOwner(gv_teleporters[1].lv_unitP01, gv_pLAYER_01_USER, false);
    UnitSetOwner(gv_teleporters[1].lv_unitP02, gv_pLAYER_01_USER2, false);
    UnitBehaviorAdd(gv_teleporters[1].lv_unitP01, "DPCPoweringUp", gv_teleporters[1].lv_unitP01, 1);
    UnitBehaviorAdd(gv_teleporters[1].lv_unitP02, "DPCPoweringUp", gv_teleporters[1].lv_unitP02, 1);
    UnitAbilityEnable(gv_teleporters[1].lv_unitP01, "SetExitNode", false);
    UnitAbilityEnable(gv_teleporters[1].lv_unitP02, "SetExitNode", false);
    AnimWait(libNtve_gf_MainActorofUnit(gv_teleporters[1].lv_unitP01), "WorkStart", 0.0, c_animationOffsetEnd);
    PathAddNoFlyZone(UnitGetPosition(gv_teleporters[1].lv_unitP01), 1.6, 2.0);
    AnimWait(libNtve_gf_MainActorofUnit(gv_teleporters[1].lv_unitP01), "WorkMid", 0.0, c_animationOffsetEnd);
    gf_TeleportersActorMessage(1, gv_teleporters[1].lv_minimapIcon);
    gf_TeleportersActorMessage(1, "MinimapIconTintColor 255,0,255,0");
    UnitBehaviorRemove(gv_teleporters[1].lv_unitP01, "DPCPoweringUp", 1);
    UnitBehaviorRemove(gv_teleporters[1].lv_unitP02, "DPCPoweringUp", 1);
    UnitBehaviorAdd(gv_teleporters[1].lv_unitP01, "ExitNodeP01", gv_teleporters[1].lv_unitP01, 1);
    UnitBehaviorAdd(gv_teleporters[1].lv_unitP02, "ExitNodeP02", gv_teleporters[1].lv_unitP02, 1);
    UnitBehaviorAdd(gv_teleporters[1].lv_unitP01, "TeleporterSearchP01", gv_teleporters[1].lv_unitP01, 1);
    UnitBehaviorAdd(gv_teleporters[1].lv_unitP02, "TeleporterSearchP02", gv_teleporters[1].lv_unitP02, 1);
    UnitAbilityEnable(gv_teleporters[1].lv_unitP01, "SetExitNode", true);
    UnitAbilityEnable(gv_teleporters[1].lv_unitP02, "SetExitNode", true);
    gv_teleporters[1].lv_active = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teleporter1Activate_Init () {
    gt_Teleporter1Activate = TriggerCreate("gt_Teleporter1Activate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleporters Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TeleportersIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/6BD3EC5F"), null, UnitGetPosition(gv_teleporters[1].lv_unitP01));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_teleporters[1].lv_unitP01), 2.0, Color(100.00, 100.00, 0.00));
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("PowerCellsSE", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeleportersIntroQ_Init () {
    gt_TeleportersIntroQ = TriggerCreate("gt_TeleportersIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Exit Node
//--------------------------------------------------------------------------------------------------
bool gt_SetExitNode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_massRecall;
    abilcmd lv_cmd;
    int lv_p;
    int lv_new;

    // Automatic Variable Declarations
    abilcmd auto9932DD9B_val;

    // Variable Initialization
    lv_cmd = EventUnitAbility();
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto9932DD9B_val = lv_cmd;
    if (auto9932DD9B_val == AbilityCommand("SetExitNode", 0)) {
        lv_new = 1;
    }
    else if (auto9932DD9B_val == AbilityCommand("SetExitNode", 1)) {
        if ((gv_teleporters[2].lv_active == true)) {
            lv_new = 2;
        }

    }
    else if (auto9932DD9B_val == AbilityCommand("SetExitNode", 2)) {
        if ((gv_teleporters[3].lv_active == true)) {
            lv_new = 3;
        }

    }
    else if (auto9932DD9B_val == AbilityCommand("SetExitNode", 3)) {
        if ((gv_teleporters[4].lv_active == true)) {
            lv_new = 4;
        }

    }
    else if (auto9932DD9B_val == AbilityCommand("SetExitNode", 4)) {
        if ((gv_teleporters[5].lv_active == true)) {
            lv_new = 5;
        }

    }
    else if (auto9932DD9B_val == AbilityCommand("SetExitNode", 5)) {
        lv_new = gf_TeleporterIdxFromUnit(EventUnit());
        if ((gv_teleporters[lv_new].lv_active == false)) {
            lv_new = 0;
        }

    }
    else if (auto9932DD9B_val == AbilityCommand("SetExitNode", 6)) {
        lv_new = gf_TeleporterIdxFromUnit(EventUnit());
        if ((gv_teleporters[lv_new].lv_active == false)) {
            lv_new = 0;
        }
        else {
            lv_massRecall = true;
        }
    }
    else {
        return true;
    }
    if (((lv_new >= 1) && (lv_new <= 5))) {
        if ((lv_p == gv_pLAYER_01_USER) && (gv_exitNodeP1 != lv_new)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[lv_new].lv_unitP01), "MinimapIconTintColor 255,0,255,0");
            UnitBehaviorAdd(gv_teleporters[lv_new].lv_unitP01, "ExitNodeP01", gv_teleporters[lv_new].lv_unitP01, 1);
            ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[gv_exitNodeP1].lv_unitP01), "MinimapIconTintColor 255,192,255,192");
            UnitBehaviorRemove(gv_teleporters[gv_exitNodeP1].lv_unitP01, "ExitNodeP01", 1);
            gv_exitNodeP1 = lv_new;
        }

        if ((lv_p == gv_pLAYER_01_USER2) && (gv_exitNodeP2 != lv_new)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[lv_new].lv_unitP02), "MinimapIconTintColor 255,0,255,0");
            UnitBehaviorAdd(gv_teleporters[lv_new].lv_unitP02, "ExitNodeP02", gv_teleporters[lv_new].lv_unitP02, 1);
            ActorSend(libNtve_gf_MainActorofUnit(gv_teleporters[gv_exitNodeP2].lv_unitP02), "MinimapIconTintColor 255,192,255,192");
            UnitBehaviorRemove(gv_teleporters[gv_exitNodeP2].lv_unitP02, "ExitNodeP02", 1);
            gv_exitNodeP2 = lv_new;
        }

        if ((lv_massRecall == true)) {
            UnitCreateEffectUnit(EventUnit(), "DarkPowerCellMassRecallSearch", EventUnit());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetExitNode_Init () {
    gt_SetExitNode = TriggerCreate("gt_SetExitNode_Func");
    TriggerAddEventUnitAbility(gt_SetExitNode, null, AbilityCommand("SetExitNode", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Do Teleport P01
//--------------------------------------------------------------------------------------------------
bool gt_DoTeleportP01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(gv_teleporters[gv_exitNodeP1].lv_unitP01, "DarkPowerCellTeleport", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoTeleportP01_Init () {
    gt_DoTeleportP01 = TriggerCreate("gt_DoTeleportP01_Func");
    TriggerAddEventPlayerEffectUsed(gt_DoTeleportP01, gv_pLAYER_01_USER, "DarkPowerCellTeleportAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Do Teleport P02
//--------------------------------------------------------------------------------------------------
bool gt_DoTeleportP02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(gv_teleporters[gv_exitNodeP2].lv_unitP02, "DarkPowerCellTeleport", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoTeleportP02_Init () {
    gt_DoTeleportP02 = TriggerCreate("gt_DoTeleportP02_Func");
    TriggerAddEventPlayerEffectUsed(gt_DoTeleportP02, gv_pLAYER_01_USER2, "DarkPowerCellTeleportAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Boss Bar
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitBossBar_Init () {
    gt_WarpConduitBossBar = TriggerCreate("gt_WarpConduitBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Damaged Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitDamagedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((EventUnitDamageAmount() > 1.0))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_warpConduitDamagedTimer) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((EventUnitDamageSourcePlayer() == gv_pLAYER_06_THRASHER)) {
        TriggerQueueEnter();
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("VoidThrasherAttacking", true, -1);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8FD0A94A"), null, gv_warpConduit);
        UIAlertUnit("Trigger", gv_pLAYER_01_USER2, StringExternal("Param/Value/E9CDDE1B"), null, gv_warpConduit);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_warpConduit), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("MainObjectiveDefendDamaged", true, -1);
        TriggerQueueExit();
    }
    TimerStart(gv_warpConduitDamagedTimer, 30.0, false, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitDamagedQ_Init () {
    gt_WarpConduitDamagedQ = TriggerCreate("gt_WarpConduitDamagedQ_Func");
    TriggerAddEventUnitDamaged(gt_WarpConduitDamagedQ, UnitRefFromVariable("gv_warpConduit"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Low 50% Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitLow50Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) > 25.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_warpConduit), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7F2101BC"), null, gv_warpConduit);
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("MainObjectiveDefendDamaged", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitLow50Q_Init () {
    gt_WarpConduitLow50Q = TriggerCreate("gt_WarpConduitLow50Q_Func");
    TriggerEnable(gt_WarpConduitLow50Q, false);
    TriggerAddEventTimePeriodic(gt_WarpConduitLow50Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Low 25% Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitLow25Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) <= 25.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) > 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_WarpConduitLow50Q, false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_warpConduit), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/B5C2371F"), null, gv_warpConduit);
    UIAlertUnit("Trigger", gv_pLAYER_01_USER2, StringExternal("Param/Value/A2DA9460"), null, gv_warpConduit);
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("MainObjectiveDefendCritical", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitLow25Q_Init () {
    gt_WarpConduitLow25Q = TriggerCreate("gt_WarpConduitLow25Q_Func");
    TriggerAddEventTimePeriodic(gt_WarpConduitLow25Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Conduit Low 10% Q
//--------------------------------------------------------------------------------------------------
bool gt_WarpConduitLow10Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_warpConduit, c_unitPropLifePercent, c_unitPropCurrent) <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_WarpConduitLow25Q, false);
    TriggerEnable(gt_WarpConduitLow50Q, false);
    TriggerQueueEnter();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_warpConduit), 5.0, Color(100.00, 0.00, 0.00));
    UIAlertUnit("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/9A24113C"), null, gv_warpConduit);
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("MainObjectiveDefendCritical", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpConduitLow10Q_Init () {
    gt_WarpConduitLow10Q = TriggerCreate("gt_WarpConduitLow10Q_Func");
    TriggerEnable(gt_WarpConduitLow10Q, false);
    TriggerAddEventTimePeriodic(gt_WarpConduitLow10Q, 5.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Disabler Death
//--------------------------------------------------------------------------------------------------
bool gt_FirstDisablerDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((EventUnit() == gv_firstDisabler))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FirstDisablerAttackedAquire, false);
    libNtve_gf_KillModel(gv_fD_Reticle);
    TextTagDestroy(gv_fD_TextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDisablerDeath_Init () {
    gt_FirstDisablerDeath = TriggerCreate("gt_FirstDisablerDeath_Func");
    TriggerEnable(gt_FirstDisablerDeath, false);
    TriggerAddEventUnitDied(gt_FirstDisablerDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Disabler Attacked - Aquire
//--------------------------------------------------------------------------------------------------
bool gt_FirstDisablerAttackedAquire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF790E9CC_g;
    int autoF790E9CC_u;
    unit autoF790E9CC_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF790E9CC_g = UnitGroupAlliance(UnitGetOwner(EventUnitTarget()), c_unitAllianceEnemy, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF790E9CC_u = UnitGroupCount(autoF790E9CC_g, c_unitCountAll);
    for (;; autoF790E9CC_u -= 1) {
        autoF790E9CC_var = UnitGroupUnitFromEnd(autoF790E9CC_g, autoF790E9CC_u);
        if (autoF790E9CC_var == null) { break; }
        UnitCreateEffectUnit(EventUnitTarget(), "AquireDummyDamage", autoF790E9CC_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstDisablerAttackedAquire_Init () {
    gt_FirstDisablerAttackedAquire = TriggerCreate("gt_FirstDisablerAttackedAquire_Func");
    TriggerAddEventUnitAttacked2(gt_FirstDisablerAttackedAquire, UnitRefFromVariable("gv_firstDisabler"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disabler Created
//--------------------------------------------------------------------------------------------------
bool gt_DisablerCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == gv_disablerType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_launchBaysGroup, UnitGetPosition(EventUnitProgressUnit()))), c_orderQueueReplace);
    Wait(1.0, c_timeAI);
    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_launchBaysGroup, UnitGetPosition(EventUnitProgressUnit()))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisablerCreated_Init () {
    gt_DisablerCreated = TriggerCreate("gt_DisablerCreated_Func");
    TriggerAddEventUnitConstructProgress(gt_DisablerCreated, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bay Disabler Creating Q
//--------------------------------------------------------------------------------------------------
bool gt_BayDisablerCreatingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_firstCreatingTransmission == true)) {
        gv_firstCreatingTransmission = false;
        TriggerQueueEnter();
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("BayContestedSE", true, -1);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("CaptureEnemyCapturing", true, -1);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BayDisablerCreatingQ_Init () {
    gt_BayDisablerCreatingQ = TriggerCreate("gt_BayDisablerCreatingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Bay Shuttle Launch Logic
//--------------------------------------------------------------------------------------------------
bool gt_LaunchBayShuttleLaunchLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bayIdx;
    unit lv_localShuttle;
    fixed lv_timing;
    fixed lv_lastTiming;
    int lv_toEvacuate;

    // Automatic Variable Declarations
    const int auto10FA461E_ae = 4;
    const int auto10FA461E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(1.0, c_timeGame);
        if ((lv_lastTiming > 1.0)) {
            lv_lastTiming -= 1.0;
        }

        lv_bayIdx = 0;
        for ( ; ( (auto10FA461E_ai >= 0 && lv_bayIdx <= auto10FA461E_ae) || (auto10FA461E_ai < 0 && lv_bayIdx >= auto10FA461E_ae) ) ; lv_bayIdx += auto10FA461E_ai ) {
            if ((gv_launchBays[lv_bayIdx].lv_isFree == true) && (gv_launchBays[lv_bayIdx].lv_isBusy == false) && (gv_objective_Launched < gv_objective_Evacuated_Quota) && (UnitGetCooldown(gv_launchBays[lv_bayIdx].lv_bay, "triggerLaunchBayExtraDelay") <= 0.0)) {
                lv_timing = MaxF(((lv_lastTiming + 5.0) - gv_launchBays[lv_bayIdx].lv_timing), 1.0);
                Wait(lv_timing, c_timeGame);
                if ((gv_launchBays[lv_bayIdx].lv_isFree == true) && (gv_launchBays[lv_bayIdx].lv_isBusy == false) && (gv_objective_Launched < gv_objective_Evacuated_Quota) && (UnitGetCooldown(gv_launchBays[lv_bayIdx].lv_bay, "triggerLaunchBayExtraDelay") <= 0.0)) {
                    lv_lastTiming = gv_launchBays[lv_bayIdx].lv_timing;
                    if ((gv_launchBays[lv_bayIdx].lv_highCapacityShuttles > 0)) {
                        gv_launchBays[lv_bayIdx].lv_highCapacityShuttles -= 1;
                        lv_toEvacuate = MinI((gv_objective_Evacuated_Quota - gv_objective_Launched), gv_highCapacityCount);
                        if ((gv_launchBays[lv_bayIdx].lv_highCapacityShuttles == 0)) {
                            libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal TurnRed", null, gv_launchBays[lv_bayIdx].lv_bayRegion);
                            UnitModifyCooldown(gv_launchBays[lv_bayIdx].lv_bay, "triggerLaunchBayExtraDelay", 30.0, c_cooldownOperationDefault);
                        }

                    }
                    else {
                        lv_toEvacuate = 1;
                        UnitModifyCooldown(gv_launchBays[lv_bayIdx].lv_bay, "triggerLaunchBayExtraDelay", 50.0, c_cooldownOperationDefault);
                    }
                    gf_ShuttleLaunch(lv_bayIdx, lv_toEvacuate);
                }
                else {
                    lv_lastTiming -= lv_timing;
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchBayShuttleLaunchLogic_Init () {
    gt_LaunchBayShuttleLaunchLogic = TriggerCreate("gt_LaunchBayShuttleLaunchLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Bay Update
//--------------------------------------------------------------------------------------------------
bool gt_LaunchBayUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveLaunchBaysUpdate, true, false);
    if ((gv_objective_Launched > 280)) {
        gv_aiTierExtra = 3;
    }
    else if ((gv_objective_Launched > 200)) {
        gv_aiTierExtra = 2;
    }
    else if ((gv_objective_Launched > 120)) {
        gv_aiTierExtra = 1;
    }
    if ((gv_objective_Launched >= gv_objective_Evacuated_Quota)) {
        gv_objective_Launched = gv_objective_Evacuated_Quota;
        TriggerExecute(gt_ObjectiveLaunchBaysUpdate, true, false);
        TriggerEnable(gt_TransmissionLaunchBayFreedQ, false);
        TriggerEnable(gt_TransmissionLaunchBayLockedQ, false);
    }

    if ((gv_objective_Evacuated >= gv_objective_Evacuated_Quota)) {
        TriggerExecute(gt_VictoryPrimaryObjectiveCompleted, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchBayUpdate_Init () {
    gt_LaunchBayUpdate = TriggerCreate("gt_LaunchBayUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Launch Bay Freed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLaunchBayFreedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_firstFreedTransmission == true)) {
        gv_firstFreedTransmission = false;
        TriggerQueueEnter();
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("FirstBayFreeSE", true, -1);
        TriggerQueueExit();
    }
    else {
        TriggerQueueEnter();
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("ControlSuccessful", true, -1);
        TriggerQueueExit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLaunchBayFreedQ_Init () {
    gt_TransmissionLaunchBayFreedQ = TriggerCreate("gt_TransmissionLaunchBayFreedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Launch Bay Locked Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionLaunchBayLockedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("CaptureControlLost", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionLaunchBayLockedQ_Init () {
    gt_TransmissionLaunchBayLockedQ = TriggerCreate("gt_TransmissionLaunchBayLockedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Single Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherSingleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("VoidThrasherAppears", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherSingleQ_Init () {
    gt_TransmissionVoidThrasherSingleQ = TriggerCreate("gt_TransmissionVoidThrasherSingleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Multiple Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherMultipleQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("VoidThrasherMultiple", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherMultipleQ_Init () {
    gt_TransmissionVoidThrasherMultipleQ = TriggerCreate("gt_TransmissionVoidThrasherMultipleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Void Thrasher Death Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVoidThrasherDeathQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("VoidThrasherDeath", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVoidThrasherDeathQ_Init () {
    gt_TransmissionVoidThrasherDeathQ = TriggerCreate("gt_TransmissionVoidThrasherDeathQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrasher 1 Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Thrasher1Spawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(5.0, 20.0), c_timeGame);
    TriggerExecute(gt_TransmissionVoidThrasherSingleQ, true, false);
    libNtve_gf_StopTimer(gv_warpConduitDamagedTimer);
    TimerStart(gv_warpConduitDamagedTimer, 20.0, false, c_timeGame);
    gf_SpawnVoidThrasher(PointFromId(54));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Thrasher1Spawn_Init () {
    gt_Thrasher1Spawn = TriggerCreate("gt_Thrasher1Spawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrasher 2 Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Thrasher2Spawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(5.0, 20.0), c_timeGame);
    TriggerExecute(gt_TransmissionVoidThrasherSingleQ, true, false);
    libNtve_gf_StopTimer(gv_warpConduitDamagedTimer);
    TimerStart(gv_warpConduitDamagedTimer, 20.0, false, c_timeGame);
    gv_thrasherAttackCooldown_Bombardment = 1.8;
    gv_thrasherAttackCooldown_LightningBreath = 9.0;
    gf_SpawnVoidThrasher(PointFromId(55));
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_BonusStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Thrasher2Spawn_Init () {
    gt_Thrasher2Spawn = TriggerCreate("gt_Thrasher2Spawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrasher 3 Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Thrasher3Spawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(5.0, 20.0), c_timeGame);
    TriggerExecute(gt_TransmissionVoidThrasherSingleQ, true, false);
    libNtve_gf_StopTimer(gv_warpConduitDamagedTimer);
    TimerStart(gv_warpConduitDamagedTimer, 30.0, false, c_timeGame);
    gv_thrasherAttackCooldown_Bombardment = 1.6;
    gv_thrasherAttackCooldown_LightningBreath = 8.0;
    gf_SpawnVoidThrasher(PointFromId(182));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Thrasher3Spawn_Init () {
    gt_Thrasher3Spawn = TriggerCreate("gt_Thrasher3Spawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrasher 4 Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Thrasher4Spawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(5.0, 20.0), c_timeGame);
    TriggerExecute(gt_TransmissionVoidThrasherSingleQ, true, false);
    libNtve_gf_StopTimer(gv_warpConduitDamagedTimer);
    TimerStart(gv_warpConduitDamagedTimer, 30.0, false, c_timeGame);
    gv_thrasherAttackCooldown_Bombardment = 1.4;
    gv_thrasherAttackCooldown_LightningBreath = 7.0;
    gf_SpawnVoidThrasher(PointFromId(124));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Thrasher4Spawn_Init () {
    gt_Thrasher4Spawn = TriggerCreate("gt_Thrasher4Spawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extra Thrasher Breath Attacks
//--------------------------------------------------------------------------------------------------
bool gt_ExtraThrasherBreathAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_extraDifficultyDamage;

    // Automatic Variable Declarations
    int auto75EAC6F3_ae;
    const int auto75EAC6F3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto75EAC6F3_ae = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 2, 3, 3);
    lv_extraDifficultyDamage = 0;
    for ( ; ( (auto75EAC6F3_ai >= 0 && lv_extraDifficultyDamage <= auto75EAC6F3_ae) || (auto75EAC6F3_ai < 0 && lv_extraDifficultyDamage >= auto75EAC6F3_ae) ) ; lv_extraDifficultyDamage += auto75EAC6F3_ai ) {
        UnitCreateEffectPoint(EventUnit(), "VoidThrasherLightningAoECreatePersistentDelay", EventUnitTargetPoint());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtraThrasherBreathAttacks_Init () {
    gt_ExtraThrasherBreathAttacks = TriggerCreate("gt_ExtraThrasherBreathAttacks_Func");
    TriggerAddEventUnitAbility(gt_ExtraThrasherBreathAttacks, null, AbilityCommand("VoidThrasherLightningAoE", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BonusAttackConduitVisual
//--------------------------------------------------------------------------------------------------
bool gt_BonusAttackConduitVisual_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(gv_bonus) == true)) {
        UnitCreateEffectUnit(gv_bonus, "ShadowCloudEpilogue01AB", UnitFromId(275334686));
        Wait(RandomFixed(0.6, 1.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusAttackConduitVisual_Init () {
    gt_BonusAttackConduitVisual = TriggerCreate("gt_BonusAttackConduitVisual_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Start
//--------------------------------------------------------------------------------------------------
bool gt_BonusStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusAttackConduitVisual, true, false);
    TriggerExecute(gt_ObjectiveBonusConduitCreate, true, false);
    TriggerExecute(gt_BonusWave, true, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonus), StringExternal("Param/Value/FACEB5DF"));
    lv_ping = PingLastCreated();
    Wait(6.0, c_timeGame);
    TriggerQueueEnter();
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(146758894), 5.0, Color(100.00, 0.00, 0.00));
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("BonusSE", true, -1);
    TriggerQueueExit();
    while ((UnitIsAlive(gv_bonus) == true)) {
        if (((GameGetMissionTime() - AILastAttack(gv_bonus)) > 3.0)) {
            TimerPause(gv_bonus_Timer, false);
        }
        else {
            TimerPause(gv_bonus_Timer, true);
        }
        TriggerExecute(gt_ObjectiveBonusConduitUpdate, true, false);
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_DestroyPingCoop(lv_ping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusStart_Init () {
    gt_BonusStart = TriggerCreate("gt_BonusStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Wave
//--------------------------------------------------------------------------------------------------
bool gt_BonusWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD3345CF1_g;
    int autoD3345CF1_u;
    unit autoD3345CF1_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_02_DOMINION2, gv_pLAYER_02_DOMINION2, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, PointFromId(2093681420), true);
    autoD3345CF1_g = libCOMI_gf_LastCreatedCoopAttackForce();
    autoD3345CF1_u = UnitGroupCount(autoD3345CF1_g, c_unitCountAll);
    for (;; autoD3345CF1_u -= 1) {
        autoD3345CF1_var = UnitGroupUnitFromEnd(autoD3345CF1_g, autoD3345CF1_u);
        if (autoD3345CF1_var == null) { break; }
        UnitIssueOrder(autoD3345CF1_var, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(1515993711)), c_orderQueueReplace);
        UnitIssueOrder(autoD3345CF1_var, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(2141636500)), c_orderQueueAddToEnd);
        UnitIssueOrder(autoD3345CF1_var, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(797305629)), c_orderQueueAddToEnd);
        UnitIssueOrder(autoD3345CF1_var, OrderTargetingPoint(AbilityCommand("move", 1), PointFromId(2093681420)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusWave_Init () {
    gt_BonusWave = TriggerCreate("gt_BonusWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Trigger Area
//--------------------------------------------------------------------------------------------------
bool gt_BonusTriggerArea_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER2)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusStart, true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(3), true, false);
    VisExploreArea(gv_pLAYER_01_USER2, RegionFromId(3), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTriggerArea_Init () {
    gt_BonusTriggerArea = TriggerCreate("gt_BonusTriggerArea_Func");
    TriggerAddEventUnitRegion(gt_BonusTriggerArea, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Trigger Damage
//--------------------------------------------------------------------------------------------------
bool gt_BonusTriggerDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTriggerDamage_Init () {
    gt_BonusTriggerDamage = TriggerCreate("gt_BonusTriggerDamage_Func");
    TriggerAddEventUnitDamaged(gt_BonusTriggerDamage, UnitRefFromVariable("gv_bonus"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_BonusTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusDies, false);
    TriggerExecute(gt_ObjectiveBonusConduitUpdate, true, false);
    TriggerExecute(gt_ObjectiveBonusConduitFailed, true, false);
    UnitKill(gv_bonus);
    TriggerExecute(gt_BonusConduitActivate, true, false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("BonusFailSE", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusTimerExpires_Init () {
    gt_BonusTimerExpires = TriggerCreate("gt_BonusTimerExpires_Func");
    TriggerAddEventTimer(gt_BonusTimerExpires, gv_bonus_Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Dies
//--------------------------------------------------------------------------------------------------
bool gt_BonusDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusTimerExpires, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectiveBonusConduitComplete, true, false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("BonusDoneSE", true, -1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusDies_Init () {
    gt_BonusDies = TriggerCreate("gt_BonusDies_Func");
    TriggerAddEventUnitDied(gt_BonusDies, UnitRefFromVariable("gv_bonus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Conduit Activate
//--------------------------------------------------------------------------------------------------
bool gt_BonusConduitActivate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(3), true, false);
    VisExploreArea(gv_pLAYER_01_USER2, RegionFromId(3), true, false);
    UnitSetOwner(UnitFromId(275334686), gv_pLAYER_02_DOMINION, true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(275334686)), "Signal On");
    libCOMI_gf_SendActorMessageToDoodadsInRegion("Signal PadOff", "ProtossWarpInPadFlat", RegionFromId(3));
    Wait(20.0, c_timeGame);
    gv_bonus_Conduit_Active = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusConduitActivate_Init () {
    gt_BonusConduitActivate = TriggerCreate("gt_BonusConduitActivate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Endgame Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BonusEndgameSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point[6] lv_spawnPoints;
    unit[7] lv_spawnUnits;
    int lv_i;
    unitgroup lv_hybrids;
    fixed lv_delay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hybrids = UnitGroupEmpty();
    lv_delay = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnPoints[0] = PointFromId(2025418466);
    lv_spawnPoints[1] = PointFromId(1479046271);
    lv_spawnPoints[2] = PointFromId(829864185);
    lv_spawnPoints[3] = PointFromId(1303357211);
    lv_spawnPoints[4] = PointFromId(1300045088);
    lv_spawnPoints[5] = PointFromId(1875071362);
    if ((gv_bonus_Conduit_Active == false)) {
        TriggerExecute(gt_BonusConduitActivate, true, false);
        lv_delay = 3.0;
        TriggerQueueEnter();
        libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/A4657BA3"), null, PointFromId(146758894));
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(146758894), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        Wait(20.0, c_timeGame);
    }
    else {
        TriggerQueueEnter();
        libCOMI_gf_CreateAlertAtPointCampaign("Trigger", StringExternal("Param/Value/C0380515"), null, PointFromId(146758894));
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(146758894), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
    }
    while ((libCOMI_gf_GameIsOver() == false)) {
        while (!((UnitGroupCount(lv_hybrids, c_unitCountAlive) < 200) && (UnitGroupCount(UnitGroupFilterRegion(lv_hybrids, RegionFromId(3), 0), c_unitCountAlive) < 30))) {
            Wait(1.0, c_timeGame);
        }
        Wait(lv_delay, c_timeAI);
        if ((lv_delay > 0.4)) {
            lv_delay -= 0.1;
        }

        if (((UnitIsValid(lv_spawnUnits[lv_i]) == false) || (UnitIsAlive(lv_spawnUnits[lv_i]) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_spawnUnits[lv_i]), lv_spawnPoints[lv_i]) > 2.0))) {
            lv_spawnUnits[lv_i] = gf_SpawnEndgameHybrid2(lv_spawnPoints[lv_i], RandomInt(3, 4));
            UnitGroupAdd(lv_hybrids, lv_spawnUnits[lv_i]);
        }

        if ((RandomInt(0, 100) < 30) && ((UnitIsValid(lv_spawnUnits[6]) == false) || (UnitIsAlive(lv_spawnUnits[6]) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_spawnUnits[6]), PointFromId(146758894)) > 2.0))) {
            libNtve_gf_UnitCreateFacingPoint(1, "HybridNemesis", 0, RandomInt(3, 4), PointFromId(146758894), PointFromId(454225662));
            AISetUnitSuicide(UnitLastCreated(), true);
            lv_spawnUnits[6] = UnitLastCreated();
            UnitGroupAdd(lv_hybrids, UnitLastCreated());
            PlayerCreateEffectUnit(UnitGetOwner(UnitLastCreated()), "CloakTargetUndetectable1sec", UnitLastCreated());
        }
        else {
            if ((RandomInt(0, 100) < 50) && ((UnitIsValid(lv_spawnUnits[6]) == false) || (UnitIsAlive(lv_spawnUnits[6]) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_spawnUnits[6]), PointFromId(146758894)) > 5.0))) {
                libNtve_gf_UnitCreateFacingPoint(1, gf_GetT4UnitType(), 0, RandomInt(3, 4), PointFromId(146758894), PointFromId(454225662));
                AISetUnitSuicide(UnitLastCreated(), true);
                lv_spawnUnits[6] = UnitLastCreated();
                UnitGroupAdd(lv_hybrids, UnitLastCreated());
                PlayerCreateEffectUnit(UnitGetOwner(UnitLastCreated()), "CloakTargetUndetectable1sec", UnitLastCreated());
            }

        }
        lv_i += 1;
        if ((lv_i > 5)) {
            lv_i = 0;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEndgameSpawn_Init () {
    gt_BonusEndgameSpawn = TriggerCreate("gt_BonusEndgameSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Endgame Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusEndgameWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_bonus_Conduit_Active == false)) {
        TimerStart(gv_endgameTimer, (4.0 * 60.0), false, c_timeAI);
        TriggerQueueEnter();
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(146758894), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("EndgameIfBonusDoneSE", true, -1);
        TriggerQueueExit();
    }
    else {
        TimerStart(gv_endgameTimer, (3.0 * 60.0), false, c_timeAI);
        TriggerQueueEnter();
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(146758894), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("EndgameIfBonusFailSE", true, -1);
        TriggerQueueExit();
    }
    gv_endgameTimerWindow = TimerWindowLastCreated();
    while ((TimerGetRemaining(gv_endgameTimer) > 0.0)) {
        Wait(0.5, c_timeAI);
    }
    TimerWindowDestroy(gv_endgameTimerWindow);
    TriggerExecute(gt_BonusEndgameSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusEndgameWarningQ_Init () {
    gt_BonusEndgameWarningQ = TriggerCreate("gt_BonusEndgameWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Defeat, false);
    TriggerEnable(gt_DefeatPrimaryObjectiveFailed, false);
    libNtve_gf_ChangeUnitDamage(gv_warpConduit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerSendEvent("UT_MissionEnd");
    TriggerExecute(gt_ObjectiveLaunchBaysComplete, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_ObjectiveWarpConduitComplete, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/E1C6AF07"), IntToText(FixedToInt(UnitGetPropertyFixed(gv_warpConduit, c_unitPropLife, c_unitPropCurrent))));
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libCOMI_gf_CinematicModeCampaign(true, 1.0, true);
    GameTimeOfDayPause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PShakuras01_Music_Outro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_CreateUnitforWarpConduit("DarkTemplarShuttle", PointFromId(1624));
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoFromId(1626), 14.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 15.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 1.0);
    libCOMI_gf_SendVictoryTransmission("Victory");
    libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, false);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoDefault(), 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveCompleted_Init () {
    gt_VictoryPrimaryObjectiveCompleted = TriggerCreate("gt_VictoryPrimaryObjectiveCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5B0963DF_g;
    int auto5B0963DF_u;
    unit auto5B0963DF_var;
    playergroup auto00954D70_g;
    int auto00954D70_var;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gv_cM_GameOverResult = libCOMI_ge_CampaignMissionGameResultType_Defeat;
    TriggerSendEvent("UT_MissionEnd");
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_01_USER2, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1646), 0.0, -1, 10.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER2, CameraInfoFromId(1646), 0.0, -1, 10.0, true);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    auto5B0963DF_g = UnitGroup("DarkTemplarShuttle", gv_pLAYER_05_CONDUIT, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5B0963DF_u = UnitGroupCount(auto5B0963DF_g, c_unitCountAll);
    for (;; auto5B0963DF_u -= 1) {
        auto5B0963DF_var = UnitGroupUnitFromEnd(auto5B0963DF_g, auto5B0963DF_u);
        if (auto5B0963DF_var == null) { break; }
        UnitSetState(auto5B0963DF_var, c_unitStateInvulnerable, false);
        UnitSetState(auto5B0963DF_var, c_unitStateSelectable, true);
        UnitSetState(auto5B0963DF_var, c_unitStateStatusBar, true);
        UnitBehaviorRemove(auto5B0963DF_var, "CloackTargetUndetectable", c_unitBehaviorCountAll);
        libNtve_gf_ChangeUnitDamage(auto5B0963DF_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega2);
    }
    auto00954D70_g = gv_enemyPlayerGroup;
    auto00954D70_var = -1;
    while (true) {
        auto00954D70_var = PlayerGroupNextPlayer(auto00954D70_g, auto00954D70_var);
        if (auto00954D70_var < 0) { break; }
        libNtve_gf_SetAlliance(gv_pLAYER_05_CONDUIT, auto00954D70_var, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    }
    TriggerExecute(gt_ObjectiveWarpConduitFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/DFEA0B81"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(4.0, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventUnitDied(gt_DefeatPrimaryObjectiveFailed, UnitRefFromVariable("gv_warpConduit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_bonus_Timer, (17.0 * 60.0), false, c_timeAI);
    gf_WaitForAITime((3.5 * 60.0));
    AIToggleBulliesInRegion(gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), true);
    if (((libCOMI_gf_GetMissionDifficulty() == 1 || libCOMI_gf_GetMissionDifficulty() == 2) == false)) {
        gf_AIAttackWaveInTransports(0);
    }

    gf_WaitForAITime((6.0 * 60.0));
    gf_AIAttackWave(1);
    gf_WaitForAITime((6.5 * 60.0));
    TriggerExecute(gt_Thrasher1Spawn, true, false);
    gf_WaitForAITime((9.0 * 60.0));
    gf_AIAttackWave(3);
    gf_WaitForAITime((12.0 * 60.0));
    gf_AIAttackWave(4);
    gf_WaitForAITime((12.5 * 60.0));
    TriggerExecute(gt_Thrasher2Spawn, true, false);
    gf_WaitForAITime((13.0 * 60.0));
    TriggerExecute(gt_BonusStart, true, false);
    gf_WaitForAITime((16.0 * 60.0));
    gf_AIAttackWaveInTransports(5);
    gf_WaitForAITime((16.5 * 60.0));
    gf_AIAttackWaveInTransports(5);
    gf_WaitForAITime((20.0 * 60.0));
    TriggerExecute(gt_Thrasher3Spawn, true, false);
    gf_WaitForAITime((22.0 * 60.0));
    gf_AIAttackWave(7);
    gf_WaitForAITime((24.0 * 60.0));
    TriggerExecute(gt_Thrasher4Spawn, true, false);
    gf_WaitForAITime((25.0 * 60.0));
    TriggerExecute(gt_BonusEndgameWarningQ, true, false);
    gf_WaitForAITime((26.0 * 60.0));
    gf_AIAttackWaveInTransports(6);
    gf_WaitForAITime((28.0 * 60.0));
    gf_AIAttackWaveInTransports(6);
    gf_WaitForAITime((29.0 * 60.0));
    libNtve_gf_SetAlliance(gv_pLAYER_05_CONDUIT, gv_pLAYER_02_DOMINION2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_05_CONDUIT, gv_pLAYER_02_DOMINION, libNtve_ge_AllianceSetting_Enemy);
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((RandomInt(0, 100) > 70)) {
            gf_AIAttackWaveInTransports(RandomInt(5, 7));
        }
        else {
            gf_AIAttackWave(RandomInt(5, 7));
        }
        Wait(120.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit Hybrid Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_ConduitHybridWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEAE3E638_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hybridWarning += 1;
    autoEAE3E638_val = gv_hybridWarning;
    if (autoEAE3E638_val == 1) {
        TriggerQueueEnter();
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(992), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("HybridWave1SE", true, -1);
        TriggerQueueExit();
    }
    else if (autoEAE3E638_val == 2) {
        TriggerQueueEnter();
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(992), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("HybridWave2SE", true, -1);
        TriggerQueueExit();
    }
    else if (autoEAE3E638_val == 3) {
        TriggerQueueEnter();
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(992), 5.0, Color(100.00, 0.00, 0.00));
        Wait(1.0, c_timeReal);
        libCOMI_gf_SendMissionTransmission("HybridWave3SE", true, -1);
        TriggerQueueExit();
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConduitHybridWarningQ_Init () {
    gt_ConduitHybridWarningQ = TriggerCreate("gt_ConduitHybridWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit Enemy AI Zerg 2
//--------------------------------------------------------------------------------------------------
bool gt_ConduitEnemyAIZerg2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveCnt;
    fixed lv_buildDelayInitial;
    fixed lv_nextAttackTime;
    unitgroup lv_larvaTargets;
    unit lv_u;
    unit lv_hive;

    // Automatic Variable Declarations
    int autoA1A35114_val;
    unitgroup auto0EA0F17F_g;
    int auto0EA0F17F_u;
    unitgroup auto4DCC9E80_g;
    int auto4DCC9E80_u;

    // Variable Initialization
    lv_buildDelayInitial = 60.0;
    lv_nextAttackTime = gv_conduitAttackDelayInitial;
    lv_larvaTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    AISetMinimumBullyCount(1, "Hatchery", gv_pLAYER_07_CONDUIT_ENEMY);
    while ((libCOMI_gf_GameIsOver() == false)) {
        AIClearTrainQueue(gv_pLAYER_07_CONDUIT_ENEMY);
        libCOMI_gf_CM_CoopAI_Upgrades(gv_pLAYER_07_CONDUIT_ENEMY);
        if ((AIGetTime() > lv_buildDelayInitial)) {
            AIClearBuildQueue(gv_pLAYER_07_CONDUIT_ENEMY);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "EvolutionChamber", 1, null, 0.0, -1, gv_buildTech);
            gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Drone", 6, null);
            gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Overlord", 10, null);
            gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "QueenCoop", 2, null);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "SpawningPool", 1, null, (2.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "SpineCrawler", 10, "SpawningPool", (2.0 * 60.0), -1, gv_buildDef);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "SporeCrawler", 10, "SpawningPool", (2.0 * 60.0), -1, gv_buildDef);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Lair", 1, "SpawningPool", (4.0 * 60.0), -1, gv_buildDefault);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "RoachWarren", 1, "Lair", (5.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "HydraliskDen", 1, "Lair", (5.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Spire", 1, "Lair", (5.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "InfestationPit", 1, "Lair", (5.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Hive", 1, "InfestationPit", (8.0 * 60.0), -1, gv_buildDefault);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "UltraliskCavern", 1, "Hive", (10.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "GreaterSpire", 1, "Hive", (10.0 * 60.0), -1, gv_buildDefault);
        }

        if ((AIGetTime() > lv_nextAttackTime)) {
            lv_nextAttackTime = (AIGetTime() + RandomFixed(gv_conduitAttackDelayMin, gv_conduitAttackDelayMax));
            lv_waveCnt += 1;
            autoA1A35114_val = lv_waveCnt;
            if (autoA1A35114_val == 1) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zergling", 0);
            }
            else if (autoA1A35114_val == 2) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zergling", 0);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Roach", 0);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Hydralisk", 0);
            }
            else if (autoA1A35114_val == 3) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zergling", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Roach", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Hydralisk", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Mutalisk", 1);
            }
            else if (autoA1A35114_val == 4) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zergling", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Roach", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Hydralisk", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Mutalisk", 2);
            }
            else {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zergling", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Roach", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Hydralisk", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Mutalisk", 3);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Ultralisk", 3);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "SwarmHostMP", 2);
            }
            lv_u = UnitGroupClosestToPoint(UnitGroup("Overseer", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), PointFromId(992));
            if ((UnitIsValid(lv_u) == true) && (UnitIsAlive(lv_u) == true)) {
                AIAttackWaveUseUnit(gv_pLAYER_07_CONDUIT_ENEMY, lv_u);
            }

            if ((lv_waveCnt > 2)) {
                lv_u = UnitGroupClosestToPoint(UnitGroup("Infestor", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), PointFromId(992));
                if ((UnitIsValid(lv_u) == true) && (UnitIsAlive(lv_u) == true)) {
                    AIAttackWaveUseUnit(gv_pLAYER_07_CONDUIT_ENEMY, lv_u);
                }

            }

            AIAttackWaveAddWaypoint(gv_pLAYER_07_CONDUIT_ENEMY, PointFromId(993), false);
            AIAttackWaveSend(gv_pLAYER_07_CONDUIT_ENEMY, 0, false);
        }

        if ((AIGetTime() > (4.0 * 60.0))) {
            gf_TrySendHybridsWaveToConduit();
        }

        if ((AIGetTime() > (15.0 * 60.0))) {
            auto0EA0F17F_g = UnitGroup("QueenCoop", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto0EA0F17F_u = UnitGroupCount(auto0EA0F17F_g, c_unitCountAll);
            for (;; auto0EA0F17F_u -= 1) {
                lv_u = UnitGroupUnitFromEnd(auto0EA0F17F_g, auto0EA0F17F_u);
                if (lv_u == null) { break; }
                if ((UnitCheckAbilCmdState(lv_u, AbilityCommand("SpawnLarva", 0), c_cmdStateNoEnergy) == false)) {
                    UnitGroupClear(lv_larvaTargets);
                    UnitGroupAddUnitGroup(lv_larvaTargets, UnitGroup("Hatchery", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    UnitGroupAddUnitGroup(lv_larvaTargets, UnitGroup("Lair", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    UnitGroupAddUnitGroup(lv_larvaTargets, UnitGroup("Hive", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    auto4DCC9E80_g = lv_larvaTargets;
                    auto4DCC9E80_u = UnitGroupCount(auto4DCC9E80_g, c_unitCountAll);
                    for (;; auto4DCC9E80_u -= 1) {
                        lv_hive = UnitGroupUnitFromEnd(auto4DCC9E80_g, auto4DCC9E80_u);
                        if (lv_hive == null) { break; }
                        if ((UnitHasBehavior2(lv_hive, "QueenSpawnLarvaTimer") == false)) {
                            libNtve_gf_AICast(lv_u, OrderTargetingUnit(AbilityCommand("SpawnLarva", 0), lv_hive));
                            break;
                        }

                    }
                }

            }
        }

        gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Overseer", 2, "Hive");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Zergling", 1, "SpawningPool");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Roach", 2, "RoachWarren");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Hydralisk", 2, "HydraliskDen");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Mutalisk", 3, "Spire");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Ravager", 0, "RoachWarren");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Ultralisk", 3, "UltraliskCavern");
        if (((libCOMI_gf_GetMissionDifficulty() == 4) || (libCOMI_gf_GetMissionDifficulty() == 5) || (libCOMI_gf_GetMissionDifficulty() == 6))) {
            gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "SwarmHostMP", 2, "InfestationPit");
        }

        gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Infestor", 2, "InfestationPit");
        Wait(5.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConduitEnemyAIZerg2_Init () {
    gt_ConduitEnemyAIZerg2 = TriggerCreate("gt_ConduitEnemyAIZerg2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit Enemy AI Terran 2
//--------------------------------------------------------------------------------------------------
bool gt_ConduitEnemyAITerran2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveCnt;
    fixed lv_buildDelayInitial;
    fixed lv_nextAttackTime;
    unit lv_u;

    // Automatic Variable Declarations
    int autoB317A26A_val;

    // Variable Initialization
    lv_buildDelayInitial = 60.0;
    lv_nextAttackTime = gv_conduitAttackDelayInitial;

    // Actions
    if (!runActions) {
        return true;
    }

    AISetMinimumBullyCount(1, "CommandCenter", gv_pLAYER_07_CONDUIT_ENEMY);
    while ((libCOMI_gf_GameIsOver() == false)) {
        AIClearTrainQueue(gv_pLAYER_07_CONDUIT_ENEMY);
        libCOMI_gf_CM_CoopAI_Upgrades(gv_pLAYER_07_CONDUIT_ENEMY);
        if ((AIGetTime() > lv_buildDelayInitial)) {
            AIClearBuildQueue(gv_pLAYER_07_CONDUIT_ENEMY);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "EngineeringBay", 1, null, 0.0, -1, gv_buildTech);
            gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "SCV", 6, null);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Barracks", 3, null, (2.0 * 60.0), -1, gv_buildProduction);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Bunker", 6, "Barracks", (2.0 * 60.0), -1, gv_buildDef);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "MissileTurret", 9, "EngineeringBay", (2.0 * 60.0), -1, gv_buildDef);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Factory", 2, "Barracks", (4.0 * 60.0), -1, gv_buildProduction);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "BarracksTechReactor", 3, "Barracks", (5.0 * 60.0), -1, gv_buildDefault);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "FactoryTechReactor", 2, "Factory", (5.0 * 60.0), -1, gv_buildDefault);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Starport", 2, "Factory", (8.0 * 60.0), -1, gv_buildProduction);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "StarportTechReactor", 2, "Starport", (10.0 * 60.0), -1, gv_buildDefault);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Armory", 1, "Starport", (10.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "FusionCore", 1, "Starport", (10.0 * 60.0), -1, gv_buildTech);
            if (((libCOMI_gf_GetMissionDifficulty() == 4) || (libCOMI_gf_GetMissionDifficulty() == 5) || (libCOMI_gf_GetMissionDifficulty() == 6))) {
                gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "GhostAcademy", 6, "Factory", (15.0 * 60.0), -1, gv_buildTech);
                gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Nuke", 5, "GhostAcademy");
                gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Ghost", 4, "GhostAcademy");
            }

        }

        if ((AIGetTime() > lv_nextAttackTime)) {
            lv_nextAttackTime = (AIGetTime() + RandomFixed(gv_conduitAttackDelayMin, gv_conduitAttackDelayMax));
            lv_waveCnt += 1;
            autoB317A26A_val = lv_waveCnt;
            if (autoB317A26A_val == 1) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marine", 0);
            }
            else if (autoB317A26A_val == 2) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marine", 0);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marauder", 0);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Medic", 0);
            }
            else if (autoB317A26A_val == 3) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marine", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marauder", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Medic", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Hellion", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "SiegeTank", 1);
            }
            else if (autoB317A26A_val == 3) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marine", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marauder", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Medic", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Hellion", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "SiegeTank", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "VikingFighter", 1);
            }
            else {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marine", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Marauder", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Medic", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Hellion", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "SiegeTank", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "VikingFighter", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Banshee", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Battlecruiser", 3);
            }
            if ((lv_waveCnt > 2)) {
                lv_u = UnitGroupClosestToPoint(UnitGroup("Raven", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), PointFromId(992));
                if ((UnitIsValid(lv_u) == true) && (UnitIsAlive(lv_u) == true)) {
                    AIRemoveUnitFromAnyWaves(lv_u);
                    AIAttackWaveUseUnit(gv_pLAYER_07_CONDUIT_ENEMY, lv_u);
                }

            }

            AIAttackWaveAddWaypoint(gv_pLAYER_07_CONDUIT_ENEMY, PointFromId(993), false);
            AIAttackWaveSend(gv_pLAYER_07_CONDUIT_ENEMY, 0, false);
        }

        if ((AIGetTime() > (4.0 * 60.0))) {
            gf_TrySendHybridsWaveToConduit();
        }

        if ((AIGetTime() > (16.0 * 60.0))) {
            gf_ConduitAINuke();
        }

        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Marine", 1, "Barracks");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Marauder", 2, "BarracksTechReactor");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Medic", 1, "BarracksTechReactor");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Hellion", 1, "Factory");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "SiegeTank", 2, "FactoryTechReactor");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "VikingFighter", 1, "Starport");
        gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Raven", 2, "StarportTechReactor");
        gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Medivac", 3, "StarportTechReactor");
        if (((libCOMI_gf_GetMissionDifficulty() == 4) || (libCOMI_gf_GetMissionDifficulty() == 5) || (libCOMI_gf_GetMissionDifficulty() == 6))) {
            gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Banshee", 2, "StarportTechReactor");
        }

        if ((TechTreeUnitCount(gv_pLAYER_07_CONDUIT_ENEMY, "StarportTechReactor", c_techCountCompleteOnly) != 0)) {
            gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Battlecruiser", 3, "FusionCore");
        }

        Wait(10.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConduitEnemyAITerran2_Init () {
    gt_ConduitEnemyAITerran2 = TriggerCreate("gt_ConduitEnemyAITerran2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit Enemy AI Protoss 2
//--------------------------------------------------------------------------------------------------
bool gt_ConduitEnemyAIProtoss2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveCnt;
    fixed lv_buildDelayInitial;
    fixed lv_nextAttackTime;
    unit lv_u;

    // Automatic Variable Declarations
    int autoC6A1C285_val;

    // Variable Initialization
    lv_buildDelayInitial = 60.0;
    lv_nextAttackTime = gv_conduitAttackDelayInitial;

    // Actions
    if (!runActions) {
        return true;
    }

    AISetMinimumBullyCount(1, "Nexus", gv_pLAYER_07_CONDUIT_ENEMY);
    while ((libCOMI_gf_GameIsOver() == false)) {
        AIClearTrainQueue(gv_pLAYER_07_CONDUIT_ENEMY);
        libCOMI_gf_CM_CoopAI_Upgrades(gv_pLAYER_07_CONDUIT_ENEMY);
        if ((AIGetTime() > lv_buildDelayInitial)) {
            AIClearBuildQueue(gv_pLAYER_07_CONDUIT_ENEMY);
            gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Probe", 6, null);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Pylon", 10, null, 0.0, -1, gv_buildPower);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Gateway", 1, null, 0.0, -1, gv_buildProduction);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Forge", 1, null, 0.0, -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "CyberneticsCore", 1, "Gateway", 0.0, -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Gateway", 6, null, (2.0 * 60.0), -1, gv_buildProduction);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "PhotonCannon", 11, "Forge", (2.0 * 60.0), -1, gv_buildDef);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "TwilightCouncil", 1, "CyberneticsCore", (4.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "RoboticsFacility", 3, "CyberneticsCore", (5.0 * 60.0), -1, gv_buildProduction);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Stargate", 3, "CyberneticsCore", (5.0 * 60.0), -1, gv_buildProduction);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "DarkShrine", 1, "TwilightCouncil", (8.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "RoboticsBay", 2, "RoboticsFacility", (10.0 * 60.0), -1, gv_buildDefault);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "FleetBeacon", 1, "Stargate", (10.0 * 60.0), -1, gv_buildTech);
            gf_BuildIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "TemplarArchive", 1, "TwilightCouncil", (10.0 * 60.0), -1, gv_buildTech);
        }

        if ((AIGetTime() > lv_nextAttackTime)) {
            lv_nextAttackTime = (AIGetTime() + RandomFixed(gv_conduitAttackDelayMin, gv_conduitAttackDelayMax));
            lv_waveCnt += 1;
            autoC6A1C285_val = lv_waveCnt;
            if (autoC6A1C285_val == 1) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zealot", 0);
            }
            else if (autoC6A1C285_val == 2) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zealot", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Stalker", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Adept", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Sentry", 0);
            }
            else if (autoC6A1C285_val == 3) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zealot", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Stalker", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Adept", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Sentry", 0);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Immortal", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "ScoutMP", 1);
            }
            else if (autoC6A1C285_val == 4) {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zealot", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Stalker", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Adept", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Sentry", 0);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Immortal", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "ScoutMP", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Colossus", 2);
            }
            else {
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Zealot", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Stalker", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Adept", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Sentry", 0);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Immortal", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "ScoutMP", 1);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Colossus", 2);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "Carrier", 3);
                gf_AddUnitsTierToConduitWave(gv_pLAYER_07_CONDUIT_ENEMY, "DarkTemplar", 1);
            }
            lv_u = UnitGroupClosestToPoint(UnitGroup("Observer", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), PointFromId(992));
            if ((UnitIsValid(lv_u) == true) && (UnitIsAlive(lv_u) == true)) {
                AIAttackWaveUseUnit(gv_pLAYER_07_CONDUIT_ENEMY, lv_u);
            }

            if ((lv_waveCnt > 2)) {
                lv_u = UnitGroupClosestToPoint(UnitGroup("HighTemplar", gv_pLAYER_07_CONDUIT_ENEMY, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), PointFromId(992));
                if ((UnitIsValid(lv_u) == true) && (UnitIsAlive(lv_u) == true)) {
                    AIAttackWaveUseUnit(gv_pLAYER_07_CONDUIT_ENEMY, lv_u);
                }

            }

            AIAttackWaveAddWaypoint(gv_pLAYER_07_CONDUIT_ENEMY, PointFromId(993), false);
            AIAttackWaveSend(gv_pLAYER_07_CONDUIT_ENEMY, 0, false);
        }

        if ((TechTreeUpgradeCount(gv_pLAYER_07_CONDUIT_ENEMY, "WarpGateResearch", c_techCountQueuedOrBetter) == 0) && (TechTreeUnitCount(gv_pLAYER_07_CONDUIT_ENEMY, "CyberneticsCore", c_techCountCompleteOnly) != 0)) {
            AIResearch(gv_pLAYER_07_CONDUIT_ENEMY, 0, -1, "WarpGateResearch");
        }

        if ((AIGetTime() > (4.0 * 60.0))) {
            gf_TrySendHybridsWaveToConduit();
        }

        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Zealot", 1, "WarpGate");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Adept", 1, "CyberneticsCore");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Stalker", 2, "CyberneticsCore");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Sentry", 0, "CyberneticsCore");
        gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Observer", 3, "RoboticsFacility");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Immortal", 2, "RoboticsFacility");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "WarpPrism", 2, "RoboticsFacility");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "ScoutMP", 2, "Stargate");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Colossus", 2, "RoboticsBay");
        gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "Carrier", 3, "FleetBeacon");
        if (((libCOMI_gf_GetMissionDifficulty() == 4) || (libCOMI_gf_GetMissionDifficulty() == 5) || (libCOMI_gf_GetMissionDifficulty() == 6))) {
            gf_TrainUnitTierIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "DarkTemplar", 1, "DarkShrine");
            gf_TrainUnitIfNotInProgress(gv_pLAYER_07_CONDUIT_ENEMY, "HighTemplar", 2, "TemplarArchive");
        }

        Wait(10.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConduitEnemyAIProtoss2_Init () {
    gt_ConduitEnemyAIProtoss2 = TriggerCreate("gt_ConduitEnemyAIProtoss2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduit Wave
//--------------------------------------------------------------------------------------------------
bool gt_ConduitWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ConduitWavePing(AIWaveGetUnits(EventPlayerWave()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConduitWave_Init () {
    gt_ConduitWave = TriggerCreate("gt_ConduitWave_Func");
    TriggerAddEventPlayerAIWave(gt_ConduitWave, gv_pLAYER_07_CONDUIT_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_race;
    int lv_p;
    unit lv_u;
    fixed lv_rebuildTime;

    // Automatic Variable Declarations
    playergroup auto411FA747_g;
    string auto3C4532FB_val;

    // Variable Initialization
    lv_rebuildTime = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_p), 90.0, 80.0, 60.0, 50.0, 40.0, 30.0);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitConduitHybridTiersAndTimings();
    libNtve_gf_SetTacticalAIThink(gv_pLAYER_06_THRASHER, gv_c_ThrasherUnitType, "VoidThrasherAIThink", false);
    libCOMI_gf_StartCoopAI(gv_pLAYER_02_DOMINION2, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_02_DOMINION, gv_pLAYER_01_USER2);
    AICampaignStart(gv_pLAYER_06_THRASHER);
    lv_race = PlayerRace(gv_pLAYER_02_DOMINION2);
    gf_CoopAIInitMinimal(gv_pLAYER_07_CONDUIT_ENEMY, lv_race);
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION2, PointFromId(1));
    AIAttackWaveSetTargetPoint(gv_pLAYER_02_DOMINION, PointFromId(1143083995));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_06_THRASHER, PlayerGroupSingle(gv_pLAYER_05_CONDUIT));
    AIAttackWaveSetTargetUnit(gv_pLAYER_07_CONDUIT_ENEMY, gv_warpConduit);
    AISetDefenseRadii(gv_pLAYER_07_CONDUIT_ENEMY, 15.0, 15.0, 15.0);
    auto411FA747_g = gv_enemyPlayerGroup;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto411FA747_g, lv_p);
        if (lv_p < 0) { break; }
        TechTreeUpgradeAddLevel(lv_p, "AIPlayersOnlyTech", 1);
        TechTreeUpgradeAddLevel(lv_p, "TechReactorAI", 1);
        TechTreeUpgradeAddLevel(lv_p, "overlordtransport", 1);
        TechTreeUpgradeAddLevel(lv_p, "OverlordspeedCoop", 1);
        AISetDifficulty(lv_p, c_diffWaveLeashing, false);
        AISetBullyRebuildDelay(lv_rebuildTime, lv_rebuildTime, lv_p);
        AIToggleBulliesInRegion(lv_p, RegionEntireMap(), false);
    }
    auto3C4532FB_val = lv_race;
    if (auto3C4532FB_val == "Zerg") {
        TriggerExecute(gt_ConduitEnemyAIZerg2, true, false);
        gv_aIWorkerType = "Drone";
        gv_aITransportType = "Overlord";
    }
    else if (auto3C4532FB_val == "Terr") {
        TriggerExecute(gt_ConduitEnemyAITerran2, true, false);
        gv_aIWorkerType = "SCV";
        if ((RandomInt(0, 100) < 40)) {
            gv_aITransportType = "Hercules";
        }
        else {
            gv_aITransportType = "Medivac";
        }
        gf_AIFillBunkers();
    }
    else if (auto3C4532FB_val == "Prot") {
        TriggerExecute(gt_ConduitEnemyAIProtoss2, true, false);
        gv_aIWorkerType = "Probe";
        gv_aITransportType = "WarpPrism";
    }
    else {
    }
    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Resources
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_02_DOMINION2, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_07_CONDUIT_ENEMY, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_07_CONDUIT_ENEMY, c_playerPropVespene, c_playerPropOperSetTo, 10000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveResources_Init () {
    gt_AIGiveResources = TriggerCreate("gt_AIGiveResources_Func");
    TriggerAddEventTimePeriodic(gt_AIGiveResources, 10.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.0, c_timeReal);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(1, 2));
    TriggerQueueExit();
    Wait(10.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveWarningQ_Init () {
    gt_AttackWaveWarningQ = TriggerCreate("gt_AttackWaveWarningQ_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWaveWarningQ, gv_pLAYER_02_DOMINION2);
    TriggerAddEventPlayerAIWave(gt_AttackWaveWarningQ, gv_pLAYER_02_DOMINION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Launch Bays - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLaunchBaysCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ACShakurasEvacPrimary02");
    gv_objective_LaunchBays = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objective_LaunchBays, 2);
    Wait(6.0, c_timeGame);
    TriggerExecute(gt_ObjectiveLaunchBaysUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLaunchBaysCreate_Init () {
    gt_ObjectiveLaunchBaysCreate = TriggerCreate("gt_ObjectiveLaunchBaysCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Launch Bays - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLaunchBaysComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNtve_gf_PlayerInCinematicMode(gv_pLAYER_01_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveLaunchBaysCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("ACShakurasEvacPrimary02", libCOMI_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLaunchBaysComplete_Init () {
    gt_ObjectiveLaunchBaysComplete = TriggerCreate("gt_ObjectiveLaunchBaysComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Launch Bays - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLaunchBaysUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveLaunchBaysCreate, true, false);
    TextExpressionSetToken("Param/Expression/1019993F", "A", FixedToText(((gv_objective_Evacuated * 100.0) / gv_objective_Evacuated_Quota), 1));
    TextExpressionSetToken("Param/Expression/3F8ECE4C", "coloredNum", TextWithColor(TextExpressionAssemble("Param/Expression/1019993F"), Color(100.00, 100.00, 0.00)));
    libCOMI_gf_SetMissionObjectiveCustomText("ACShakurasEvacPrimary02", TextExpressionAssemble("Param/Expression/3F8ECE4C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLaunchBaysUpdate_Init () {
    gt_ObjectiveLaunchBaysUpdate = TriggerCreate("gt_ObjectiveLaunchBaysUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Warp Conduit - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarpConduitCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("ACShakurasEvacPrimary01");
    gv_objective_WarpConduit = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarpConduitCreate_Init () {
    gt_ObjectiveWarpConduitCreate = TriggerCreate("gt_ObjectiveWarpConduitCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Warp Conduit - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarpConduitComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveWarpConduitCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("ACShakurasEvacPrimary01", libCOMI_ge_MissionObjectiveState_Completed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarpConduitComplete_Init () {
    gt_ObjectiveWarpConduitComplete = TriggerCreate("gt_ObjectiveWarpConduitComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Warp Conduit - Failed 
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveWarpConduitFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveWarpConduitCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("ACShakurasEvacPrimary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveWarpConduitFailed_Init () {
    gt_ObjectiveWarpConduitFailed = TriggerCreate("gt_ObjectiveWarpConduitFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Bonus Conduit - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusConduitCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PShakuras01Bonus01");
    gv_objective_BonusConduit = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusConduitCreate_Init () {
    gt_ObjectiveBonusConduitCreate = TriggerCreate("gt_ObjectiveBonusConduitCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Bonus Conduit - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusConduitComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveBonusConduitCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("PShakuras01Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveCustomText("PShakuras01Bonus01", StringToText(""));
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusConduitComplete_Init () {
    gt_ObjectiveBonusConduitComplete = TriggerCreate("gt_ObjectiveBonusConduitComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Bonus Conduit - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusConduitFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveBonusConduitCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("PShakuras01Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusConduitFailed_Init () {
    gt_ObjectiveBonusConduitFailed = TriggerCreate("gt_ObjectiveBonusConduitFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Bonus Conduit - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveBonusConduitUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveBonusConduitCreate, true, false);
    TextExpressionSetToken("Param/Expression/2231B244", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonus_Timer))), Color(100.00, 100.00, 0.00)));
    libCOMI_gf_SetMissionObjectiveCustomText("PShakuras01Bonus01", TextExpressionAssemble("Param/Expression/2231B244"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveBonusConduitUpdate_Init () {
    gt_ObjectiveBonusConduitUpdate = TriggerCreate("gt_ObjectiveBonusConduitUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init02Players_Init();
    gt_Init04Technology_Init();
    gt_Init05UnitsMapObjects_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_Perfomance_Init();
    gt_VirophageWeapon_Init();
    gt_VoidThrasherMissiles_Init();
    gt_StartGame_Init();
    gt_IntroQ_Init();
    gt_ConduitEnemyIntroQ_Init();
    gt_Revealvisibilitycheck_Init();
    gt_Revealotherbays_Init();
    gt_test1_Init();
    gt_test2_Init();
    gt_test3_Init();
    gt_test4_Init();
    gt_BridgeKeyTextTag_Init();
    gt_BridgeExtend_Init();
    gt_BridgeTransmissionQ_Init();
    gt_Teleporter1Activate_Init();
    gt_TeleportersIntroQ_Init();
    gt_SetExitNode_Init();
    gt_DoTeleportP01_Init();
    gt_DoTeleportP02_Init();
    gt_WarpConduitBossBar_Init();
    gt_WarpConduitDamagedQ_Init();
    gt_WarpConduitLow50Q_Init();
    gt_WarpConduitLow25Q_Init();
    gt_WarpConduitLow10Q_Init();
    gt_FirstDisablerDeath_Init();
    gt_FirstDisablerAttackedAquire_Init();
    gt_DisablerCreated_Init();
    gt_BayDisablerCreatingQ_Init();
    gt_LaunchBayShuttleLaunchLogic_Init();
    gt_LaunchBayUpdate_Init();
    gt_TransmissionLaunchBayFreedQ_Init();
    gt_TransmissionLaunchBayLockedQ_Init();
    gt_TransmissionVoidThrasherSingleQ_Init();
    gt_TransmissionVoidThrasherMultipleQ_Init();
    gt_TransmissionVoidThrasherDeathQ_Init();
    gt_Thrasher1Spawn_Init();
    gt_Thrasher2Spawn_Init();
    gt_Thrasher3Spawn_Init();
    gt_Thrasher4Spawn_Init();
    gt_ExtraThrasherBreathAttacks_Init();
    gt_BonusAttackConduitVisual_Init();
    gt_BonusStart_Init();
    gt_BonusWave_Init();
    gt_BonusTriggerArea_Init();
    gt_BonusTriggerDamage_Init();
    gt_BonusTimerExpires_Init();
    gt_BonusDies_Init();
    gt_BonusConduitActivate_Init();
    gt_BonusEndgameSpawn_Init();
    gt_BonusEndgameWarningQ_Init();
    gt_VictoryPrimaryObjectiveCompleted_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_Defeat_Init();
    gt_AIAttackWaves_Init();
    gt_ConduitHybridWarningQ_Init();
    gt_ConduitEnemyAIZerg2_Init();
    gt_ConduitEnemyAITerran2_Init();
    gt_ConduitEnemyAIProtoss2_Init();
    gt_ConduitWave_Init();
    gt_StartAI_Init();
    gt_AIGiveResources_Init();
    gt_AttackWaveWarningQ_Init();
    gt_ObjectiveLaunchBaysCreate_Init();
    gt_ObjectiveLaunchBaysComplete_Init();
    gt_ObjectiveLaunchBaysUpdate_Init();
    gt_ObjectiveWarpConduitCreate_Init();
    gt_ObjectiveWarpConduitComplete_Init();
    gt_ObjectiveWarpConduitFailed_Init();
    gt_ObjectiveBonusConduitCreate_Init();
    gt_ObjectiveBonusConduitComplete_Init();
    gt_ObjectiveBonusConduitFailed_Init();
    gt_ObjectiveBonusConduitUpdate_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
