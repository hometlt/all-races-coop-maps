//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Prison Escape
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
include "aiE7FD60B5"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 3;
const int gv_pLAYER_04_ENEMY = 4;
const int gv_pLAYER_05_COM = 5;
const int gv_pLAYER_06_COM = 6;
const int gv_pLAYER_07_COM = 7;
const int gv_eNEMY_BASE_COUNT = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
point[14] gv_waypoints;
int gv_waypointCount;
unitgroup gv_prisonguardA;
unitgroup gv_prisonguardB;
unitgroup gv_prisonguardC;
unitgroup gv_airportGuard;
int gv_numberofprison;
bool gv_acaptured;
bool gv_bcaptured;
bool gv_ccaptured;
point gv_attackWaveA_Wave05Path;
region[3][11] gv_attackSpawn;
timer gv_objectiveTimer;
unitfilter gv_vICTORY_REQUIREMENT;
int[11] gv_enemyBaseObjectiveMarkers;
point gv_victoryCompletePan;
int gv_bonusObjective;
int gv_prisonlocation;
int gv_escapedprisoner;
int gv_currentescaped;
int gv_objectiveEscapeprisoner;
int gv_objectivePreventTimerExpire;

void InitGlobals () {
    int init_i;

    gv_prisonguardA = UnitGroupEmpty();
    gv_prisonguardB = UnitGroupEmpty();
    gv_prisonguardC = UnitGroupEmpty();
    gv_airportGuard = UnitGroupEmpty();
    gv_objectiveTimer = TimerCreate();
    gv_vICTORY_REQUIREMENT = UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_enemyBaseObjectiveMarkers[init_i] = c_invalidPingId;
    }
    gv_bonusObjective = c_invalidObjectiveId;
    gv_prisonlocation = c_invalidPingId;
    gv_escapedprisoner = 50;
    gv_objectiveEscapeprisoner = c_invalidObjectiveId;
    gv_objectivePreventTimerExpire = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
void gf_SetWaypoints (int lp_ally, int lp_starting, int lp_ending);
point gf_AttackWaveSpawn ();
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init03LoadingComplete;
trigger gt_Init05Units;
trigger gt_firstcaptured;
trigger gt_second;
trigger gt_third;
trigger gt_ALLYAttackWaves;
trigger gt_CellBlockSpawnersA;
trigger gt_CellBlockSpawnersB;
trigger gt_CellBlockSpawnersC;
trigger gt_ALLYAttackWavesCellBlockA;
trigger gt_ALLYAttackWavesCellBlockB;
trigger gt_ALLYAttackWavesCellBlockC;
trigger gt_CellBlockACompleted;
trigger gt_CellBlockBCompleted;
trigger gt_CellBlockCCompleted;
trigger gt_StartAI;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_StartGameQ;
trigger gt_ObjectiveTimerWindow;
trigger gt_ShowandUpdateObjectiveMarkers;
trigger gt_DestroySmallBuildingObjectiveMarkers;
trigger gt_EnemyAttackingQ;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryPrimaryObjectiveComplete;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_BonusCreate;
trigger gt_bonusRemind;
trigger gt_BonusCompleteQ;
trigger gt_BonusDestroyedQ;
trigger gt_showprisons;
trigger gt_escape;
trigger gt_MoveTostarport;
trigger gt_ObjectiveMainCreate;
trigger gt_ObjectiveMainComplete;
trigger gt_ObjectiveMainUpdate;
trigger gt_ObjectiveMainFailed;
trigger gt_ObjectivePreventTimerExpireCreate;
trigger gt_ObjectivePreventTimerExpireComplete;
trigger gt_ObjectivePreventTimerExpireUpdate;
trigger gt_ObjectivePreventTimerExpireFailed;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiE7FD60B5") { aiE7FD60B5_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { aiE7FD60B5_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { return aiE7FD60B5_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { return aiE7FD60B5_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { aiE7FD60B5_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { aiE7FD60B5_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiE7FD60B5") { aiE7FD60B5_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { aiE7FD60B5_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { aiE7FD60B5_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { return aiE7FD60B5_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { return aiE7FD60B5_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiE7FD60B5") { return aiE7FD60B5_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
    AICampaignStart(9);
    AICampaignStart(10);
    AICampaignStart(11);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunMissionEvent_Trigger = null;
trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
fixed auto_gf_RunMissionEvent_lp_missionEventTime;

void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
    auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
    auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;

    if (auto_gf_RunMissionEvent_Trigger == null) {
        auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
}

bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;

    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= lp_missionEventTime))) {
        Wait(0.5, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_missionEventTrigger, true, false);
    }

    return true;
}

void gf_SetWaypoints (int lp_ally, int lp_starting, int lp_ending) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto239C86AA_ae;
    const int auto239C86AA_ai = 1;

    // Variable Initialization

    // Implementation
    auto239C86AA_ae = lp_ending;
    lv_index = lp_starting;
    for ( ; ( (auto239C86AA_ai >= 0 && lv_index <= auto239C86AA_ae) || (auto239C86AA_ai < 0 && lv_index >= auto239C86AA_ae) ) ; lv_index += auto239C86AA_ai ) {
        AIAttackWaveAddWaypoint(lp_ally, gv_waypoints[lv_index], false);
    }
}

point gf_AttackWaveSpawn () {
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;

    // Automatic Variable Declarations
    const int autoC2A3DEBD_ae = 10;
    const int autoC2A3DEBD_ai = 1;

    // Variable Initialization

    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    lv_spawnLocationIter = 1;
    for ( ; ( (autoC2A3DEBD_ai >= 0 && lv_spawnLocationIter <= autoC2A3DEBD_ae) || (autoC2A3DEBD_ai < 0 && lv_spawnLocationIter >= autoC2A3DEBD_ae) ) ; lv_spawnLocationIter += autoC2A3DEBD_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
        }

    }
    return RegionGetCenter(RegionFromId(10));
}

trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1AC9A250_g;
    int auto1AC9A250_u;
    unit auto1AC9A250_var;
    unitgroup auto00A88A46_g;
    int auto00A88A46_u;
    unit auto00A88A46_var;
    unitgroup autoD73FF97B_g;
    int autoD73FF97B_u;
    unit autoD73FF97B_var;
    unitgroup autoB2A89F03_g;
    int autoB2A89F03_u;
    unit autoB2A89F03_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_waypoints[1] = PointFromId(1016662735);
    gv_waypoints[2] = PointFromId(1049290466);
    gv_waypoints[3] = PointFromId(1198897074);
    gv_waypoints[4] = PointFromId(2140825950);
    gv_waypoints[5] = PointFromId(776777793);
    gv_waypoints[6] = PointFromId(1581368827);
    gv_waypoints[7] = PointFromId(1861856799);
    gv_waypoints[8] = PointFromId(1593229140);
    gv_waypoints[9] = PointFromId(1473997430);
    gv_waypoints[10] = PointFromId(1700279001);
    gv_waypoints[11] = PointFromId(122286411);
    gv_waypoints[12] = PointFromId(391033551);
    gv_waypoints[13] = PointFromId(1472113483);
    gv_waypointCount = 13;
    UnitSetState(UnitFromId(1824491632), c_unitStateInvulnerable, true);
    auto1AC9A250_g = UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1AC9A250_u = UnitGroupCount(auto1AC9A250_g, c_unitCountAll);
    for (;; auto1AC9A250_u -= 1) {
        auto1AC9A250_var = UnitGroupUnitFromEnd(auto1AC9A250_g, auto1AC9A250_u);
        if (auto1AC9A250_var == null) { break; }
        UnitGroupAdd(gv_prisonguardA, auto1AC9A250_var);
        UnitSetCustomValue(auto1AC9A250_var, 0, DistanceBetweenPoints(UnitGetPosition(auto1AC9A250_var), PointFromId(1260046283)));
        UnitSetCustomValue(auto1AC9A250_var, 1, AngleBetweenPoints(PointFromId(1260046283), UnitGetPosition(auto1AC9A250_var)));
    }
    auto00A88A46_g = UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto00A88A46_u = UnitGroupCount(auto00A88A46_g, c_unitCountAll);
    for (;; auto00A88A46_u -= 1) {
        auto00A88A46_var = UnitGroupUnitFromEnd(auto00A88A46_g, auto00A88A46_u);
        if (auto00A88A46_var == null) { break; }
        UnitGroupAdd(gv_prisonguardB, auto00A88A46_var);
        UnitSetCustomValue(auto00A88A46_var, 0, DistanceBetweenPoints(UnitGetPosition(auto00A88A46_var), PointFromId(1260046283)));
        UnitSetCustomValue(auto00A88A46_var, 1, AngleBetweenPoints(PointFromId(1260046283), UnitGetPosition(auto00A88A46_var)));
    }
    autoD73FF97B_g = UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD73FF97B_u = UnitGroupCount(autoD73FF97B_g, c_unitCountAll);
    for (;; autoD73FF97B_u -= 1) {
        autoD73FF97B_var = UnitGroupUnitFromEnd(autoD73FF97B_g, autoD73FF97B_u);
        if (autoD73FF97B_var == null) { break; }
        UnitGroupAdd(gv_prisonguardC, autoD73FF97B_var);
        UnitSetCustomValue(autoD73FF97B_var, 0, DistanceBetweenPoints(UnitGetPosition(autoD73FF97B_var), PointFromId(1260046283)));
        UnitSetCustomValue(autoD73FF97B_var, 1, AngleBetweenPoints(PointFromId(1260046283), UnitGetPosition(autoD73FF97B_var)));
    }
    autoB2A89F03_g = UnitGroup(null, gv_pLAYER_03_ENEMY, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2A89F03_u = UnitGroupCount(autoB2A89F03_g, c_unitCountAll);
    for (;; autoB2A89F03_u -= 1) {
        autoB2A89F03_var = UnitGroupUnitFromEnd(autoB2A89F03_g, autoB2A89F03_u);
        if (autoB2A89F03_var == null) { break; }
        UnitGroupAdd(gv_airportGuard, autoB2A89F03_var);
        UnitSetCustomValue(autoB2A89F03_var, 0, DistanceBetweenPoints(UnitGetPosition(autoB2A89F03_var), PointFromId(1260046283)));
        UnitSetCustomValue(autoB2A89F03_var, 1, AngleBetweenPoints(PointFromId(1260046283), UnitGetPosition(autoB2A89F03_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: firstcaptured
//--------------------------------------------------------------------------------------------------
bool gt_firstcaptured_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_numberofprison == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/9B5B02DD"), StringExternal("Param/Value/B246100C"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(8.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/D72B7112"), StringExternal("Param/Value/647C4542"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_WaitForMissionTransmission();
    libCOMI_gf_ShowHidePingCoop(PingLastCreated(), false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(13)), StringExternal("Param/Value/DE98BD6E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_firstcaptured_Init () {
    gt_firstcaptured = TriggerCreate("gt_firstcaptured_Func");
    TriggerAddEventTimePeriodic(gt_firstcaptured, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: second
//--------------------------------------------------------------------------------------------------
bool gt_second_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_numberofprison == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/39CF8B4A"), StringExternal("Param/Value/E86846F6"), 9.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(9.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/C011F8FF"), StringExternal("Param/Value/383661D2"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_WaitForMissionTransmission();
    libCOMI_gf_ShowHidePingCoop(PingLastCreated(), false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(15)), StringExternal("Param/Value/BDCA2E57"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_second_Init () {
    gt_second = TriggerCreate("gt_second_Func");
    TriggerAddEventTimePeriodic(gt_second, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: third
//--------------------------------------------------------------------------------------------------
bool gt_third_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_numberofprison == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/6C545721"), StringExternal("Param/Value/F39436A4"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(8.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/F6F7C304"), StringExternal("Param/Value/C83BDD23"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_WaitForMissionTransmission();
    libCOMI_gf_ShowHidePingCoop(PingLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_third_Init () {
    gt_third = TriggerCreate("gt_third_Func");
    TriggerAddEventTimePeriodic(gt_third, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(15.0, c_timeAI);
        TriggerStop(gt_CellBlockSpawnersA);
        TriggerStop(gt_CellBlockSpawnersB);
        TriggerStop(gt_CellBlockSpawnersC);
        TriggerExecute(gt_CellBlockSpawnersA, true, false);
        TriggerExecute(gt_CellBlockSpawnersB, true, false);
        TriggerExecute(gt_CellBlockSpawnersC, true, false);
        Wait(15.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWaves_Init () {
    gt_ALLYAttackWaves = TriggerCreate("gt_ALLYAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block Spawners A
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockSpawnersA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_acaptured == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(10, "Marine", 0, gv_pLAYER_05_COM, RegionGetCenter(RegionFromId(20)), 43.0);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    TriggerExecute(gt_ALLYAttackWavesCellBlockA, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockSpawnersA_Init () {
    gt_CellBlockSpawnersA = TriggerCreate("gt_CellBlockSpawnersA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block Spawners B
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockSpawnersB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_bcaptured == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(3, "Goliath", 0, gv_pLAYER_06_COM, RegionGetCenter(RegionFromId(21)), 309.0);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    TriggerExecute(gt_ALLYAttackWavesCellBlockB, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockSpawnersB_Init () {
    gt_CellBlockSpawnersB = TriggerCreate("gt_CellBlockSpawnersB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block Spawners C
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockSpawnersC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ccaptured == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "SiegeTank", 0, gv_pLAYER_07_COM, RegionGetCenter(RegionFromId(22)), 43.0);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    TriggerExecute(gt_ALLYAttackWavesCellBlockC, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockSpawnersC_Init () {
    gt_CellBlockSpawnersC = TriggerCreate("gt_CellBlockSpawnersC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Cell Block A
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesCellBlockA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto193CD2C5_g;
    int auto193CD2C5_u;
    unit auto193CD2C5_var;
    unitgroup auto81FD4BA3_g;
    int auto81FD4BA3_u;
    unit auto81FD4BA3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto193CD2C5_g = UnitGroup("Marine", gv_pLAYER_05_COM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto193CD2C5_u = UnitGroupCount(auto193CD2C5_g, c_unitCountAll);
    for (;; auto193CD2C5_u -= 1) {
        auto193CD2C5_var = UnitGroupUnitFromEnd(auto193CD2C5_g, auto193CD2C5_u);
        if (auto193CD2C5_var == null) { break; }
        UnitSetState(auto193CD2C5_var, c_unitStateTargetable, true);
        UnitSetState(auto193CD2C5_var, c_unitStateStatusBar, true);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_airportGuard) == true)) {
        auto81FD4BA3_g = UnitGroup("Marine", gv_pLAYER_05_COM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto81FD4BA3_u = UnitGroupCount(auto81FD4BA3_g, c_unitCountAll);
        for (;; auto81FD4BA3_u -= 1) {
            auto81FD4BA3_var = UnitGroupUnitFromEnd(auto81FD4BA3_g, auto81FD4BA3_u);
            if (auto81FD4BA3_var == null) { break; }
            gf_SetWaypoints(gv_pLAYER_05_COM, 1, 13);
            AIAttackWaveAddUnits4(10, 10, 10, 10, "Marine");
            AIAttackWaveSend(gv_pLAYER_05_COM, 0, false);
            libNtve_gf_AICast(auto81FD4BA3_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(720390642)));
        }
    }
    else {
        gf_SetWaypoints(gv_pLAYER_05_COM, 1, 13);
        AIAttackWaveAddUnits4(10, 10, 10, 10, "Marine");
        AIAttackWaveSend(gv_pLAYER_05_COM, 0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesCellBlockA_Init () {
    gt_ALLYAttackWavesCellBlockA = TriggerCreate("gt_ALLYAttackWavesCellBlockA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Cell Block B
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesCellBlockB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEB584F51_g;
    int autoEB584F51_u;
    unit autoEB584F51_var;
    unitgroup auto5A3BF61C_g;
    int auto5A3BF61C_u;
    unit auto5A3BF61C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEB584F51_g = UnitGroup("Goliath", gv_pLAYER_06_COM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB584F51_u = UnitGroupCount(autoEB584F51_g, c_unitCountAll);
    for (;; autoEB584F51_u -= 1) {
        autoEB584F51_var = UnitGroupUnitFromEnd(autoEB584F51_g, autoEB584F51_u);
        if (autoEB584F51_var == null) { break; }
        UnitSetState(autoEB584F51_var, c_unitStateTargetable, true);
        UnitSetState(autoEB584F51_var, c_unitStateStatusBar, true);
        if ((libNtve_gf_UnitGroupIsDead(gv_airportGuard) == true)) {
            auto5A3BF61C_g = UnitGroup("Goliath", gv_pLAYER_06_COM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5A3BF61C_u = UnitGroupCount(auto5A3BF61C_g, c_unitCountAll);
            for (;; auto5A3BF61C_u -= 1) {
                auto5A3BF61C_var = UnitGroupUnitFromEnd(auto5A3BF61C_g, auto5A3BF61C_u);
                if (auto5A3BF61C_var == null) { break; }
                AIAttackWaveAddUnits4(3, 3, 3, 3, "Goliath");
                AIAttackWaveSend(gv_pLAYER_06_COM, 0, false);
                libNtve_gf_AICast(auto5A3BF61C_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(720390642)));
            }
        }
        else {
            gf_SetWaypoints(gv_pLAYER_06_COM, 6, 13);
            AIAttackWaveAddUnits4(3, 3, 3, 3, "Goliath");
            AIAttackWaveSend(gv_pLAYER_06_COM, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesCellBlockB_Init () {
    gt_ALLYAttackWavesCellBlockB = TriggerCreate("gt_ALLYAttackWavesCellBlockB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ALLY Attack Waves - Cell Block C
//--------------------------------------------------------------------------------------------------
bool gt_ALLYAttackWavesCellBlockC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto61B02553_g;
    int auto61B02553_u;
    unit auto61B02553_var;
    unitgroup auto101163FD_g;
    int auto101163FD_u;
    unit auto101163FD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto61B02553_g = UnitGroup("SiegeTank", gv_pLAYER_07_COM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61B02553_u = UnitGroupCount(auto61B02553_g, c_unitCountAll);
    for (;; auto61B02553_u -= 1) {
        auto61B02553_var = UnitGroupUnitFromEnd(auto61B02553_g, auto61B02553_u);
        if (auto61B02553_var == null) { break; }
        UnitSetState(auto61B02553_var, c_unitStateTargetable, true);
        UnitSetState(auto61B02553_var, c_unitStateStatusBar, true);
        if ((libNtve_gf_UnitGroupIsDead(gv_airportGuard) == true)) {
            auto101163FD_g = UnitGroup("SiegeTank", gv_pLAYER_07_COM, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto101163FD_u = UnitGroupCount(auto101163FD_g, c_unitCountAll);
            for (;; auto101163FD_u -= 1) {
                auto101163FD_var = UnitGroupUnitFromEnd(auto101163FD_g, auto101163FD_u);
                if (auto101163FD_var == null) { break; }
                libNtve_gf_AICast(auto101163FD_var, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(720390642)));
                AIAttackWaveAddUnits4(1, 1, 1, 1, "SiegeTank");
                AIAttackWaveSend(gv_pLAYER_07_COM, 0, false);
            }
        }
        else {
            gf_SetWaypoints(gv_pLAYER_07_COM, 12, 13);
            AIAttackWaveAddUnits4(1, 1, 1, 1, "SiegeTank");
            AIAttackWaveSend(gv_pLAYER_07_COM, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ALLYAttackWavesCellBlockC_Init () {
    gt_ALLYAttackWavesCellBlockC = TriggerCreate("gt_ALLYAttackWavesCellBlockC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block A Completed
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockACompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_prisonguardA) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_numberofprison += 1;
    Wait(1.5, c_timeGame);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(19), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(19), 0.0, false);
    UnitIssueOrder(UnitFromId(951160218), Order(AbilityCommand("SecurityGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    TriggerExecute(gt_ALLYAttackWavesCellBlockA, true, false);
    Wait(15.0, c_timeGame);
    gv_acaptured = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockACompleted_Init () {
    gt_CellBlockACompleted = TriggerCreate("gt_CellBlockACompleted_Func");
    TriggerAddEventUnitDied(gt_CellBlockACompleted, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block B Completed
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockBCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_prisonguardB) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_numberofprison += 1;
    Wait(1.5, c_timeGame);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(23), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(23), 0.0, false);
    UnitIssueOrder(UnitFromId(156), Order(AbilityCommand("SecurityGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    TriggerExecute(gt_ALLYAttackWavesCellBlockB, true, false);
    Wait(15.0, c_timeGame);
    gv_bcaptured = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockBCompleted_Init () {
    gt_CellBlockBCompleted = TriggerCreate("gt_CellBlockBCompleted_Func");
    TriggerAddEventUnitDied(gt_CellBlockBCompleted, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cell Block C Completed
//--------------------------------------------------------------------------------------------------
bool gt_CellBlockCCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_prisonguardC) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_numberofprison += 1;
    Wait(1.5, c_timeGame);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(24), 0.0, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionFromId(24), 0.0, false);
    UnitIssueOrder(UnitFromId(131), Order(AbilityCommand("SecurityGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    TriggerExecute(gt_ALLYAttackWavesCellBlockC, true, false);
    Wait(15.0, c_timeGame);
    gv_ccaptured = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CellBlockCCompleted_Init () {
    gt_CellBlockCCompleted = TriggerCreate("gt_CellBlockCCompleted_Func");
    TriggerAddEventUnitDied(gt_CellBlockCCompleted, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetPlayer(gv_pLAYER_05_COM, PlayerGroupSingle(gv_pLAYER_03_ENEMY));
    AICampaignStart(gv_pLAYER_05_COM);
    AICampaignStart(gv_pLAYER_06_COM);
    AICampaignStart(gv_pLAYER_07_COM);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_06_COM, PlayerGroupSingle(gv_pLAYER_03_ENEMY));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_07_COM, PlayerGroupSingle(gv_pLAYER_03_ENEMY));
    TriggerExecute(gt_AIAttackWaves, true, false);
    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_ALLYAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(1);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(10);
    lv_spawnLocationIter = 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(1);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(5);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1186383418));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1186383418));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1186383418));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1186383418));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    playergroup auto840A4355_g;
    int auto840A4355_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    auto840A4355_g = libCOMI_gf_HumanPlayers();
    auto840A4355_var = -1;
    while (true) {
        auto840A4355_var = PlayerGroupNextPlayer(auto840A4355_g, auto840A4355_var);
        if (auto840A4355_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, auto840A4355_var, RegionFromId(17), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, auto840A4355_var, RegionFromId(16), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(1745962890);
        }
        else {
            lv_attackPathWaypoint = PointFromId(9830176);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(1745962890);
        }
        else {
            lv_attackPathWaypoint = PointFromId(9830176);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(1745962890))) {
        gv_attackWaveA_Wave05Path = PointFromId(9830176);
    }
    else {
        gv_attackWaveA_Wave05Path = PointFromId(1745962890);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1186383418));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1186383418));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1186383418));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1186383418));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1186383418));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1186383418));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1186383418));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1186383418));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1186383418));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1186383418));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveMainCreate, true, true);
    TriggerExecute(gt_escape, true, true);
    TriggerExecute(gt_showprisons, true, true);
    TriggerExecute(gt_ShowandUpdateObjectiveMarkers, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, true);
    TriggerExecute(gt_ObjectiveTimerWindow, true, false);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/DC9C5A6B"), StringExternal("Param/Value/5BD87475"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(10.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/4A8865DC"), StringExternal("Param/Value/836C6846"), 6.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(8.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/DA0C2E90"), StringExternal("Param/Value/FC68F00B"), 6.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(8.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/D5B0B909"), StringExternal("Param/Value/11AAB5BF"), 7.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    Wait(10.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/3AB90025"), StringExternal("Param/Value/30280BC6"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_SendMissionTransmission("TugofWarReady", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Timer Window
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveTimerWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_objectiveTimer, (25.0 * 60.0), false, c_timeGame);
    libCOMI_gf_TimerWindowCreate(gv_objectiveTimer, StringExternal("Param/Value/C7C30FF1"), true, false);
    Wait(4.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_ObjectivePreventTimerExpireUpdate, true, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveTimerWindow_Init () {
    gt_ObjectiveTimerWindow = TriggerCreate("gt_ObjectiveTimerWindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show and Update Objective Markers
//--------------------------------------------------------------------------------------------------
bool gt_ShowandUpdateObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_baseIter;
    region lv_enemyBase;
    int lv_activePingsDesired;
    int lv_activePingsTotal;
    int lv_activePingsPrevious;
    unitgroup lv_enemyBaseTargets;

    // Automatic Variable Declarations
    const int auto0FAE99F3_ae = gv_eNEMY_BASE_COUNT;
    const int auto0FAE99F3_ai = 1;
    const int autoD47E019D_ae = gv_eNEMY_BASE_COUNT;
    const int autoD47E019D_ai = 1;
    unitgroup auto7B85A426_g;
    int auto7B85A426_u;
    unit auto7B85A426_var;

    // Variable Initialization
    lv_enemyBaseTargets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_activePingsDesired = 3;
    while ((libCOMI_gf_GameIsOver() == false)) {
        lv_activePingsTotal = 0;
        lv_baseIter = 1;
        for ( ; ( (auto0FAE99F3_ai >= 0 && lv_baseIter <= auto0FAE99F3_ae) || (auto0FAE99F3_ai < 0 && lv_baseIter >= auto0FAE99F3_ae) ) ; lv_baseIter += auto0FAE99F3_ai ) {
            if ((gv_enemyBaseObjectiveMarkers[lv_baseIter] != c_invalidPingId)) {
                lv_activePingsTotal += 1;
            }

        }
        lv_baseIter = 1;
        for ( ; ( (autoD47E019D_ai >= 0 && lv_baseIter <= autoD47E019D_ae) || (autoD47E019D_ai < 0 && lv_baseIter >= autoD47E019D_ae) ) ; lv_baseIter += autoD47E019D_ai ) {
            lv_enemyBase = RegionFromName(("EnemyBase " + IntToString(lv_baseIter)));
            lv_enemyBaseTargets = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, lv_enemyBase, gv_vICTORY_REQUIREMENT, 0);
            if ((gv_enemyBaseObjectiveMarkers[lv_baseIter] == c_invalidPingId)) {
                if (((lv_activePingsTotal < lv_activePingsDesired) || (UnitGroupCount(UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, lv_enemyBase, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) && (UnitGroupCount(lv_enemyBaseTargets, c_unitCountAlive) >= 4)) {
                    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(lv_enemyBase), StringExternal("Param/Value/7DB56A11"));
                    gv_enemyBaseObjectiveMarkers[lv_baseIter] = PingLastCreated();
                    lv_activePingsTotal += 1;
                }

            }

            if ((UnitGroupCount(lv_enemyBaseTargets, c_unitCountAlive) < 4)) {
                libCOMI_gf_DestroyPingCoop(gv_enemyBaseObjectiveMarkers[lv_baseIter]);
                gv_enemyBaseObjectiveMarkers[lv_baseIter] = c_invalidPingId;
                auto7B85A426_g = lv_enemyBaseTargets;
                auto7B85A426_u = UnitGroupCount(auto7B85A426_g, c_unitCountAll);
                for (;; auto7B85A426_u -= 1) {
                    auto7B85A426_var = UnitGroupUnitFromEnd(auto7B85A426_g, auto7B85A426_u);
                    if (auto7B85A426_var == null) { break; }
                    if ((libHots_gf_PingStoredForUnit(auto7B85A426_var, 1) == c_invalidPingId)) {
                        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(auto7B85A426_var), StringExternal("Param/Value/70B49722"));
                        PingSetUnit(PingLastCreated(), auto7B85A426_var);
                        libHots_gf_StorePingForUnit(auto7B85A426_var, 1, PingLastCreated());
                        PingSetScale(PingLastCreated(), 0.6);
                    }

                }
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowandUpdateObjectiveMarkers_Init () {
    gt_ShowandUpdateObjectiveMarkers = TriggerCreate("gt_ShowandUpdateObjectiveMarkers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Small Building Objective Markers
//--------------------------------------------------------------------------------------------------
bool gt_DestroySmallBuildingObjectiveMarkers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    gv_victoryCompletePan = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroySmallBuildingObjectiveMarkers_Init () {
    gt_DestroySmallBuildingObjectiveMarkers = TriggerCreate("gt_DestroySmallBuildingObjectiveMarkers_Func");
    TriggerAddEventUnitDied(gt_DestroySmallBuildingObjectiveMarkers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    libCOMI_gf_SendMissionTransmission("DestroyedReminder", false, -1);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectivePreventTimerExpireFailed, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/106E3BA8"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, RegionGetCenter(RegionEntireMap()), 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    TriggerAddEventTimer(gt_DefeatPrimaryObjectiveFailed, gv_objectiveTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Primary Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryPrimaryObjectiveComplete_Init () {
    gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_currentescaped >= gv_escapedprisoner))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveMainComplete, true, false);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
    TriggerAddEventTimePeriodic(gt_VictorySequence, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveVictory", false, -1);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/349687B7"), StringExternal("Param/Value/08C32269"), 12.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_WaitForMissionTransmission();
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/08E08EAD"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/3ADFF0DB"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Create
//--------------------------------------------------------------------------------------------------
bool gt_BonusCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate((StringExternal("Param/Value/C3FF4D0D") + StringExternal("Param/Value/9C8306B0")), StringToText(""), c_objectiveStateActive, false);
    gv_bonusObjective = ObjectiveLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, RegionGetCenter(RegionFromId(28)), StringExternal("Param/Value/D545DE70"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusCreate_Init () {
    gt_BonusCreate = TriggerCreate("gt_BonusCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: bonus Remind
//--------------------------------------------------------------------------------------------------
bool gt_bonusRemind_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) <= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/05A8FF89"), StringExternal("Param/Value/C0BFC637"), 12.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libCOMI_gf_WaitForMissionTransmission();
    TriggerExecute(gt_BonusCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bonusRemind_Init () {
    gt_bonusRemind = TriggerCreate("gt_bonusRemind_Func");
    TriggerAddEventUnitRegion(gt_bonusRemind, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusCompleteQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_bonusObjective, c_objectiveStateCompleted);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromUnit(UnitFromId(772372981), false, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/833D93EF"), StringExternal("Param/Value/3C0A59AF"), 8.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusCompleteQ_Init () {
    gt_BonusCompleteQ = TriggerCreate("gt_BonusCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Destroyed Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusDestroyedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusCompleteQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusDestroyedQ_Init () {
    gt_BonusDestroyedQ = TriggerCreate("gt_BonusDestroyedQ_Func");
    TriggerAddEventUnitDied(gt_BonusDestroyedQ, UnitRefFromUnit(UnitFromId(458993096)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: showprisons
//--------------------------------------------------------------------------------------------------
bool gt_showprisons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(25)), StringExternal("Param/Value/4FADD851"));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(RegionFromId(14)), StringExternal("Param/Value/8F529CD1"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showprisons_Init () {
    gt_showprisons = TriggerCreate("gt_showprisons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: escape
//--------------------------------------------------------------------------------------------------
bool gt_escape_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "SiegeTank")) {
        UnitRemove(EventUnit());
        gv_currentescaped += 3;
    }
    else if ((UnitGetType(EventUnit()) == "Marine")) {
        UnitRemove(EventUnit());
        gv_currentescaped += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Goliath")) {
        UnitRemove(EventUnit());
        gv_currentescaped += 2;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_escape_Init () {
    gt_escape = TriggerCreate("gt_escape_Func");
    TriggerAddEventUnitRegion(gt_escape, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveTostarport
//--------------------------------------------------------------------------------------------------
bool gt_MoveTostarport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(720390642)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveTostarport_Init () {
    gt_MoveTostarport = TriggerCreate("gt_MoveTostarport_Func");
    TriggerAddEventUnitRegion(gt_MoveTostarport, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Main - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMainCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", gv_currentescaped);
    gv_objectiveEscapeprisoner = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    TriggerExecute(gt_ObjectiveMainUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMainCreate_Init () {
    gt_ObjectiveMainCreate = TriggerCreate("gt_ObjectiveMainCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Main - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMainComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMainCreate, true, false);
    ObjectiveSetState(gv_objectiveEscapeprisoner, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMainComplete_Init () {
    gt_ObjectiveMainComplete = TriggerCreate("gt_ObjectiveMainComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Main - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMainUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveMainCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_currentescaped);
    TextExpressionSetToken("Param/Expression/31A1A166", "currentescaped", IntToText(gv_currentescaped));
    ObjectiveSetName(gv_objectiveEscapeprisoner, TextExpressionAssemble("Param/Expression/31A1A166"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMainUpdate_Init () {
    gt_ObjectiveMainUpdate = TriggerCreate("gt_ObjectiveMainUpdate_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveMainUpdate, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - Main - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveMainFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveMainCreate, true, false);
    ObjectiveSetState(gv_objectiveEscapeprisoner, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveMainFailed_Init () {
    gt_ObjectiveMainFailed = TriggerCreate("gt_ObjectiveMainFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    gv_objectivePreventTimerExpire = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 9);
    TriggerExecute(gt_ObjectivePreventTimerExpireUpdate, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireCreate_Init () {
    gt_ObjectivePreventTimerExpireCreate = TriggerCreate("gt_ObjectivePreventTimerExpireCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
    ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireComplete_Init () {
    gt_ObjectivePreventTimerExpireComplete = TriggerCreate("gt_ObjectivePreventTimerExpireComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
    TextExpressionSetToken("Param/Expression/1EC3DF22", "timerRemaining", libCOMI_gf_FormatTimeCampaign(FixedToInt(TimerGetRemaining(gv_objectiveTimer))));
    ObjectiveSetName(gv_objectivePreventTimerExpire, TextExpressionAssemble("Param/Expression/1EC3DF22"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireUpdate_Init () {
    gt_ObjectivePreventTimerExpireUpdate = TriggerCreate("gt_ObjectivePreventTimerExpireUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective - PreventTimerExpire - Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectivePreventTimerExpireFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectivePreventTimerExpireCreate, true, false);
    ObjectiveSetState(gv_objectivePreventTimerExpire, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectivePreventTimerExpireFailed_Init () {
    gt_ObjectivePreventTimerExpireFailed = TriggerCreate("gt_ObjectivePreventTimerExpireFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init05Units_Init();
    gt_firstcaptured_Init();
    gt_second_Init();
    gt_third_Init();
    gt_ALLYAttackWaves_Init();
    gt_CellBlockSpawnersA_Init();
    gt_CellBlockSpawnersB_Init();
    gt_CellBlockSpawnersC_Init();
    gt_ALLYAttackWavesCellBlockA_Init();
    gt_ALLYAttackWavesCellBlockB_Init();
    gt_ALLYAttackWavesCellBlockC_Init();
    gt_CellBlockACompleted_Init();
    gt_CellBlockBCompleted_Init();
    gt_CellBlockCCompleted_Init();
    gt_StartAI_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_StartGameQ_Init();
    gt_ObjectiveTimerWindow_Init();
    gt_ShowandUpdateObjectiveMarkers_Init();
    gt_DestroySmallBuildingObjectiveMarkers_Init();
    gt_EnemyAttackingQ_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryPrimaryObjectiveComplete_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_BonusCreate_Init();
    gt_bonusRemind_Init();
    gt_BonusCompleteQ_Init();
    gt_BonusDestroyedQ_Init();
    gt_showprisons_Init();
    gt_escape_Init();
    gt_MoveTostarport_Init();
    gt_ObjectiveMainCreate_Init();
    gt_ObjectiveMainComplete_Init();
    gt_ObjectiveMainUpdate_Init();
    gt_ObjectiveMainFailed_Init();
    gt_ObjectivePreventTimerExpireCreate_Init();
    gt_ObjectivePreventTimerExpireComplete_Init();
    gt_ObjectivePreventTimerExpireUpdate_Init();
    gt_ObjectivePreventTimerExpireFailed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
