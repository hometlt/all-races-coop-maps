//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Cradle of Death
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_ENEMY = 7;
const int gv_pLAYER_04_ENEMY = 9;
const int gv_pLAYER_05_ENEMY_DropPods = 10;
const int gv_pLAYER_06_ENEMY_DropPods = 6;
const fixed gv_c_MissionFailureReminderDelay = 180.0;
const fixed gv_c_MissionFailureCriticalDelay = 90.0;
const int gv_c_PayloadCount = 15;
const int gv_c_PrimaryObjectiveCount = 5;
const int gv_c_PrimaryObjectiveNukeRadiusMarker_Count = 5;
const string gv_c_GateKeepers = "CODXelNagaConstruct";
const string gv_c_PayloadUnitType = "CODFlatbedTruck";
const fixed gv_c_TriggeringRangeForPayload = 2.0;
const int gv_c_BonusObjectiveCount = 2;
const int gv_c_BonusObjectiveExplosionCount = 3;
const fixed gv_transmissionWaitTime = 0.0;
const int gv_c_ObjectiveRequiredCount = 4;
const int gv_c_EasterEggSceneCount = 5;
const int gv_c_EasterEggMurlocScene = 2;
const int gv_c_EasterEggCarScene = 4;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_PrimaryObjective {
    unit lv_objectiveStructure;
    unit[3] lv_payloadDestination;
    unit[3] lv_payloadDestinationBlockedMarker;
    doodad[6] lv_nukeRadiusMarkers;
    point[4] lv_escapeDirection;
    point lv_targetFacilityCenter;
    region lv_nukeExplosionArea;
    region lv_revealExits;
    unitgroup lv_constructs;
    unit[3] lv_constructDropOffGuards;
    trigger lv_extraDestruction;
    region lv_directionLights;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_MissionProgressPaths__Uninitialized = 0;
const int ge_MissionProgressPaths_PathLeft = 1;
const int ge_MissionProgressPaths_PathRight = 2;
const int ge_MissionObjectives__Uninitialized = 0;
const int ge_MissionObjectives_Objective1HybridFacility = 1;
const int ge_MissionObjectives_Objective2XenonReactor = 2;
const int ge_MissionObjectives_Objective3ResourceStockpile = 3;
const int ge_MissionObjectives_Objective4VespeneRefinery = 4;
const int ge_MissionObjectives_Objective5TerrazineExtractors = 5;
const int ge_BeaconStates_Kill = 0;
const int ge_BeaconStates_ActivateOnPrimary = 1;
const int ge_BeaconStates_ActivateOnBonus = 2;
const int ge_BeaconStates_ActivateOff = 3;
const int ge_BuildPayloadBothPlayers_BothPlayers = 0;
const int ge_BonusObjectiveType__None = 0;
const int ge_BonusObjectiveType_LeftTop = 1;
const int ge_BonusObjectiveType_LeftBottom = 2;
const int ge_BonusObjectiveType_RightTop = 3;
const int ge_BonusObjectiveType_RightBottom = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_missionObjectiveOrder_BranchFirst;
int gv_missionObjectiveOrder_BranchThird;
fixed gv_timeAddedByObjectiveProgress;
fixed gv_initialTimerLength;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
int gv_pLAYER_STONE;
unitgroup gv_expansionBlockers;
unitgroup gv_expansionResources;
unitgroup gv_unitsStartingPaused;
timer gv_countdownUntilMissionFailure;
timer gv_missionFailureReminderTimer;
timer gv_missionFailureCriticalTimer;
bool[gv_c_PayloadCount + 1] gv_payloadUnderAttack;
unitgroup gv_allConstructs;
fixed[6] gv_construct_Life;
timer[3] gv_bonusObjectiveDelayTimer;
fixed gv_c_BonusObjectiveDelay;
int gv_leaderboardBonus01ScoreFinal;
int gv_leaderboardBonus02ScoreFinal;
int gv_leaderboardObjectiveScoreFinal;
fixed gv_leaderboardTransportDamageTaken;
int gv_bombWarningDialogItem;
int gv_nukeBarWidth;
int gv_nukeBarHeight;
int gv_nukeBarDialog;
int gv_nukeBar;
int[gv_c_PrimaryObjectiveCount + 1] gv_missionObjectiveOrder;
gs_PrimaryObjective[gv_c_PrimaryObjectiveCount + 1] gv_primaryObjectiveTarget;
int gv_objectiveActive;
int gv_objectiveActiveCounter;
actor gv_objectiveReminderReticle;
int gv_objectiveReminderText;
unit[16] gv_payloadsAtPrimaryObjective;
bool[16] gv_firstPayloadSpawned;
timer[16] gv_payloadAttackedTime;
bool[16] gv_payloadDetonating;
bool gv_payloadSpeedBoost;
order gv_c_BuildPayloadOrder;
timer gv_explosionFuse;
fixed gv_explosionFuseTime;
int gv_facilitiesDestroyed;
unit[16] gv_payloadTrucks;
unit[16] gv_payloadFacility;
bool[gv_c_PrimaryObjectiveCount + 1][gv_c_PayloadCount + 1] gv_payloadArrived;
timer[gv_c_PrimaryObjectiveCount + 1][4] gv_payloadEvents;
point gv_previousDropLocation;
timer[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveCompletionTimer;
timer[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveReminderTimer;
fixed gv_bonusObjectivePauseGrace;
int[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveOrder;
actor[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveDoor;
point[gv_c_BonusObjectiveCount + 1] gv_bonusObjectivePayloadMoveStart;
point[gv_c_BonusObjectiveCount + 1] gv_bonusObjectivePayloadMoveTo;
timer[gv_c_BonusObjectiveCount + 1] gv_bonusObjectivePauseTimer;
unitgroup[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveTargets;
region[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveDetonationRevealArea;
fixed gv_bonusObjectiveDuration;
unitgroup[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveConstructs;
unit[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveGuardianConstruct;
unit[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveDropOffMarker;
unit[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveDropOffMarkerBlocked;
doodad[gv_c_BonusObjectiveCount + 1] gv_bonusObjectiveActiveLight;
point[gv_c_BonusObjectiveCount + 1][gv_c_BonusObjectiveExplosionCount + 1] gv_bonusObjectiveExplosionPoint;
bool gv_transmissionBothPayloadsVOPlayed;
timer[16] gv_payloadAttackNotificationCooldown;
bool[16] gv_transmissionPayloadAttackedPlaying;
int gv_transmissionBonusObjectiveSelection;
bool gv_constructIntroPlayed;
timer[12] gv_attackWaveEvent;
trigger gv_victoryCameraMove;
int gv_easterEggCurrentScene;
string[gv_c_EasterEggSceneCount + 1] gv_easterEggScenes;
int gv_easterEggCutscene;
bool gv_easterEggActivateReady;
fixed gv_c_EasterEggDelay;
timer gv_easterEggTimer;
string[gv_c_PrimaryObjectiveCount + 1] gv_objectiveDestroyObjective_Data;
int[gv_c_PrimaryObjectiveCount + 1] gv_objectiveDestroyObjective_Objective;
int gv_objectiveDestroyZergBase;
int gv_objectiveRescueStalkers;
int gv_objectiveRescueStalkers2;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_missionObjectiveOrder_BranchFirst = ge_MissionProgressPaths__Uninitialized;
    gv_missionObjectiveOrder_BranchThird = ge_MissionProgressPaths__Uninitialized;
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_pLAYER_STONE = 11;
    gv_expansionBlockers = UnitGroupEmpty();
    gv_expansionResources = UnitGroupEmpty();
    gv_unitsStartingPaused = UnitGroupEmpty();
    gv_countdownUntilMissionFailure = TimerCreate();
    gv_missionFailureReminderTimer = TimerCreate();
    gv_missionFailureCriticalTimer = TimerCreate();
    gv_allConstructs = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_bonusObjectiveDelayTimer[init_i] = TimerCreate();
    }
    gv_c_BonusObjectiveDelay = 5.0;
    gv_bombWarningDialogItem = c_invalidDialogControlId;
    gv_nukeBarWidth = 550;
    gv_nukeBarHeight = 59;
    gv_nukeBarDialog = c_invalidDialogId;
    gv_nukeBar = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_c_PrimaryObjectiveCount; init_i += 1) {
        gv_missionObjectiveOrder[init_i] = ge_MissionObjectives__Uninitialized;
    }
    for (init_i = 0; init_i <= gv_c_PrimaryObjectiveCount; init_i += 1) {
        gv_primaryObjectiveTarget[init_i].lv_constructs = UnitGroupEmpty();
    }
    gv_objectiveActive = ge_MissionObjectives__Uninitialized;
    gv_objectiveReminderText = c_textTagNone;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_payloadAttackedTime[init_i] = TimerCreate();
    }
    gv_c_BuildPayloadOrder = Order(AbilityCommand("BuildPayload", 0));
    gv_explosionFuse = TimerCreate();
    for (init_i = 0; init_i <= gv_c_PrimaryObjectiveCount; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_payloadEvents[init_i][init_j] = TimerCreate();
        }
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveCount; init_i += 1) {
        gv_bonusObjectiveCompletionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveCount; init_i += 1) {
        gv_bonusObjectiveReminderTimer[init_i] = TimerCreate();
    }
    gv_bonusObjectivePauseGrace = 5.0;
    for (init_i = 0; init_i <= gv_c_BonusObjectiveCount; init_i += 1) {
        gv_bonusObjectiveOrder[init_i] = ge_BonusObjectiveType__None;
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveCount; init_i += 1) {
        gv_bonusObjectivePauseTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveCount; init_i += 1) {
        gv_bonusObjectiveTargets[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_c_BonusObjectiveCount; init_i += 1) {
        gv_bonusObjectiveConstructs[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_payloadAttackNotificationCooldown[init_i] = TimerCreate();
    }
    gv_transmissionBonusObjectiveSelection = -1;
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_attackWaveEvent[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= gv_c_EasterEggSceneCount; init_i += 1) {
        gv_easterEggScenes[init_i] = "";
    }
    gv_easterEggCutscene = c_cutsceneNone;
    gv_c_EasterEggDelay = 0.6;
    gv_easterEggTimer = TimerCreate();
    for (init_i = 0; init_i <= gv_c_PrimaryObjectiveCount; init_i += 1) {
        gv_objectiveDestroyObjective_Objective[init_i] = c_invalidObjectiveId;
    }
    gv_objectiveDestroyZergBase = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AttachReticleEffectAndTextTagOnUnitCOD (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint);
color gf_TimerColor (timer lp_timer);
void gf_CreateExplosionAtPointwithSmoke (int lp_size, int lp_race, point lp_point);
void gf_LeaderboardPayloadTakesDamage (fixed lp_damageTaken);
void gf_ActivateandMakeObjectiveCurrent (int lp_currentObjective);
int gf_ActiveObjective ();
void gf_ShowHideNukeRadiusMarkers (bool lp_showHide, int lp_targetFacility);
void gf_ShowEscapeArrows (int lp_targetFacility);
void gf_ModifyDropoffBeaconState (unit lp_beacon, int lp_state);
void gf_SetMissionFailureTimer (fixed lp_duration);
void gf_SetObjectiveReminderReticle (unit lp_targetUnit);
void gf_KillObjectiveReminderReticle ();
void gf_ActivateDropOffBeacons ();
void gf_ActivateObjectiveBeaconsandConstructs (int lp_currentObjective);
void gf_SwitchRampLights (region lp_region, bool lp_onOff);
void gf_PlantExplosives (int lp_targetFacility, int lp_payloadIndex, int lp_pointIndex, bool lp_primaryObjective);
void gf_StartFuse (int lp_targetFacility);
void gf_ExplosivesExplode (int lp_targetFacility);
point gf_PayloadTarget (int lp_payloadIndex);
void gf_BuildPayloads (int lp_payloadsToBuild);
void gf_TurnPayloadSpeedOnOff (bool lp_onOff);
void gf_SetupUnitasPayload (unit lp_payloadUnit);
void gf_BombPlanted (int lp_targetFacility, unit lp_payload, int lp_destinationIndex);
void gf_WatchPayloadDropoffs (int lp_targetFacility);
void gf_ClearPayloadPings (unit lp_payloadUnit);
void gf_ShowHidePayloadPings (unit lp_payload, bool lp_showHide);
int gf_AlliedPlayer (int lp_player);
void gf_PayloadSoftTutorialReticles (unit lp_payload);
point gf_DropPodLocation (point lp_payloadLocation, int lp_activeObjective);
int gf_BonusObjectiveOrder (int lp_bonusObjectiveNumber);
void gf_StartBonusObjective (int lp_bObjIndex, trigger lp_triggerCreate, trigger lp_triggerUpdate, trigger lp_triggerComplete, trigger lp_triggerFail, trigger lp_triggerConstructDestroy);
void gf_AnimateBonusObjectiveCompletion (unit lp_payload, point lp_start, point lp_destination, int lp_bonusObjIndex);
void gf_PauseUnpauseBonusObjective (bool lp_pauseUnpause, int lp_bonusObjIndex);
void gf_SetBonusObjectiveTargetProperties (unit lp_bonusObjectiveTarget);
void gf_TransmissionPayloadAttackedQ (unit lp_defendingUnit);
void gf_TransmissionPayloadReadyQ (int lp_payloadOwner);
void gf_TransmissionPayloadLostInTransitQ (int lp_payloadOwner);
void gf_ScoreScreenDamageDealttoConstructsSetup ();
point gf_AttackWaveSpawnPoint ();
point gf_AttackWaveWaypoint ();
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
void gf_DropPodAttackonPayloads (fixed lp_waveTime, int lp_waveCount, int lp_currentObjective, int lp_resourceBucket, int lp_techLevel);
unit gf_PrioritizedPayloadTarget (int lp_enemyPlayer);
void gf_CreateDropPodTelegraphed (int lp_player, point lp_location, int lp_resourceBucket, int lp_techLevel);
void gf_InitalizeEasterEgg ();
void gf_ObjectiveDestroyPrimaryObjectiveCreate (int lp_objectiveToCreate);
void gf_ObjectiveDestroyPrimaryObjectiveComplete (int lp_objectiveToComplete);
void gf_ObjectiveDestroyPrimaryObjectiveUpdate (int lp_objectiveToUpdate, int lp_progress);
void gf_ObjectiveDestroyPrimaryObjectiveFailed (int lp_objectiveToFailed);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init03LoadingComplete;
trigger gt_Init05Units;
trigger gt_Init05bTargetLocations;
trigger gt_Init05cDoodadVisibility;
trigger gt_Init05dBranchBullies;
trigger gt_Init08Difficulties;
trigger gt_DebugPauseUnpauseTimer;
trigger gt_StartGameQ;
trigger gt_UpdateObjectiveTimer;
trigger gt_EvacuateAreaCountdownUI;
trigger gt_CreateUIforExplosionWarning;
trigger gt_Location1Destruction;
trigger gt_Location2Destruction;
trigger gt_Location3Destruction;
trigger gt_Location4Destruction;
trigger gt_Location5Destruction;
trigger gt_PayloadDropOffConstructDestroyed;
trigger gt_PayloadBuilt;
trigger gt_PayloadAttacked;
trigger gt_PlayersLosePayload;
trigger gt_MapEnds;
trigger gt__1BombExplode;
trigger gt__2StartObjective;
trigger gt__2PayloadEvent1;
trigger gt__2PayloadEvent2;
trigger gt__2DropPodEventA;
trigger gt__2DropPodEventB;
trigger gt__2BombExplode;
trigger gt__3StartObjective;
trigger gt__3PayloadEvent1;
trigger gt__3PayloadEvent2;
trigger gt__3PayloadEvent3;
trigger gt__3BombExplode;
trigger gt__3DropPodEventA;
trigger gt__3DropPodEventB;
trigger gt__3DropPodEventC;
trigger gt__4StartObjective;
trigger gt__4PayloadEvent1;
trigger gt__4PayloadEvent2;
trigger gt__4PayloadEvent3;
trigger gt__4DropPodEventA;
trigger gt__4DropPodEventB;
trigger gt__4DropPodEventC;
trigger gt_InitializeBonusObjectiveOrder;
trigger gt_StartBonusObjective01;
trigger gt_StartBonusObjective02;
trigger gt_BonusObjectiveGuardian1Killed;
trigger gt_BonusObjectiveGuardian2Killed;
trigger gt_BonusObjectiveGuardian1Disabled;
trigger gt_BonusObjectiveGuardian2Disabled;
trigger gt_BonusObjectivePauseTimerExpires;
trigger gt_SetupBonusObjectiveLeftTop;
trigger gt_SetupBonusObjectiveLeftBottom;
trigger gt_SetupBonusObjectiveRightTop;
trigger gt_SetupBonusObjectiveRightBottom;
trigger gt_TransmissionNewObjectiveActiveQ;
trigger gt_TransmissionFuseStartsQ;
trigger gt_TransmissionPayloadDeliveredQ;
trigger gt_TransmissionObjectiveCompleteQ;
trigger gt_TransmissionTimerBelow3minsQ;
trigger gt_TransmissionTimerBelow15minsQ;
trigger gt_TransmissionPayloadReadyBothQ;
trigger gt_TransmissionBothPayloadsDeliveredQ;
trigger gt_TransmissionSpecialWaveSpawnQ;
trigger gt_TransmissionBonusObjectiveIntroQ;
trigger gt_TransmissionBonusObjectiveReminderQ;
trigger gt_TransmissionBonusObjectiveCompleteQ;
trigger gt_TransmissionBonusObjectiveFailedQ;
trigger gt_TransmissionFirstConstructQ;
trigger gt_TransmissionUnitsdietoConstructQ;
trigger gt_TransmissionConstructdiesQ;
trigger gt_StartAI;
trigger gt_EnemyAttackingQ;
trigger gt_AIAttackWaveSequence;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_AttackWave08;
trigger gt_AttackWave09;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictoryTargetSectorsDestroyedCompleted;
trigger gt_VictoryCameraMoveVespene;
trigger gt_VictoryCameraMoveTerrazine;
trigger gt_VictoryCameraMoveCannon;
trigger gt_VictoryTerrazineExplosions01;
trigger gt_VictoryTerrazineExplosions02;
trigger gt_VictoryVespeneExplosions01;
trigger gt_EasterEggHornHonkPlay;
trigger gt_EasterEggMurlocSoundPlay;
trigger gt_UnitEntersTeleporterRegion;
trigger gt_UnitLeavesTeleporterRegion;
trigger gt_ObjectiveDontLetTimerExpireCreate;
trigger gt_ObjectiveDontLetTimerExpireComplete;
trigger gt_ObjectiveDontLetTimerExpireUpdate;
trigger gt_ObjectiveDontLetTimerExpireFailed;
trigger gt_ObjectiveDestroyThing01Create;
trigger gt_ObjectiveDestroyThing01Complete;
trigger gt_ObjectiveDestroyThing01Update;
trigger gt_ObjectiveDestroyThing01Failed;
trigger gt_ObjectiveDestroyThing02Create;
trigger gt_ObjectiveDestroyThing02Complete;
trigger gt_ObjectiveDestroyThing02Update;
trigger gt_ObjectiveDestroyThing02Failed;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AttachReticleEffectAndTextTagOnUnitCOD (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCOMI_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnit(lp_target, lv_model, lp_attachPoint);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCOMI_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/E9D1A568", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/E9D1A568", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/E9D1A568"), 24, UnitGetPosition(lp_target), 0.0, true, true, libCOMI_gf_HumanPlayers());
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

color gf_TimerColor (timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    if ((TimerGetRemaining(lp_timer) < (TimerGetDuration(lp_timer) * 0.33))) {
        return Color(100.00, 0.00, 0.00);
    }
    else if ((TimerGetRemaining(lp_timer) < (TimerGetDuration(lp_timer) * 0.66))) {
        return Color(150*100/255,150*100/255,30*100/255);
    }
    return Color(100,100,100);
}

void gf_CreateExplosionAtPointwithSmoke (int lp_size, int lp_race, point lp_point) {
    // Variable Declarations
    string lv_race;
    string lv_size;
    actor lv_explosion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_race = "Terran";
    lv_size = "Large";

    // Implementation
    libNtve_gf_CreateActorAtPoint("TriggeredExplosion", lp_point);
    lv_explosion = libNtve_gf_ActorLastCreated();
    if ((lp_race == libNtve_ge_ExplosionType_Protoss)) {
        lv_race = "Protoss";
    }
    else {
        if ((lp_race == libNtve_ge_ExplosionType_Zerg)) {
            lv_race = "Zerg";
        }

    }
    if ((lp_size == libNtve_ge_ExplosionSize_Small)) {
        lv_size = "Small";
    }

    ActorSend(lv_explosion, (("Signal " + lv_race + lv_size)));
    libNtve_gf_CreateActorAtPoint("SmokePillarsTall", lp_point);
}

void gf_LeaderboardPayloadTakesDamage (fixed lp_damageTaken) {
    // Automatic Variable Declarations
    // Implementation
    gv_leaderboardTransportDamageTaken += lp_damageTaken;
}

void gf_ActivateandMakeObjectiveCurrent (int lp_currentObjective) {
    // Variable Declarations
    int lv_playerIter;
    region lv_activeConstructRegion;

    // Automatic Variable Declarations
    playergroup autoC43A0469_g;
    unitgroup auto833AC47C_g;
    int auto833AC47C_u;
    unit auto833AC47C_var;

    // Variable Initialization

    // Implementation
    gv_objectiveActive = lp_currentObjective;
    gv_objectiveActiveCounter = lp_currentObjective;
    gf_ObjectiveDestroyPrimaryObjectiveCreate(lp_currentObjective);
    gf_WatchPayloadDropoffs(lp_currentObjective);
    TriggerExecute(gt_TransmissionNewObjectiveActiveQ, true, false);
    gv_payloadsAtPrimaryObjective[1] = null;
    gv_payloadsAtPrimaryObjective[2] = null;
    gf_ActivateObjectiveBeaconsandConstructs(lp_currentObjective);
    gf_SwitchRampLights(gv_primaryObjectiveTarget[lp_currentObjective].lv_directionLights, true);
    autoC43A0469_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoC43A0469_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        auto833AC47C_g = gv_primaryObjectiveTarget[lp_currentObjective].lv_constructs;
        auto833AC47C_u = UnitGroupCount(auto833AC47C_g, c_unitCountAll);
        for (;; auto833AC47C_u -= 1) {
            auto833AC47C_var = UnitGroupUnitFromEnd(auto833AC47C_g, auto833AC47C_u);
            if (auto833AC47C_var == null) { break; }
            VisRevealArea(lv_playerIter, RegionCircle(UnitGetPosition(auto833AC47C_var), 5.0), 0.03, false);
        }
        VisRevealArea(lv_playerIter, RegionCircle(UnitGetPosition(gv_primaryObjectiveTarget[lp_currentObjective].lv_objectiveStructure), 5.0), 0.03, false);
        if ((lp_currentObjective == 1)) {
            VisRevealArea(lv_playerIter, RegionFromId(81), 0.03, false);
        }

    }
}

int gf_ActiveObjective () {
    // Automatic Variable Declarations
    // Implementation
    return gv_objectiveActive;
}

void gf_ShowHideNukeRadiusMarkers (bool lp_showHide, int lp_targetFacility) {
    // Variable Declarations
    int lv_doodadIter;

    // Automatic Variable Declarations
    const int auto00697479_ae = gv_c_PrimaryObjectiveNukeRadiusMarker_Count;
    const int auto00697479_ai = 1;

    // Variable Initialization

    // Implementation
    lv_doodadIter = 0;
    for ( ; ( (auto00697479_ai >= 0 && lv_doodadIter <= auto00697479_ae) || (auto00697479_ai < 0 && lv_doodadIter >= auto00697479_ae) ) ; lv_doodadIter += auto00697479_ai ) {
        if ((gv_primaryObjectiveTarget[lp_targetFacility].lv_nukeRadiusMarkers[lv_doodadIter] != null)) {
            if ((lp_showHide == true)) {
                ActorSend(ActorFromDoodad(gv_primaryObjectiveTarget[lp_targetFacility].lv_nukeRadiusMarkers[lv_doodadIter]), "SetVisibility 1");
            }
            else {
                ActorSend(ActorFromDoodad(gv_primaryObjectiveTarget[lp_targetFacility].lv_nukeRadiusMarkers[lv_doodadIter]), "SetVisibility");
            }
        }

    }
}

void gf_ShowEscapeArrows (int lp_targetFacility) {
    // Variable Declarations
    int lv_arrowIter;

    // Automatic Variable Declarations
    const int auto46716B72_ae = 3;
    const int auto46716B72_ai = 1;

    // Variable Initialization

    // Implementation
    lv_arrowIter = 1;
    for ( ; ( (auto46716B72_ai >= 0 && lv_arrowIter <= auto46716B72_ae) || (auto46716B72_ai < 0 && lv_arrowIter >= auto46716B72_ae) ) ; lv_arrowIter += auto46716B72_ai ) {
        if ((gv_primaryObjectiveTarget[lp_targetFacility].lv_escapeDirection[lv_arrowIter] != null)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "GuideArrowUnit", c_unitCreateIgnorePlacement, 0, gv_primaryObjectiveTarget[lp_targetFacility].lv_escapeDirection[lv_arrowIter]);
            UnitSetTeamColorIndex(UnitLastCreated(), 1);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTeamColor 255,0,0 255,0,0");
        }

    }
}

void gf_ModifyDropoffBeaconState (unit lp_beacon, int lp_state) {
    // Automatic Variable Declarations
    int auto8379038A_val;

    // Implementation
    auto8379038A_val = lp_state;
    if (auto8379038A_val == ge_BeaconStates_Kill) {
        if ((libHots_gf_PingStoredForUnit(lp_beacon, 1) != c_invalidPingId)) {
            libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_beacon, 1));
        }

        if ((libHots_gf_ActorForUnit(lp_beacon, 2) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_beacon, 2));
        }

        if ((libHots_gf_TextTagForUnit(lp_beacon, 3) != c_textTagNone)) {
            TextTagDestroy(libHots_gf_TextTagForUnit(lp_beacon, 3));
        }

        UnitKill(lp_beacon);
    }
    else if (auto8379038A_val == ge_BeaconStates_ActivateOnPrimary) {
        libNtve_gf_ShowHideUnit(lp_beacon, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_beacon), c_animNameDefault, "Birth", 0, c_animTimeDefault);
        TextExpressionSetToken("Param/Expression/234D280C", "UnitName", UnitTypeGetName(gv_c_PayloadUnitType));
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lp_beacon), TextExpressionAssemble("Param/Expression/234D280C"));
        libHots_gf_StorePingForUnit(lp_beacon, 1, PingLastCreated());
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_beacon), 3.0), 15.0, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_beacon), 3.0), 15.0, false);
        TextExpressionSetToken("Param/Expression/21D1ABB3", "TruckUnit", UnitTypeGetName(gv_c_PayloadUnitType));
        libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranMainObjective, libCOMI_ge_CampaginReticleSize_Medium, TextExpressionAssemble("Param/Expression/21D1ABB3"), lp_beacon, "Ref_Center");
        TextTagSetMaxSize(TextTagLastCreated(), 45.0, 2.0);
        libHots_gf_StoreActorForUnit(lp_beacon, 2, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(lp_beacon, 3, TextTagLastCreated());
    }
    else if (auto8379038A_val == ge_BeaconStates_ActivateOnBonus) {
        libNtve_gf_ShowHideUnit(lp_beacon, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_beacon), c_animNameDefault, "Birth", 0, c_animTimeDefault);
        TextExpressionSetToken("Param/Expression/DFBF0F03", "UnitName", UnitTypeGetName(gv_c_PayloadUnitType));
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lp_beacon), TextExpressionAssemble("Param/Expression/DFBF0F03"));
        libHots_gf_StorePingForUnit(lp_beacon, 1, PingLastCreated());
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(lp_beacon), 3.0), 15.0, false);
        VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(lp_beacon), 3.0), 15.0, false);
        TextExpressionSetToken("Param/Expression/A2F68F40", "TruckUnit", UnitTypeGetName(gv_c_PayloadUnitType));
        libCOMI_gf_CreateReticleEffectAndTextTagAtPoint(libCOMI_ge_CampaginReticleType_TerranBonusObjective, libCOMI_ge_CampaginReticleSize_Medium, TextExpressionAssemble("Param/Expression/A2F68F40"), UnitGetPosition(lp_beacon));
        TextTagSetMaxSize(TextTagLastCreated(), 45.0, 2.0);
        libHots_gf_StoreActorForUnit(lp_beacon, 2, libNtve_gf_ActorLastCreated());
        libHots_gf_StoreTextTagForUnit(lp_beacon, 3, TextTagLastCreated());
    }
    else if (auto8379038A_val == ge_BeaconStates_ActivateOff) {
        libNtve_gf_ShowHideUnit(lp_beacon, true);
    }
    else {
    }
}

void gf_SetMissionFailureTimer (fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(gv_countdownUntilMissionFailure, lp_duration, false, c_timeAI);
    TimerStart(gv_missionFailureReminderTimer, (lp_duration - gv_c_MissionFailureReminderDelay), false, c_timeAI);
    TimerStart(gv_missionFailureCriticalTimer, (lp_duration - gv_c_MissionFailureCriticalDelay), false, c_timeAI);
}

void gf_SetObjectiveReminderReticle (unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_TerranEnemy, libCOMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/BC98FE04"), lp_targetUnit, "Ref_Center");
    gv_objectiveReminderReticle = libNtve_gf_ActorLastCreated();
    gv_objectiveReminderText = TextTagLastCreated();
}

void gf_KillObjectiveReminderReticle () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_KillModel(gv_objectiveReminderReticle);
    TextTagDestroy(gv_objectiveReminderText);
}

void gf_ActivateDropOffBeacons () {
    // Automatic Variable Declarations
    // Implementation
    gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_payloadDestinationBlockedMarker[1], ge_BeaconStates_Kill);
    gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_payloadDestination[1], ge_BeaconStates_ActivateOnPrimary);
    gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_payloadDestinationBlockedMarker[2], ge_BeaconStates_Kill);
    gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_payloadDestination[2], ge_BeaconStates_ActivateOnPrimary);
    gf_TurnPayloadSpeedOnOff(true);
}

void gf_ActivateObjectiveBeaconsandConstructs (int lp_currentObjective) {
    // Variable Declarations
    unit lv_activeConstructUnit;
    unit lv_blockedBeaconUnit;
    int lv_constructIter;

    // Automatic Variable Declarations
    const int autoA42FCA97_ae = 2;
    const int autoA42FCA97_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[1]) == true) && (UnitIsAlive(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[2]) == true)) {
        gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[lp_currentObjective].lv_payloadDestinationBlockedMarker[1], ge_BeaconStates_ActivateOff);
        gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[lp_currentObjective].lv_payloadDestinationBlockedMarker[2], ge_BeaconStates_ActivateOff);
        TriggerEnable(gt_PayloadDropOffConstructDestroyed, true);
        lv_constructIter = 1;
        for ( ; ( (autoA42FCA97_ai >= 0 && lv_constructIter <= autoA42FCA97_ae) || (autoA42FCA97_ai < 0 && lv_constructIter >= autoA42FCA97_ae) ) ; lv_constructIter += autoA42FCA97_ai ) {
            TextExpressionSetToken("Param/Expression/C297B335", "UnitName", UnitTypeGetName(gv_c_GateKeepers));
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[lv_constructIter]), TextExpressionAssemble("Param/Expression/C297B335"));
            libHots_gf_StorePingForUnit(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[lv_constructIter], 1, PingLastCreated());
        }
    }
    else if (((UnitIsAlive(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[1]) == true) || (UnitIsAlive(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[2]) == true))) {
        if ((UnitIsAlive(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[1]) == true)) {
            lv_activeConstructUnit = gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[1];
            lv_blockedBeaconUnit = gv_primaryObjectiveTarget[lp_currentObjective].lv_payloadDestinationBlockedMarker[2];
        }
        else {
            lv_activeConstructUnit = gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[2];
            lv_blockedBeaconUnit = gv_primaryObjectiveTarget[lp_currentObjective].lv_payloadDestinationBlockedMarker[1];
        }
        gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[lp_currentObjective].lv_payloadDestinationBlockedMarker[1], ge_BeaconStates_ActivateOff);
        gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[lp_currentObjective].lv_payloadDestinationBlockedMarker[2], ge_BeaconStates_ActivateOff);
        gf_SetObjectiveReminderReticle(lv_blockedBeaconUnit);
        TriggerEnable(gt_PayloadDropOffConstructDestroyed, true);
        TextExpressionSetToken("Param/Expression/8A3EC7BB", "UnitName", UnitTypeGetName(gv_c_GateKeepers));
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lv_activeConstructUnit), TextExpressionAssemble("Param/Expression/8A3EC7BB"));
        libHots_gf_StorePingForUnit(lv_activeConstructUnit, 1, PingLastCreated());
    }
    else if ((UnitIsAlive(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[1]) == false) && (UnitIsAlive(gv_primaryObjectiveTarget[lp_currentObjective].lv_constructDropOffGuards[2]) == false)) {
        gf_ActivateDropOffBeacons();
    }
}

void gf_SwitchRampLights (region lp_region, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libCOMI_gf_SendActorMessageToDoodadsInRegion("ModelSwap Korhal_Platform_LandingLights 1", "Korhal_Platform_LandingLights", lp_region);
    }
    else {
        libCOMI_gf_SendActorMessageToDoodadsInRegion("ModelSwap Korhal_Platform_LandingLights 0", "Korhal_Platform_LandingLights", lp_region);
    }
}

void gf_PlantExplosives (int lp_targetFacility, int lp_payloadIndex, int lp_pointIndex, bool lp_primaryObjective) {
    // Automatic Variable Declarations
    // Implementation
    gv_payloadArrived[lp_targetFacility][lp_pointIndex] = true;
    libNtve_gf_SendActorMessageToUnit(gv_payloadTrucks[lp_payloadIndex], "AnimBracketStart Morph Stand,Morph,Start Stand,Morph Stand,Morph,End");
    UnitSetPropertyFixed(gv_payloadTrucks[lp_payloadIndex], c_unitPropMovementSpeed, 0.0);
    libNtve_gf_MakeUnitInvulnerable(gv_payloadTrucks[lp_payloadIndex], true);
    libNtve_gf_MakeUnitUncommandable(gv_payloadTrucks[lp_payloadIndex], true);
    UnitSetState(gv_payloadTrucks[lp_payloadIndex], c_unitStateSelectable, false);
    UnitSelect(gv_payloadTrucks[lp_payloadIndex], gv_pLAYER_01_USER, false);
    UnitSelect(gv_payloadTrucks[lp_payloadIndex], gv_pLAYER_02_USER, false);
    gv_payloadsAtPrimaryObjective[lp_pointIndex] = gv_payloadTrucks[lp_payloadIndex];
    gv_payloadDetonating[lp_payloadIndex] = true;
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_payloadTrucks[lp_payloadIndex], 1));
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_payloadTrucks[lp_payloadIndex], 3));
    libHots_gf_StorePingForUnit(gv_payloadTrucks[lp_payloadIndex], 1, c_invalidPingId);
    libHots_gf_StorePingForUnit(gv_payloadTrucks[lp_payloadIndex], 3, c_invalidPingId);
    gf_ModifyDropoffBeaconState(gv_primaryObjectiveTarget[lp_targetFacility].lv_payloadDestination[lp_pointIndex], ge_BeaconStates_Kill);
    gf_ObjectiveDestroyPrimaryObjectiveUpdate(lp_targetFacility, (libCOMI_gf_MissionObjectiveProgress(gv_objectiveDestroyObjective_Data[lp_targetFacility]) + 1));
}

trigger auto_gf_StartFuse_Trigger = null;
int auto_gf_StartFuse_lp_targetFacility;

void gf_StartFuse (int lp_targetFacility) {
    auto_gf_StartFuse_lp_targetFacility = lp_targetFacility;

    if (auto_gf_StartFuse_Trigger == null) {
        auto_gf_StartFuse_Trigger = TriggerCreate("auto_gf_StartFuse_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartFuse_Trigger, false, false);
}

bool auto_gf_StartFuse_TriggerFunc (bool testConds, bool runActions) {
    int lp_targetFacility = auto_gf_StartFuse_lp_targetFacility;

    // Variable Declarations
    int lv_nukePayloadIter;
    unitgroup lv_unitsInDangerZone;
    unit lv_dangerUnitIter;
    bool lv_builtPayloads;

    // Automatic Variable Declarations
    const int auto8126923B_ae = 2;
    const int auto8126923B_ai = 1;
    unitgroup auto33A60ECF_g;
    int auto33A60ECF_u;
    unit auto33A60ECF_var;
    playergroup autoB1510A29_g;
    int autoB1510A29_var;
    int autoB0EFC8CB_val;
    unitgroup autoCD3EAAD1_g;
    int autoCD3EAAD1_u;
    unitgroup autoC25B2285_g;
    int autoC25B2285_u;

    // Variable Initialization
    lv_unitsInDangerZone = UnitGroupEmpty();

    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    gf_ObjectiveDestroyPrimaryObjectiveComplete(lp_targetFacility);
    lv_nukePayloadIter = 1;
    for ( ; ( (auto8126923B_ai >= 0 && lv_nukePayloadIter <= auto8126923B_ae) || (auto8126923B_ai < 0 && lv_nukePayloadIter >= auto8126923B_ae) ) ; lv_nukePayloadIter += auto8126923B_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_payloadsAtPrimaryObjective[lv_nukePayloadIter]), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagAssetDrivenLooping, c_animTimeDefault);
    }
    auto33A60ECF_g = gv_primaryObjectiveTarget[lp_targetFacility].lv_constructs;
    auto33A60ECF_u = UnitGroupCount(auto33A60ECF_g, c_unitCountAll);
    for (;; auto33A60ECF_u -= 1) {
        auto33A60ECF_var = UnitGroupUnitFromEnd(auto33A60ECF_g, auto33A60ECF_u);
        if (auto33A60ECF_var == null) { break; }
        if ((UnitIsAlive(auto33A60ECF_var) == true)) {
            UnitBehaviorAddPlayer(auto33A60ECF_var, "CODConstructDisablePermanent", gv_pLAYER_01_USER, 1);
        }

    }
    gv_facilitiesDestroyed += 1;
    if ((gv_facilitiesDestroyed < gv_c_ObjectiveRequiredCount)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingNuke", gv_primaryObjectiveTarget[lp_targetFacility].lv_targetFacilityCenter, ColorWithAlpha(100.00, 21.18, 10.20, 0.00), 18.0, 270.0);
        SoundPlayForPlayer(SoundLink("AC_Alarm_AirRaidSiren_2D_Event", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        autoB1510A29_g = libCOMI_gf_GetNonDefeatedPlayers();
        autoB1510A29_var = -1;
        while (true) {
            autoB1510A29_var = PlayerGroupNextPlayer(autoB1510A29_g, autoB1510A29_var);
            if (autoB1510A29_var < 0) { break; }
            VisRevealArea(autoB1510A29_var, gv_primaryObjectiveTarget[lp_targetFacility].lv_nukeExplosionArea, (gv_explosionFuseTime + 20.0), false);
            VisRevealArea(autoB1510A29_var, gv_primaryObjectiveTarget[lp_targetFacility].lv_revealExits, (gv_explosionFuseTime + 20.0), false);
        }
        TimerStart(gv_explosionFuse, gv_explosionFuseTime, false, c_timeGame);
        gf_SetMissionFailureTimer((gv_timeAddedByObjectiveProgress + TimerGetRemaining(gv_countdownUntilMissionFailure)));
        autoB0EFC8CB_val = gv_facilitiesDestroyed;
        if (autoB0EFC8CB_val == 1) {
            libCOMI_gf_SetMissionEffort(33.0);
        }
        else if (autoB0EFC8CB_val == 2) {
            libCOMI_gf_SetMissionEffort(66.0);
        }
        else if (autoB0EFC8CB_val == 3) {
            libCOMI_gf_SetMissionEffort(100.0);
        }
        else {
        }
    }
    else {
        TimerPause(gv_countdownUntilMissionFailure, true);
        TriggerExecute(gt_VictoryTargetSectorsDestroyedCompleted, true, false);
        return true;
    }
    DialogControlSetVisible(gv_bombWarningDialogItem, PlayerGroupAll(), true);
    DialogSetVisible(gv_nukeBarDialog, PlayerGroupAll(), true);
    TriggerExecute(gt_TransmissionBothPayloadsDeliveredQ, true, false);
    TriggerExecute(gt_TransmissionFuseStartsQ, true, false);
    while ((libCOMI_gf_GameIsOver() == false) && (TimerGetRemaining(gv_explosionFuse) > 0.0)) {
        if ((lv_builtPayloads == false) && (TimerGetRemaining(gv_explosionFuse) < 5.0)) {
            lv_builtPayloads = true;
            gf_BuildPayloads(ge_BuildPayloadBothPlayers_BothPlayers);
        }

        DialogControlSetSize(gv_nukeBar, PlayerGroupAll(), FixedToInt((gv_nukeBarWidth * (TimerGetRemaining(gv_explosionFuse) / TimerGetDuration(gv_explosionFuse)))), gv_nukeBarHeight);
        libNtve_gf_SetDialogItemColor(gv_nukeBar, Color(100.0, (100.0 * (TimerGetRemaining(gv_explosionFuse) / TimerGetDuration(gv_explosionFuse))), 0.0), PlayerGroupAll());
        UnitGroupAddUnitGroup(lv_unitsInDangerZone, UnitGroup(null, gv_pLAYER_01_USER, gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_nukeExplosionArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_unitsInDangerZone, UnitGroup(null, gv_pLAYER_02_USER, gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_nukeExplosionArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        autoCD3EAAD1_g = lv_unitsInDangerZone;
        autoCD3EAAD1_u = UnitGroupCount(autoCD3EAAD1_g, c_unitCountAll);
        for (;; autoCD3EAAD1_u -= 1) {
            lv_dangerUnitIter = UnitGroupUnitFromEnd(autoCD3EAAD1_g, autoCD3EAAD1_u);
            if (lv_dangerUnitIter == null) { break; }
            if ((libNtve_gf_UnitIsInvulnerable(lv_dangerUnitIter) != true) && (UnitTypeGetProperty(UnitGetType(lv_dangerUnitIter), c_unitPropMovementSpeed) > 0.0)) {
                if ((libNtve_gf_UnitInRegion(lv_dangerUnitIter, gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_nukeExplosionArea) == true)) {
                    if ((libHots_gf_ActorForUnit(lv_dangerUnitIter, 97) == null)) {
                        libNtve_gf_AttachModelToUnit(lv_dangerUnitIter, "Fear_Coop", "Ref_Overhead");
                        libHots_gf_StoreActorForUnit(lv_dangerUnitIter, 97, libNtve_gf_ActorLastCreated());
                    }

                }
                else {
                    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_dangerUnitIter, 97));
                    libHots_gf_StoreActorForUnit(lv_dangerUnitIter, 97, null);
                    UnitGroupRemove(lv_unitsInDangerZone, lv_dangerUnitIter);
                }
            }

        }
        Wait(0.1, c_timeGame);
    }
    DialogSetVisible(gv_nukeBarDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_bombWarningDialogItem, PlayerGroupAll(), false);
    autoC25B2285_g = lv_unitsInDangerZone;
    autoC25B2285_u = UnitGroupCount(autoC25B2285_g, c_unitCountAll);
    for (;; autoC25B2285_u -= 1) {
        lv_dangerUnitIter = UnitGroupUnitFromEnd(autoC25B2285_g, autoC25B2285_u);
        if (lv_dangerUnitIter == null) { break; }
        libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_dangerUnitIter, 97));
        libHots_gf_StoreActorForUnit(lv_dangerUnitIter, 97, null);
    }
    return true;
}

void gf_ExplosivesExplode (int lp_targetFacility) {
    // Variable Declarations
    int lv_attackWaveCooldownIter;
    unit lv_nukeVictim;
    int lv_playerIter;

    // Automatic Variable Declarations
    playergroup autoD3CCC071_g;
    unitgroup autoFAF839D9_g;
    int autoFAF839D9_u;
    unitgroup auto6927F591_g;
    int auto6927F591_u;
    unit auto6927F591_var;

    // Variable Initialization

    // Implementation
    gf_ShowHideNukeRadiusMarkers(false, lp_targetFacility);
    gf_SwitchRampLights(gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_directionLights, false);
    TriggerExecute(gt_TransmissionObjectiveCompleteQ, true, false);
    autoD3CCC071_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoD3CCC071_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        if ((libCOMI_gf_GameIsOver() == false) && (RegionContainsPoint(gv_primaryObjectiveTarget[lp_targetFacility].lv_nukeExplosionArea, CameraGetTarget(lv_playerIter)) == true)) {
            CameraShake(lv_playerIter, "Medium", "SubtleMove", 1.0, 1.0, 5.0);
        }

    }
    DialogControlSetVisible(gv_bombWarningDialogItem, PlayerGroupAll(), false);
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "CODPayloadNukeDamage", UnitGetPosition(gv_payloadsAtPrimaryObjective[1]));
    PlayerCreateEffectPoint(gv_pLAYER_02_USER, "CODPayloadNukeDamage", UnitGetPosition(gv_payloadsAtPrimaryObjective[2]));
    SoundPlayForPlayer(SoundLink("COD_Nuke_Distant_Explode_2DTrigger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("COD_Nuke_Distant_BassDrop_LFE_Trig", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitKill(gv_payloadTrucks[gv_pLAYER_01_USER]);
    UnitKill(gv_payloadTrucks[gv_pLAYER_02_USER]);
    SoundPlayForPlayer(SoundLink("COD_Nuke_2D_Event_Quake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoFAF839D9_g = UnitGroup(null, c_playerAny, gv_primaryObjectiveTarget[lp_targetFacility].lv_nukeExplosionArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFAF839D9_u = UnitGroupCount(autoFAF839D9_g, c_unitCountAll);
    for (;; autoFAF839D9_u -= 1) {
        lv_nukeVictim = UnitGroupUnitFromEnd(autoFAF839D9_g, autoFAF839D9_u);
        if (lv_nukeVictim == null) { break; }
        if ((((lp_targetFacility == 1) && (UnitGroupHasUnit(gv_expansionBlockers, lv_nukeVictim) == true)) || (libNtve_gf_UnitIsInvulnerable(lv_nukeVictim) == false) || (UnitGetType(lv_nukeVictim) == "GuideArrowUnit") || (UnitGetType(lv_nukeVictim) == "NuclearPayload") || (UnitGetType(lv_nukeVictim) == "PsiDisintegratorPowerLink"))) {
            UnitKill(lv_nukeVictim);
        }
        else {
            if ((lp_targetFacility == 1) && (UnitGroupHasUnit(gv_expansionResources, lv_nukeVictim) == true)) {
                UnitBehaviorRemove(lv_nukeVictim, "BuildingStasis", 1);
            }

        }
    }
    auto6927F591_g = gv_primaryObjectiveTarget[lp_targetFacility].lv_constructs;
    auto6927F591_u = UnitGroupCount(auto6927F591_g, c_unitCountAll);
    for (;; auto6927F591_u -= 1) {
        auto6927F591_var = UnitGroupUnitFromEnd(auto6927F591_g, auto6927F591_u);
        if (auto6927F591_var == null) { break; }
        UnitKill(auto6927F591_var);
    }
    TriggerExecute(gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_extraDestruction, true, false);
}

point gf_PayloadTarget (int lp_payloadIndex) {
    // Variable Declarations
    int lv_payloadController;
    int lv_otherPayload;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_payloadController = UnitGetOwner(gv_payloadTrucks[lp_payloadIndex]);
    if ((lv_payloadController == gv_pLAYER_01_USER)) {
        lv_otherPayload = gv_pLAYER_02_USER;
    }
    else {
        lv_otherPayload = gv_pLAYER_01_USER;
    }
    if ((UnitIsAlive(gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_payloadDestination[lp_payloadIndex]) == true)) {
        return UnitGetPosition(gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_payloadDestination[lp_payloadIndex]);
    }
    else if ((UnitIsAlive(gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_payloadDestination[lv_otherPayload]) == true)) {
        return UnitGetPosition(gv_primaryObjectiveTarget[gf_ActiveObjective()].lv_payloadDestination[lv_otherPayload]);
    }
    return null;
}

trigger auto_gf_BuildPayloads_Trigger = null;
int auto_gf_BuildPayloads_lp_payloadsToBuild;

void gf_BuildPayloads (int lp_payloadsToBuild) {
    auto_gf_BuildPayloads_lp_payloadsToBuild = lp_payloadsToBuild;

    if (auto_gf_BuildPayloads_Trigger == null) {
        auto_gf_BuildPayloads_Trigger = TriggerCreate("auto_gf_BuildPayloads_TriggerFunc");
    }

    TriggerExecute(auto_gf_BuildPayloads_Trigger, false, false);
}

bool auto_gf_BuildPayloads_TriggerFunc (bool testConds, bool runActions) {
    int lp_payloadsToBuild = auto_gf_BuildPayloads_lp_payloadsToBuild;

    // Variable Declarations
    int lv_firstToBuild;
    int lv_secondToBuild;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_payloadsToBuild == ge_BuildPayloadBothPlayers_BothPlayers)) {
        if ((RandomInt(0, 1) == 1)) {
            lv_firstToBuild = gv_pLAYER_01_USER;
            lv_secondToBuild = gv_pLAYER_02_USER;
        }
        else {
            lv_firstToBuild = gv_pLAYER_02_USER;
            lv_secondToBuild = gv_pLAYER_01_USER;
        }
        UnitIssueOrder(gv_payloadFacility[lv_firstToBuild], gv_c_BuildPayloadOrder, c_orderQueueReplace);
        Wait(2.5, c_timeGame);
        UnitIssueOrder(gv_payloadFacility[lv_secondToBuild], gv_c_BuildPayloadOrder, c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_payloadFacility[lp_payloadsToBuild], gv_c_BuildPayloadOrder, c_orderQueueReplace);
    }
    return true;
}

void gf_TurnPayloadSpeedOnOff (bool lp_onOff) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoD03CD218_g;
    playergroup autoD8A615ED_g;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        gv_payloadSpeedBoost = true;
        autoD8A615ED_g = libCOMI_gf_GetNonDefeatedPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoD8A615ED_g, lv_player);
            if (lv_player < 0) { break; }
            if ((UnitIsValid(gv_payloadTrucks[lv_player]) == true)) {
                UnitBehaviorAdd(gv_payloadTrucks[lv_player], "CODFlatbedTruckSpeed", gv_payloadTrucks[lv_player], 1);
            }

        }
    }
    else {
        gv_payloadSpeedBoost = false;
        autoD03CD218_g = libCOMI_gf_GetNonDefeatedPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoD03CD218_g, lv_player);
            if (lv_player < 0) { break; }
            if ((UnitIsValid(gv_payloadTrucks[lv_player]) == true)) {
                UnitBehaviorRemove(gv_payloadTrucks[lv_player], "CODFlatbedTruckSpeed", 1);
            }

        }
    }
}

trigger auto_gf_SetupUnitasPayload_Trigger = null;
unit auto_gf_SetupUnitasPayload_lp_payloadUnit;

void gf_SetupUnitasPayload (unit lp_payloadUnit) {
    auto_gf_SetupUnitasPayload_lp_payloadUnit = lp_payloadUnit;

    if (auto_gf_SetupUnitasPayload_Trigger == null) {
        auto_gf_SetupUnitasPayload_Trigger = TriggerCreate("auto_gf_SetupUnitasPayload_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetupUnitasPayload_Trigger, false, false);
}

bool auto_gf_SetupUnitasPayload_TriggerFunc (bool testConds, bool runActions) {
    unit lp_payloadUnit = auto_gf_SetupUnitasPayload_lp_payloadUnit;

    // Variable Declarations
    int lv_payloadOwner;
    int lv_payloadOwnerAlly;
    unit lv_payload;
    int lv_allyPing;
    int lv_payloadPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allyPing = c_invalidPingId;
    lv_payloadPing = c_invalidPingId;

    // Implementation
    lv_payload = lp_payloadUnit;
    lv_payloadOwner = UnitGetOwner(lp_payloadUnit);
    lv_payloadOwnerAlly = gf_AlliedPlayer(lv_payloadOwner);
    if ((lv_payloadOwner != gv_pLAYER_STONE) && (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_payloadOwner) == false)) {
        return true;
    }

    libNtve_gf_CopyUnitControlGroups(gv_payloadTrucks[lv_payloadOwner], lp_payloadUnit);
    UnitRemove(gv_payloadTrucks[lv_payloadOwner]);
    gv_payloadTrucks[lv_payloadOwner] = lv_payload;
    if ((gv_firstPayloadSpawned[gv_pLAYER_01_USER] == true) && (gv_firstPayloadSpawned[gv_pLAYER_02_USER] == true)) {
        libCOMI_gf_SetHeroPanelUnit(2, lp_payloadUnit, lv_payloadOwner);
        if ((UnitQueueItemTime(gv_payloadFacility[lv_payloadOwnerAlly], c_unitQueueTimeRemaining, 1) <= 6.0) && (UnitQueueItemTime(gv_payloadFacility[lv_payloadOwnerAlly], c_unitQueueTimeRemaining, 1) > 0.0)) {
            TriggerExecute(gt_TransmissionPayloadReadyBothQ, true, false);
        }
        else {
            gf_TransmissionPayloadReadyQ(lv_payloadOwner);
        }
    }

    if ((gv_payloadSpeedBoost == true)) {
        UnitBehaviorAdd(lv_payload, "CODFlatbedTruckSpeed", lv_payload, 1);
    }

    libCOMI_gf_CreatePingCoop(PlayerGroupSingle(lv_payloadOwner), "PingCircle", UnitGetPosition(lv_payload), Color(0.00, 100.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetUnit(PingLastCreated(), lv_payload);
    PingSetTooltip(PingLastCreated(), UnitGetName(lp_payloadUnit));
    libHots_gf_StorePingForUnit(lv_payload, 1, PingLastCreated());
    lv_payloadPing = PingLastCreated();
    libCOMI_gf_ShowHidePingCoop(PingLastCreated(), true);
    libCOMI_gf_CreatePingCoop(PlayerGroupSingle(lv_payloadOwnerAlly), "PingSimple", UnitGetPosition(lv_payload), Color(100.00, 100.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetUnit(PingLastCreated(), lv_payload);
    TextExpressionSetToken("Param/Expression/DCBB75DA", "PayloadUnit", UnitGetName(lp_payloadUnit));
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/DCBB75DA"));
    libHots_gf_StorePingForUnit(lv_payload, 3, PingLastCreated());
    lv_allyPing = PingLastCreated();
    UnitSetPosition(lv_payload, PointFromId(1605441398), false);
    UnitSetFacing(lv_payload, PointGetFacing(PointFromId(1605441398)), 0.0);
    UnitIssueOrder(lv_payload, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1896919880)), c_orderQueueReplace);
    if ((gv_firstPayloadSpawned[lv_payloadOwner] == false)) {
        if ((lv_payloadOwner == gv_pLAYER_01_USER)) {
            UnitIssueOrder(lv_payload, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1502067979)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lv_payload, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(359540687)), c_orderQueueAddToEnd);
        }
    }
    else {
        if ((lv_payloadOwner == gv_pLAYER_01_USER)) {
            UnitIssueOrder(lv_payload, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1396945031)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lv_payload, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(707220285)), c_orderQueueAddToEnd);
        }
    }
    gv_firstPayloadSpawned[lv_payloadOwner] = true;
    return true;
}

void gf_BombPlanted (int lp_targetFacility, unit lp_payload, int lp_destinationIndex) {
    // Variable Declarations
    int lv_payloadDropOffIndex;
    int lv_payloadDropOffIndexOther;
    int lv_targetFacilityIndex;
    int lv_payloadIndex;
    int lv_payloadItr;

    // Automatic Variable Declarations
    const int autoF1A1E302_ae = 15;
    const int autoF1A1E302_ai = 1;

    // Variable Initialization

    // Implementation
    lv_targetFacilityIndex = lp_targetFacility;
    lv_payloadItr = 1;
    for ( ; ( (autoF1A1E302_ai >= 0 && lv_payloadItr <= autoF1A1E302_ae) || (autoF1A1E302_ai < 0 && lv_payloadItr >= autoF1A1E302_ae) ) ; lv_payloadItr += autoF1A1E302_ai ) {
        if ((gv_payloadTrucks[lv_payloadItr] == lp_payload)) {
            lv_payloadIndex = lv_payloadItr;
            break;
        }

    }
    if ((lv_payloadIndex == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/01D497B5"), true);
    }

    if ((lp_destinationIndex == 1)) {
        lv_payloadDropOffIndex = 1;
        lv_payloadDropOffIndexOther = 2;
    }
    else {
        lv_payloadDropOffIndex = 2;
        lv_payloadDropOffIndexOther = 1;
    }
    if ((gv_payloadArrived[lv_targetFacilityIndex][lv_payloadDropOffIndex] == false)) {
        gf_PlantExplosives(lv_targetFacilityIndex, lv_payloadIndex, lv_payloadDropOffIndex, true);
        if ((gv_payloadArrived[lv_targetFacilityIndex][lv_payloadDropOffIndex] == true) && (gv_payloadArrived[lv_targetFacilityIndex][lv_payloadDropOffIndexOther] == true)) {
            gf_StartFuse(lp_targetFacility);
            gf_ShowHideNukeRadiusMarkers(true, lv_targetFacilityIndex);
            gf_ShowEscapeArrows(lv_targetFacilityIndex);
            gf_TurnPayloadSpeedOnOff(false);
        }
        else {
            TriggerExecute(gt_TransmissionPayloadDeliveredQ, true, false);
        }
    }

}

trigger auto_gf_WatchPayloadDropoffs_Trigger = null;
int auto_gf_WatchPayloadDropoffs_lp_targetFacility;

void gf_WatchPayloadDropoffs (int lp_targetFacility) {
    auto_gf_WatchPayloadDropoffs_lp_targetFacility = lp_targetFacility;

    if (auto_gf_WatchPayloadDropoffs_Trigger == null) {
        auto_gf_WatchPayloadDropoffs_Trigger = TriggerCreate("auto_gf_WatchPayloadDropoffs_TriggerFunc");
    }

    TriggerExecute(auto_gf_WatchPayloadDropoffs_Trigger, false, false);
}

bool auto_gf_WatchPayloadDropoffs_TriggerFunc (bool testConds, bool runActions) {
    int lp_targetFacility = auto_gf_WatchPayloadDropoffs_lp_targetFacility;

    // Variable Declarations
    unitgroup lv_payloadsInRange;
    unit[3] lv_dropOff;
    int lv_dropOffIndex;
    bool[3] lv_bombPlanted;

    // Automatic Variable Declarations
    const int auto8CB3DF3C_ae = 2;
    const int auto8CB3DF3C_ai = 1;

    // Variable Initialization
    lv_payloadsInRange = UnitGroupEmpty();

    // Implementation
    lv_dropOff[1] = gv_primaryObjectiveTarget[lp_targetFacility].lv_payloadDestination[1];
    lv_dropOff[2] = gv_primaryObjectiveTarget[lp_targetFacility].lv_payloadDestination[2];
    while ((libCOMI_gf_GameIsOver() == false) && ((lv_bombPlanted[1] == false) || (lv_bombPlanted[2] == false))) {
        lv_dropOffIndex = 1;
        for ( ; ( (auto8CB3DF3C_ai >= 0 && lv_dropOffIndex <= auto8CB3DF3C_ae) || (auto8CB3DF3C_ai < 0 && lv_dropOffIndex >= auto8CB3DF3C_ae) ) ; lv_dropOffIndex += auto8CB3DF3C_ai ) {
            if ((UnitIsAlive(lv_dropOff[lv_dropOffIndex]) == true) && (libNtve_gf_UnitIsHidden(lv_dropOff[lv_dropOffIndex]) == false)) {
                lv_payloadsInRange = UnitGroup(gv_c_PayloadUnitType, c_playerAny, RegionCircle(UnitGetPosition(lv_dropOff[lv_dropOffIndex]), gv_c_TriggeringRangeForPayload), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
                if ((UnitGroupCount(lv_payloadsInRange, c_unitCountAlive) > 0)) {
                    lv_bombPlanted[lv_dropOffIndex] = true;
                    gf_BombPlanted(lp_targetFacility, UnitGroupUnit(lv_payloadsInRange, 1), lv_dropOffIndex);
                }

            }

        }
        if ((TimerGetRemaining(gv_countdownUntilMissionFailure) <= 0.0)) {
            TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
            return true;
        }

        Wait(0.1, c_timeGame);
    }
    return true;
}

void gf_ClearPayloadPings (unit lp_payloadUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_PingStoredForUnit(lp_payloadUnit, 1) != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_payloadUnit, 1));
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_payloadUnit, 3));
        libHots_gf_StorePingForUnit(lp_payloadUnit, 1, c_invalidPingId);
        libHots_gf_StorePingForUnit(lp_payloadUnit, 3, c_invalidPingId);
    }

}

void gf_ShowHidePayloadPings (unit lp_payload, bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libHots_gf_PingStoredForUnit(lp_payload, 1) != c_invalidPingId)) {
        PingSetVisible(libHots_gf_PingStoredForUnit(lp_payload, 1), lp_showHide);
        PingSetVisible(libHots_gf_PingStoredForUnit(lp_payload, 3), lp_showHide);
    }

}

int gf_AlliedPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_player == gv_pLAYER_01_USER)) {
        return gv_pLAYER_02_USER;
    }
    else {
        if ((lp_player == gv_pLAYER_02_USER)) {
            return gv_pLAYER_01_USER;
        }
        else {
            return -1;
        }
    }
}

trigger auto_gf_PayloadSoftTutorialReticles_Trigger = null;
unit auto_gf_PayloadSoftTutorialReticles_lp_payload;

void gf_PayloadSoftTutorialReticles (unit lp_payload) {
    auto_gf_PayloadSoftTutorialReticles_lp_payload = lp_payload;

    if (auto_gf_PayloadSoftTutorialReticles_Trigger == null) {
        auto_gf_PayloadSoftTutorialReticles_Trigger = TriggerCreate("auto_gf_PayloadSoftTutorialReticles_TriggerFunc");
    }

    TriggerExecute(auto_gf_PayloadSoftTutorialReticles_Trigger, false, false);
}

bool auto_gf_PayloadSoftTutorialReticles_TriggerFunc (bool testConds, bool runActions) {
    unit lp_payload = auto_gf_PayloadSoftTutorialReticles_lp_payload;

    // Variable Declarations
    int lv_owner;
    text lv_text;
    int lv_reticleType;
    actor lv_reticleActor;
    int lv_reticleTag;

    // Automatic Variable Declarations
    string autoFB23DD43_val;

    // Variable Initialization
    lv_reticleTag = c_textTagNone;

    // Implementation
    lv_owner = UnitGetOwner(lp_payload);
    autoFB23DD43_val = PlayerRace(lv_owner);
    if (autoFB23DD43_val == "Prot") {
        lv_reticleType = libCOMI_ge_CampaginReticleType_ProtossMainObjective;
    }
    else if (autoFB23DD43_val == "Zerg") {
        lv_reticleType = libCOMI_ge_CampaginReticleType_ZergMainObjective;
    }
    else {
        lv_reticleType = libCOMI_ge_CampaginReticleType_TerranMainObjective;
    }
    TextExpressionSetToken("Param/Expression/2144AFBF", "PayloadUnit", UnitTypeGetName(UnitGetType(lp_payload)));
    gf_AttachReticleEffectAndTextTagOnUnitCOD(lv_reticleType, libCOMI_ge_CampaginReticleSize_Medium, TextExpressionAssemble("Param/Expression/2144AFBF"), lp_payload, "Ref_Center");
    lv_reticleActor = libNtve_gf_ActorLastCreated();
    lv_reticleTag = TextTagLastCreated();
    if ((lv_owner == gv_pLAYER_01_USER)) {
        ActorSend(lv_reticleActor, "SetFilterPlayers 2");
        TextTagShow(lv_reticleTag, PlayerGroupSingle(gv_pLAYER_02_USER), false);
    }
    else {
        ActorSend(lv_reticleActor, "SetFilterPlayers 1");
        TextTagShow(lv_reticleTag, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    if ((lv_owner == 1)) {
    }

    while (!(((UnitIsAlive(lp_payload) == false) || (UnitGroupHasUnit(UnitGroupSelected(lv_owner), lp_payload) == true)))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_KillModel(lv_reticleActor);
    TextTagDestroy(lv_reticleTag);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(lp_payload) == false)) {
        return true;
    }

    gf_AttachReticleEffectAndTextTagOnUnitCOD(lv_reticleType, libCOMI_ge_CampaginReticleSize_Medium, TextExpressionAssemble("Param/Expression/41080356"), lp_payload, "Ref_Center");
    lv_reticleActor = libNtve_gf_ActorLastCreated();
    lv_reticleTag = TextTagLastCreated();
    if ((lv_owner == gv_pLAYER_01_USER)) {
        ActorSend(lv_reticleActor, "SetFilterPlayers 2");
        TextTagShow(lv_reticleTag, PlayerGroupSingle(gv_pLAYER_02_USER), false);
    }
    else {
        ActorSend(lv_reticleActor, "SetFilterPlayers 1");
        TextTagShow(lv_reticleTag, PlayerGroupSingle(gv_pLAYER_01_USER), false);
    }
    while (!(((UnitIsAlive(lp_payload) == false) || (UnitOrderCount(lp_payload) > 0)))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_KillModel(lv_reticleActor);
    TextTagDestroy(lv_reticleTag);
    return true;
}

point gf_DropPodLocation (point lp_payloadLocation, int lp_activeObjective) {
    // Variable Declarations
    point lv_testLocation;
    point lv_bestFallbackSpawn;
    fixed lv_bestFallbackDistanceSq;
    int lv_c_NumberOfFallbacks;
    int lv_fallbackIter;
    point lv_testFallback;
    fixed lv_testDistanceSq;
    int lv_bestPathingCost;
    int lv_testPathingCost;
    fixed lv_angleToObjective;

    // Automatic Variable Declarations
    const int autoE5E1430B_ae = 20;
    int autoE5E1430B_var;
    int auto88B67E63_ae;
    const int auto88B67E63_ai = 1;

    // Variable Initialization
    lv_bestFallbackDistanceSq = 524287.0;
    lv_c_NumberOfFallbacks = 4;
    lv_bestPathingCost = 1000000000;
    lv_testPathingCost = 1000000000;

    // Implementation
    lv_testLocation = lp_payloadLocation;
    if (((RegionContainsPoint(RegionFromId(11), lv_testLocation) == true) || (RegionContainsPoint(RegionFromId(1), lv_testLocation) == true))) {
        auto88B67E63_ae = lv_c_NumberOfFallbacks;
        lv_fallbackIter = 1;
        for ( ; ( (auto88B67E63_ai >= 0 && lv_fallbackIter <= auto88B67E63_ae) || (auto88B67E63_ai < 0 && lv_fallbackIter >= auto88B67E63_ae) ) ; lv_fallbackIter += auto88B67E63_ai ) {
            lv_testFallback = PointFromName(("Payload Drop Fallback " + IntToString(lv_fallbackIter)));
            lv_testDistanceSq = DistanceSquaredBetweenPoints(lv_testLocation, lv_testFallback);
            if ((lv_testDistanceSq < lv_bestFallbackDistanceSq)) {
                lv_bestFallbackSpawn = lv_testFallback;
                lv_bestFallbackDistanceSq = lv_testDistanceSq;
            }

        }
        lv_testLocation = lv_bestFallbackSpawn;
    }
    else {
        lv_angleToObjective = AngleBetweenPoints(lp_payloadLocation, gv_primaryObjectiveTarget[lp_activeObjective].lv_targetFacilityCenter);
        autoE5E1430B_var = 12;
        for ( ; autoE5E1430B_var <= autoE5E1430B_ae; autoE5E1430B_var += 1 ) {
            lv_testLocation = PointWithOffsetPolar(lp_payloadLocation, autoE5E1430B_var, lv_angleToObjective);
            lv_testPathingCost = PointPathingCost(lp_payloadLocation, lv_testLocation);
            if ((PathingType(lv_testLocation) == c_pathingGround) && (PointPathingPassable(lv_testLocation) == true) && (PointPathingIsConnected(lp_payloadLocation, lv_testLocation) == true) && (lv_testPathingCost < lv_bestPathingCost)) {
                lv_bestFallbackSpawn = lv_testLocation;
                lv_bestPathingCost = lv_testPathingCost;
            }

        }
    }
    if ((lv_bestFallbackSpawn == null)) {
        lv_testLocation = lp_payloadLocation;
    }
    else {
        lv_testLocation = lv_bestFallbackSpawn;
    }
    gv_previousDropLocation = lv_testLocation;
    return lv_testLocation;
}

int gf_BonusObjectiveOrder (int lp_bonusObjectiveNumber) {
    // Variable Declarations
    bool lv_left;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_bonusObjectiveOrder[lp_bonusObjectiveNumber] != ge_BonusObjectiveType__None)) {
        return gv_bonusObjectiveOrder[lp_bonusObjectiveNumber];
    }

    if ((lp_bonusObjectiveNumber == 1)) {
        if ((gv_missionObjectiveOrder_BranchFirst == ge_MissionProgressPaths_PathLeft)) {
            return ge_BonusObjectiveType_LeftTop;
        }
        else {
            return ge_BonusObjectiveType_RightTop;
        }
    }
    else {
        if ((gv_missionObjectiveOrder_BranchFirst == ge_MissionProgressPaths_PathLeft)) {
            return ge_BonusObjectiveType_RightBottom;
        }
        else {
            return ge_BonusObjectiveType_LeftBottom;
        }
    }
}

trigger auto_gf_StartBonusObjective_Trigger = null;
int auto_gf_StartBonusObjective_lp_bObjIndex;
trigger auto_gf_StartBonusObjective_lp_triggerCreate;
trigger auto_gf_StartBonusObjective_lp_triggerUpdate;
trigger auto_gf_StartBonusObjective_lp_triggerComplete;
trigger auto_gf_StartBonusObjective_lp_triggerFail;
trigger auto_gf_StartBonusObjective_lp_triggerConstructDestroy;

void gf_StartBonusObjective (int lp_bObjIndex, trigger lp_triggerCreate, trigger lp_triggerUpdate, trigger lp_triggerComplete, trigger lp_triggerFail, trigger lp_triggerConstructDestroy) {
    auto_gf_StartBonusObjective_lp_bObjIndex = lp_bObjIndex;
    auto_gf_StartBonusObjective_lp_triggerCreate = lp_triggerCreate;
    auto_gf_StartBonusObjective_lp_triggerUpdate = lp_triggerUpdate;
    auto_gf_StartBonusObjective_lp_triggerComplete = lp_triggerComplete;
    auto_gf_StartBonusObjective_lp_triggerFail = lp_triggerFail;
    auto_gf_StartBonusObjective_lp_triggerConstructDestroy = lp_triggerConstructDestroy;

    if (auto_gf_StartBonusObjective_Trigger == null) {
        auto_gf_StartBonusObjective_Trigger = TriggerCreate("auto_gf_StartBonusObjective_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartBonusObjective_Trigger, false, false);
}

bool auto_gf_StartBonusObjective_TriggerFunc (bool testConds, bool runActions) {
    int lp_bObjIndex = auto_gf_StartBonusObjective_lp_bObjIndex;
    trigger lp_triggerCreate = auto_gf_StartBonusObjective_lp_triggerCreate;
    trigger lp_triggerUpdate = auto_gf_StartBonusObjective_lp_triggerUpdate;
    trigger lp_triggerComplete = auto_gf_StartBonusObjective_lp_triggerComplete;
    trigger lp_triggerFail = auto_gf_StartBonusObjective_lp_triggerFail;
    trigger lp_triggerConstructDestroy = auto_gf_StartBonusObjective_lp_triggerConstructDestroy;

    // Variable Declarations
    int lv_playerIter;
    unit lv_revealUnit;
    unit lv_targetLocationMarker;
    int lv_payloadNearby;
    bool lv_reminderPlayed;
    unit lv_cinematicPayload;
    int lv_explosionIter;

    // Automatic Variable Declarations
    unitgroup autoF140AF72_g;
    int autoF140AF72_u;
    unit autoF140AF72_var;
    int auto510145CC_ae;
    int auto510145CC_var;

    // Variable Initialization

    // Implementation
    lv_reminderPlayed = false;
    TriggerExecute(gt_TransmissionBonusObjectiveIntroQ, true, false);
    TriggerExecute(lp_triggerCreate, true, false);
    ActorSend(gv_bonusObjectiveDoor[lp_bObjIndex], "Signal Open");
    ActorSend(ActorFromDoodad(gv_bonusObjectiveActiveLight[lp_bObjIndex]), "SetVisibility 1");
    lv_targetLocationMarker = gv_bonusObjectiveDropOffMarker[lp_bObjIndex];
    TextExpressionSetToken("Param/Expression/D9858E44", "UnitName", UnitTypeGetName(gv_c_GateKeepers));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusObjectiveGuardianConstruct[lp_bObjIndex]), TextExpressionAssemble("Param/Expression/D9858E44"));
    libHots_gf_StorePingForUnit(gv_bonusObjectiveGuardianConstruct[lp_bObjIndex], 1, PingLastCreated());
    gf_ModifyDropoffBeaconState(gv_bonusObjectiveDropOffMarkerBlocked[lp_bObjIndex], ge_BeaconStates_ActivateOff);
    TimerStart(gv_bonusObjectiveCompletionTimer[lp_bObjIndex], gv_bonusObjectiveDuration, false, c_timeAI);
    UnitBehaviorAddPlayer(lv_targetLocationMarker, "ProgressBar", gv_pLAYER_03_ENEMY, 1);
    UnitBehaviorSetDuration(lv_targetLocationMarker, "ProgressBar", TimerGetRemaining(gv_bonusObjectiveCompletionTimer[lp_bObjIndex]));
    UnitBehaviorSetDurationRemaining(lv_targetLocationMarker, "ProgressBar", TimerGetRemaining(gv_bonusObjectiveCompletionTimer[lp_bObjIndex]));
    autoF140AF72_g = gv_bonusObjectiveConstructs[lp_bObjIndex];
    autoF140AF72_u = UnitGroupCount(autoF140AF72_g, c_unitCountAll);
    for (;; autoF140AF72_u -= 1) {
        autoF140AF72_var = UnitGroupUnitFromEnd(autoF140AF72_g, autoF140AF72_u);
        if (autoF140AF72_var == null) { break; }
        if ((UnitIsAlive(autoF140AF72_var) == true)) {
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(autoF140AF72_var), 5.0), 0.03, false);
            VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(autoF140AF72_var), 5.0), 0.03, false);
        }

    }
    TimerStart(gv_bonusObjectiveReminderTimer[lp_bObjIndex], (TimerGetRemaining(gv_bonusObjectiveCompletionTimer[lp_bObjIndex]) * 0.5), false, c_timeAI);
    TimerStart(gv_bonusObjectiveDelayTimer[lp_bObjIndex], gv_c_BonusObjectiveDelay, false, c_timeReal);
    while ((UnitIsValid(lv_targetLocationMarker) == true) && (TimerGetRemaining(gv_bonusObjectiveCompletionTimer[lp_bObjIndex]) > 0.0) && (libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_triggerUpdate, true, false);
        lv_payloadNearby = 0;
        auto510145CC_ae = gv_pLAYER_02_USER;
        auto510145CC_var = gv_pLAYER_01_USER;
        for ( ; auto510145CC_var <= auto510145CC_ae; auto510145CC_var += 1 ) {
            if ((UnitIsAlive(gv_payloadTrucks[auto510145CC_var]) == true) && (DistanceBetweenPoints(UnitGetPosition(gv_payloadTrucks[auto510145CC_var]), UnitGetPosition(lv_targetLocationMarker)) <= 1)) {
                lv_payloadNearby = auto510145CC_var;
                break;
            }

        }
        if ((lv_payloadNearby != 0)) {
            break;
        }

        if ((lv_reminderPlayed == false) && (TimerGetRemaining(gv_bonusObjectiveReminderTimer[lp_bObjIndex]) <= 0.0)) {
            TriggerExecute(gt_TransmissionBonusObjectiveReminderQ, true, false);
            lv_reminderPlayed = true;
        }

        Wait(0.3, c_timeGame);
    }
    gf_PauseUnpauseBonusObjective(true, lp_bObjIndex);
    if ((UnitIsAlive(gv_bonusObjectiveGuardianConstruct[lp_bObjIndex]) == true)) {
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_bonusObjectiveGuardianConstruct[lp_bObjIndex], 1));
        TriggerEnable(lp_triggerConstructDestroy, false);
        gf_ModifyDropoffBeaconState(gv_bonusObjectiveDropOffMarkerBlocked[lp_bObjIndex], ge_BeaconStates_Kill);
    }

    gf_ModifyDropoffBeaconState(lv_targetLocationMarker, ge_BeaconStates_Kill);
    if ((lv_payloadNearby == 0)) {
        TriggerExecute(lp_triggerFail, true, false);
        ActorSend(gv_bonusObjectiveDoor[lp_bObjIndex], "Signal Close");
        ActorSend(ActorFromDoodad(gv_bonusObjectiveActiveLight[lp_bObjIndex]), "SetVisibility");
        TriggerExecute(gt_TransmissionBonusObjectiveFailedQ, true, false);
    }
    else {
        VisRevealArea(gv_pLAYER_01_USER, gv_bonusObjectiveDetonationRevealArea[lp_bObjIndex], 15.0, false);
        VisRevealArea(gv_pLAYER_02_USER, gv_bonusObjectiveDetonationRevealArea[lp_bObjIndex], 15.0, false);
        TriggerExecute(lp_triggerComplete, true, false);
        TriggerExecute(gt_TransmissionBonusObjectiveCompleteQ, true, false);
        gf_AnimateBonusObjectiveCompletion(gv_payloadTrucks[lv_payloadNearby], gv_bonusObjectivePayloadMoveStart[lp_bObjIndex], gv_bonusObjectivePayloadMoveTo[lp_bObjIndex], lp_bObjIndex);
    }
    return true;
}

trigger auto_gf_AnimateBonusObjectiveCompletion_Trigger = null;
unit auto_gf_AnimateBonusObjectiveCompletion_lp_payload;
point auto_gf_AnimateBonusObjectiveCompletion_lp_start;
point auto_gf_AnimateBonusObjectiveCompletion_lp_destination;
int auto_gf_AnimateBonusObjectiveCompletion_lp_bonusObjIndex;

void gf_AnimateBonusObjectiveCompletion (unit lp_payload, point lp_start, point lp_destination, int lp_bonusObjIndex) {
    auto_gf_AnimateBonusObjectiveCompletion_lp_payload = lp_payload;
    auto_gf_AnimateBonusObjectiveCompletion_lp_start = lp_start;
    auto_gf_AnimateBonusObjectiveCompletion_lp_destination = lp_destination;
    auto_gf_AnimateBonusObjectiveCompletion_lp_bonusObjIndex = lp_bonusObjIndex;

    if (auto_gf_AnimateBonusObjectiveCompletion_Trigger == null) {
        auto_gf_AnimateBonusObjectiveCompletion_Trigger = TriggerCreate("auto_gf_AnimateBonusObjectiveCompletion_TriggerFunc");
    }

    TriggerExecute(auto_gf_AnimateBonusObjectiveCompletion_Trigger, false, false);
}

bool auto_gf_AnimateBonusObjectiveCompletion_TriggerFunc (bool testConds, bool runActions) {
    unit lp_payload = auto_gf_AnimateBonusObjectiveCompletion_lp_payload;
    point lp_start = auto_gf_AnimateBonusObjectiveCompletion_lp_start;
    point lp_destination = auto_gf_AnimateBonusObjectiveCompletion_lp_destination;
    int lp_bonusObjIndex = auto_gf_AnimateBonusObjectiveCompletion_lp_bonusObjIndex;

    // Variable Declarations
    unit lv_cinematicPayload;
    int lv_explosionIter;

    // Automatic Variable Declarations
    const int autoB00A0015_ae = gv_c_BonusObjectiveExplosionCount;
    const int autoB00A0015_ai = 1;
    unitgroup autoAFEFF2E5_g;
    int autoAFEFF2E5_u;
    unit autoAFEFF2E5_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_MakeUnitUncommandable(lp_payload, true);
    libNtve_gf_MakeUnitInvulnerable(lp_payload, true);
    UnitSetState(lp_payload, c_unitStateSelectable, false);
    libNtve_gf_ShowHideUnit(lp_payload, false);
    gf_ShowHidePayloadPings(lp_payload, false);
    UnitCreate(1, "CODFlatbedTruckFlying", c_unitCreateIgnorePlacement, UnitGetOwner(lp_payload), UnitGetPosition(lp_payload), UnitGetFacing(lp_payload));
    lv_cinematicPayload = UnitLastCreated();
    UnitSetPropertyFixed(lv_cinematicPayload, c_unitPropLifeMax, UnitGetPropertyFixed(lp_payload, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_cinematicPayload, c_unitPropLifePercent, UnitGetPropertyFixed(lp_payload, c_unitPropLifePercent, c_unitPropCurrent));
    UnitIssueOrder(lv_cinematicPayload, OrderTargetingPoint(AbilityCommand("move", 0), lp_start), c_orderQueueReplace);
    UnitIssueOrder(lv_cinematicPayload, OrderTargetingPoint(AbilityCommand("move", 0), lp_destination), c_orderQueueAddToEnd);
    libNtve_gf_MakeUnitUncommandable(lv_cinematicPayload, true);
    libNtve_gf_MakeUnitInvulnerable(lv_cinematicPayload, true);
    UnitCreateEffectUnit(lv_cinematicPayload, "CopyTargetSelectionAndControlGroups", lp_payload);
    UnitSelect(lp_payload, gv_pLAYER_01_USER, false);
    UnitSelect(lp_payload, gv_pLAYER_02_USER, false);
    Wait(4.5, c_timeGame);
    UnitIssueOrder(lv_cinematicPayload, OrderTargetingPoint(AbilityCommand("move", 0), lp_start), c_orderQueueReplace);
    ActorSend(ActorFromDoodad(gv_bonusObjectiveActiveLight[lp_bonusObjIndex]), "SetVisibility");
    Wait(1.75, c_timeGame);
    lv_explosionIter = 1;
    for ( ; ( (autoB00A0015_ai >= 0 && lv_explosionIter <= autoB00A0015_ae) || (autoB00A0015_ai < 0 && lv_explosionIter >= autoB00A0015_ae) ) ; lv_explosionIter += autoB00A0015_ai ) {
        if ((lv_explosionIter == 2)) {
            gf_CreateExplosionAtPointwithSmoke(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, gv_bonusObjectiveExplosionPoint[lp_bonusObjIndex][lv_explosionIter]);
        }
        else {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, gv_bonusObjectiveExplosionPoint[lp_bonusObjIndex][lv_explosionIter]);
        }
        libNtve_gf_CreateActorAtPoint("FireMedium", gv_bonusObjectiveExplosionPoint[lp_bonusObjIndex][lv_explosionIter]);
        Wait(0.1, c_timeGame);
    }
    autoAFEFF2E5_g = gv_bonusObjectiveTargets[lp_bonusObjIndex];
    autoAFEFF2E5_u = UnitGroupCount(autoAFEFF2E5_g, c_unitCountAll);
    for (;; autoAFEFF2E5_u -= 1) {
        autoAFEFF2E5_var = UnitGroupUnitFromEnd(autoAFEFF2E5_g, autoAFEFF2E5_u);
        if (autoAFEFF2E5_var == null) { break; }
        UnitKill(autoAFEFF2E5_var);
        Wait(RandomFixed(0.1, 0.333), c_timeGame);
    }
    UnitWaitUntilIdle(lv_cinematicPayload, true);
    UnitSetPosition(lp_payload, UnitGetPosition(lv_cinematicPayload), false);
    UnitSetFacing(lp_payload, UnitGetFacing(lv_cinematicPayload), 0.0);
    UnitSetPropertyFixed(lp_payload, c_unitPropLifeMax, UnitGetPropertyFixed(lv_cinematicPayload, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_payload, c_unitPropLifePercent, UnitGetPropertyFixed(lv_cinematicPayload, c_unitPropLifePercent, c_unitPropCurrent));
    UnitSetState(lp_payload, c_unitStateSelectable, true);
    libNtve_gf_MakeUnitUncommandable(lp_payload, false);
    libNtve_gf_MakeUnitInvulnerable(lp_payload, false);
    libNtve_gf_ShowHideUnit(lv_cinematicPayload, false);
    libNtve_gf_ShowHideUnit(lp_payload, true);
    gf_ShowHidePayloadPings(lp_payload, true);
    UnitCreateEffectUnit(lp_payload, "CopyTargetSelectionAndControlGroups", lv_cinematicPayload);
    UnitCreateEffectUnit(lv_cinematicPayload, "SuicideRemove", lv_cinematicPayload);
    return true;
}

void gf_PauseUnpauseBonusObjective (bool lp_pauseUnpause, int lp_bonusObjIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((TimerGetRemaining(gv_bonusObjectiveCompletionTimer[lp_bonusObjIndex]) > 0.0)) {
        TimerPause(gv_bonusObjectiveCompletionTimer[lp_bonusObjIndex], lp_pauseUnpause);
    }

    if ((TimerGetRemaining(gv_bonusObjectiveDelayTimer[lp_bonusObjIndex]) > 0.0)) {
        TimerPause(gv_bonusObjectiveDelayTimer[lp_bonusObjIndex], lp_pauseUnpause);
    }

    if ((TimerGetRemaining(gv_bonusObjectiveReminderTimer[lp_bonusObjIndex]) > 0.0)) {
        TimerPause(gv_bonusObjectiveReminderTimer[lp_bonusObjIndex], lp_pauseUnpause);
    }

}

void gf_SetBonusObjectiveTargetProperties (unit lp_bonusObjectiveTarget) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetState(lp_bonusObjectiveTarget, c_unitStateTargetable, false);
    UnitSetState(lp_bonusObjectiveTarget, c_unitStateSelectable, false);
    UnitSetState(lp_bonusObjectiveTarget, c_unitStateInvulnerable, true);
}

trigger auto_gf_TransmissionPayloadAttackedQ_Trigger = null;
unit auto_gf_TransmissionPayloadAttackedQ_lp_defendingUnit;

void gf_TransmissionPayloadAttackedQ (unit lp_defendingUnit) {
    auto_gf_TransmissionPayloadAttackedQ_lp_defendingUnit = lp_defendingUnit;

    if (auto_gf_TransmissionPayloadAttackedQ_Trigger == null) {
        auto_gf_TransmissionPayloadAttackedQ_Trigger = TriggerCreate("auto_gf_TransmissionPayloadAttackedQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_TransmissionPayloadAttackedQ_Trigger, false, false);
}

bool auto_gf_TransmissionPayloadAttackedQ_TriggerFunc (bool testConds, bool runActions) {
    unit lp_defendingUnit = auto_gf_TransmissionPayloadAttackedQ_lp_defendingUnit;

    // Variable Declarations
    int lv_owningPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_owningPlayer = UnitGetOwner(lp_defendingUnit);
    if (((gv_transmissionPayloadAttackedPlaying[lv_owningPlayer] == true) || (TimerGetRemaining(gv_payloadAttackNotificationCooldown[lv_owningPlayer]) > 0.0))) {
        return true;
    }

    gv_transmissionPayloadAttackedPlaying[lv_owningPlayer] = true;
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendSplitMissionTransmission("PayloadAttackedCoD", true, lv_owningPlayer, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TimerStart(gv_payloadAttackNotificationCooldown[lv_owningPlayer], 90.0, false, c_timeGame);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    gv_transmissionPayloadAttackedPlaying[lv_owningPlayer] = false;
    return true;
}

trigger auto_gf_TransmissionPayloadReadyQ_Trigger = null;
int auto_gf_TransmissionPayloadReadyQ_lp_payloadOwner;

void gf_TransmissionPayloadReadyQ (int lp_payloadOwner) {
    auto_gf_TransmissionPayloadReadyQ_lp_payloadOwner = lp_payloadOwner;

    if (auto_gf_TransmissionPayloadReadyQ_Trigger == null) {
        auto_gf_TransmissionPayloadReadyQ_Trigger = TriggerCreate("auto_gf_TransmissionPayloadReadyQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_TransmissionPayloadReadyQ_Trigger, false, false);
}

bool auto_gf_TransmissionPayloadReadyQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_payloadOwner = auto_gf_TransmissionPayloadReadyQ_lp_payloadOwner;

    // Variable Declarations
    playergroup lv_ownerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ownerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    if ((gv_transmissionBothPayloadsVOPlayed == true)) {
        gv_transmissionBothPayloadsVOPlayed = false;
        return true;
    }

    TriggerQueueEnter();
    lv_ownerGroup = PlayerGroupSingle(lp_payloadOwner);
    libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech, lv_ownerGroup);
    libCOMI_gf_SendSplitMissionTransmission("PayloadReadyCoD", true, lp_payloadOwner, -1);
    libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game, lv_ownerGroup);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

trigger auto_gf_TransmissionPayloadLostInTransitQ_Trigger = null;
int auto_gf_TransmissionPayloadLostInTransitQ_lp_payloadOwner;

void gf_TransmissionPayloadLostInTransitQ (int lp_payloadOwner) {
    auto_gf_TransmissionPayloadLostInTransitQ_lp_payloadOwner = lp_payloadOwner;

    if (auto_gf_TransmissionPayloadLostInTransitQ_Trigger == null) {
        auto_gf_TransmissionPayloadLostInTransitQ_Trigger = TriggerCreate("auto_gf_TransmissionPayloadLostInTransitQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_TransmissionPayloadLostInTransitQ_Trigger, false, false);
}

bool auto_gf_TransmissionPayloadLostInTransitQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_payloadOwner = auto_gf_TransmissionPayloadLostInTransitQ_lp_payloadOwner;

    // Variable Declarations
    playergroup lv_ownerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ownerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    TriggerQueueEnter();
    lv_ownerGroup = PlayerGroupSingle(lp_payloadOwner);
    libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech, lv_ownerGroup);
    libCOMI_gf_SendSplitMissionTransmission("PayloadDeadCoD", true, lp_payloadOwner, -1);
    libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game, lv_ownerGroup);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

void gf_ScoreScreenDamageDealttoConstructsSetup () {
    // Automatic Variable Declarations
    unitgroup auto91DD928A_g;
    int auto91DD928A_u;
    unit auto91DD928A_var;

    // Implementation
    auto91DD928A_g = UnitGroup("CODXelNagaConstruct", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto91DD928A_u = UnitGroupCount(auto91DD928A_g, c_unitCountAll);
    for (;; auto91DD928A_u -= 1) {
        auto91DD928A_var = UnitGroupUnitFromEnd(auto91DD928A_g, auto91DD928A_u);
        if (auto91DD928A_var == null) { break; }
        libCOMI_gf_TrackUnitDamageTakenForScoreScreen(true, auto91DD928A_var, "CradleOfDeathDamageDealttoConstructs");
    }
}

point gf_AttackWaveSpawnPoint () {
    // Automatic Variable Declarations
    point auto9BAC0675_val;

    // Implementation
    auto9BAC0675_val = gv_primaryObjectiveTarget[(gf_ActiveObjective() + 1)].lv_targetFacilityCenter;
    if (auto9BAC0675_val == PointFromId(2049710523)) {
        return PointFromId(1782792860);
    }
    else if (auto9BAC0675_val == PointFromId(1063757218)) {
        return PointFromId(1810138864);
    }
    else if (auto9BAC0675_val == PointFromId(58419705)) {
        return PointFromId(676438566);
    }
    else if (auto9BAC0675_val == PointFromId(1293828804)) {
        return PointFromId(1557515734);
    }
    else {
        return null;
    }
}

point gf_AttackWaveWaypoint () {
    // Variable Declarations
    point lv_spawnLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_spawnLocation = gv_primaryObjectiveTarget[(gf_ActiveObjective() + 1)].lv_targetFacilityCenter;
    if ((lv_spawnLocation == PointFromId(2049710523))) {
        return PointFromId(99206575);
    }

    if ((lv_spawnLocation == PointFromId(1063757218))) {
        return PointFromId(1477509319);
    }

    return null;
}

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    while (!((TimerGetRemaining(gv_countdownUntilMissionFailure) >= 90.0))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

}

trigger auto_gf_DropPodAttackonPayloads_Trigger = null;
fixed auto_gf_DropPodAttackonPayloads_lp_waveTime;
int auto_gf_DropPodAttackonPayloads_lp_waveCount;
int auto_gf_DropPodAttackonPayloads_lp_currentObjective;
int auto_gf_DropPodAttackonPayloads_lp_resourceBucket;
int auto_gf_DropPodAttackonPayloads_lp_techLevel;

void gf_DropPodAttackonPayloads (fixed lp_waveTime, int lp_waveCount, int lp_currentObjective, int lp_resourceBucket, int lp_techLevel) {
    auto_gf_DropPodAttackonPayloads_lp_waveTime = lp_waveTime;
    auto_gf_DropPodAttackonPayloads_lp_waveCount = lp_waveCount;
    auto_gf_DropPodAttackonPayloads_lp_currentObjective = lp_currentObjective;
    auto_gf_DropPodAttackonPayloads_lp_resourceBucket = lp_resourceBucket;
    auto_gf_DropPodAttackonPayloads_lp_techLevel = lp_techLevel;

    if (auto_gf_DropPodAttackonPayloads_Trigger == null) {
        auto_gf_DropPodAttackonPayloads_Trigger = TriggerCreate("auto_gf_DropPodAttackonPayloads_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropPodAttackonPayloads_Trigger, false, false);
}

bool auto_gf_DropPodAttackonPayloads_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_waveTime = auto_gf_DropPodAttackonPayloads_lp_waveTime;
    int lp_waveCount = auto_gf_DropPodAttackonPayloads_lp_waveCount;
    int lp_currentObjective = auto_gf_DropPodAttackonPayloads_lp_currentObjective;
    int lp_resourceBucket = auto_gf_DropPodAttackonPayloads_lp_resourceBucket;
    int lp_techLevel = auto_gf_DropPodAttackonPayloads_lp_techLevel;

    // Variable Declarations
    timer lv_spawnAttackForce;
    point lv_dropPodTarget;
    int[3] lv_playerEnemies;
    int lv_playerIter;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    int auto5AB045C3_ae;
    const int auto5AB045C3_ai = 1;

    // Variable Initialization
    lv_spawnAttackForce = TimerCreate();

    // Implementation
    lv_eventSpawnCount = lp_waveCount;
    lv_playerEnemies[gv_pLAYER_01_USER] = gv_pLAYER_03_ENEMY;
    lv_playerEnemies[gv_pLAYER_02_USER] = gv_pLAYER_04_ENEMY;
    while ((libCOMI_gf_GameIsOver() == false)) {
        if ((gf_ActiveObjective() == lp_currentObjective) && (lv_eventSpawnCount > 0) && (TimerGetRemaining(lv_spawnAttackForce) <= 0.0)) {
            lv_eventSpawnCount -= 1;
            TimerStart(lv_spawnAttackForce, lp_waveTime, false, c_timeAI);
            auto5AB045C3_ae = gv_pLAYER_02_USER;
            lv_playerIter = gv_pLAYER_01_USER;
            for ( ; ( (auto5AB045C3_ai >= 0 && lv_playerIter <= auto5AB045C3_ae) || (auto5AB045C3_ai < 0 && lv_playerIter >= auto5AB045C3_ae) ) ; lv_playerIter += auto5AB045C3_ai ) {
                if ((UnitIsAlive(gv_payloadTrucks[lv_playerIter]) == true) && (gv_payloadDetonating[lv_playerIter] == false)) {
                    TriggerExecute(gt_TransmissionSpecialWaveSpawnQ, true, false);
                    lv_dropPodTarget = gf_DropPodLocation(UnitGetPosition(gv_payloadTrucks[lv_playerIter]), lp_currentObjective);
                    gf_CreateDropPodTelegraphed(lv_playerEnemies[lv_playerIter], lv_dropPodTarget, lp_resourceBucket, lp_techLevel);
                }

            }
        }

        if (((gf_ActiveObjective() != lp_currentObjective) || (lv_eventSpawnCount <= 0))) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

unit gf_PrioritizedPayloadTarget (int lp_enemyPlayer) {
    // Variable Declarations
    int lv_player;
    int lv_otherPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enemyPlayer == gv_pLAYER_03_ENEMY)) {
        lv_player = gv_pLAYER_01_USER;
        lv_otherPlayer = gv_pLAYER_02_USER;
    }
    else {
        lv_player = gv_pLAYER_02_USER;
        lv_otherPlayer = gv_pLAYER_01_USER;
    }
    if ((UnitIsAlive(gv_payloadTrucks[lv_player]) == true)) {
        return gv_payloadTrucks[lv_player];
    }
    else {
        if ((UnitIsAlive(gv_payloadTrucks[lv_otherPlayer]) == true)) {
            return gv_payloadTrucks[lv_otherPlayer];
        }
        else {
            return null;
        }
    }
}

trigger auto_gf_CreateDropPodTelegraphed_Trigger = null;
int auto_gf_CreateDropPodTelegraphed_lp_player;
point auto_gf_CreateDropPodTelegraphed_lp_location;
int auto_gf_CreateDropPodTelegraphed_lp_resourceBucket;
int auto_gf_CreateDropPodTelegraphed_lp_techLevel;

void gf_CreateDropPodTelegraphed (int lp_player, point lp_location, int lp_resourceBucket, int lp_techLevel) {
    auto_gf_CreateDropPodTelegraphed_lp_player = lp_player;
    auto_gf_CreateDropPodTelegraphed_lp_location = lp_location;
    auto_gf_CreateDropPodTelegraphed_lp_resourceBucket = lp_resourceBucket;
    auto_gf_CreateDropPodTelegraphed_lp_techLevel = lp_techLevel;

    if (auto_gf_CreateDropPodTelegraphed_Trigger == null) {
        auto_gf_CreateDropPodTelegraphed_Trigger = TriggerCreate("auto_gf_CreateDropPodTelegraphed_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateDropPodTelegraphed_Trigger, false, false);
}

bool auto_gf_CreateDropPodTelegraphed_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_CreateDropPodTelegraphed_lp_player;
    point lp_location = auto_gf_CreateDropPodTelegraphed_lp_location;
    int lp_resourceBucket = auto_gf_CreateDropPodTelegraphed_lp_resourceBucket;
    int lp_techLevel = auto_gf_CreateDropPodTelegraphed_lp_techLevel;

    // Variable Declarations
    unit lv_dropPodUnit;
    revealer[3] lv_revealedArea;
    actor lv_cursor;
    int lv_droppingPlayer;

    // Automatic Variable Declarations
    int auto432DED80_val;
    playergroup auto09A1ECA4_g;
    int auto09A1ECA4_var;
    playergroup auto29F1F2F5_g;
    int auto29F1F2F5_var;

    // Variable Initialization

    // Implementation
    auto432DED80_val = lp_player;
    if (auto432DED80_val == gv_pLAYER_03_ENEMY) {
        lv_droppingPlayer = gv_pLAYER_05_ENEMY_DropPods;
    }
    else if (auto432DED80_val == gv_pLAYER_04_ENEMY) {
        lv_droppingPlayer = gv_pLAYER_06_ENEMY_DropPods;
    }
    else {
        lv_droppingPlayer = -1;
    }
    libNtve_gf_CreateModelAtPoint("ZergGenericAOECursor", lp_location);
    lv_cursor = libNtve_gf_ActorLastCreated();
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lp_location, 10.0, Color(100.00, 0.00, 0.00));
    auto09A1ECA4_g = libCOMI_gf_HumanPlayers();
    auto09A1ECA4_var = -1;
    while (true) {
        auto09A1ECA4_var = PlayerGroupNextPlayer(auto09A1ECA4_g, auto09A1ECA4_var);
        if (auto09A1ECA4_var < 0) { break; }
        libCOMI_gf_CreateRevealerCoop(auto09A1ECA4_var, RegionCircle(lp_location, 5.0));
        lv_revealedArea[auto09A1ECA4_var] = VisRevealerLastCreated();
    }
    Wait(8.0, c_timeAI);
    libNtve_gf_KillModel(lv_cursor);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_droppingPlayer, lv_droppingPlayer, lp_resourceBucket, lp_techLevel, lp_location, true);
    AIAttackWaveSetTargetUnit(lv_droppingPlayer, gf_PrioritizedPayloadTarget(lp_player));
    libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective);
    auto29F1F2F5_g = libCOMI_gf_HumanPlayers();
    auto29F1F2F5_var = -1;
    while (true) {
        auto29F1F2F5_var = PlayerGroupNextPlayer(auto29F1F2F5_g, auto29F1F2F5_var);
        if (auto29F1F2F5_var < 0) { break; }
        libCOMI_gf_DestroyRevealerCoop(lv_revealedArea[auto29F1F2F5_var]);
    }
    return true;
}

void gf_InitalizeEasterEgg () {
    // Variable Declarations
    int lv_sceneIter;

    // Automatic Variable Declarations
    const int auto160615F4_ae = gv_c_EasterEggSceneCount;
    const int auto160615F4_ai = 1;

    // Variable Initialization

    // Implementation
    gv_easterEggActivateReady = true;
    gv_easterEggCutscene = c_cutsceneNone;
    lv_sceneIter = 1;
    for ( ; ( (auto160615F4_ai >= 0 && lv_sceneIter <= auto160615F4_ae) || (auto160615F4_ai < 0 && lv_sceneIter >= auto160615F4_ae) ) ; lv_sceneIter += auto160615F4_ai ) {
        gv_easterEggScenes[lv_sceneIter] = ("Teleport" + IntToString(lv_sceneIter) + "Start");
    }
    gv_easterEggCurrentScene = RandomInt(1, gv_c_EasterEggSceneCount);
}

void gf_ObjectiveDestroyPrimaryObjectiveCreate (int lp_objectiveToCreate) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_objectiveDestroyObjective_Objective[lp_objectiveToCreate] == c_invalidObjectiveId)) {
        libCOMI_gf_CreateObjectiveCampaign(gv_objectiveDestroyObjective_Data[lp_objectiveToCreate]);
        gv_objectiveDestroyObjective_Objective[lp_objectiveToCreate] = ObjectiveLastCreated();
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }

}

void gf_ObjectiveDestroyPrimaryObjectiveComplete (int lp_objectiveToComplete) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_objectiveDestroyObjective_Objective[lp_objectiveToComplete] == c_invalidObjectiveId)) {
        gf_ObjectiveDestroyPrimaryObjectiveCreate(lp_objectiveToComplete);
    }

    libCOMI_gf_ZS_SetMissionObjectiveState(gv_objectiveDestroyObjective_Data[lp_objectiveToComplete], libCOMI_ge_MissionObjectiveState_Completed);
}

void gf_ObjectiveDestroyPrimaryObjectiveUpdate (int lp_objectiveToUpdate, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_objectiveDestroyObjective_Objective[lp_objectiveToUpdate] == c_invalidObjectiveId)) {
        gf_ObjectiveDestroyPrimaryObjectiveCreate(lp_objectiveToUpdate);
    }

    libCOMI_gf_SetMissionObjectiveProgress(gv_objectiveDestroyObjective_Data[lp_objectiveToUpdate], lp_progress);
}

void gf_ObjectiveDestroyPrimaryObjectiveFailed (int lp_objectiveToFailed) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_objectiveDestroyObjective_Objective[lp_objectiveToFailed] == c_invalidObjectiveId)) {
        gf_ObjectiveDestroyPrimaryObjectiveCreate(lp_objectiveToFailed);
    }

    libCOMI_gf_ZS_SetMissionObjectiveState(gv_objectiveDestroyObjective_Data[lp_objectiveToFailed], libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9C90D6C4_g;
    int auto9C90D6C4_u;
    unit auto9C90D6C4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) == 1)) {
        gv_pLAYER_02_USER = gv_pLAYER_STONE;
        PlayerSetAlliance(gv_pLAYER_STONE, c_allianceIdControl, gv_pLAYER_01_USER, true);
    }
    else {
        gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    }
    TriggerEnable(gt_TransmissionFirstConstructQ, true);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init05bTargetLocations, true, false);
    TriggerExecute(gt_Init05cDoodadVisibility, true, false);
    TriggerExecute(gt_Init05dBranchBullies, true, false);
    gf_InitalizeEasterEgg();
    TriggerExecute(gt_Init08Difficulties, true, false);
    gf_ScoreScreenDamageDealttoConstructsSetup();
    auto9C90D6C4_g = gv_unitsStartingPaused;
    auto9C90D6C4_u = UnitGroupCount(auto9C90D6C4_g, c_unitCountAll);
    for (;; auto9C90D6C4_u -= 1) {
        auto9C90D6C4_var = UnitGroupUnitFromEnd(auto9C90D6C4_g, auto9C90D6C4_u);
        if (auto9C90D6C4_var == null) { break; }
        libNtve_gf_PauseUnit(auto9C90D6C4_var, true);
    }
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    TriggerAddEventGeneric(gt_Init03LoadingComplete, libCOMI_gv_COOP_MISSION_STARTED_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_expansionUnitIter;

    // Automatic Variable Declarations
    unitgroup auto2CAA62BE_g;
    int auto2CAA62BE_u;
    unitgroup autoEAB6859B_g;
    int autoEAB6859B_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(gv_expansionBlockers, UnitGroup("DestructibleUmojanLabTestTube", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_expansionBlockers, UnitGroup("PlatformConnector", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_expansionBlockers, UnitGroup("KorhalGateControl", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto2CAA62BE_g = gv_expansionBlockers;
    auto2CAA62BE_u = UnitGroupCount(auto2CAA62BE_g, c_unitCountAll);
    for (;; auto2CAA62BE_u -= 1) {
        lv_expansionUnitIter = UnitGroupUnitFromEnd(auto2CAA62BE_g, auto2CAA62BE_u);
        if (lv_expansionUnitIter == null) { break; }
        UnitBehaviorAdd(lv_expansionUnitIter, "Invulnerable", lv_expansionUnitIter, 1);
    }
    UnitGroupAddUnitGroup(gv_expansionResources, UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter((1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoEAB6859B_g = gv_expansionResources;
    autoEAB6859B_u = UnitGroupCount(autoEAB6859B_g, c_unitCountAll);
    for (;; autoEAB6859B_u -= 1) {
        lv_expansionUnitIter = UnitGroupUnitFromEnd(autoEAB6859B_g, autoEAB6859B_u);
        if (lv_expansionUnitIter == null) { break; }
        UnitBehaviorAdd(lv_expansionUnitIter, "BuildingStasis", lv_expansionUnitIter, 1);
        UnitBehaviorSetDuration(lv_expansionUnitIter, "BuildingStasis", 0.0);
        UnitBehaviorSetDurationRemaining(lv_expansionUnitIter, "BuildingStasis", 0.0);
    }
    gv_payloadFacility[gv_pLAYER_01_USER] = UnitFromId(1802170290);
    gv_payloadFacility[gv_pLAYER_02_USER] = UnitFromId(1256362521);
    UnitSetOwner(gv_payloadFacility[gv_pLAYER_01_USER], gv_pLAYER_01_USER, true);
    UnitSetOwner(gv_payloadFacility[gv_pLAYER_02_USER], gv_pLAYER_02_USER, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(690669022), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(504714393), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(977803679), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(873506086), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1913190768), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05b Target Locations
//--------------------------------------------------------------------------------------------------
bool gt_Init05bTargetLocations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetFacilityIndex;
    int lv_targetFacilityIter;

    // Automatic Variable Declarations
    int auto7191FE9C_ae;
    const int auto7191FE9C_ai = 1;
    unitgroup autoF9C9EA79_g;
    int autoF9C9EA79_u;
    unit autoF9C9EA79_var;
    unitgroup auto9C604FDA_g;
    int auto9C604FDA_u;
    unit auto9C604FDA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_missionObjectiveOrder[1] = ge_MissionObjectives_Objective1HybridFacility;
    gv_missionObjectiveOrder[2] = ge_MissionObjectives_Objective2XenonReactor;
    gv_missionObjectiveOrder[3] = ge_MissionObjectives_Objective3ResourceStockpile;
    gv_missionObjectiveOrder[4] = ge_MissionObjectives_Objective4VespeneRefinery;
    gv_missionObjectiveOrder[5] = ge_MissionObjectives_Objective5TerrazineExtractors;
    gv_victoryCameraMove = gt_VictoryCameraMoveVespene;
    if ((gv_missionObjectiveOrder_BranchFirst == ge_MissionProgressPaths__Uninitialized)) {
        if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
            gv_missionObjectiveOrder_BranchFirst = ge_MissionProgressPaths_PathLeft;
        }
        else {
            gv_missionObjectiveOrder_BranchFirst = ge_MissionProgressPaths_PathRight;
        }
    }

    if ((gv_missionObjectiveOrder_BranchFirst == ge_MissionProgressPaths_PathLeft)) {
        gv_missionObjectiveOrder[2] = ge_MissionObjectives_Objective2XenonReactor;
        gv_missionObjectiveOrder[3] = ge_MissionObjectives_Objective3ResourceStockpile;
    }
    else {
        gv_missionObjectiveOrder[2] = ge_MissionObjectives_Objective3ResourceStockpile;
        gv_missionObjectiveOrder[3] = ge_MissionObjectives_Objective2XenonReactor;
    }
    if ((gv_missionObjectiveOrder_BranchThird == ge_MissionProgressPaths__Uninitialized)) {
        if ((RandomInt(1, 2) == 1)) {
            gv_missionObjectiveOrder_BranchThird = ge_MissionProgressPaths_PathLeft;
        }
        else {
            gv_missionObjectiveOrder_BranchThird = ge_MissionProgressPaths_PathRight;
        }
    }

    if ((gv_missionObjectiveOrder_BranchThird == ge_MissionProgressPaths_PathLeft)) {
        gv_missionObjectiveOrder[4] = ge_MissionObjectives_Objective4VespeneRefinery;
        gv_missionObjectiveOrder[5] = ge_MissionObjectives_Objective5TerrazineExtractors;
    }
    else {
        gv_missionObjectiveOrder[4] = ge_MissionObjectives_Objective5TerrazineExtractors;
        gv_missionObjectiveOrder[5] = ge_MissionObjectives_Objective4VespeneRefinery;
    }
    if ((gv_missionObjectiveOrder_BranchThird == ge_MissionProgressPaths_PathLeft)) {
        gv_victoryCameraMove = gt_VictoryCameraMoveVespene;
    }
    else {
        gv_victoryCameraMove = gt_VictoryCameraMoveTerrazine;
    }
    TriggerExecute(gt_InitializeBonusObjectiveOrder, true, false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(672745750), true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(672745750)), c_animNameDefault, "Stand Unpowered", c_animFlagPlayForever, c_animTimeDefault);
    if ((gv_missionObjectiveOrder_BranchFirst == ge_MissionProgressPaths_PathLeft)) {
        UnitSetFacing(UnitFromId(672745750), 225.0, 0.0);
    }
    else {
        UnitSetFacing(UnitFromId(672745750), 315.0, 0.0);
    }
    lv_targetFacilityIter += 1;
    lv_targetFacilityIndex = gv_missionObjectiveOrder[lv_targetFacilityIter];
    gv_objectiveDestroyObjective_Data[lv_targetFacilityIndex] = "AC_CradleOfDeath_Primary02";
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_objectiveStructure = UnitFromId(1509424676);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[1] = UnitFromId(951167475);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[2] = UnitFromId(882319603);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[1] = UnitFromId(573227564);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[2] = UnitFromId(1173889467);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[1] = DoodadFromId(1153601238);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[2] = DoodadFromId(1841088703);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[3] = DoodadFromId(1680419107);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[1] = PointFromId(1158904245);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[2] = PointFromId(1788672296);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[3] = PointFromId(1200850853);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_targetFacilityCenter = PointFromId(1857114181);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeExplosionArea = RegionFromId(81);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_revealExits = RegionFromId(3);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_extraDestruction = gt_Location1Destruction;
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(572165378));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1390358605));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(423267341));
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[1] = UnitFromId(1390358605);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[2] = UnitFromId(423267341);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_directionLights = RegionFromId(17);
    lv_targetFacilityIter += 1;
    lv_targetFacilityIndex = gv_missionObjectiveOrder[lv_targetFacilityIter];
    gv_objectiveDestroyObjective_Data[lv_targetFacilityIndex] = "AC_CradleOfDeath_Primary03";
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_objectiveStructure = UnitFromId(2086506861);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[1] = UnitFromId(1658634870);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[2] = UnitFromId(1298506937);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[1] = UnitFromId(167240160);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[2] = UnitFromId(13617586);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[1] = DoodadFromId(1607424563);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[2] = DoodadFromId(2022780256);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[3] = DoodadFromId(721615255);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[1] = PointFromId(1953596325);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[2] = PointFromId(1409027082);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_targetFacilityCenter = PointFromId(2049710523);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeExplosionArea = RegionFromId(82);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_revealExits = RegionFromId(4);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_extraDestruction = gt_Location2Destruction;
    ActorSend(ActorFromDoodad(DoodadFromId(1243108147)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(66245985)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1107884897)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1141792117)), "SetVisibility");
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(2013460940));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(449739005));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1764126075));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(486626739));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1545649492));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(335934937));
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[1] = UnitFromId(486626739);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[2] = UnitFromId(1545649492);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_directionLights = RegionFromId(18);
    lv_targetFacilityIter += 1;
    lv_targetFacilityIndex = gv_missionObjectiveOrder[lv_targetFacilityIter];
    gv_objectiveDestroyObjective_Data[lv_targetFacilityIndex] = "AC_CradleOfDeath_Primary04";
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_objectiveStructure = UnitFromId(142202360);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[1] = UnitFromId(1212309107);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[2] = UnitFromId(692154000);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[1] = UnitFromId(1186298426);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[2] = UnitFromId(1321739591);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[1] = DoodadFromId(1039343509);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[2] = DoodadFromId(1930932290);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[3] = DoodadFromId(1468715942);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeRadiusMarkers[4] = DoodadFromId(207143170);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[1] = PointFromId(802874579);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[2] = PointFromId(2038011421);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_escapeDirection[2] = PointFromId(1374987006);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_targetFacilityCenter = PointFromId(1063757218);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeExplosionArea = RegionFromId(83);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_revealExits = RegionFromId(5);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_extraDestruction = gt_Location3Destruction;
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1244280021));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1147773677));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1911991804));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1329863854));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(2026006707));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(887766431));
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[1] = UnitFromId(1329863854);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[2] = UnitFromId(2026006707);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_directionLights = RegionFromId(19);
    lv_targetFacilityIter += 1;
    lv_targetFacilityIndex = gv_missionObjectiveOrder[lv_targetFacilityIter];
    gv_objectiveDestroyObjective_Data[lv_targetFacilityIndex] = "AC_CradleOfDeath_Primary05";
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_objectiveStructure = UnitFromId(1142348947);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[1] = UnitFromId(212919419);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[2] = UnitFromId(2034225156);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[1] = UnitFromId(1281752216);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[2] = UnitFromId(1497131701);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_targetFacilityCenter = PointFromId(58419705);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeExplosionArea = RegionFromId(84);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_extraDestruction = gt_Location4Destruction;
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(439333848));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1408422065));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1338937929));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1177147213));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(698091116));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1837658877));
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[1] = UnitFromId(1177147213);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[2] = UnitFromId(698091116);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_directionLights = RegionFromId(21);
    lv_targetFacilityIter += 1;
    lv_targetFacilityIndex = gv_missionObjectiveOrder[lv_targetFacilityIter];
    gv_objectiveDestroyObjective_Data[lv_targetFacilityIndex] = "AC_CradleOfDeath_Primary06";
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_objectiveStructure = UnitFromId(1541679127);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[1] = UnitFromId(1289997796);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestination[2] = UnitFromId(1247136894);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[1] = UnitFromId(1799621840);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_payloadDestinationBlockedMarker[2] = UnitFromId(748734917);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_targetFacilityCenter = PointFromId(1293828804);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_nukeExplosionArea = RegionFromId(85);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_extraDestruction = gt_Location5Destruction;
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1768782041));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(337100585));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1838056763));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(1637885164));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(222009869));
    UnitGroupAdd(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs, UnitFromId(748783346));
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[1] = UnitFromId(222009869);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructDropOffGuards[2] = UnitFromId(748783346);
    gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_directionLights = RegionFromId(20);
    auto7191FE9C_ae = lv_targetFacilityIter;
    lv_targetFacilityIndex = 1;
    for ( ; ( (auto7191FE9C_ai >= 0 && lv_targetFacilityIndex <= auto7191FE9C_ae) || (auto7191FE9C_ai < 0 && lv_targetFacilityIndex >= auto7191FE9C_ae) ) ; lv_targetFacilityIndex += auto7191FE9C_ai ) {
        libNtve_gf_MakeUnitInvulnerable(gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_objectiveStructure, true);
        autoF9C9EA79_g = gv_primaryObjectiveTarget[lv_targetFacilityIndex].lv_constructs;
        autoF9C9EA79_u = UnitGroupCount(autoF9C9EA79_g, c_unitCountAll);
        for (;; autoF9C9EA79_u -= 1) {
            autoF9C9EA79_var = UnitGroupUnitFromEnd(autoF9C9EA79_g, autoF9C9EA79_u);
            if (autoF9C9EA79_var == null) { break; }
            UnitGroupAdd(gv_allConstructs, autoF9C9EA79_var);
            libHots_gf_StorePointForUnit(autoF9C9EA79_var, 1, UnitGetPosition(autoF9C9EA79_var));
        }
    }
    auto9C604FDA_g = gv_primaryObjectiveTarget[5].lv_constructs;
    auto9C604FDA_u = UnitGroupCount(auto9C604FDA_g, c_unitCountAll);
    for (;; auto9C604FDA_u -= 1) {
        auto9C604FDA_var = UnitGroupUnitFromEnd(auto9C604FDA_g, auto9C604FDA_u);
        if (auto9C604FDA_var == null) { break; }
    }
    ActorSend(ActorFromDoodad(DoodadFromId(2131220656)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(376339269)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(990198938)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(565475776)), "SetVisibility");
    if ((gf_BonusObjectiveOrder(1) == ge_BonusObjectiveType_LeftTop)) {
        gv_bonusObjectiveGuardianConstruct[1] = UnitFromId(313417303);
        UnitGroupAdd(gv_bonusObjectiveConstructs[1], UnitFromId(313417303));
    }
    else {
        gv_bonusObjectiveGuardianConstruct[1] = UnitFromId(311683063);
        UnitGroupAdd(gv_bonusObjectiveConstructs[1], UnitFromId(311683063));
    }
    if ((gf_BonusObjectiveOrder(2) == ge_BonusObjectiveType_LeftBottom)) {
        gv_bonusObjectiveGuardianConstruct[2] = UnitFromId(1945351366);
        UnitGroupAdd(gv_bonusObjectiveConstructs[2], UnitFromId(1945351366));
    }
    else {
        gv_bonusObjectiveGuardianConstruct[2] = UnitFromId(200910999);
        UnitGroupAdd(gv_bonusObjectiveConstructs[2], UnitFromId(200910999));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05bTargetLocations_Init () {
    gt_Init05bTargetLocations = TriggerCreate("gt_Init05bTargetLocations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05c Doodad Visibility
//--------------------------------------------------------------------------------------------------
bool gt_Init05cDoodadVisibility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_facilityIter;

    // Automatic Variable Declarations
    const int autoA065142C_ae = gv_c_PrimaryObjectiveCount;
    const int autoA065142C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_facilityIter = 1;
    for ( ; ( (autoA065142C_ai >= 0 && lv_facilityIter <= autoA065142C_ae) || (autoA065142C_ai < 0 && lv_facilityIter >= autoA065142C_ae) ) ; lv_facilityIter += autoA065142C_ai ) {
        gf_ShowHideNukeRadiusMarkers(false, lv_facilityIter);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05cDoodadVisibility_Init () {
    gt_Init05cDoodadVisibility = TriggerCreate("gt_Init05cDoodadVisibility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05d Branch Bullies
//--------------------------------------------------------------------------------------------------
bool gt_Init05dBranchBullies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIter;
    region lv_regionToClear;
    region lv_regionToKeep;

    // Automatic Variable Declarations
    playergroup auto4E215DB9_g;
    int auto325B3CF5_val;
    unitgroup autoC7EEF2C5_g;
    int autoC7EEF2C5_u;
    unit autoC7EEF2C5_var;
    unitgroup auto80575D08_g;
    int auto80575D08_u;
    unit auto80575D08_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_regionToKeep = RegionFromId(26);
    lv_regionToClear = RegionFromId(27);
    auto4E215DB9_g = libCOMI_gf_GetEnemyPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto4E215DB9_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        auto325B3CF5_val = gv_missionObjectiveOrder_BranchFirst;
        if (auto325B3CF5_val == ge_MissionProgressPaths_PathLeft) {
            lv_regionToKeep = RegionFromId(26);
            lv_regionToClear = RegionFromId(27);
        }
        else if (auto325B3CF5_val == ge_MissionProgressPaths_PathRight) {
            lv_regionToKeep = RegionFromId(27);
            lv_regionToClear = RegionFromId(26);
        }
        else {
        }
        autoC7EEF2C5_g = UnitGroup(null, lv_playerIter, lv_regionToKeep, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoC7EEF2C5_u = UnitGroupCount(autoC7EEF2C5_g, c_unitCountAll);
        for (;; autoC7EEF2C5_u -= 1) {
            autoC7EEF2C5_var = UnitGroupUnitFromEnd(autoC7EEF2C5_g, autoC7EEF2C5_u);
            if (autoC7EEF2C5_var == null) { break; }
            libNtve_gf_ShowHideUnit(autoC7EEF2C5_var, true);
        }
        auto80575D08_g = UnitGroup(null, lv_playerIter, lv_regionToClear, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto80575D08_u = UnitGroupCount(auto80575D08_g, c_unitCountAll);
        for (;; auto80575D08_u -= 1) {
            auto80575D08_var = UnitGroupUnitFromEnd(auto80575D08_g, auto80575D08_u);
            if (auto80575D08_var == null) { break; }
            UnitRemove(auto80575D08_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05dBranchBullies_Init () {
    gt_Init05dBranchBullies = TriggerCreate("gt_Init05dBranchBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bonusObjectiveLife;
    fixed lv_mainObjectiveLife;
    int lv_playerIter;
    fixed lv_payloadLife;

    // Automatic Variable Declarations
    int auto38344D8A_val;
    playergroup auto28AAEC0D_g;
    int auto28AAEC0D_var;
    const int autoAF426808_ae = gv_c_PrimaryObjectiveCount;
    int autoAF426808_var;
    unitgroup autoE2D9E6BA_g;
    int autoE2D9E6BA_u;
    unit autoE2D9E6BA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto38344D8A_val = libCOMI_gf_DifficultyLevelForPlayerCoop(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1));
    if (auto38344D8A_val == 4) {
        gv_initialTimerLength += (3.75 * 60.0);
        gv_timeAddedByObjectiveProgress += (3.75 * 60.0);
        gv_explosionFuseTime += 12.0;
        gv_construct_Life[1] += 375.0;
        gv_construct_Life[2] += 750.0;
        gv_construct_Life[3] += 1125.0;
        gv_construct_Life[4] += 1500.0;
        gv_initialTimerLength += (3.75 * 60.0);
        gv_timeAddedByObjectiveProgress += (3.75 * 60.0);
        gv_explosionFuseTime += 12.0;
        gv_construct_Life[1] += 375.0;
        gv_construct_Life[2] += 750.0;
        gv_construct_Life[3] += 1125.0;
        gv_construct_Life[4] += 1500.0;
        lv_payloadLife = 600.0;
    }
    else if (auto38344D8A_val == 3) {
        gv_initialTimerLength += (4.25 * 60.0);
        gv_timeAddedByObjectiveProgress += (4.75 * 60.0);
        gv_explosionFuseTime += 14.0;
        gv_construct_Life[1] += 250.0;
        gv_construct_Life[2] += 500.0;
        gv_construct_Life[3] += 750.0;
        gv_construct_Life[4] += 1000.0;
        gv_initialTimerLength += (4.25 * 60.0);
        gv_timeAddedByObjectiveProgress += (4.75 * 60.0);
        gv_explosionFuseTime += 14.0;
        gv_construct_Life[1] += 250.0;
        gv_construct_Life[2] += 500.0;
        gv_construct_Life[3] += 750.0;
        gv_construct_Life[4] += 1000.0;
        lv_payloadLife = 950.0;
    }
    else {
        gv_initialTimerLength += (5.25 * 60.0);
        gv_timeAddedByObjectiveProgress += (5.25 * 60.0);
        gv_explosionFuseTime += 15.0;
        gv_construct_Life[1] += 175.0;
        gv_construct_Life[2] += 250.0;
        gv_construct_Life[3] += 375.0;
        gv_construct_Life[4] += 500.0;
        gv_initialTimerLength += (5.25 * 60.0);
        gv_timeAddedByObjectiveProgress += (5.25 * 60.0);
        gv_explosionFuseTime += 15.0;
        gv_construct_Life[1] += 175.0;
        gv_construct_Life[2] += 250.0;
        gv_construct_Life[3] += 375.0;
        gv_construct_Life[4] += 500.0;
        lv_payloadLife = 1250.0;
    }
    gv_bonusObjectiveDuration = (7.0 * 60.0);
    CatalogFieldValueModify(c_gameCatalogUnit, gv_c_PayloadUnitType, "LifeStart", gv_pLAYER_STONE, FixedToString(lv_payloadLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, gv_c_PayloadUnitType, "LifeMax", gv_pLAYER_STONE, FixedToString(lv_payloadLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    auto28AAEC0D_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto28AAEC0D_var = -1;
    while (true) {
        auto28AAEC0D_var = PlayerGroupNextPlayer(auto28AAEC0D_g, auto28AAEC0D_var);
        if (auto28AAEC0D_var < 0) { break; }
        CatalogFieldValueModify(c_gameCatalogUnit, gv_c_PayloadUnitType, "LifeMax", auto28AAEC0D_var, FixedToString(lv_payloadLife, c_fixedPrecisionAny), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogUnit, gv_c_PayloadUnitType, "LifeStart", auto28AAEC0D_var, FixedToString(lv_payloadLife, c_fixedPrecisionAny), c_upgradeOperationSet);
    }
    autoAF426808_var = 1;
    for ( ; autoAF426808_var <= autoAF426808_ae; autoAF426808_var += 1 ) {
        autoE2D9E6BA_g = gv_primaryObjectiveTarget[autoAF426808_var].lv_constructs;
        autoE2D9E6BA_u = UnitGroupCount(autoE2D9E6BA_g, c_unitCountAll);
        for (;; autoE2D9E6BA_u -= 1) {
            autoE2D9E6BA_var = UnitGroupUnitFromEnd(autoE2D9E6BA_g, autoE2D9E6BA_u);
            if (autoE2D9E6BA_var == null) { break; }
            UnitSetPropertyFixed(autoE2D9E6BA_var, c_unitPropLifeMax, gv_construct_Life[MinI(autoAF426808_var, 4)]);
            UnitSetPropertyFixed(autoE2D9E6BA_var, c_unitPropLifePercent, 100.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Pause/UnpauseTimer
//--------------------------------------------------------------------------------------------------
bool gt_DebugPauseUnpauseTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventChatMessage(false) == "-PauseTimer") || (EventChatMessage(false) == "-pausetimer"))) {
        TimerPause(gv_countdownUntilMissionFailure, true);
        TriggerDebugOutput(1, StringExternal("Param/Value/D1C95563"), true);
    }
    else {
        TimerPause(gv_countdownUntilMissionFailure, false);
        TriggerDebugOutput(1, StringExternal("Param/Value/E498ABC8"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugPauseUnpauseTimer_Init () {
    gt_DebugPauseUnpauseTimer = TriggerCreate("gt_DebugPauseUnpauseTimer_Func");
    TriggerAddEventChatMessage(gt_DebugPauseUnpauseTimer, c_playerAny, "-PauseTimer", true);
    TriggerAddEventChatMessage(gt_DebugPauseUnpauseTimer, c_playerAny, "-pausetimer", true);
    TriggerAddEventChatMessage(gt_DebugPauseUnpauseTimer, c_playerAny, "-UnpauseTimer", true);
    TriggerAddEventChatMessage(gt_DebugPauseUnpauseTimer, c_playerAny, "-unpausetimer", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAED3353A_val;
    playergroup autoF6D14D1B_g;
    int autoF6D14D1B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateUIforExplosionWarning, true, false);
    TriggerExecute(gt_EvacuateAreaCountdownUI, true, false);
    gf_BuildPayloads(ge_BuildPayloadBothPlayers_BothPlayers);
    gf_SetMissionFailureTimer(gv_initialTimerLength);
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDontLetTimerExpireCreate, true, true);
    TriggerExecute(gt_UpdateObjectiveTimer, true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    autoAED3353A_val = RandomInt(1, 3);
    if (autoAED3353A_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro1CoD", true, -1);
    }
    else if (autoAED3353A_val == 2) {
        libCOMI_gf_SendMissionTransmission("Intro2CoD", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Intro3CoD", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    libCOMI_gf_TimerWindowCreate(gv_countdownUntilMissionFailure, StringExternal("Param/Value/55308C48"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
    autoF6D14D1B_g = libCOMI_gf_HumanPlayers();
    autoF6D14D1B_var = -1;
    while (true) {
        autoF6D14D1B_var = PlayerGroupNextPlayer(autoF6D14D1B_g, autoF6D14D1B_var);
        if (autoF6D14D1B_var < 0) { break; }
        libCOMI_gf_PingMinimapCampaign(PlayerGroupSingle(autoF6D14D1B_var), UnitGetPosition(gv_payloadTrucks[autoF6D14D1B_var]), 2.0, Color(0.00, 100.00, 0.00));
        libCOMI_gf_SetHeroPanelUnit(2, gv_payloadTrucks[autoF6D14D1B_var], autoF6D14D1B_var);
        gf_PayloadSoftTutorialReticles(gv_payloadTrucks[autoF6D14D1B_var]);
    }
    Wait(1.0, c_timeGame);
    gf_ActivateandMakeObjectiveCurrent(1);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Objective Timer
//--------------------------------------------------------------------------------------------------
bool gt_UpdateObjectiveTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(gt_ObjectiveDontLetTimerExpireUpdate, true, false);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateObjectiveTimer_Init () {
    gt_UpdateObjectiveTimer = TriggerCreate("gt_UpdateObjectiveTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuate Area Countdown UI
//--------------------------------------------------------------------------------------------------
bool gt_EvacuateAreaCountdownUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(678, 200, c_anchorTop, 0, 150, true);
    gv_nukeBarDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(gv_nukeBarDialog, gv_nukeBarWidth, gv_nukeBarHeight, c_anchorLeft, 44, 0, StringToText(""), "Assets\\Textures\\ui_loadingbar_bar_highlighted_zerg.dds", c_triggerImageTypeNormal, false, Color(100.00, 92.94, 51.76), c_triggerBlendModeNormal);
    gv_nukeBar = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacuateAreaCountdownUI_Init () {
    gt_EvacuateAreaCountdownUI = TriggerCreate("gt_EvacuateAreaCountdownUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create UI for Explosion Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateUIforExplosionWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1200, 1200, c_anchorTop, 0, 175, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 1200, c_anchorCenter, 0, 0, StringExternal("Param/Value/E251DD9F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BombWarning", PlayerGroupAll());
    gv_bombWarningDialogItem = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUIforExplosionWarning_Init () {
    gt_CreateUIforExplosionWarning = TriggerCreate("gt_CreateUIforExplosionWarning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Location 1 - Destruction
//--------------------------------------------------------------------------------------------------
bool gt_Location1Destruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3C6E8582_g;
    int auto3C6E8582_u;
    unit auto3C6E8582_var;
    unitgroup autoC261897F_g;
    int autoC261897F_u;
    unit autoC261897F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(1509424676));
    ActorSend(ActorFromDoodad(DoodadFromId(1691415753)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1351207515)), "SetVisibility");
    auto3C6E8582_g = gv_expansionBlockers;
    auto3C6E8582_u = UnitGroupCount(auto3C6E8582_g, c_unitCountAll);
    for (;; auto3C6E8582_u -= 1) {
        auto3C6E8582_var = UnitGroupUnitFromEnd(auto3C6E8582_g, auto3C6E8582_u);
        if (auto3C6E8582_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto3C6E8582_var), libNtve_gf_SetOpacity(0.0, 2.0));
    }
    Wait(4.0, c_timeGame);
    autoC261897F_g = gv_expansionBlockers;
    autoC261897F_u = UnitGroupCount(autoC261897F_g, c_unitCountAll);
    for (;; autoC261897F_u -= 1) {
        autoC261897F_var = UnitGroupUnitFromEnd(autoC261897F_g, autoC261897F_u);
        if (autoC261897F_var == null) { break; }
        UnitRemove(autoC261897F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Location1Destruction_Init () {
    gt_Location1Destruction = TriggerCreate("gt_Location1Destruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Location 2 - Destruction
//--------------------------------------------------------------------------------------------------
bool gt_Location2Destruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(2086506861));
    ActorSend(ActorFromDoodad(DoodadFromId(567380195)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1853725744)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(614137359)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(2013242425)), "SetVisibility");
    Wait(0.7, c_timeGame);
    libNtve_gf_CreateActorAtPoint("SmokePillarsTall", UnitGetPosition(UnitFromId(1525316891)));
    ActorSend(ActorFromDoodad(DoodadFromId(66245985)), "SetVisibility 1");
    UnitKill(UnitFromId(1525316891));
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateActorAtPoint("SmokePillarsTall", UnitGetPosition(UnitFromId(1934873296)));
    ActorSend(ActorFromDoodad(DoodadFromId(1141792117)), "SetVisibility 1");
    UnitKill(UnitFromId(1934873296));
    Wait(0.3, c_timeGame);
    libNtve_gf_CreateActorAtPoint("SmokePillarsTall", UnitGetPosition(UnitFromId(600323367)));
    ActorSend(ActorFromDoodad(DoodadFromId(1243108147)), "SetVisibility 1");
    UnitKill(UnitFromId(600323367));
    libNtve_gf_CreateActorAtPoint("SmokePillarsTall", UnitGetPosition(UnitFromId(117725072)));
    ActorSend(ActorFromDoodad(DoodadFromId(1107884897)), "SetVisibility 1");
    UnitKill(UnitFromId(117725072));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Location2Destruction_Init () {
    gt_Location2Destruction = TriggerCreate("gt_Location2Destruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Location 3 - Destruction
//--------------------------------------------------------------------------------------------------
bool gt_Location3Destruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromDoodad(DoodadFromId(22534805)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(900276978)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(199277081)), "SetVisibility");
    ActorSend(ActorFromDoodad(DoodadFromId(1369195757)), "SetVisibility");
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Nuked"), "HighYieldStorage", RegionFromId(83));
    PathRemoveNoFlyZonesInRegion(RegionFromId(16));
    Wait(0.2, c_timeGame);
    UnitKill(UnitFromId(1554838862));
    UnitKill(UnitFromId(142202360));
    UnitKill(UnitFromId(143693334));
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_AnimBaselineStop(), "HighYieldConveyorBelt", RegionFromId(83));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Location3Destruction_Init () {
    gt_Location3Destruction = TriggerCreate("gt_Location3Destruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Location 4 - Destruction
//--------------------------------------------------------------------------------------------------
bool gt_Location4Destruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Location4Destruction_Init () {
    gt_Location4Destruction = TriggerCreate("gt_Location4Destruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Location 5 - Destruction
//--------------------------------------------------------------------------------------------------
bool gt_Location5Destruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Location5Destruction_Init () {
    gt_Location5Destruction = TriggerCreate("gt_Location5Destruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Drop Off Construct Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_PayloadDropOffConstructDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_constructDropOffGuards[1]) || (EventUnit() == gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_constructDropOffGuards[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    if (((UnitIsAlive(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_constructDropOffGuards[1]) == false) && (UnitIsAlive(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_constructDropOffGuards[2]) == false))) {
        gf_KillObjectiveReminderReticle();
        gf_ActivateDropOffBeacons();
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        if ((EventUnit() == gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_constructDropOffGuards[1])) {
            gf_SetObjectiveReminderReticle(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_payloadDestinationBlockedMarker[1]);
        }
        else {
            gf_SetObjectiveReminderReticle(gv_primaryObjectiveTarget[gv_objectiveActiveCounter].lv_payloadDestinationBlockedMarker[2]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PayloadDropOffConstructDestroyed_Init () {
    gt_PayloadDropOffConstructDestroyed = TriggerCreate("gt_PayloadDropOffConstructDestroyed_Func");
    TriggerEnable(gt_PayloadDropOffConstructDestroyed, false);
    TriggerAddEventUnitDied(gt_PayloadDropOffConstructDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Built
//--------------------------------------------------------------------------------------------------
bool gt_PayloadBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetupUnitasPayload(EventUnitCreatedUnit());
    gv_payloadDetonating[UnitGetOwner(EventUnitCreatedUnit())] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PayloadBuilt_Init () {
    gt_PayloadBuilt = TriggerCreate("gt_PayloadBuilt_Func");
    TriggerAddEventUnitCreated(gt_PayloadBuilt, null, "BuildPayload", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Attacked
//--------------------------------------------------------------------------------------------------
bool gt_PayloadAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owningPlayer;
    unit lv_victim;
    unit lv_attacker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CODFlatbedTruck"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owningPlayer = UnitGetOwner(EventUnit());
    lv_victim = EventUnit();
    lv_attacker = EventUnitDamageSourceUnit();
    gf_LeaderboardPayloadTakesDamage(EventUnitDamageAmount());
    gf_TransmissionPayloadAttackedQ(lv_victim);
    if ((gv_payloadUnderAttack[lv_owningPlayer] == false)) {
        gv_payloadUnderAttack[lv_owningPlayer] = true;
        UnitBehaviorAddPlayer(lv_victim, "CybrosEscortBarrageHitTimer", lv_owningPlayer, 1);
        TimerStart(gv_payloadAttackedTime[lv_owningPlayer], 0.5, false, c_timeGame);
        while (!(((UnitIsAlive(lv_victim) == false) || (TimerGetRemaining(gv_payloadAttackedTime[lv_owningPlayer]) <= 0.0)))) {
            Wait(0.1, c_timeGame);
        }
        gv_payloadUnderAttack[lv_owningPlayer] = false;
        UnitBehaviorRemove(lv_victim, "CybrosEscortBarrageHitTimer", 1);
    }
    else {
        TimerStart(gv_payloadAttackedTime[lv_owningPlayer], 0.5, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PayloadAttacked_Init () {
    gt_PayloadAttacked = TriggerCreate("gt_PayloadAttacked_Func");
    TriggerAddEventUnitDamaged(gt_PayloadAttacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Players Lose Payload
//--------------------------------------------------------------------------------------------------
bool gt_PlayersLosePayload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_payloadTruckIndex;
    int lv_payloadOwner;
    int lv_iterPlayload;

    // Automatic Variable Declarations
    const int auto982D7B6C_ae = 15;
    const int auto982D7B6C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CODFlatbedTruck"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iterPlayload = 1;
    for ( ; ( (auto982D7B6C_ai >= 0 && lv_iterPlayload <= auto982D7B6C_ae) || (auto982D7B6C_ai < 0 && lv_iterPlayload >= auto982D7B6C_ae) ) ; lv_iterPlayload += auto982D7B6C_ai ) {
        if ((EventUnit() == gv_payloadTrucks[lv_iterPlayload])) {
            lv_payloadTruckIndex = lv_iterPlayload;
            break;
        }

    }
    if ((lv_payloadTruckIndex == 0)) {
        return true;
    }

    gf_ClearPayloadPings(gv_payloadTrucks[lv_payloadTruckIndex]);
    if ((gv_payloadDetonating[lv_payloadTruckIndex] == true)) {
        return true;
    }

    lv_payloadOwner = UnitGetOwner(EventUnit());
    if ((UnitGetType(EventUnit()) == gv_c_PayloadUnitType)) {
        if (((lv_payloadOwner == gv_pLAYER_STONE) || (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_payloadOwner) == true))) {
            gf_TransmissionPayloadLostInTransitQ(lv_payloadOwner);
            gf_BuildPayloads(lv_payloadOwner);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayersLosePayload_Init () {
    gt_PlayersLosePayload = TriggerCreate("gt_PlayersLosePayload_Func");
    TriggerAddEventUnitDied(gt_PlayersLosePayload, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Ends
//--------------------------------------------------------------------------------------------------
bool gt_MapEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__4PayloadEvent1, false);
    TriggerEnable(gt__4PayloadEvent2, false);
    TriggerEnable(gt__4PayloadEvent3, false);
    TriggerStop(gt__4DropPodEventA);
    TriggerStop(gt__4DropPodEventB);
    TriggerStop(gt__4DropPodEventC);
    TriggerEnable(gt__2PayloadEvent1, false);
    TriggerEnable(gt__2PayloadEvent2, false);
    TriggerEnable(gt__3PayloadEvent1, false);
    TriggerEnable(gt__3PayloadEvent2, false);
    TriggerEnable(gt__3PayloadEvent3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapEnds_Init () {
    gt_MapEnds = TriggerCreate("gt_MapEnds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 - Bomb Explode
//--------------------------------------------------------------------------------------------------
bool gt__1BombExplode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ExplosivesExplode(1);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt__2StartObjective, true, false);
    Wait(10.0, c_timeGame);
    ObjectiveShow(gv_objectiveDestroyObjective_Objective[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1BombExplode_Init () {
    gt__1BombExplode = TriggerCreate("gt__1BombExplode_Func");
    TriggerAddEventTimer(gt__1BombExplode, gv_explosionFuse);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 - Start Objective
//--------------------------------------------------------------------------------------------------
bool gt__2StartObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ActivateandMakeObjectiveCurrent(2);
    TriggerEnable(gt__2BombExplode, true);
    TimerStart(gv_payloadEvents[2][1], (2.5 * 60.0), false, c_timeGame);
    TimerStart(gv_payloadEvents[2][2], (4.5 * 60.0), false, c_timeGame);
    Wait(45.0, c_timeGame);
    TriggerExecute(gt_StartBonusObjective01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2StartObjective_Init () {
    gt__2StartObjective = TriggerCreate("gt__2StartObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 - Payload Event 1
//--------------------------------------------------------------------------------------------------
bool gt__2PayloadEvent1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__2DropPodEventA, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2PayloadEvent1_Init () {
    gt__2PayloadEvent1 = TriggerCreate("gt__2PayloadEvent1_Func");
    TriggerAddEventTimer(gt__2PayloadEvent1, gv_payloadEvents[2][1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 - Payload Event 2
//--------------------------------------------------------------------------------------------------
bool gt__2PayloadEvent2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__2DropPodEventB, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2PayloadEvent2_Init () {
    gt__2PayloadEvent2 = TriggerCreate("gt__2PayloadEvent2_Func");
    TriggerAddEventTimer(gt__2PayloadEvent2, gv_payloadEvents[2][2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 - DropPod Event A
//--------------------------------------------------------------------------------------------------
bool gt__2DropPodEventA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 30.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DropPodEventA_Init () {
    gt__2DropPodEventA = TriggerCreate("gt__2DropPodEventA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 - DropPod Event B
//--------------------------------------------------------------------------------------------------
bool gt__2DropPodEventB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 30.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2DropPodEventB_Init () {
    gt__2DropPodEventB = TriggerCreate("gt__2DropPodEventB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 - Bomb Explode
//--------------------------------------------------------------------------------------------------
bool gt__2BombExplode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__2PayloadEvent1, false);
    TriggerEnable(gt__2PayloadEvent2, false);
    gf_ExplosivesExplode(2);
    TriggerExecute(gt__3StartObjective, true, false);
    Wait(10.0, c_timeGame);
    ObjectiveShow(gv_objectiveDestroyObjective_Objective[2], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__2BombExplode_Init () {
    gt__2BombExplode = TriggerCreate("gt__2BombExplode_Func");
    TriggerEnable(gt__2BombExplode, false);
    TriggerAddEventTimer(gt__2BombExplode, gv_explosionFuse);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - Start Objective
//--------------------------------------------------------------------------------------------------
bool gt__3StartObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ActivateandMakeObjectiveCurrent(3);
    TriggerEnable(gt__3BombExplode, true);
    TimerStart(gv_payloadEvents[3][1], (1.5 * 60.0), false, c_timeGame);
    TimerStart(gv_payloadEvents[3][2], (2.5 * 60.0), false, c_timeGame);
    TimerStart(gv_payloadEvents[3][3], (4.5 * 60.0), false, c_timeGame);
    Wait(45.0, c_timeGame);
    TriggerExecute(gt_StartBonusObjective02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3StartObjective_Init () {
    gt__3StartObjective = TriggerCreate("gt__3StartObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - Payload Event 1
//--------------------------------------------------------------------------------------------------
bool gt__3PayloadEvent1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__3DropPodEventA, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3PayloadEvent1_Init () {
    gt__3PayloadEvent1 = TriggerCreate("gt__3PayloadEvent1_Func");
    TriggerAddEventTimer(gt__3PayloadEvent1, gv_payloadEvents[3][1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - Payload Event 2
//--------------------------------------------------------------------------------------------------
bool gt__3PayloadEvent2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__3DropPodEventB, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3PayloadEvent2_Init () {
    gt__3PayloadEvent2 = TriggerCreate("gt__3PayloadEvent2_Func");
    TriggerAddEventTimer(gt__3PayloadEvent2, gv_payloadEvents[3][2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - Payload Event 3
//--------------------------------------------------------------------------------------------------
bool gt__3PayloadEvent3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__3DropPodEventC, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3PayloadEvent3_Init () {
    gt__3PayloadEvent3 = TriggerCreate("gt__3PayloadEvent3_Func");
    TriggerAddEventTimer(gt__3PayloadEvent3, gv_payloadEvents[3][3]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - Bomb Explode
//--------------------------------------------------------------------------------------------------
bool gt__3BombExplode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt__3PayloadEvent1, false);
    TriggerEnable(gt__3PayloadEvent2, false);
    TriggerEnable(gt__3PayloadEvent3, false);
    gf_ExplosivesExplode(3);
    TriggerExecute(gt__4StartObjective, true, false);
    Wait(10.0, c_timeGame);
    ObjectiveShow(gv_objectiveDestroyObjective_Objective[3], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3BombExplode_Init () {
    gt__3BombExplode = TriggerCreate("gt__3BombExplode_Func");
    TriggerEnable(gt__3BombExplode, false);
    TriggerAddEventTimer(gt__3BombExplode, gv_explosionFuse);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - DropPod Event A
//--------------------------------------------------------------------------------------------------
bool gt__3DropPodEventA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 15.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3DropPodEventA_Init () {
    gt__3DropPodEventA = TriggerCreate("gt__3DropPodEventA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - DropPod Event B
//--------------------------------------------------------------------------------------------------
bool gt__3DropPodEventB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 15.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3DropPodEventB_Init () {
    gt__3DropPodEventB = TriggerCreate("gt__3DropPodEventB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - DropPod Event C
//--------------------------------------------------------------------------------------------------
bool gt__3DropPodEventC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 10.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__3DropPodEventC_Init () {
    gt__3DropPodEventC = TriggerCreate("gt__3DropPodEventC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 - Start Objective
//--------------------------------------------------------------------------------------------------
bool gt__4StartObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ActivateandMakeObjectiveCurrent(4);
    TriggerEnable(gt_MapEnds, true);
    TimerStart(gv_payloadEvents[4][1], (2.0 * 60.0), false, c_timeGame);
    TimerStart(gv_payloadEvents[4][2], (3.0 * 60.0), false, c_timeGame);
    TimerStart(gv_payloadEvents[4][3], (4.0 * 60.0), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4StartObjective_Init () {
    gt__4StartObjective = TriggerCreate("gt__4StartObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 - Payload Event 1
//--------------------------------------------------------------------------------------------------
bool gt__4PayloadEvent1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__4DropPodEventA, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4PayloadEvent1_Init () {
    gt__4PayloadEvent1 = TriggerCreate("gt__4PayloadEvent1_Func");
    TriggerAddEventTimer(gt__4PayloadEvent1, gv_payloadEvents[4][1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 - Payload Event 2
//--------------------------------------------------------------------------------------------------
bool gt__4PayloadEvent2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__4DropPodEventB, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4PayloadEvent2_Init () {
    gt__4PayloadEvent2 = TriggerCreate("gt__4PayloadEvent2_Func");
    TriggerAddEventTimer(gt__4PayloadEvent2, gv_payloadEvents[4][2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 - Payload Event 3
//--------------------------------------------------------------------------------------------------
bool gt__4PayloadEvent3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!(((UnitIsAlive(gv_payloadTrucks[gv_pLAYER_01_USER]) == true) || (UnitIsAlive(gv_payloadTrucks[gv_pLAYER_02_USER]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt__4DropPodEventC, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4PayloadEvent3_Init () {
    gt__4PayloadEvent3 = TriggerCreate("gt__4PayloadEvent3_Func");
    TriggerAddEventTimer(gt__4PayloadEvent3, gv_payloadEvents[4][3]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 - DropPod Event A
//--------------------------------------------------------------------------------------------------
bool gt__4DropPodEventA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 15.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4DropPodEventA_Init () {
    gt__4DropPodEventA = TriggerCreate("gt__4DropPodEventA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 - DropPod Event B
//--------------------------------------------------------------------------------------------------
bool gt__4DropPodEventB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 15.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4DropPodEventB_Init () {
    gt__4DropPodEventB = TriggerCreate("gt__4DropPodEventB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 4 - DropPod Event C
//--------------------------------------------------------------------------------------------------
bool gt__4DropPodEventC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentObjective;
    fixed lv_dropPodSpawnTime;
    int lv_eventSpawnCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentObjective = gf_ActiveObjective();
    lv_dropPodSpawnTime = 10.0;
    lv_eventSpawnCount = 1;
    gf_DropPodAttackonPayloads(lv_dropPodSpawnTime, lv_eventSpawnCount, lv_currentObjective, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__4DropPodEventC_Init () {
    gt__4DropPodEventC = TriggerCreate("gt__4DropPodEventC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Bonus Objective Order
//--------------------------------------------------------------------------------------------------
bool gt_InitializeBonusObjectiveOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iterObjective;
    unit lv_bonusObjectiveTarget;

    // Automatic Variable Declarations
    const int auto00F97F25_ae = gv_c_BonusObjectiveCount;
    const int auto00F97F25_ai = 1;
    unitgroup auto6A056670_g;
    int auto6A056670_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusObjectiveOrder[1] = gf_BonusObjectiveOrder(1);
    gv_bonusObjectiveOrder[2] = gf_BonusObjectiveOrder(2);
    TriggerExecute(gt_SetupBonusObjectiveLeftBottom, true, true);
    TriggerExecute(gt_SetupBonusObjectiveLeftTop, true, true);
    TriggerExecute(gt_SetupBonusObjectiveRightBottom, true, true);
    TriggerExecute(gt_SetupBonusObjectiveRightTop, true, true);
    lv_iterObjective = 1;
    for ( ; ( (auto00F97F25_ai >= 0 && lv_iterObjective <= auto00F97F25_ae) || (auto00F97F25_ai < 0 && lv_iterObjective >= auto00F97F25_ae) ) ; lv_iterObjective += auto00F97F25_ai ) {
        auto6A056670_g = gv_bonusObjectiveTargets[lv_iterObjective];
        auto6A056670_u = UnitGroupCount(auto6A056670_g, c_unitCountAll);
        for (;; auto6A056670_u -= 1) {
            lv_bonusObjectiveTarget = UnitGroupUnitFromEnd(auto6A056670_g, auto6A056670_u);
            if (lv_bonusObjectiveTarget == null) { break; }
            gf_SetBonusObjectiveTargetProperties(lv_bonusObjectiveTarget);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeBonusObjectiveOrder_Init () {
    gt_InitializeBonusObjectiveOrder = TriggerCreate("gt_InitializeBonusObjectiveOrder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective 01
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartBonusObjective(1, gt_ObjectiveDestroyThing01Create, gt_ObjectiveDestroyThing01Update, gt_ObjectiveDestroyThing01Complete, gt_ObjectiveDestroyThing01Failed, gt_BonusObjectiveGuardian1Killed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective01_Init () {
    gt_StartBonusObjective01 = TriggerCreate("gt_StartBonusObjective01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective 02
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartBonusObjective(2, gt_ObjectiveDestroyThing02Create, gt_ObjectiveDestroyThing02Update, gt_ObjectiveDestroyThing02Complete, gt_ObjectiveDestroyThing02Failed, gt_BonusObjectiveGuardian2Killed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective02_Init () {
    gt_StartBonusObjective02 = TriggerCreate("gt_StartBonusObjective02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Guardian 1 Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveGuardian1Killed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killedUnitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killedUnitIndex = 1;
    if ((libCOMI_gv_gameHasBegun == true) && (TimerGetDuration(gv_bonusObjectiveCompletionTimer[lv_killedUnitIndex]) <= 0.0)) {
        TriggerExecute(gt_StartBonusObjective01, true, false);
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    TimerStart(gv_bonusObjectivePauseTimer[lv_killedUnitIndex], gv_bonusObjectivePauseGrace, false, c_timeAI);
    gf_ModifyDropoffBeaconState(gv_bonusObjectiveDropOffMarkerBlocked[lv_killedUnitIndex], ge_BeaconStates_Kill);
    gf_ModifyDropoffBeaconState(gv_bonusObjectiveDropOffMarker[lv_killedUnitIndex], ge_BeaconStates_ActivateOnBonus);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveGuardian1Killed_Init () {
    gt_BonusObjectiveGuardian1Killed = TriggerCreate("gt_BonusObjectiveGuardian1Killed_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveGuardian1Killed, UnitRefFromVariable("gv_bonusObjectiveGuardianConstruct[1]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Guardian 2 Killed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveGuardian2Killed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killedUnitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killedUnitIndex = 2;
    if ((libCOMI_gv_gameHasBegun == true) && (TimerGetDuration(gv_bonusObjectiveCompletionTimer[lv_killedUnitIndex]) <= 0.0)) {
        TriggerExecute(gt_StartBonusObjective02, true, false);
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    TimerStart(gv_bonusObjectivePauseTimer[lv_killedUnitIndex], gv_bonusObjectivePauseGrace, false, c_timeAI);
    gf_ModifyDropoffBeaconState(gv_bonusObjectiveDropOffMarkerBlocked[lv_killedUnitIndex], ge_BeaconStates_Kill);
    gf_ModifyDropoffBeaconState(gv_bonusObjectiveDropOffMarker[lv_killedUnitIndex], ge_BeaconStates_ActivateOnBonus);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveGuardian2Killed_Init () {
    gt_BonusObjectiveGuardian2Killed = TriggerCreate("gt_BonusObjectiveGuardian2Killed_Func");
    TriggerAddEventUnitDied(gt_BonusObjectiveGuardian2Killed, UnitRefFromVariable("gv_bonusObjectiveGuardianConstruct[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Guardian 1 Disabled
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveGuardian1Disabled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bonusObjIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bonusObjIndex = 1;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bonusObjectiveGuardianConstruct[1]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        gf_PauseUnpauseBonusObjective(true, lv_bonusObjIndex);
    }
    else {
        gf_PauseUnpauseBonusObjective(false, lv_bonusObjIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveGuardian1Disabled_Init () {
    gt_BonusObjectiveGuardian1Disabled = TriggerCreate("gt_BonusObjectiveGuardian1Disabled_Func");
    TriggerAddEventUnitBehaviorChange(gt_BonusObjectiveGuardian1Disabled, UnitRefFromVariable("gv_bonusObjectiveGuardianConstruct[1]"), "CODConstructDisable", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_BonusObjectiveGuardian1Disabled, UnitRefFromVariable("gv_bonusObjectiveGuardianConstruct[1]"), "CODConstructDisable", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Guardian 2 Disabled
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveGuardian2Disabled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bonusObjIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bonusObjIndex = 2;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_bonusObjectiveGuardianConstruct[2]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        gf_PauseUnpauseBonusObjective(true, lv_bonusObjIndex);
    }
    else {
        gf_PauseUnpauseBonusObjective(false, lv_bonusObjIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveGuardian2Disabled_Init () {
    gt_BonusObjectiveGuardian2Disabled = TriggerCreate("gt_BonusObjectiveGuardian2Disabled_Func");
    TriggerAddEventUnitBehaviorChange(gt_BonusObjectiveGuardian2Disabled, UnitRefFromVariable("gv_bonusObjectiveGuardianConstruct[2]"), "CODConstructDisable", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_BonusObjectiveGuardian2Disabled, UnitRefFromVariable("gv_bonusObjectiveGuardianConstruct[2]"), "CODConstructDisable", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Pause Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectivePauseTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bonusObjIndex;

    // Automatic Variable Declarations
    const int auto5B7CB80C_ae = 2;
    const int auto5B7CB80C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bonusObjIndex = 1;
    for ( ; ( (auto5B7CB80C_ai >= 0 && lv_bonusObjIndex <= auto5B7CB80C_ae) || (auto5B7CB80C_ai < 0 && lv_bonusObjIndex >= auto5B7CB80C_ae) ) ; lv_bonusObjIndex += auto5B7CB80C_ai ) {
        if ((gv_bonusObjectivePauseTimer[lv_bonusObjIndex] == EventTimer())) {
            break;
        }

    }
    if ((UnitIsAlive(gv_bonusObjectiveDropOffMarker[lv_bonusObjIndex]) == true)) {
        gf_PauseUnpauseBonusObjective(false, lv_bonusObjIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectivePauseTimerExpires_Init () {
    gt_BonusObjectivePauseTimerExpires = TriggerCreate("gt_BonusObjectivePauseTimerExpires_Func");
    TriggerAddEventTimer(gt_BonusObjectivePauseTimerExpires, gv_bonusObjectivePauseTimer[1]);
    TriggerAddEventTimer(gt_BonusObjectivePauseTimerExpires, gv_bonusObjectivePauseTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bonus Objective Left-Top
//--------------------------------------------------------------------------------------------------
bool gt_SetupBonusObjectiveLeftTop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_eventUnits;
    unitgroup lv_constructs;
    int lv_bObjIter;

    // Automatic Variable Declarations
    const int auto66C0D84F_ae = gv_c_BonusObjectiveCount;
    const int auto66C0D84F_ai = 1;
    unitgroup autoA69B8CF3_g;
    int autoA69B8CF3_u;
    unit autoA69B8CF3_var;

    // Variable Initialization
    lv_eventUnits = UnitGroupEmpty();
    lv_constructs = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_constructs, UnitFromId(313417303));
    UnitGroupAdd(lv_eventUnits, UnitFromId(661073025));
    UnitGroupAdd(lv_eventUnits, UnitFromId(6694507));
    UnitGroupAdd(lv_eventUnits, UnitFromId(1652565405));
    UnitGroupAdd(lv_eventUnits, UnitFromId(250414530));
    UnitGroupAdd(lv_eventUnits, UnitFromId(1945456139));
    UnitGroupAdd(lv_eventUnits, UnitFromId(305632617));
    lv_bObjIter = 1;
    for ( ; ( (auto66C0D84F_ai >= 0 && lv_bObjIter <= auto66C0D84F_ae) || (auto66C0D84F_ai < 0 && lv_bObjIter >= auto66C0D84F_ae) ) ; lv_bObjIter += auto66C0D84F_ai ) {
        if ((gv_bonusObjectiveOrder[lv_bObjIter] == ge_BonusObjectiveType_LeftTop)) {
            UnitGroupAddUnitGroup(gv_bonusObjectiveTargets[lv_bObjIter], lv_eventUnits);
            gv_bonusObjectiveDetonationRevealArea[lv_bObjIter] = RegionFromId(12);
            gv_bonusObjectiveDropOffMarker[lv_bObjIter] = UnitFromId(2116353095);
            gv_bonusObjectiveDoor[lv_bObjIter] = ActorFromDoodad(DoodadFromId(1277065938));
            gv_bonusObjectiveActiveLight[lv_bObjIter] = DoodadFromId(2131220656);
            gv_bonusObjectivePayloadMoveStart[lv_bObjIter] = PointFromId(253651736);
            gv_bonusObjectivePayloadMoveTo[lv_bObjIter] = PointFromId(902880436);
            gv_bonusObjectiveDropOffMarkerBlocked[lv_bObjIter] = UnitFromId(408736359);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][1] = PointFromId(871991131);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][2] = PointFromId(2045894133);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][3] = PointFromId(1143771264);
        }

    }
    if ((gv_bonusObjectiveOrder[1] != ge_BonusObjectiveType_LeftTop) && (gv_bonusObjectiveOrder[2] != ge_BonusObjectiveType_LeftTop)) {
        autoA69B8CF3_g = lv_constructs;
        autoA69B8CF3_u = UnitGroupCount(autoA69B8CF3_g, c_unitCountAll);
        for (;; autoA69B8CF3_u -= 1) {
            autoA69B8CF3_var = UnitGroupUnitFromEnd(autoA69B8CF3_g, autoA69B8CF3_u);
            if (autoA69B8CF3_var == null) { break; }
            UnitRemove(autoA69B8CF3_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBonusObjectiveLeftTop_Init () {
    gt_SetupBonusObjectiveLeftTop = TriggerCreate("gt_SetupBonusObjectiveLeftTop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bonus Objective Left-Bottom
//--------------------------------------------------------------------------------------------------
bool gt_SetupBonusObjectiveLeftBottom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_eventUnits;
    unitgroup lv_constructs;
    int lv_bObjIter;

    // Automatic Variable Declarations
    const int auto1DBA2ABB_ae = gv_c_BonusObjectiveCount;
    const int auto1DBA2ABB_ai = 1;
    unitgroup auto457B304A_g;
    int auto457B304A_u;
    unit auto457B304A_var;

    // Variable Initialization
    lv_eventUnits = UnitGroupEmpty();
    lv_constructs = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_constructs, UnitFromId(1945351366));
    UnitGroupAdd(lv_eventUnits, UnitFromId(1672442277));
    UnitGroupAdd(lv_eventUnits, UnitFromId(1887110128));
    lv_bObjIter = 1;
    for ( ; ( (auto1DBA2ABB_ai >= 0 && lv_bObjIter <= auto1DBA2ABB_ae) || (auto1DBA2ABB_ai < 0 && lv_bObjIter >= auto1DBA2ABB_ae) ) ; lv_bObjIter += auto1DBA2ABB_ai ) {
        if ((gv_bonusObjectiveOrder[lv_bObjIter] == ge_BonusObjectiveType_LeftBottom)) {
            UnitGroupAddUnitGroup(gv_bonusObjectiveTargets[lv_bObjIter], lv_eventUnits);
            gv_bonusObjectiveDetonationRevealArea[lv_bObjIter] = RegionFromId(15);
            gv_bonusObjectiveDropOffMarker[lv_bObjIter] = UnitFromId(1798970495);
            gv_bonusObjectiveDoor[lv_bObjIter] = ActorFromDoodad(DoodadFromId(1601962625));
            gv_bonusObjectiveActiveLight[lv_bObjIter] = DoodadFromId(990198938);
            gv_bonusObjectivePayloadMoveStart[lv_bObjIter] = PointFromId(1982968010);
            gv_bonusObjectivePayloadMoveTo[lv_bObjIter] = PointFromId(574243525);
            gv_bonusObjectiveDropOffMarkerBlocked[lv_bObjIter] = UnitFromId(281071236);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][1] = PointFromId(1854715778);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][2] = PointFromId(236948814);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][3] = PointFromId(1900448442);
        }

    }
    if ((gv_bonusObjectiveOrder[1] != ge_BonusObjectiveType_LeftBottom) && (gv_bonusObjectiveOrder[2] != ge_BonusObjectiveType_LeftBottom)) {
        auto457B304A_g = lv_constructs;
        auto457B304A_u = UnitGroupCount(auto457B304A_g, c_unitCountAll);
        for (;; auto457B304A_u -= 1) {
            auto457B304A_var = UnitGroupUnitFromEnd(auto457B304A_g, auto457B304A_u);
            if (auto457B304A_var == null) { break; }
            UnitRemove(auto457B304A_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBonusObjectiveLeftBottom_Init () {
    gt_SetupBonusObjectiveLeftBottom = TriggerCreate("gt_SetupBonusObjectiveLeftBottom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bonus Objective Right-Top
//--------------------------------------------------------------------------------------------------
bool gt_SetupBonusObjectiveRightTop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_eventUnits;
    unitgroup lv_constructs;
    int lv_bObjIter;

    // Automatic Variable Declarations
    const int autoF64731D4_ae = gv_c_BonusObjectiveCount;
    const int autoF64731D4_ai = 1;
    unitgroup autoA8551A4F_g;
    int autoA8551A4F_u;
    unit autoA8551A4F_var;

    // Variable Initialization
    lv_eventUnits = UnitGroupEmpty();
    lv_constructs = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_constructs, UnitFromId(311683063));
    UnitGroupAdd(lv_eventUnits, UnitFromId(26820201));
    UnitGroupAdd(lv_eventUnits, UnitFromId(579203109));
    UnitGroupAdd(lv_eventUnits, UnitFromId(1137862045));
    UnitGroupAdd(lv_eventUnits, UnitFromId(1047869046));
    lv_bObjIter = 1;
    for ( ; ( (autoF64731D4_ai >= 0 && lv_bObjIter <= autoF64731D4_ae) || (autoF64731D4_ai < 0 && lv_bObjIter >= autoF64731D4_ae) ) ; lv_bObjIter += autoF64731D4_ai ) {
        if ((gv_bonusObjectiveOrder[lv_bObjIter] == ge_BonusObjectiveType_RightTop)) {
            UnitGroupAddUnitGroup(gv_bonusObjectiveTargets[lv_bObjIter], lv_eventUnits);
            gv_bonusObjectiveDetonationRevealArea[lv_bObjIter] = RegionFromId(13);
            gv_bonusObjectiveDropOffMarker[lv_bObjIter] = UnitFromId(1816788896);
            gv_bonusObjectiveDoor[lv_bObjIter] = ActorFromDoodad(DoodadFromId(1825108389));
            gv_bonusObjectiveActiveLight[lv_bObjIter] = DoodadFromId(376339269);
            gv_bonusObjectivePayloadMoveStart[lv_bObjIter] = PointFromId(1931302770);
            gv_bonusObjectivePayloadMoveTo[lv_bObjIter] = PointFromId(1382499960);
            gv_bonusObjectiveDropOffMarkerBlocked[lv_bObjIter] = UnitFromId(457036022);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][1] = PointFromId(641543438);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][2] = PointFromId(1117318019);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][3] = PointFromId(1534655139);
        }

    }
    if ((gv_bonusObjectiveOrder[1] != ge_BonusObjectiveType_RightTop) && (gv_bonusObjectiveOrder[2] != ge_BonusObjectiveType_RightTop)) {
        autoA8551A4F_g = lv_constructs;
        autoA8551A4F_u = UnitGroupCount(autoA8551A4F_g, c_unitCountAll);
        for (;; autoA8551A4F_u -= 1) {
            autoA8551A4F_var = UnitGroupUnitFromEnd(autoA8551A4F_g, autoA8551A4F_u);
            if (autoA8551A4F_var == null) { break; }
            UnitRemove(autoA8551A4F_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBonusObjectiveRightTop_Init () {
    gt_SetupBonusObjectiveRightTop = TriggerCreate("gt_SetupBonusObjectiveRightTop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bonus Objective Right-Bottom
//--------------------------------------------------------------------------------------------------
bool gt_SetupBonusObjectiveRightBottom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_eventUnits;
    unitgroup lv_constructs;
    int lv_bObjIter;

    // Automatic Variable Declarations
    const int auto511F05B3_ae = gv_c_BonusObjectiveCount;
    const int auto511F05B3_ai = 1;
    unitgroup auto77E5D987_g;
    int auto77E5D987_u;
    unit auto77E5D987_var;

    // Variable Initialization
    lv_eventUnits = UnitGroupEmpty();
    lv_constructs = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_constructs, UnitFromId(200910999));
    UnitGroupAdd(lv_eventUnits, UnitFromId(1077814173));
    UnitGroupAdd(lv_eventUnits, UnitFromId(704887053));
    lv_bObjIter = 1;
    for ( ; ( (auto511F05B3_ai >= 0 && lv_bObjIter <= auto511F05B3_ae) || (auto511F05B3_ai < 0 && lv_bObjIter >= auto511F05B3_ae) ) ; lv_bObjIter += auto511F05B3_ai ) {
        if ((gv_bonusObjectiveOrder[lv_bObjIter] == ge_BonusObjectiveType_RightBottom)) {
            UnitGroupAddUnitGroup(gv_bonusObjectiveTargets[lv_bObjIter], lv_eventUnits);
            gv_bonusObjectiveDetonationRevealArea[lv_bObjIter] = RegionFromId(14);
            gv_bonusObjectiveDropOffMarker[lv_bObjIter] = UnitFromId(789750101);
            gv_bonusObjectiveDoor[lv_bObjIter] = ActorFromDoodad(DoodadFromId(1939283169));
            gv_bonusObjectiveActiveLight[lv_bObjIter] = DoodadFromId(565475776);
            gv_bonusObjectivePayloadMoveStart[lv_bObjIter] = PointFromId(1813357603);
            gv_bonusObjectivePayloadMoveTo[lv_bObjIter] = PointFromId(476815607);
            gv_bonusObjectiveDropOffMarkerBlocked[lv_bObjIter] = UnitFromId(852952922);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][1] = PointFromId(113528573);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][2] = PointFromId(1765461118);
            gv_bonusObjectiveExplosionPoint[lv_bObjIter][3] = PointFromId(189468270);
        }

    }
    if ((gv_bonusObjectiveOrder[1] != ge_BonusObjectiveType_RightBottom) && (gv_bonusObjectiveOrder[2] != ge_BonusObjectiveType_RightBottom)) {
        auto77E5D987_g = lv_constructs;
        auto77E5D987_u = UnitGroupCount(auto77E5D987_g, c_unitCountAll);
        for (;; auto77E5D987_u -= 1) {
            auto77E5D987_var = UnitGroupUnitFromEnd(auto77E5D987_g, auto77E5D987_u);
            if (auto77E5D987_var == null) { break; }
            UnitRemove(auto77E5D987_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBonusObjectiveRightBottom_Init () {
    gt_SetupBonusObjectiveRightBottom = TriggerCreate("gt_SetupBonusObjectiveRightBottom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - New Objective Active Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionNewObjectiveActiveQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2130A979_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_payloadDetonating[gv_pLAYER_01_USER] == false) && (gv_payloadDetonating[gv_pLAYER_02_USER] == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gf_ActiveObjective() != 1) && (RandomInt(0, 4) == 0)) {
        libCOMI_gf_SendMissionTransmission("ObjectiveNewOtherCoD", true, -1);
    }
    else {
        auto2130A979_val = gv_missionObjectiveOrder[gf_ActiveObjective()];
        if (auto2130A979_val == ge_MissionObjectives_Objective1HybridFacility) {
            libCOMI_gf_SendMissionTransmission("ObjectiveNewNorthCoD", true, -1);
        }
        else if (auto2130A979_val == ge_MissionObjectives_Objective2XenonReactor) {
            libCOMI_gf_SendMissionTransmission("ObjectiveNewWestCoD", true, -1);
        }
        else if (auto2130A979_val == ge_MissionObjectives_Objective3ResourceStockpile) {
            libCOMI_gf_SendMissionTransmission("ObjectiveNewEastCoD", true, -1);
        }
        else if (auto2130A979_val == ge_MissionObjectives_Objective4VespeneRefinery) {
            libCOMI_gf_SendMissionTransmission("ObjectiveNewSouthCoD", true, -1);
        }
        else if (auto2130A979_val == ge_MissionObjectives_Objective5TerrazineExtractors) {
            libCOMI_gf_SendMissionTransmission("ObjectiveNewSouthCoD", true, -1);
        }
        else {
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionNewObjectiveActiveQ_Init () {
    gt_TransmissionNewObjectiveActiveQ = TriggerCreate("gt_TransmissionNewObjectiveActiveQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Fuse Starts Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFuseStartsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ObjectiveFuseCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFuseStartsQ_Init () {
    gt_TransmissionFuseStartsQ = TriggerCreate("gt_TransmissionFuseStartsQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Payload Delivered Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPayloadDeliveredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ObjectivePayloadSingleCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPayloadDeliveredQ_Init () {
    gt_TransmissionPayloadDeliveredQ = TriggerCreate("gt_TransmissionPayloadDeliveredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Objective Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionObjectiveCompleteQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_objectiveDestroyed;

    // Automatic Variable Declarations
    int auto3D1FEE40_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_objectiveDestroyed = gf_ActiveObjective();
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((RandomInt(0, 4) > 1)) {
        libCOMI_gf_SendMissionTransmission("ObjectiveCompleteCoD", true, -1);
    }
    else {
        auto3D1FEE40_val = lv_objectiveDestroyed;
        if (auto3D1FEE40_val == 1) {
            libCOMI_gf_SendMissionTransmission("ObjectiveProgress1CoD", true, -1);
        }
        else if (auto3D1FEE40_val == 2) {
            libCOMI_gf_SendMissionTransmission("ObjectiveProgress2CoD", true, -1);
        }
        else if (auto3D1FEE40_val == 3) {
            libCOMI_gf_SendMissionTransmission("ObjectiveProgress3CoD", true, -1);
        }
        else {
        }
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionObjectiveCompleteQ_Init () {
    gt_TransmissionObjectiveCompleteQ = TriggerCreate("gt_TransmissionObjectiveCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Timer Below 3 mins Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTimerBelow3minsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ObjectiveFailReminderCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTimerBelow3minsQ_Init () {
    gt_TransmissionTimerBelow3minsQ = TriggerCreate("gt_TransmissionTimerBelow3minsQ_Func");
    TriggerAddEventTimer(gt_TransmissionTimerBelow3minsQ, gv_missionFailureReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Timer Below 1.5 mins Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTimerBelow15minsQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ObjectiveFailImminentCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTimerBelow15minsQ_Init () {
    gt_TransmissionTimerBelow15minsQ = TriggerCreate("gt_TransmissionTimerBelow15minsQ_Func");
    TriggerAddEventTimer(gt_TransmissionTimerBelow15minsQ, gv_missionFailureCriticalTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Payload Ready Both Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionPayloadReadyBothQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_transmissionBothPayloadsVOPlayed = true;
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PayloadBothReadyCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionPayloadReadyBothQ_Init () {
    gt_TransmissionPayloadReadyBothQ = TriggerCreate("gt_TransmissionPayloadReadyBothQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Both Payloads Delivered Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBothPayloadsDeliveredQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ObjectivePayloadBothCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBothPayloadsDeliveredQ_Init () {
    gt_TransmissionBothPayloadsDeliveredQ = TriggerCreate("gt_TransmissionBothPayloadsDeliveredQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Special Wave Spawn Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionSpecialWaveSpawnQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PayloadAttackWaveCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionSpecialWaveSpawnQ_Init () {
    gt_TransmissionSpecialWaveSpawnQ = TriggerCreate("gt_TransmissionSpecialWaveSpawnQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto40ED9FBF_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    if ((gv_transmissionBonusObjectiveSelection == -1)) {
        gv_transmissionBonusObjectiveSelection = RandomInt(0, 2);
    }
    else {
        if (gv_transmissionBonusObjectiveSelection >= 2) {
            gv_transmissionBonusObjectiveSelection = 0;
        }
        else {
            gv_transmissionBonusObjectiveSelection = gv_transmissionBonusObjectiveSelection + 1;
        }
    }
    auto40ED9FBF_val = gv_transmissionBonusObjectiveSelection;
    if (auto40ED9FBF_val == 0) {
        libCOMI_gf_SendMissionTransmission("BonusIntro1CoD", true, -1);
    }
    else if (auto40ED9FBF_val == 1) {
        libCOMI_gf_SendMissionTransmission("BonusIntro2CoD", true, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("BonusIntro3CoD", true, -1);
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveIntroQ_Init () {
    gt_TransmissionBonusObjectiveIntroQ = TriggerCreate("gt_TransmissionBonusObjectiveIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Reminder Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveReminderQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusReminderCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveReminderQ_Init () {
    gt_TransmissionBonusObjectiveReminderQ = TriggerCreate("gt_TransmissionBonusObjectiveReminderQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Complete Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveCompleteQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_transmissionRequestTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_transmissionRequestTime) < 5.0)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("BonusObjectiveSuccess", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(gv_transmissionWaitTime, c_timeGame);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveCompleteQ_Init () {
    gt_TransmissionBonusObjectiveCompleteQ = TriggerCreate("gt_TransmissionBonusObjectiveCompleteQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Bonus Objective Failed Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveFailedQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusFailCoD", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(gv_transmissionWaitTime, c_timeGame);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveFailedQ_Init () {
    gt_TransmissionBonusObjectiveFailedQ = TriggerCreate("gt_TransmissionBonusObjectiveFailedQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - First Construct Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionFirstConstructQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gatekeeper;
    unitgroup lv_nearbyEnemies;

    // Automatic Variable Declarations
    unitgroup auto6BC49D87_g;
    int auto6BC49D87_u;
    unit auto6BC49D87_var;

    // Variable Initialization
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6BC49D87_g = gv_allConstructs;
    auto6BC49D87_u = UnitGroupCount(auto6BC49D87_g, c_unitCountAll);
    for (;; auto6BC49D87_u -= 1) {
        auto6BC49D87_var = UnitGroupUnitFromEnd(auto6BC49D87_g, auto6BC49D87_u);
        if (auto6BC49D87_var == null) { break; }
        lv_nearbyEnemies = UnitGroupAlliance(UnitGetOwner(auto6BC49D87_var), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(auto6BC49D87_var), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
            lv_gatekeeper = auto6BC49D87_var;
            gv_constructIntroPlayed = true;
            TriggerQueueEnter();
            if ((UnitIsAlive(lv_gatekeeper) == true)) {
                libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingWarning", UnitGetPosition(lv_gatekeeper), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0);
                libCOMI_gf_ShareVisionofUnitCoop(lv_gatekeeper, true, gv_pLAYER_01_USER);
                libCOMI_gf_ShareVisionofUnitCoop(lv_gatekeeper, true, gv_pLAYER_02_USER);
            }

            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("ConstructFirstCoD", true, -1);
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
            Wait(gv_transmissionWaitTime, c_timeGame);
            TriggerQueueExit();
            if ((UnitIsAlive(lv_gatekeeper) == true)) {
                libCOMI_gf_ShareVisionofUnitCoop(lv_gatekeeper, false, gv_pLAYER_01_USER);
                libCOMI_gf_ShareVisionofUnitCoop(lv_gatekeeper, false, gv_pLAYER_02_USER);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionFirstConstructQ_Init () {
    gt_TransmissionFirstConstructQ = TriggerCreate("gt_TransmissionFirstConstructQ_Func");
    TriggerEnable(gt_TransmissionFirstConstructQ, false);
    TriggerAddEventTimePeriodic(gt_TransmissionFirstConstructQ, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Units die to Construct Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionUnitsdietoConstructQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;
    playergroup lv_ownerOfDeadUnit;
    bool lv_transmissionPlayed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ownerOfDeadUnit = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_constructIntroPlayed == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == gv_c_GateKeepers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_transmissionRequestTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_transmissionRequestTime) < 2.0)) {
        lv_transmissionPlayed = true;
        lv_ownerOfDeadUnit = PlayerGroupSingle(EventPlayer());
        libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech, lv_ownerOfDeadUnit);
        libCOMI_gf_SendSplitMissionTransmission("ConstructKillingStuffCoD", true, EventPlayer(), -1);
        libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game, lv_ownerOfDeadUnit);
        Wait(gv_transmissionWaitTime, c_timeGame);
    }
    else {
        lv_transmissionPlayed = false;
    }
    TriggerQueueExit();
    if ((lv_transmissionPlayed == true)) {
        Wait(120.0, c_timeGame);
    }
    else {
        Wait(20.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionUnitsdietoConstructQ_Init () {
    gt_TransmissionUnitsdietoConstructQ = TriggerCreate("gt_TransmissionUnitsdietoConstructQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionUnitsdietoConstructQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission - Construct dies Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionConstructdiesQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_transmissionRequestTime;
    bool lv_transmissionPlayed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_c_GateKeepers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_transmissionRequestTime = GameGetMissionTime();
    TriggerQueueEnter();
    if (((GameGetMissionTime() - lv_transmissionRequestTime) < 5.0)) {
        lv_transmissionPlayed = true;
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ConstructDestroyedCoD", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(gv_transmissionWaitTime, c_timeGame);
    }
    else {
        lv_transmissionPlayed = false;
    }
    TriggerQueueExit();
    if ((lv_transmissionPlayed == true)) {
        Wait(120.0, c_timeGame);
    }
    else {
        Wait(20.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionConstructdiesQ_Init () {
    gt_TransmissionConstructdiesQ = TriggerCreate("gt_TransmissionConstructdiesQ_Func");
    TriggerAddEventUnitDied(gt_TransmissionConstructdiesQ, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto97424429_val;
    int auto11BC239D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto97424429_val = PlayerRace(gv_pLAYER_03_ENEMY);
    if (auto97424429_val == "Zerg") {
        libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_ENEMY_DropPods, "CradleOfDeath Zerg");
        libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_ENEMY_DropPods, "CradleOfDeath Zerg");
    }
    else if (auto97424429_val == "Prot") {
        libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_ENEMY_DropPods, "CradleOfDeath Protoss");
        libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_ENEMY_DropPods, "CradleOfDeath Protoss");
    }
    else if (auto97424429_val == "Terr") {
        libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_ENEMY_DropPods, "CradleOfDeath Terran");
        libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_ENEMY_DropPods, "CradleOfDeath Terran");
    }
    else {
        auto11BC239D_val = RandomInt(1, 3);
        if (auto11BC239D_val == 1) {
            libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_ENEMY_DropPods, "CradleOfDeath Zerg");
            libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_ENEMY_DropPods, "CradleOfDeath Zerg");
        }
        else if (auto11BC239D_val == 2) {
            libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_ENEMY_DropPods, "CradleOfDeath Protoss");
            libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_ENEMY_DropPods, "CradleOfDeath Protoss");
        }
        else if (auto11BC239D_val == 3) {
            libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_05_ENEMY_DropPods, "CradleOfDeath Terran");
            libCOMI_gf_StartCoopMissionMechanicAI(gv_pLAYER_06_ENEMY_DropPods, "CradleOfDeath Terran");
        }
        else {
        }
    }
    AICampaignStart(gv_pLAYER_05_ENEMY_DropPods);
    AICampaignStart(gv_pLAYER_06_ENEMY_DropPods);
    TriggerExecute(gt_AIAttackWaveSequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaveSequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_attackWaveEvent[1], (4.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[2], (6.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[3], (9.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[4], (12.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[5], (15.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[6], (18.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[7], (21.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[8], (25.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[9], (29.0 * 60.0), false, c_timeGame);
    TimerStart(gv_attackWaveEvent[10], (33.0 * 60.0), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaveSequence_Init () {
    gt_AIAttackWaveSequence = TriggerCreate("gt_AIAttackWaveSequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_AddAttackForceWaypoint(gf_AttackWaveWaypoint(), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
    TriggerAddEventTimer(gt_AttackWave01, gv_attackWaveEvent[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_AddAttackForceWaypoint(gf_AttackWaveWaypoint(), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
    TriggerAddEventTimer(gt_AttackWave02, gv_attackWaveEvent[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackPathWaypoint;
    point lv_attackSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
    TriggerAddEventTimer(gt_AttackWave03, gv_attackWaveEvent[3]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackPathWaypoint;
    point lv_attackSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    lv_attackSpawn = gf_AttackWaveSpawnPoint();
    lv_attackPathWaypoint = gf_AttackWaveWaypoint();
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
    TriggerAddEventTimer(gt_AttackWave04, gv_attackWaveEvent[4]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackPathWaypoint;
    point lv_attackSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_01_USER) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_02_USER) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_attackSpawn = gf_AttackWaveSpawnPoint();
    lv_attackPathWaypoint = gf_AttackWaveWaypoint();
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
    TriggerAddEventTimer(gt_AttackWave05, gv_attackWaveEvent[5]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
    TriggerAddEventTimer(gt_AttackWave06, gv_attackWaveEvent[6]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackPathWaypoint;
    point lv_attackSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    lv_attackSpawn = gf_AttackWaveSpawnPoint();
    if (((lv_attackSpawn == PointFromId(2049710523)) || (lv_attackSpawn == PointFromId(1063757218)))) {
        lv_attackPathWaypoint = gf_AttackWaveWaypoint();
    }
    else {
        lv_attackPathWaypoint = PointFromId(249);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
    TriggerAddEventTimer(gt_AttackWave07, gv_attackWaveEvent[7]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackPathWaypoint;
    point lv_attackSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    lv_attackSpawn = gf_AttackWaveSpawnPoint();
    if (((lv_attackSpawn == PointFromId(2049710523)) || (lv_attackSpawn == PointFromId(1063757218)))) {
        lv_attackPathWaypoint = gf_AttackWaveWaypoint();
    }
    else {
        lv_attackPathWaypoint = PointFromId(249);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave08_Init () {
    gt_AttackWave08 = TriggerCreate("gt_AttackWave08_Func");
    TriggerAddEventTimer(gt_AttackWave08, gv_attackWaveEvent[8]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 09
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave09_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    point lv_attackPathWaypoint;
    point lv_attackSpawn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    lv_attackSpawn = gf_AttackWaveSpawnPoint();
    if (((lv_attackSpawn == PointFromId(2049710523)) || (lv_attackSpawn == PointFromId(1063757218)))) {
        lv_attackPathWaypoint = gf_AttackWaveWaypoint();
    }
    else {
        lv_attackPathWaypoint = PointFromId(249);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PlayerStartLocation(gv_pLAYER_01_USER));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PlayerStartLocation(gv_pLAYER_02_USER));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawnPoint(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave09_Init () {
    gt_AttackWave09 = TriggerCreate("gt_AttackWave09_Func");
    TriggerAddEventTimer(gt_AttackWave09, gv_attackWaveEvent[9]);
    TriggerAddEventTimer(gt_AttackWave09, gv_attackWaveEvent[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ObjectiveDestroyPrimaryObjectiveFailed(gf_ActiveObjective());
    TriggerExecute(gt_ObjectiveDontLetTimerExpireFailed, true, false);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatCoD", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/1C4D9388"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoFromId(602148128), 0.0);
    libCOMI_gf_ApplyCameraForAllPlayers(CameraInfoFromId(942499523), 6.0);
    UnitSetFacing(UnitFromId(672745750), 240.0, 0.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "DesertEnergyCannon", "StationaryTurningRate", UnitGetOwner(UnitFromId(672745750)), "10");
    CatalogFieldValueSet(c_gameCatalogUnit, "DesertEnergyCannon", "TurningRate", UnitGetOwner(UnitFromId(672745750)), "10");
    SoundPlayForPlayer(SoundLink("COD_Event_CS_End_Defeat", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.01, c_timeGame);
    UnitIssueOrder(UnitFromId(672745750), OrderTargetingPoint(AbilityCommand("CoopTurnToAbility", 0), PointFromId(1362229481)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(672745750)), c_animNameDefault, "Attack", c_animFlagPlayForever, c_animTimeDefault);
    Wait(0.15, c_timeGame);
    CinematicFade(false, 2.0, c_fadeStyleExponential, Color(95.69, 95.69, 95.69), 0.0, true);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Target Sectors Destroyed Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTargetSectorsDestroyedCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_victoryRemoveUnits;

    // Automatic Variable Declarations
    playergroup autoAC872B8C_g;
    int autoAC872B8C_var;
    unitgroup autoE676DE65_g;
    int autoE676DE65_u;
    unit autoE676DE65_var;

    // Variable Initialization
    lv_victoryRemoveUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_MapEnds, true, false);
    TriggerExecute(gt_ObjectiveDontLetTimerExpireComplete, true, true);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    autoAC872B8C_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoAC872B8C_var = -1;
    while (true) {
        autoAC872B8C_var = PlayerGroupNextPlayer(autoAC872B8C_g, autoAC872B8C_var);
        if (autoAC872B8C_var < 0) { break; }
        UnitGroupAddUnitGroup(lv_victoryRemoveUnits, UnitGroup(null, autoAC872B8C_var, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    }
    autoE676DE65_g = lv_victoryRemoveUnits;
    autoE676DE65_u = UnitGroupCount(autoE676DE65_g, c_unitCountAll);
    for (;; autoE676DE65_u -= 1) {
        autoE676DE65_var = UnitGroupUnitFromEnd(autoE676DE65_g, autoE676DE65_u);
        if (autoE676DE65_var == null) { break; }
        if ((UnitGetType(autoE676DE65_var) != "CODFlatbedTruck")) {
            UnitRemove(autoE676DE65_var);
        }

    }
    Wait(0.5, c_timeGame);
    TriggerExecute(gv_victoryCameraMove, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SendVictoryTransmission("VictoryCoD");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/D1A7B207"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTargetSectorsDestroyedCompleted_Init () {
    gt_VictoryTargetSectorsDestroyedCompleted = TriggerCreate("gt_VictoryTargetSectorsDestroyedCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Camera Move (Vespene)
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCameraMoveVespene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIter;

    // Automatic Variable Declarations
    playergroup auto902AB7B7_g;
    playergroup auto13CDC448_g;
    unitgroup auto0AC57A29_g;
    int auto0AC57A29_u;
    unit auto0AC57A29_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto902AB7B7_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto902AB7B7_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        CameraApplyInfo(lv_playerIter, CameraInfoFromId(1071406095), 0.0, 0.0, 0.0, true);
        CameraApplyInfo(lv_playerIter, CameraInfoFromId(635166336), 6.0, -1, 10.0, true);
    }
    Wait(0.6, c_timeGame);
    UnitKill(UnitFromId(1613377534));
    UnitKill(gv_payloadTrucks[gv_pLAYER_01_USER]);
    UnitKill(gv_payloadTrucks[gv_pLAYER_02_USER]);
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "CODPayloadNukeDamage", PointFromId(1444810212));
    auto13CDC448_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto13CDC448_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        CameraShake(lv_playerIter, "Medium", "Earthquake", 1.0, 4.0, 6.0);
    }
    TriggerExecute(gt_VictoryVespeneExplosions01, true, false);
    auto0AC57A29_g = gv_allConstructs;
    auto0AC57A29_u = UnitGroupCount(auto0AC57A29_g, c_unitCountAll);
    for (;; auto0AC57A29_u -= 1) {
        auto0AC57A29_var = UnitGroupUnitFromEnd(auto0AC57A29_g, auto0AC57A29_u);
        if (auto0AC57A29_var == null) { break; }
        UnitKill(auto0AC57A29_var);
    }
    Wait(1.5, c_timeGame);
    UnitKill(UnitFromId(143469842));
    Wait(0.5, c_timeGame);
    UnitKill(UnitFromId(1767693050));
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "CODPayloadNukeDamage", PointFromId(1894047946));
    Wait(0.3, c_timeGame);
    libCOMI_gf_SendActorMessageToDoodadsInRegion(libNtve_gf_Signal("Nuked"), "VespeneTank", RegionFromId(84));
    Wait(0.5, c_timeGame);
    UnitKill(UnitFromId(1142348947));
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_VictoryCameraMoveCannon, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCameraMoveVespene_Init () {
    gt_VictoryCameraMoveVespene = TriggerCreate("gt_VictoryCameraMoveVespene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Camera Move (Terrazine)
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCameraMoveTerrazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIter;

    // Automatic Variable Declarations
    playergroup auto75FADEFA_g;
    playergroup autoB75B553C_g;
    unitgroup autoD7BA2B0B_g;
    int autoD7BA2B0B_u;
    unit autoD7BA2B0B_var;
    unitgroup auto36CF99D6_g;
    int auto36CF99D6_u;
    unit auto36CF99D6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto75FADEFA_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto75FADEFA_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        CameraApplyInfo(lv_playerIter, CameraInfoFromId(2130863280), 0.0, 0.0, 0.0, true);
        CameraApplyInfo(lv_playerIter, CameraInfoFromId(1475838564), 6.0, -1, 10.0, true);
    }
    Wait(0.5, c_timeGame);
    UnitKill(UnitFromId(1393617832));
    UnitKill(UnitFromId(1817822153));
    UnitKill(gv_payloadTrucks[gv_pLAYER_01_USER]);
    UnitKill(gv_payloadTrucks[gv_pLAYER_02_USER]);
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "CODPayloadNukeDamage", PointFromId(1076245603));
    SoundPlayForPlayer(SoundLink("COD_Event_CS_End_VictoryWhales", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(1541679127)), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTime(libNtve_gf_MainActorofUnit(UnitFromId(1541679127)), c_animNameDefault, 7.5, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(504714393)), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTime(libNtve_gf_MainActorofUnit(UnitFromId(504714393)), c_animNameDefault, 6.0, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(690669022)), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTime(libNtve_gf_MainActorofUnit(UnitFromId(690669022)), c_animNameDefault, 5.5, false);
    ActorSend(ActorFromDoodad(DoodadFromId(613669873)), "SetVisibility");
    autoB75B553C_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoB75B553C_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        CameraShake(lv_playerIter, "Medium", "Earthquake", 1.0, 4.0, 5.0);
    }
    TriggerExecute(gt_VictoryTerrazineExplosions01, true, false);
    autoD7BA2B0B_g = gv_allConstructs;
    autoD7BA2B0B_u = UnitGroupCount(autoD7BA2B0B_g, c_unitCountAll);
    for (;; autoD7BA2B0B_u -= 1) {
        autoD7BA2B0B_var = UnitGroupUnitFromEnd(autoD7BA2B0B_g, autoD7BA2B0B_u);
        if (autoD7BA2B0B_var == null) { break; }
        UnitKill(autoD7BA2B0B_var);
    }
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_VictoryTerrazineExplosions02, true, false);
    auto36CF99D6_g = UnitGroup(null, c_playerAny, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto36CF99D6_u = UnitGroupCount(auto36CF99D6_g, c_unitCountAll);
    for (;; auto36CF99D6_u -= 1) {
        auto36CF99D6_var = UnitGroupUnitFromEnd(auto36CF99D6_g, auto36CF99D6_u);
        if (auto36CF99D6_var == null) { break; }
        if ((UnitGetType(auto36CF99D6_var) == "COOPTerrazineTank")) {
            continue;
        }

        UnitKill(auto36CF99D6_var);
    }
    Wait(1.05, c_timeGame);
    PlayerCreateEffectPoint(gv_pLAYER_01_USER, "CODPayloadNukeDamage", PointFromId(889592743));
    Wait(3.3, c_timeGame);
    TriggerExecute(gt_VictoryCameraMoveCannon, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCameraMoveTerrazine_Init () {
    gt_VictoryCameraMoveTerrazine = TriggerCreate("gt_VictoryCameraMoveTerrazine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Camera Move (Cannon)
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCameraMoveCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIter;

    // Automatic Variable Declarations
    playergroup auto53C83517_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(UnitFromId(672745750), 240.0, 0.0);
    Wait(0.05, c_timeGame);
    auto53C83517_g = libCOMI_gf_HumanPlayers();
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto53C83517_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        CameraApplyInfo(lv_playerIter, CameraInfoFromId(1297575793), 0.0, 0.0, 0.0, true);
        CameraApplyInfo(lv_playerIter, CameraInfoFromId(1597483331), 4.5, -1, 10.0, true);
        CameraShake(lv_playerIter, "Medium", "Earthquake", 1.0, 4.0, 4.0);
    }
    SoundPlayForPlayer(SoundLink("COD_Event_CS_End_VictoryCannon", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(1843686743));
    Wait(0.1, c_timeGame);
    gf_CreateExplosionAtPointwithSmoke(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(430209032));
    Wait(0.2, c_timeGame);
    gf_CreateExplosionAtPointwithSmoke(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1753208387));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(260967746));
    UnitKill(UnitFromId(672745750));
    Wait(0.3, c_timeGame);
    gf_CreateExplosionAtPointwithSmoke(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(260967746));
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, PointFromId(1396116467));
    Wait(0.1, c_timeGame);
    gf_CreateExplosionAtPointwithSmoke(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(1013774290));
    Wait(0.2, c_timeGame);
    gf_CreateExplosionAtPointwithSmoke(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, PointFromId(716643868));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCameraMoveCannon_Init () {
    gt_VictoryCameraMoveCannon = TriggerCreate("gt_VictoryCameraMoveCannon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Terrazine Explosions 01
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTerrazineExplosions01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_explosionTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_explosionTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_explosionTimer, 5.0, false, c_timeGame);
    while ((TimerGetRemaining(lv_explosionTimer) > 0.0)) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionFromId(2)));
        Wait(RandomFixed(0.2, 0.4), c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionFromId(2)));
        Wait(RandomFixed(0.2, 0.4), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTerrazineExplosions01_Init () {
    gt_VictoryTerrazineExplosions01 = TriggerCreate("gt_VictoryTerrazineExplosions01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Terrazine Explosions 02
//--------------------------------------------------------------------------------------------------
bool gt_VictoryTerrazineExplosions02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_explosionTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_explosionTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_explosionTimer, 4.0, false, c_timeGame);
    while ((TimerGetRemaining(lv_explosionTimer) > 0.0)) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionFromId(6)));
        Wait(RandomFixed(0.2, 0.4), c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionFromId(6)));
        Wait(RandomFixed(0.2, 0.4), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryTerrazineExplosions02_Init () {
    gt_VictoryTerrazineExplosions02 = TriggerCreate("gt_VictoryTerrazineExplosions02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Vespene Explosions 01
//--------------------------------------------------------------------------------------------------
bool gt_VictoryVespeneExplosions01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_explosionTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_explosionTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_explosionTimer, 5.0, false, c_timeGame);
    while ((TimerGetRemaining(lv_explosionTimer) > 0.0)) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionFromId(9)));
        Wait(RandomFixed(0.05, 0.2), c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionFromId(9)));
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryVespeneExplosions01_Init () {
    gt_VictoryVespeneExplosions01 = TriggerCreate("gt_VictoryVespeneExplosions01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EasterEgg - Horn Honk Play
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggHornHonkPlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.3, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("CarHorn_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(670095415), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EasterEggHornHonkPlay_Init () {
    gt_EasterEggHornHonkPlay = TriggerCreate("gt_EasterEggHornHonkPlay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: EasterEgg - Murloc Sound Play
//--------------------------------------------------------------------------------------------------
bool gt_EasterEggMurlocSoundPlay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.3, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("MurlocAttack", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(670095415), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EasterEggMurlocSoundPlay_Init () {
    gt_EasterEggMurlocSoundPlay = TriggerCreate("gt_EasterEggMurlocSoundPlay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Teleporter Region
//--------------------------------------------------------------------------------------------------
bool gt_UnitEntersTeleporterRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_easterEggActivateReady == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_easterEggTimer) <= 0.0))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_easterEggActivateReady = false;
    if ((gv_easterEggCutscene == c_cutsceneNone)) {
        CutsceneCreateNoPosition("Cutscenes\\TeleporterEasterEgg.SC2Cutscene", PlayerGroupAll(), true);
        gv_easterEggCutscene = CutsceneLastCreated();
    }

    CutsceneGoToBookmark(gv_easterEggCutscene, gv_easterEggScenes[gv_easterEggCurrentScene]);
    SoundPlayAtPointForPlayer(SoundLink("Stalker_Blink", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(670095415), 0.0, 100.0, 0.0);
    if ((gv_easterEggCurrentScene == gv_c_EasterEggMurlocScene)) {
        TriggerExecute(gt_EasterEggMurlocSoundPlay, true, false);
    }
    else if ((gv_easterEggCurrentScene == gv_c_EasterEggCarScene)) {
        TriggerExecute(gt_EasterEggHornHonkPlay, true, false);
    }
    if (gv_easterEggCurrentScene >= gv_c_EasterEggSceneCount) {
        gv_easterEggCurrentScene = 1;
    }
    else {
        gv_easterEggCurrentScene = gv_easterEggCurrentScene + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEntersTeleporterRegion_Init () {
    gt_UnitEntersTeleporterRegion = TriggerCreate("gt_UnitEntersTeleporterRegion_Func");
    TriggerAddEventUnitRegion(gt_UnitEntersTeleporterRegion, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Leaves Teleporter Region
//--------------------------------------------------------------------------------------------------
bool gt_UnitLeavesTeleporterRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_easterEggActivateReady == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) <= 0)) {
        gv_easterEggActivateReady = true;
        TimerStart(gv_easterEggTimer, gv_c_EasterEggDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitLeavesTeleporterRegion_Init () {
    gt_UnitLeavesTeleporterRegion = TriggerCreate("gt_UnitLeavesTeleporterRegion_Func");
    TriggerAddEventUnitRegion(gt_UnitLeavesTeleporterRegion, null, RegionFromId(10), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Don'tLetTimerExpire Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetTimerExpireCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_CradleOfDeath_Primary01");
    gv_objectiveDestroyZergBase = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), -10);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetTimerExpireCreate_Init () {
    gt_ObjectiveDontLetTimerExpireCreate = TriggerCreate("gt_ObjectiveDontLetTimerExpireCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Don'tLetTimerExpire Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetTimerExpireComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontLetTimerExpireCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CradleOfDeath_Primary01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetTimerExpireComplete_Init () {
    gt_ObjectiveDontLetTimerExpireComplete = TriggerCreate("gt_ObjectiveDontLetTimerExpireComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Don'tLetTimerExpire Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetTimerExpireUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDontLetTimerExpireCreate, true, false);
    if ((TimerGetRemaining(gv_countdownUntilMissionFailure) >= (TimerGetDuration(gv_countdownUntilMissionFailure) * 0.25))) {
        TextExpressionSetToken("Param/Expression/73E12E5D", "Time", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_countdownUntilMissionFailure))));
        libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Primary01", TextExpressionAssemble("Param/Expression/73E12E5D"));
    }
    else {
        TextExpressionSetToken("Param/Expression/8C05AE78", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_countdownUntilMissionFailure))), gf_TimerColor(gv_countdownUntilMissionFailure)));
        libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Primary01", TextExpressionAssemble("Param/Expression/8C05AE78"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetTimerExpireUpdate_Init () {
    gt_ObjectiveDontLetTimerExpireUpdate = TriggerCreate("gt_ObjectiveDontLetTimerExpireUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Don'tLetTimerExpire Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDontLetTimerExpireFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDontLetTimerExpireCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CradleOfDeath_Primary01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDontLetTimerExpireFailed_Init () {
    gt_ObjectiveDontLetTimerExpireFailed = TriggerCreate("gt_ObjectiveDontLetTimerExpireFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing01 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing01Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_CradleOfDeath_Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing01Create_Init () {
    gt_ObjectiveDestroyThing01Create = TriggerCreate("gt_ObjectiveDestroyThing01Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing01 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing01Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyThing01Create, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CradleOfDeath_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Bonus01", StringToText(""));
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing01Complete_Init () {
    gt_ObjectiveDestroyThing01Complete = TriggerCreate("gt_ObjectiveDestroyThing01Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing01 Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing01Update_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyThing01Create, true, false);
    if ((TimerGetRemaining(gv_bonusObjectiveDelayTimer[1]) > 0.0)) {
        return true;
    }

    if ((TimerGetRemaining(gv_bonusObjectiveCompletionTimer[1]) >= (TimerGetDuration(gv_bonusObjectiveCompletionTimer[1]) * 0.66))) {
        TextExpressionSetToken("Param/Expression/289BEFE3", "Time", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonusObjectiveCompletionTimer[1]))));
        libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Bonus01", TextExpressionAssemble("Param/Expression/289BEFE3"));
    }
    else {
        TextExpressionSetToken("Param/Expression/666D16B1", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonusObjectiveCompletionTimer[1]))), gf_TimerColor(gv_bonusObjectiveCompletionTimer[1])));
        libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Bonus01", TextExpressionAssemble("Param/Expression/666D16B1"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing01Update_Init () {
    gt_ObjectiveDestroyThing01Update = TriggerCreate("gt_ObjectiveDestroyThing01Update_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing01 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing01Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyThing01Create, true, false);
    TextExpressionSetToken("Param/Expression/74E8B959", "ObjectiveText", libCOMI_gf_MissionObjectiveName("AC_CradleOfDeath_Bonus01"));
    ObjectiveSetName(gv_objectiveRescueStalkers, TextExpressionAssemble("Param/Expression/74E8B959"));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CradleOfDeath_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing01Failed_Init () {
    gt_ObjectiveDestroyThing01Failed = TriggerCreate("gt_ObjectiveDestroyThing01Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing02 Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing02Create_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_CradleOfDeath_Bonus02");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing02Create_Init () {
    gt_ObjectiveDestroyThing02Create = TriggerCreate("gt_ObjectiveDestroyThing02Create_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing02 Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing02Complete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyThing02Create, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CradleOfDeath_Bonus02", libCOMI_ge_MissionObjectiveState_Completed);
    libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Bonus02", StringToText(""));
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing02Complete_Init () {
    gt_ObjectiveDestroyThing02Complete = TriggerCreate("gt_ObjectiveDestroyThing02Complete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing02 Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing02Update_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyThing02Create, true, false);
    if ((TimerGetRemaining(gv_bonusObjectiveDelayTimer[2]) > 0.0)) {
        return true;
    }

    if ((TimerGetRemaining(gv_bonusObjectiveCompletionTimer[2]) >= (TimerGetDuration(gv_bonusObjectiveCompletionTimer[2]) * 0.66))) {
        TextExpressionSetToken("Param/Expression/4EEA9C96", "Time", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonusObjectiveCompletionTimer[2]))));
        libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Bonus02", TextExpressionAssemble("Param/Expression/4EEA9C96"));
    }
    else {
        TextExpressionSetToken("Param/Expression/A75BD0F7", "coloredTime", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bonusObjectiveCompletionTimer[2]))), gf_TimerColor(gv_bonusObjectiveCompletionTimer[2])));
        libCOMI_gf_SetMissionObjectiveCustomText("AC_CradleOfDeath_Bonus02", TextExpressionAssemble("Param/Expression/A75BD0F7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing02Update_Init () {
    gt_ObjectiveDestroyThing02Update = TriggerCreate("gt_ObjectiveDestroyThing02Update_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective DestroyThing02 Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyThing02Failed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyThing02Create, true, false);
    TextExpressionSetToken("Param/Expression/75383A19", "ObjectiveText", libCOMI_gf_MissionObjectiveName("AC_CradleOfDeath_Bonus02"));
    ObjectiveSetName(gv_objectiveRescueStalkers2, TextExpressionAssemble("Param/Expression/75383A19"));
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_CradleOfDeath_Bonus02", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyThing02Failed_Init () {
    gt_ObjectiveDestroyThing02Failed = TriggerCreate("gt_ObjectiveDestroyThing02Failed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init03LoadingComplete_Init();
    gt_Init05Units_Init();
    gt_Init05bTargetLocations_Init();
    gt_Init05cDoodadVisibility_Init();
    gt_Init05dBranchBullies_Init();
    gt_Init08Difficulties_Init();
    gt_DebugPauseUnpauseTimer_Init();
    gt_StartGameQ_Init();
    gt_UpdateObjectiveTimer_Init();
    gt_EvacuateAreaCountdownUI_Init();
    gt_CreateUIforExplosionWarning_Init();
    gt_Location1Destruction_Init();
    gt_Location2Destruction_Init();
    gt_Location3Destruction_Init();
    gt_Location4Destruction_Init();
    gt_Location5Destruction_Init();
    gt_PayloadDropOffConstructDestroyed_Init();
    gt_PayloadBuilt_Init();
    gt_PayloadAttacked_Init();
    gt_PlayersLosePayload_Init();
    gt_MapEnds_Init();
    gt__1BombExplode_Init();
    gt__2StartObjective_Init();
    gt__2PayloadEvent1_Init();
    gt__2PayloadEvent2_Init();
    gt__2DropPodEventA_Init();
    gt__2DropPodEventB_Init();
    gt__2BombExplode_Init();
    gt__3StartObjective_Init();
    gt__3PayloadEvent1_Init();
    gt__3PayloadEvent2_Init();
    gt__3PayloadEvent3_Init();
    gt__3BombExplode_Init();
    gt__3DropPodEventA_Init();
    gt__3DropPodEventB_Init();
    gt__3DropPodEventC_Init();
    gt__4StartObjective_Init();
    gt__4PayloadEvent1_Init();
    gt__4PayloadEvent2_Init();
    gt__4PayloadEvent3_Init();
    gt__4DropPodEventA_Init();
    gt__4DropPodEventB_Init();
    gt__4DropPodEventC_Init();
    gt_InitializeBonusObjectiveOrder_Init();
    gt_StartBonusObjective01_Init();
    gt_StartBonusObjective02_Init();
    gt_BonusObjectiveGuardian1Killed_Init();
    gt_BonusObjectiveGuardian2Killed_Init();
    gt_BonusObjectiveGuardian1Disabled_Init();
    gt_BonusObjectiveGuardian2Disabled_Init();
    gt_BonusObjectivePauseTimerExpires_Init();
    gt_SetupBonusObjectiveLeftTop_Init();
    gt_SetupBonusObjectiveLeftBottom_Init();
    gt_SetupBonusObjectiveRightTop_Init();
    gt_SetupBonusObjectiveRightBottom_Init();
    gt_TransmissionNewObjectiveActiveQ_Init();
    gt_TransmissionFuseStartsQ_Init();
    gt_TransmissionPayloadDeliveredQ_Init();
    gt_TransmissionObjectiveCompleteQ_Init();
    gt_TransmissionTimerBelow3minsQ_Init();
    gt_TransmissionTimerBelow15minsQ_Init();
    gt_TransmissionPayloadReadyBothQ_Init();
    gt_TransmissionBothPayloadsDeliveredQ_Init();
    gt_TransmissionSpecialWaveSpawnQ_Init();
    gt_TransmissionBonusObjectiveIntroQ_Init();
    gt_TransmissionBonusObjectiveReminderQ_Init();
    gt_TransmissionBonusObjectiveCompleteQ_Init();
    gt_TransmissionBonusObjectiveFailedQ_Init();
    gt_TransmissionFirstConstructQ_Init();
    gt_TransmissionUnitsdietoConstructQ_Init();
    gt_TransmissionConstructdiesQ_Init();
    gt_StartAI_Init();
    gt_EnemyAttackingQ_Init();
    gt_AIAttackWaveSequence_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_AttackWave08_Init();
    gt_AttackWave09_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictoryTargetSectorsDestroyedCompleted_Init();
    gt_VictoryCameraMoveVespene_Init();
    gt_VictoryCameraMoveTerrazine_Init();
    gt_VictoryCameraMoveCannon_Init();
    gt_VictoryTerrazineExplosions01_Init();
    gt_VictoryTerrazineExplosions02_Init();
    gt_VictoryVespeneExplosions01_Init();
    gt_EasterEggHornHonkPlay_Init();
    gt_EasterEggMurlocSoundPlay_Init();
    gt_UnitEntersTeleporterRegion_Init();
    gt_UnitLeavesTeleporterRegion_Init();
    gt_ObjectiveDontLetTimerExpireCreate_Init();
    gt_ObjectiveDontLetTimerExpireComplete_Init();
    gt_ObjectiveDontLetTimerExpireUpdate_Init();
    gt_ObjectiveDontLetTimerExpireFailed_Init();
    gt_ObjectiveDestroyThing01Create_Init();
    gt_ObjectiveDestroyThing01Complete_Init();
    gt_ObjectiveDestroyThing01Update_Init();
    gt_ObjectiveDestroyThing01Failed_Init();
    gt_ObjectiveDestroyThing02Create_Init();
    gt_ObjectiveDestroyThing02Complete_Init();
    gt_ObjectiveDestroyThing02Update_Init();
    gt_ObjectiveDestroyThing02Failed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
