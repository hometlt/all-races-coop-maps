//==================================================================================================
// 
// Generated Map Script
// 
// Name:   RTC: 2017 Primal Resurgence
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"
include "aiD3A20346"
include "ai3DF7018A"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_player1 = 1;
const int gv_player2 = 2;
const int gv_player3 = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
playergroup gv_humanGroup;
unitgroup gv_terranwavessouth;
unitgroup gv_terranwavesobjective2;
unit gv_lastcreatedunit2;
unit gv_lastcreatedunit;
unitgroup gv_wave5southunitgroup;
int gv_wave5south;
int gv_primalhive5south;
unitgroup gv_wave5northunitgroup;
int gv_wave5north;
int gv_primalhive5north;
unitgroup gv_wave4farunitgroup;
int gv_wave4far;
int gv_primalhive4far;
unitgroup gv_objective4closeunitgroup;
int gv_wave4close;
int gv_primalhive4close;
unitgroup gv_wave3bottomunitgroup;
int gv_wave3bottom;
int gv_primalhive3bottom;
unitgroup gv_wave3topunitgroup;
int gv_wave3top;
int gv_primalhive3top;
unitgroup gv_wave2unitgroup;
int gv_primalhive2;
int gv_wave2;
unitgroup gv_wave1unitgroup;
int gv_wave1;
int gv_primalhive1;
unit gv_slivanVariable;
int gv_slivanPing;
unitgroup gv_playerUnits;
unitgroup gv_slivanBossCreepers;
unit gv_slivanPathingDummy;
int gv_slivanCreepSpawnIndex;
timer gv_slivanTimer;
unitgroup gv_primalZergAttackers;
int gv_primalHivesremaining;
unitgroup gv_primalHiveUnitGroup;
int gv_objectiveKillPrimalHives;

void InitGlobals () {
    gv_enemyGroup = PlayerGroupEmpty();
    gv_humanGroup = PlayerGroupEmpty();
    gv_terranwavessouth = UnitGroupEmpty();
    gv_terranwavesobjective2 = UnitGroupEmpty();
    gv_wave5southunitgroup = UnitGroupEmpty();
    gv_wave5south = c_invalidPingId;
    gv_primalhive5south = c_invalidPingId;
    gv_wave5northunitgroup = UnitGroupEmpty();
    gv_wave5north = c_invalidPingId;
    gv_primalhive5north = c_invalidPingId;
    gv_wave4farunitgroup = UnitGroupEmpty();
    gv_wave4far = c_invalidPingId;
    gv_primalhive4far = c_invalidPingId;
    gv_objective4closeunitgroup = UnitGroupEmpty();
    gv_wave4close = c_invalidPingId;
    gv_primalhive4close = c_invalidPingId;
    gv_wave3bottomunitgroup = UnitGroupEmpty();
    gv_wave3bottom = c_invalidPingId;
    gv_primalhive3bottom = c_invalidPingId;
    gv_wave3topunitgroup = UnitGroupEmpty();
    gv_wave3top = c_invalidPingId;
    gv_primalhive3top = c_invalidPingId;
    gv_wave2unitgroup = UnitGroupEmpty();
    gv_primalhive2 = c_invalidPingId;
    gv_wave2 = c_invalidPingId;
    gv_wave1unitgroup = UnitGroupEmpty();
    gv_wave1 = c_invalidPingId;
    gv_primalhive1 = c_invalidPingId;
    gv_slivanPing = c_invalidPingId;
    gv_playerUnits = UnitGroupEmpty();
    gv_slivanBossCreepers = UnitGroupEmpty();
    gv_slivanTimer = TimerCreate();
    gv_primalZergAttackers = UnitGroupEmpty();
    gv_primalHiveUnitGroup = UnitGroupEmpty();
    gv_objectiveKillPrimalHives = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AddUnittoPrimalZergAttackers (unit lp_unit, point lp_homepoint);
void gf_SlivanBossCreeperSpawnAddBehavior ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_GroopsAndAllys;
trigger gt_Computerpresets;
trigger gt_Music;
trigger gt_HeroStart;
trigger gt_Settech;
trigger gt_Objective3dies;
trigger gt_Objective4dies;
trigger gt_HammerIntrotransmission;
trigger gt_Scvandbunker2;
trigger gt_Objective1terran2;
trigger gt_StartObjective1terran2;
trigger gt_Scvandbunker;
trigger gt_Objective1terran;
trigger gt_StartObjective1terran;
trigger gt_Stopping5south;
trigger gt_StartObjective5south;
trigger gt_Objective5southinitialisation;
trigger gt_Objective5southping;
trigger gt_Objective5southmasterstart;
trigger gt_Wave5southping;
trigger gt_Wave5southpingdestroy;
trigger gt_Stopping3;
trigger gt_StartObjective3;
trigger gt_Objective1initialisation2;
trigger gt_Objective1ping2;
trigger gt_Objective5northmasterstart;
trigger gt_Wave1ping2;
trigger gt_Wave1pingdestroy3;
trigger gt_Stopping4;
trigger gt_StartObjective4;
trigger gt_Objective1initialisation3;
trigger gt_Objective4farping;
trigger gt_Objective4farmasterstart;
trigger gt_Wave4farping;
trigger gt_Wave4farpingdestroy;
trigger gt_Stopping4close;
trigger gt_StartObjective4close;
trigger gt_Objective4closeinitialisation;
trigger gt_Objective4closeping;
trigger gt_Objective4closemasterstart;
trigger gt_Wave4closeping;
trigger gt_Wave4closepingdestroy;
trigger gt_AiInit;
trigger gt_Stopping3bottom;
trigger gt_StartObjective3bottom;
trigger gt_Objective3bottominitialisation;
trigger gt_Objective3bottomping;
trigger gt_Objective3bottommasterstart;
trigger gt_Wave3bottomping;
trigger gt_Wave3bottompingdestroy;
trigger gt_Stopping3top;
trigger gt_StartObjective3top;
trigger gt_Objective3topinitialisation;
trigger gt_Objective3topping;
trigger gt_Objective3topmasterstart;
trigger gt_Wave3topping;
trigger gt_Wave3toppingdestroy;
trigger gt_Stopping2;
trigger gt_StartObjective2;
trigger gt_Objective2initialisation;
trigger gt_Objective2ping;
trigger gt_Objective2masterstart;
trigger gt_Wave2ping;
trigger gt_Wave1pingdestroy2;
trigger gt_Stopping;
trigger gt_StartObjective1;
trigger gt_Objective1initialisation;
trigger gt_Objective1ping;
trigger gt_Objective1masterstart;
trigger gt_Wave1ping;
trigger gt_Wave1pingdestroy;
trigger gt_GiveSlivanmorehp;
trigger gt_StopSlivanPing;
trigger gt_Slivanping;
trigger gt_Slivanpingifplayerentersregion;
trigger gt_Slivanpingifplayer2entersregion;
trigger gt_Attachplayer1unitstogroup;
trigger gt_Removeplayer1unitsfromgroup;
trigger gt_Attachplayer2unitstogroup;
trigger gt_Removeplayer2unitsfromgroup;
trigger gt_SlivanBossFightController;
trigger gt_SlivanBossCreeperSpawning;
trigger gt_SlivanBossCreepers;
trigger gt_SlivanBossCreeperMovement;
trigger gt_SlivanPathingDummy;
trigger gt_SlivanDies;
trigger gt_PrimalZergAttacks;
trigger gt_SetPrimalHiveunitgroup;
trigger gt_UpdatePrimalHiveremainingvariable;
trigger gt_CreateObjectiveKillPrimalHives;
trigger gt_UpdateObjectiveKillPrimalHives;
trigger gt_CompleteObjectiveKillPrimalHives;
trigger gt_CreateObjectiveKillSlivanJr;
trigger gt_CompleteObjectiveKillSilvanJr;
trigger gt_DefeatBaseLost;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiD3A20346") { aiD3A20346_start(p); }
    if (cai_playerAI[p] == "ai3DF7018A") { ai3DF7018A_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiD3A20346") { aiD3A20346_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai3DF7018A") { ai3DF7018A_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiD3A20346") { return aiD3A20346_getCustomData(p); }
    if (cai_playerAI[p] == "ai3DF7018A") { return ai3DF7018A_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiD3A20346") { return aiD3A20346_getLastWave(p); }
    if (cai_playerAI[p] == "ai3DF7018A") { return ai3DF7018A_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiD3A20346") { aiD3A20346_waves_run(p, target); }
    if (cai_playerAI[p] == "ai3DF7018A") { ai3DF7018A_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiD3A20346") { aiD3A20346_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai3DF7018A") { ai3DF7018A_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiD3A20346") { aiD3A20346_waves_stop(); }
    if (ai == "ai3DF7018A") { ai3DF7018A_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiD3A20346") { aiD3A20346_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai3DF7018A") { ai3DF7018A_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiD3A20346") { aiD3A20346_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai3DF7018A") { ai3DF7018A_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiD3A20346") { return aiD3A20346_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai3DF7018A") { return ai3DF7018A_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiD3A20346") { return aiD3A20346_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai3DF7018A") { return ai3DF7018A_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiD3A20346") { return aiD3A20346_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai3DF7018A") { return ai3DF7018A_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiD3A20346", 3);
    cai_start("ai3DF7018A", 4);
    AICampaignStart(5);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    PlayerGroupAdd(target, 4);
    cai_waves_run(3, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 3);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AddUnittoPrimalZergAttackers (unit lp_unit, point lp_homepoint) {
    // Implementation
    UnitSetCustomValue(lp_unit, 0, PointGetX(lp_homepoint));
    UnitSetCustomValue(lp_unit, 1, PointGetY(lp_homepoint));
    UnitGroupAdd(gv_primalZergAttackers, lp_unit);
}

void gf_SlivanBossCreeperSpawnAddBehavior () {
    int autoA853FC62_val;

    // Implementation
    gv_slivanCreepSpawnIndex += 1;
    if ((gv_slivanCreepSpawnIndex >= 12)) {
        gv_slivanCreepSpawnIndex = 0;
    }

    autoA853FC62_val = gv_slivanCreepSpawnIndex;
    if (autoA853FC62_val == 0) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn00", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 1) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn01", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 2) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn02", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 3) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn03", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 4) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn04", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 5) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn05", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 6) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn06", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 7) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn07", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 8) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn08", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 9) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn09", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 10) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn10", gv_slivanVariable, 1);
    }
    else if (autoA853FC62_val == 11) {
        UnitBehaviorAdd(gv_slivanVariable, "SlivanCreepSpawn11", gv_slivanVariable, 1);
    }
    else {
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Groops And Allys
//--------------------------------------------------------------------------------------------------
bool gt_GroopsAndAllys_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(3, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 70);
    PlayerModifyPropertyInt(5, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 60);
    PlayerGroupAdd(gv_humanGroup, 1);
    PlayerGroupAdd(gv_humanGroup, 2);
    PlayerGroupAdd(gv_humanGroup, 4);
    PlayerGroupAdd(gv_enemyGroup, 3);
    PlayerGroupAdd(gv_enemyGroup, 5);
    libCOMI_gf_SetPlayerGroupAlliance(gv_humanGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libCOMI_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroopsAndAllys_Init () {
    gt_GroopsAndAllys = TriggerCreate("gt_GroopsAndAllys_Func");
    TriggerAddEventMapInit(gt_GroopsAndAllys);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Computer presets
//--------------------------------------------------------------------------------------------------
bool gt_Computerpresets_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(2, c_playerPropSuppliesMade, c_playerPropOperSetTo, 15.0);
    UnitCreate(1, "SlivanCollisionDummy", 0, 3, UnitGetPosition(UnitFromId(1060331887)), 270.0);
    gv_slivanPathingDummy = UnitLastCreated();
    gv_slivanVariable = UnitFromId(1060331887);
    VisRevealArea(3, RegionEntireMap(), 0.0, false);
    VisFillArea(1, RegionFromId(20), c_fillTypeFogged, false);
    VisFillArea(2, RegionFromId(20), c_fillTypeFogged, false);
    PlayerSetState(3, c_playerStateMineralCostIgnored, true);
    PlayerSetState(3, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(3, c_playerStateFoodIgnored, true);
    PlayerSetState(4, c_playerStateMineralCostIgnored, true);
    PlayerSetState(4, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(4, c_playerStateFoodIgnored, true);
    UnitSetPropertyFixed(UnitFromId(1969740981), c_unitPropLife, 1000.0);
    UnitSetPropertyFixed(UnitFromId(1766364198), c_unitPropLife, 1000.0);
    UnitSetPropertyFixed(UnitFromId(1867433159), c_unitPropLife, 1000.0);
    UnitSetPropertyFixed(UnitFromId(1143429473), c_unitPropLife, 1000.0);
    UnitSetPropertyFixed(UnitFromId(1135372562), c_unitPropLife, 2000.0);
    UnitSetPropertyFixed(UnitFromId(1756421337), c_unitPropLife, 2000.0);
    GameTimeOfDaySet("08:00:00");
    GameTimeOfDaySetLength(300.0);
    GameTimeOfDayPause(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Computerpresets_Init () {
    gt_Computerpresets = TriggerCreate("gt_Computerpresets_Func");
    TriggerAddEventMapInit(gt_Computerpresets);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Music
//--------------------------------------------------------------------------------------------------
bool gt_Music_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_untitledVariable001;

    // Variable Initialization
    lv_untitledVariable001 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 1, PointFromId(1157743035));
    UnitGroupAdd(lv_untitledVariable001, UnitLastCreated());
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroupFilterPlayer(lv_untitledVariable001, 1, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "Dance");
    }
    UnitGroupLoopEnd();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundPlayForPlayer(SoundLink("THanson02MusicMain", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Music_Init () {
    gt_Music = TriggerCreate("gt_Music_Func");
    TriggerAddEventKeyPressed(gt_Music, c_playerAny, c_keyNumPad1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Start
//--------------------------------------------------------------------------------------------------
bool gt_HeroStart_Func (bool testConds, bool runActions) {
    playergroup auto49C3100F_g;
    int auto49C3100F_p;
    string auto928F149E_val;

    // Variable Declarations
    int lv_indexPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto49C3100F_g = gv_humanGroup; 
    auto49C3100F_p = 1;
    for ( ; auto49C3100F_p <= PlayerGroupCount(auto49C3100F_g) ; auto49C3100F_p += BoolToInt(lv_indexPlayer == PlayerGroupPlayer(auto49C3100F_g, auto49C3100F_p)) ) {
        lv_indexPlayer = PlayerGroupPlayer(auto49C3100F_g, auto49C3100F_p);
        auto928F149E_val = GameAttributePlayerValue("[bnet:local/0.0/355616]1", lv_indexPlayer);
        if (auto928F149E_val == "0003") {
            PlayerSetCommander(lv_indexPlayer, "Artanis");
        }
        else if (auto928F149E_val == "0001") {
            PlayerSetCommander(lv_indexPlayer, "Raynor");
        }
        else if (auto928F149E_val == "0002") {
            PlayerSetCommander(lv_indexPlayer, "Kerrigan");
        }
        else {
            if ((lv_indexPlayer == 1)) {
                PlayerSetCommander(lv_indexPlayer, "Raynor");
            }
            else {
                PlayerSetCommander(lv_indexPlayer, "Kerrigan");
            }
        }
    }
    libCOMI_gf_EnableArcadeContestMode();
    libCOMI_gf_SetAlliedCommandersstartingResources();
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Settech);
    SetHeroLeaderPanelEnabled(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroStart_Init () {
    gt_HeroStart = TriggerCreate("gt_HeroStart_Func");
    TriggerAddEventMapInit(gt_HeroStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set tech
//--------------------------------------------------------------------------------------------------
bool gt_Settech_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeRequirementsEnable(4, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Settech_Init () {
    gt_Settech = TriggerCreate("gt_Settech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 3 dies
//--------------------------------------------------------------------------------------------------
bool gt_Objective3dies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/0E77E08B"), StringExternal("Param/Value/D6208FFE"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    TriggerEnable(gt_Objective3dies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective3dies_Init () {
    gt_Objective3dies = TriggerCreate("gt_Objective3dies_Func");
    TriggerAddEventUnitDied(gt_Objective3dies, UnitRefFromUnit(UnitFromId(92015588)));
    TriggerAddEventUnitDied(gt_Objective3dies, UnitRefFromUnit(UnitFromId(92015588)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 4 dies 
//--------------------------------------------------------------------------------------------------
bool gt_Objective4dies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/2E8ECD10"), StringExternal("Param/Value/2EC34325"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    TriggerEnable(gt_Objective4dies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective4dies_Init () {
    gt_Objective4dies = TriggerCreate("gt_Objective4dies_Func");
    TriggerAddEventUnitDied(gt_Objective4dies, UnitRefFromUnit(UnitFromId(1396865075)));
    TriggerAddEventUnitDied(gt_Objective4dies, UnitRefFromUnit(UnitFromId(161210866)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hammer Intro transmission
//--------------------------------------------------------------------------------------------------
bool gt_HammerIntrotransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/06332DC7"), StringExternal("Param/Value/080E55CC"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HammerIntrotransmission_Init () {
    gt_HammerIntrotransmission = TriggerCreate("gt_HammerIntrotransmission_Func");
    TriggerAddEventMapInit(gt_HammerIntrotransmission);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scv and bunker 2
//--------------------------------------------------------------------------------------------------
bool gt_Scvandbunker2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buildping;
    unit lv_scvObjective1;
    unit lv_scvObjective2;
    unit lv_bunkersobjective1;
    unit lv_bunkersobjective2;
    unit lv_lastcreatedunit;
    unitgroup lv_bunker1minions;
    unitgroup lv_bunker2minions;

    // Variable Initialization
    lv_buildping = c_invalidPingId;
    lv_bunker1minions = UnitGroupEmpty();
    lv_bunker2minions = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_scvObjective1 = UnitLastCreated();
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1717829828), UnitLastCreatedGroup(), true, 4);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_scvObjective2 = UnitLastCreated();
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1541651252), UnitLastCreatedGroup(), true, 4);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/0A05E9F1"), StringExternal("Param/Value/41014F6D"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(1717829828), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 15.0, 270.0);
    lv_buildping = PingLastCreated();
    PingSetScale(lv_buildping, 0.75);
    UnitIssueOrder(lv_scvObjective1, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(171555081)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_scvObjective2, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(1723406227)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    UnitGroupIssueOrder(lv_bunker1minions, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    UnitGroupIssueOrder(lv_bunker2minions, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
    Wait(3.0, c_timeGame);
    UnitWaitUntilIdle(lv_scvObjective1, true);
    UnitWaitUntilIdle(lv_scvObjective1, true);
    UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 2 Bunker 1"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_bunkersobjective1 = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 2 bunker 2"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_bunkersobjective2 = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker1minions, 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker1minions, 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker1minions, 3)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker2minions, 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker2minions, 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker2minions, 3)), c_orderQueueAddToEnd);
    while (true) {
        Wait(120.0, c_timeGame);
        if ((UnitIsAlive(lv_scvObjective1) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            lv_scvObjective1 = UnitLastCreated();
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1717829828), UnitLastCreatedGroup(), true, 4);
        }

        if ((UnitIsAlive(lv_scvObjective2) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            lv_scvObjective2 = UnitLastCreated();
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1541651252), UnitLastCreatedGroup(), true, 4);
        }

        if ((UnitIsAlive(lv_bunkersobjective1) == false)) {
            UnitIssueOrder(lv_scvObjective1, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(171555081)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
            UnitGroupIssueOrder(lv_bunker1minions, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
            UnitWaitUntilIdle(lv_scvObjective1, true);
            UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 2 Bunker 1"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_bunkersobjective1 = UnitGroupLoopCurrent();
            }
            UnitGroupLoopEnd();
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
        }

        if ((UnitIsAlive(lv_bunkersobjective2) == false)) {
            UnitIssueOrder(lv_scvObjective2, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(1723406227)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
            UnitGroupIssueOrder(lv_bunker2minions, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
            UnitWaitUntilIdle(lv_scvObjective2, true);
            UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 2 bunker 2"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_bunkersobjective2 = UnitGroupLoopCurrent();
            }
            UnitGroupLoopEnd();
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scvandbunker2_Init () {
    gt_Scvandbunker2 = TriggerCreate("gt_Scvandbunker2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 terran 2
//--------------------------------------------------------------------------------------------------
bool gt_Objective1terran2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lastcreatedunit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(92015588)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DevilDog", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    }

    if ((UnitIsAlive(UnitFromId(161210866)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTank", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    }

    UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
    Wait(60.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(554609277), UnitLastCreatedGroup(), true, 4);
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(92015588)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DevilDog", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1499886554), UnitLastCreatedGroup(), true, 4);
    }

    if ((UnitIsAlive(UnitFromId(161210866)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavesobjective2, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(466593173), UnitLastCreatedGroup(), true, 4);
    }

    UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(525617454)), c_orderQueueAddToEnd);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_StartObjective1terran2, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Objective1terran2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1terran2_Init () {
    gt_Objective1terran2 = TriggerCreate("gt_Objective1terran2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 1 terran 2
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective1terran2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupFilterPlayer(gv_terranwavesobjective2, 4, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(695671534)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1675437203)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1315025043)), c_orderQueueAddToEnd);
        if ((UnitIsAlive(UnitFromId(92015588)) == true)) {
            UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(15642708)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1315025043)), c_orderQueueAddToEnd);
        }

        UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2067569250)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2110966959)), c_orderQueueAddToEnd);
        if ((UnitIsAlive(UnitFromId(161210866)) == true)) {
            UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(278706050)), c_orderQueueAddToEnd);
        }

        if ((UnitIsAlive(UnitFromId(1396865075)) == true)) {
            UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1599461658)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(231521157)), c_orderQueueAddToEnd);
        }

        UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(525766088)), c_orderQueueAddToEnd);
        if ((UnitIsAlive(UnitFromId(172101507)) == true)) {
            UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1697775992)), c_orderQueueAddToEnd);
        }

        UnitGroupIssueOrder(gv_terranwavesobjective2, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(887968428)), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective1terran2_Init () {
    gt_StartObjective1terran2 = TriggerCreate("gt_StartObjective1terran2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scv and bunker
//--------------------------------------------------------------------------------------------------
bool gt_Scvandbunker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buildping;
    unit lv_scvObjective1;
    unit lv_scvObjective2;
    unit lv_bunkersobjective1;
    unit lv_bunkersobjective2;
    unit lv_lastcreatedunit;
    unitgroup lv_bunker1minions;
    unitgroup lv_bunker2minions;

    // Variable Initialization
    lv_buildping = c_invalidPingId;
    lv_bunker1minions = UnitGroupEmpty();
    lv_bunker2minions = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_scvObjective1 = UnitLastCreated();
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1175030424), UnitLastCreatedGroup(), true, 4);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_scvObjective2 = UnitLastCreated();
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1379250119), UnitLastCreatedGroup(), true, 4);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/E4594E07"), StringExternal("Param/Value/80E98C89"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", PointFromId(1175030424), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 15.0, 270.0);
    lv_buildping = PingLastCreated();
    PingSetScale(lv_buildping, 0.75);
    UnitIssueOrder(lv_scvObjective1, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(1548279015)), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(lv_scvObjective2, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(2005218854)), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    Wait(1.0, c_timeGame);
    UnitWaitUntilIdle(lv_scvObjective1, true);
    UnitWaitUntilIdle(lv_scvObjective1, true);
    UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 1 region 1"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_bunkersobjective1 = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 1 region 2"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_bunkersobjective2 = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    Wait(1.0, c_timeGame);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker1minions, 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker1minions, 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker1minions, 3)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker2minions, 1)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker2minions, 2)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupUnit(lv_bunker2minions, 3)), c_orderQueueAddToEnd);
    while (true) {
        Wait(120.0, c_timeGame);
        if ((UnitIsAlive(lv_scvObjective1) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            lv_scvObjective1 = UnitLastCreated();
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1175030424), UnitLastCreatedGroup(), true, 4);
        }

        if ((UnitIsAlive(lv_scvObjective2) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            lv_scvObjective2 = UnitLastCreated();
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1379250119), UnitLastCreatedGroup(), true, 4);
        }

        if ((UnitIsAlive(lv_bunkersobjective1) == false)) {
            UnitIssueOrder(lv_scvObjective1, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(1548279015)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker1minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
            UnitGroupIssueOrder(lv_bunker1minions, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1120506279)), c_orderQueueAddToEnd);
            UnitWaitUntilIdle(lv_scvObjective1, true);
            UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 1 region 1"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_bunkersobjective1 = UnitGroupLoopCurrent();
            }
            UnitGroupLoopEnd();
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective1, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker1minions, c_unitCountAlive)), c_orderQueueAddToEnd);
        }

        if ((UnitIsAlive(lv_scvObjective2) == false)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "SCV", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            lv_scvObjective2 = UnitLastCreated();
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1379250119), UnitLastCreatedGroup(), true, 4);
        }

        if ((UnitIsAlive(lv_bunkersobjective2) == false)) {
            UnitIssueOrder(lv_scvObjective2, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), PointFromId(2005218854)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
            libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
            UnitGroupAdd(lv_bunker2minions, UnitLastCreated());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
            UnitGroupIssueOrder(lv_bunker2minions, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1120506279)), c_orderQueueAddToEnd);
            UnitWaitUntilIdle(lv_scvObjective2, true);
            UnitGroupLoopBegin(UnitGroup(null, 4, RegionFromName("Objective 1 region 2"), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_bunkersobjective2 = UnitGroupLoopCurrent();
            }
            UnitGroupLoopEnd();
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_bunkersobjective2, OrderTargetingUnit(AbilityCommand("BunkerTransport", 0), UnitGroupRandomUnit(lv_bunker2minions, c_unitCountAlive)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scvandbunker_Init () {
    gt_Scvandbunker = TriggerCreate("gt_Scvandbunker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 terran
//--------------------------------------------------------------------------------------------------
bool gt_Objective1terran_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lastcreatedunit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
    if ((UnitIsAlive(UnitFromId(140540119)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DevilDog", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    }

    if ((UnitIsAlive(UnitFromId(1396865075)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTank", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    }

    UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1120506279)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1120506279)), c_orderQueueAddToEnd);
    Wait(60.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "Medic", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
    lv_lastcreatedunit = UnitLastCreated();
    UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
    libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(764739356), UnitLastCreatedGroup(), true, 4);
    if ((UnitIsAlive(UnitFromId(140540119)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DevilDog", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(932225114), UnitLastCreatedGroup(), true, 4);
    }

    if ((UnitIsAlive(UnitFromId(1396865075)) == false)) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Marine", c_unitCreateIgnorePlacement, 4, PointFromId(1157743035));
        lv_lastcreatedunit = UnitLastCreated();
        UnitGroupAdd(gv_terranwavessouth, lv_lastcreatedunit);
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, PointFromId(1724533952), UnitLastCreatedGroup(), true, 4);
    }

    UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1120506279)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1120506279)), c_orderQueueAddToEnd);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_StartObjective1terran, true, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Objective1terran, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1terran_Init () {
    gt_Objective1terran = TriggerCreate("gt_Objective1terran_Func");
    TriggerAddEventGeneric(gt_Objective1terran, "Objective 1 terran");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 1 terran
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective1terran_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupFilterPlayer(gv_terranwavessouth, 4, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2045697295)), c_orderQueueAddToEnd);
        if ((UnitIsAlive(UnitFromId(140540119)) == true)) {
            UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1987515047)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1172681640)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2045697295)), c_orderQueueAddToEnd);
        }

        UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2014743554)), c_orderQueueAddToEnd);
        if ((UnitIsAlive(UnitFromId(1396865075)) == true)) {
            UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1112528403)), c_orderQueueAddToEnd);
        }

        if ((UnitIsAlive(UnitFromId(161210866)) == true)) {
            UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1599461658)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(278706050)), c_orderQueueAddToEnd);
        }

        UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1339215771)), c_orderQueueAddToEnd);
        if ((UnitIsAlive(UnitFromId(1973156512)) == true)) {
            UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(887968428)), c_orderQueueAddToEnd);
        }

        UnitGroupIssueOrder(gv_terranwavessouth, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1697775992)), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective1terran_Init () {
    gt_StartObjective1terran = TriggerCreate("gt_StartObjective1terran_Func");
    TriggerAddEventGeneric(gt_StartObjective1terran, "Objective 1 terran");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping 5 south
//--------------------------------------------------------------------------------------------------
bool gt_Stopping5south_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive5south);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping5south_Init () {
    gt_Stopping5south = TriggerCreate("gt_Stopping5south_Func");
    TriggerAddEventUnitDied(gt_Stopping5south, UnitRefFromUnit(UnitFromId(1973156512)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 5 south
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective5south_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(1973156512)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(61.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(1973156512)) == true)) {
        cai_wave_run(8, 3, GameAttributePlayersForTeam(1), false);
    }

    if ((UnitIsAlive(UnitFromId(172101507)) == false)) {
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player1);
    }

    Wait(60.0, c_timeGame);
    TriggerSendEvent("Objective 5 south");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective5south_Init () {
    gt_StartObjective5south = TriggerCreate("gt_StartObjective5south_Func");
    TriggerAddEventGeneric(gt_StartObjective5south, "Objective 5 south");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 5 south initialisation 
//--------------------------------------------------------------------------------------------------
bool gt_Objective5southinitialisation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1973156512)) == true)) {
        TriggerSendEvent("Objective 5 south");
        TriggerEnable(gt_Objective5southinitialisation, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective5southinitialisation_Init () {
    gt_Objective5southinitialisation = TriggerCreate("gt_Objective5southinitialisation_Func");
    TriggerAddEventGeneric(gt_Objective5southinitialisation, "so5 south");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 5 south ping 
//--------------------------------------------------------------------------------------------------
bool gt_Objective5southping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1973156512)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(887968428), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/36D4160E"));
        PingSetUnit(PingLastCreated(), UnitFromId(1973156512));
        gv_primalhive5south = PingLastCreated();
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective5southping_Init () {
    gt_Objective5southping = TriggerCreate("gt_Objective5southping_Func");
    TriggerAddEventGeneric(gt_Objective5southping, "so5 south");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 5 south master start 
//--------------------------------------------------------------------------------------------------
bool gt_Objective5southmasterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1154.0, c_timeGame);
    TriggerSendEvent("so5 south");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective5southmasterstart_Init () {
    gt_Objective5southmasterstart = TriggerCreate("gt_Objective5southmasterstart_Func");
    TriggerAddEventMapInit(gt_Objective5southmasterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 5 south ping 
//--------------------------------------------------------------------------------------------------
bool gt_Wave5southping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_wave5southunitgroup, cai_wave_createdUnits(8, 3));
    libCOMI_gf_DestroyPingCoop(gv_wave5south);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(887968428), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave5south = PingLastCreated();
    PingSetScale(gv_wave5south, 0.25);
    PingSetUnit(gv_wave5south, UnitGroupRandomUnit(gv_wave5southunitgroup, c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave5southping_Init () {
    gt_Wave5southping = TriggerCreate("gt_Wave5southping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 5 south ping destroy 
//--------------------------------------------------------------------------------------------------
bool gt_Wave5southpingdestroy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_wave5southunitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave5south);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave5southpingdestroy_Init () {
    gt_Wave5southpingdestroy = TriggerCreate("gt_Wave5southpingdestroy_Func");
    TriggerAddEventTimePeriodic(gt_Wave5southpingdestroy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping 3
//--------------------------------------------------------------------------------------------------
bool gt_Stopping3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive5north);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping3_Init () {
    gt_Stopping3 = TriggerCreate("gt_Stopping3_Func");
    TriggerAddEventUnitDied(gt_Stopping3, UnitRefFromUnit(UnitFromId(172101507)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 3
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(172101507)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(172101507)) == true)) {
        cai_wave_run(7, 3, GameAttributePlayersForTeam(1), false);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player2);
    }

    Wait(60.0, c_timeGame);
    TriggerSendEvent("Objective 5 north");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective3_Init () {
    gt_StartObjective3 = TriggerCreate("gt_StartObjective3_Func");
    TriggerAddEventGeneric(gt_StartObjective3, "Objective 5 north");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 initialisation  2
//--------------------------------------------------------------------------------------------------
bool gt_Objective1initialisation2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(172101507)) == true)) {
        TriggerSendEvent("Objective 5 north");
        TriggerEnable(gt_Objective1initialisation2, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1initialisation2_Init () {
    gt_Objective1initialisation2 = TriggerCreate("gt_Objective1initialisation2_Func");
    TriggerAddEventGeneric(gt_Objective1initialisation2, "so5 north");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 ping 2
//--------------------------------------------------------------------------------------------------
bool gt_Objective1ping2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(172101507)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1697775992), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4BA56A5E"));
        PingSetUnit(PingLastCreated(), UnitFromId(172101507));
        gv_primalhive5north = PingLastCreated();
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1ping2_Init () {
    gt_Objective1ping2 = TriggerCreate("gt_Objective1ping2_Func");
    TriggerAddEventGeneric(gt_Objective1ping2, "so5 north");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 5 north master start
//--------------------------------------------------------------------------------------------------
bool gt_Objective5northmasterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1152.0, c_timeGame);
    TriggerSendEvent("so5 north");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective5northmasterstart_Init () {
    gt_Objective5northmasterstart = TriggerCreate("gt_Objective5northmasterstart_Func");
    TriggerAddEventMapInit(gt_Objective5northmasterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 1 ping 2
//--------------------------------------------------------------------------------------------------
bool gt_Wave1ping2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_wave5northunitgroup, cai_wave_createdUnits(7, 3));
    libCOMI_gf_DestroyPingCoop(gv_wave5north);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(1697775992), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave5north = PingLastCreated();
    PingSetScale(gv_wave5north, 0.25);
    PingSetUnit(gv_wave5north, UnitGroupRandomUnit(gv_wave5northunitgroup, c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave1ping2_Init () {
    gt_Wave1ping2 = TriggerCreate("gt_Wave1ping2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave1 ping destroy 3
//--------------------------------------------------------------------------------------------------
bool gt_Wave1pingdestroy3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_wave5northunitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave5north);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave1pingdestroy3_Init () {
    gt_Wave1pingdestroy3 = TriggerCreate("gt_Wave1pingdestroy3_Func");
    TriggerAddEventTimePeriodic(gt_Wave1pingdestroy3, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping 4
//--------------------------------------------------------------------------------------------------
bool gt_Stopping4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive4far);
    if ((UnitIsAlive(UnitFromId(1396865075)) == false)) {
        TriggerSendEvent("so5 north");
        Wait(1.0, c_timeGame);
        TriggerSendEvent("so5 south");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping4_Init () {
    gt_Stopping4 = TriggerCreate("gt_Stopping4_Func");
    TriggerAddEventUnitDied(gt_Stopping4, UnitRefFromUnit(UnitFromId(161210866)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 4
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(161210866)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(40.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(161210866)) == true)) {
        cai_wave_run(6, 3, GameAttributePlayersForTeam(1), false);
    }

    if ((UnitIsAlive(UnitFromId(1396865075)) == false)) {
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player1);
    }

    Wait(80.0, c_timeGame);
    TriggerSendEvent("Objective 4 far");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective4_Init () {
    gt_StartObjective4 = TriggerCreate("gt_StartObjective4_Func");
    TriggerAddEventGeneric(gt_StartObjective4, "Objective 4 far");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 initialisation  3
//--------------------------------------------------------------------------------------------------
bool gt_Objective1initialisation3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(161210866)) == true)) {
        TriggerSendEvent("Objective 4 far");
        TriggerEnable(gt_Objective1initialisation3, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1initialisation3_Init () {
    gt_Objective1initialisation3 = TriggerCreate("gt_Objective1initialisation3_Func");
    TriggerAddEventGeneric(gt_Objective1initialisation3, "so4 far");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 4 far ping 
//--------------------------------------------------------------------------------------------------
bool gt_Objective4farping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(161210866)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(278706050), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/227B9C2C"));
        PingSetUnit(PingLastCreated(), UnitFromId(161210866));
        gv_primalhive4far = PingLastCreated();
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(4.0, c_timeGame);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/F9805E86"), StringExternal("Param/Value/5A689BF3"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective4farping_Init () {
    gt_Objective4farping = TriggerCreate("gt_Objective4farping_Func");
    TriggerAddEventGeneric(gt_Objective4farping, "so4 far");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 4 far master start 
//--------------------------------------------------------------------------------------------------
bool gt_Objective4farmasterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(870.0, c_timeGame);
    TriggerSendEvent("so4 far");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective4farmasterstart_Init () {
    gt_Objective4farmasterstart = TriggerCreate("gt_Objective4farmasterstart_Func");
    TriggerAddEventMapInit(gt_Objective4farmasterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 far ping 
//--------------------------------------------------------------------------------------------------
bool gt_Wave4farping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_wave4farunitgroup, cai_wave_createdUnits(6, 3));
    libCOMI_gf_DestroyPingCoop(gv_wave4far);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(278706050), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave4far = PingLastCreated();
    PingSetScale(gv_wave4far, 0.25);
    PingSetUnit(gv_wave4far, UnitGroupRandomUnit(gv_wave4farunitgroup, c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4farping_Init () {
    gt_Wave4farping = TriggerCreate("gt_Wave4farping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 far ping destroy 
//--------------------------------------------------------------------------------------------------
bool gt_Wave4farpingdestroy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_wave4farunitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave4far);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4farpingdestroy_Init () {
    gt_Wave4farpingdestroy = TriggerCreate("gt_Wave4farpingdestroy_Func");
    TriggerAddEventTimePeriodic(gt_Wave4farpingdestroy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping 4 close
//--------------------------------------------------------------------------------------------------
bool gt_Stopping4close_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive4close);
    if ((UnitIsAlive(UnitFromId(161210866)) == false)) {
        TriggerSendEvent("so5 north");
        Wait(1.0, c_timeGame);
        TriggerSendEvent("so5 south");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping4close_Init () {
    gt_Stopping4close = TriggerCreate("gt_Stopping4close_Func");
    TriggerAddEventUnitDied(gt_Stopping4close, UnitRefFromUnit(UnitFromId(1396865075)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 4 close
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective4close_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(1396865075)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(40.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(1396865075)) == true)) {
        cai_wave_run(5, 3, GameAttributePlayersForTeam(1), false);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player2);
    }

    Wait(80.0, c_timeGame);
    TriggerSendEvent("Objective 4 close");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective4close_Init () {
    gt_StartObjective4close = TriggerCreate("gt_StartObjective4close_Func");
    TriggerAddEventGeneric(gt_StartObjective4close, "Objective 4 close");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 4 close initialisation 
//--------------------------------------------------------------------------------------------------
bool gt_Objective4closeinitialisation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1396865075)) == true)) {
        TriggerSendEvent("Objective 4 close");
        TriggerEnable(gt_Objective4closeinitialisation, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective4closeinitialisation_Init () {
    gt_Objective4closeinitialisation = TriggerCreate("gt_Objective4closeinitialisation_Func");
    TriggerAddEventGeneric(gt_Objective4closeinitialisation, "so4 close");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 4 close ping 
//--------------------------------------------------------------------------------------------------
bool gt_Objective4closeping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1396865075)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(231521157), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A2BBC70E"));
        PingSetUnit(PingLastCreated(), UnitFromId(1396865075));
        gv_primalhive4close = PingLastCreated();
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective4closeping_Init () {
    gt_Objective4closeping = TriggerCreate("gt_Objective4closeping_Func");
    TriggerAddEventGeneric(gt_Objective4closeping, "so4 close");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 4 close master start
//--------------------------------------------------------------------------------------------------
bool gt_Objective4closemasterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(870.0, c_timeGame);
    TriggerSendEvent("so4 close");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective4closemasterstart_Init () {
    gt_Objective4closemasterstart = TriggerCreate("gt_Objective4closemasterstart_Func");
    TriggerAddEventMapInit(gt_Objective4closemasterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 close ping 
//--------------------------------------------------------------------------------------------------
bool gt_Wave4closeping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_objective4closeunitgroup, cai_wave_createdUnits(5, 3));
    libCOMI_gf_DestroyPingCoop(gv_wave4close);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(231521157), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave4close = PingLastCreated();
    PingSetScale(gv_wave4close, 0.25);
    PingSetUnit(gv_wave4close, UnitGroupRandomUnit(gv_objective4closeunitgroup, c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4closeping_Init () {
    gt_Wave4closeping = TriggerCreate("gt_Wave4closeping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 close ping destroy 
//--------------------------------------------------------------------------------------------------
bool gt_Wave4closepingdestroy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_objective4closeunitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave4close);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4closepingdestroy_Init () {
    gt_Wave4closepingdestroy = TriggerCreate("gt_Wave4closepingdestroy_Func");
    TriggerAddEventTimePeriodic(gt_Wave4closepingdestroy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ai Init
//--------------------------------------------------------------------------------------------------
bool gt_AiInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    AIClearAllBullies(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiInit_Init () {
    gt_AiInit = TriggerCreate("gt_AiInit_Func");
    TriggerAddEventMapInit(gt_AiInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping 3 bottom
//--------------------------------------------------------------------------------------------------
bool gt_Stopping3bottom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive3bottom);
    if ((UnitIsAlive(UnitFromId(92015588)) == false)) {
        TriggerSendEvent("so4 close");
        Wait(1.0, c_timeGame);
        TriggerSendEvent("so4 far");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping3bottom_Init () {
    gt_Stopping3bottom = TriggerCreate("gt_Stopping3bottom_Func");
    TriggerAddEventUnitDied(gt_Stopping3bottom, UnitRefFromUnit(UnitFromId(140540119)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 3 bottom
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective3bottom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(140540119)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(40.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(140540119)) == true)) {
        cai_wave_run(4, 3, GameAttributePlayersForTeam(1), false);
    }

    if ((UnitIsAlive(UnitFromId(92015588)) == false)) {
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player2);
    }

    Wait(80.0, c_timeGame);
    TriggerSendEvent("Objective 3 bottom");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective3bottom_Init () {
    gt_StartObjective3bottom = TriggerCreate("gt_StartObjective3bottom_Func");
    TriggerAddEventGeneric(gt_StartObjective3bottom, "Objective 3 bottom");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 3 bottom initialisation
//--------------------------------------------------------------------------------------------------
bool gt_Objective3bottominitialisation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(140540119)) == true)) {
        TriggerSendEvent("Objective 3 bottom");
        TriggerEnable(gt_Objective3bottominitialisation, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective3bottominitialisation_Init () {
    gt_Objective3bottominitialisation = TriggerCreate("gt_Objective3bottominitialisation_Func");
    TriggerAddEventGeneric(gt_Objective3bottominitialisation, "so3 bottom");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 3 bottom ping 
//--------------------------------------------------------------------------------------------------
bool gt_Objective3bottomping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(140540119)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1172681640), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DB439C14"));
        PingSetUnit(PingLastCreated(), UnitFromId(140540119));
        gv_primalhive3bottom = PingLastCreated();
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective3bottomping_Init () {
    gt_Objective3bottomping = TriggerCreate("gt_Objective3bottomping_Func");
    TriggerAddEventGeneric(gt_Objective3bottomping, "so3 bottom");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 3 bottom master start
//--------------------------------------------------------------------------------------------------
bool gt_Objective3bottommasterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(612.0, c_timeGame);
    TriggerSendEvent("so3 bottom");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective3bottommasterstart_Init () {
    gt_Objective3bottommasterstart = TriggerCreate("gt_Objective3bottommasterstart_Func");
    TriggerAddEventMapInit(gt_Objective3bottommasterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 3 bottom ping 
//--------------------------------------------------------------------------------------------------
bool gt_Wave3bottomping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_wave3bottomunitgroup, cai_wave_createdUnits(4, 3));
    libCOMI_gf_DestroyPingCoop(gv_wave3bottom);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(1172681640), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave3bottom = PingLastCreated();
    PingSetScale(gv_wave3bottom, 0.25);
    PingSetUnit(gv_wave3bottom, UnitGroupRandomUnit(gv_wave3bottomunitgroup, c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave3bottomping_Init () {
    gt_Wave3bottomping = TriggerCreate("gt_Wave3bottomping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave3 bottom ping destroy 
//--------------------------------------------------------------------------------------------------
bool gt_Wave3bottompingdestroy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_wave3bottomunitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave3bottom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave3bottompingdestroy_Init () {
    gt_Wave3bottompingdestroy = TriggerCreate("gt_Wave3bottompingdestroy_Func");
    TriggerAddEventTimePeriodic(gt_Wave3bottompingdestroy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping 3 top
//--------------------------------------------------------------------------------------------------
bool gt_Stopping3top_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive3top);
    if ((UnitIsAlive(UnitFromId(140540119)) == false)) {
        TriggerSendEvent("so4 close");
        Wait(1.0, c_timeGame);
        TriggerSendEvent("so4 far");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping3top_Init () {
    gt_Stopping3top = TriggerCreate("gt_Stopping3top_Func");
    TriggerAddEventUnitDied(gt_Stopping3top, UnitRefFromUnit(UnitFromId(92015588)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 3 top
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective3top_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(92015588)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(40.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(92015588)) == true)) {
        cai_wave_run(3, 3, GameAttributePlayersForTeam(1), false);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player1);
    }

    Wait(80.0, c_timeGame);
    TriggerSendEvent("Objective 3 top");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective3top_Init () {
    gt_StartObjective3top = TriggerCreate("gt_StartObjective3top_Func");
    TriggerAddEventGeneric(gt_StartObjective3top, "Objective 3 top");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 3 top initialisation
//--------------------------------------------------------------------------------------------------
bool gt_Objective3topinitialisation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(92015588)) == true)) {
        TriggerSendEvent("Objective 3 top");
        TriggerEnable(gt_Objective3topinitialisation, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective3topinitialisation_Init () {
    gt_Objective3topinitialisation = TriggerCreate("gt_Objective3topinitialisation_Func");
    TriggerAddEventGeneric(gt_Objective3topinitialisation, "so3 top");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 3 top ping 
//--------------------------------------------------------------------------------------------------
bool gt_Objective3topping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(92015588)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(15642708), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/36117298"));
        PingSetUnit(PingLastCreated(), UnitFromId(92015588));
        gv_primalhive3top = PingLastCreated();
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(4.0, c_timeGame);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/312FF108"), StringExternal("Param/Value/D5D69FF7"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective3topping_Init () {
    gt_Objective3topping = TriggerCreate("gt_Objective3topping_Func");
    TriggerAddEventGeneric(gt_Objective3topping, "so3 top");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 3 top  master start
//--------------------------------------------------------------------------------------------------
bool gt_Objective3topmasterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(612.0, c_timeGame);
    TriggerSendEvent("so3 top");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective3topmasterstart_Init () {
    gt_Objective3topmasterstart = TriggerCreate("gt_Objective3topmasterstart_Func");
    TriggerAddEventMapInit(gt_Objective3topmasterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 3 top ping 
//--------------------------------------------------------------------------------------------------
bool gt_Wave3topping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_wave3topunitgroup, cai_wave_createdUnits(3, 3));
    libCOMI_gf_DestroyPingCoop(gv_wave3top);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(15642708), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave3top = PingLastCreated();
    PingSetScale(gv_wave3top, 0.25);
    PingSetUnit(gv_wave3top, UnitGroupRandomUnit(gv_wave3topunitgroup, c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave3topping_Init () {
    gt_Wave3topping = TriggerCreate("gt_Wave3topping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 3 top ping destroy 
//--------------------------------------------------------------------------------------------------
bool gt_Wave3toppingdestroy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_wave3topunitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave3top);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave3toppingdestroy_Init () {
    gt_Wave3toppingdestroy = TriggerCreate("gt_Wave3toppingdestroy_Func");
    TriggerAddEventTimePeriodic(gt_Wave3toppingdestroy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping 2
//--------------------------------------------------------------------------------------------------
bool gt_Stopping2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive2);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Scvandbunker2, false, false);
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_Objective1terran2, false, false);
    Wait(10.0, c_timeGame);
    TriggerSendEvent("so3 top");
    Wait(1.0, c_timeGame);
    TriggerSendEvent("so3 bottom");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping2_Init () {
    gt_Stopping2 = TriggerCreate("gt_Stopping2_Func");
    TriggerAddEventUnitDied(gt_Stopping2, UnitRefFromUnit(UnitFromId(1878039947)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 2
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(1878039947)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(40.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(1878039947)) == true)) {
        cai_wave_run(2, 3, GameAttributePlayersForTeam(1), false);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player1);
    }

    Wait(80.0, c_timeGame);
    TriggerSendEvent("Objective 2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective2_Init () {
    gt_StartObjective2 = TriggerCreate("gt_StartObjective2_Func");
    TriggerAddEventGeneric(gt_StartObjective2, "Objective 2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 2 initialisation 
//--------------------------------------------------------------------------------------------------
bool gt_Objective2initialisation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1878039947)) == true)) {
        TriggerSendEvent("Objective 2");
        TriggerEnable(gt_Objective2initialisation, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective2initialisation_Init () {
    gt_Objective2initialisation = TriggerCreate("gt_Objective2initialisation_Func");
    TriggerAddEventGeneric(gt_Objective2initialisation, "so2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 2 ping 
//--------------------------------------------------------------------------------------------------
bool gt_Objective2ping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1878039947)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1042104827), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7605B9BA"));
        PingSetUnit(PingLastCreated(), UnitFromId(1878039947));
        gv_primalhive2 = PingLastCreated();
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(4.0, c_timeGame);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/9E2702CE"), StringExternal("Param/Value/933B8FB0"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective2ping_Init () {
    gt_Objective2ping = TriggerCreate("gt_Objective2ping_Func");
    TriggerAddEventGeneric(gt_Objective2ping, "so2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 2  master start 
//--------------------------------------------------------------------------------------------------
bool gt_Objective2masterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(360.0, c_timeGame);
    TriggerSendEvent("so2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective2masterstart_Init () {
    gt_Objective2masterstart = TriggerCreate("gt_Objective2masterstart_Func");
    TriggerAddEventMapInit(gt_Objective2masterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 2 ping 
//--------------------------------------------------------------------------------------------------
bool gt_Wave2ping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_wave2unitgroup, cai_wave_createdUnits(2, 3));
    Wait(2.0, c_timeGame);
    libCOMI_gf_DestroyPingCoop(gv_wave2);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(1042104827), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave2 = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.25);
    PingSetUnit(gv_wave2, UnitGroupClosestToPoint(gv_wave2unitgroup, PointFromId(525617454)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave2ping_Init () {
    gt_Wave2ping = TriggerCreate("gt_Wave2ping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave1 ping destroy 2
//--------------------------------------------------------------------------------------------------
bool gt_Wave1pingdestroy2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_wave2unitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave1pingdestroy2_Init () {
    gt_Wave1pingdestroy2 = TriggerCreate("gt_Wave1pingdestroy2_Func");
    TriggerAddEventTimePeriodic(gt_Wave1pingdestroy2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop ping
//--------------------------------------------------------------------------------------------------
bool gt_Stopping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_primalhive1);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Scvandbunker, false, false);
    Wait(35.0, c_timeGame);
    TriggerExecute(gt_Objective1terran, false, false);
    Wait(10.0, c_timeGame);
    TriggerSendEvent("so2");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stopping_Init () {
    gt_Stopping = TriggerCreate("gt_Stopping_Func");
    TriggerAddEventUnitDied(gt_Stopping, UnitRefFromUnit(UnitFromId(1570701461)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Objective 1
//--------------------------------------------------------------------------------------------------
bool gt_StartObjective1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(1570701461)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    cai_wave_run(1, 3, GameAttributePlayersForTeam(1), false);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, gv_player2);
    Wait(120.0, c_timeGame);
    TriggerSendEvent("Objective 1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartObjective1_Init () {
    gt_StartObjective1 = TriggerCreate("gt_StartObjective1_Func");
    TriggerAddEventGeneric(gt_StartObjective1, "Objective 1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 initialisation 
//--------------------------------------------------------------------------------------------------
bool gt_Objective1initialisation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(215.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(1570701461)) == true)) {
        TriggerSendEvent("Objective 1");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1initialisation_Init () {
    gt_Objective1initialisation = TriggerCreate("gt_Objective1initialisation_Func");
    TriggerAddEventGeneric(gt_Objective1initialisation, "start objective 1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 ping
//--------------------------------------------------------------------------------------------------
bool gt_Objective1ping_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(UnitFromId(1570701461)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1570701461)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1034835910), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B9504D63"));
        PingSetUnit(PingLastCreated(), UnitFromId(1570701461));
        gv_primalhive1 = PingLastCreated();
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(4.0, c_timeGame);
        TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("AC_SgtHammer_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/591B33F6"), StringExternal("Param/Value/F68053C3"), 10.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1ping_Init () {
    gt_Objective1ping = TriggerCreate("gt_Objective1ping_Func");
    TriggerAddEventGeneric(gt_Objective1ping, "start objective 1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective 1 master start
//--------------------------------------------------------------------------------------------------
bool gt_Objective1masterstart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeGame);
    TriggerSendEvent("start objective 1");
    Wait(4.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Objective1masterstart_Init () {
    gt_Objective1masterstart = TriggerCreate("gt_Objective1masterstart_Func");
    TriggerAddEventMapInit(gt_Objective1masterstart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 1 ping
//--------------------------------------------------------------------------------------------------
bool gt_Wave1ping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_wave1unitgroup, cai_wave_createdUnits(1, 3));
    libCOMI_gf_DestroyPingCoop(gv_wave1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", PointFromId(1034835910), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_wave1 = PingLastCreated();
    PingSetScale(gv_wave1, 0.25);
    PingSetUnit(gv_wave1, UnitGroupRandomUnit(gv_wave1unitgroup, c_unitCountAlive));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave1ping_Init () {
    gt_Wave1ping = TriggerCreate("gt_Wave1ping_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave1 ping destroy
//--------------------------------------------------------------------------------------------------
bool gt_Wave1pingdestroy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(gv_wave1unitgroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DestroyPingCoop(gv_wave1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave1pingdestroy_Init () {
    gt_Wave1pingdestroy = TriggerCreate("gt_Wave1pingdestroy_Func");
    TriggerAddEventTimePeriodic(gt_Wave1pingdestroy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Slivan more hp
//--------------------------------------------------------------------------------------------------
bool gt_GiveSlivanmorehp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(1060331887), c_unitPropLife, 5000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveSlivanmorehp_Init () {
    gt_GiveSlivanmorehp = TriggerCreate("gt_GiveSlivanmorehp_Func");
    TriggerAddEventMapInit(gt_GiveSlivanmorehp);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Slivan Ping
//--------------------------------------------------------------------------------------------------
bool gt_StopSlivanPing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    PingDestroy(gv_slivanPing);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_CompleteObjectiveKillSilvanJr, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StopSlivanPing_Init () {
    gt_StopSlivanPing = TriggerCreate("gt_StopSlivanPing_Func");
    TriggerAddEventUnitDied(gt_StopSlivanPing, UnitRefFromUnit(UnitFromId(1060331887)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan ping
//--------------------------------------------------------------------------------------------------
bool gt_Slivanping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(800.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(1060331887)) == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingTriangle", PointFromId(103722224), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E78F762C"));
        PingSetUnit(PingLastCreated(), UnitFromId(1060331887));
        gv_slivanPing = PingLastCreated();
        PingSetScale(gv_slivanPing, 0.5);
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_CreateObjectiveKillSlivanJr, true, false);
        TriggerEnable(gt_Slivanpingifplayerentersregion, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Slivanping_Init () {
    gt_Slivanping = TriggerCreate("gt_Slivanping_Func");
    TriggerAddEventMapInit(gt_Slivanping);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan ping if player enters region
//--------------------------------------------------------------------------------------------------
bool gt_Slivanpingifplayerentersregion_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1060331887)) == true) && (UnitGetOwner(EventUnit()) == 1)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingTriangle", PointFromId(103722224), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E765AEA4"));
        PingSetUnit(PingLastCreated(), UnitFromId(1060331887));
        gv_slivanPing = PingLastCreated();
        PingSetScale(gv_slivanPing, 0.5);
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_CreateObjectiveKillSlivanJr, true, false);
        TriggerEnable(gt_Slivanping, false);
        TriggerEnable(gt_Slivanpingifplayerentersregion, false);
        TriggerEnable(gt_Slivanpingifplayer2entersregion, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Slivanpingifplayerentersregion_Init () {
    gt_Slivanpingifplayerentersregion = TriggerCreate("gt_Slivanpingifplayerentersregion_Func");
    TriggerAddEventUnitRange(gt_Slivanpingifplayerentersregion, UnitRefFromUnit(EventUnit()), UnitFromId(1060331887), 11.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan ping if player 2 enters region 
//--------------------------------------------------------------------------------------------------
bool gt_Slivanpingifplayer2entersregion_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(UnitFromId(1060331887)) == true) && (UnitGetOwner(EventUnit()) == 2)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingTriangle", PointFromId(103722224), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4253FA5D"));
        PingSetUnit(PingLastCreated(), UnitFromId(1060331887));
        gv_slivanPing = PingLastCreated();
        PingSetScale(gv_slivanPing, 0.5);
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_CreateObjectiveKillSlivanJr, true, false);
        TriggerEnable(gt_Slivanping, false);
        TriggerEnable(gt_Slivanpingifplayer2entersregion, false);
        TriggerEnable(gt_Slivanpingifplayerentersregion, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Slivanpingifplayer2entersregion_Init () {
    gt_Slivanpingifplayer2entersregion = TriggerCreate("gt_Slivanpingifplayer2entersregion_Func");
    TriggerAddEventUnitRange(gt_Slivanpingifplayer2entersregion, UnitRefFromUnit(EventUnit()), UnitFromId(1060331887), 11.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach player 1 units to group 
//--------------------------------------------------------------------------------------------------
bool gt_Attachplayer1unitstogroup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_playerUnits, EventUnit());
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_SlivanBossFightController, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Attachplayer1unitstogroup_Init () {
    gt_Attachplayer1unitstogroup = TriggerCreate("gt_Attachplayer1unitstogroup_Func");
    TriggerAddEventUnitRange(gt_Attachplayer1unitstogroup, UnitRefFromUnit(EventUnit()), UnitFromId(1060331887), 11.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove player 1 units from group
//--------------------------------------------------------------------------------------------------
bool gt_Removeplayer1unitsfromgroup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_playerUnits, EventUnit());
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0)) {
        TriggerStop(gt_SlivanBossFightController);
        TriggerStop(gt_SlivanBossCreeperMovement);
        UnitIssueOrder(gv_slivanVariable, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName("Slivan Jr ping")), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Removeplayer1unitsfromgroup_Init () {
    gt_Removeplayer1unitsfromgroup = TriggerCreate("gt_Removeplayer1unitsfromgroup_Func");
    TriggerAddEventUnitRange(gt_Removeplayer1unitsfromgroup, UnitRefFromUnit(EventUnit()), UnitFromId(1060331887), 11.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach player 2 units to group
//--------------------------------------------------------------------------------------------------
bool gt_Attachplayer2unitstogroup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_playerUnits, EventUnit());
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_SlivanBossFightController, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Attachplayer2unitstogroup_Init () {
    gt_Attachplayer2unitstogroup = TriggerCreate("gt_Attachplayer2unitstogroup_Func");
    TriggerAddEventUnitRange(gt_Attachplayer2unitstogroup, UnitRefFromUnit(EventUnit()), UnitFromId(1060331887), 11.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove player 2 units from group 
//--------------------------------------------------------------------------------------------------
bool gt_Removeplayer2unitsfromgroup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_playerUnits, EventUnit());
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0)) {
        TriggerStop(gt_SlivanBossFightController);
        TriggerStop(gt_SlivanBossCreeperMovement);
        UnitIssueOrder(gv_slivanVariable, OrderTargetingPoint(AbilityCommand("move", 0), PointFromName("Slivan Jr ping")), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Removeplayer2unitsfromgroup_Init () {
    gt_Removeplayer2unitsfromgroup = TriggerCreate("gt_Removeplayer2unitsfromgroup_Func");
    TriggerAddEventUnitRange(gt_Removeplayer2unitsfromgroup, UnitRefFromUnit(EventUnit()), UnitFromId(1060331887), 11.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Fight Controller
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossFightController_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SlivanBossCreepers, true);
    TriggerEnable(gt_SlivanPathingDummy, true);
    TriggerExecute(gt_SlivanBossCreeperMovement, true, false);
    TimerStart(gv_slivanTimer, c_timerDurationInfinite, false, c_timeAI);
    Wait(libARRA_gf_DifficultyValueFixed2(1.0, 1.0, 0.0), c_timeAI);
    while (true) {
        UnitGroupLoopBegin(gv_slivanBossCreepers);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupRemove(gv_slivanBossCreepers, UnitGroupLoopCurrent());
            gf_AddUnittoPrimalZergAttackers(UnitGroupLoopCurrent(), UnitGetPosition(UnitGroupLoopCurrent()));
        }
        UnitGroupLoopEnd();
        Wait(libARRA_gf_DifficultyValueFixed2(6.0, 6.0, 5.0), c_timeAI);
        UnitSetCustomValue(gv_slivanVariable, 0, 2.0);
        UnitIssueOrder(gv_slivanVariable, OrderTargetingPoint(AbilityCommand("SlivanPuke", 0), UnitGroupCenterOfGroup(gv_playerUnits)), c_orderQueueReplace);
        Wait(3.0, c_timeAI);
        UnitSetCustomValue(gv_slivanVariable, 0, 0.0);
        UnitIssueOrder(gv_slivanVariable, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        Wait(libARRA_gf_DifficultyValueFixed2(6.0, 6.0, 4.0), c_timeAI);
        TriggerExecute(gt_SlivanBossCreeperSpawning, true, false);
        Wait(5.0, c_timeAI);
        UnitSetCustomValue(gv_slivanVariable, 0, 2.0);
        UnitIssueOrder(gv_slivanVariable, OrderTargetingPoint(AbilityCommand("SlivanPuke", 0), UnitGroupCenterOfGroup(gv_playerUnits)), c_orderQueueReplace);
        Wait(3.0, c_timeAI);
        UnitSetCustomValue(gv_slivanVariable, 0, 0.0);
        UnitIssueOrder(gv_slivanVariable, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        Wait(libARRA_gf_DifficultyValueFixed2(6.0, 6.0, 4.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossFightController_Init () {
    gt_SlivanBossFightController = TriggerCreate("gt_SlivanBossFightController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Creeper Spawning
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossCreeperSpawning_Func (bool testConds, bool runActions) {
    int autoBBA3CF32_n;
    int autoBBA3CF32_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBBA3CF32_n = libNtve_gf_DifficultyValueInt(10, 10, 10, 10);
    for (autoBBA3CF32_i = 1; autoBBA3CF32_i <= autoBBA3CF32_n; autoBBA3CF32_i += 1) {
        if ((UnitGroupCount(UnitGroup("SlivanCreep", 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= libNtve_gf_DifficultyValueInt(10, 10, 10, 10))) {
            break;
        }

        if ((UnitIsAlive(UnitFromId(1060331887)) == false)) {
            return true;
        }

        gf_SlivanBossCreeperSpawnAddBehavior();
        Wait(libNtve_gf_DifficultyValueFixed(0.4, 0.4, 0.33, 0.33), c_timeAI);
    }
    Wait(2.0, c_timeAI);
    UnitGroupLoopBegin(gv_slivanBossCreepers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupRemove(gv_slivanBossCreepers, UnitGroupLoopCurrent());
        gf_AddUnittoPrimalZergAttackers(UnitGroupLoopCurrent(), UnitGetPosition(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossCreeperSpawning_Init () {
    gt_SlivanBossCreeperSpawning = TriggerCreate("gt_SlivanBossCreeperSpawning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Creepers
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossCreepers_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_player3))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "SlivanCreep"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_slivanBossCreepers, EventUnit());
    Wait(2.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossCreepers_Init () {
    gt_SlivanBossCreepers = TriggerCreate("gt_SlivanBossCreepers_Func");
    TriggerEnable(gt_SlivanBossCreepers, false);
    TriggerAddEventUnitRegion(gt_SlivanBossCreepers, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Boss Creeper Movement
//--------------------------------------------------------------------------------------------------
bool gt_SlivanBossCreeperMovement_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_slivanVariable) == false)) {
            TriggerEnable(gt_SlivanBossCreepers, false);
            return true;
        }

        UnitGroupLoopBegin(gv_slivanBossCreepers);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
            }

        }
        UnitGroupLoopEnd();
        if ((RandomInt(1, 12) == 1) && (UnitGetCustomValue(UnitFromId(1060331887), 0) < 1.0)) {
            UnitIssueOrder(gv_slivanVariable, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(41))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanBossCreeperMovement_Init () {
    gt_SlivanBossCreeperMovement = TriggerCreate("gt_SlivanBossCreeperMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Pathing Dummy
//--------------------------------------------------------------------------------------------------
bool gt_SlivanPathingDummy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_slivanPathingDummy) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1060331887)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_slivanPathingDummy, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_slivanVariable)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanPathingDummy_Init () {
    gt_SlivanPathingDummy = TriggerCreate("gt_SlivanPathingDummy_Func");
    TriggerEnable(gt_SlivanPathingDummy, false);
    TriggerAddEventTimePeriodic(gt_SlivanPathingDummy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slivan Dies
//--------------------------------------------------------------------------------------------------
bool gt_SlivanDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_slivanTimer, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_SlivanBossFightController);
    TriggerEnable(gt_SlivanPathingDummy, false);
    UnitRemove(gv_slivanPathingDummy);
    libCOMI_gf_ShowHideSingularBossBarVoidCampaign(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlivanDies_Init () {
    gt_SlivanDies = TriggerCreate("gt_SlivanDies_Func");
    TriggerAddEventUnitDied(gt_SlivanDies, UnitRefFromVariable("gv_slivanVariable"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Primal Zerg Attacks
//--------------------------------------------------------------------------------------------------
bool gt_PrimalZergAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_primalZergAttackers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) >= 1)) {
            lv_closestUnit = UnitGroupClosestToPoint(gv_playerUnits, UnitGetPosition(UnitGroupLoopCurrent()));
            if ((UnitGetType(UnitGroupLoopCurrent()) == "SlivanCreep")) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_closestUnit)), c_orderQueueReplace);
                if ((UnitHasBehavior(UnitGroupLoopCurrent(), "SlivanCreepBoom") == false)) {
                    if ((UnitGroupCount(UnitGroup(null, gv_player3, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), "SlivanCreepBoom", UnitGroupLoopCurrent(), 1);
                    }

                }

            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_closestUnit)), c_orderQueueReplace);
            }
        }
        else {
            if ((RandomInt(1, 5) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("move", 0), EventUnit()), c_orderQueueReplace);
            }

        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrimalZergAttacks_Init () {
    gt_PrimalZergAttacks = TriggerCreate("gt_PrimalZergAttacks_Func");
    TriggerAddEventTimePeriodic(gt_PrimalZergAttacks, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetPrimal Hive unit group
//--------------------------------------------------------------------------------------------------
bool gt_SetPrimalHiveunitgroup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(140540119));
    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(1570701461));
    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(1396865075));
    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(1878039947));
    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(161210866));
    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(92015588));
    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(1973156512));
    UnitGroupAdd(gv_primalHiveUnitGroup, UnitFromId(172101507));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetPrimalHiveunitgroup_Init () {
    gt_SetPrimalHiveunitgroup = TriggerCreate("gt_SetPrimalHiveunitgroup_Func");
    TriggerAddEventMapInit(gt_SetPrimalHiveunitgroup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Primal Hive remaining variable
//--------------------------------------------------------------------------------------------------
bool gt_UpdatePrimalHiveremainingvariable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_primalHivesremaining = UnitGroupCount(gv_primalHiveUnitGroup, c_unitCountAlive);
    TriggerExecute(gt_UpdateObjectiveKillPrimalHives, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdatePrimalHiveremainingvariable_Init () {
    gt_UpdatePrimalHiveremainingvariable = TriggerCreate("gt_UpdatePrimalHiveremainingvariable_Func");
    TriggerAddEventTimePeriodic(gt_UpdatePrimalHiveremainingvariable, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Objective Kill Primal Hives
//--------------------------------------------------------------------------------------------------
bool gt_CreateObjectiveKillPrimalHives_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderPrimary");
    libCOMI_gf_SetObjectiveRequiredCountCampaign("PlaceholderPrimary", UnitGroupCount(gv_primalHiveUnitGroup, c_unitCountAlive));
    gv_objectiveKillPrimalHives = ObjectiveLastCreated();
    ObjectiveSetPriority(gv_objectiveKillPrimalHives, 10);
    TriggerExecute(gt_UpdateObjectiveKillPrimalHives, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateObjectiveKillPrimalHives_Init () {
    gt_CreateObjectiveKillPrimalHives = TriggerCreate("gt_CreateObjectiveKillPrimalHives_Func");
    TriggerAddEventMapInit(gt_CreateObjectiveKillPrimalHives);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Objective Kill Primal Hives
//--------------------------------------------------------------------------------------------------
bool gt_UpdateObjectiveKillPrimalHives_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_primalHivesremaining);
    TextExpressionSetToken("Param/Expression/E8461FBE", "Primal Hives Remaining", IntToText(gv_primalHivesremaining));
    ObjectiveSetName(gv_objectiveKillPrimalHives, TextExpressionAssemble("Param/Expression/E8461FBE"));
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_CompleteObjectiveKillPrimalHives, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateObjectiveKillPrimalHives_Init () {
    gt_UpdateObjectiveKillPrimalHives = TriggerCreate("gt_UpdateObjectiveKillPrimalHives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Complete Objective Kill Primal Hives
//--------------------------------------------------------------------------------------------------
bool gt_CompleteObjectiveKillPrimalHives_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_primalHiveUnitGroup, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderPrimary", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(5.0, c_timeGame);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    UISetCursorVisible(PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CompleteObjectiveKillPrimalHives_Init () {
    gt_CompleteObjectiveKillPrimalHives = TriggerCreate("gt_CompleteObjectiveKillPrimalHives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Objective Kill Slivan Jr.
//--------------------------------------------------------------------------------------------------
bool gt_CreateObjectiveKillSlivanJr_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("PlaceholderSecondary");
    ObjectiveSetName(ObjectiveLastCreated(), StringExternal("Param/Value/2AFC9A12"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateObjectiveKillSlivanJr_Init () {
    gt_CreateObjectiveKillSlivanJr = TriggerCreate("gt_CreateObjectiveKillSlivanJr_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Complete Objective Kill Silvan Jr.
//--------------------------------------------------------------------------------------------------
bool gt_CompleteObjectiveKillSilvanJr_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_ZS_SetMissionObjectiveState("PlaceholderSecondary", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(5.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CompleteObjectiveKillSilvanJr_Init () {
    gt_CompleteObjectiveKillSilvanJr = TriggerCreate("gt_CompleteObjectiveKillSilvanJr_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Lost
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseLost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cameraTargetEndGame;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_player1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)))) {
            return false;
        }

        if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_player2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    ObjectiveSetState(gv_objectiveKillPrimalHives, c_objectiveStateFailed);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    UISetCursorVisible(PlayerGroupAll(), true);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_player1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_NondefeatedPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/3FE7E873"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }

    if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_player2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true)) {
        libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_NondefeatedPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/B9F0E0F0"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseLost_Init () {
    gt_DefeatBaseLost = TriggerCreate("gt_DefeatBaseLost_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseLost, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_GroopsAndAllys_Init();
    gt_Computerpresets_Init();
    gt_Music_Init();
    gt_HeroStart_Init();
    gt_Settech_Init();
    gt_Objective3dies_Init();
    gt_Objective4dies_Init();
    gt_HammerIntrotransmission_Init();
    gt_Scvandbunker2_Init();
    gt_Objective1terran2_Init();
    gt_StartObjective1terran2_Init();
    gt_Scvandbunker_Init();
    gt_Objective1terran_Init();
    gt_StartObjective1terran_Init();
    gt_Stopping5south_Init();
    gt_StartObjective5south_Init();
    gt_Objective5southinitialisation_Init();
    gt_Objective5southping_Init();
    gt_Objective5southmasterstart_Init();
    gt_Wave5southping_Init();
    gt_Wave5southpingdestroy_Init();
    gt_Stopping3_Init();
    gt_StartObjective3_Init();
    gt_Objective1initialisation2_Init();
    gt_Objective1ping2_Init();
    gt_Objective5northmasterstart_Init();
    gt_Wave1ping2_Init();
    gt_Wave1pingdestroy3_Init();
    gt_Stopping4_Init();
    gt_StartObjective4_Init();
    gt_Objective1initialisation3_Init();
    gt_Objective4farping_Init();
    gt_Objective4farmasterstart_Init();
    gt_Wave4farping_Init();
    gt_Wave4farpingdestroy_Init();
    gt_Stopping4close_Init();
    gt_StartObjective4close_Init();
    gt_Objective4closeinitialisation_Init();
    gt_Objective4closeping_Init();
    gt_Objective4closemasterstart_Init();
    gt_Wave4closeping_Init();
    gt_Wave4closepingdestroy_Init();
    gt_AiInit_Init();
    gt_Stopping3bottom_Init();
    gt_StartObjective3bottom_Init();
    gt_Objective3bottominitialisation_Init();
    gt_Objective3bottomping_Init();
    gt_Objective3bottommasterstart_Init();
    gt_Wave3bottomping_Init();
    gt_Wave3bottompingdestroy_Init();
    gt_Stopping3top_Init();
    gt_StartObjective3top_Init();
    gt_Objective3topinitialisation_Init();
    gt_Objective3topping_Init();
    gt_Objective3topmasterstart_Init();
    gt_Wave3topping_Init();
    gt_Wave3toppingdestroy_Init();
    gt_Stopping2_Init();
    gt_StartObjective2_Init();
    gt_Objective2initialisation_Init();
    gt_Objective2ping_Init();
    gt_Objective2masterstart_Init();
    gt_Wave2ping_Init();
    gt_Wave1pingdestroy2_Init();
    gt_Stopping_Init();
    gt_StartObjective1_Init();
    gt_Objective1initialisation_Init();
    gt_Objective1ping_Init();
    gt_Objective1masterstart_Init();
    gt_Wave1ping_Init();
    gt_Wave1pingdestroy_Init();
    gt_GiveSlivanmorehp_Init();
    gt_StopSlivanPing_Init();
    gt_Slivanping_Init();
    gt_Slivanpingifplayerentersregion_Init();
    gt_Slivanpingifplayer2entersregion_Init();
    gt_Attachplayer1unitstogroup_Init();
    gt_Removeplayer1unitsfromgroup_Init();
    gt_Attachplayer2unitstogroup_Init();
    gt_Removeplayer2unitsfromgroup_Init();
    gt_SlivanBossFightController_Init();
    gt_SlivanBossCreeperSpawning_Init();
    gt_SlivanBossCreepers_Init();
    gt_SlivanBossCreeperMovement_Init();
    gt_SlivanPathingDummy_Init();
    gt_SlivanDies_Init();
    gt_PrimalZergAttacks_Init();
    gt_SetPrimalHiveunitgroup_Init();
    gt_UpdatePrimalHiveremainingvariable_Init();
    gt_CreateObjectiveKillPrimalHives_Init();
    gt_UpdateObjectiveKillPrimalHives_Init();
    gt_CompleteObjectiveKillPrimalHives_Init();
    gt_CreateObjectiveKillSlivanJr_Init();
    gt_CompleteObjectiveKillSilvanJr_Init();
    gt_DefeatBaseLost_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
