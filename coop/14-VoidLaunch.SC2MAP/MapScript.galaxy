//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Void Launch
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"
include "LibARRA"
include "ai3E812353"
include "aiBDA87FA6"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
    libARRA_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_c_TotalShuttlesCreated = 0;
const int gv_c_LaunchFacGroups_SizeOf = 3;
const int gv_c_ShuttleWaveCount = 7;
const string gv_c_BonusObjectiveEscortType = "ResearchVesselLanded";
const string gv_launchFacilityType = "ProtossDockingBayUnit";
const int gv_pLAYER_03_ENEMY = 8;
const int gv_pLAYER_04_ENEMY = 9;
const int gv_pLAYER_05_SHUTTLE = 10;
const int gv_pLAYER_06_JUMPGATES = 6;
const int gv_pLAYER_07_BONUS_OBJECTIVE = 7;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_LaunchLocation_LEFT = 0;
const int ge_LaunchLocation_MIDDLE = 1;
const int ge_LaunchLocation_RIGHT = 2;
const int ge_ExitLocation__None = 0;
const int ge_ExitLocation_LEFT = 1;
const int ge_ExitLocation_MIDDLE = 2;
const int ge_ExitLocation_RIGHT = 3;
const int ge_AnimateFacility_Open = 0;
const int ge_AnimateFacility_Close = 1;
const int ge_JumpGateState__Unititialized = 0;
const int ge_JumpGateState_Activate = 1;
const int ge_JumpGateState_Deactivate = 2;
const int ge_LandedFlying__Invalid = 0;
const int ge_LandedFlying_Landed = 1;
const int ge_LandedFlying_Flying = 2;
const int ge_ShuttlePoint_ShuttlePoint_SpawnPoint = 0;
const int ge_ShuttlePoint_ShuttlePoint_Destination = 1;
const int ge_ShuttlePoint_ShuttlePoint_SplitPoint = 2;
const int ge_ShuttlePoint_ShuttlePoint_SplitDestination = 3;
const int ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination = 0;
const int ge_ShuttleWaveBehavior_ShuttleBehavior_SplitToNewDestination = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_leaderboardShuttleScoreFinal;
int gv_leaderboardBonusScoreFinal;
int[6] gv_shuttleKills;
string gv_evacShuttleType;
unit[gv_c_LaunchFacGroups_SizeOf + 1] gv_dockingBayUnits;
bool[gv_c_LaunchFacGroups_SizeOf + 1] gv_dockingBayBusy;
point[gv_c_LaunchFacGroups_SizeOf + 1] gv_shuttleEscapePoint;
unit[gv_c_LaunchFacGroups_SizeOf + 1] gv_warpConduit;
fixed gv_launchTrans_WAIT;
unitgroup gv_allEvacShuttles;
bool[gv_c_ShuttleWaveCount + 1] gv_shuttleLaunched;
unitgroup gv_dockingBays;
bool gv_shuttleEscapeThisWave;
int gv_escortIncrement;
int gv_wave03Destination;
unitgroup[gv_c_ShuttleWaveCount + 1] gv_shuttlesActive;
int gv_currentWave;
int gv_warningCounter;
unit gv_warningShuttle;
int gv_warningTransmission;
point gv_escapedShuttlePosition;
int[4] gv_warpConduitState;
int gv_escapedShuttles;
fixed gv_bonusObjectiveTroubleInterval;
timer gv_bonusObjectiveTroubleTimer;
point gv_player03Target;
point gv_player04Target;
point gv_victoryPan;
bool gv_alternateVictory;
int gv_objectiveNoShuttleCanEscape;
int gv_objectiveShuttlesAllowedToEscapeMax;
int gv_objectiveShuttlesAllowedToEscapeMissed;
int gv_objectiveDestroyDominionBase;
int gv_shuttleWavesRemaining;
int gv_objectiveRescueStalkers2;
int gv_bonusObjectiveEscortsEscorted;
int gv_bonusObjectiveEscortsLost;
int gv_mechanicDifficulty;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
fixed gv_shuttleShields;
fixed gv_shuttleLife;
fixed gv_shuttleSpeed;
fixed gv_bonusObjectiveLife;

void InitGlobals () {
    int init_i;

    gv_evacShuttleType = "ProtossFrigate";
    gv_launchTrans_WAIT = 13.0;
    gv_allEvacShuttles = UnitGroupEmpty();
    gv_dockingBays = UnitGroupEmpty();
    gv_wave03Destination = ge_ExitLocation__None;
    for (init_i = 0; init_i <= gv_c_ShuttleWaveCount; init_i += 1) {
        gv_shuttlesActive[init_i] = UnitGroupEmpty();
    }
    gv_warningTransmission = c_invalidTransmissionId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_warpConduitState[init_i] = ge_JumpGateState__Unititialized;
    }
    gv_bonusObjectiveTroubleInterval = 60.0;
    gv_bonusObjectiveTroubleTimer = TimerCreate();
    gv_player03Target = PlayerStartLocation(gv_pLAYER_01_USER);
    gv_player04Target = PlayerStartLocation(gv_pLAYER_02_USER);
    gv_objectiveNoShuttleCanEscape = c_invalidObjectiveId;
    gv_objectiveDestroyDominionBase = c_invalidObjectiveId;
    gv_shuttleWavesRemaining = gv_c_ShuttleWaveCount;
    gv_objectiveRescueStalkers2 = c_invalidObjectiveId;
    gv_mechanicDifficulty = 2;
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_UntitledAction001 (bool lp_lastSpawnerForWave);
void gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip);
void gf_ObjectiveMarker (unit lp_unit);
void gf_ShuttleCreateWave (int lp_shuttleWave, string lp_shuttleType, int lp_shuttleCount, int lp_dockingBay, int lp_shuttleDestination, int lp_shuttleWaveBehavior, int lp_resourceSize, int lp_techLevel, bool lp_lastSpawnerForWave);
void gf_ShuttleBirth (unit lp_shuttle);
void gf_AssignEscortsToShuttles (unitgroup lp_shuttleGroup, unitgroup lp_escortGroup, point lp_startLocation, point lp_escapeDestination);
void gf_ShuttleCreateEscort (unit lp_escort, int lp_dockingBay, point lp_destination);
void gf_ShuttleLaunchAnimate (unit lp_dockingBay, int lp_statetoenter);
void gf_CreateShuttlePathArrowPings (unitgroup lp_unitgroup);
void gf_ShuttleDeathWatcher (int lp_shuttleWaveToWatch);
void gf_ShuttleDiesMessage (unit lp_shuttle, int lp_currentShuttleWave);
void gf_ActivateDeactivateWarpConduit (unit lp_unit, int lp_state);
void gf_WarpConduitPingandAnimation (unit lp_warpConduit);
int gf_BonusObjectiveEscortisLandedFlying (unit lp_bonusObjectiveEscort);
void gf_BonusObjectiveLogic (point lp_destinationLocation);
void gf_BonusObjectivePath (unit lp_objectiveUnit);
void gf_ShrineAnimation (unit lp_shrine, bool lp_activateDeactivate);
void gf_HoldOutAttackWave (unit lp_researchVessel, point lp_targetLocation);
void gf_ShuttleBehaviorStraightToDestination (unit lp_unit);
void gf_ShuttleAIThink2 (unit lp_unit);
point gf_GetShuttleSplitPoint (unit lp_shuttle);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ShuttleSendWave01;
trigger gt_ShuttleSendWave02;
trigger gt_ShuttleSendWave03;
trigger gt_ShuttleSendWave04;
trigger gt_ShuttleSendWave05;
trigger gt_ShuttleSendWave06;
trigger gt_ShuttleSendWave07;
trigger gt_ShuttleEscapeWarning;
trigger gt_TransmissionEscapeWarningQ;
trigger gt_EscapingShuttleDestroyed;
trigger gt_ShuttleJumpProgressBar;
trigger gt_ShuttleEscapes;
trigger gt_ShuttleEscapesQ;
trigger gt_ShuttleEscapesProgressWarningQ;
trigger gt_TransmissionShuttleWaveDiesQ;
trigger gt_ActivateWarpConduitLeft;
trigger gt_ActivateWarpConduitMiddle;
trigger gt_ActivateWarpConduitRight;
trigger gt_TransmissionShuttleLaunch01Q;
trigger gt_TransmissionShuttleLaunch02Q;
trigger gt_TransmissionShuttleLaunch03Q;
trigger gt_TransmissionShuttleLaunch04Q;
trigger gt_TransmissionShuttleLaunch05Q;
trigger gt_TransmissionShuttleLaunch06Q;
trigger gt_TransmissionShuttleLaunch07Q;
trigger gt_TransmissionShuttleLaunch08Q;
trigger gt_IceWallCollapse01;
trigger gt_IceWallCollapse02;
trigger gt_IceWallCollapse03;
trigger gt_IceWallCollapse04;
trigger gt_IceWallCollapse05;
trigger gt_IceWallCollapse06;
trigger gt_BonusObjectiveRevealTransmissionQ;
trigger gt_BonusObjectiveMoveOutTransmissionQ;
trigger gt_BonusObjectiveCompleteTransmissionQ;
trigger gt_BonusObjectiveFailedTransmissionQ;
trigger gt_BonusObjectiveFinalStageTransmissionQ;
trigger gt_SetupBonusObjective;
trigger gt_StartBonusObjective01;
trigger gt_StartBonusObjective02;
trigger gt_StartBonusObjective03;
trigger gt_AttackWaveTransmissionQ;
trigger gt_BonusObjectiveSentryForceFields;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_AttackWave08;
trigger gt_AttackWave09;
trigger gt_AttackWave10;
trigger gt_DefeatPrimaryObjectiveFailed;
trigger gt_VictorySequence;
trigger gt_ObjectiveNoShuttleCanEscapeCreate;
trigger gt_ObjectiveNoShuttleCanEscapeUpdate;
trigger gt_ObjectiveNoShuttleCanEscapeComplete;
trigger gt_ObjectiveNoShuttleCanEscapeFailed;
trigger gt_ObjectiveDestroyAllProtossShuttlesCreate;
trigger gt_ObjectiveDestroyAllProtossShuttlesUpdate;
trigger gt_ObjectiveDestroyAllProtossShuttlesComplete;
trigger gt_ObjectiveDestroyAllProtossShuttlesFailed;
trigger gt_BonusObjectiveEscortResearchersCreate;
trigger gt_BonusObjectiveEscortResearchersComplete;
trigger gt_BonusObjectiveEscortResearchersUpdate;
trigger gt_BonusObjectiveEscortResearchersFailed;
trigger gt_Init01LoadData;
trigger gt_Init03LoadingComplete;
trigger gt_Init02Players;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init08Difficulties;
trigger gt_StartAI;
trigger gt_StartGameQ;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_start(p); }
    if (cai_playerAI[p] == "aiBDA87FA6") { aiBDA87FA6_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_setDefGather(p, val); }
    if (cai_playerAI[p] == "aiBDA87FA6") { aiBDA87FA6_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_getCustomData(p); }
    if (cai_playerAI[p] == "aiBDA87FA6") { return aiBDA87FA6_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_getLastWave(p); }
    if (cai_playerAI[p] == "aiBDA87FA6") { return aiBDA87FA6_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_waves_run(p, target); }
    if (cai_playerAI[p] == "aiBDA87FA6") { aiBDA87FA6_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_waves_enable(p, val); }
    if (cai_playerAI[p] == "aiBDA87FA6") { aiBDA87FA6_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai3E812353") { ai3E812353_waves_stop(); }
    if (ai == "aiBDA87FA6") { aiBDA87FA6_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "aiBDA87FA6") { aiBDA87FA6_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai3E812353") { ai3E812353_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "aiBDA87FA6") { aiBDA87FA6_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "aiBDA87FA6") { return aiBDA87FA6_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "aiBDA87FA6") { return aiBDA87FA6_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai3E812353") { return ai3E812353_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "aiBDA87FA6") { return aiBDA87FA6_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai3E812353", 5);
    cai_start("aiBDA87FA6", 7);
    AICampaignStart(6);
    AICampaignStart(8);
    AICampaignStart(9);
    AICampaignStart(10);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    cai_waves_run(5, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    PlayerGroupAdd(target, 2);
    cai_waves_run(7, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_UntitledAction001 (bool lp_lastSpawnerForWave) {
    // Automatic Variable Declarations
}

void gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;
    fixed lv_angle;

    // Automatic Variable Declarations
    bool auto76F90853_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto76F90853_val = lp_objectiveType;
    if (auto76F90853_val == true) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 0.6;
        lv_model = "PingSimple";
        lv_angle = 270.0;
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_model, lp_position, lv_color, 0.0, lv_angle);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libCOMI_gt_VoidPingSound, true, false);
}

trigger auto_gf_ObjectiveMarker_Trigger = null;
unit auto_gf_ObjectiveMarker_lp_unit;

void gf_ObjectiveMarker (unit lp_unit) {
    auto_gf_ObjectiveMarker_lp_unit = lp_unit;

    if (auto_gf_ObjectiveMarker_Trigger == null) {
        auto_gf_ObjectiveMarker_Trigger = TriggerCreate("auto_gf_ObjectiveMarker_TriggerFunc");
    }

    TriggerExecute(auto_gf_ObjectiveMarker_Trigger, false, false);
}

bool auto_gf_ObjectiveMarker_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_ObjectiveMarker_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(lp_unit), StringExternal("Param/Value/3585668F"));
    PingSetUnit(PingLastCreated(), lp_unit);
    while (!((UnitIsAlive(lp_unit) == false))) {
        Wait(0.5, c_timeAI);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_ShuttleCreateWave_Trigger = null;
int auto_gf_ShuttleCreateWave_lp_shuttleWave;
string auto_gf_ShuttleCreateWave_lp_shuttleType;
int auto_gf_ShuttleCreateWave_lp_shuttleCount;
int auto_gf_ShuttleCreateWave_lp_dockingBay;
int auto_gf_ShuttleCreateWave_lp_shuttleDestination;
int auto_gf_ShuttleCreateWave_lp_shuttleWaveBehavior;
int auto_gf_ShuttleCreateWave_lp_resourceSize;
int auto_gf_ShuttleCreateWave_lp_techLevel;
bool auto_gf_ShuttleCreateWave_lp_lastSpawnerForWave;

void gf_ShuttleCreateWave (int lp_shuttleWave, string lp_shuttleType, int lp_shuttleCount, int lp_dockingBay, int lp_shuttleDestination, int lp_shuttleWaveBehavior, int lp_resourceSize, int lp_techLevel, bool lp_lastSpawnerForWave) {
    auto_gf_ShuttleCreateWave_lp_shuttleWave = lp_shuttleWave;
    auto_gf_ShuttleCreateWave_lp_shuttleType = lp_shuttleType;
    auto_gf_ShuttleCreateWave_lp_shuttleCount = lp_shuttleCount;
    auto_gf_ShuttleCreateWave_lp_dockingBay = lp_dockingBay;
    auto_gf_ShuttleCreateWave_lp_shuttleDestination = lp_shuttleDestination;
    auto_gf_ShuttleCreateWave_lp_shuttleWaveBehavior = lp_shuttleWaveBehavior;
    auto_gf_ShuttleCreateWave_lp_resourceSize = lp_resourceSize;
    auto_gf_ShuttleCreateWave_lp_techLevel = lp_techLevel;
    auto_gf_ShuttleCreateWave_lp_lastSpawnerForWave = lp_lastSpawnerForWave;

    if (auto_gf_ShuttleCreateWave_Trigger == null) {
        auto_gf_ShuttleCreateWave_Trigger = TriggerCreate("auto_gf_ShuttleCreateWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleCreateWave_Trigger, false, false);
}

bool auto_gf_ShuttleCreateWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_shuttleWave = auto_gf_ShuttleCreateWave_lp_shuttleWave;
    string lp_shuttleType = auto_gf_ShuttleCreateWave_lp_shuttleType;
    int lp_shuttleCount = auto_gf_ShuttleCreateWave_lp_shuttleCount;
    int lp_dockingBay = auto_gf_ShuttleCreateWave_lp_dockingBay;
    int lp_shuttleDestination = auto_gf_ShuttleCreateWave_lp_shuttleDestination;
    int lp_shuttleWaveBehavior = auto_gf_ShuttleCreateWave_lp_shuttleWaveBehavior;
    int lp_resourceSize = auto_gf_ShuttleCreateWave_lp_resourceSize;
    int lp_techLevel = auto_gf_ShuttleCreateWave_lp_techLevel;
    bool lp_lastSpawnerForWave = auto_gf_ShuttleCreateWave_lp_lastSpawnerForWave;

    // Variable Declarations
    unitgroup lv_l_EscortGroup;
    point lv_l_ShuttlePosition;
    int lv_l_DockingBayIndex;
    int lv_l_ShuttleIter;
    point lv_l_EvacPoint;
    string lv_unitUltimate;
    int lv_l_EvacPointIndex;
    fixed lv_l_ShuttleSpawnMoveToOffsetAngle;
    unit lv_l_CurrentShuttle;
    unitgroup lv_l_ShuttleGroup;

    // Automatic Variable Declarations
    int auto3339D23B_ae;
    const int auto3339D23B_ai = 1;
    unitgroup auto58A68AFD_g;
    int auto58A68AFD_u;
    unit auto58A68AFD_var;
    unitgroup autoE966CF05_g;
    int autoE966CF05_u;
    unit autoE966CF05_var;
    unitgroup auto515B2DBE_g;
    int auto515B2DBE_u;
    unit auto515B2DBE_var;
    int autoB0A24FFB_val;
    unitgroup autoBA386CB7_g;
    int autoBA386CB7_u;
    unit autoBA386CB7_var;

    // Variable Initialization
    lv_l_EscortGroup = UnitGroupEmpty();
    lv_unitUltimate = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_CombatAirUltimate, gv_pLAYER_05_SHUTTLE);
    lv_l_ShuttleGroup = UnitGroupEmpty();

    // Implementation
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    lv_l_DockingBayIndex = (lp_dockingBay);
    lv_l_EvacPointIndex = (lp_shuttleDestination);
    lv_l_EvacPoint = gv_shuttleEscapePoint[lv_l_EvacPointIndex];
    gv_shuttleEscapeThisWave = false;
    while (true) {
        if (((libCOMI_gf_GameIsOver() == true) || (UnitGroupCount(gv_dockingBays, c_unitCountAlive) == 0))) {
            return true;
        }
        else if ((UnitIsAlive(gv_dockingBayUnits[lv_l_DockingBayIndex]) == false)) {
            if (lv_l_DockingBayIndex >= (ge_LaunchLocation_RIGHT)) {
                lv_l_DockingBayIndex = (ge_LaunchLocation_LEFT);
            }
            else {
                lv_l_DockingBayIndex = lv_l_DockingBayIndex + 1;
            }
        }
        else if ((gv_dockingBayBusy[lv_l_DockingBayIndex] == true)) {
            while (!((gv_dockingBayBusy[lv_l_DockingBayIndex] == false))) {
                Wait(0.5, c_timeAI);
            }
        }
        else if (true) {
            break;
        }
    }
    gv_dockingBayBusy[lv_l_DockingBayIndex] = true;
    gf_ShuttleLaunchAnimate(gv_dockingBayUnits[lv_l_DockingBayIndex], ge_AnimateFacility_Open);
    gv_escortIncrement = 0;
    lv_l_ShuttlePosition = UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]);
    auto3339D23B_ae = lp_shuttleCount;
    lv_l_ShuttleIter = 1;
    for ( ; ( (auto3339D23B_ai >= 0 && lv_l_ShuttleIter <= auto3339D23B_ae) || (auto3339D23B_ai < 0 && lv_l_ShuttleIter >= auto3339D23B_ae) ) ; lv_l_ShuttleIter += auto3339D23B_ai ) {
        Wait(1.3, c_timeAI);
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        gv_shuttleKills[gv_c_TotalShuttlesCreated] += 1;
        libNtve_gf_UnitCreateFacingPoint(1, lp_shuttleType, 0, gv_pLAYER_05_SHUTTLE, lv_l_ShuttlePosition, lv_l_EvacPoint);
        libCOMI_gf_TrackUnitDamageTakenForScoreScreen(true, UnitLastCreated(), "KaldirShuttleDamage");
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, gv_shuttleLife);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, gv_shuttleShields);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, gv_shuttleSpeed);
        libCOMI_gf_DisplayUnitProgressBar(UnitLastCreated(), StringExternal("Param/Value/97C9F53F"), 1, 19);
        libCOMI_gf_ShowHideUnitProgressBar(UnitLastCreated(), false);
        libCOMI_gf_SetUnitInfoTextCampaign(UnitLastCreated(), StringExternal("Param/Value/EE304499"), StringExternal("Param/Value/78BD177F"), null);
        lv_l_CurrentShuttle = UnitLastCreated();
        gf_ShuttleBirth(lv_l_CurrentShuttle);
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitGroupAdd(gv_shuttlesActive[lp_shuttleWave], lv_l_CurrentShuttle);
        UnitGroupAdd(gv_allEvacShuttles, lv_l_CurrentShuttle);
        UnitGroupAdd(lv_l_ShuttleGroup, lv_l_CurrentShuttle);
        gf_ShuttleDiesMessage(UnitLastCreated(), lp_shuttleWave);
        libCOMI_gf_CreateAlertAtUnitCampaign("Trigger", StringExternal("Param/Value/7DB556F0"), null, UnitLastCreated());
        gf_ObjectiveMarker(UnitLastCreated());
        libARRA_gf_StorePointForUnit(UnitLastCreated(), (ge_ShuttlePoint_ShuttlePoint_SpawnPoint), lv_l_ShuttlePosition);
        libARRA_gf_StorePointForUnit(UnitLastCreated(), (ge_ShuttlePoint_ShuttlePoint_Destination), lv_l_EvacPoint);
        if ((lp_shuttleWaveBehavior == ge_ShuttleWaveBehavior_ShuttleBehavior_SplitToNewDestination)) {
            libARRA_gf_StorePointForUnit(UnitLastCreated(), (ge_ShuttlePoint_ShuttlePoint_SplitDestination), gv_shuttleEscapePoint[(ModI(lv_l_ShuttleIter, 3) + 1)]);
        }
        else {
            libARRA_gf_StorePointForUnit(UnitLastCreated(), (ge_ShuttlePoint_ShuttlePoint_SplitDestination), lv_l_EvacPoint);
        }
        libARRA_gf_StorePointForUnit(UnitLastCreated(), (ge_ShuttlePoint_ShuttlePoint_SplitPoint), gf_GetShuttleSplitPoint(UnitLastCreated()));
        Wait(3.0, c_timeAI);
        if ((lp_shuttleCount > 1) && (lv_l_ShuttleIter < lp_shuttleCount)) {
            lv_l_ShuttleSpawnMoveToOffsetAngle = AngleBetweenPoints(UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]), lv_l_EvacPoint);
            if ((ModI(lv_l_ShuttleIter, 2) == 0)) {
                lv_l_ShuttleSpawnMoveToOffsetAngle = (lv_l_ShuttleSpawnMoveToOffsetAngle + 90.0);
            }
            else {
                lv_l_ShuttleSpawnMoveToOffsetAngle = (lv_l_ShuttleSpawnMoveToOffsetAngle - 90.0);
            }
            UnitIssueOrder(lv_l_CurrentShuttle, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]), ((4.0 + CatalogFieldValueGetAsInt(c_gameCatalogUnit, gv_evacShuttleType, "SeparationRadius", c_playerAny)) * (lp_shuttleCount - lv_l_ShuttleIter)), lv_l_ShuttleSpawnMoveToOffsetAngle)), c_orderQueueReplace);
            UnitIssueOrder(lv_l_CurrentShuttle, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }

    }
    if ((lp_lastSpawnerForWave == true)) {
        gv_shuttleLaunched[lp_shuttleWave] = true;
    }

    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_05_SHUTTLE, UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_05_SHUTTLE, c_playerAny, lp_resourceSize, lp_techLevel, UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]), true);
    lv_l_EscortGroup = libCOMI_gf_LastCreatedCoopAttackForce();
    if ((libCOMI_gf_AISuspectDetectionDanger(gv_pLAYER_05_SHUTTLE) == true)) {
        UnitCreate(1, libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_CombatDetector, gv_pLAYER_05_SHUTTLE), 0, gv_pLAYER_05_SHUTTLE, UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]), 270.0);
        UnitGroupAddUnitGroup(lv_l_EscortGroup, UnitLastCreatedGroup());
    }

    if ((gv_currentWave >= 3)) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(gv_mechanicDifficulty, 0, 0, 1, 1, 3, 3), "HybridNemesis", 0, gv_pLAYER_05_SHUTTLE, UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]), 270.0);
        UnitGroupAddUnitGroup(lv_l_EscortGroup, UnitLastCreatedGroup());
    }
    if ((gv_currentWave >= 6)) {
        UnitCreate(libCOMI_gf_DifficultyValueInt2(gv_mechanicDifficulty, 0, 0, 0, 1, 3, 3), "HybridNemesis", 0, gv_pLAYER_05_SHUTTLE, UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]), 270.0);
        UnitGroupAddUnitGroup(lv_l_EscortGroup, UnitLastCreatedGroup());
    }
    auto58A68AFD_g = lv_l_EscortGroup;
    auto58A68AFD_u = UnitGroupCount(auto58A68AFD_g, c_unitCountAll);
    for (;; auto58A68AFD_u -= 1) {
        auto58A68AFD_var = UnitGroupUnitFromEnd(auto58A68AFD_g, auto58A68AFD_u);
        if (auto58A68AFD_var == null) { break; }
        gf_ShuttleCreateEscort(auto58A68AFD_var, lv_l_DockingBayIndex, lv_l_EvacPoint);
    }
    autoE966CF05_g = gv_shuttlesActive[lp_shuttleWave];
    autoE966CF05_u = UnitGroupCount(autoE966CF05_g, c_unitCountAll);
    for (;; autoE966CF05_u -= 1) {
        autoE966CF05_var = UnitGroupUnitFromEnd(autoE966CF05_g, autoE966CF05_u);
        if (autoE966CF05_var == null) { break; }
        libNtve_gf_MakeUnitFacePoint(autoE966CF05_var, lv_l_EvacPoint, 1.5);
    }
    Wait(3.0, c_timeAI);
    AIAttackWaveSetTargetEscortNL(gv_pLAYER_05_SHUTTLE, gv_shuttlesActive[lp_shuttleWave], 0);
    AIAttackWaveSetGatherPoint(gv_pLAYER_05_SHUTTLE, UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]));
    gf_AssignEscortsToShuttles(gv_shuttlesActive[lp_shuttleWave], lv_l_EscortGroup, UnitGetPosition(gv_dockingBayUnits[lv_l_DockingBayIndex]), lv_l_EvacPoint);
    AIAttackWaveSend(gv_pLAYER_05_SHUTTLE, 5, false);
    Wait(15.0, c_timeAI);
    gf_ShuttleLaunchAnimate(gv_dockingBayUnits[lv_l_DockingBayIndex], ge_AnimateFacility_Close);
    gv_dockingBayBusy[lv_l_DockingBayIndex] = false;
    auto515B2DBE_g = gv_shuttlesActive[lp_shuttleWave];
    auto515B2DBE_u = UnitGroupCount(auto515B2DBE_g, c_unitCountAll);
    for (;; auto515B2DBE_u -= 1) {
        auto515B2DBE_var = UnitGroupUnitFromEnd(auto515B2DBE_g, auto515B2DBE_u);
        if (auto515B2DBE_var == null) { break; }
        UnitIssueOrder(auto515B2DBE_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_l_EvacPoint), c_orderQueueReplace);
        autoB0A24FFB_val = lp_shuttleWaveBehavior;
        if (autoB0A24FFB_val == ge_ShuttleWaveBehavior_ShuttleBehavior_SplitToNewDestination) {
            gf_ShuttleAIThink2(auto515B2DBE_var);
        }
        else {
            gf_ShuttleBehaviorStraightToDestination(auto515B2DBE_var);
        }
    }
    gf_CreateShuttlePathArrowPings(lv_l_ShuttleGroup);
    while (true) {
        if ((UnitGroupCount(gv_shuttlesActive[lp_shuttleWave], c_unitCountAlive) == 0)) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    autoBA386CB7_g = lv_l_EscortGroup;
    autoBA386CB7_u = UnitGroupCount(autoBA386CB7_g, c_unitCountAll);
    for (;; autoBA386CB7_u -= 1) {
        autoBA386CB7_var = UnitGroupUnitFromEnd(autoBA386CB7_g, autoBA386CB7_u);
        if (autoBA386CB7_var == null) { break; }
        UnitIssueOrder(autoBA386CB7_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitResetSpeed(autoBA386CB7_var);
        AIRemoveUnitFromAnyWaves(autoBA386CB7_var);
        AISetUnitSuicide(autoBA386CB7_var, true);
        AISetUnitScriptControlled(autoBA386CB7_var, false);
    }
    return true;
}

trigger auto_gf_ShuttleBirth_Trigger = null;
unit auto_gf_ShuttleBirth_lp_shuttle;

void gf_ShuttleBirth (unit lp_shuttle) {
    auto_gf_ShuttleBirth_lp_shuttle = lp_shuttle;

    if (auto_gf_ShuttleBirth_Trigger == null) {
        auto_gf_ShuttleBirth_Trigger = TriggerCreate("auto_gf_ShuttleBirth_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleBirth_Trigger, false, false);
}

bool auto_gf_ShuttleBirth_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shuttle = auto_gf_ShuttleBirth_lp_shuttle;

    // Automatic Variable Declarations
    // Implementation
    UnitSetState(lp_shuttle, c_unitStateInvulnerable, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shuttle), c_animNameDefault, "Birth", 0, 0.0);
    UnitIssueOrder(lp_shuttle, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(2.9, c_timeAI);
    UnitSetState(lp_shuttle, c_unitStateInvulnerable, false);
    UnitSetState(lp_shuttle, c_unitStateTooltipable, true);
    return true;
}

void gf_AssignEscortsToShuttles (unitgroup lp_shuttleGroup, unitgroup lp_escortGroup, point lp_startLocation, point lp_escapeDestination) {
    // Variable Declarations
    fixed lv_l_AngleToExit;
    unit lv_l_EscortIter;
    int lv_l_ShuttleIndex;
    unit lv_l_ShuttleIter;
    fixed lv_l_DistanceFromShuttle;
    fixed lv_l_DistanceFromShuttleIncrease;
    int lv_l_EscortsPerRow;
    int lv_l_EscortsPerRowIter;
    point lv_l_BaseEscortOffset;
    point lv_l_EscortOffset;
    fixed lv_lEscortAngle;
    fixed lv_l_EscortBuffer;

    // Automatic Variable Declarations
    unitgroup auto0E98D9CE_g;
    int auto0E98D9CE_u;
    unitgroup auto8A9B869D_g;
    int auto8A9B869D_u;
    unit auto8A9B869D_var;

    // Variable Initialization

    // Implementation
    lv_l_EscortsPerRow = 5;
    lv_l_AngleToExit = AngleBetweenPoints(lp_startLocation, lp_escapeDestination);
    lv_l_DistanceFromShuttle = 7.0;
    lv_l_DistanceFromShuttleIncrease = 5.0;
    lv_lEscortAngle = 90.0;
    lv_l_EscortBuffer = 3.0;
    lv_l_EscortsPerRowIter = 0;
    auto0E98D9CE_g = lp_escortGroup;
    auto0E98D9CE_u = UnitGroupCount(auto0E98D9CE_g, c_unitCountAll);
    for (;; auto0E98D9CE_u -= 1) {
        lv_l_EscortIter = UnitGroupUnitFromEnd(auto0E98D9CE_g, auto0E98D9CE_u);
        if (lv_l_EscortIter == null) { break; }
        if ((lv_l_ShuttleIndex >= UnitGroupCount(lp_shuttleGroup, c_unitCountAlive))) {
            lv_l_ShuttleIndex = 1;
            lv_lEscortAngle += 180.0;
            if ((lv_l_EscortsPerRowIter >= lv_l_EscortsPerRow)) {
                lv_l_DistanceFromShuttle += lv_l_DistanceFromShuttleIncrease;
                lv_l_EscortsPerRowIter = 0;
            }
            else {
                lv_l_EscortsPerRowIter += 1;
            }
        }
        else {
            lv_l_ShuttleIndex += 1;
        }
        lv_l_ShuttleIter = UnitGroupUnit(lp_shuttleGroup, lv_l_ShuttleIndex);
        if ((lv_l_ShuttleIter == null)) {
            AISetGroupSuicide(lp_escortGroup, true);
            return ;
        }

        lv_l_BaseEscortOffset = PointWithOffsetPolar(UnitGetPosition(lv_l_ShuttleIter), lv_l_DistanceFromShuttle, lv_l_AngleToExit);
        lv_l_EscortOffset = PointWithOffsetPolar(lv_l_BaseEscortOffset, (lv_l_EscortBuffer * lv_l_EscortsPerRowIter), (lv_lEscortAngle + lv_l_AngleToExit));
        AIAttackWaveAddEscortUnit(gv_pLAYER_05_SHUTTLE, lv_l_EscortIter, lv_l_ShuttleIter, DistanceBetweenPoints(UnitGetPosition(lv_l_ShuttleIter), lv_l_EscortOffset), (AngleBetweenPoints(UnitGetPosition(lv_l_ShuttleIter), lv_l_EscortOffset) - UnitGetFacing(lv_l_ShuttleIter)));
    }
    auto8A9B869D_g = lp_escortGroup;
    auto8A9B869D_u = UnitGroupCount(auto8A9B869D_g, c_unitCountAll);
    for (;; auto8A9B869D_u -= 1) {
        auto8A9B869D_var = UnitGroupUnitFromEnd(auto8A9B869D_g, auto8A9B869D_u);
        if (auto8A9B869D_var == null) { break; }
        AISetUnitScriptControlled(auto8A9B869D_var, false);
    }
}

trigger auto_gf_ShuttleCreateEscort_Trigger = null;
unit auto_gf_ShuttleCreateEscort_lp_escort;
int auto_gf_ShuttleCreateEscort_lp_dockingBay;
point auto_gf_ShuttleCreateEscort_lp_destination;

void gf_ShuttleCreateEscort (unit lp_escort, int lp_dockingBay, point lp_destination) {
    auto_gf_ShuttleCreateEscort_lp_escort = lp_escort;
    auto_gf_ShuttleCreateEscort_lp_dockingBay = lp_dockingBay;
    auto_gf_ShuttleCreateEscort_lp_destination = lp_destination;

    if (auto_gf_ShuttleCreateEscort_Trigger == null) {
        auto_gf_ShuttleCreateEscort_Trigger = TriggerCreate("auto_gf_ShuttleCreateEscort_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleCreateEscort_Trigger, false, false);
}

bool auto_gf_ShuttleCreateEscort_TriggerFunc (bool testConds, bool runActions) {
    unit lp_escort = auto_gf_ShuttleCreateEscort_lp_escort;
    int lp_dockingBay = auto_gf_ShuttleCreateEscort_lp_dockingBay;
    point lp_destination = auto_gf_ShuttleCreateEscort_lp_destination;

    // Variable Declarations
    fixed lv_l_EscortHeight;

    // Automatic Variable Declarations
    int auto53D44124_val;

    // Variable Initialization

    // Implementation
    UnitSetPosition(lp_escort, UnitGetPosition(gv_dockingBayUnits[lp_dockingBay]), false);
    lv_l_EscortHeight = UnitGetHeight(lp_escort);
    if ((UnitGetType(lp_escort) == "Carrier")) {
        UnitMagazineArm(lp_escort, AbilityCommand("CarrierHangar", 0), libCOMI_gf_DifficultyValueInt2(gv_mechanicDifficulty, 0, 0, 3, 6, 8, 8));
    }

    UnitSetPropertyFixed(lp_escort, c_unitPropEnergyPercent, libCOMI_gf_DifficultyValueFixed2(gv_mechanicDifficulty, 0.0, 0.0, 50.0, 100.0, 100.0, 100.0));
    UnitSetHeight(lp_escort, 0.0, 0.0);
    UnitSetHeight(lp_escort, lv_l_EscortHeight, 1.5);
    SoundPlayOnUnit(SoundLink("Hybrid_Blink", -1), PlayerGroupAll(), lp_escort, 4.0, 100.0, 0.0);
    UnitIssueOrder(lp_escort, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(1.5, c_timeAI);
    gv_escortIncrement += 1;
    if ((UnitIsAlive(lp_escort) == false)) {
        return true;
    }

    auto53D44124_val = gv_escortIncrement;
    if (auto53D44124_val == 1) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) + 90.0))), c_orderQueueReplace);
    }
    else if (auto53D44124_val == 2) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) - 90.0))), c_orderQueueReplace);
    }
    else if (auto53D44124_val == 3) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) + 135.0))), c_orderQueueReplace);
    }
    else if (auto53D44124_val == 4) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) - 135.0))), c_orderQueueReplace);
    }
    else if (auto53D44124_val == 5) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) + 45.0))), c_orderQueueReplace);
    }
    else if (auto53D44124_val == 6) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) - 45.0))), c_orderQueueReplace);
    }
    else if (auto53D44124_val == 7) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) - 180.0))), c_orderQueueReplace);
    }
    else if (auto53D44124_val == 8) {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 8.0, (UnitGetFacing(lp_escort) - 0.0))), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lp_escort, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_escort), 11.0, (UnitGetFacing(lp_escort) + (90.0 + ((IntToFixed(gv_escortIncrement) - 8.0) * 30.0))))), c_orderQueueReplace);
    }
    return true;
}

trigger auto_gf_ShuttleLaunchAnimate_Trigger = null;
unit auto_gf_ShuttleLaunchAnimate_lp_dockingBay;
int auto_gf_ShuttleLaunchAnimate_lp_statetoenter;

void gf_ShuttleLaunchAnimate (unit lp_dockingBay, int lp_statetoenter) {
    auto_gf_ShuttleLaunchAnimate_lp_dockingBay = lp_dockingBay;
    auto_gf_ShuttleLaunchAnimate_lp_statetoenter = lp_statetoenter;

    if (auto_gf_ShuttleLaunchAnimate_Trigger == null) {
        auto_gf_ShuttleLaunchAnimate_Trigger = TriggerCreate("auto_gf_ShuttleLaunchAnimate_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleLaunchAnimate_Trigger, false, false);
}

bool auto_gf_ShuttleLaunchAnimate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dockingBay = auto_gf_ShuttleLaunchAnimate_lp_dockingBay;
    int lp_statetoenter = auto_gf_ShuttleLaunchAnimate_lp_statetoenter;

    // Automatic Variable Declarations
    int auto49EADA6B_val;

    // Implementation
    auto49EADA6B_val = lp_statetoenter;
    if (auto49EADA6B_val == ge_AnimateFacility_Open) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(3.3, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand Work A", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if (auto49EADA6B_val == ge_AnimateFacility_Close) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
        Wait(3.3, c_timeReal);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_dockingBay), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    }
    else {
    }
    return true;
}

trigger auto_gf_CreateShuttlePathArrowPings_Trigger = null;
unitgroup auto_gf_CreateShuttlePathArrowPings_lp_unitgroup;

void gf_CreateShuttlePathArrowPings (unitgroup lp_unitgroup) {
    auto_gf_CreateShuttlePathArrowPings_lp_unitgroup = lp_unitgroup;

    if (auto_gf_CreateShuttlePathArrowPings_Trigger == null) {
        auto_gf_CreateShuttlePathArrowPings_Trigger = TriggerCreate("auto_gf_CreateShuttlePathArrowPings_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateShuttlePathArrowPings_Trigger, false, false);
}

bool auto_gf_CreateShuttlePathArrowPings_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitgroup = auto_gf_CreateShuttlePathArrowPings_lp_unitgroup;

    int init_i;

    // Variable Declarations
    fixed lv_l_distancebetweenlaunchandevac;
    int[32] lv_l_pings;
    int lv_l_foreachint_i;
    int lv_l_distancechunks;
    fixed lv_l_distbwpings;
    fixed lv_l_delaybetweencreatingnewping;
    fixed lv_l_pinglifetime;
    unit lv_l_ShuttleGroupIter;
    int lv_l_DestinationIter;
    unitgroup[4] lv_l_ShuttleGroups;

    // Automatic Variable Declarations
    int autoF827F2DD_ae;
    const int autoF827F2DD_ai = 1;
    unitgroup auto837E7130_g;
    int auto837E7130_u;
    int autoF004CE9A_ae;
    const int autoF004CE9A_ai = 1;
    int auto8E28156E_ae;
    const int auto8E28156E_ai = 1;
    int auto7E2FB141_ae;
    const int auto7E2FB141_ai = 1;
    fixed autoE53BC187_at;
    const int autoEBD3EE55_ae = 31;
    const int autoEBD3EE55_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 31; init_i += 1) {
        lv_l_pings[init_i] = c_invalidPingId;
    }
    lv_l_distbwpings = 12.0;
    lv_l_delaybetweencreatingnewping = 0.1;
    lv_l_pinglifetime = 3.0;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_l_ShuttleGroups[init_i] = UnitGroupEmpty();
    }

    // Implementation
    while ((UnitGroupCount(lp_unitgroup, c_unitCountAlive) > 0)) {
        autoF827F2DD_ae = ge_ExitLocation_RIGHT;
        lv_l_DestinationIter = ge_ExitLocation_LEFT;
        for ( ; ( (autoF827F2DD_ai >= 0 && lv_l_DestinationIter <= autoF827F2DD_ae) || (autoF827F2DD_ai < 0 && lv_l_DestinationIter >= autoF827F2DD_ae) ) ; lv_l_DestinationIter += autoF827F2DD_ai ) {
            lv_l_ShuttleGroups[lv_l_DestinationIter] = UnitGroupEmpty();
        }
        auto837E7130_g = lp_unitgroup;
        auto837E7130_u = UnitGroupCount(auto837E7130_g, c_unitCountAll);
        for (;; auto837E7130_u -= 1) {
            lv_l_ShuttleGroupIter = UnitGroupUnitFromEnd(auto837E7130_g, auto837E7130_u);
            if (lv_l_ShuttleGroupIter == null) { break; }
            autoF004CE9A_ae = ge_ExitLocation_RIGHT;
            lv_l_DestinationIter = ge_ExitLocation_LEFT;
            for ( ; ( (autoF004CE9A_ai >= 0 && lv_l_DestinationIter <= autoF004CE9A_ae) || (autoF004CE9A_ai < 0 && lv_l_DestinationIter >= autoF004CE9A_ae) ) ; lv_l_DestinationIter += autoF004CE9A_ai ) {
                if ((libARRA_gf_PointStoredForUnit(lv_l_ShuttleGroupIter, (ge_ShuttlePoint_ShuttlePoint_Destination)) == UnitGetPosition(gv_warpConduit[lv_l_DestinationIter]))) {
                    UnitGroupAdd(lv_l_ShuttleGroups[lv_l_DestinationIter], lv_l_ShuttleGroupIter);
                }

            }
        }
        auto8E28156E_ae = ge_ExitLocation_RIGHT;
        lv_l_DestinationIter = ge_ExitLocation_LEFT;
        for ( ; ( (auto8E28156E_ai >= 0 && lv_l_DestinationIter <= auto8E28156E_ae) || (auto8E28156E_ai < 0 && lv_l_DestinationIter >= auto8E28156E_ae) ) ; lv_l_DestinationIter += auto8E28156E_ai ) {
            if ((UnitGroupCount(lv_l_ShuttleGroups[lv_l_DestinationIter], c_unitCountAlive) == 0)) {
                continue;
            }

            lv_l_distancebetweenlaunchandevac = DistanceBetweenPoints(UnitGroupCenterOfGroup(lv_l_ShuttleGroups[lv_l_DestinationIter]), libARRA_gf_PointStoredForUnit(UnitGroupUnit(lv_l_ShuttleGroups[lv_l_DestinationIter], 1), (ge_ShuttlePoint_ShuttlePoint_Destination)));
            lv_l_distancechunks = FixedToInt((lv_l_distancebetweenlaunchandevac / lv_l_distbwpings));
            auto7E2FB141_ae = lv_l_distancechunks;
            lv_l_foreachint_i = 1;
            for ( ; ( (auto7E2FB141_ai >= 0 && lv_l_foreachint_i <= auto7E2FB141_ae) || (auto7E2FB141_ai < 0 && lv_l_foreachint_i >= auto7E2FB141_ae) ) ; lv_l_foreachint_i += auto7E2FB141_ai ) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_l_ShuttleGroups[lv_l_DestinationIter]), (lv_l_distbwpings * IntToFixed(lv_l_foreachint_i)), libARRA_gf_PointStoredForUnit(UnitGroupUnit(lv_l_ShuttleGroups[lv_l_DestinationIter], 1), (ge_ShuttlePoint_ShuttlePoint_Destination))), ColorWithAlpha(100.00, 0.00, 0.00, 24.71), lv_l_pinglifetime, AngleBetweenPoints(UnitGroupCenterOfGroup(lv_l_ShuttleGroups[lv_l_DestinationIter]), libARRA_gf_PointStoredForUnit(UnitGroupUnit(lv_l_ShuttleGroups[lv_l_DestinationIter], 1), (ge_ShuttlePoint_ShuttlePoint_Destination))));
                PingSetScale(PingLastCreated(), 0.5);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CE4A6FC3"));
                lv_l_pings[lv_l_foreachint_i] = PingLastCreated();
                Wait(lv_l_delaybetweencreatingnewping, c_timeReal);
                if ((UnitGroupCount(lv_l_ShuttleGroups[lv_l_DestinationIter], c_unitCountAlive) == 0)) {
                    break;
                }

            }
        }
        autoE53BC187_at = 0;
        while (!((UnitGroupCount(lp_unitgroup, c_unitCountAlive) == 0)) && autoE53BC187_at <= lv_l_pinglifetime) {
            Wait(1.0, c_timeAI);
            autoE53BC187_at = autoE53BC187_at + 1.0;
        }
    }
    lv_l_foreachint_i = 0;
    for ( ; ( (autoEBD3EE55_ai >= 0 && lv_l_foreachint_i <= autoEBD3EE55_ae) || (autoEBD3EE55_ai < 0 && lv_l_foreachint_i >= autoEBD3EE55_ae) ) ; lv_l_foreachint_i += autoEBD3EE55_ai ) {
        PingDestroy(lv_l_pings[lv_l_foreachint_i]);
    }
    return true;
}

trigger auto_gf_ShuttleDeathWatcher_Trigger = null;
int auto_gf_ShuttleDeathWatcher_lp_shuttleWaveToWatch;

void gf_ShuttleDeathWatcher (int lp_shuttleWaveToWatch) {
    auto_gf_ShuttleDeathWatcher_lp_shuttleWaveToWatch = lp_shuttleWaveToWatch;

    if (auto_gf_ShuttleDeathWatcher_Trigger == null) {
        auto_gf_ShuttleDeathWatcher_Trigger = TriggerCreate("auto_gf_ShuttleDeathWatcher_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleDeathWatcher_Trigger, false, false);
}

bool auto_gf_ShuttleDeathWatcher_TriggerFunc (bool testConds, bool runActions) {
    int lp_shuttleWaveToWatch = auto_gf_ShuttleDeathWatcher_lp_shuttleWaveToWatch;

    // Automatic Variable Declarations
    // Implementation
    while (!((gv_shuttleLaunched[lp_shuttleWaveToWatch] == true))) {
        Wait(1.0, c_timeAI);
    }
    while (!((UnitGroupCount(gv_shuttlesActive[lp_shuttleWaveToWatch], c_unitCountAlive) <= 0))) {
        Wait(0.5, c_timeAI);
    }
    gv_shuttleWavesRemaining -= 1;
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesUpdate, true, false);
    if ((gv_shuttleEscapeThisWave == false)) {
        TriggerExecute(gt_TransmissionShuttleWaveDiesQ, true, false);
    }
    else {
        TriggerExecute(gt_ShuttleEscapesProgressWarningQ, true, false);
    }
    return true;
}

trigger auto_gf_ShuttleDiesMessage_Trigger = null;
unit auto_gf_ShuttleDiesMessage_lp_shuttle;
int auto_gf_ShuttleDiesMessage_lp_currentShuttleWave;

void gf_ShuttleDiesMessage (unit lp_shuttle, int lp_currentShuttleWave) {
    auto_gf_ShuttleDiesMessage_lp_shuttle = lp_shuttle;
    auto_gf_ShuttleDiesMessage_lp_currentShuttleWave = lp_currentShuttleWave;

    if (auto_gf_ShuttleDiesMessage_Trigger == null) {
        auto_gf_ShuttleDiesMessage_Trigger = TriggerCreate("auto_gf_ShuttleDiesMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleDiesMessage_Trigger, false, false);
}

bool auto_gf_ShuttleDiesMessage_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shuttle = auto_gf_ShuttleDiesMessage_lp_shuttle;
    int lp_currentShuttleWave = auto_gf_ShuttleDiesMessage_lp_currentShuttleWave;

    // Variable Declarations
    int lv_l_AttackingPlayer;
    point lv_l_VictoryPanLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((UnitIsAlive(lp_shuttle) == true)) {
        if ((AILastAttacker(lp_shuttle) != null) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(AILastAttacker(lp_shuttle))) == true)) {
            lv_l_AttackingPlayer = UnitGetOwner(AILastAttacker(lp_shuttle));
        }

        lv_l_VictoryPanLocation = UnitGetPosition(lp_shuttle);
        Wait(0.5, c_timeAI);
    }
    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_l_AttackingPlayer) == true)) {
        gv_shuttleKills[lv_l_AttackingPlayer] += 1;
    }

    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesUpdate, true, false);
    gv_victoryPan = lv_l_VictoryPanLocation;
    return true;
}

void gf_ActivateDeactivateWarpConduit (unit lp_unit, int lp_state) {
    // Automatic Variable Declarations
    int auto04710854_val;

    // Implementation
    auto04710854_val = lp_state;
    if (auto04710854_val == ge_JumpGateState_Activate) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "Signal On");
        libCOMI_gf_SetUnitInfoTextCampaign(lp_unit, StringExternal("Param/Value/FD5E2B9B"), StringExternal("Param/Value/D8F92A11"), StringExternal("Param/Value/FD8A40A5"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "Signal Off");
        libCOMI_gf_SetUnitInfoTextCampaign(lp_unit, StringExternal("Param/Value/7D2B4820"), StringExternal("Param/Value/B2D83ABB"), null);
    }
}

void gf_WarpConduitPingandAnimation (unit lp_warpConduit) {
    // Variable Declarations
    int lv_conduitIter;
    int lv_l_Conduit;
    unit lv_l_ShuttleIter;
    int lv_l_WarpConduitStateCurrent;
    int lv_l_WarpConduitStateNew;

    // Automatic Variable Declarations
    int auto9064D65A_ae;
    const int auto9064D65A_ai = 1;
    unitgroup auto51FC5EF1_g;
    int auto51FC5EF1_u;
    playergroup autoE9594758_g;
    int autoE9594758_var;

    // Variable Initialization
    lv_l_Conduit = ge_ExitLocation_LEFT;

    // Implementation
    auto9064D65A_ae = (ge_ExitLocation_RIGHT);
    lv_conduitIter = (ge_ExitLocation__None);
    for ( ; ( (auto9064D65A_ai >= 0 && lv_conduitIter <= auto9064D65A_ae) || (auto9064D65A_ai < 0 && lv_conduitIter >= auto9064D65A_ae) ) ; lv_conduitIter += auto9064D65A_ai ) {
        if ((gv_warpConduit[lv_conduitIter] == lp_warpConduit)) {
            lv_l_Conduit = lv_conduitIter;
            break;
        }

    }
    lv_l_WarpConduitStateCurrent = gv_warpConduitState[(lv_l_Conduit)];
    auto51FC5EF1_g = gv_allEvacShuttles;
    auto51FC5EF1_u = UnitGroupCount(auto51FC5EF1_g, c_unitCountAll);
    for (;; auto51FC5EF1_u -= 1) {
        lv_l_ShuttleIter = UnitGroupUnitFromEnd(auto51FC5EF1_g, auto51FC5EF1_u);
        if (lv_l_ShuttleIter == null) { break; }
        if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lp_warpConduit), 5.0), libARRA_gf_PointStoredForUnit(lv_l_ShuttleIter, (ge_ShuttlePoint_ShuttlePoint_Destination))) == true)) {
            lv_l_WarpConduitStateNew = ge_JumpGateState_Activate;
            break;
        }

        lv_l_WarpConduitStateNew = ge_JumpGateState_Deactivate;
    }
    if ((lv_l_WarpConduitStateCurrent == lv_l_WarpConduitStateNew)) {
        return ;
    }

    gv_warpConduitState[(lv_l_Conduit)] = lv_l_WarpConduitStateNew;
    if ((gv_warpConduitState[(lv_l_Conduit)] == ge_JumpGateState_Activate)) {
        gf_ActivateDeactivateWarpConduit(lp_warpConduit, ge_JumpGateState_Activate);
        libNtve_gf_SendActorMessageToUnit(lp_warpConduit, "SetMinimapVisibility");
        if ((libARRA_gf_PingStoredForUnit(lp_warpConduit, 1) == c_invalidPingId)) {
            gf_CreateObjectivePing(true, UnitGetPosition(lp_warpConduit), StringExternal("Param/Value/EBFA29B3"));
            libARRA_gf_StorePingForUnit(lp_warpConduit, 1, PingLastCreated());
            libCOMI_gf_CreateAlertAtUnitCampaign("Trigger", StringExternal("Param/Value/B22961F1"), null, lp_warpConduit);
            autoE9594758_g = libCOMI_gf_HumanPlayers();
            autoE9594758_var = -1;
            while (true) {
                autoE9594758_var = PlayerGroupNextPlayer(autoE9594758_g, autoE9594758_var);
                if (autoE9594758_var < 0) { break; }
                VisExploreArea(autoE9594758_var, RegionCircle(UnitGetPosition(lp_warpConduit), 8.0), true, false);
            }
        }
        else {
            PingSetColor(libARRA_gf_PingStoredForUnit(lp_warpConduit, 1), Color(0.00, 100.00, 0.00));
            PingSetVisible(libARRA_gf_PingStoredForUnit(lp_warpConduit, 1), true);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PingGetPosition(libARRA_gf_PingStoredForUnit(lp_warpConduit, 1)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.5, 270.0);
            PingSetScale(PingLastCreated(), 2.0);
        }
    }
    else {
        gf_ActivateDeactivateWarpConduit(lp_warpConduit, ge_JumpGateState_Deactivate);
        libNtve_gf_SendActorMessageToUnit(lp_warpConduit, "SetMinimapVisibility 1");
        if ((libARRA_gf_PingStoredForUnit(lp_warpConduit, 1) != c_invalidPingId)) {
            PingSetVisible(libARRA_gf_PingStoredForUnit(lp_warpConduit, 1), false);
            PingSetColor(libARRA_gf_PingStoredForUnit(lp_warpConduit, 1), Color(50.20, 50.20, 50.20));
        }

    }
}

int gf_BonusObjectiveEscortisLandedFlying (unit lp_bonusObjectiveEscort) {
    // Automatic Variable Declarations
    string auto53906D57_val;

    // Implementation
    auto53906D57_val = UnitGetType(lp_bonusObjectiveEscort);
    if (auto53906D57_val == "ResearchVessel") {
        return ge_LandedFlying_Flying;
    }
    else if (auto53906D57_val == "ResearchVesselLanded") {
        return ge_LandedFlying_Landed;
    }
    else {
        return ge_LandedFlying__Invalid;
    }
}

void gf_BonusObjectiveLogic (point lp_destinationLocation) {
    // Variable Declarations
    unit lv_l_EscortTarget;
    timer lv_l_RelicScan;
    point lv_l_TargetLocation;
    int lv_l_UnitPing;
    order lv_l_LandOrder;
    unit lv_l_RelicToScan;
    unitgroup lv_l_AlliedUnitsInTheWay;
    const fixed lv_c_ClearLandingZoneRadius = 3.0;

    // Automatic Variable Declarations
    point auto333D559A_val;
    unitgroup auto66A9A7A4_g;
    int auto66A9A7A4_u;
    unit auto66A9A7A4_var;

    // Variable Initialization
    lv_l_RelicScan = TimerCreate();
    lv_l_UnitPing = c_invalidPingId;
    lv_l_AlliedUnitsInTheWay = UnitGroupEmpty();

    // Implementation
    auto333D559A_val = lp_destinationLocation;
    if (auto333D559A_val == PointFromId(1443)) {
        lv_l_RelicToScan = UnitFromId(1423);
        lv_l_EscortTarget = UnitFromId(2199);
    }
    else if (auto333D559A_val == PointFromId(1444)) {
        lv_l_RelicToScan = UnitFromId(1429);
        lv_l_EscortTarget = UnitFromId(1406);
    }
    else if (auto333D559A_val == PointFromId(1445)) {
        lv_l_RelicToScan = UnitFromId(1433);
        lv_l_EscortTarget = UnitFromId(2197);
    }
    else {
    }
    TriggerExecute(gt_BonusObjectiveEscortResearchersCreate, true, false);
    lv_l_TargetLocation = lp_destinationLocation;
    UnitBehaviorRemove(lv_l_EscortTarget, "Harmless", 1);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lv_l_EscortTarget), StringExternal("Param/Value/2B1758BF"));
    PingSetUnit(PingLastCreated(), lv_l_EscortTarget);
    lv_l_UnitPing = PingLastCreated();
    libARRA_gf_StorePingForUnit(lv_l_EscortTarget, 1, PingLastCreated());
    PathCreateForUnit(PlayerGroupAll(), lv_l_EscortTarget);
    PathSetColor(PathLastCreated(), c_pathLocationAll, Color(100.00, 100.00, 0.00));
    UnitIssueOrder(lv_l_EscortTarget, Order(AbilityCommand("ResearchVesselLiftOff", 0)), c_orderQueueReplace);
    TriggerExecute(gt_BonusObjectiveMoveOutTransmissionQ, true, false);
    while ((UnitIsAlive(lv_l_EscortTarget) == true) && (gf_BonusObjectiveEscortisLandedFlying(lv_l_EscortTarget) == ge_LandedFlying_Flying)) {
        if ((libNtve_gf_UnitInRegion(lv_l_EscortTarget, RegionCircle(lv_l_TargetLocation, 0.5)) == true)) {
            lv_l_AlliedUnitsInTheWay = UnitGroupAlliance(gv_pLAYER_07_BONUS_OBJECTIVE, c_unitAllianceAllyExcludeSelf, RegionCircle(lv_l_TargetLocation, lv_c_ClearLandingZoneRadius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_l_AlliedUnitsInTheWay, c_unitCountAlive) > 0)) {
                auto66A9A7A4_g = lv_l_AlliedUnitsInTheWay;
                auto66A9A7A4_u = UnitGroupCount(auto66A9A7A4_g, c_unitCountAll);
                for (;; auto66A9A7A4_u -= 1) {
                    auto66A9A7A4_var = UnitGroupUnitFromEnd(auto66A9A7A4_g, auto66A9A7A4_u);
                    if (auto66A9A7A4_var == null) { break; }
                    UnitSetPosition(auto66A9A7A4_var, UnitTypePlacementFromPoint(UnitGetType(auto66A9A7A4_var), UnitGetOwner(auto66A9A7A4_var), PointWithOffsetPolar(UnitGetPosition(auto66A9A7A4_var), (lv_c_ClearLandingZoneRadius + 0.5 - DistanceBetweenPoints(UnitGetPosition(auto66A9A7A4_var), lv_l_TargetLocation)), AngleBetweenPoints(lv_l_TargetLocation, UnitGetPosition(auto66A9A7A4_var))), 8.0), true);
                }
            }

            Wait(0.0625, c_timeAI);
        }

        lv_l_LandOrder = OrderTargetingPoint(AbilityCommand("ResearchVesselLand", 0), lv_l_TargetLocation);
        if ((UnitOrderIsValid(lv_l_EscortTarget, lv_l_LandOrder) == true)) {
            UnitIssueOrder(lv_l_EscortTarget, OrderTargetingPoint(AbilityCommand("ResearchVesselLand", 0), lv_l_TargetLocation), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_l_EscortTarget, OrderTargetingPoint(AbilityCommand("move", 0), lv_l_TargetLocation), c_orderQueueReplace);
            UnitIssueOrder(lv_l_EscortTarget, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
        }
        Wait(2.0, c_timeAI);
    }
    if ((UnitIsAlive(lv_l_EscortTarget) == false)) {
        PingDestroy(lv_l_UnitPing);
    }
    else {
        gf_HoldOutAttackWave(lv_l_EscortTarget, lv_l_TargetLocation);
        TimerStart(lv_l_RelicScan, 60.0, false, c_timeAI);
        libCOMI_gf_ShowHideUnitProgressBar(lv_l_EscortTarget, true);
        gf_ShrineAnimation(lv_l_RelicToScan, true);
        while ((UnitIsAlive(lv_l_EscortTarget) == true) && (TimerGetRemaining(lv_l_RelicScan) > 0.0)) {
            libCOMI_gf_SetUnitProgressBarProgress2(lv_l_EscortTarget, FixedToInt(TimerGetRemaining(lv_l_RelicScan)));
            libCOMI_gf_SetUnitProgressBarProgress(lv_l_EscortTarget, FixedToInt(TimerGetRemaining(lv_l_RelicScan)));
            Wait(0.5, c_timeAI);
        }
        libCOMI_gf_ShowHideUnitProgressBar(lv_l_EscortTarget, false);
        PingDestroy(lv_l_UnitPing);
        gf_ShrineAnimation(lv_l_RelicToScan, false);
    }
    if ((UnitIsAlive(lv_l_EscortTarget) == true)) {
        gv_bonusObjectiveEscortsEscorted += 1;
        TriggerExecute(gt_BonusObjectiveEscortResearchersUpdate, true, false);
        TriggerExecute(gt_BonusObjectiveCompleteTransmissionQ, true, false);
        UnitBehaviorAddPlayer(lv_l_EscortTarget, "Harmless", gv_pLAYER_07_BONUS_OBJECTIVE, 1);
        UnitIssueOrder(lv_l_EscortTarget, Order(AbilityCommand("ResearchVesselLiftOff", 0)), c_orderQueueReplace);
        UnitSetHeight(lv_l_EscortTarget, 15.0, 8.0);
        Wait(8.0, c_timeAI);
        UnitRemove(lv_l_EscortTarget);
    }
    else {
        gv_bonusObjectiveEscortsLost += 1;
        TriggerExecute(gt_BonusObjectiveFailedTransmissionQ, true, false);
        TriggerExecute(gt_BonusObjectiveEscortResearchersUpdate, true, false);
    }
}

trigger auto_gf_BonusObjectivePath_Trigger = null;
unit auto_gf_BonusObjectivePath_lp_objectiveUnit;

void gf_BonusObjectivePath (unit lp_objectiveUnit) {
    auto_gf_BonusObjectivePath_lp_objectiveUnit = lp_objectiveUnit;

    if (auto_gf_BonusObjectivePath_Trigger == null) {
        auto_gf_BonusObjectivePath_Trigger = TriggerCreate("auto_gf_BonusObjectivePath_TriggerFunc");
    }

    TriggerExecute(auto_gf_BonusObjectivePath_Trigger, false, false);
}

bool auto_gf_BonusObjectivePath_TriggerFunc (bool testConds, bool runActions) {
    unit lp_objectiveUnit = auto_gf_BonusObjectivePath_lp_objectiveUnit;

    // Automatic Variable Declarations
    // Implementation
    while ((UnitIsAlive(lp_objectiveUnit) == true)) {
        while (!(((UnitIsAlive(lp_objectiveUnit) == false) || (UnitGetType(lp_objectiveUnit) == gv_c_BonusObjectiveEscortType)))) {
            Wait(0.5, c_timeAI);
        }
        if ((UnitIsAlive(lp_objectiveUnit) == false)) {
            return true;
        }

        PathCreateForUnit(PlayerGroupAll(), lp_objectiveUnit);
        PathSetColor(PathLastCreated(), c_pathLocationAll, Color(100.00, 100.00, 0.00));
        while (!(((UnitIsAlive(lp_objectiveUnit) == false) || (UnitGetType(lp_objectiveUnit) != gv_c_BonusObjectiveEscortType)))) {
            Wait(0.5, c_timeAI);
        }
        PathDestroy(PathLastCreated());
    }
    return true;
}

trigger auto_gf_ShrineAnimation_Trigger = null;
unit auto_gf_ShrineAnimation_lp_shrine;
bool auto_gf_ShrineAnimation_lp_activateDeactivate;

void gf_ShrineAnimation (unit lp_shrine, bool lp_activateDeactivate) {
    auto_gf_ShrineAnimation_lp_shrine = lp_shrine;
    auto_gf_ShrineAnimation_lp_activateDeactivate = lp_activateDeactivate;

    if (auto_gf_ShrineAnimation_Trigger == null) {
        auto_gf_ShrineAnimation_Trigger = TriggerCreate("auto_gf_ShrineAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShrineAnimation_Trigger, false, false);
}

bool auto_gf_ShrineAnimation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shrine = auto_gf_ShrineAnimation_lp_shrine;
    bool lp_activateDeactivate = auto_gf_ShrineAnimation_lp_activateDeactivate;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_activateDeactivate == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shrine), "ScanWorkStart", "Stand Work", 0, c_animTimeDefault);
        Wait(1.95, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shrine), "ScanWork", "Stand Happy", c_animFlagPlayForever, c_animTimeDefault);
    }
    else {
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lp_shrine), "ScanWork");
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shrine), "ScanWorkEnd", "Stand Work End", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    }
    return true;
}

trigger auto_gf_HoldOutAttackWave_Trigger = null;
unit auto_gf_HoldOutAttackWave_lp_researchVessel;
point auto_gf_HoldOutAttackWave_lp_targetLocation;

void gf_HoldOutAttackWave (unit lp_researchVessel, point lp_targetLocation) {
    auto_gf_HoldOutAttackWave_lp_researchVessel = lp_researchVessel;
    auto_gf_HoldOutAttackWave_lp_targetLocation = lp_targetLocation;

    if (auto_gf_HoldOutAttackWave_Trigger == null) {
        auto_gf_HoldOutAttackWave_Trigger = TriggerCreate("auto_gf_HoldOutAttackWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_HoldOutAttackWave_Trigger, false, false);
}

bool auto_gf_HoldOutAttackWave_TriggerFunc (bool testConds, bool runActions) {
    unit lp_researchVessel = auto_gf_HoldOutAttackWave_lp_researchVessel;
    point lp_targetLocation = auto_gf_HoldOutAttackWave_lp_targetLocation;

    // Variable Declarations
    point lv_l_DropLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_targetLocation == PointFromId(1443))) {
        lv_l_DropLocation = PointFromId(109);
    }
    else {
        lv_l_DropLocation = PointFromId(233);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, lp_targetLocation);
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, lp_targetLocation);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_l_DropLocation, true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_BonusObjective);
    return true;
}

trigger auto_gf_ShuttleBehaviorStraightToDestination_Trigger = null;
unit auto_gf_ShuttleBehaviorStraightToDestination_lp_unit;

void gf_ShuttleBehaviorStraightToDestination (unit lp_unit) {
    auto_gf_ShuttleBehaviorStraightToDestination_lp_unit = lp_unit;

    if (auto_gf_ShuttleBehaviorStraightToDestination_Trigger == null) {
        auto_gf_ShuttleBehaviorStraightToDestination_Trigger = TriggerCreate("auto_gf_ShuttleBehaviorStraightToDestination_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleBehaviorStraightToDestination_Trigger, false, false);
}

bool auto_gf_ShuttleBehaviorStraightToDestination_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_ShuttleBehaviorStraightToDestination_lp_unit;

    // Variable Declarations
    point lv_destination;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_destination = libARRA_gf_PointStoredForUnit(lp_unit, (ge_ShuttlePoint_ShuttlePoint_Destination));
    while ((UnitIsAlive(lp_unit) == true)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_destination), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_gf_ShuttleAIThink2_Trigger = null;
unit auto_gf_ShuttleAIThink2_lp_unit;

void gf_ShuttleAIThink2 (unit lp_unit) {
    auto_gf_ShuttleAIThink2_lp_unit = lp_unit;

    if (auto_gf_ShuttleAIThink2_Trigger == null) {
        auto_gf_ShuttleAIThink2_Trigger = TriggerCreate("auto_gf_ShuttleAIThink2_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShuttleAIThink2_Trigger, false, false);
}

bool auto_gf_ShuttleAIThink2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_ShuttleAIThink2_lp_unit;

    // Variable Declarations
    bool lv_shuttleSplit;
    point lv_spawn;
    point lv_destination;
    point lv_split;
    point lv_splitDestination;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_spawn = libARRA_gf_PointStoredForUnit(lp_unit, (ge_ShuttlePoint_ShuttlePoint_SpawnPoint));
    lv_destination = libARRA_gf_PointStoredForUnit(lp_unit, (ge_ShuttlePoint_ShuttlePoint_Destination));
    lv_split = libARRA_gf_PointStoredForUnit(lp_unit, (ge_ShuttlePoint_ShuttlePoint_SplitPoint));
    lv_splitDestination = libARRA_gf_PointStoredForUnit(lp_unit, (ge_ShuttlePoint_ShuttlePoint_SplitDestination));
    while ((UnitIsAlive(lp_unit) == true)) {
        if ((lv_shuttleSplit == false)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_spawn) < 30.0)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_destination), c_orderQueueReplace);
            }
            else {
                lv_shuttleSplit = true;
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_splitDestination), c_orderQueueReplace);
                if ((lv_destination != lv_splitDestination)) {
                    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lp_unit), 2.0, Color(100.00, 0.00, 0.00));
                }

                libARRA_gf_StorePointForUnit(lp_unit, (ge_ShuttlePoint_ShuttlePoint_Destination), lv_splitDestination);
            }
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_splitDestination), c_orderQueueReplace);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

point gf_GetShuttleSplitPoint (unit lp_shuttle) {
    // Variable Declarations
    fixed lv_distanceAlongPathWhereSplitOccurs;
    fixed lv_distanceBetweenStartAndEnd;
    fixed lv_angleBetweenEndAndStart;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_distanceAlongPathWhereSplitOccurs = 0.66;
    lv_distanceBetweenStartAndEnd = DistanceBetweenPoints(libARRA_gf_PointStoredForUnit(lp_shuttle, (ge_ShuttlePoint_ShuttlePoint_SpawnPoint)), libARRA_gf_PointStoredForUnit(lp_shuttle, (ge_ShuttlePoint_ShuttlePoint_SplitDestination)));
    lv_angleBetweenEndAndStart = AngleBetweenPoints(libARRA_gf_PointStoredForUnit(lp_shuttle, (ge_ShuttlePoint_ShuttlePoint_Destination)), libARRA_gf_PointStoredForUnit(lp_shuttle, (ge_ShuttlePoint_ShuttlePoint_SpawnPoint)));
    return PointWithOffsetPolar(libARRA_gf_PointStoredForUnit(lp_shuttle, (ge_ShuttlePoint_ShuttlePoint_Destination)), (lv_distanceBetweenStartAndEnd * lv_distanceAlongPathWhereSplitOccurs), lv_angleBetweenEndAndStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_currentWave = 1;
    TriggerEnable(gt_ActivateWarpConduitMiddle, true);
    gf_ShuttleDeathWatcher(gv_currentWave);
    gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, true);
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch01Q, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave01_Init () {
    gt_ShuttleSendWave01 = TriggerCreate("gt_ShuttleSendWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_destination;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_currentWave = 2;
    gf_ShuttleDeathWatcher(gv_currentWave);
    if ((RandomInt(0, 1) == 1)) {
        gv_wave03Destination = ge_ExitLocation_LEFT;
        lv_destination = ge_ExitLocation_RIGHT;
    }
    else {
        lv_destination = ge_ExitLocation_LEFT;
        gv_wave03Destination = ge_ExitLocation_RIGHT;
    }
    gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_MIDDLE, lv_destination, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, true);
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch02Q, true, false);
    libCOMI_gf_SetMissionEffort(33.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave02_Init () {
    gt_ShuttleSendWave02 = TriggerCreate("gt_ShuttleSendWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_currentWave = 3;
    gf_ShuttleDeathWatcher(gv_currentWave);
    TriggerExecute(gt_TransmissionShuttleLaunch03Q, true, false);
    gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_MIDDLE, gv_wave03Destination, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, true);
    libCOMI_gf_SetMissionEffort(40.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave03_Init () {
    gt_ShuttleSendWave03 = TriggerCreate("gt_ShuttleSendWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEA314F81_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_currentWave = 4;
    gf_ShuttleDeathWatcher(gv_currentWave);
    autoEA314F81_val = RandomInt(0, 1);
    if (autoEA314F81_val == 0) {
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_LEFT, ge_ExitLocation_LEFT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, true);
    }
    else {
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_LEFT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_MIDDLE, ge_ExitLocation_RIGHT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, true);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch04Q, true, false);
    libCOMI_gf_SetMissionEffort(50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave04_Init () {
    gt_ShuttleSendWave04 = TriggerCreate("gt_ShuttleSendWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_currentWave = 5;
    gf_ShuttleDeathWatcher(gv_currentWave);
    gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, false);
    gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, false);
    gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_LEFT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, true);
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch05Q, true, false);
    libCOMI_gf_SetMissionEffort(60.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave05_Init () {
    gt_ShuttleSendWave05 = TriggerCreate("gt_ShuttleSendWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB75F9784_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_currentWave = 6;
    gf_ShuttleDeathWatcher(gv_currentWave);
    autoB75F9784_val = RandomInt(0, 1);
    if (autoB75F9784_val == 0) {
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 5, ge_LaunchLocation_LEFT, ge_ExitLocation_RIGHT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, true);
    }
    else {
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 5, ge_LaunchLocation_RIGHT, ge_ExitLocation_LEFT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, true);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch06Q, true, false);
    libCOMI_gf_SetMissionEffort(80.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave06_Init () {
    gt_ShuttleSendWave06 = TriggerCreate("gt_ShuttleSendWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Send Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleSendWave07_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF4EA11D2_val;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_currentWave = 7;
    gf_ShuttleDeathWatcher(gv_currentWave);
    autoF4EA11D2_val = RandomInt(0, 2);
    if (autoF4EA11D2_val == 0) {
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel10, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_RIGHT, ge_ExitLocation_RIGHT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, false);
        Wait(45.0, c_timeAI);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_MIDDLE, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel10, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_LEFT, ge_ExitLocation_LEFT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, true);
    }
    else if (autoF4EA11D2_val == 1) {
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_MIDDLE, ge_ExitLocation_LEFT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_MIDDLE, ge_ExitLocation_RIGHT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel10, false);
        Wait(35.0, c_timeAI);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_LEFT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel10, true);
    }
    else {
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_LEFT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel10, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 3, ge_LaunchLocation_RIGHT, ge_ExitLocation_MIDDLE, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, false);
        Wait(40.0, c_timeAI);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_LEFT, ge_ExitLocation_LEFT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, false);
        gf_ShuttleCreateWave(gv_currentWave, "ProtossFrigate", 2, ge_LaunchLocation_RIGHT, ge_ExitLocation_RIGHT, ge_ShuttleWaveBehavior_ShuttleBehavior_StraightToDestination, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel10, true);
    }
    Wait(gv_launchTrans_WAIT, c_timeAI);
    TriggerExecute(gt_TransmissionShuttleLaunch07Q, true, false);
    libCOMI_gf_SetMissionEffort(100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleSendWave07_Init () {
    gt_ShuttleSendWave07 = TriggerCreate("gt_ShuttleSendWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Escape Warning
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleEscapeWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == gv_evacShuttleType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_warningCounter += 1;
    gv_warningShuttle = EventUnit();
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(EventUnit()), 2.0, Color(100.00, 0.00, 0.00));
    libCOMI_gf_CreateAlertAtUnitCampaign("Trigger", StringExternal("Param/Value/6FFD1985"), null, EventUnit());
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_TransmissionEscapeWarningQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleEscapeWarning_Init () {
    gt_ShuttleEscapeWarning = TriggerCreate("gt_ShuttleEscapeWarning_Func");
    TriggerAddEventUnitBehaviorChange(gt_ShuttleEscapeWarning, null, "ProtossWarpAwayTarget", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Escape Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionEscapeWarningQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup("ProtossFrigate", gv_pLAYER_05_SHUTTLE, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleWarpImminent", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionEscapeWarningQ_Init () {
    gt_TransmissionEscapeWarningQ = TriggerCreate("gt_TransmissionEscapeWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escaping Shuttle Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_EscapingShuttleDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionClear(gv_warningTransmission);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapingShuttleDestroyed_Init () {
    gt_EscapingShuttleDestroyed = TriggerCreate("gt_EscapingShuttleDestroyed_Func");
    TriggerAddEventUnitDied(gt_EscapingShuttleDestroyed, UnitRefFromVariable("gv_warningShuttle"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Jump Progress Bar
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleJumpProgressBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distanceToTarget;
    fixed lv_timeToTarget;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((DataTableGetDialog(true, ("Shuttle_" + IntToString(UnitGetTag(EventUnitTargetUnit())))) == c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(EventUnitTargetUnit()) == true)) {
        lv_distanceToTarget = (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) - 1.0);
        if ((UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropMovementSpeedCurrent, c_unitPropCurrent) > 0.0) && (lv_distanceToTarget >= 0.0)) {
            lv_timeToTarget = (lv_distanceToTarget / UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropMovementSpeedCurrent, c_unitPropCurrent));
        }
        else {
            lv_timeToTarget = -1.0;
        }
        if ((lv_distanceToTarget < 0.0)) {
            libCOMI_gf_ShowHideUnitProgressBar(EventUnitTargetUnit(), false);
        }
        else {
            if ((lv_timeToTarget > 0.0)) {
                libCOMI_gf_SetUnitProgresBarTitle(EventUnitTargetUnit(), StringExternal("Param/Value/CA71A518"));
                libCOMI_gf_SetUnitProgressBarProgress2(EventUnitTargetUnit(), FixedToInt(lv_timeToTarget));
            }
            else {
                libCOMI_gf_SetUnitProgresBarTitle(EventUnitTargetUnit(), StringExternal("Param/Value/C5BD2D7F"));
                libCOMI_gf_ShowHideUnitProgressBar2(EventUnitTargetUnit(), false);
            }
            libCOMI_gf_SetUnitProgressBarProgress(EventUnitTargetUnit(), FixedToInt((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) - 1.0)));
            libCOMI_gf_ShowHideUnitProgressBar(EventUnitTargetUnit(), true);
        }
        Wait(0.0625, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleJumpProgressBar_Init () {
    gt_ShuttleJumpProgressBar = TriggerCreate("gt_ShuttleJumpProgressBar_Func");
    TriggerAddEventUnitAbility(gt_ShuttleJumpProgressBar, null, AbilityCommand("ProtossWarpAwayImminent", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Escapes
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleEscapes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeUpdate, true, false);
    gv_escapedShuttlePosition = UnitGetPosition(EventUnit());
    gv_escapedShuttles += 1;
    gv_shuttleEscapeThisWave = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleEscapes_Init () {
    gt_ShuttleEscapes = TriggerCreate("gt_ShuttleEscapes_Func");
    TriggerAddEventUnitAbility(gt_ShuttleEscapes, null, AbilityCommand("ProtossWarpAway", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Escapes Q
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleEscapesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttlePartialEscaped", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(30.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleEscapesQ_Init () {
    gt_ShuttleEscapesQ = TriggerCreate("gt_ShuttleEscapesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shuttle Escapes Progress Warning Q
//--------------------------------------------------------------------------------------------------
bool gt_ShuttleEscapesProgressWarningQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto95AAFC2E_val;
    int auto36DC429F_val;
    int auto558CE504_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto95AAFC2E_val = libCOMI_gf_GetMissionDifficulty();
    if (auto95AAFC2E_val == 1) {
        lv_i = 3;
    }
    else if (auto95AAFC2E_val == 2) {
        lv_i = 3;
    }
    else if (auto95AAFC2E_val == 3) {
        lv_i = 2;
    }
    else if (auto95AAFC2E_val == 4) {
        lv_i = 2;
    }
    else {
    }
    if ((gv_escapedShuttles == lv_i)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("FailureQuarterKS", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        auto36DC429F_val = libCOMI_gf_GetMissionDifficulty();
        if (auto36DC429F_val == 1) {
            lv_i = 5;
        }
        else if (auto36DC429F_val == 2) {
            lv_i = 4;
        }
        else if (auto36DC429F_val == 3) {
            lv_i = 3;
        }
        else if (auto36DC429F_val == 4) {
            lv_i = 3;
        }
        else {
        }
        if ((gv_escapedShuttles == lv_i)) {
            TriggerQueueEnter();
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("FailureHalfKS", true, -1);
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
        }
        else {
            auto558CE504_val = libCOMI_gf_GetMissionDifficulty();
            if (auto558CE504_val == 1) {
                lv_i = 9;
            }
            else if (auto558CE504_val == 2) {
                lv_i = 7;
            }
            else if (auto558CE504_val == 3) {
                lv_i = 5;
            }
            else if (auto558CE504_val == 4) {
                lv_i = 4;
            }
            else {
            }
            if ((gv_escapedShuttles == lv_i)) {
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission("FailureCritical", true, -1);
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
            }
            else {
                TriggerExecute(gt_ShuttleEscapesQ, true, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShuttleEscapesProgressWarningQ_Init () {
    gt_ShuttleEscapesProgressWarningQ = TriggerCreate("gt_ShuttleEscapesProgressWarningQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Wave Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleWaveDiesQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleDestroyed", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleWaveDiesQ_Init () {
    gt_TransmissionShuttleWaveDiesQ = TriggerCreate("gt_TransmissionShuttleWaveDiesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit Left
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduitLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpCondiut;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_warpCondiut = UnitFromId(1041);
    gf_WarpConduitPingandAnimation(lv_warpCondiut);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduitLeft_Init () {
    gt_ActivateWarpConduitLeft = TriggerCreate("gt_ActivateWarpConduitLeft_Func");
    TriggerAddEventTimePeriodic(gt_ActivateWarpConduitLeft, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit Middle
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduitMiddle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpCondiut;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_warpCondiut = UnitFromId(1042);
    gf_WarpConduitPingandAnimation(lv_warpCondiut);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduitMiddle_Init () {
    gt_ActivateWarpConduitMiddle = TriggerCreate("gt_ActivateWarpConduitMiddle_Func");
    TriggerEnable(gt_ActivateWarpConduitMiddle, false);
    TriggerAddEventTimePeriodic(gt_ActivateWarpConduitMiddle, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Warp Conduit Right
//--------------------------------------------------------------------------------------------------
bool gt_ActivateWarpConduitRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpCondiut;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_warpCondiut = UnitFromId(1043);
    gf_WarpConduitPingandAnimation(lv_warpCondiut);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateWarpConduitRight_Init () {
    gt_ActivateWarpConduitRight = TriggerCreate("gt_ActivateWarpConduitRight_Func");
    TriggerAddEventTimePeriodic(gt_ActivateWarpConduitRight, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 01 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch01Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[1] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentFirst", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch01Q_Init () {
    gt_TransmissionShuttleLaunch01Q = TriggerCreate("gt_TransmissionShuttleLaunch01Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 02 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch02Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[2] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentSingle", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch02Q_Init () {
    gt_TransmissionShuttleLaunch02Q = TriggerCreate("gt_TransmissionShuttleLaunch02Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 03 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch03Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[3] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentSingle", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch03Q_Init () {
    gt_TransmissionShuttleLaunch03Q = TriggerCreate("gt_TransmissionShuttleLaunch03Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 04 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch04Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[4] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentMutliple", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch04Q_Init () {
    gt_TransmissionShuttleLaunch04Q = TriggerCreate("gt_TransmissionShuttleLaunch04Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 05 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch05Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[5] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentSingle", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch05Q_Init () {
    gt_TransmissionShuttleLaunch05Q = TriggerCreate("gt_TransmissionShuttleLaunch05Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 06 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch06Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[6] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentSingle", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch06Q_Init () {
    gt_TransmissionShuttleLaunch06Q = TriggerCreate("gt_TransmissionShuttleLaunch06Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 07 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch07Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[7] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentAll", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch07Q_Init () {
    gt_TransmissionShuttleLaunch07Q = TriggerCreate("gt_TransmissionShuttleLaunch07Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission: Shuttle Launch 08 Q
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionShuttleLaunch08Q_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_shuttleLaunched[7] == true))) {
        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ShuttleSentAll", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionShuttleLaunch08Q_Init () {
    gt_TransmissionShuttleLaunch08Q = TriggerCreate("gt_TransmissionShuttleLaunch08Q_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 01
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(511)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeAI);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(511)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse01_Init () {
    gt_IceWallCollapse01 = TriggerCreate("gt_IceWallCollapse01_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse01, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 02
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(679)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeAI);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(679)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse02_Init () {
    gt_IceWallCollapse02 = TriggerCreate("gt_IceWallCollapse02_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse02, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 03
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(698)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeAI);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(698)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse03_Init () {
    gt_IceWallCollapse03 = TriggerCreate("gt_IceWallCollapse03_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse03, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 04
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse04_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(337)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeAI);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(337)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse04_Init () {
    gt_IceWallCollapse04 = TriggerCreate("gt_IceWallCollapse04_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse04, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 05
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse05_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(505)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeAI);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(505)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse05_Init () {
    gt_IceWallCollapse05 = TriggerCreate("gt_IceWallCollapse05_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse05, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Wall Collapse 06
//--------------------------------------------------------------------------------------------------
bool gt_IceWallCollapse06_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(974)), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    Wait(6.667, c_timeAI);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(974)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceWallCollapse06_Init () {
    gt_IceWallCollapse06 = TriggerCreate("gt_IceWallCollapse06_Func");
    TriggerAddEventUnitRegion(gt_IceWallCollapse06, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Reveal Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveRevealTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveKS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveRevealTransmissionQ_Init () {
    gt_BonusObjectiveRevealTransmissionQ = TriggerCreate("gt_BonusObjectiveRevealTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Move Out Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveMoveOutTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusMovingKS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveMoveOutTransmissionQ_Init () {
    gt_BonusObjectiveMoveOutTransmissionQ = TriggerCreate("gt_BonusObjectiveMoveOutTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Complete Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveCompleteTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusSuccessKS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveCompleteTransmissionQ_Init () {
    gt_BonusObjectiveCompleteTransmissionQ = TriggerCreate("gt_BonusObjectiveCompleteTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Failed Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveFailedTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusLostKS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveFailedTransmissionQ_Init () {
    gt_BonusObjectiveFailedTransmissionQ = TriggerCreate("gt_BonusObjectiveFailedTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective FinalStage Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveFinalStageTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("BonusObjectiveKS", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveFinalStageTransmissionQ_Init () {
    gt_BonusObjectiveFinalStageTransmissionQ = TriggerCreate("gt_BonusObjectiveFinalStageTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Bonus Objective
//--------------------------------------------------------------------------------------------------
bool gt_SetupBonusObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AISetDifficulty(gv_pLAYER_07_BONUS_OBJECTIVE, c_diffEnableDangerMap, true);
    AISetDifficulty(gv_pLAYER_07_BONUS_OBJECTIVE, c_diffWaveAvoidDanger, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupBonusObjective_Init () {
    gt_SetupBonusObjective = TriggerCreate("gt_SetupBonusObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective 01
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective01_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_bonusObjectiveTroubleTimer, gv_bonusObjectiveTroubleInterval, false, c_timeAI);
    TriggerExecute(gt_BonusObjectiveRevealTransmissionQ, true, true);
    gf_BonusObjectiveLogic(PointFromId(1444));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective01_Init () {
    gt_StartBonusObjective01 = TriggerCreate("gt_StartBonusObjective01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective 02
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective02_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_bonusObjectiveTroubleTimer, gv_bonusObjectiveTroubleInterval, false, c_timeAI);
    gf_BonusObjectiveLogic(PointFromId(1445));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective02_Init () {
    gt_StartBonusObjective02 = TriggerCreate("gt_StartBonusObjective02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Bonus Objective 03
//--------------------------------------------------------------------------------------------------
bool gt_StartBonusObjective03_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_bonusObjectiveTroubleTimer, gv_bonusObjectiveTroubleInterval, false, c_timeAI);
    gf_BonusObjectiveLogic(PointFromId(1443));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartBonusObjective03_Init () {
    gt_StartBonusObjective03 = TriggerCreate("gt_StartBonusObjective03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_AttackWaveTransmissionQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(45.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWaveTransmissionQ_Init () {
    gt_AttackWaveTransmissionQ = TriggerCreate("gt_AttackWaveTransmissionQ_Func");
    TriggerAddEventPlayerAIWave(gt_AttackWaveTransmissionQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_AttackWaveTransmissionQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Sentry Force Fields
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveSentryForceFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(187), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(1243)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(187), OrderTargetingPoint(AbilityCommand("ForceField", 0), PointFromId(46)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveSentryForceFields_Init () {
    gt_BonusObjectiveSentryForceFields = TriggerCreate("gt_BonusObjectiveSentryForceFields_Func");
    TriggerAddEventUnitRegion(gt_BonusObjectiveSentryForceFields, null, RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("1st wave incoming");
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(233));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(233));
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, gv_player03Target);
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, gv_player04Target);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceSize, lv_techLevel, PointFromId(233), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("2nd wave incoming");
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(109));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(109));
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, gv_player03Target);
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, gv_player04Target);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceSize, lv_techLevel, PointFromId(109), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_l_ResourceSize;
    int lv_l_TechLevel;
    unitfilter lv_l_PriorityTargetFilter;
    int lv_l_NumberOfTargetsLeftExpo;
    int lv_l_NumberOfTargetsRightExpo;
    int lv_l_Difference;
    point lv_l_SpawnPosition;
    point lv_l_AttackWaypoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_l_ResourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_l_TechLevel = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    lv_l_PriorityTargetFilter = UnitFilter(0, 0, 0, 0);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("3rd wave incoming");
    lv_l_PriorityTargetFilter = UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)));
    lv_l_NumberOfTargetsLeftExpo = UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_SHUTTLE, c_unitAllianceEnemy, RegionFromId(11), lv_l_PriorityTargetFilter, 0), c_unitCountAlive);
    lv_l_NumberOfTargetsRightExpo = UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_SHUTTLE, c_unitAllianceEnemy, RegionFromId(4), lv_l_PriorityTargetFilter, 0), c_unitCountAlive);
    lv_l_Difference = (lv_l_NumberOfTargetsLeftExpo - lv_l_NumberOfTargetsRightExpo);
    if ((lv_l_Difference == 0)) {
        lv_l_AttackWaypoint = PointFromId(1351);
        lv_l_SpawnPosition = PointFromId(233);
    }
    else if ((lv_l_Difference > 0)) {
        lv_l_AttackWaypoint = RegionGetCenter(RegionFromId(11));
        lv_l_SpawnPosition = PointFromId(109);
    }
    else if ((lv_l_Difference < 0)) {
        lv_l_AttackWaypoint = RegionGetCenter(RegionFromId(4));
        lv_l_SpawnPosition = PointFromId(233);
    }
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, lv_l_SpawnPosition);
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, lv_l_SpawnPosition);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, gv_player03Target);
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, gv_player04Target);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_l_ResourceSize, lv_l_TechLevel, lv_l_SpawnPosition, true);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), libCOMI_gf_HybridMajor(), 0, gv_pLAYER_03_ENEMY, lv_l_SpawnPosition, 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), libCOMI_gf_HybridMinor(), 0, gv_pLAYER_04_ENEMY, lv_l_SpawnPosition, 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    libCOMI_gf_AddAttackForceWaypoint(lv_l_AttackWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("4th wave incoming");
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(233));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(233));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_ENEMY, libCOMI_gf_HumanPlayers());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_ENEMY, libCOMI_gf_HumanPlayers());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceSize, lv_techLevel, PointFromId(233), true);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), libCOMI_gf_HybridMajor(), 0, gv_pLAYER_03_ENEMY, PointFromId(233), 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), libCOMI_gf_HybridMinor(), 0, gv_pLAYER_04_ENEMY, PointFromId(233), 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("5th wave incoming");
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(109));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(109));
    AIAttackWaveSetTargetPlayer(gv_pLAYER_03_ENEMY, libCOMI_gf_HumanPlayers());
    AIAttackWaveSetTargetPlayer(gv_pLAYER_04_ENEMY, libCOMI_gf_HumanPlayers());
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceSize, lv_techLevel, PointFromId(109), true);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 4, 4), libCOMI_gf_HybridMajor(), 0, gv_pLAYER_03_ENEMY, PointFromId(109), 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 3, 4), libCOMI_gf_HybridMinor(), 0, gv_pLAYER_04_ENEMY, PointFromId(109), 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_l_ResourceSize;
    int lv_l_TechLevel;
    point lv_l_AttackWaypoint;
    int lv_l_NumberOfStructuresLeftSide;
    int lv_l_NumberOfStructuresRightSide;
    point lv_l_SpawnPosition;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_l_ResourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_l_TechLevel = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("6th wave incoming");
    lv_l_NumberOfStructuresLeftSide = UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_SHUTTLE, c_unitAllianceEnemy, RegionFromId(8), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_l_NumberOfStructuresRightSide = UnitGroupCount(UnitGroupAlliance(gv_pLAYER_05_SHUTTLE, c_unitAllianceEnemy, RegionFromId(9), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if ((lv_l_NumberOfStructuresLeftSide == 0) && (lv_l_NumberOfStructuresRightSide > 0)) {
        lv_l_AttackWaypoint = PointFromId(1354);
    }
    else if ((lv_l_NumberOfStructuresLeftSide > 0) && (lv_l_NumberOfStructuresRightSide == 0)) {
        lv_l_AttackWaypoint = PointFromId(1352);
    }
    else if ((lv_l_NumberOfStructuresLeftSide > lv_l_NumberOfStructuresRightSide)) {
        lv_l_AttackWaypoint = PointFromId(1354);
    }
    else if ((lv_l_NumberOfStructuresLeftSide <= lv_l_NumberOfStructuresRightSide)) {
        lv_l_AttackWaypoint = PointFromId(1352);
    }
    else if (true) {
        lv_l_AttackWaypoint = PointFromId(1351);
    }
    if ((lv_l_AttackWaypoint == PointFromId(1352))) {
        lv_l_SpawnPosition = PointFromId(109);
    }
    else {
        lv_l_SpawnPosition = PointFromId(233);
    }
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, lv_l_SpawnPosition);
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, lv_l_SpawnPosition);
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, gv_player03Target);
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, gv_player04Target);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_l_ResourceSize, lv_l_TechLevel, lv_l_SpawnPosition, true);
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 2, 2, 4, 4), libCOMI_gf_HybridMinor(), 0, gv_pLAYER_03_ENEMY, lv_l_SpawnPosition, 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 4, 4), libCOMI_gf_HybridMajor(), 0, gv_pLAYER_04_ENEMY, lv_l_SpawnPosition, 270.0);
    AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    libCOMI_gf_AddAttackForceWaypoint(lv_l_AttackWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_l_ResourceSize;
    int lv_l_TechLevel;
    point lv_l_SpawnPosition;

    // Automatic Variable Declarations
    const int auto595DEB80_ae = gv_pLAYER_04_ENEMY;
    int auto595DEB80_var;

    // Variable Initialization
    lv_l_ResourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_l_TechLevel = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("7th wave incoming");
    lv_l_SpawnPosition = PointFromId(109);
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, lv_l_SpawnPosition);
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, lv_l_SpawnPosition);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_l_ResourceSize, lv_l_TechLevel, lv_l_SpawnPosition, true);
    auto595DEB80_var = gv_pLAYER_03_ENEMY;
    for ( ; auto595DEB80_var <= auto595DEB80_ae; auto595DEB80_var += 1 ) {
        if ((auto595DEB80_var == gv_pLAYER_03_ENEMY)) {
            AIAttackWaveSetTargetPoint(auto595DEB80_var, gv_player03Target);
        }
        else {
            AIAttackWaveSetTargetPoint(auto595DEB80_var, gv_player04Target);
        }
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 1, 2), libCOMI_gf_HybridMajor(), 0, auto595DEB80_var, lv_l_SpawnPosition, 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 0, 0, 2, 2), libCOMI_gf_HybridMinor(), 0, auto595DEB80_var, lv_l_SpawnPosition, 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1351), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSize;
    int lv_techLevel;

    // Automatic Variable Declarations
    const int autoA7CE9428_ae = gv_pLAYER_04_ENEMY;
    int autoA7CE9428_var;

    // Variable Initialization
    lv_resourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techLevel = libCOMI_ge_CoopAITechLevelBuckets__5Late;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("8th wave incoming");
    AISetDifficulty(gv_pLAYER_03_ENEMY, c_diffEnableDangerMap, true);
    AISetDifficulty(gv_pLAYER_04_ENEMY, c_diffEnableDangerMap, true);
    AISetDifficulty(gv_pLAYER_03_ENEMY, c_diffWaveAvoidDanger, true);
    AISetDifficulty(gv_pLAYER_04_ENEMY, c_diffWaveAvoidDanger, true);
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(233));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(233));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceSize, lv_techLevel, PointFromId(233), true);
    autoA7CE9428_var = gv_pLAYER_03_ENEMY;
    for ( ; autoA7CE9428_var <= autoA7CE9428_ae; autoA7CE9428_var += 1 ) {
        if ((autoA7CE9428_var == gv_pLAYER_03_ENEMY)) {
            AIAttackWaveSetTargetPoint(autoA7CE9428_var, gv_player03Target);
        }
        else {
            AIAttackWaveSetTargetPoint(autoA7CE9428_var, gv_player04Target);
        }
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), libCOMI_gf_HybridMajor(), 0, autoA7CE9428_var, PointFromId(233), 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 0, 0, 0, 2), libCOMI_gf_HybridMinor(), 0, autoA7CE9428_var, PointFromId(233), 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1351), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave08_Init () {
    gt_AttackWave08 = TriggerCreate("gt_AttackWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 09
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave09_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_l_ResourceSize;
    int lv_l_TechLevel;

    // Automatic Variable Declarations
    const int auto0F6BCF75_ae = gv_pLAYER_04_ENEMY;
    int auto0F6BCF75_var;

    // Variable Initialization
    lv_l_ResourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_l_TechLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("9th wave incoming");
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(233));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(233));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_l_ResourceSize, lv_l_TechLevel, PointFromId(233), true);
    auto0F6BCF75_var = gv_pLAYER_03_ENEMY;
    for ( ; auto0F6BCF75_var <= auto0F6BCF75_ae; auto0F6BCF75_var += 1 ) {
        if ((auto0F6BCF75_var == gv_pLAYER_03_ENEMY)) {
            AIAttackWaveSetTargetPoint(auto0F6BCF75_var, gv_player03Target);
        }
        else {
            AIAttackWaveSetTargetPoint(auto0F6BCF75_var, gv_player04Target);
        }
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), libCOMI_gf_HybridMajor(), 0, auto0F6BCF75_var, PointFromId(233), 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 1, 3), libCOMI_gf_HybridMinor(), 0, auto0F6BCF75_var, PointFromId(233), 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1351), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave09_Init () {
    gt_AttackWave09 = TriggerCreate("gt_AttackWave09_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 10
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_l_ResourceSize;
    int lv_l_TechLevel;

    // Automatic Variable Declarations
    const int auto56B00E44_ae = gv_pLAYER_04_ENEMY;
    int auto56B00E44_var;

    // Variable Initialization
    lv_l_ResourceSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_l_TechLevel = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("10th wave incoming");
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_03_ENEMY, PointFromId(233));
    libCOMI_gf_SetCoopAIAttackGroupSpawnPoint(gv_pLAYER_04_ENEMY, PointFromId(233));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_l_ResourceSize, lv_l_TechLevel, PointFromId(233), true);
    auto56B00E44_var = gv_pLAYER_03_ENEMY;
    for ( ; auto56B00E44_var <= auto56B00E44_ae; auto56B00E44_var += 1 ) {
        if ((auto56B00E44_var == gv_pLAYER_03_ENEMY)) {
            AIAttackWaveSetTargetPoint(auto56B00E44_var, gv_player03Target);
        }
        else {
            AIAttackWaveSetTargetPoint(auto56B00E44_var, gv_player04Target);
        }
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 0, 0, 1, 1, 2, 2), libCOMI_gf_HybridMajor(), 0, auto56B00E44_var, PointFromId(233), 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
        UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 1, 1, 1, 1, 1, 3), libCOMI_gf_HybridMinor(), 0, auto56B00E44_var, PointFromId(233), 270.0);
        AIAttackWaveUseGroup(UnitGetOwner(UnitGroupUnit(UnitLastCreatedGroup(), 1)), UnitLastCreatedGroup());
    }
    libCOMI_gf_AddAttackForceWaypoint(PointFromId(1351), false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave10_Init () {
    gt_AttackWave10 = TriggerCreate("gt_AttackWave10_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Primary Objective Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyAllProtossShuttlesUpdate, false);
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesFailed, true, false);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeFailed, true, false);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatKS", false, -1);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/E5B2BD1F"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_escapedShuttlePosition, 1.5);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatPrimaryObjectiveFailed_Init () {
    gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD72354E1_g;
    int autoD72354E1_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextExpressionSetToken("Param/Expression/8BB48B3B", "ShuttlesCreated", IntToText(gv_shuttleKills[0]));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/C1983FBB"), TextExpressionAssemble("Param/Expression/8BB48B3B"));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/F0464554"), IntToText(gv_warningCounter));
    autoD72354E1_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoD72354E1_var = -1;
    while (true) {
        autoD72354E1_var = PlayerGroupNextPlayer(autoD72354E1_g, autoD72354E1_var);
        if (autoD72354E1_var < 0) { break; }
        TextExpressionSetToken("Param/Expression/2AD22DF8", "PlayerName", TextWithColor(PlayerName(autoD72354E1_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoD72354E1_var, false))));
        TextExpressionSetToken("Param/Expression/393DC4E8", "ShuttlesDestroyed", IntToText(gv_shuttleKills[autoD72354E1_var]));
        VictoryPanelAddCustomStatisticLine(TextExpressionAssemble("Param/Expression/2AD22DF8"), TextExpressionAssemble("Param/Expression/393DC4E8"));
    }
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryKS");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_GetAlliedCommandersPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/C2A17202"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_GetEnemyHumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/CC400199"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_victoryPan, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective No Shuttle Can Escape Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoShuttleCanEscapeCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_KaldirShuttle_Primary02");
    gv_objectiveNoShuttleCanEscape = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoShuttleCanEscapeCreate_Init () {
    gt_ObjectiveNoShuttleCanEscapeCreate = TriggerCreate("gt_ObjectiveNoShuttleCanEscapeCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective No Shuttle Can Escape Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoShuttleCanEscapeUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_decrementamount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeCreate, true, false);
    gv_objectiveShuttlesAllowedToEscapeMissed += 1;
    libCOMI_gf_SetMissionObjectiveProgress("AC_KaldirShuttle_Primary02", gv_objectiveShuttlesAllowedToEscapeMissed);
    if ((gv_objectiveShuttlesAllowedToEscapeMissed >= gv_objectiveShuttlesAllowedToEscapeMax)) {
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoShuttleCanEscapeUpdate_Init () {
    gt_ObjectiveNoShuttleCanEscapeUpdate = TriggerCreate("gt_ObjectiveNoShuttleCanEscapeUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective No Shuttle Can Escape Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoShuttleCanEscapeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeCreate, true, false);
    ObjectiveSetState(gv_objectiveNoShuttleCanEscape, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoShuttleCanEscapeComplete_Init () {
    gt_ObjectiveNoShuttleCanEscapeComplete = TriggerCreate("gt_ObjectiveNoShuttleCanEscapeComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective No Shuttle Can Escape Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNoShuttleCanEscapeFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeCreate, true, false);
    ObjectiveSetState(gv_objectiveNoShuttleCanEscape, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNoShuttleCanEscapeFailed_Init () {
    gt_ObjectiveNoShuttleCanEscapeFailed = TriggerCreate("gt_ObjectiveNoShuttleCanEscapeFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_KaldirShuttle_Primary01");
    libCOMI_gf_SetMissionObjectiveProgress("AC_KaldirShuttle_Primary01", gv_shuttleWavesRemaining);
    gv_objectiveDestroyDominionBase = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesCreate_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesCreate = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_decrementamount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_KaldirShuttle_Primary01", gv_shuttleWavesRemaining);
    if ((gv_shuttleWavesRemaining <= 0)) {
        TriggerExecute(gt_VictorySequence, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesUpdate_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesUpdate = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateCompleted);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesComplete_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesComplete = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy All Protoss Shuttles Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyAllProtossShuttlesFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, false);
    ObjectiveSetState(gv_objectiveDestroyDominionBase, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyAllProtossShuttlesFailed_Init () {
    gt_ObjectiveDestroyAllProtossShuttlesFailed = TriggerCreate("gt_ObjectiveDestroyAllProtossShuttlesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Escort Researchers Create
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEscortResearchersCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    libCOMI_gf_CreateObjectiveCampaign("AC_KaldirShuttle_Bonus01");
    gv_objectiveRescueStalkers2 = ObjectiveLastCreated();
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEscortResearchersCreate_Init () {
    gt_BonusObjectiveEscortResearchersCreate = TriggerCreate("gt_BonusObjectiveEscortResearchersCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Escort Researchers Complete
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEscortResearchersComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusObjectiveEscortResearchersCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KaldirShuttle_Bonus01", libCOMI_ge_MissionObjectiveState_Completed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEscortResearchersComplete_Init () {
    gt_BonusObjectiveEscortResearchersComplete = TriggerCreate("gt_BonusObjectiveEscortResearchersComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Escort Researchers Update
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEscortResearchersUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BonusObjectiveEscortResearchersCreate, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_KaldirShuttle_Bonus01", gv_bonusObjectiveEscortsEscorted);
    if ((gv_bonusObjectiveEscortsEscorted >= 3)) {
        TriggerExecute(gt_BonusObjectiveEscortResearchersComplete, true, false);
    }
    else {
        if ((gv_bonusObjectiveEscortsLost >= 3)) {
            TriggerExecute(gt_BonusObjectiveEscortResearchersFailed, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEscortResearchersUpdate_Init () {
    gt_BonusObjectiveEscortResearchersUpdate = TriggerCreate("gt_BonusObjectiveEscortResearchersUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective - Escort Researchers Failed
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveEscortResearchersFailed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeAI);
    }
    TriggerExecute(gt_BonusObjectiveEscortResearchersCreate, true, false);
    libCOMI_gf_ZS_SetMissionObjectiveState("AC_KaldirShuttle_Bonus01", libCOMI_ge_MissionObjectiveState_Failed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveEscortResearchersFailed_Init () {
    gt_BonusObjectiveEscortResearchersFailed = TriggerCreate("gt_BonusObjectiveEscortResearchersFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("AC_KaldirShuttle", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_l_VisionGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_l_VisionGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    TechTreeUpgradeAddLevel(gv_pLAYER_06_JUMPGATES, "CoopNPCPlayer", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_07_BONUS_OBJECTIVE, "CoopNPCPlayer", 1);
    PlayerSetColorIndex(gv_pLAYER_06_JUMPGATES, 0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_06_JUMPGATES, gv_pLAYER_07_BONUS_OBJECTIVE, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_05_SHUTTLE, gv_pLAYER_06_JUMPGATES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    AICampaignStart(gv_pLAYER_06_JUMPGATES);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(gv_pLAYER_03_ENEMY, AbilityCommand("BioPlasmidDischarge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_04_ENEMY, AbilityCommand("BioPlasmidDischarge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_05_SHUTTLE, AbilityCommand("BioPlasmidDischarge", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_03_ENEMY, AbilityCommand("BioStasis", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_04_ENEMY, AbilityCommand("BioStasis", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_05_SHUTTLE, AbilityCommand("BioStasis", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_03_ENEMY, AbilityCommand("LeviathanSpawnBroodLord", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_04_ENEMY, AbilityCommand("LeviathanSpawnBroodLord", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_05_SHUTTLE, AbilityCommand("LeviathanSpawnBroodLord", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_03_ENEMY, AbilityCommand("LeviathanSpawnMutalisk", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_04_ENEMY, AbilityCommand("LeviathanSpawnMutalisk", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_05_SHUTTLE, AbilityCommand("LeviathanSpawnMutalisk", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_rocksBig;
    unitgroup lv_rocksSmall;

    // Automatic Variable Declarations
    unitgroup auto153211C1_g;
    int auto153211C1_u;
    unit auto153211C1_var;
    unitgroup auto590504AD_g;
    int auto590504AD_u;
    unit auto590504AD_var;
    unitgroup autoD2ACCCF9_g;
    int autoD2ACCCF9_u;
    unit autoD2ACCCF9_var;
    unitgroup autoAB537DC7_g;
    int autoAB537DC7_u;
    unit autoAB537DC7_var;
    unitgroup autoFDCB3F42_g;
    int autoFDCB3F42_u;
    unit autoFDCB3F42_var;

    // Variable Initialization
    lv_rocksBig = UnitGroupEmpty();
    lv_rocksSmall = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto153211C1_g = UnitGroup(gv_c_BonusObjectiveEscortType, gv_pLAYER_07_BONUS_OBJECTIVE, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto153211C1_u = UnitGroupCount(auto153211C1_g, c_unitCountAll);
    for (;; auto153211C1_u -= 1) {
        auto153211C1_var = UnitGroupUnitFromEnd(auto153211C1_g, auto153211C1_u);
        if (auto153211C1_var == null) { break; }
        libCOMI_gf_DisplayUnitProgressBar(auto153211C1_var, StringExternal("Param/Value/649A1660"), 0, 60);
        libCOMI_gf_ShowHideUnitProgressBar(auto153211C1_var, false);
        UnitBehaviorAddPlayer(auto153211C1_var, "Harmless", gv_pLAYER_07_BONUS_OBJECTIVE, 1);
        libCOMI_gf_SetUnitInfoTextCampaign(auto153211C1_var, StringExternal("Param/Value/B0B7B594"), StringExternal("Param/Value/5FEA1DD5"), null);
        UnitSetState(auto153211C1_var, c_unitStateTargetable, false);
    }
    gv_dockingBayUnits[ge_LaunchLocation_LEFT] = UnitFromId(22);
    UnitGroupAdd(gv_dockingBays, UnitFromId(22));
    gv_dockingBayUnits[ge_LaunchLocation_MIDDLE] = UnitFromId(151);
    UnitGroupAdd(gv_dockingBays, UnitFromId(151));
    gv_dockingBayUnits[ge_LaunchLocation_RIGHT] = UnitFromId(153);
    UnitGroupAdd(gv_dockingBays, UnitFromId(153));
    gv_shuttleEscapePoint[ge_ExitLocation_LEFT] = UnitGetPosition(UnitFromId(1041));
    gv_shuttleEscapePoint[ge_ExitLocation_MIDDLE] = UnitGetPosition(UnitFromId(1042));
    gv_shuttleEscapePoint[ge_ExitLocation_RIGHT] = UnitGetPosition(UnitFromId(1043));
    gv_warpConduit[ge_ExitLocation_LEFT] = UnitFromId(1041);
    gv_warpConduit[ge_ExitLocation_MIDDLE] = UnitFromId(1042);
    gv_warpConduit[ge_ExitLocation_RIGHT] = UnitFromId(1043);
    auto590504AD_g = UnitGroup("ProtossDockingBayUnit", gv_pLAYER_05_SHUTTLE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto590504AD_u = UnitGroupCount(auto590504AD_g, c_unitCountAll);
    for (;; auto590504AD_u -= 1) {
        auto590504AD_var = UnitGroupUnitFromEnd(auto590504AD_g, auto590504AD_u);
        if (auto590504AD_var == null) { break; }
        UnitBehaviorAddPlayer(auto590504AD_var, "SuppressCloak", gv_pLAYER_05_SHUTTLE, 1);
        UnitSetState(auto590504AD_var, c_unitStateInvulnerable, true);
        libCOMI_gf_SetUnitInfoTextCampaign(auto590504AD_var, StringExternal("Param/Value/36C59E47"), StringExternal("Param/Value/E2EECFF9"), null);
        UnitSetState(auto590504AD_var, c_unitStateSelectable, false);
    }
    autoD2ACCCF9_g = UnitGroup("ProtossDockingBayUnit", gv_pLAYER_05_SHUTTLE, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD2ACCCF9_u = UnitGroupCount(autoD2ACCCF9_g, c_unitCountAll);
    for (;; autoD2ACCCF9_u -= 1) {
        autoD2ACCCF9_var = UnitGroupUnitFromEnd(autoD2ACCCF9_g, autoD2ACCCF9_u);
        if (autoD2ACCCF9_var == null) { break; }
        UnitBehaviorAddPlayer(autoD2ACCCF9_var, "SuppressCloak", gv_pLAYER_05_SHUTTLE, 1);
        UnitSetState(autoD2ACCCF9_var, c_unitStateInvulnerable, true);
        libCOMI_gf_SetUnitInfoTextCampaign(autoD2ACCCF9_var, StringExternal("Param/Value/C519B087"), StringExternal("Param/Value/F14C5F19"), null);
    }
    autoAB537DC7_g = UnitGroup("ExpeditionJumpGate", gv_pLAYER_06_JUMPGATES, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB537DC7_u = UnitGroupCount(autoAB537DC7_g, c_unitCountAll);
    for (;; autoAB537DC7_u -= 1) {
        autoAB537DC7_var = UnitGroupUnitFromEnd(autoAB537DC7_g, autoAB537DC7_u);
        if (autoAB537DC7_var == null) { break; }
        UnitSetState(autoAB537DC7_var, c_unitStateInvulnerable, true);
        UnitSetState(autoAB537DC7_var, c_unitStateTargetable, false);
        UnitSetState(autoAB537DC7_var, c_unitStateStatusBar, false);
        UnitSetState(autoAB537DC7_var, c_unitStateSelectable, true);
        UnitBehaviorAddPlayer(autoAB537DC7_var, "SuppressCloak", gv_pLAYER_05_SHUTTLE, 1);
    }
    autoFDCB3F42_g = UnitGroup("XelNagaShrine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFDCB3F42_u = UnitGroupCount(autoFDCB3F42_g, c_unitCountAll);
    for (;; autoFDCB3F42_u -= 1) {
        autoFDCB3F42_var = UnitGroupUnitFromEnd(autoFDCB3F42_g, autoFDCB3F42_u);
        if (autoFDCB3F42_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoFDCB3F42_var, "SetMinimapVisibility");
        libCOMI_gf_SetUnitInfoTextCampaign(autoFDCB3F42_var, StringExternal("Param/Value/5DF1ED19"), StringExternal("Param/Value/DE83E603"), null);
        UnitSetState(autoFDCB3F42_var, c_unitStateTargetable, false);
        UnitSetState(autoFDCB3F42_var, c_unitStateSelectable, false);
    }
    UnitSetState(UnitFromId(1532), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1532), c_unitStateHighlightable, false);
    UnitSetState(UnitFromId(1539), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1539), c_unitStateHighlightable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mechanicDifficulty = libCOMI_gf_GetMissionDifficulty();
    gv_shuttleShields = libCOMI_gf_DifficultyValueFixed2(gv_mechanicDifficulty, 100.0, 150.0, 200.0, 300.0, 400.0, 500.0);
    gv_shuttleLife = libCOMI_gf_DifficultyValueFixed2(gv_mechanicDifficulty, 150.0, 200.0, 300.0, 400.0, 500.0, 600.0);
    gv_shuttleSpeed = 1.15;
    gv_bonusObjectiveLife = 3000.0;
    gv_objectiveShuttlesAllowedToEscapeMax = libCOMI_gf_DifficultyValueInt2(gv_mechanicDifficulty, 10, 8, 6, 5, 3, 2);
    libCOMI_gf_SetObjectiveRequiredCountCampaign("AC_KaldirShuttle_Primary02", gv_objectiveShuttlesAllowedToEscapeMax);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    cai_start("aiBDA87FA6", gv_pLAYER_07_BONUS_OBJECTIVE);
    cai_waves_run(gv_pLAYER_07_BONUS_OBJECTIVE, PlayerGroupAll());
    cai_waves_run(gv_pLAYER_03_ENEMY, libCOMI_gf_GetAlliedCommandersPlayers());
    libCOMI_gf_SetCoopAIGatherPoint(gv_pLAYER_03_ENEMY, PointFromId(233));
    libCOMI_gf_SetCoopAIGatherPoint(gv_pLAYER_04_ENEMY, PointFromId(109));
    cai_start("ai3E812353", gv_pLAYER_05_SHUTTLE);
    cai_waves_run(gv_pLAYER_05_SHUTTLE, libCOMI_gf_HumanPlayers());
    libCOMI_gf_EnableDisableCoopAIPlayerAttackPings(PlayerGroupSingle(gv_pLAYER_05_SHUTTLE), false);
    AISetDifficulty(gv_pLAYER_03_ENEMY, c_diffNormalVision, false);
    AISetDifficulty(gv_pLAYER_04_ENEMY, c_diffNormalVision, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2C8F1A1D_val;
    playergroup auto8238D2E2_g;
    int auto8238D2E2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeAI);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyAllProtossShuttlesCreate, true, true);
    TriggerExecute(gt_ObjectiveNoShuttleCanEscapeCreate, true, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    auto2C8F1A1D_val = RandomInt(1, 3);
    if (auto2C8F1A1D_val == 1) {
        libCOMI_gf_SendMissionTransmission("Intro1KS", true, -1);
    }
    else if (auto2C8F1A1D_val == 2) {
        libCOMI_gf_SendMissionTransmission("Intro2KS", true, -1);
    }
    else if (auto2C8F1A1D_val == 3) {
        libCOMI_gf_SendMissionTransmission("Intro3KS", true, -1);
    }
    else {
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(7.0, c_timeAI);
    gf_ActivateDeactivateWarpConduit(UnitFromId(1042), ge_JumpGateState_Activate);
    gf_CreateObjectivePing(true, UnitGetPosition(UnitFromId(1042)), StringExternal("Param/Value/A43810E7"));
    libARRA_gf_StorePingForUnit(UnitFromId(1042), 1, PingLastCreated());
    libCOMI_gf_CreateAlertAtUnitCampaign("Trigger", StringExternal("Param/Value/56B18546"), null, UnitFromId(1042));
    auto8238D2E2_g = libCOMI_gf_HumanPlayers();
    auto8238D2E2_var = -1;
    while (true) {
        auto8238D2E2_var = PlayerGroupNextPlayer(auto8238D2E2_g, auto8238D2E2_var);
        if (auto8238D2E2_var < 0) { break; }
        VisExploreArea(auto8238D2E2_var, RegionCircle(UnitGetPosition(UnitFromId(1042)), 8.0), true, false);
    }
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(1), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(1), true, false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("WarpConduitOnline", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(2.0, c_timeAI);
    TriggerExecute(gt_SetupBonusObjective, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ShuttleSendWave01_Init();
    gt_ShuttleSendWave02_Init();
    gt_ShuttleSendWave03_Init();
    gt_ShuttleSendWave04_Init();
    gt_ShuttleSendWave05_Init();
    gt_ShuttleSendWave06_Init();
    gt_ShuttleSendWave07_Init();
    gt_ShuttleEscapeWarning_Init();
    gt_TransmissionEscapeWarningQ_Init();
    gt_EscapingShuttleDestroyed_Init();
    gt_ShuttleJumpProgressBar_Init();
    gt_ShuttleEscapes_Init();
    gt_ShuttleEscapesQ_Init();
    gt_ShuttleEscapesProgressWarningQ_Init();
    gt_TransmissionShuttleWaveDiesQ_Init();
    gt_ActivateWarpConduitLeft_Init();
    gt_ActivateWarpConduitMiddle_Init();
    gt_ActivateWarpConduitRight_Init();
    gt_TransmissionShuttleLaunch01Q_Init();
    gt_TransmissionShuttleLaunch02Q_Init();
    gt_TransmissionShuttleLaunch03Q_Init();
    gt_TransmissionShuttleLaunch04Q_Init();
    gt_TransmissionShuttleLaunch05Q_Init();
    gt_TransmissionShuttleLaunch06Q_Init();
    gt_TransmissionShuttleLaunch07Q_Init();
    gt_TransmissionShuttleLaunch08Q_Init();
    gt_IceWallCollapse01_Init();
    gt_IceWallCollapse02_Init();
    gt_IceWallCollapse03_Init();
    gt_IceWallCollapse04_Init();
    gt_IceWallCollapse05_Init();
    gt_IceWallCollapse06_Init();
    gt_BonusObjectiveRevealTransmissionQ_Init();
    gt_BonusObjectiveMoveOutTransmissionQ_Init();
    gt_BonusObjectiveCompleteTransmissionQ_Init();
    gt_BonusObjectiveFailedTransmissionQ_Init();
    gt_BonusObjectiveFinalStageTransmissionQ_Init();
    gt_SetupBonusObjective_Init();
    gt_StartBonusObjective01_Init();
    gt_StartBonusObjective02_Init();
    gt_StartBonusObjective03_Init();
    gt_AttackWaveTransmissionQ_Init();
    gt_BonusObjectiveSentryForceFields_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_AttackWave08_Init();
    gt_AttackWave09_Init();
    gt_AttackWave10_Init();
    gt_DefeatPrimaryObjectiveFailed_Init();
    gt_VictorySequence_Init();
    gt_ObjectiveNoShuttleCanEscapeCreate_Init();
    gt_ObjectiveNoShuttleCanEscapeUpdate_Init();
    gt_ObjectiveNoShuttleCanEscapeComplete_Init();
    gt_ObjectiveNoShuttleCanEscapeFailed_Init();
    gt_ObjectiveDestroyAllProtossShuttlesCreate_Init();
    gt_ObjectiveDestroyAllProtossShuttlesUpdate_Init();
    gt_ObjectiveDestroyAllProtossShuttlesComplete_Init();
    gt_ObjectiveDestroyAllProtossShuttlesFailed_Init();
    gt_BonusObjectiveEscortResearchersCreate_Init();
    gt_BonusObjectiveEscortResearchersComplete_Init();
    gt_BonusObjectiveEscortResearchersUpdate_Init();
    gt_BonusObjectiveEscortResearchersFailed_Init();
    gt_Init01LoadData_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init02Players_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init08Difficulties_Init();
    gt_StartAI_Init();
    gt_StartGameQ_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
