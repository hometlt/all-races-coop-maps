//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Relic of Twilight
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
    //==================================================================================================
    //
    // Generated Map Script
    //
    // Name:   Relic of Twilight
    //
    //==================================================================================================
    include "TriggerLibs/NativeLib"
    include "TriggerLibs/VoidLib"
    include "LibCOMI"
    //--------------------------------------------------------------------------------------------------
    // Library Initialization
    //--------------------------------------------------------------------------------------------------
    void InitLibs () {
        libNtve_InitLib();
        libLotv_InitLib();
        libCOMI_InitLib();
    }
    //--------------------------------------------------------------------------------------------------
    // Constants
    //--------------------------------------------------------------------------------------------------
    const int gv_pLAYER_01_USER = 1;
    const int gv_pLAYER_02_USER = 2;
    const int gv_pLAYER_03_ENEMY = 6;
    const int gv_pLAYER_04_ENEMY = 7;
    //--------------------------------------------------------------------------------------------------
    // Global Variables
    //--------------------------------------------------------------------------------------------------
    playergroup gv_enemyGroup;
    region gv_bileCitadelRangeVariable;
    point[3] gv_target;
    unitgroup gv_targetUnit;
    int gv_warningPingCount;
    int gv_defenseMatrixPing;
    region[14] gv_disintegratorRegionArray;
    point[14] gv_disintegratorSoundArray;
    trigger[14] gv_disintegratorTriggerArray;
    unitgroup gv_mindReaverUnitGroup;
    point[7] gv_mindReaverInfestedTerranSpawn;
    int gv_stageID;
    int[4] gv_randomActiveConduits;
    bool gv_contestedConduits;
    unit[7] gv_conduitSelfArray;
    int[7] gv_conduitStalled;
    trigger[9] gv_conduitAttackWave;
    int[7] gv_conduitTextTag;
    point[7] gv_conduitSoundPoint;
    region[7] gv_conduitRegion;
    int[7] gv_conduitPing;
    trigger[7] gv_conduitActivationTrigger;
    trigger[7] gv_conduitPrimingTrigger;
    int[7][2] gv_conduitUnitCount;
    int gv_conduitTimerAmount;
    timer gv_conduitTimer;
    int gv_voidEmitterConduitsActivated;
    int gv_voidEmitterConduitsPrimed;
    int gv_voidEmitterFireAmount;
    int gv_voidEmitterFractureAmount;
    point gv_victoryCompletePan;
    trigger[4] gv_conduitPressureTrigger;
    unitgroup[4] gv_conduitAttackGroup;
    int[5] gv_attackGroupPing;
    int gv_attackWaveCount;
    bool gv_attackWaveLarge;
    trigger[5] gv_attackGroupPingTrigger;
    region[4] gv_attackSpawn;
    int gv_voidEmitterFractures;
    int gv_maximumVoidEmitterFractures;
    int gv_objectiveVoidEmitterFracture;
    int gv_voidEmitterHitsSpearOfAdun;
    int gv_objectiveVoidEmitterSpearOfAdun;
    int gv_objectiveDefenseMatrix;
    int gv_hitCountForDebris;
    void InitGlobals () {
        int init_i;
        gv_enemyGroup = PlayerGroupEmpty();
        gv_targetUnit = UnitGroupEmpty();
        gv_defenseMatrixPing = c_invalidPingId;
        gv_mindReaverUnitGroup = UnitGroupEmpty();
        for (init_i = 0; init_i <= 3; init_i += 1) {
            gv_randomActiveConduits[init_i] = -1;
        }
        for (init_i = 0; init_i <= 6; init_i += 1) {
            gv_conduitTextTag[init_i] = c_textTagNone;
        }
        for (init_i = 0; init_i <= 6; init_i += 1) {
            gv_conduitPing[init_i] = c_invalidPingId;
        }
        gv_conduitTimer = TimerCreate();
        gv_victoryCompletePan = PointFromId(1422278233);
        for (init_i = 0; init_i <= 3; init_i += 1) {
            gv_conduitAttackGroup[init_i] = UnitGroupEmpty();
        }
        for (init_i = 0; init_i <= 4; init_i += 1) {
            gv_attackGroupPing[init_i] = c_invalidPingId;
        }
        gv_maximumVoidEmitterFractures = 12;
        gv_objectiveVoidEmitterFracture = c_invalidObjectiveId;
        gv_voidEmitterHitsSpearOfAdun = 5;
        gv_objectiveVoidEmitterSpearOfAdun = c_invalidObjectiveId;
        gv_objectiveDefenseMatrix = c_invalidObjectiveId;
        gv_hitCountForDebris = 5;
    }
    //--------------------------------------------------------------------------------------------------
    // Global Function Declarations
    //--------------------------------------------------------------------------------------------------
    void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
    point gf_AttackWaveSpawn ();
    void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
    //--------------------------------------------------------------------------------------------------
    // Trigger Variables
    //--------------------------------------------------------------------------------------------------
    trigger gt_Init01LoadData;
    trigger gt_Init03LoadingComplete;
    trigger gt_Init04Technology;
    trigger gt_Init05Units;
    trigger gt_Init06MusicSound;
    trigger gt_Init07Environment;
    trigger gt_Init08Difficulties;
    trigger gt_StartGameQ;
    trigger gt_BileCitadelBombardment;
    trigger gt_BileCitadelMissilePings;
    trigger gt_BileCitadelBanelings;
    trigger gt_BileCitadelAutoAcquire;
    trigger gt_BileCitadelBaseDefense;
    trigger gt_Entering;
    trigger gt_Exiting;
    trigger gt_Periodic;
    trigger gt_NoUnitWarning;
    trigger gt_ContestedEffects;
    trigger gt_Disintegrator1;
    trigger gt_Disintegrator2;
    trigger gt_Disintegrator3;
    trigger gt_Disintegrator4;
    trigger gt_Disintegrator5;
    trigger gt_Disintegrator6;
    trigger gt_Disintegrator7;
    trigger gt_Disintegrator8;
    trigger gt_Disintegrator9;
    trigger gt_Disintegrator10;
    trigger gt_Disintegrator11;
    trigger gt_Disintegrator12;
    trigger gt_Disintegrator13;
    trigger gt_Disintegrator14;
    trigger gt_DefenseMatrixActivate;
    trigger gt_DefenseMatrixInit;
    trigger gt_DefenseMatrixReady;
    trigger gt_MindReaverAbduct;
    trigger gt_MindReaverLongAbduct;
    trigger gt_MindReaverInfestedTerrans;
    trigger gt_GameManager;
    trigger gt_LeviathanMutalisks;
    trigger gt_LurkerSwarmHostBurrow;
    trigger gt_ViperParasiticBomb;
    trigger gt_ViperAbduct;
    trigger gt_ViperDisablingCloud;
    trigger gt_InfestorFungalGrowth;
    trigger gt_ExpansionBarriers;
    trigger gt_EnergyRefresh;
    trigger gt_Rebuild;
    trigger gt_ConduitSequence;
    trigger gt_ConduitRegionCheck;
    trigger gt_ConduitTextTags;
    trigger gt_ConduitTimer;
    trigger gt_ConduitContested;
    trigger gt_CentralConduitPriming;
    trigger gt_CentralConduitActivating;
    trigger gt_WesternConduitPriming;
    trigger gt_WesternConduitActivating;
    trigger gt_NorthernConduitPriming;
    trigger gt_NorthernConduitActivating;
    trigger gt_SouthwesternConduitPriming;
    trigger gt_SouthwesternConduitActivating;
    trigger gt_NortheasternConduitPriming;
    trigger gt_NortheasternConduitActivating;
    trigger gt_SouthernConduitPriming;
    trigger gt_SouthernConduitActivating;
    trigger gt_EasternConduitPriming;
    trigger gt_EasternConduitActivating;
    trigger gt_VoidEmitterSequence;
    trigger gt_EnemyAttackingQ;
    trigger gt_PsionicDisruptors;
    trigger gt_HybridDetected;
    trigger gt_CloakedUnits;
    trigger gt_Contesting;
    trigger gt_Stage2Start;
    trigger gt_Stage4Start;
    trigger gt_EnteringEnemyBase;
    trigger gt_Stage2Nudge;
    trigger gt_BileCitadelBombard;
    trigger gt_BombardAutoAcquire;
    trigger gt_ConduitBombard;
    trigger gt_FirstFracture;
    trigger gt_FirstHit;
    trigger gt_NearingVictory;
    trigger gt_NearingDefeat;
    trigger gt_BonusObjectiveInit;
    trigger gt_BonusObjectiveComplete;
    trigger gt_AttackWave;
    trigger gt_BossWaveStage4;
    trigger gt_BossWaveStage6;
    trigger gt_DefeatPrimaryObjectiveFailed;
    trigger gt_VictoryPrimaryObjectiveComplete;
    trigger gt_VictorySequence;
    trigger gt_StartAI;
    trigger gt_Conduit1Pressure;
    trigger gt_Conduit2Pressure;
    trigger gt_Conduit3Pressure;
    trigger gt_Conduit4Pressure;
    trigger gt_CreateAttackWave;
    trigger gt_AttackWaveIntercept;
    trigger gt_PingManager1;
    trigger gt_PingManager2;
    trigger gt_PingManager3;
    trigger gt_PingManager4;
    trigger gt_PingManager5;
    trigger gt_ResetMovementSpeed;
    trigger gt_SetupAttackWaveSpawn;
    trigger gt_AIAttackWaves;
    trigger gt_AttackWave01;
    trigger gt_AttackWave02;
    trigger gt_AttackWave03;
    trigger gt_AttackWave04;
    trigger gt_AttackWave05;
    trigger gt_AttackWave06;
    trigger gt_AttackWave07;
    trigger gt_VoidEmitterFractureUpdate;
    trigger gt_VoidEmitterFractureComplete;
    trigger gt_VoidEmitterFractureFailed;
    trigger gt_VoidEmitterFractureCreate;
    trigger gt_VoidEmitterSpearOfAdunUpdate;
    trigger gt_VoidEmitterSpearOfAdunFailed;
    trigger gt_VoidEmitterSpearOfAdunComplete;
    trigger gt_VoidEmitterSpearOfAdunCreate;
    trigger gt_DefenseMatrixFailed;
    trigger gt_DefenseMatrixComplete;
    trigger gt_DefenseMatrixCreate;
    trigger gt_OrbitalDebrisFromHit;
    trigger gt_OrbitalDebrisPersistent;
    //--------------------------------------------------------------------------------------------------
    // Global Functions
    //--------------------------------------------------------------------------------------------------
    trigger auto_gf_RunMissionEvent_Trigger = null;
    trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
    fixed auto_gf_RunMissionEvent_lp_missionEventTime;
    void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
        auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
        auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
        if (auto_gf_RunMissionEvent_Trigger == null) {
            auto_gf_RunMissionEvent_Trigger = TriggerCreate("auto_gf_RunMissionEvent_TriggerFunc");
        }
        TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
    }
    bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
        trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
        fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
        // Automatic Variable Declarations
        // Implementation
        while (!((GameGetMissionTime() >= lp_missionEventTime))) {
            Wait(0.5, c_timeAI);
        }
        if ((libCOMI_gf_GameIsOver() == false)) {
            TriggerExecute(lp_missionEventTrigger, true, false);
        }
        return true;
    }
    point gf_AttackWaveSpawn () {
        // Variable Declarations
        int lv_mapSide;
        int lv_spawnLocationIter;
        // Automatic Variable Declarations
        // Variable Initialization
        // Implementation
        return RegionGetCenter(gv_attackSpawn[RandomInt(1, 3)]);
    }
    trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
    trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
    void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
        auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
        auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
        if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
            auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
        }
        TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
    }
    bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
        trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
        fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
        // Automatic Variable Declarations
        // Implementation
        while (!((lp_time <= GameGetMissionTime()))) {
            Wait(0.3, c_timeAI);
        }
        if ((libCOMI_gf_GameIsOver() == false)) {
            TriggerExecute(lp_attackWave, true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Init 01 Load Data
    //--------------------------------------------------------------------------------------------------
    bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
        if (!runActions) {
            return true;
        }
        libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Init01LoadData_Init () {
        gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
        TriggerAddEventMapInit(gt_Init01LoadData);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Init 03 Loading Complete
    //--------------------------------------------------------------------------------------------------
    bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
        TriggerExecute(gt_Init04Technology, true, false);
        TriggerExecute(gt_Init05Units, true, true);
        TriggerExecute(gt_Init06MusicSound, true, false);
        TriggerExecute(gt_Init07Environment, true, false);
        TriggerExecute(gt_Init08Difficulties, true, false);
        TriggerExecute(gt_StartAI, true, false);
        TriggerExecute(gt_StartGameQ, true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Init03LoadingComplete_Init () {
        gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Init 04 Technology
    //--------------------------------------------------------------------------------------------------
    bool gt_Init04Technology_Func (bool testConds, bool runActions) {
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Init04Technology_Init () {
        gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Init 05 Units
    //--------------------------------------------------------------------------------------------------
    bool gt_Init05Units_Func (bool testConds, bool runActions) {

        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 3) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 3)) {
            UnitSetPropertyFixed(UnitFromId(1354800491), c_unitPropLife, 10000.0);
            UnitSetPropertyFixed(UnitFromId(1354800491), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitFromId(1354800491), c_unitPropLifeRegen, 15.0);
        }
        else if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 4)) {
            UnitSetPropertyFixed(UnitFromId(1354800491), c_unitPropLife, 10000.0);
            UnitSetPropertyFixed(UnitFromId(1354800491), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitFromId(1354800491), c_unitPropLifeRegen, 25.0);
        }

        UnitSetPropertyFixed(UnitFromId(1471384092), c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(750, 1000, 2000, 2500));
        UnitSetPropertyFixed(UnitFromId(1471384092), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(384303773), c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(500, 1000, 1500, 2000));
        UnitSetPropertyFixed(UnitFromId(384303773), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(773756011), c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(500, 1000, 1500, 2000));
        UnitSetPropertyFixed(UnitFromId(773756011), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(478662900), c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(250, 500, 750, 1000));
        UnitSetPropertyFixed(UnitFromId(478662900), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(324069986), c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(250, 500, 750, 1000));
        UnitSetPropertyFixed(UnitFromId(324069986), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(2100103657), c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(250, 500, 750, 1000));
        UnitSetPropertyFixed(UnitFromId(2100103657), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(327606957), c_unitPropLifeMax, libLotv_gf_DifficultyValueInt2(250, 500, 750, 1000));
        UnitSetPropertyFixed(UnitFromId(327606957), c_unitPropLifePercent, 100.0);

        UnitSetState(UnitFromId(187634382), c_unitStateSelectable, false);
        UnitSetState(UnitFromId(187634382), c_unitStateTooltipable, false);
        UnitSetState(UnitFromId(187634382), c_unitStateTargetable, false);
        UnitSetState(UnitFromId(946323179), c_unitStateSelectable, false);
        UnitSetState(UnitFromId(946323179), c_unitStateTooltipable, false);
        UnitSetState(UnitFromId(946323179), c_unitStateTargetable, false);
        UnitSetState(UnitFromId(861053811), c_unitStateSelectable, false);
        UnitSetState(UnitFromId(861053811), c_unitStateTooltipable, false);
        UnitSetState(UnitFromId(861053811), c_unitStateTargetable, false);
        UnitSetState(UnitFromId(1459965617), c_unitStateSelectable, false);
        UnitSetState(UnitFromId(1459965617), c_unitStateTooltipable, false);
        UnitSetState(UnitFromId(1459965617), c_unitStateTargetable, false);

        UnitSetPropertyFixed(UnitFromId(1985874501), c_unitPropLifeMax, 3000.0);
        UnitSetPropertyFixed(UnitFromId(1985874501), c_unitPropLife, 3000.0);
        UnitSetPropertyFixed(UnitFromId(1985874501), c_unitPropLifeRegen, 10.0);
     
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Init05Units_Init () {
        gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Init 06 Music/Sound
    //--------------------------------------------------------------------------------------------------
    bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Init06MusicSound_Init () {
        gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Init 07 Environment
    //--------------------------------------------------------------------------------------------------
    bool gt_Init07Environment_Func (bool testConds, bool runActions) {
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Init07Environment_Init () {
        gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Init 08 Difficulties
    //--------------------------------------------------------------------------------------------------
    bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_bonusObjectiveLife;
        fixed lv_mainObjectiveLife;
        // Automatic Variable Declarations
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 4)) {
            gv_bileCitadelRangeVariable = RegionEntireMap();
        }
        else {
            gv_bileCitadelRangeVariable = RegionFromId(29);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Init08Difficulties_Init () {
        gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Start Game Q
    //--------------------------------------------------------------------------------------------------
    bool gt_StartGameQ_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        // Automatic Variable Declarations
        const int auto119C7099_ae = 6;
        const int auto119C7099_ai = 1;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/8EA96396"), null, PlayerStartLocation(gv_pLAYER_01_USER));
        UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/0A276A27"), null, PlayerStartLocation(gv_pLAYER_02_USER));
        gv_maximumVoidEmitterFractures = 12;
        gv_voidEmitterHitsSpearOfAdun = libLotv_gf_DifficultyValueInt2(10, 5, 5, 3);
        gv_conduitActivationTrigger[0] = gt_CentralConduitActivating;
        gv_conduitActivationTrigger[1] = gt_WesternConduitActivating;
        gv_conduitActivationTrigger[2] = gt_NorthernConduitActivating;
        gv_conduitActivationTrigger[3] = gt_SouthwesternConduitActivating;
        gv_conduitActivationTrigger[4] = gt_NortheasternConduitActivating;
        gv_conduitActivationTrigger[5] = gt_SouthernConduitActivating;
        gv_conduitActivationTrigger[6] = gt_EasternConduitActivating;
        gv_conduitSelfArray[0] = UnitFromId(480043737);
        gv_conduitSelfArray[1] = UnitFromId(1774945909);
        gv_conduitSelfArray[2] = UnitFromId(1042779624);
        gv_conduitSelfArray[3] = UnitFromId(1230625684);
        gv_conduitSelfArray[4] = UnitFromId(879122992);
        gv_conduitSelfArray[5] = UnitFromId(460052125);
        gv_conduitSelfArray[6] = UnitFromId(1391269496);
        gv_conduitRegion[0] = RegionFromId(7);
        gv_conduitRegion[1] = RegionFromId(1);
        gv_conduitRegion[2] = RegionFromId(6);
        gv_conduitRegion[3] = RegionFromId(2);
        gv_conduitRegion[4] = RegionFromId(5);
        gv_conduitRegion[5] = RegionFromId(3);
        gv_conduitRegion[6] = RegionFromId(4);
        gv_conduitPrimingTrigger[0] = gt_CentralConduitPriming;
        gv_conduitPrimingTrigger[1] = gt_WesternConduitPriming;
        gv_conduitPrimingTrigger[2] = gt_NorthernConduitPriming;
        gv_conduitPrimingTrigger[3] = gt_SouthwesternConduitPriming;
        gv_conduitPrimingTrigger[4] = gt_NortheasternConduitPriming;
        gv_conduitPrimingTrigger[5] = gt_SouthernConduitPriming;
        gv_conduitPrimingTrigger[6] = gt_EasternConduitPriming;
        gv_conduitSoundPoint[0] = PointFromId(2023050222);
        gv_conduitSoundPoint[1] = PointFromId(1692792103);
        gv_conduitSoundPoint[2] = PointFromId(1485502564);
        gv_conduitSoundPoint[3] = PointFromId(1065726449);
        gv_conduitSoundPoint[4] = PointFromId(420099945);
        gv_conduitSoundPoint[5] = PointFromId(926667646);
        gv_conduitSoundPoint[6] = PointFromId(1486843194);
        gv_disintegratorRegionArray[0] = RegionFromId(33);
        gv_disintegratorRegionArray[1] = RegionFromId(34);
        gv_disintegratorRegionArray[2] = RegionFromId(32);
        gv_disintegratorRegionArray[3] = RegionFromId(31);
        gv_disintegratorRegionArray[4] = RegionFromId(26);
        gv_disintegratorRegionArray[5] = RegionFromId(25);
        gv_disintegratorRegionArray[6] = RegionFromId(19);
        gv_disintegratorRegionArray[7] = RegionFromId(20);
        gv_disintegratorRegionArray[8] = RegionFromId(21);
        gv_disintegratorRegionArray[9] = RegionFromId(22);
        gv_disintegratorRegionArray[10] = RegionFromId(23);
        gv_disintegratorRegionArray[11] = RegionFromId(24);
        gv_disintegratorRegionArray[12] = RegionFromId(27);
        gv_disintegratorRegionArray[13] = RegionFromId(28);
        gv_disintegratorSoundArray[0] = PointFromId(1656630242);
        gv_disintegratorSoundArray[1] = PointFromId(1310696683);
        gv_disintegratorSoundArray[2] = PointFromId(235006013);
        gv_disintegratorSoundArray[3] = PointFromId(1098259908);
        gv_disintegratorSoundArray[4] = PointFromId(921606747);
        gv_disintegratorSoundArray[5] = PointFromId(1238940601);
        gv_disintegratorSoundArray[6] = PointFromId(1750717840);
        gv_disintegratorSoundArray[7] = PointFromId(1306032133);
        gv_disintegratorSoundArray[8] = PointFromId(1672092886);
        gv_disintegratorSoundArray[9] = PointFromId(81671115);
        gv_disintegratorSoundArray[10] = PointFromId(1038964226);
        gv_disintegratorSoundArray[11] = PointFromId(774607791);
        gv_disintegratorSoundArray[12] = PointFromId(234684711);
        gv_disintegratorSoundArray[13] = PointFromId(2136874361);
        gv_disintegratorTriggerArray[0] = gt_Disintegrator1;
        gv_disintegratorTriggerArray[1] = gt_Disintegrator2;
        gv_disintegratorTriggerArray[2] = gt_Disintegrator3;
        gv_disintegratorTriggerArray[3] = gt_Disintegrator4;
        gv_disintegratorTriggerArray[4] = gt_Disintegrator5;
        gv_disintegratorTriggerArray[5] = gt_Disintegrator6;
        gv_disintegratorTriggerArray[6] = gt_Disintegrator7;
        gv_disintegratorTriggerArray[7] = gt_Disintegrator8;
        gv_disintegratorTriggerArray[8] = gt_Disintegrator9;
        gv_disintegratorTriggerArray[9] = gt_Disintegrator10;
        gv_disintegratorTriggerArray[10] = gt_Disintegrator11;
        gv_disintegratorTriggerArray[11] = gt_Disintegrator12;
        gv_disintegratorTriggerArray[12] = gt_Disintegrator13;
        gv_disintegratorTriggerArray[13] = gt_Disintegrator14;
        gv_attackGroupPingTrigger[0] = gt_PingManager1;
        gv_attackGroupPingTrigger[1] = gt_PingManager2;
        gv_attackGroupPingTrigger[2] = gt_PingManager3;
        gv_attackGroupPingTrigger[3] = gt_PingManager4;
        gv_attackGroupPingTrigger[4] = gt_PingManager5;
        gv_conduitPressureTrigger[0] = gt_Conduit1Pressure;
        gv_conduitPressureTrigger[1] = gt_Conduit2Pressure;
        gv_conduitPressureTrigger[2] = gt_Conduit3Pressure;
        gv_conduitPressureTrigger[3] = gt_Conduit4Pressure;
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Aiur05EMPWave");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "THorner05SElectricalArcs");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Sparks_DT");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Shakuras_City_Debris");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Ground_Energy_Crack");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "DT_Fire_Large");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Smoke_Pillar_Tall_DT");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Shakuras_CityBuilding_Tower_Destroyed");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Shakuras_City_Building_Cathedral_Destroyed");
        lv_iterator = 0;
        for ( ; ( (auto119C7099_ai >= 0 && lv_iterator <= auto119C7099_ae) || (auto119C7099_ai < 0 && lv_iterator >= auto119C7099_ae) ) ; lv_iterator += auto119C7099_ai ) {
            SoundPlayAtPointForPlayer(SoundLink("Xelnaga_Vision_Temple_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_iterator], 0.0, 75.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_iterator], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_iterator], "Aiur05EMPWave");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_iterator], "Protoss_Base_Decals");
        }
        Wait(6.0, c_timeReal);
        TriggerQueueEnter();
        TriggerExecute(gt_VoidEmitterFractureCreate, true, true);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_VoidEmitterSpearOfAdunCreate, true, true);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 10.232, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("MissionStart1RoT", true, -1);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, PointFromId(1422278233), StringExternal("Param/Value/28603F5F"));
        PingSetColor(PingLastCreated(), Color(0.00, 100.00, 0.00));
        PingSetScale(PingLastCreated(), 1.5);
        PingSetDuration(PingLastCreated(), 4.0);
        VisExploreArea(gv_pLAYER_01_USER, RegionFromId(15), true, false);
        VisExploreArea(gv_pLAYER_02_USER, RegionFromId(15), true, false);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 11.28, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("MissionStart2RoT", true, -1);
        TriggerExecute(gt_GameManager, true, false);
        Wait(2.0, c_timeReal);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 9.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("MissionStart3RoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_StartGameQ_Init () {
        gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Bile Citadel Bombardment
    //--------------------------------------------------------------------------------------------------
    bool gt_BileCitadelBombardment_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        int lv_chooseRandomConduit;
        point lv_randomPointAtConduit;
        // Automatic Variable Declarations
        const int autoC740FA7B_ae = 10;
        const int autoC740FA7B_ai = 1;
        fixed autoC0D2C8A5_at;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((TimerGetRemaining(gv_conduitTimer) >= libLotv_gf_DifficultyValueInt2(30, 25, 25, 20)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(gt_BileCitadelAutoAcquire, false);
        TriggerEnable(gt_BileCitadelBaseDefense, false);
        TriggerExecute(gt_ConduitBombard, true, false);
        lv_chooseRandomConduit = RandomInt(0, (gv_voidEmitterConduitsPrimed - 1));
        VisRevealArea(1, RegionFromId(30), 20.0, false);
        VisRevealArea(2, RegionFromId(30), 20.0, false);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 40.0, 20.0, 4.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 40.0, 20.0, 4.0);
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingNydus", gv_conduitSoundPoint[gv_randomActiveConduits[lv_chooseRandomConduit]], ColorWithAlpha(32.55, 49.41, 0.39, 0.00), 15.0);
        PingSetScale(PingLastCreated(), 0.8);
        SoundPlayForPlayer(SoundLink("Hybrid03_CS_Open_Ultrlisk_Roar", -1), c_maxPlayers, PlayerGroupAll(), 35.0, 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BileCitadelConduitBombard", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_conduitRegion[gv_randomActiveConduits[lv_chooseRandomConduit]]));
        SoundWait(SoundLastPlayed(), 3.0, c_soundOffsetEnd);
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(936690535)), 5.0, Color(100.00, 50.20, 25.10));
        lv_iterator = 1;
        for ( ; ( (autoC740FA7B_ai >= 0 && lv_iterator <= autoC740FA7B_ae) || (autoC740FA7B_ai < 0 && lv_iterator >= autoC740FA7B_ae) ) ; lv_iterator += autoC740FA7B_ai ) {
            Wait(0.5, c_timeReal);
            lv_randomPointAtConduit = RegionRandomPoint(gv_conduitRegion[gv_randomActiveConduits[lv_chooseRandomConduit]]);
            if ((((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 1)) || ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 2)))) {
                UnitIssueOrder(UnitFromId(936690535), OrderTargetingPoint(AbilityCommand("BileCitadelBombardment", 0), lv_randomPointAtConduit), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitFromId(936690535), OrderTargetingPoint(AbilityCommand("BileCitadelBombardment2", 0), lv_randomPointAtConduit), c_orderQueueReplace);
            }
            SoundPlayForPlayer(SoundLink("ImmobilizationWave_ShockwaveExplsoionDistant", -1), c_maxPlayers, PlayerGroupAll(), RandomInt(95, 145), 0.0);
            SoundPlayAtPointForPlayer(SoundLink("Ravager_CorrosiveBileAoe_AttackLaunch", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936690535)), 4.0, 300.0, 0.0);
        }
        autoC0D2C8A5_at = 0;
        while (!(((UnitCount("BileLauncherZagaraMissile", gv_pLAYER_03_ENEMY, RegionCircle(lv_randomPointAtConduit, 0.2), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0) == 1) || (UnitCount("BileLauncherZagaraMissile", gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0) == 0))) && autoC0D2C8A5_at <= 20.0) {
            Wait(0.1, c_timeGame);
            autoC0D2C8A5_at = autoC0D2C8A5_at + 0.1;
        }
        Wait(1.0, c_timeReal);
        UnitRemove(UnitLastCreated());
        TriggerEnable(gt_BileCitadelAutoAcquire, true);
        TriggerEnable(gt_BileCitadelBaseDefense, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BileCitadelBombardment_Init () {
        gt_BileCitadelBombardment = TriggerCreate("gt_BileCitadelBombardment_Func");
        TriggerEnable(gt_BileCitadelBombardment, false);
        TriggerAddEventTimePeriodic(gt_BileCitadelBombardment, RandomInt(90, 135), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Bile Citadel Missile Pings
    //--------------------------------------------------------------------------------------------------
    bool gt_BileCitadelMissilePings_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        fixed auto8A34951B_at;
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "BileLauncherZagaraMissile"))) {
                return false;
            }
            if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(36)) == true))) {
                return false;
            }
            if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(14)) == false))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingScourgeCannon", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 65.10, 0.00, 0.00), 0.0);
        PingSetUnit(PingLastCreated(), EventUnit());
        PingSetScale(PingLastCreated(), 0.25);
        auto8A34951B_at = 0;
        while (!((UnitIsAlive(EventUnit()) == false)) && auto8A34951B_at <= 15.0) {
            Wait(1.0, c_timeGame);
            auto8A34951B_at = auto8A34951B_at + 1.0;
        }
        libCOMI_gf_DestroyPingCoop(PingLastCreated());
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BileCitadelMissilePings_Init () {
        gt_BileCitadelMissilePings = TriggerCreate("gt_BileCitadelMissilePings_Func");
        TriggerAddEventUnitRegion(gt_BileCitadelMissilePings, null, RegionEntireMap(), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Bile Citadel Banelings
    //--------------------------------------------------------------------------------------------------
    bool gt_BileCitadelBanelings_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "BileLauncherZagaraMissile"))) {
                return false;
            }
            if (!(((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 4)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        UnitCreate(RandomInt(1, 3), "Baneling", 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BileCitadelBanelings_Init () {
        gt_BileCitadelBanelings = TriggerCreate("gt_BileCitadelBanelings_Func");
        TriggerAddEventUnitBecomesIdle(gt_BileCitadelBanelings, null, true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Bile Citadel Auto-Acquire
    //--------------------------------------------------------------------------------------------------
    bool gt_BileCitadelAutoAcquire_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        fixed lv_waitTime;
        // Automatic Variable Declarations
        int autoBB4FAFB8_n;
        int autoBB4FAFB8_i;
        int autoA5FEE50F_n;
        int autoA5FEE50F_i;
        fixed auto9665C7F8_at;
        unitgroup auto8D8AE380_g;
        int auto8D8AE380_u;
        unit auto8D8AE380_var;
        // Variable Initialization
        lv_waitTime = 3.0;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, gv_bileCitadelRangeVariable, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) >= 1))) {
                return false;
            }
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) == 0))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                return false;
            }
            if (!((gv_stageID != 1))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(gt_BileCitadelBaseDefense, false);
        TriggerExecute(gt_BombardAutoAcquire, true, false);
        lv_iterator = 0;
        SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Retreat", -1), c_maxPlayers, PlayerGroupAll(), 180.0, 0.0);
        VisRevealArea(1, RegionFromId(30), 10.0, false);
        VisRevealArea(2, RegionFromId(30), 10.0, false);
        SoundPlayAtPointForPlayer(SoundLink("Zurvan_SpellBRoar", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936690535)), 4.0, 300.0, 0.0);
        autoBB4FAFB8_n = libLotv_gf_DifficultyValueInt2(0, 1, 2, 3);
        for (autoBB4FAFB8_i = 1; autoBB4FAFB8_i <= autoBB4FAFB8_n; autoBB4FAFB8_i += 1) {
            gv_target[lv_iterator] = UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, gv_bileCitadelRangeVariable, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetCrackerUlnarUnit", c_unitCreateIgnorePlacement, 0, gv_target[lv_iterator]);
            UnitGroupAdd(gv_targetUnit, UnitLastCreated());
            libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), gv_target[lv_iterator], 12.0, Color(32.55, 49.41, 0.39));
            lv_waitTime -= 0.5;
            lv_iterator += 1;
            Wait(0.5, c_timeReal);
        }
        lv_iterator = 0;
        Wait(lv_waitTime, c_timeReal);
        autoA5FEE50F_n = libLotv_gf_DifficultyValueInt2(0, 1, 2, 3);
        for (autoA5FEE50F_i = 1; autoA5FEE50F_i <= autoA5FEE50F_n; autoA5FEE50F_i += 1) {
            Wait(0.5, c_timeReal);
            if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 2)) {
                UnitIssueOrder(UnitFromId(936690535), OrderTargetingPoint(AbilityCommand("BileCitadelBombardment", 0), RegionRandomPoint(RegionCircle(gv_target[lv_iterator], 1.0))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitFromId(936690535), OrderTargetingPoint(AbilityCommand("BileCitadelBombardment2", 0), RegionRandomPoint(RegionCircle(gv_target[lv_iterator], 1.0))), c_orderQueueReplace);
            }
            lv_iterator += 1;
            SoundPlayForPlayer(SoundLink("ImmobilizationWave_ShockwaveExplsoionDistant", -1), c_maxPlayers, PlayerGroupAll(), RandomInt(95, 145), 0.0);
            SoundPlayAtPointForPlayer(SoundLink("Ravager_CorrosiveBileAoe_AttackLaunch", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936690535)), 4.0, 300.0, 0.0);
        }
        Wait(1.0, c_timeReal);
        TriggerEnable(gt_BileCitadelBaseDefense, true);
        auto9665C7F8_at = 0;
        while (!(((UnitCount("BileLauncherZagaraMissile", gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0) == 0))) && auto9665C7F8_at <= 20.0) {
            Wait(0.1, c_timeGame);
            auto9665C7F8_at = auto9665C7F8_at + 0.1;
        }
        auto8D8AE380_g = gv_targetUnit;
        auto8D8AE380_u = UnitGroupCount(auto8D8AE380_g, c_unitCountAll);
        for (;; auto8D8AE380_u -= 1) {
            auto8D8AE380_var = UnitGroupUnitFromEnd(auto8D8AE380_g, auto8D8AE380_u);
            if (auto8D8AE380_var == null) { break; }
            UnitRemove(auto8D8AE380_var);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BileCitadelAutoAcquire_Init () {
        gt_BileCitadelAutoAcquire = TriggerCreate("gt_BileCitadelAutoAcquire_Func");
        TriggerEnable(gt_BileCitadelAutoAcquire, false);
        TriggerAddEventTimePeriodic(gt_BileCitadelAutoAcquire, RandomInt(libLotv_gf_DifficultyValueInt2(0, 50, 25, 15), libLotv_gf_DifficultyValueInt2(0, 100, 50, 15)), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Bile Citadel Base Defense
    //--------------------------------------------------------------------------------------------------
    bool gt_BileCitadelBaseDefense_Func (bool testConds, bool runActions) {
        // Variable Declarations
        point lv_target;
        // Automatic Variable Declarations
        const int autoED5E5B00_n = 3;
        int autoED5E5B00_i;
        fixed auto587CAC5F_at;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) >= 1))) {
                return false;
            }
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) > 25))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        VisRevealArea(1, RegionFromId(30), 6.0, false);
        VisRevealArea(2, RegionFromId(30), 6.0, false);
        lv_target = UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetCrackerUlnarUnit", 0, 0, lv_target);
        SoundPlayAtPointForPlayer(SoundLink("Zurvan_SpellBRoar", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936690535)), 4.0, 300.0, 0.0);
        Wait(1.0, c_timeReal);
        libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(UnitFromId(936690535)), 1.0, Color(100.00, 50.20, 25.10));
        for (autoED5E5B00_i = 1; autoED5E5B00_i <= autoED5E5B00_n; autoED5E5B00_i += 1) {
            Wait(0.5, c_timeReal);
            if ((((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 1)) || ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 2)))) {
                UnitIssueOrder(UnitFromId(936690535), OrderTargetingPoint(AbilityCommand("BileCitadelBombardment", 0), RegionRandomPoint(RegionCircle(lv_target, 1.0))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitFromId(936690535), OrderTargetingPoint(AbilityCommand("BileCitadelBombardment2", 0), RegionRandomPoint(RegionCircle(lv_target, 1.0))), c_orderQueueReplace);
            }
            SoundPlayForPlayer(SoundLink("ImmobilizationWave_ShockwaveExplsoionDistant", -1), c_maxPlayers, PlayerGroupAll(), RandomInt(95, 145), 0.0);
            SoundPlayAtPointForPlayer(SoundLink("Ravager_CorrosiveBileAoe_AttackLaunch", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936690535)), 4.0, 300.0, 0.0);
        }
        Wait(1.0, c_timeReal);
        auto587CAC5F_at = 0;
        while (!(((UnitCount("BileLauncherZagaraMissile", gv_pLAYER_03_ENEMY, RegionCircle(lv_target, 1.0), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0) == 1) || (UnitCount("BileLauncherZagaraMissile", gv_pLAYER_03_ENEMY, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0) == 0))) && auto587CAC5F_at <= 20.0) {
            Wait(0.1, c_timeGame);
            auto587CAC5F_at = auto587CAC5F_at + 0.1;
        }
        UnitRemove(UnitLastCreated());
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BileCitadelBaseDefense_Init () {
        gt_BileCitadelBaseDefense = TriggerCreate("gt_BileCitadelBaseDefense_Func");
        TriggerEnable(gt_BileCitadelBaseDefense, false);
        TriggerAddEventTimePeriodic(gt_BileCitadelBaseDefense, 10.0, c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Entering
    //--------------------------------------------------------------------------------------------------
    bool gt_Entering_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((UnitAbilityExists(EventUnit(), "move") == true))) {
                return false;
            }
            if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(16)) == true))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        SoundPlayAtPointForPlayer(SoundLink("ForceField_Emitter_SecondRing", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 125.0, 0.0);
        UnitCreateEffectUnit(EventUnit(), "UnstableEnergyAB", EventUnit());
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Entering_Init () {
        gt_Entering = TriggerCreate("gt_Entering_Func");
        TriggerAddEventUnitRegion(gt_Entering, null, RegionFromId(16), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Exiting
    //--------------------------------------------------------------------------------------------------
    bool gt_Exiting_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((UnitAbilityExists(EventUnit(), "move") == true))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        UnitCreateEffectUnit(EventUnit(), "UnstableEnergyAB", EventUnit());
        SoundPlayAtPointForPlayer(SoundLink("ForceField_Emitter_SecondRing", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 125.0, 0.0);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Exiting_Init () {
        gt_Exiting = TriggerCreate("gt_Exiting_Func");
        TriggerAddEventUnitRegion(gt_Exiting, null, RegionFromId(16), false);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Periodic
    //--------------------------------------------------------------------------------------------------
    bool gt_Periodic_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        // Automatic Variable Declarations
        const int auto982351A4_ae = 6;
        const int auto982351A4_ai = 1;
        const int autoCD97E1EB_n = 10;
        int autoCD97E1EB_i;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        lv_iterator = 0;
        for ( ; ( (auto982351A4_ai >= 0 && lv_iterator <= auto982351A4_ae) || (auto982351A4_ai < 0 && lv_iterator >= auto982351A4_ae) ) ; lv_iterator += auto982351A4_ai ) {
            if ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_iterator], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                for (autoCD97E1EB_i = 1; autoCD97E1EB_i <= autoCD97E1EB_n; autoCD97E1EB_i += 1) {
                    UnitCreateEffectUnit(UnitFromId(1405995465), "UnstableEnergyAB", UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_iterator], UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive));
                }
                Wait(0.5, c_timeGame);
                SoundPlayAtPointForPlayer(SoundLink("Fenix_MoveStart", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_iterator], 0.0, 300.0, 0.0);
            }
            else {
                continue;
            }
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Periodic_Init () {
        gt_Periodic = TriggerCreate("gt_Periodic_Func");
        TriggerAddEventTimePeriodic(gt_Periodic, 5.0, c_timeGame);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: No Unit Warning
    //--------------------------------------------------------------------------------------------------
    bool gt_NoUnitWarning_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((UnitAbilityExists(EventUnit(), "move") == true))) {
                return false;
            }
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagCreate(StringExternal("Param/Value/5A85B040"), 24, RegionGetCenter(EventUnitRegion()), 4.0, true, false, PlayerGroupAll());
        Wait(5.0, c_timeReal);
        TextTagDestroy(TextTagLastCreated());
        gv_warningPingCount -= 1;
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_NoUnitWarning_Init () {
        gt_NoUnitWarning = TriggerCreate("gt_NoUnitWarning_Func");
        TriggerAddEventUnitRegion(gt_NoUnitWarning, null, RegionFromId(7), false);
        TriggerAddEventUnitRegion(gt_NoUnitWarning, null, RegionFromId(1), false);
        TriggerAddEventUnitRegion(gt_NoUnitWarning, null, RegionFromId(6), false);
        TriggerAddEventUnitRegion(gt_NoUnitWarning, null, RegionFromId(2), false);
        TriggerAddEventUnitRegion(gt_NoUnitWarning, null, RegionFromId(5), false);
        TriggerAddEventUnitRegion(gt_NoUnitWarning, null, RegionFromId(3), false);
        TriggerAddEventUnitRegion(gt_NoUnitWarning, null, RegionFromId(4), false);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Contested Effects
    //--------------------------------------------------------------------------------------------------
    bool gt_ContestedEffects_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        // Automatic Variable Declarations
        int auto09ED8CA6_ae;
        const int auto09ED8CA6_ai = 1;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        auto09ED8CA6_ae = (gv_voidEmitterConduitsPrimed - 1);
        lv_iterator = 0;
        for ( ; ( (auto09ED8CA6_ai >= 0 && lv_iterator <= auto09ED8CA6_ae) || (auto09ED8CA6_ai < 0 && lv_iterator >= auto09ED8CA6_ae) ) ; lv_iterator += auto09ED8CA6_ai ) {
            if ((UnitGetHeight(gv_conduitSelfArray[gv_randomActiveConduits[lv_iterator]]) > 9.0)) {
                UnitCreateEffectUnit(gv_conduitSelfArray[gv_randomActiveConduits[lv_iterator]], "AmonCrystalDarkInertiaSet", UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[gv_randomActiveConduits[lv_iterator]], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive));
            }
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ContestedEffects_Init () {
        gt_ContestedEffects = TriggerCreate("gt_ContestedEffects_Func");
        TriggerEnable(gt_ContestedEffects, false);
        TriggerAddEventTimePeriodic(gt_ContestedEffects, 0.1, c_timeGame);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 1
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator1_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        unit lv_unit;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoAE77CE82_g;
        int autoAE77CE82_u;
        unit autoAE77CE82_var;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoAE77CE82_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoAE77CE82_u = UnitGroupCount(autoAE77CE82_g, c_unitCountAll);
            for (;; autoAE77CE82_u -= 1) {
                autoAE77CE82_var = UnitGroupUnitFromEnd(autoAE77CE82_g, autoAE77CE82_u);
                if (autoAE77CE82_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoAE77CE82_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator1_Init () {
        gt_Disintegrator1 = TriggerCreate("gt_Disintegrator1_Func");
        TriggerEnable(gt_Disintegrator1, false);
        TriggerAddEventUnitRegion(gt_Disintegrator1, null, RegionFromId(33), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 2
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator2_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup auto05F2EE60_g;
        int auto05F2EE60_u;
        unit auto05F2EE60_var;
        // Variable Initialization
        lv_disintegratorID = 1;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            auto05F2EE60_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto05F2EE60_u = UnitGroupCount(auto05F2EE60_g, c_unitCountAll);
            for (;; auto05F2EE60_u -= 1) {
                auto05F2EE60_var = UnitGroupUnitFromEnd(auto05F2EE60_g, auto05F2EE60_u);
                if (auto05F2EE60_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", auto05F2EE60_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator2_Init () {
        gt_Disintegrator2 = TriggerCreate("gt_Disintegrator2_Func");
        TriggerEnable(gt_Disintegrator2, false);
        TriggerAddEventUnitRegion(gt_Disintegrator2, null, RegionFromId(34), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 3
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator3_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoCC324D5A_g;
        int autoCC324D5A_u;
        unit autoCC324D5A_var;
        // Variable Initialization
        lv_disintegratorID = 2;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoCC324D5A_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoCC324D5A_u = UnitGroupCount(autoCC324D5A_g, c_unitCountAll);
            for (;; autoCC324D5A_u -= 1) {
                autoCC324D5A_var = UnitGroupUnitFromEnd(autoCC324D5A_g, autoCC324D5A_u);
                if (autoCC324D5A_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoCC324D5A_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator3_Init () {
        gt_Disintegrator3 = TriggerCreate("gt_Disintegrator3_Func");
        TriggerEnable(gt_Disintegrator3, false);
        TriggerAddEventUnitRegion(gt_Disintegrator3, null, RegionFromId(32), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 4
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator4_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoD2F5556B_g;
        int autoD2F5556B_u;
        unit autoD2F5556B_var;
        // Variable Initialization
        lv_disintegratorID = 3;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoD2F5556B_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD2F5556B_u = UnitGroupCount(autoD2F5556B_g, c_unitCountAll);
            for (;; autoD2F5556B_u -= 1) {
                autoD2F5556B_var = UnitGroupUnitFromEnd(autoD2F5556B_g, autoD2F5556B_u);
                if (autoD2F5556B_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoD2F5556B_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator4_Init () {
        gt_Disintegrator4 = TriggerCreate("gt_Disintegrator4_Func");
        TriggerEnable(gt_Disintegrator4, false);
        TriggerAddEventUnitRegion(gt_Disintegrator4, null, RegionFromId(31), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 5
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator5_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup auto61BE45A7_g;
        int auto61BE45A7_u;
        unit auto61BE45A7_var;
        // Variable Initialization
        lv_disintegratorID = 4;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            auto61BE45A7_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto61BE45A7_u = UnitGroupCount(auto61BE45A7_g, c_unitCountAll);
            for (;; auto61BE45A7_u -= 1) {
                auto61BE45A7_var = UnitGroupUnitFromEnd(auto61BE45A7_g, auto61BE45A7_u);
                if (auto61BE45A7_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", auto61BE45A7_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator5_Init () {
        gt_Disintegrator5 = TriggerCreate("gt_Disintegrator5_Func");
        TriggerEnable(gt_Disintegrator5, false);
        TriggerAddEventUnitRegion(gt_Disintegrator5, null, RegionFromId(26), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 6
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator6_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup auto3F53149C_g;
        int auto3F53149C_u;
        unit auto3F53149C_var;
        // Variable Initialization
        lv_disintegratorID = 5;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            auto3F53149C_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3F53149C_u = UnitGroupCount(auto3F53149C_g, c_unitCountAll);
            for (;; auto3F53149C_u -= 1) {
                auto3F53149C_var = UnitGroupUnitFromEnd(auto3F53149C_g, auto3F53149C_u);
                if (auto3F53149C_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", auto3F53149C_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator6_Init () {
        gt_Disintegrator6 = TriggerCreate("gt_Disintegrator6_Func");
        TriggerEnable(gt_Disintegrator6, false);
        TriggerAddEventUnitRegion(gt_Disintegrator6, null, RegionFromId(25), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 7
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator7_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoBE7F6950_g;
        int autoBE7F6950_u;
        unit autoBE7F6950_var;
        // Variable Initialization
        lv_disintegratorID = 6;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoBE7F6950_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBE7F6950_u = UnitGroupCount(autoBE7F6950_g, c_unitCountAll);
            for (;; autoBE7F6950_u -= 1) {
                autoBE7F6950_var = UnitGroupUnitFromEnd(autoBE7F6950_g, autoBE7F6950_u);
                if (autoBE7F6950_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoBE7F6950_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator7_Init () {
        gt_Disintegrator7 = TriggerCreate("gt_Disintegrator7_Func");
        TriggerEnable(gt_Disintegrator7, false);
        TriggerAddEventUnitRegion(gt_Disintegrator7, null, RegionFromId(19), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 8
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator8_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoB6AB347E_g;
        int autoB6AB347E_u;
        unit autoB6AB347E_var;
        // Variable Initialization
        lv_disintegratorID = 7;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoB6AB347E_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB6AB347E_u = UnitGroupCount(autoB6AB347E_g, c_unitCountAll);
            for (;; autoB6AB347E_u -= 1) {
                autoB6AB347E_var = UnitGroupUnitFromEnd(autoB6AB347E_g, autoB6AB347E_u);
                if (autoB6AB347E_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoB6AB347E_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator8_Init () {
        gt_Disintegrator8 = TriggerCreate("gt_Disintegrator8_Func");
        TriggerEnable(gt_Disintegrator8, false);
        TriggerAddEventUnitRegion(gt_Disintegrator8, null, RegionFromId(20), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 9
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator9_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup auto4F947BCD_g;
        int auto4F947BCD_u;
        unit auto4F947BCD_var;
        // Variable Initialization
        lv_disintegratorID = 8;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            auto4F947BCD_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto4F947BCD_u = UnitGroupCount(auto4F947BCD_g, c_unitCountAll);
            for (;; auto4F947BCD_u -= 1) {
                auto4F947BCD_var = UnitGroupUnitFromEnd(auto4F947BCD_g, auto4F947BCD_u);
                if (auto4F947BCD_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", auto4F947BCD_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator9_Init () {
        gt_Disintegrator9 = TriggerCreate("gt_Disintegrator9_Func");
        TriggerEnable(gt_Disintegrator9, false);
        TriggerAddEventUnitRegion(gt_Disintegrator9, null, RegionFromId(21), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 10
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator10_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoE2691665_g;
        int autoE2691665_u;
        unit autoE2691665_var;
        // Variable Initialization
        lv_disintegratorID = 9;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoE2691665_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE2691665_u = UnitGroupCount(autoE2691665_g, c_unitCountAll);
            for (;; autoE2691665_u -= 1) {
                autoE2691665_var = UnitGroupUnitFromEnd(autoE2691665_g, autoE2691665_u);
                if (autoE2691665_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoE2691665_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator10_Init () {
        gt_Disintegrator10 = TriggerCreate("gt_Disintegrator10_Func");
        TriggerEnable(gt_Disintegrator10, false);
        TriggerAddEventUnitRegion(gt_Disintegrator10, null, RegionFromId(22), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 11
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator11_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup auto40A131C7_g;
        int auto40A131C7_u;
        unit auto40A131C7_var;
        // Variable Initialization
        lv_disintegratorID = 10;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            auto40A131C7_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto40A131C7_u = UnitGroupCount(auto40A131C7_g, c_unitCountAll);
            for (;; auto40A131C7_u -= 1) {
                auto40A131C7_var = UnitGroupUnitFromEnd(auto40A131C7_g, auto40A131C7_u);
                if (auto40A131C7_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", auto40A131C7_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator11_Init () {
        gt_Disintegrator11 = TriggerCreate("gt_Disintegrator11_Func");
        TriggerEnable(gt_Disintegrator11, false);
        TriggerAddEventUnitRegion(gt_Disintegrator11, null, RegionFromId(23), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 12
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator12_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoFB3C002A_g;
        int autoFB3C002A_u;
        unit autoFB3C002A_var;
        // Variable Initialization
        lv_disintegratorID = 11;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoFB3C002A_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFB3C002A_u = UnitGroupCount(autoFB3C002A_g, c_unitCountAll);
            for (;; autoFB3C002A_u -= 1) {
                autoFB3C002A_var = UnitGroupUnitFromEnd(autoFB3C002A_g, autoFB3C002A_u);
                if (autoFB3C002A_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoFB3C002A_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator12_Init () {
        gt_Disintegrator12 = TriggerCreate("gt_Disintegrator12_Func");
        TriggerEnable(gt_Disintegrator12, false);
        TriggerAddEventUnitRegion(gt_Disintegrator12, null, RegionFromId(24), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 13
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator13_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup auto58E6A423_g;
        int auto58E6A423_u;
        unit auto58E6A423_var;
        // Variable Initialization
        lv_disintegratorID = 12;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            auto58E6A423_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto58E6A423_u = UnitGroupCount(auto58E6A423_g, c_unitCountAll);
            for (;; auto58E6A423_u -= 1) {
                auto58E6A423_var = UnitGroupUnitFromEnd(auto58E6A423_g, auto58E6A423_u);
                if (auto58E6A423_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", auto58E6A423_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator13_Init () {
        gt_Disintegrator13 = TriggerCreate("gt_Disintegrator13_Func");
        TriggerEnable(gt_Disintegrator13, false);
        TriggerAddEventUnitRegion(gt_Disintegrator13, null, RegionFromId(27), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Disintegrator 14
    //--------------------------------------------------------------------------------------------------
    bool gt_Disintegrator14_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_disintegratorID;
        sound lv_soundLoop;
        // Automatic Variable Declarations
        unitgroup autoE26FCEE2_g;
        int autoE26FCEE2_u;
        unit autoE26FCEE2_var;
        // Variable Initialization
        lv_disintegratorID = 13;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlayAtPointForPlayer(SoundLink("SentryMonitor_TargetLock_Ping", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        SoundPlayAtPointForPlayer(SoundLink("Oracle_PulsarBeamWeaponLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
        lv_soundLoop = SoundLastPlayed();
        while ((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            SoundPlayAtPointForPlayer(SoundLink("SOALaserChargeSound", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 250.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            autoE26FCEE2_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_disintegratorRegionArray[lv_disintegratorID], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE26FCEE2_u = UnitGroupCount(autoE26FCEE2_g, c_unitCountAll);
            for (;; autoE26FCEE2_u -= 1) {
                autoE26FCEE2_var = UnitGroupUnitFromEnd(autoE26FCEE2_g, autoE26FCEE2_u);
                if (autoE26FCEE2_var == null) { break; }
                PlayerCreateEffectUnit(1, "DisintegratorEnergyDamage", autoE26FCEE2_var);
            }
            SoundPlayAtPointForPlayer(SoundLink("Ascendant_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 300.0, 0.0);
            Wait(1.0, c_timeGame);
        }
        SoundStop(lv_soundLoop, true);
        SoundPlayAtPointForPlayer(SoundLink("SOASuperPowerFieldOff", -1), c_maxPlayers, PlayerGroupAll(), gv_disintegratorSoundArray[lv_disintegratorID], 5.0, 200.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Disintegrator14_Init () {
        gt_Disintegrator14 = TriggerCreate("gt_Disintegrator14_Func");
        TriggerEnable(gt_Disintegrator14, false);
        TriggerAddEventUnitRegion(gt_Disintegrator14, null, RegionFromId(28), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Defense Matrix Activate
    //--------------------------------------------------------------------------------------------------
    bool gt_DefenseMatrixActivate_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        // Automatic Variable Declarations
        unitgroup auto3FC00994_g;
        int auto3FC00994_u;
        unit auto3FC00994_var;
        const int auto3C311DCE_ae = 13;
        const int auto3C311DCE_ai = 1;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_MindReaverAbduct, false);
        TriggerEnable(gt_MindReaverLongAbduct, false);
        UnitRemove(UnitFromId(1156090508));
        UnitRemove(UnitFromId(1629023832));
        UnitRemove(UnitFromId(442973246));
        UnitRemove(UnitFromId(1317575596));
        UnitRemove(UnitFromId(1895260876));
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(14), "ZergedCliff");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(14), "GasGiantMist");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(17), "FloatingCreepPad");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(17), "ZergCarcassesMedium");
        PingDestroy(gv_defenseMatrixPing);
        SoundPlayForPlayer(SoundLink("Shakura_Xelnaga_Temple_Raise", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_DefenseMatrixComplete, true, false);
        Wait(2.0, c_timeReal);
        TriggerExecute(gt_BonusObjectiveComplete, true, false);
        Wait(2.0, c_timeReal);
        UnitIssueOrder(UnitFromId(1902787254), Order(AbilityCommand("ArchiveShakurasRaise", 0)), c_orderQueueReplace);
        SoundWait(SoundLastPlayed(), 7.0, c_soundOffsetEnd);
        auto3FC00994_g = UnitGroup("MonlythArtifactForceField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto3FC00994_u = UnitGroupCount(auto3FC00994_g, c_unitCountAll);
        for (;; auto3FC00994_u -= 1) {
            auto3FC00994_var = UnitGroupUnitFromEnd(auto3FC00994_g, auto3FC00994_u);
            if (auto3FC00994_var == null) { break; }
            libNtve_gf_ShowHideUnit(auto3FC00994_var, true);
        }
        SoundPlayForPlayer(SoundLink("PPurifier02_CybrosLock_Birth_F", -1), c_maxPlayers, PlayerGroupAll(), 250.0, 0.0);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        VisRevealArea(1, RegionFromId(35), 0.0, false);
        VisRevealArea(2, RegionFromId(35), 0.0, false);
        lv_iterator = 0;
        for ( ; ( (auto3C311DCE_ai >= 0 && lv_iterator <= auto3C311DCE_ae) || (auto3C311DCE_ai < 0 && lv_iterator >= auto3C311DCE_ae) ) ; lv_iterator += auto3C311DCE_ai ) {
            TriggerEnable(gv_disintegratorTriggerArray[lv_iterator], true);
            TriggerExecute(gv_disintegratorTriggerArray[lv_iterator], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_DefenseMatrixActivate_Init () {
        gt_DefenseMatrixActivate = TriggerCreate("gt_DefenseMatrixActivate_Func");
        TriggerAddEventUnitDied(gt_DefenseMatrixActivate, UnitRefFromUnit(UnitFromId(1354800491)));
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Defense Matrix Init
    //--------------------------------------------------------------------------------------------------
    bool gt_DefenseMatrixInit_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        unitgroup autoC09A02C7_g;
        int autoC09A02C7_u;
        unit autoC09A02C7_var;
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetState(UnitFromId(1902787254), c_unitStateInvulnerable, true);
        UnitSetState(UnitFromId(1902787254), c_unitStateTargetable, false);
        UnitSetState(UnitFromId(1902787254), c_unitStateSelectable, false);
        UnitSetState(UnitFromId(1902787254), c_unitStateCursorable, false);
        UnitSetState(UnitFromId(1902787254), c_unitStateTooltipable, false);
        UnitSetState(UnitFromId(1902787254), c_unitStateHighlightable, false);
        UnitSetState(UnitFromId(1902787254), c_unitStateRadarable, false);
        gv_mindReaverInfestedTerranSpawn[0] = PointFromId(1502877431);
        gv_mindReaverInfestedTerranSpawn[1] = PointFromId(214374765);
        gv_mindReaverInfestedTerranSpawn[2] = PointFromId(1772111012);
        gv_mindReaverInfestedTerranSpawn[3] = PointFromId(1758920037);
        gv_mindReaverInfestedTerranSpawn[4] = PointFromId(1405759906);
        gv_mindReaverInfestedTerranSpawn[5] = PointFromId(1909402570);
        gv_mindReaverInfestedTerranSpawn[6] = PointFromId(599241848);
        UnitSetState(UnitFromId(1354800491), c_unitStateInvulnerable, true);
        UnitSetPropertyFixed(UnitFromId(1354800491), c_unitPropLifeRegen, libLotv_gf_DifficultyValueInt2(15, 17, 20, 25));
        autoC09A02C7_g = UnitGroup("MonlythArtifactForceField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoC09A02C7_u = UnitGroupCount(autoC09A02C7_g, c_unitCountAll);
        for (;; autoC09A02C7_u -= 1) {
            autoC09A02C7_var = UnitGroupUnitFromEnd(autoC09A02C7_g, autoC09A02C7_u);
            if (autoC09A02C7_var == null) { break; }
            UnitSetState(autoC09A02C7_var, c_unitStateInvulnerable, true);
            UnitSetState(autoC09A02C7_var, c_unitStateTargetable, false);
            UnitSetState(autoC09A02C7_var, c_unitStateSelectable, false);
            UnitSetState(autoC09A02C7_var, c_unitStateCursorable, false);
            UnitSetState(autoC09A02C7_var, c_unitStateTooltipable, false);
            UnitSetState(autoC09A02C7_var, c_unitStateHighlightable, false);
            UnitSetState(autoC09A02C7_var, c_unitStateRadarable, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_DefenseMatrixInit_Init () {
        gt_DefenseMatrixInit = TriggerCreate("gt_DefenseMatrixInit_Func");
        TriggerAddEventMapInit(gt_DefenseMatrixInit);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Defense Matrix Ready
    //--------------------------------------------------------------------------------------------------
    bool gt_DefenseMatrixReady_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Actions
        if (!runActions) {
            return true;
        }
        Wait(5.0, c_timeReal);
        UnitSetState(UnitFromId(1354800491), c_unitStateInvulnerable, false);
        TriggerExecute(gt_DefenseMatrixCreate, true, true);
        TriggerExecute(gt_BonusObjectiveInit, true, false);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(1902787254)), StringExternal("Param/Value/6292658B"));
        gv_defenseMatrixPing = PingLastCreated();
        TriggerEnable(gt_DefenseMatrixActivate, true);
        TriggerEnable(gt_MindReaverAbduct, true);
        TriggerEnable(gt_MindReaverLongAbduct, true);
        TriggerEnable(gt_MindReaverInfestedTerrans, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_DefenseMatrixReady_Init () {
        gt_DefenseMatrixReady = TriggerCreate("gt_DefenseMatrixReady_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Mind Reaver Abduct
    //--------------------------------------------------------------------------------------------------
    bool gt_MindReaverAbduct_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unit lv_abductTarget;
        unit lv_mindReaverGrabber;
        // Automatic Variable Declarations
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) >= 1))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        lv_abductTarget = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromName("Mind Reaver Radius"), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 1), c_unitCountAlive);
        lv_mindReaverGrabber = UnitGroupRandomUnit(UnitGroup("MindReaverGrabber", gv_pLAYER_03_ENEMY, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((UnitTypeTestAttribute(UnitGetType(lv_abductTarget), c_unitAttributeHeroic) == false) && (libNtve_gf_UnitInRegion(lv_abductTarget, RegionFromId(14)) == true) && (UnitTestState(lv_abductTarget, c_unitStateUsingSupply) == true) && (UnitTestState(lv_abductTarget, c_unitStateHidden) == false) && (UnitTestState(lv_abductTarget, c_unitStateInvulnerable) == false) && (UnitTestState(lv_abductTarget, c_unitStateIsDead) == false)) {
            UnitIssueOrder(lv_mindReaverGrabber, OrderTargetingUnit(AbilityCommand("AbductLongRange", 0), lv_abductTarget), c_orderQueueReplace);
            while (!(((UnitIsValid(lv_abductTarget) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_abductTarget), UnitGetPosition(lv_mindReaverGrabber)) <= 4.0)))) {
                Wait(1.0, c_timeGame);
            }
            if ((UnitIsValid(lv_abductTarget) == true)) {
                UnitBehaviorAdd(lv_abductTarget, "DefenseMatrixInfestationMindControl", UnitFromId(1354800491), 1);
            }
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_MindReaverAbduct_Init () {
        gt_MindReaverAbduct = TriggerCreate("gt_MindReaverAbduct_Func");
        TriggerEnable(gt_MindReaverAbduct, false);
        TriggerAddEventTimePeriodic(gt_MindReaverAbduct, libLotv_gf_DifficultyValueInt2(10, 5, 3, 1), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Mind Reaver Long Abduct
    //--------------------------------------------------------------------------------------------------
    bool gt_MindReaverLongAbduct_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unit lv_mindReaverGrabber;
        unit lv_abductTarget;
        // Automatic Variable Declarations
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((libNtve_gf_UnitInRegion(EventUnitTarget(), RegionFromId(14)) == false))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        lv_mindReaverGrabber = UnitGroupRandomUnit(UnitGroup("MindReaverGrabber", gv_pLAYER_03_ENEMY, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_abductTarget = EventUnitTarget();
        UnitIssueOrder(lv_mindReaverGrabber, OrderTargetingUnit(AbilityCommand("AbductLongRange", 0), lv_abductTarget), c_orderQueueReplace);
        while (!(((UnitIsValid(lv_abductTarget) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_abductTarget), UnitGetPosition(lv_mindReaverGrabber)) <= 4.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsValid(lv_abductTarget) == true)) {
            UnitBehaviorAdd(lv_abductTarget, "DefenseMatrixInfestationMindControl", UnitFromId(1354800491), 1);
        }
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_MindReaverLongAbduct_Init () {
        gt_MindReaverLongAbduct = TriggerCreate("gt_MindReaverLongAbduct_Func");
        TriggerEnable(gt_MindReaverLongAbduct, false);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(1354800491)), null);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(1251657084)), null);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(2029136610)), null);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(1883833630)), null);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(906087247)), null);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(2109383245)), null);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(529533132)), null);
        TriggerAddEventUnitAttacked2(gt_MindReaverLongAbduct, UnitRefFromUnit(UnitFromId(1471384092)), null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Mind Reaver Infested Terrans
    //--------------------------------------------------------------------------------------------------
    bool gt_MindReaverInfestedTerrans_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        const int auto1533E9B3_n = 10;
        int auto1533E9B3_i;
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) >= 1))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        for (auto1533E9B3_i = 1; auto1533E9B3_i <= auto1533E9B3_n; auto1533E9B3_i += 1) {
            UnitIssueOrder(UnitFromId(1629023832), OrderTargetingPoint(AbilityCommand("InfestedTerrans2", 0), RegionRandomPoint(RegionCircle(gv_mindReaverInfestedTerranSpawn[RandomInt(0, 6)], 2.0))), c_orderQueueReplace);
            Wait(0.1, c_timeReal);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_MindReaverInfestedTerrans_Init () {
        gt_MindReaverInfestedTerrans = TriggerCreate("gt_MindReaverInfestedTerrans_Func");
        TriggerEnable(gt_MindReaverInfestedTerrans, false);
        TriggerAddEventTimePeriodic(gt_MindReaverInfestedTerrans, libLotv_gf_DifficultyValueInt2(15, 12, 6, 3), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Game Manager
    //--------------------------------------------------------------------------------------------------
    bool gt_GameManager_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        int lv_conduitLocationReset;
        int lv_conduitUnitReset;
        int lv_stage1Time;
        int lv_stage2Time;
        int lv_stage3Time;
        int lv_stage4Time;
        int lv_stage5Time;
        int lv_stage6Time;
        int lv_stage7Time;
        int lv_stage8Time;
        int lv_intermissionTime;
        // Automatic Variable Declarations
        const int autoA3E649A0_ae = 2;
        const int autoA3E649A0_ai = 1;
        // Variable Initialization
        lv_stage1Time = 300;
        lv_stage2Time = 270;
        lv_stage3Time = 240;
        lv_stage4Time = 210;
        lv_stage5Time = 180;
        lv_stage6Time = 150;
        lv_stage7Time = 120;
        lv_stage8Time = 120;
        lv_intermissionTime = 15;
        // Actions
        if (!runActions) {
            return true;
        }
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage1Time;
        gv_voidEmitterConduitsPrimed = 1;
        gv_stageID += 1;
        gv_attackWaveCount = 1;
        gv_attackWaveLarge = false;
        gv_randomActiveConduits[0] = 0;
        SoundPlayForPlayer(SoundLink("Xelnaga_Vision_Temple_StandWorkStart_C", -1), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gv_conduitPrimingTrigger[0], true, false);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[0]), StringExternal("Param/Value/E916A911"));
        gv_conduitPing[0] = PingLastCreated();
        TextTagCreate(StringExternal("Param/Value/65F56843"), 24, gv_conduitSoundPoint[0], 3.0, true, false, PlayerGroupAll());
        gv_conduitTextTag[0] = TextTagLastCreated();
        VisExploreArea(gv_pLAYER_01_USER, gv_conduitRegion[0], true, false);
        VisExploreArea(gv_pLAYER_02_USER, gv_conduitRegion[0], true, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[0], "XelNaga_EnergyStreaks");
        TriggerEnable(gt_ConduitTextTags, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage1Time);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 40.0, false);
        TriggerExecute(gt_BileCitadelBombardment, true, false);
        TriggerExecute(gt_BileCitadelBombard, true, false);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage2Time;
        gv_voidEmitterConduitsPrimed = 2;
        gv_stageID += 1;
        gv_attackWaveCount = 2;
        gv_attackWaveLarge = false;
        gv_randomActiveConduits[0] = 1;
        gv_randomActiveConduits[1] = 2;
        SoundPlayForPlayer(SoundLink("Xelnaga_Vision_Temple_StandWorkStart_C", -1), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gt_Stage2Start, true, false);
        lv_iterator = 1;
        for ( ; ( (autoA3E649A0_ai >= 0 && lv_iterator <= autoA3E649A0_ae) || (autoA3E649A0_ai < 0 && lv_iterator >= autoA3E649A0_ae) ) ; lv_iterator += autoA3E649A0_ai ) {
            TriggerExecute(gv_conduitPrimingTrigger[lv_iterator], true, false);
            CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
            CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_iterator]), StringExternal("Param/Value/972D990E"));
            gv_conduitPing[lv_iterator] = PingLastCreated();
            TextTagCreate(StringExternal("Param/Value/248A0D50"), 24, gv_conduitSoundPoint[lv_iterator], 3.0, true, false, PlayerGroupAll());
            gv_conduitTextTag[lv_iterator] = TextTagLastCreated();
            VisExploreArea(gv_pLAYER_01_USER, gv_conduitRegion[lv_iterator], true, false);
            VisExploreArea(gv_pLAYER_02_USER, gv_conduitRegion[lv_iterator], true, false);
            libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_iterator], "XelNaga_EnergyStreaks");
        }
        TriggerEnable(gt_ConduitTextTags, true);
        TriggerEnable(gt_BileCitadelBombardment, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage2Time);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage3Time;
        gv_voidEmitterConduitsPrimed = 3;
        gv_stageID += 1;
        gv_attackWaveCount = 3;
        gv_attackWaveLarge = false;
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gt_ConduitSequence, true, true);
        TriggerEnable(gt_ConduitTextTags, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage3Time);
        TriggerExecute(gt_DefenseMatrixReady, true, false);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage4Time;
        gv_voidEmitterConduitsPrimed = 1;
        gv_stageID += 1;
        gv_attackWaveCount = 1;
        gv_attackWaveLarge = true;
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gt_ConduitSequence, true, true);
        TriggerEnable(gt_ConduitTextTags, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage4Time);
        TriggerExecute(gt_Stage4Start, true, false);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage5Time;
        gv_voidEmitterConduitsPrimed = 4;
        gv_stageID += 1;
        gv_attackWaveCount = 4;
        gv_attackWaveLarge = false;
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gt_ConduitSequence, true, true);
        TriggerEnable(gt_ConduitTextTags, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage5Time);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage6Time;
        gv_voidEmitterConduitsPrimed = 3;
        gv_stageID += 1;
        gv_attackWaveCount = 3;
        gv_attackWaveLarge = true;
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gt_ConduitSequence, true, true);
        TriggerEnable(gt_ConduitTextTags, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage6Time);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage7Time;
        gv_voidEmitterConduitsPrimed = 1;
        gv_stageID += 1;
        gv_attackWaveCount = 2;
        gv_attackWaveLarge = false;
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gt_ConduitSequence, true, true);
        TriggerEnable(gt_ConduitTextTags, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage7Time);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        gv_voidEmitterConduitsActivated = 0;
        gv_conduitTimerAmount = lv_stage8Time;
        gv_voidEmitterConduitsPrimed = 2;
        gv_stageID += 1;
        gv_attackWaveCount = 4;
        gv_attackWaveLarge = false;
        TriggerExecute(gt_ConduitTimer, true, false);
        TriggerExecute(gt_ConduitSequence, true, true);
        TriggerEnable(gt_ConduitTextTags, true);
        UnitSetHeight(UnitFromId(958786784), 10.67, lv_stage8Time);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        while (!((gv_voidEmitterConduitsActivated == gv_voidEmitterConduitsPrimed))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayForPlayer(SoundLink("PUlnar02_XelNagaBridgeFinalHit", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        SoundPlayForPlayer(SoundLink("Aiur_Energywall_Birth_Glow", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        TriggerExecute(gt_VoidEmitterSequence, true, true);
        Wait(lv_intermissionTime, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_GameManager_Init () {
        gt_GameManager = TriggerCreate("gt_GameManager_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Leviathan Mutalisks
    //--------------------------------------------------------------------------------------------------
    bool gt_LeviathanMutalisks_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        const int auto40EB0898_n = 6;
        int auto40EB0898_i;
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        for (auto40EB0898_i = 1; auto40EB0898_i <= auto40EB0898_n; auto40EB0898_i += 1) {
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("LeviathanSpawnMutalisk", 0)), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
        }
        Wait(20.0, c_timeReal);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_LeviathanMutalisks_Init () {
        gt_LeviathanMutalisks = TriggerCreate("gt_LeviathanMutalisks_Func");
        TriggerAddEventUnitAcquiredTarget(gt_LeviathanMutalisks, UnitRefFromUnit(UnitFromId(1985874501)));
        TriggerAddEventUnitAttacked2(gt_LeviathanMutalisks, UnitRefFromUnit(UnitFromId(1985874501)), null);
        TriggerAddEventUnitStartedAttack2(gt_LeviathanMutalisks, UnitRefFromUnit(UnitFromId(1985874501)), null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Lurker/Swarm Host Burrow
    //--------------------------------------------------------------------------------------------------
    bool gt_LurkerSwarmHostBurrow_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        unitgroup auto6724353D_g;
        int auto6724353D_u;
        unit auto6724353D_var;
        unitgroup auto17F32590_g;
        int auto17F32590_u;
        unit auto17F32590_var;
        unitgroup autoB111B418_g;
        int autoB111B418_u;
        unit autoB111B418_var;
        unitgroup auto3E5815B1_g;
        int auto3E5815B1_u;
        unit auto3E5815B1_var;
        // Conditions
        if (testConds) {
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        auto6724353D_g = UnitGroup("Lurker", gv_pLAYER_03_ENEMY, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6724353D_u = UnitGroupCount(auto6724353D_g, c_unitCountAll);
        for (;; auto6724353D_u -= 1) {
            auto6724353D_var = UnitGroupUnitFromEnd(auto6724353D_g, auto6724353D_u);
            if (auto6724353D_var == null) { break; }
            UnitIssueOrder(auto6724353D_var, Order(AbilityCommand("BurrowLurkerDown", 0)), c_orderQueueReplace);
        }
        auto17F32590_g = UnitGroup("SwarmHostMP", gv_pLAYER_03_ENEMY, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto17F32590_u = UnitGroupCount(auto17F32590_g, c_unitCountAll);
        for (;; auto17F32590_u -= 1) {
            auto17F32590_var = UnitGroupUnitFromEnd(auto17F32590_g, auto17F32590_u);
            if (auto17F32590_var == null) { break; }
            UnitIssueOrder(auto17F32590_var, Order(AbilityCommand("MorphToSwarmHostBurrowedMP", 0)), c_orderQueueReplace);
        }
        autoB111B418_g = UnitGroup("Lurker", gv_pLAYER_04_ENEMY, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB111B418_u = UnitGroupCount(autoB111B418_g, c_unitCountAll);
        for (;; autoB111B418_u -= 1) {
            autoB111B418_var = UnitGroupUnitFromEnd(autoB111B418_g, autoB111B418_u);
            if (autoB111B418_var == null) { break; }
            UnitIssueOrder(autoB111B418_var, Order(AbilityCommand("BurrowLurkerDown", 0)), c_orderQueueReplace);
        }
        auto3E5815B1_g = UnitGroup("SwarmHostMP", gv_pLAYER_04_ENEMY, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3E5815B1_u = UnitGroupCount(auto3E5815B1_g, c_unitCountAll);
        for (;; auto3E5815B1_u -= 1) {
            auto3E5815B1_var = UnitGroupUnitFromEnd(auto3E5815B1_g, auto3E5815B1_u);
            if (auto3E5815B1_var == null) { break; }
            UnitIssueOrder(auto3E5815B1_var, Order(AbilityCommand("MorphToSwarmHostBurrowedMP", 0)), c_orderQueueReplace);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_LurkerSwarmHostBurrow_Init () {
        gt_LurkerSwarmHostBurrow = TriggerCreate("gt_LurkerSwarmHostBurrow_Func");
        TriggerAddEventUnitAttacked2(gt_LurkerSwarmHostBurrow, null, null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Viper Parasitic Bomb
    //--------------------------------------------------------------------------------------------------
    bool gt_ViperParasiticBomb_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                return false;
            }
            if (!((UnitGetType(EventUnit()) == "Viper"))) {
                return false;
            }
            if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 150.0))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ParasiticBomb", 0), libNtve_gf_AcquiredTarget()), c_orderQueueReplace);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ViperParasiticBomb_Init () {
        gt_ViperParasiticBomb = TriggerCreate("gt_ViperParasiticBomb_Func");
        TriggerAddEventUnitAcquiredTarget(gt_ViperParasiticBomb, null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Viper Abduct
    //--------------------------------------------------------------------------------------------------
    bool gt_ViperAbduct_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((UnitTypeGetCost(UnitGetType(EventUnitTarget()), c_unitCostSumMineralsVespene) >= 150))) {
                return false;
            }
            if (!((UnitGetType(EventUnit()) == "Viper"))) {
                return false;
            }
            if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) <= 150.0))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Yoink", 0), EventUnitTarget()), c_orderQueueReplace);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ViperAbduct_Init () {
        gt_ViperAbduct = TriggerCreate("gt_ViperAbduct_Func");
        TriggerAddEventUnitAttacked2(gt_ViperAbduct, null, null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Viper Disabling Cloud
    //--------------------------------------------------------------------------------------------------
    bool gt_ViperDisablingCloud_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "Viper"))) {
                return false;
            }
            if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 150.0))) {
                return false;
            }
            if (!((UnitTestPlane(EventUnitTarget(), c_planeGround) == true))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("DisablingCloud", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ViperDisablingCloud_Init () {
        gt_ViperDisablingCloud = TriggerCreate("gt_ViperDisablingCloud_Func");
        TriggerAddEventUnitAttacked2(gt_ViperDisablingCloud, null, null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Infestor Fungal Growth
    //--------------------------------------------------------------------------------------------------
    bool gt_InfestorFungalGrowth_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
                return false;
            }
            if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
                return false;
            }
            if (!(((UnitGetType(EventUnit()) == "Infestor") || (UnitGetType(EventUnit()) == "InfestorBurrowed")))) {
                return false;
            }
            if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 75.0))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        if ((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnitTarget()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 5) && (UnitBehaviorDuration(UnitGroupRandomUnit(UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnitTarget()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "FungalGrowth") <= 1.0)) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("FungalGrowth", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
        }
        else {
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_InfestorFungalGrowth_Init () {
        gt_InfestorFungalGrowth = TriggerCreate("gt_InfestorFungalGrowth_Func");
        TriggerAddEventUnitAttacked2(gt_InfestorFungalGrowth, null, null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Expansion Barriers
    //--------------------------------------------------------------------------------------------------
    bool gt_ExpansionBarriers_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        unitgroup autoA7B061F7_g;
        int autoA7B061F7_u;
        unit autoA7B061F7_var;
        // Actions
        if (!runActions) {
            return true;
        }
        SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerDownLarge", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 200.0, 0.0);
        libNtve_gf_RemoveDoodadsinRegion(RegionCircle(UnitGetPosition(EventUnit()), 1.0), "ProtossCratesDoodad");
        if ((UnitGetType(EventUnit()) == "BarrierVespene")) {
            autoA7B061F7_g = UnitGroup("ShakurasVespeneGeyser", 0, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA7B061F7_u = UnitGroupCount(autoA7B061F7_g, c_unitCountAll);
            for (;; autoA7B061F7_u -= 1) {
                autoA7B061F7_var = UnitGroupUnitFromEnd(autoA7B061F7_g, autoA7B061F7_u);
                if (autoA7B061F7_var == null) { break; }
                UnitSetState(autoA7B061F7_var, c_unitStateSelectable, true);
                UnitSetState(autoA7B061F7_var, c_unitStateTargetable, true);
                UnitSetState(autoA7B061F7_var, c_unitStateTooltipable, true);
            }
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ExpansionBarriers_Init () {
        gt_ExpansionBarriers = TriggerCreate("gt_ExpansionBarriers_Func");
        TriggerAddEventUnitDied(gt_ExpansionBarriers, UnitRefFromUnit(UnitFromId(773756011)));
        TriggerAddEventUnitDied(gt_ExpansionBarriers, UnitRefFromUnit(UnitFromId(384303773)));
        TriggerAddEventUnitDied(gt_ExpansionBarriers, UnitRefFromUnit(UnitFromId(478662900)));
        TriggerAddEventUnitDied(gt_ExpansionBarriers, UnitRefFromUnit(UnitFromId(324069986)));
        TriggerAddEventUnitDied(gt_ExpansionBarriers, UnitRefFromUnit(UnitFromId(327606957)));
        TriggerAddEventUnitDied(gt_ExpansionBarriers, UnitRefFromUnit(UnitFromId(2100103657)));
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Energy Refresh
    //--------------------------------------------------------------------------------------------------
    bool gt_EnergyRefresh_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!(((UnitGetType(EventUnit()) == "Infestor") || (UnitGetType(EventUnit()) == "Viper")))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_EnergyRefresh_Init () {
        gt_EnergyRefresh = TriggerCreate("gt_EnergyRefresh_Func");
        TriggerAddEventUnitRegion(gt_EnergyRefresh, null, RegionFromId(13), true);
        TriggerAddEventUnitRegion(gt_EnergyRefresh, null, RegionFromId(10), true);
        TriggerAddEventUnitRegion(gt_EnergyRefresh, null, RegionFromId(11), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Rebuild
    //--------------------------------------------------------------------------------------------------
    bool gt_Rebuild_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!(((UnitIsAlive(UnitFromId(1193199503)) == false) || (UnitIsAlive(UnitFromId(76056835)) == false)))) {
                return false;
            }
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceEnemy, RegionFromId(36), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) == 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        UnitCreate(1, "Drone", 0, gv_pLAYER_03_ENEMY, PointFromId(1719057223), libNtve_gf_RandomAngle());
        UnitCreate(1, "Drone", 0, gv_pLAYER_03_ENEMY, PointFromId(418105612), libNtve_gf_RandomAngle());
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Rebuild_Init () {
        gt_Rebuild = TriggerCreate("gt_Rebuild_Func");
        TriggerAddEventTimePeriodic(gt_Rebuild, 30.0, c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit Sequence
    //--------------------------------------------------------------------------------------------------
    bool gt_ConduitSequence_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        int lv_random;
        // Automatic Variable Declarations
        const int autoFA6EE207_ae = 3;
        const int autoFA6EE207_ai = 1;
        const int autoC84646AA_ae = 6;
        const int autoC84646AA_ai = 1;
        const int autoECE6CBB0_ae = 3;
        const int autoECE6CBB0_ai = 1;
        const int auto203F84E7_ae = 3;
        const int auto203F84E7_ai = 1;
        int autoBE682D59_ae;
        const int autoBE682D59_ai = 1;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((gv_voidEmitterFractures != gv_maximumVoidEmitterFractures))) {
                return false;
            }
            if (!((gv_voidEmitterHitsSpearOfAdun != 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        lv_iterator = 0;
        for ( ; ( (autoFA6EE207_ai >= 0 && lv_iterator <= autoFA6EE207_ae) || (autoFA6EE207_ai < 0 && lv_iterator >= autoFA6EE207_ae) ) ; lv_iterator += autoFA6EE207_ai ) {
            gv_randomActiveConduits[lv_iterator] = -1;
        }
        lv_iterator = 0;
        for ( ; ( (autoC84646AA_ai >= 0 && lv_iterator <= autoC84646AA_ae) || (autoC84646AA_ai < 0 && lv_iterator >= autoC84646AA_ae) ) ; lv_iterator += autoC84646AA_ai ) {
            gv_conduitStalled[lv_iterator] = 0;
        }
        if ((gv_stageID == 3) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 3) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 3)) {
            lv_iterator = 0;
            for ( ; ( (autoECE6CBB0_ai >= 0 && lv_iterator <= autoECE6CBB0_ae) || (autoECE6CBB0_ai < 0 && lv_iterator >= autoECE6CBB0_ae) ) ; lv_iterator += autoECE6CBB0_ai ) {
                lv_random = RandomInt(0, 4);
                while (((lv_random == gv_randomActiveConduits[0]) || (lv_random == gv_randomActiveConduits[1]) || (lv_random == gv_randomActiveConduits[2]))) {
                    lv_random = RandomInt(0, 4);
                    if (lv_random >= 4) {
                        lv_random = 0;
                    }
                    else {
                        lv_random = lv_random + 1;
                    }
                }
                gv_randomActiveConduits[lv_iterator] = lv_random;
            }
        }
        else {
            lv_iterator = 0;
            for ( ; ( (auto203F84E7_ai >= 0 && lv_iterator <= auto203F84E7_ae) || (auto203F84E7_ai < 0 && lv_iterator >= auto203F84E7_ae) ) ; lv_iterator += auto203F84E7_ai ) {
                lv_random = RandomInt(0, 6);
                while (((lv_random == gv_randomActiveConduits[0]) || (lv_random == gv_randomActiveConduits[1]) || (lv_random == gv_randomActiveConduits[2]))) {
                    lv_random = RandomInt(0, 6);
                    if (lv_random >= 6) {
                        lv_random = 0;
                    }
                    else {
                        lv_random = lv_random + 1;
                    }
                }
                gv_randomActiveConduits[lv_iterator] = lv_random;
            }
        }
        autoBE682D59_ae = (gv_voidEmitterConduitsPrimed - 1);
        lv_iterator = 0;
        for ( ; ( (autoBE682D59_ai >= 0 && lv_iterator <= autoBE682D59_ae) || (autoBE682D59_ai < 0 && lv_iterator >= autoBE682D59_ae) ) ; lv_iterator += autoBE682D59_ai ) {
            TriggerExecute(gv_conduitPrimingTrigger[gv_randomActiveConduits[lv_iterator]], true, false);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[gv_randomActiveConduits[lv_iterator]]), StringExternal("Param/Value/0610BC49"));
            gv_conduitPing[gv_randomActiveConduits[lv_iterator]] = PingLastCreated();
            TextTagCreate(StringExternal("Param/Value/E6DCD51A"), 24, gv_conduitSoundPoint[gv_randomActiveConduits[lv_iterator]], 3.0, true, false, PlayerGroupAll());
            gv_conduitTextTag[gv_randomActiveConduits[lv_iterator]] = TextTagLastCreated();
            VisExploreArea(gv_pLAYER_01_USER, gv_conduitRegion[gv_randomActiveConduits[lv_iterator]], true, false);
            VisExploreArea(gv_pLAYER_02_USER, gv_conduitRegion[gv_randomActiveConduits[lv_iterator]], true, false);
            libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[gv_randomActiveConduits[lv_iterator]], "XelNaga_EnergyStreaks");
        }
        SoundPlayForPlayer(SoundLink("Xelnaga_Vision_Temple_StandWorkStart_C", -1), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ConduitSequence_Init () {
        gt_ConduitSequence = TriggerCreate("gt_ConduitSequence_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit Region Check
    //--------------------------------------------------------------------------------------------------
    bool gt_ConduitRegionCheck_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        int lv_unitCount;
        // Automatic Variable Declarations
        const int autoD91F981D_ae = 6;
        const int autoD91F981D_ai = 1;
        unitgroup auto9FC23E7E_g;
        int auto9FC23E7E_u;
        unit auto9FC23E7E_var;
        const int autoAD1B850E_ae = 6;
        const int autoAD1B850E_ai = 1;
        unitgroup auto110B26CF_g;
        int auto110B26CF_u;
        unit auto110B26CF_var;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        lv_iterator = 0;
        for ( ; ( (autoD91F981D_ai >= 0 && lv_iterator <= autoD91F981D_ae) || (autoD91F981D_ai < 0 && lv_iterator >= autoD91F981D_ae) ) ; lv_iterator += autoD91F981D_ai ) {
            lv_unitCount = 0;
            auto9FC23E7E_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_iterator], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto9FC23E7E_u = UnitGroupCount(auto9FC23E7E_g, c_unitCountAll);
            for (;; auto9FC23E7E_u -= 1) {
                auto9FC23E7E_var = UnitGroupUnitFromEnd(auto9FC23E7E_g, auto9FC23E7E_u);
                if (auto9FC23E7E_var == null) { break; }
                if ((UnitTypeTestAttribute(UnitGetType(auto9FC23E7E_var), c_unitAttributeHeroic) == true)) {
                    lv_unitCount += 5;
                }
                else {
                    lv_unitCount += 1;
                }
            }
            gv_conduitUnitCount[lv_iterator][0] = lv_unitCount;
        }
        lv_iterator = 0;
        for ( ; ( (autoAD1B850E_ai >= 0 && lv_iterator <= autoAD1B850E_ae) || (autoAD1B850E_ai < 0 && lv_iterator >= autoAD1B850E_ae) ) ; lv_iterator += autoAD1B850E_ai ) {
            lv_unitCount = 0;
            auto110B26CF_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_iterator], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto110B26CF_u = UnitGroupCount(auto110B26CF_g, c_unitCountAll);
            for (;; auto110B26CF_u -= 1) {
                auto110B26CF_var = UnitGroupUnitFromEnd(auto110B26CF_g, auto110B26CF_u);
                if (auto110B26CF_var == null) { break; }
                lv_unitCount += 1;
            }
            gv_conduitUnitCount[lv_iterator][1] = lv_unitCount;
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ConduitRegionCheck_Init () {
        gt_ConduitRegionCheck = TriggerCreate("gt_ConduitRegionCheck_Func");
        TriggerAddEventTimePeriodic(gt_ConduitRegionCheck, 0.1, c_timeGame);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit Text Tags
    //--------------------------------------------------------------------------------------------------
    bool gt_ConduitTextTags_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        // Automatic Variable Declarations
        int autoD974FC60_ae;
        const int autoD974FC60_ai = 1;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        autoD974FC60_ae = (gv_voidEmitterConduitsPrimed - 1);
        lv_iterator = 0;
        for ( ; ( (autoD974FC60_ai >= 0 && lv_iterator <= autoD974FC60_ae) || (autoD974FC60_ai < 0 && lv_iterator >= autoD974FC60_ae) ) ; lv_iterator += autoD974FC60_ai ) {
            if (((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[gv_randomActiveConduits[lv_iterator]], UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCountAlliance(gv_pLAYER_02_USER, c_unitAllianceAlly, gv_conduitRegion[gv_randomActiveConduits[lv_iterator]], UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0))) {
                TextTagShow(gv_conduitTextTag[gv_randomActiveConduits[lv_iterator]], PlayerGroupAll(), false);
            }
            else {
                TextTagShow(gv_conduitTextTag[gv_randomActiveConduits[lv_iterator]], PlayerGroupAll(), true);
            }
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ConduitTextTags_Init () {
        gt_ConduitTextTags = TriggerCreate("gt_ConduitTextTags_Func");
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerAddEventTimePeriodic(gt_ConduitTextTags, 0.1, c_timeGame);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit Timer
    //--------------------------------------------------------------------------------------------------
    bool gt_ConduitTimer_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_timerCritical;
        int lv_iterator;
        // Automatic Variable Declarations
        int auto291556B0_ae;
        const int auto291556B0_ai = 1;
        const int autoF7905583_ae = 3;
        const int autoF7905583_ai = 1;
        // Variable Initialization
        lv_timerCritical = 10;
        // Conditions
        if (testConds) {
            if (!((gv_voidEmitterFractures != gv_maximumVoidEmitterFractures))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(gt_NoUnitWarning, true);
        auto291556B0_ae = (gv_voidEmitterConduitsPrimed - 1);
        lv_iterator = 0;
        for ( ; ( (auto291556B0_ai >= 0 && lv_iterator <= auto291556B0_ae) || (auto291556B0_ai < 0 && lv_iterator >= auto291556B0_ae) ) ; lv_iterator += auto291556B0_ai ) {
            TriggerEnable(gv_conduitPressureTrigger[lv_iterator], true);
        }
        TimerStart(TimerCreate(), gv_conduitTimerAmount, false, c_timeReal);
        gv_conduitTimer = TimerLastStarted();
        if ((gv_voidEmitterConduitsPrimed == 1)) {
            libCOMI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/B176C07A"), true, false);
        }
        else {
            libCOMI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/2ED68E6E"), true, false);
        }
        TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<mintotal/>:<sec2/>"));
        libNtve_gf_WaitForTimer(gv_conduitTimer, 150.0, false);
        TriggerExecute(gt_PsionicDisruptors, true, false);
        TriggerExecute(gt_Stage2Nudge, true, false);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 60.0, false);
        TriggerExecute(gt_AttackWave, true, false);
        TriggerExecute(gt_BossWaveStage6, true, false);
        TriggerExecute(gt_BossWaveStage4, true, false);
        TriggerExecute(gt_HybridDetected, true, false);
        TriggerExecute(gt_CreateAttackWave, true, false);
        libNtve_gf_WaitForTimer(gv_conduitTimer, lv_timerCritical, false);
        SoundPlayForPlayer(SoundLink("PPurifier01_PurifierVault_StandWorkStart_H", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        SoundPlayForPlayer(SoundLink("PPurifier01_PurifierVault_StandWorkStart_A", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        lv_iterator = 0;
        for ( ; ( (autoF7905583_ai >= 0 && lv_iterator <= autoF7905583_ae) || (autoF7905583_ai < 0 && lv_iterator >= autoF7905583_ae) ) ; lv_iterator += autoF7905583_ai ) {
            TriggerEnable(gv_conduitPressureTrigger[lv_iterator], false);
        }
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
        TimerWindowDestroy(TimerWindowLastCreated());
        Wait(1.0, c_timeGame);
        TriggerExecute(gt_ConduitContested, true, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ConduitTimer_Init () {
        gt_ConduitTimer = TriggerCreate("gt_ConduitTimer_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit Contested
    //--------------------------------------------------------------------------------------------------
    bool gt_ConduitContested_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((gv_contestedConduits == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(gt_ContestedEffects, true);
        TriggerExecute(gt_Contesting, true, false);
        gv_contestedConduits = false;
        TimerStart(TimerCreate(), 10.0, false, c_timeReal);
        gv_conduitTimer = TimerLastStarted();
        libCOMI_gf_TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/8586D750"), true, false);
        TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(100.00, 0.00, 0.00), 0.0);
        TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
        libCOMI_gf_SetTimerWindowDangerThreshold(10.0);
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 20.0, 1.0);
        TriggerEnable(gt_ContestedEffects, false);
        TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
        TimerWindowDestroy(TimerWindowLastCreated());
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ConduitContested_Init () {
        gt_ConduitContested = TriggerCreate("gt_ConduitContested_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Central Conduit Priming
    //--------------------------------------------------------------------------------------------------
    bool gt_CentralConduitPriming_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 10.0, gv_conduitTimerAmount);
        TextTagCreate(StringExternal("Param/Value/A44D2571"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
        TextTagDestroy(TextTagLastCreated());
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_CentralConduitPriming_Init () {
        gt_CentralConduitPriming = TriggerCreate("gt_CentralConduitPriming_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Central Conduit Activating
    //--------------------------------------------------------------------------------------------------
    bool gt_CentralConduitActivating_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        unitgroup auto9B27D2E6_g;
        int auto9B27D2E6_u;
        unit auto9B27D2E6_var;
        unitgroup autoB08D683A_g;
        int autoB08D683A_u;
        unit autoB08D683A_var;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagDestroy(gv_conduitTextTag[lv_conduitID]);
        if (((gv_conduitStalled[lv_conduitID] == 2) || ((gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] == 0)))) {
            auto9B27D2E6_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto9B27D2E6_u = UnitGroupCount(auto9B27D2E6_g, c_unitCountAll);
            for (;; auto9B27D2E6_u -= 1) {
                auto9B27D2E6_var = UnitGroupUnitFromEnd(auto9B27D2E6_g, auto9B27D2E6_u);
                if (auto9B27D2E6_var == null) { break; }
                UnitCreateEffectUnit(auto9B27D2E6_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFractureAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/443FB93C"));
            PingSetColor(PingLastCreated(), Color(0.00, 100.00, 100.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("Disruptor_DisruptionOvercharge_Stop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/DD37D75A"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if (((gv_conduitStalled[lv_conduitID] == 1) || ((gv_conduitUnitCount[lv_conduitID][0] == 0) && (gv_conduitUnitCount[lv_conduitID][1] >= 0)))) {
            autoB08D683A_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            autoB08D683A_u = UnitGroupCount(autoB08D683A_g, c_unitCountAll);
            for (;; autoB08D683A_u -= 1) {
                autoB08D683A_var = UnitGroupUnitFromEnd(autoB08D683A_g, autoB08D683A_u);
                if (autoB08D683A_var == null) { break; }
                UnitCreateEffectUnit(autoB08D683A_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFireAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/883F59FE"));
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("SlaynElemental_Death_Charge", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/76F2DE68"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if ((gv_conduitStalled[lv_conduitID] == 0) && (gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] > 0)) {
            gv_contestedConduits = true;
            PingDestroy(gv_conduitPing[lv_conduitID]);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/C1658E14"));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Attack", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
            PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
            TextTagCreate(StringExternal("Param/Value/E04D8413"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
            SoundPlayAtPointForPlayer(SoundLink("DefenseMatrix_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 300.0, 0.0);
            Wait(2.0, c_timeGame);
            libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
            if ((gv_conduitUnitCount[lv_conduitID][0] >= gv_conduitUnitCount[lv_conduitID][1])) {
                gv_conduitStalled[lv_conduitID] = 2;
            }
            else {
                gv_conduitStalled[lv_conduitID] = 1;
            }
            PingDestroy(PingLastCreated());
            TextTagDestroy(TextTagLastCreated());
            SoundStop(SoundLastPlayed(), true);
            TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_CentralConduitActivating_Init () {
        gt_CentralConduitActivating = TriggerCreate("gt_CentralConduitActivating_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Western Conduit Priming
    //--------------------------------------------------------------------------------------------------
    bool gt_WesternConduitPriming_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_conduitID = 1;
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 10.0, gv_conduitTimerAmount);
        TextTagCreate(StringExternal("Param/Value/F2E85284"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
        TextTagDestroy(TextTagLastCreated());
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_WesternConduitPriming_Init () {
        gt_WesternConduitPriming = TriggerCreate("gt_WesternConduitPriming_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Western Conduit Activating
    //--------------------------------------------------------------------------------------------------
    bool gt_WesternConduitActivating_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        unitgroup auto992CD569_g;
        int auto992CD569_u;
        unit auto992CD569_var;
        unitgroup auto157BBBE2_g;
        int auto157BBBE2_u;
        unit auto157BBBE2_var;
        // Variable Initialization
        lv_conduitID = 1;
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagDestroy(gv_conduitTextTag[lv_conduitID]);
        if (((gv_conduitStalled[lv_conduitID] == 2) || ((gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] == 0)))) {
            auto992CD569_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto992CD569_u = UnitGroupCount(auto992CD569_g, c_unitCountAll);
            for (;; auto992CD569_u -= 1) {
                auto992CD569_var = UnitGroupUnitFromEnd(auto992CD569_g, auto992CD569_u);
                if (auto992CD569_var == null) { break; }
                UnitCreateEffectUnit(auto992CD569_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFractureAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/ADFD1D89"));
            PingSetColor(PingLastCreated(), Color(0.00, 100.00, 100.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("Disruptor_DisruptionOvercharge_Stop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/048B2099"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if (((gv_conduitStalled[lv_conduitID] == 1) || ((gv_conduitUnitCount[lv_conduitID][0] == 0) && (gv_conduitUnitCount[lv_conduitID][1] >= 0)))) {
            auto157BBBE2_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto157BBBE2_u = UnitGroupCount(auto157BBBE2_g, c_unitCountAll);
            for (;; auto157BBBE2_u -= 1) {
                auto157BBBE2_var = UnitGroupUnitFromEnd(auto157BBBE2_g, auto157BBBE2_u);
                if (auto157BBBE2_var == null) { break; }
                UnitCreateEffectUnit(auto157BBBE2_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFireAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/9F7C6432"));
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("SlaynElemental_Death_Charge", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/96D6170E"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if ((gv_conduitStalled[lv_conduitID] == 0) && (gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] > 0)) {
            gv_contestedConduits = true;
            PingDestroy(gv_conduitPing[lv_conduitID]);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/49D71C08"));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Attack", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
            PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
            TextTagCreate(StringExternal("Param/Value/FAF27776"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
            SoundPlayAtPointForPlayer(SoundLink("DefenseMatrix_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 300.0, 0.0);
            Wait(2.0, c_timeGame);
            libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
            if ((gv_conduitUnitCount[lv_conduitID][0] >= gv_conduitUnitCount[lv_conduitID][1])) {
                gv_conduitStalled[lv_conduitID] = 2;
            }
            else {
                gv_conduitStalled[lv_conduitID] = 1;
            }
            PingDestroy(PingLastCreated());
            TextTagDestroy(TextTagLastCreated());
            SoundStop(SoundLastPlayed(), true);
            TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_WesternConduitActivating_Init () {
        gt_WesternConduitActivating = TriggerCreate("gt_WesternConduitActivating_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Northern Conduit Priming
    //--------------------------------------------------------------------------------------------------
    bool gt_NorthernConduitPriming_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_conduitID = 2;
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 10.0, gv_conduitTimerAmount);
        TextTagCreate(StringExternal("Param/Value/EFE6942B"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
        TextTagDestroy(TextTagLastCreated());
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_NorthernConduitPriming_Init () {
        gt_NorthernConduitPriming = TriggerCreate("gt_NorthernConduitPriming_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Northern Conduit Activating
    //--------------------------------------------------------------------------------------------------
    bool gt_NorthernConduitActivating_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        unitgroup auto28D4676D_g;
        int auto28D4676D_u;
        unit auto28D4676D_var;
        unitgroup auto9638D5CD_g;
        int auto9638D5CD_u;
        unit auto9638D5CD_var;
        // Variable Initialization
        lv_conduitID = 2;
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagDestroy(gv_conduitTextTag[lv_conduitID]);
        if (((gv_conduitStalled[lv_conduitID] == 2) || ((gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] == 0)))) {
            auto28D4676D_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto28D4676D_u = UnitGroupCount(auto28D4676D_g, c_unitCountAll);
            for (;; auto28D4676D_u -= 1) {
                auto28D4676D_var = UnitGroupUnitFromEnd(auto28D4676D_g, auto28D4676D_u);
                if (auto28D4676D_var == null) { break; }
                UnitCreateEffectUnit(auto28D4676D_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFractureAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/2AAD6D92"));
            PingSetColor(PingLastCreated(), Color(0.00, 100.00, 100.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("Disruptor_DisruptionOvercharge_Stop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/5D97BE63"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if (((gv_conduitStalled[lv_conduitID] == 1) || ((gv_conduitUnitCount[lv_conduitID][0] == 0) && (gv_conduitUnitCount[lv_conduitID][1] >= 0)))) {
            auto9638D5CD_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto9638D5CD_u = UnitGroupCount(auto9638D5CD_g, c_unitCountAll);
            for (;; auto9638D5CD_u -= 1) {
                auto9638D5CD_var = UnitGroupUnitFromEnd(auto9638D5CD_g, auto9638D5CD_u);
                if (auto9638D5CD_var == null) { break; }
                UnitCreateEffectUnit(auto9638D5CD_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFireAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/CED38814"));
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("SlaynElemental_Death_Charge", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/242A514F"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if ((gv_conduitStalled[lv_conduitID] == 0) && (gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] > 0)) {
            gv_contestedConduits = true;
            PingDestroy(gv_conduitPing[lv_conduitID]);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/B2D72E90"));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Attack", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
            PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
            TextTagCreate(StringExternal("Param/Value/0D3FEFF1"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
            SoundPlayAtPointForPlayer(SoundLink("DefenseMatrix_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 300.0, 0.0);
            Wait(2.0, c_timeGame);
            libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
            if ((gv_conduitUnitCount[lv_conduitID][0] >= gv_conduitUnitCount[lv_conduitID][1])) {
                gv_conduitStalled[lv_conduitID] = 2;
            }
            else {
                gv_conduitStalled[lv_conduitID] = 1;
            }
            PingDestroy(PingLastCreated());
            TextTagDestroy(TextTagLastCreated());
            SoundStop(SoundLastPlayed(), true);
            TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_NorthernConduitActivating_Init () {
        gt_NorthernConduitActivating = TriggerCreate("gt_NorthernConduitActivating_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Southwestern Conduit Priming
    //--------------------------------------------------------------------------------------------------
    bool gt_SouthwesternConduitPriming_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_conduitID = 3;
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 10.0, gv_conduitTimerAmount);
        TextTagCreate(StringExternal("Param/Value/C53A968F"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
        TextTagDestroy(TextTagLastCreated());
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_SouthwesternConduitPriming_Init () {
        gt_SouthwesternConduitPriming = TriggerCreate("gt_SouthwesternConduitPriming_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Southwestern Conduit Activating
    //--------------------------------------------------------------------------------------------------
    bool gt_SouthwesternConduitActivating_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        unitgroup auto7E70CF11_g;
        int auto7E70CF11_u;
        unit auto7E70CF11_var;
        unitgroup autoBE968388_g;
        int autoBE968388_u;
        unit autoBE968388_var;
        // Variable Initialization
        lv_conduitID = 3;
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagDestroy(gv_conduitTextTag[lv_conduitID]);
        if (((gv_conduitStalled[lv_conduitID] == 2) || ((gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] == 0)))) {
            auto7E70CF11_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto7E70CF11_u = UnitGroupCount(auto7E70CF11_g, c_unitCountAll);
            for (;; auto7E70CF11_u -= 1) {
                auto7E70CF11_var = UnitGroupUnitFromEnd(auto7E70CF11_g, auto7E70CF11_u);
                if (auto7E70CF11_var == null) { break; }
                UnitCreateEffectUnit(auto7E70CF11_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFractureAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/B99257C3"));
            PingSetColor(PingLastCreated(), Color(0.00, 100.00, 100.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("Disruptor_DisruptionOvercharge_Stop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/BC51823A"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if (((gv_conduitStalled[lv_conduitID] == 1) || ((gv_conduitUnitCount[lv_conduitID][0] == 0) && (gv_conduitUnitCount[lv_conduitID][1] >= 0)))) {
            autoBE968388_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            autoBE968388_u = UnitGroupCount(autoBE968388_g, c_unitCountAll);
            for (;; autoBE968388_u -= 1) {
                autoBE968388_var = UnitGroupUnitFromEnd(autoBE968388_g, autoBE968388_u);
                if (autoBE968388_var == null) { break; }
                UnitCreateEffectUnit(autoBE968388_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFireAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/B93F9372"));
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("SlaynElemental_Death_Charge", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/B9260499"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if ((gv_conduitStalled[lv_conduitID] == 0) && (gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] > 0)) {
            gv_contestedConduits = true;
            PingDestroy(gv_conduitPing[lv_conduitID]);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/D2E26BE1"));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Attack", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
            PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
            TextTagCreate(StringExternal("Param/Value/9C5643BB"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
            SoundPlayAtPointForPlayer(SoundLink("DefenseMatrix_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 300.0, 0.0);
            Wait(2.0, c_timeGame);
            libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
            if ((gv_conduitUnitCount[lv_conduitID][0] >= gv_conduitUnitCount[lv_conduitID][1])) {
                gv_conduitStalled[lv_conduitID] = 2;
            }
            else {
                gv_conduitStalled[lv_conduitID] = 1;
            }
            PingDestroy(PingLastCreated());
            TextTagDestroy(TextTagLastCreated());
            SoundStop(SoundLastPlayed(), true);
            TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_SouthwesternConduitActivating_Init () {
        gt_SouthwesternConduitActivating = TriggerCreate("gt_SouthwesternConduitActivating_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Northeastern Conduit Priming
    //--------------------------------------------------------------------------------------------------
    bool gt_NortheasternConduitPriming_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_conduitID = 4;
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 10.0, gv_conduitTimerAmount);
        TextTagCreate(StringExternal("Param/Value/28F4D11A"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
        TextTagDestroy(TextTagLastCreated());
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_NortheasternConduitPriming_Init () {
        gt_NortheasternConduitPriming = TriggerCreate("gt_NortheasternConduitPriming_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Northeastern Conduit Activating
    //--------------------------------------------------------------------------------------------------
    bool gt_NortheasternConduitActivating_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        unitgroup auto6DD67B14_g;
        int auto6DD67B14_u;
        unit auto6DD67B14_var;
        unitgroup autoA148D353_g;
        int autoA148D353_u;
        unit autoA148D353_var;
        // Variable Initialization
        lv_conduitID = 4;
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagDestroy(gv_conduitTextTag[lv_conduitID]);
        if (((gv_conduitStalled[lv_conduitID] == 2) || ((gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] == 0)))) {
            auto6DD67B14_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto6DD67B14_u = UnitGroupCount(auto6DD67B14_g, c_unitCountAll);
            for (;; auto6DD67B14_u -= 1) {
                auto6DD67B14_var = UnitGroupUnitFromEnd(auto6DD67B14_g, auto6DD67B14_u);
                if (auto6DD67B14_var == null) { break; }
                UnitCreateEffectUnit(auto6DD67B14_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFractureAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/27C56726"));
            PingSetColor(PingLastCreated(), Color(0.00, 100.00, 100.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("Disruptor_DisruptionOvercharge_Stop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/D3530C55"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if (((gv_conduitStalled[lv_conduitID] == 1) || ((gv_conduitUnitCount[lv_conduitID][0] == 0) && (gv_conduitUnitCount[lv_conduitID][1] >= 0)))) {
            autoA148D353_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            autoA148D353_u = UnitGroupCount(autoA148D353_g, c_unitCountAll);
            for (;; autoA148D353_u -= 1) {
                autoA148D353_var = UnitGroupUnitFromEnd(autoA148D353_g, autoA148D353_u);
                if (autoA148D353_var == null) { break; }
                UnitCreateEffectUnit(autoA148D353_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFireAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/FE1A80F0"));
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("SlaynElemental_Death_Charge", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/BE487941"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if ((gv_conduitStalled[lv_conduitID] == 0) && (gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] > 0)) {
            gv_contestedConduits = true;
            PingDestroy(gv_conduitPing[lv_conduitID]);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/93FCC5C8"));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Attack", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
            PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
            TextTagCreate(StringExternal("Param/Value/01F1870A"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
            SoundPlayAtPointForPlayer(SoundLink("DefenseMatrix_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 300.0, 0.0);
            Wait(2.0, c_timeGame);
            libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
            if ((gv_conduitUnitCount[lv_conduitID][0] >= gv_conduitUnitCount[lv_conduitID][1])) {
                gv_conduitStalled[lv_conduitID] = 2;
            }
            else {
                gv_conduitStalled[lv_conduitID] = 1;
            }
            PingDestroy(PingLastCreated());
            TextTagDestroy(TextTagLastCreated());
            SoundStop(SoundLastPlayed(), true);
            TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_NortheasternConduitActivating_Init () {
        gt_NortheasternConduitActivating = TriggerCreate("gt_NortheasternConduitActivating_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Southern Conduit Priming
    //--------------------------------------------------------------------------------------------------
    bool gt_SouthernConduitPriming_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_conduitID = 5;
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 10.0, gv_conduitTimerAmount);
        TextTagCreate(StringExternal("Param/Value/4ACBADD6"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
        TextTagDestroy(TextTagLastCreated());
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_SouthernConduitPriming_Init () {
        gt_SouthernConduitPriming = TriggerCreate("gt_SouthernConduitPriming_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Southern Conduit Activating
    //--------------------------------------------------------------------------------------------------
    bool gt_SouthernConduitActivating_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        unitgroup autoC895A177_g;
        int autoC895A177_u;
        unit autoC895A177_var;
        unitgroup auto0EE3F030_g;
        int auto0EE3F030_u;
        unit auto0EE3F030_var;
        // Variable Initialization
        lv_conduitID = 5;
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagDestroy(gv_conduitTextTag[lv_conduitID]);
        if (((gv_conduitStalled[lv_conduitID] == 2) || ((gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] == 0)))) {
            autoC895A177_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            autoC895A177_u = UnitGroupCount(autoC895A177_g, c_unitCountAll);
            for (;; autoC895A177_u -= 1) {
                autoC895A177_var = UnitGroupUnitFromEnd(autoC895A177_g, autoC895A177_u);
                if (autoC895A177_var == null) { break; }
                UnitCreateEffectUnit(autoC895A177_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFractureAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/D7B39C80"));
            PingSetColor(PingLastCreated(), Color(0.00, 100.00, 100.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("Disruptor_DisruptionOvercharge_Stop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/9C8EF429"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if (((gv_conduitStalled[lv_conduitID] == 1) || ((gv_conduitUnitCount[lv_conduitID][0] == 0) && (gv_conduitUnitCount[lv_conduitID][1] >= 0)))) {
            auto0EE3F030_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto0EE3F030_u = UnitGroupCount(auto0EE3F030_g, c_unitCountAll);
            for (;; auto0EE3F030_u -= 1) {
                auto0EE3F030_var = UnitGroupUnitFromEnd(auto0EE3F030_g, auto0EE3F030_u);
                if (auto0EE3F030_var == null) { break; }
                UnitCreateEffectUnit(auto0EE3F030_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFireAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/6BF6EA27"));
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("SlaynElemental_Death_Charge", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/B1915C9D"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if ((gv_conduitStalled[lv_conduitID] == 0) && (gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] > 0)) {
            gv_contestedConduits = true;
            PingDestroy(gv_conduitPing[lv_conduitID]);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/C9438BE2"));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Attack", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
            PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
            TextTagCreate(StringExternal("Param/Value/1C83E74E"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
            SoundPlayAtPointForPlayer(SoundLink("DefenseMatrix_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 300.0, 0.0);
            Wait(2.0, c_timeGame);
            libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
            if ((gv_conduitUnitCount[lv_conduitID][0] >= gv_conduitUnitCount[lv_conduitID][1])) {
                gv_conduitStalled[lv_conduitID] = 2;
            }
            else {
                gv_conduitStalled[lv_conduitID] = 1;
            }
            PingDestroy(PingLastCreated());
            TextTagDestroy(TextTagLastCreated());
            SoundStop(SoundLastPlayed(), true);
            TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_SouthernConduitActivating_Init () {
        gt_SouthernConduitActivating = TriggerCreate("gt_SouthernConduitActivating_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Eastern Conduit Priming
    //--------------------------------------------------------------------------------------------------
    bool gt_EasternConduitPriming_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_conduitID = 6;
        // Actions
        if (!runActions) {
            return true;
        }
        UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 10.0, gv_conduitTimerAmount);
        TextTagCreate(StringExternal("Param/Value/AAD1F2C4"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
        libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
        libNtve_gf_ShowHideDoodadsInRegion(true, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
        TextTagDestroy(TextTagLastCreated());
        TriggerEnable(gt_ConduitTextTags, false);
        TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_EasternConduitPriming_Init () {
        gt_EasternConduitPriming = TriggerCreate("gt_EasternConduitPriming_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Eastern Conduit Activating
    //--------------------------------------------------------------------------------------------------
    bool gt_EasternConduitActivating_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_conduitID;
        // Automatic Variable Declarations
        unitgroup autoEB738BFB_g;
        int autoEB738BFB_u;
        unit autoEB738BFB_var;
        unitgroup auto1B1EEAC4_g;
        int auto1B1EEAC4_u;
        unit auto1B1EEAC4_var;
        // Variable Initialization
        lv_conduitID = 6;
        // Actions
        if (!runActions) {
            return true;
        }
        TextTagDestroy(gv_conduitTextTag[lv_conduitID]);
        if (((gv_conduitStalled[lv_conduitID] == 2) || ((gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] == 0)))) {
            autoEB738BFB_g = UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            autoEB738BFB_u = UnitGroupCount(autoEB738BFB_g, c_unitCountAll);
            for (;; autoEB738BFB_u -= 1) {
                autoEB738BFB_var = UnitGroupUnitFromEnd(autoEB738BFB_g, autoEB738BFB_u);
                if (autoEB738BFB_var == null) { break; }
                UnitCreateEffectUnit(autoEB738BFB_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFractureAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/810B3218"));
            PingSetColor(PingLastCreated(), Color(0.00, 100.00, 100.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("Disruptor_DisruptionOvercharge_Stop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/FDEF1928"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if (((gv_conduitStalled[lv_conduitID] == 1) || ((gv_conduitUnitCount[lv_conduitID][0] == 0) && (gv_conduitUnitCount[lv_conduitID][1] >= 0)))) {
            auto1B1EEAC4_g = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[lv_conduitID], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto1B1EEAC4_u = UnitGroupCount(auto1B1EEAC4_g, c_unitCountAll);
            for (;; auto1B1EEAC4_u -= 1) {
                auto1B1EEAC4_var = UnitGroupUnitFromEnd(auto1B1EEAC4_g, auto1B1EEAC4_u);
                if (auto1B1EEAC4_var == null) { break; }
                UnitCreateEffectUnit(auto1B1EEAC4_var, "EnergyTransfer", gv_conduitSelfArray[lv_conduitID]);
            }
            PingDestroy(gv_conduitPing[lv_conduitID]);
            gv_voidEmitterFireAmount += 1;
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/4B28EE04"));
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            PingSetDuration(PingLastCreated(), 5.0);
            SoundPlayAtPointForPlayer(SoundLink("SlaynElemental_Death_Charge", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 150.0, 0.0);
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "XelNaga_EnergyStreaks");
            libNtve_gf_ShowHideDoodadsInRegion(false, gv_conduitRegion[lv_conduitID], "Aiur05EMPWave");
            gv_voidEmitterConduitsActivated += 1;
            TextTagCreate(StringExternal("Param/Value/D2B469EA"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            UnitSetHeight(gv_conduitSelfArray[lv_conduitID], 8.0, 5.0);
            while (!((gv_voidEmitterFireAmount == 0) && (gv_voidEmitterFractureAmount == 0))) {
                Wait(1.0, c_timeGame);
            }
            TextTagDestroy(TextTagLastCreated());
        }
        else if ((gv_conduitStalled[lv_conduitID] == 0) && (gv_conduitUnitCount[lv_conduitID][0] > 0) && (gv_conduitUnitCount[lv_conduitID][1] > 0)) {
            gv_contestedConduits = true;
            PingDestroy(gv_conduitPing[lv_conduitID]);
            libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, RegionGetCenter(gv_conduitRegion[lv_conduitID]), StringExternal("Param/Value/C46A64E8"));
            SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Attack", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
            PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
            TextTagCreate(StringExternal("Param/Value/BF455C0E"), 32, gv_conduitSoundPoint[lv_conduitID], 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
            SoundPlayAtPointForPlayer(SoundLink("DefenseMatrix_Loop", -1), c_maxPlayers, PlayerGroupAll(), gv_conduitSoundPoint[lv_conduitID], 0.0, 300.0, 0.0);
            Wait(2.0, c_timeGame);
            libNtve_gf_WaitForTimer(gv_conduitTimer, 0.0, false);
            if ((gv_conduitUnitCount[lv_conduitID][0] >= gv_conduitUnitCount[lv_conduitID][1])) {
                gv_conduitStalled[lv_conduitID] = 2;
            }
            else {
                gv_conduitStalled[lv_conduitID] = 1;
            }
            PingDestroy(PingLastCreated());
            TextTagDestroy(TextTagLastCreated());
            SoundStop(SoundLastPlayed(), true);
            TriggerExecute(gv_conduitActivationTrigger[lv_conduitID], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_EasternConduitActivating_Init () {
        gt_EasternConduitActivating = TriggerCreate("gt_EasternConduitActivating_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Void Emitter Sequence
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterSequence_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_iterator;
        int lv_waitTime;
        // Automatic Variable Declarations
        const int auto12F2AA90_ae = 3;
        const int auto12F2AA90_ai = 1;
        unitgroup autoBA8D1CCE_g;
        int autoBA8D1CCE_u;
        unit autoBA8D1CCE_var;
        int auto59E83D2C_n;
        int auto59E83D2C_i;
        int auto9569EB1D_n;
        int auto9569EB1D_i;
        int autoBCCFCEC1_n;
        int autoBCCFCEC1_i;
        // Variable Initialization
        lv_waitTime = 2;
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(gt_NoUnitWarning, false);
        lv_iterator = 0;
        for ( ; ( (auto12F2AA90_ai >= 0 && lv_iterator <= auto12F2AA90_ae) || (auto12F2AA90_ai < 0 && lv_iterator >= auto12F2AA90_ae) ) ; lv_iterator += auto12F2AA90_ai ) {
            autoBA8D1CCE_g = gv_conduitAttackGroup[lv_iterator];
            autoBA8D1CCE_u = UnitGroupCount(autoBA8D1CCE_g, c_unitCountAll);
            for (;; autoBA8D1CCE_u -= 1) {
                autoBA8D1CCE_var = UnitGroupUnitFromEnd(autoBA8D1CCE_g, autoBA8D1CCE_u);
                if (autoBA8D1CCE_var == null) { break; }
                UnitResetSpeed(autoBA8D1CCE_var);
            }
            UnitGroupClear(gv_conduitAttackGroup[lv_iterator]);
            PingDestroy(gv_attackGroupPing[lv_iterator]);
            TriggerStop(gv_attackGroupPingTrigger[lv_iterator]);
        }
        Wait(2.0, c_timeGame);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 40.0, 20.0, 4.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 40.0, 20.0, 4.0);
        SoundPlayForPlayer(SoundLink("Alarm_SoA_Protoss", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, PointFromId(1422278233), StringExternal("Param/Value/0854A032"));
        PingSetColor(PingLastCreated(), Color(100.00, 100.00, 0.00));
        PingSetDuration(PingLastCreated(), 5.0);
        PingSetScale(PingLastCreated(), 1.5);
        Wait(4.0, c_timeGame);
        GameSetLighting("KhaydarinMegalithFires", 2.0);
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 50.0, 25.0, 3.0);
        CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 50.0, 25.0, 3.0);
        SoundPlayAtPointForPlayer(SoundLink("Event_Aiur03_Victory_PreBlast_Glow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1422278233), 0.0, 110.0, 0.0);
        Wait(3.0, c_timeGame);
        auto59E83D2C_n = gv_voidEmitterConduitsActivated;
        for (auto59E83D2C_i = 1; auto59E83D2C_i <= auto59E83D2C_n; auto59E83D2C_i += 1) {
            if ((gv_voidEmitterFractureAmount > 0)) {
                SoundPlayForPlayer(SoundLink("Xelnaga_Door_StandWorkStart_E", -1), c_maxPlayers, PlayerGroupAll(), 250.0, 0.0);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 100.0, 40.0, 0.0);
                CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 100.0, 40.0, 0.0);
                auto9569EB1D_n = gv_voidEmitterFractureAmount;
                for (auto9569EB1D_i = 1; auto9569EB1D_i <= auto9569EB1D_n; auto9569EB1D_i += 1) {
                    lv_waitTime -= 1;
                    GameSetLighting("KhaydarinMegalithFractures", 0.05);
                    UnitSetHeight(UnitFromId(958786784), 10.15, 0.05);
                    Wait(0.05, c_timeGame);
                    PlayerCreateEffectPoint(3, "ZenithStonePsiStormCP", UnitGetPosition(UnitFromId(958786784)));
                    gv_voidEmitterFractures += 1;
                    TriggerExecute(gt_VoidEmitterFractureUpdate, true, true);
                    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
                    SoundPlayForPlayer(SoundLink("Doodad_Protoss_Base_RepairBay_00_D", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                    SoundPlayForPlayer(SoundLink("Doodad_ProtossRadioTower_Dead_Fade", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
                    if ((gv_voidEmitterFractures == 4)) {
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(12), "Ground_Energy_Crack");
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Sparks_DT");
                        SoundPlayForPlayer(SoundLink("WarfieldFortress_Explosion_02", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                    }
                    else if ((gv_voidEmitterFractures == 7)) {
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Shakuras_City_Debris");
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(37), "Ground_Energy_Crack");
                        SoundPlayForPlayer(SoundLink("WarfieldFortress_Explosion_02", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                    }
                    else if ((gv_voidEmitterFractures == 11)) {
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Ground_Energy_Crack");
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(38), "Ground_Energy_Crack");
                        SoundPlayForPlayer(SoundLink("WarfieldFortress_Explosion_02", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                    }
                    else if ((gv_voidEmitterFractures == 12)) {
                        TransmissionClearAll();
                        SoundPlayForPlayer(SoundLink("WarfieldFortress_Explosion_02", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                        SoundPlayForPlayer(SoundLink("Kerrigan_Extinction_ShockwaveExplosion_Distant", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "DT_Fire_Large");
                        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "ShakurasBaseShield");
                        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Smoke_Pillar_Tall_DT");
                    }
                    Wait(0.05, c_timeGame);
                    if ((gv_voidEmitterFractures != gv_maximumVoidEmitterFractures)) {
                        GameSetLighting("KhaydarinMegalithFires", 0.5);
                    }
                    else {
                        GameSetLighting("KhaydarinMegalithExplodes", 0.2);
                    }
                    PlayerCreateEffectPoint(3, "SOAMothershipGravitonPulseCP", UnitGetPosition(UnitFromId(958786784)));
                    UnitSetHeight(UnitFromId(958786784), 10.47, 0.9);
                    Wait(0.9, c_timeGame);
                }
                Wait(lv_waitTime, c_timeGame);
                CameraShakeStop(1);
                CameraShakeStop(2);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 50.0, 0.0, 2.5);
                CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 50.0, 0.0, 2.5);
                TriggerExecute(gt_NearingVictory, true, false);
                TriggerExecute(gt_FirstFracture, true, false);
                GameSetLighting("ShakurasCity", 5.0);
            }
            gv_voidEmitterFractureAmount = 0;
            if ((gv_voidEmitterFireAmount > 0) && (gv_voidEmitterFractures != gv_maximumVoidEmitterFractures)) {
                TransmissionClearAll();
                GameSetLighting("KhaydarinMegalithShot", 0.1);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 100.0, 40.0, 0.0);
                CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 100.0, 40.0, 0.0);
                autoBCCFCEC1_n = gv_voidEmitterFireAmount;
                for (autoBCCFCEC1_i = 1; autoBCCFCEC1_i <= autoBCCFCEC1_n; autoBCCFCEC1_i += 1) {
                    lv_waitTime -= 1;
                    PlayerCreateEffectPoint(3, "ZenithStonePsiStormCP", UnitGetPosition(UnitFromId(958786784)));
                    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Aiur05EMPWave");
                    SoundPlayForPlayer(SoundLink("VoidTendril_Shockwave_FXFire", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                    Wait(0.05, c_timeGame);
                    UnitSetHeight(UnitFromId(958786784), 10.15, 0.05);
                    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Aiur05EMPWave");
                    Wait(0.05, c_timeGame);
                    UnitSetHeight(UnitFromId(958786784), 10.47, 0.9);
                    Wait(0.9, c_timeGame);
                    SoundPlayForPlayer(SoundLink("Psi_StructurePowerDown", -1), c_maxPlayers, PlayerGroupAll(), 250.0, 0.0);
                    gv_voidEmitterHitsSpearOfAdun -= 1;
                    TriggerExecute(gt_VoidEmitterSpearOfAdunUpdate, true, true);
                    TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
                    GameSetLighting("KhaydarinMegalithImpact", 0.0);
                    SoundPlayForPlayer(SoundLink("PAiur03_Event_Space02_CameraQuake", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
                    if ((gv_voidEmitterHitsSpearOfAdun == 0)) {
                        TransmissionClearAll();
                    }
                }
                Wait(lv_waitTime, c_timeGame);
                SoundPlayForPlayer(SoundLink("Core_Transform4", -1), c_maxPlayers, PlayerGroupAll(), 350.0, 0.0);
                Wait(4.0, c_timeGame);
                TriggerExecute(gt_NearingDefeat, true, false);
                TriggerExecute(gt_FirstHit, true, false);
                if ((gv_voidEmitterHitsSpearOfAdun > 0)) {
                    GameSetLighting("ShakurasCity", 30.0);
                }
                else {
                    GameSetLighting("SpearofAdunExplodes", 0.75);
                }
                CameraShakeStop(1);
                CameraShakeStop(2);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 50.0, 75.0, 4.0);
                CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 50.0, 75.0, 4.0);
                SoundPlayForPlayer(SoundLink("AiurCrashingDebris_FlyBy_Junk_Loop", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
                TriggerExecute(gt_OrbitalDebrisFromHit, true, false);
                gv_voidEmitterFireAmount = 0;
                Wait(4.0, c_timeGame);
                CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 100.0, 0.0, 12.0);
                CameraShakeStart(2, c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 100.0, 0.0, 12.0);
                SoundStop(SoundLastPlayed(), true);
            }
        }
        if (((gv_voidEmitterFractures != gv_maximumVoidEmitterFractures) || (gv_voidEmitterHitsSpearOfAdun != 0))) {
            UnitSetHeight(UnitFromId(958786784), 5.5, 15.0);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterSequence_Init () {
        gt_VoidEmitterSequence = TriggerCreate("gt_VoidEmitterSequence_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Enemy Attacking Q
    //--------------------------------------------------------------------------------------------------
    bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((libCOMI_gf_GameIsOver() == false))) {
                return false;
            }
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        Wait(20.0, c_timeAI);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_EnemyAttackingQ_Init () {
        gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
        TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
        TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: PsionicDisruptors
    //--------------------------------------------------------------------------------------------------
    bool gt_PsionicDisruptors_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 12.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("PsionicDisruptorsRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_PsionicDisruptors_Init () {
        gt_PsionicDisruptors = TriggerCreate("gt_PsionicDisruptors_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: HybridDetected
    //--------------------------------------------------------------------------------------------------
    bool gt_HybridDetected_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        if ((gv_stageID == 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerQueueEnter();
            SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
        }
        else if ((gv_stageID == 6) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 2)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerQueueEnter();
            SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            libCOMI_gf_SendMissionTransmission("HybridDetected", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_HybridDetected_Init () {
        gt_HybridDetected = TriggerCreate("gt_HybridDetected_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: CloakedUnits
    //--------------------------------------------------------------------------------------------------
    bool gt_CloakedUnits_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, UnitGetOwner(EventUnit()));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        Wait(60.0, c_timeReal);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_CloakedUnits_Init () {
        gt_CloakedUnits = TriggerCreate("gt_CloakedUnits_Func");
        TriggerAddEventUnitAttacked2(gt_CloakedUnits, null, "Lurker");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Contesting
    //--------------------------------------------------------------------------------------------------
    bool gt_Contesting_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 6.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("ContestedRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Contesting_Init () {
        gt_Contesting = TriggerCreate("gt_Contesting_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Stage2Start
    //--------------------------------------------------------------------------------------------------
    bool gt_Stage2Start_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(5.0, c_timeReal);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 12.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("Stage2StartRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Stage2Start_Init () {
        gt_Stage2Start = TriggerCreate("gt_Stage2Start_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Stage4Start
    //--------------------------------------------------------------------------------------------------
    bool gt_Stage4Start_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(8.0, c_timeReal);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 10.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("Stage4StartRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Stage4Start_Init () {
        gt_Stage4Start = TriggerCreate("gt_Stage4Start_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: EnteringEnemyBase
    //--------------------------------------------------------------------------------------------------
    bool gt_EnteringEnemyBase_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_02_USER)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 6.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("EnteringEnemyBaseRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_EnteringEnemyBase_Init () {
        gt_EnteringEnemyBase = TriggerCreate("gt_EnteringEnemyBase_Func");
        TriggerAddEventUnitRegion(gt_EnteringEnemyBase, null, RegionFromId(36), true);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Stage2Nudge
    //--------------------------------------------------------------------------------------------------
    bool gt_Stage2Nudge_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_stageID == 2))) {
                return false;
            }
            if (!(((UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) == 0) || (UnitCountAlliance(gv_pLAYER_01_USER, c_unitAllianceAlly, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) == 0)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 8.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("Stage2NudgeRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Stage2Nudge_Init () {
        gt_Stage2Nudge = TriggerCreate("gt_Stage2Nudge_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: BileCitadelBombard
    //--------------------------------------------------------------------------------------------------
    bool gt_BileCitadelBombard_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 6.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("BileCitadelFirstBombardRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BileCitadelBombard_Init () {
        gt_BileCitadelBombard = TriggerCreate("gt_BileCitadelBombard_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Bombard (Auto-Acquire)
    //--------------------------------------------------------------------------------------------------
    bool gt_BombardAutoAcquire_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((TransmissionPlayerHasActiveTransmission(1) == false))) {
                return false;
            }
            if (!((TransmissionPlayerHasActiveTransmission(2) == false))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(1.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 4.3, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("BombardAutoAcquireRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
        Wait(60.0, c_timeReal);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BombardAutoAcquire_Init () {
        gt_BombardAutoAcquire = TriggerCreate("gt_BombardAutoAcquire_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: ConduitBombard
    //--------------------------------------------------------------------------------------------------
    bool gt_ConduitBombard_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((TransmissionPlayerHasActiveTransmission(1) == false))) {
                return false;
            }
            if (!((TransmissionPlayerHasActiveTransmission(2) == false))) {
                return false;
            }
            if (!((gv_stageID != 1))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 6.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("ConduitBombardRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ConduitBombard_Init () {
        gt_ConduitBombard = TriggerCreate("gt_ConduitBombard_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: FirstFracture
    //--------------------------------------------------------------------------------------------------
    bool gt_FirstFracture_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_voidEmitterFractures >= 1))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 9.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("FirstFractureRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_FirstFracture_Init () {
        gt_FirstFracture = TriggerCreate("gt_FirstFracture_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: FirstHit
    //--------------------------------------------------------------------------------------------------
    bool gt_FirstHit_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_voidEmitterHitsSpearOfAdun >= 1))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        SoundPlayForPlayer(SoundLink("Korhal_Explosion_EMP_Generator", -1), c_maxPlayers, PlayerGroupAll(), 55.0, 0.0);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 9.5, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("FirstHitRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_FirstHit_Init () {
        gt_FirstHit = TriggerCreate("gt_FirstHit_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: NearingVictory
    //--------------------------------------------------------------------------------------------------
    bool gt_NearingVictory_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_voidEmitterFractures >= 7))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FirstFracture, false);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 9.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("NearingVictoryRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_NearingVictory_Init () {
        gt_NearingVictory = TriggerCreate("gt_NearingVictory_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: NearingDefeat
    //--------------------------------------------------------------------------------------------------
    bool gt_NearingDefeat_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_voidEmitterHitsSpearOfAdun <= 2))) {
                return false;
            }
            if (!((gv_voidEmitterHitsSpearOfAdun > 0))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FirstHit, false);
        TriggerQueueEnter();
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 10.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("NearingDefeatRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_NearingDefeat_Init () {
        gt_NearingDefeat = TriggerCreate("gt_NearingDefeat_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: BonusObjectiveInit
    //--------------------------------------------------------------------------------------------------
    bool gt_BonusObjectiveInit_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 17.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("BonusObjectiveInitRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BonusObjectiveInit_Init () {
        gt_BonusObjectiveInit = TriggerCreate("gt_BonusObjectiveInit_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: BonusObjectiveComplete
    //--------------------------------------------------------------------------------------------------
    bool gt_BonusObjectiveComplete_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 13.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("BonusObjectiveComplete", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BonusObjectiveComplete_Init () {
        gt_BonusObjectiveComplete = TriggerCreate("gt_BonusObjectiveComplete_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: AttackWave
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_stageID != 4))) {
                return false;
            }
            if (!((gv_stageID != 6))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 6.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("ConduitAttackRoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave_Init () {
        gt_AttackWave = TriggerCreate("gt_AttackWave_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: BossWaveStage4
    //--------------------------------------------------------------------------------------------------
    bool gt_BossWaveStage4_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_attackWaveLarge == true))) {
                return false;
            }
            if (!((gv_stageID == 4))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 8.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("BossWave1RoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BossWaveStage4_Init () {
        gt_BossWaveStage4 = TriggerCreate("gt_BossWaveStage4_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: BossWaveStage6
    //--------------------------------------------------------------------------------------------------
    bool gt_BossWaveStage6_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((gv_attackWaveLarge == true))) {
                return false;
            }
            if (!((gv_stageID == 6))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        Wait(2.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel("DarkTemplarShakurasPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), null, 7.0, c_transmissionDurationAdd, false);
        libCOMI_gf_SendMissionTransmission("BossWave2RoT", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        Wait(1.0, c_timeReal);
        TriggerQueueExit();
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_BossWaveStage6_Init () {
        gt_BossWaveStage6 = TriggerCreate("gt_BossWaveStage6_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Defeat Primary Objective Failed
    //--------------------------------------------------------------------------------------------------
    bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((gv_voidEmitterHitsSpearOfAdun <= 0))) {
                return false;
            }
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
            if (!((libCOMI_gf_GameIsOver() == false))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }

        TriggerExecute(gt_VoidEmitterFractureFailed, true, false);
        TriggerExecute(gt_VoidEmitterSpearOfAdunFailed, true, false);

        libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
        libCOMI_gf_SendMissionTransmission("DefeatRoT", false, -1);
        libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/5EAE81E8"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_MoveCameraForAllPlayers(RegionGetCenter(RegionEntireMap()), 1.5);
        libCOMI_gf_AfterFanfare(c_gameOverDefeat);

        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_DefeatPrimaryObjectiveFailed_Init () {
        gt_DefeatPrimaryObjectiveFailed = TriggerCreate("gt_DefeatPrimaryObjectiveFailed_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Victory Primary Objective Complete
    //--------------------------------------------------------------------------------------------------
    bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((gv_voidEmitterFractures >= gv_maximumVoidEmitterFractures))) {
                return false;
            }
            if (!((libCOMI_gf_GameIsOver() == false))) {
                return false;
            }
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VictorySequence, true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VictoryPrimaryObjectiveComplete_Init () {
        gt_VictoryPrimaryObjectiveComplete = TriggerCreate("gt_VictoryPrimaryObjectiveComplete_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Victory Sequence
    //--------------------------------------------------------------------------------------------------
    bool gt_VictorySequence_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((libCOMI_gf_GameIsOver() == false))) {
                return false;
            }
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }

        libCOMI_gf_BeforeFanfare(c_gameOverVictory);

        TriggerEnable(TriggerGetCurrent(), false);
        PlayerCreateEffectPoint(1, "CODPayloadNukeDetonate", PointFromId(1422278233));
        UnitSetHeight(UnitFromId(958786784), 5.5, 1.0);
        Wait(1.0, c_timeReal);
        GameSetLighting("ShakurasCity", 6.0);
        SoundPlayForPlayer(SoundLink("PAiur03_Event_Space02_CameraQuake", -1), c_maxPlayers, PlayerGroupAll(), 250.0, 0.0);
        UnitRemove(UnitFromId(958786784));
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "THorner05SElectricalArcs");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Sparks_DT");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Shakuras_City_Debris");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(15), "Ground_Energy_Crack");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Shakuras_CityBuilding_Tower_Destroyed");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Shakuras_City_Building_Cathedral_Destroyed");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(15), "Shakuras_CityBuilding_Tower");
        Wait(1.0, c_timeReal);
        TriggerExecute(gt_VoidEmitterFractureComplete, true, false);
        TriggerExecute(gt_VoidEmitterSpearOfAdunComplete, true, false);


        SoundPlayForPlayer(SoundLink("PPurifier01_PurifierVault_VictoryExplosion", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(15), "Ground_Energy_Crack");
        libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_MoveCameraForAllPlayers(gv_victoryCompletePan, 2.0);
        libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/8C96D4A9"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        libCOMI_gf_SendMissionTransmission("VictoryRoT", true, -1);

        libCOMI_gf_AfterFanfare(c_gameOverVictory);

        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VictorySequence_Init () {
        gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Start AI
    //--------------------------------------------------------------------------------------------------
    bool gt_StartAI_Func (bool testConds, bool runActions) {
        TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
        TriggerExecute(gt_AIAttackWaves, true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_StartAI_Init () {
        gt_StartAI = TriggerCreate("gt_StartAI_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit 1 Pressure
    //--------------------------------------------------------------------------------------------------
    bool gt_Conduit1Pressure_Func (bool testConds, bool runActions) {
        // Variable Declarations
        string[10] lv_unitArray;
        // Automatic Variable Declarations
        int autoB6444565_n;
        int autoB6444565_i;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[gv_randomActiveConduits[0]], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) < 8))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        lv_unitArray[1] = "Zergling";
        lv_unitArray[2] = "Scourge";
        lv_unitArray[3] = "Mutalisk";
        lv_unitArray[4] = "Roach";
        lv_unitArray[5] = "InfestedAbomination";
        lv_unitArray[6] = "Hydralisk";
        lv_unitArray[7] = "Baneling";
        lv_unitArray[8] = "Ravager";
        lv_unitArray[9] = "Corruptor";
        autoB6444565_n = gv_stageID;
        for (autoB6444565_i = 1; autoB6444565_i <= autoB6444565_n; autoB6444565_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitArray[RandomInt(1, libLotv_gf_DifficultyValueInt2(2, 4, 6, 9))], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[RandomInt(1, 3)]));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_conduitRegion[gv_randomActiveConduits[0]])), c_orderQueueReplace);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Conduit1Pressure_Init () {
        gt_Conduit1Pressure = TriggerCreate("gt_Conduit1Pressure_Func");
        TriggerEnable(gt_Conduit1Pressure, false);
        TriggerAddEventTimePeriodic(gt_Conduit1Pressure, libLotv_gf_DifficultyValueInt2(24, 18, 12, 6), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit 2 Pressure
    //--------------------------------------------------------------------------------------------------
    bool gt_Conduit2Pressure_Func (bool testConds, bool runActions) {
        // Variable Declarations
        string[10] lv_unitArray;
        // Automatic Variable Declarations
        int autoA2F9C7A5_n;
        int autoA2F9C7A5_i;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[gv_randomActiveConduits[1]], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) < 8))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        lv_unitArray[1] = "Zergling";
        lv_unitArray[2] = "Scourge";
        lv_unitArray[3] = "Mutalisk";
        lv_unitArray[4] = "Roach";
        lv_unitArray[5] = "InfestedAbomination";
        lv_unitArray[6] = "Hydralisk";
        lv_unitArray[7] = "Baneling";
        lv_unitArray[8] = "Ravager";
        lv_unitArray[9] = "Corruptor";
        autoA2F9C7A5_n = gv_stageID;
        for (autoA2F9C7A5_i = 1; autoA2F9C7A5_i <= autoA2F9C7A5_n; autoA2F9C7A5_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitArray[RandomInt(1, libLotv_gf_DifficultyValueInt2(2, 4, 6, 9))], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[RandomInt(1, 3)]));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_conduitRegion[gv_randomActiveConduits[1]])), c_orderQueueReplace);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Conduit2Pressure_Init () {
        gt_Conduit2Pressure = TriggerCreate("gt_Conduit2Pressure_Func");
        TriggerEnable(gt_Conduit2Pressure, false);
        TriggerAddEventTimePeriodic(gt_Conduit2Pressure, libLotv_gf_DifficultyValueInt2(24, 18, 12, 6), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit 3 Pressure
    //--------------------------------------------------------------------------------------------------
    bool gt_Conduit3Pressure_Func (bool testConds, bool runActions) {
        // Variable Declarations
        string[10] lv_unitArray;
        // Automatic Variable Declarations
        int auto895B4055_n;
        int auto895B4055_i;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[gv_randomActiveConduits[2]], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) < 8))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        lv_unitArray[1] = "Zergling";
        lv_unitArray[2] = "Scourge";
        lv_unitArray[3] = "Mutalisk";
        lv_unitArray[4] = "Roach";
        lv_unitArray[5] = "InfestedAbomination";
        lv_unitArray[6] = "Hydralisk";
        lv_unitArray[7] = "Baneling";
        lv_unitArray[8] = "Ravager";
        lv_unitArray[9] = "Corruptor";
        auto895B4055_n = gv_stageID;
        for (auto895B4055_i = 1; auto895B4055_i <= auto895B4055_n; auto895B4055_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitArray[RandomInt(1, libLotv_gf_DifficultyValueInt2(2, 4, 6, 9))], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[RandomInt(1, 3)]));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_conduitRegion[gv_randomActiveConduits[2]])), c_orderQueueReplace);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Conduit3Pressure_Init () {
        gt_Conduit3Pressure = TriggerCreate("gt_Conduit3Pressure_Func");
        TriggerEnable(gt_Conduit3Pressure, false);
        TriggerAddEventTimePeriodic(gt_Conduit3Pressure, libLotv_gf_DifficultyValueInt2(24, 18, 12, 6), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Conduit 4 Pressure
    //--------------------------------------------------------------------------------------------------
    bool gt_Conduit4Pressure_Func (bool testConds, bool runActions) {
        // Variable Declarations
        string[10] lv_unitArray;
        // Automatic Variable Declarations
        int autoAA04252C_n;
        int autoAA04252C_i;
        // Variable Initialization
        // Conditions
        if (testConds) {
            if (!((UnitCountAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, gv_conduitRegion[gv_randomActiveConduits[3]], UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0) < 8))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        lv_unitArray[1] = "Zergling";
        lv_unitArray[2] = "Scourge";
        lv_unitArray[3] = "Mutalisk";
        lv_unitArray[4] = "Roach";
        lv_unitArray[5] = "InfestedAbomination";
        lv_unitArray[6] = "Hydralisk";
        lv_unitArray[7] = "Baneling";
        lv_unitArray[8] = "Ravager";
        lv_unitArray[9] = "Corruptor";
        autoAA04252C_n = gv_stageID;
        for (autoAA04252C_i = 1; autoAA04252C_i <= autoAA04252C_n; autoAA04252C_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitArray[RandomInt(1, libLotv_gf_DifficultyValueInt2(2, 4, 6, 9))], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[RandomInt(1, 3)]));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_conduitRegion[gv_randomActiveConduits[3]])), c_orderQueueReplace);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_Conduit4Pressure_Init () {
        gt_Conduit4Pressure = TriggerCreate("gt_Conduit4Pressure_Func");
        TriggerEnable(gt_Conduit4Pressure, false);
        TriggerAddEventTimePeriodic(gt_Conduit4Pressure, libLotv_gf_DifficultyValueInt2(24, 18, 12, 6), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Create Attack Wave
    //--------------------------------------------------------------------------------------------------
    bool gt_CreateAttackWave_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_randomSpawnPoint;
        string[16] lv_enemyArray;
        int lv_randomConstantEnemy;
        string[5] lv_constantEnemyArray;
        string[5] lv_bossWaveEnemyArray;
        string[7] lv_hybridUnits;
        int lv_uniqueTier;
        int lv_iterator;
        int lv_largeWaveMultiplier;
        // Automatic Variable Declarations
        int autoE52D05DD_ae;
        const int autoE52D05DD_ai = 1;
        int auto21C6AC6F_ae;
        const int auto21C6AC6F_ai = 1;
        int auto0B031C05_n;
        int auto0B031C05_i;
        int auto4386D5CA_n;
        int auto4386D5CA_i;
        int auto1BE4ACDA_n;
        int auto1BE4ACDA_i;
        int autoE775B8D7_n;
        int autoE775B8D7_i;
        int auto8364E8E8_val;
        int auto2F4B3777_n;
        int auto2F4B3777_i;
        int autoEA897E8A_n;
        int autoEA897E8A_i;
        int autoC71D8CB6_n;
        int autoC71D8CB6_i;
        int auto4F1F1CF2_n;
        int auto4F1F1CF2_i;
        int auto11FDD449_n;
        int auto11FDD449_i;
        int auto1051C055_n;
        int auto1051C055_i;
        int autoDB2CE205_n;
        int autoDB2CE205_i;
        int autoA970F387_n;
        int autoA970F387_i;
        unitgroup auto5C0A69D6_g;
        int auto5C0A69D6_u;
        unit auto5C0A69D6_var;
        unitgroup autoFC08C9CF_g;
        int autoFC08C9CF_u;
        unit autoFC08C9CF_var;
        // Variable Initialization
        lv_largeWaveMultiplier = 1;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_enemyArray[1] = "Baneling";
        lv_enemyArray[2] = "Mutalisk";
        lv_enemyArray[3] = "Hydralisk";
        lv_enemyArray[4] = "Roach";
        lv_enemyArray[5] = "InfestedAbomination";
        lv_enemyArray[6] = "Ravager";
        lv_enemyArray[7] = "Corruptor";
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
            lv_enemyArray[8] = "SwarmHostMP";
        }
        else {
            lv_enemyArray[8] = "Roach";
        }
        lv_enemyArray[9] = "Infestor";
        lv_enemyArray[10] = "Guardian";
        lv_enemyArray[11] = "QueenClassic";
        lv_enemyArray[12] = "Ultralisk";
        lv_enemyArray[13] = "BroodLord";
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
            lv_enemyArray[14] = "Lurker";
        }
        else {
            lv_enemyArray[14] = "Ravager";
        }
        lv_enemyArray[15] = "Viper";
        lv_constantEnemyArray[1] = "Roach";
        lv_constantEnemyArray[2] = "Hydralisk";
        lv_constantEnemyArray[3] = "Mutalisk";
        lv_bossWaveEnemyArray[1] = "BroodLord";
        lv_bossWaveEnemyArray[2] = "Viper";
        lv_bossWaveEnemyArray[3] = "Ultralisk";
        lv_bossWaveEnemyArray[4] = "Lurker";
        lv_hybridUnits[1] = "HybridReaver";
        lv_hybridUnits[2] = "HybridNemesis";
        lv_hybridUnits[3] = "HybridDestroyer";
        lv_hybridUnits[4] = "HybridDominatorVoid";
        lv_hybridUnits[5] = "HybridBehemoth";
        lv_hybridUnits[6] = "Hybrid";
        if ((gv_stageID >= 5)) {
            lv_uniqueTier = 15;
        }
        else {
            autoE52D05DD_ae = gv_stageID;
            lv_iterator = 1;
            for ( ; ( (autoE52D05DD_ai >= 0 && lv_iterator <= autoE52D05DD_ae) || (autoE52D05DD_ai < 0 && lv_iterator >= autoE52D05DD_ae) ) ; lv_iterator += autoE52D05DD_ai ) {
                lv_uniqueTier += 3;
            }
        }
        if ((gv_attackWaveLarge == true) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
            lv_largeWaveMultiplier = 2;
        }
        else {
            lv_largeWaveMultiplier = 1;
        }
        auto21C6AC6F_ae = (gv_attackWaveCount - 1);
        lv_iterator = 0;
        for ( ; ( (auto21C6AC6F_ai >= 0 && lv_iterator <= auto21C6AC6F_ae) || (auto21C6AC6F_ai < 0 && lv_iterator >= auto21C6AC6F_ae) ) ; lv_iterator += auto21C6AC6F_ai ) {
            lv_randomSpawnPoint = RandomInt(1, 3);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
            UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
            if ((gv_attackWaveLarge == true) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
                lv_randomConstantEnemy = RandomInt(1, 4);
                auto0B031C05_n = libLotv_gf_DifficultyValueInt2(0, 0, 3, 4);
                for (auto0B031C05_i = 1; auto0B031C05_i <= auto0B031C05_n; auto0B031C05_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_bossWaveEnemyArray[lv_randomConstantEnemy], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                }
            }
            else if ((gv_attackWaveLarge == true) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 3) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 3) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 4)) {
                auto4386D5CA_n = libLotv_gf_DifficultyValueInt2(1, 2, 0, 0);
                for (auto4386D5CA_i = 1; auto4386D5CA_i <= auto4386D5CA_n; auto4386D5CA_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_bossWaveEnemyArray[RandomInt(1, 3)], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                }
            }
            lv_randomConstantEnemy = RandomInt(1, 3);
            if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 4)) {
                auto1BE4ACDA_n = (gv_stageID * 2);
                for (auto1BE4ACDA_i = 1; auto1BE4ACDA_i <= auto1BE4ACDA_n; auto1BE4ACDA_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_constantEnemyArray[lv_randomConstantEnemy], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                }
            }
            else if ((((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 3) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 3)) || ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 2)))) {
                autoE775B8D7_n = gv_stageID;
                for (autoE775B8D7_i = 1; autoE775B8D7_i <= autoE775B8D7_n; autoE775B8D7_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_constantEnemyArray[lv_randomConstantEnemy], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                }
            }
            if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1)) {
                auto8364E8E8_val = gv_stageID;
                if (auto8364E8E8_val == 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                }
                else if (auto8364E8E8_val == 5) {
                    autoEA897E8A_n = libNtve_gf_DifficultyValueInt(0, 0, 1, 2);
                    for (autoEA897E8A_i = 1; autoEA897E8A_i <= autoEA897E8A_n; autoEA897E8A_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_hybridUnits[RandomInt(3, 4)], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                        UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                    }
                }
                else if (auto8364E8E8_val == 6) {
                    autoC71D8CB6_n = libLotv_gf_DifficultyValueInt2(0, 1, 2, 3);
                    for (autoC71D8CB6_i = 1; autoC71D8CB6_i <= autoC71D8CB6_n; autoC71D8CB6_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_hybridUnits[RandomInt(4, 6)], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                        UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                    }
                }
                else if (auto8364E8E8_val == 7) {
                    auto4F1F1CF2_n = libLotv_gf_DifficultyValueInt2(0, 1, 2, 3);
                    for (auto4F1F1CF2_i = 1; auto4F1F1CF2_i <= auto4F1F1CF2_n; auto4F1F1CF2_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_hybridUnits[RandomInt(3, 6)], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                        UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                    }
                }
                else if (auto8364E8E8_val == 8) {
                    auto11FDD449_n = libLotv_gf_DifficultyValueInt2(0, 1, 3, 3);
                    for (auto11FDD449_i = 1; auto11FDD449_i <= auto11FDD449_n; auto11FDD449_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_hybridUnits[RandomInt(2, 6)], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                        UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                    }
                }
                else {
                    auto2F4B3777_n = libLotv_gf_DifficultyValueInt2(0, 0, 0, 1);
                    for (auto2F4B3777_i = 1; auto2F4B3777_i <= auto2F4B3777_n; auto2F4B3777_i += 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_hybridUnits[RandomInt(1, 2)], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                        UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                    }
                }
            }
            auto1051C055_n = gv_stageID;
            for (auto1051C055_i = 1; auto1051C055_i <= auto1051C055_n; auto1051C055_i += 1) {
                autoDB2CE205_n = libLotv_gf_DifficultyValueInt2(1, 1, 2, 3);
                for (autoDB2CE205_i = 1; autoDB2CE205_i <= autoDB2CE205_n; autoDB2CE205_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scourge", 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                }
                autoA970F387_n = lv_largeWaveMultiplier;
                for (autoA970F387_i = 1; autoA970F387_i <= autoA970F387_n; autoA970F387_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_enemyArray[RandomInt(1, lv_uniqueTier)], 0, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY), RegionRandomPoint(gv_attackSpawn[lv_randomSpawnPoint]));
                    UnitGroupAdd(gv_conduitAttackGroup[lv_iterator], UnitLastCreated());
                }
            }
            if (((gv_voidEmitterConduitsPrimed == 1))) {
                autoFC08C9CF_g = gv_conduitAttackGroup[lv_iterator];
                autoFC08C9CF_u = UnitGroupCount(autoFC08C9CF_g, c_unitCountAll);
                for (;; autoFC08C9CF_u -= 1) {
                    autoFC08C9CF_var = UnitGroupUnitFromEnd(autoFC08C9CF_g, autoFC08C9CF_u);
                    if (autoFC08C9CF_var == null) { break; }
                    UnitIssueOrder(autoFC08C9CF_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_conduitRegion[gv_randomActiveConduits[0]])), c_orderQueueReplace);
                    UnitSetPropertyFixed(autoFC08C9CF_var, c_unitPropMovementSpeed, 3.0);
                }
            }
            else {
                auto5C0A69D6_g = gv_conduitAttackGroup[lv_iterator];
                auto5C0A69D6_u = UnitGroupCount(auto5C0A69D6_g, c_unitCountAll);
                for (;; auto5C0A69D6_u -= 1) {
                    auto5C0A69D6_var = UnitGroupUnitFromEnd(auto5C0A69D6_g, auto5C0A69D6_u);
                    if (auto5C0A69D6_var == null) { break; }
                    UnitIssueOrder(auto5C0A69D6_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_conduitRegion[gv_randomActiveConduits[lv_iterator]])), c_orderQueueReplace);
                    UnitSetPropertyFixed(auto5C0A69D6_var, c_unitPropMovementSpeed, 3.0);
                }
            }
            if ((gv_attackWaveLarge == false)) {
                SoundPlayForPlayer(SoundLink("UI_Void_ButtonClickHigh1", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingTriangle", UnitGroupCenterOfGroup(gv_conduitAttackGroup[lv_iterator]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                PingSetScale(PingLastCreated(), 0.5);
            }
            else {
                SoundPlayForPlayer(SoundLink("HybridZerg_DistantRoar", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
                libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGroupCenterOfGroup(gv_conduitAttackGroup[lv_iterator]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                PingSetScale(PingLastCreated(), 0.7);
            }
            gv_attackGroupPing[lv_iterator] = PingLastCreated();
            TriggerExecute(gv_attackGroupPingTrigger[lv_iterator], true, false);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_CreateAttackWave_Init () {
        gt_CreateAttackWave = TriggerCreate("gt_CreateAttackWave_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave Intercept
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWaveIntercept_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(16)) == false))) {
                return false;
            }
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
            if (!(((UnitGroupHasUnit(gv_conduitAttackGroup[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_conduitAttackGroup[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_conduitAttackGroup[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_conduitAttackGroup[3], EventUnit()) == true)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        if ((UnitGroupHasUnit(gv_conduitAttackGroup[0], EventUnit()) == true)) {
            UnitGroupRemove(gv_conduitAttackGroup[0], EventUnit());
        }
        else if ((UnitGroupHasUnit(gv_conduitAttackGroup[1], EventUnit()) == true)) {
            UnitGroupRemove(gv_conduitAttackGroup[1], EventUnit());
        }
        else if ((UnitGroupHasUnit(gv_conduitAttackGroup[2], EventUnit()) == true)) {
            UnitGroupRemove(gv_conduitAttackGroup[2], EventUnit());
        }
        else if ((UnitGroupHasUnit(gv_conduitAttackGroup[3], EventUnit()) == true)) {
            UnitGroupRemove(gv_conduitAttackGroup[3], EventUnit());
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWaveIntercept_Init () {
        gt_AttackWaveIntercept = TriggerCreate("gt_AttackWaveIntercept_Func");
        TriggerAddEventUnitAcquiredTarget(gt_AttackWaveIntercept, null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Ping Manager 1
    //--------------------------------------------------------------------------------------------------
    bool gt_PingManager1_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_pingID;
        // Automatic Variable Declarations
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        while ((libNtve_gf_UnitGroupIsDead(gv_conduitAttackGroup[lv_pingID]) == false)) {
            PingSetPosition(gv_attackGroupPing[lv_pingID], UnitGroupCenterOfGroup(gv_conduitAttackGroup[lv_pingID]));
            Wait(0.2, c_timeGame);
        }
        PingDestroy(gv_attackGroupPing[lv_pingID]);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_PingManager1_Init () {
        gt_PingManager1 = TriggerCreate("gt_PingManager1_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Ping Manager 2
    //--------------------------------------------------------------------------------------------------
    bool gt_PingManager2_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_pingID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_pingID = 1;
        // Actions
        if (!runActions) {
            return true;
        }
        while ((libNtve_gf_UnitGroupIsDead(gv_conduitAttackGroup[lv_pingID]) == false)) {
            PingSetPosition(gv_attackGroupPing[lv_pingID], UnitGroupCenterOfGroup(gv_conduitAttackGroup[lv_pingID]));
            Wait(0.2, c_timeGame);
        }
        PingDestroy(gv_attackGroupPing[lv_pingID]);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_PingManager2_Init () {
        gt_PingManager2 = TriggerCreate("gt_PingManager2_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Ping Manager 3
    //--------------------------------------------------------------------------------------------------
    bool gt_PingManager3_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_pingID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_pingID = 2;
        // Actions
        if (!runActions) {
            return true;
        }
        while ((libNtve_gf_UnitGroupIsDead(gv_conduitAttackGroup[lv_pingID]) == false)) {
            PingSetPosition(gv_attackGroupPing[lv_pingID], UnitGroupCenterOfGroup(gv_conduitAttackGroup[lv_pingID]));
            Wait(0.2, c_timeGame);
        }
        PingDestroy(gv_attackGroupPing[lv_pingID]);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_PingManager3_Init () {
        gt_PingManager3 = TriggerCreate("gt_PingManager3_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Ping Manager 4
    //--------------------------------------------------------------------------------------------------
    bool gt_PingManager4_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_pingID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_pingID = 3;
        // Actions
        if (!runActions) {
            return true;
        }
        while ((libNtve_gf_UnitGroupIsDead(gv_conduitAttackGroup[lv_pingID]) == false)) {
            PingSetPosition(gv_attackGroupPing[lv_pingID], UnitGroupCenterOfGroup(gv_conduitAttackGroup[lv_pingID]));
            Wait(0.2, c_timeGame);
        }
        PingDestroy(gv_attackGroupPing[lv_pingID]);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_PingManager4_Init () {
        gt_PingManager4 = TriggerCreate("gt_PingManager4_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Ping Manager 5
    //--------------------------------------------------------------------------------------------------
    bool gt_PingManager5_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_pingID;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_pingID = 4;
        // Actions
        if (!runActions) {
            return true;
        }
        while ((libNtve_gf_UnitGroupIsDead(gv_conduitAttackGroup[lv_pingID]) == false)) {
            PingSetPosition(gv_attackGroupPing[lv_pingID], UnitGroupCenterOfGroup(gv_conduitAttackGroup[lv_pingID]));
            Wait(0.2, c_timeGame);
        }
        PingDestroy(gv_attackGroupPing[lv_pingID]);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_PingManager5_Init () {
        gt_PingManager5 = TriggerCreate("gt_PingManager5_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Reset Movement Speed
    //--------------------------------------------------------------------------------------------------
    bool gt_ResetMovementSpeed_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        unitgroup autoBC4283AC_g;
        int autoBC4283AC_u;
        unit autoBC4283AC_var;
        unitgroup autoBD34617A_g;
        int autoBD34617A_u;
        unit autoBD34617A_var;
        unitgroup auto054DC244_g;
        int auto054DC244_u;
        unit auto054DC244_var;
        unitgroup autoFDB8D2DE_g;
        int autoFDB8D2DE_u;
        unit autoFDB8D2DE_var;
        // Conditions
        if (testConds) {
            if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_03_ENEMY) || (UnitGetOwner(EventUnit()) == gv_pLAYER_04_ENEMY)))) {
                return false;
            }
            if (!(((UnitGroupHasUnit(gv_conduitAttackGroup[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_conduitAttackGroup[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_conduitAttackGroup[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_conduitAttackGroup[3], EventUnit()) == true)))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        if ((UnitGroupHasUnit(gv_conduitAttackGroup[0], EventUnit()) == true)) {
            autoBC4283AC_g = gv_conduitAttackGroup[0];
            autoBC4283AC_u = UnitGroupCount(autoBC4283AC_g, c_unitCountAll);
            for (;; autoBC4283AC_u -= 1) {
                autoBC4283AC_var = UnitGroupUnitFromEnd(autoBC4283AC_g, autoBC4283AC_u);
                if (autoBC4283AC_var == null) { break; }
                UnitResetSpeed(autoBC4283AC_var);
            }
        }
        else if ((UnitGroupHasUnit(gv_conduitAttackGroup[1], EventUnit()) == true)) {
            autoBD34617A_g = gv_conduitAttackGroup[1];
            autoBD34617A_u = UnitGroupCount(autoBD34617A_g, c_unitCountAll);
            for (;; autoBD34617A_u -= 1) {
                autoBD34617A_var = UnitGroupUnitFromEnd(autoBD34617A_g, autoBD34617A_u);
                if (autoBD34617A_var == null) { break; }
                UnitResetSpeed(autoBD34617A_var);
            }
        }
        else if ((UnitGroupHasUnit(gv_conduitAttackGroup[2], EventUnit()) == true)) {
            auto054DC244_g = gv_conduitAttackGroup[2];
            auto054DC244_u = UnitGroupCount(auto054DC244_g, c_unitCountAll);
            for (;; auto054DC244_u -= 1) {
                auto054DC244_var = UnitGroupUnitFromEnd(auto054DC244_g, auto054DC244_u);
                if (auto054DC244_var == null) { break; }
                UnitResetSpeed(auto054DC244_var);
            }
        }
        else if ((UnitGroupHasUnit(gv_conduitAttackGroup[3], EventUnit()) == true)) {
            autoFDB8D2DE_g = gv_conduitAttackGroup[3];
            autoFDB8D2DE_u = UnitGroupCount(autoFDB8D2DE_g, c_unitCountAll);
            for (;; autoFDB8D2DE_u -= 1) {
                autoFDB8D2DE_var = UnitGroupUnitFromEnd(autoFDB8D2DE_g, autoFDB8D2DE_u);
                if (autoFDB8D2DE_var == null) { break; }
                UnitResetSpeed(autoFDB8D2DE_var);
            }
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_ResetMovementSpeed_Init () {
        gt_ResetMovementSpeed = TriggerCreate("gt_ResetMovementSpeed_Func");
        TriggerAddEventUnitAcquiredTarget(gt_ResetMovementSpeed, null);
        TriggerAddEventUnitAttacked2(gt_ResetMovementSpeed, null, null);
        TriggerAddEventUnitStartedAttack2(gt_ResetMovementSpeed, null, null);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Setup Attack Wave Spawn
    //--------------------------------------------------------------------------------------------------
    bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_spawnLocationIter;
        // Automatic Variable Declarations
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        lv_spawnLocationIter = 1;
        gv_attackSpawn[lv_spawnLocationIter] = RegionFromId(10);
        lv_spawnLocationIter += 1;
        gv_attackSpawn[lv_spawnLocationIter] = RegionFromId(11);
        lv_spawnLocationIter += 1;
        gv_attackSpawn[lv_spawnLocationIter] = RegionFromId(13);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_SetupAttackWaveSpawn_Init () {
        gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: AI Attack Waves
    //--------------------------------------------------------------------------------------------------
    bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Actions
        if (!runActions) {
            return true;
        }
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 1)) {
            gf_RunAttackWaveatMissionTime(gt_AttackWave01, (17.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave01, (28.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave01, (34.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave01, (40.0 * 60.0));
        }
        else if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) == 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) == 2)) {
            gf_RunAttackWaveatMissionTime(gt_AttackWave01, (11.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave02, (17.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave02, (22.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave03, (28.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave03, (34.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave03, (40.0 * 60.0));
        }
        else if ((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2) && (libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2)) {
            gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.5 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave04, (11.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave05, (14.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave06, (17.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (20.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (25.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (28.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (31.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (34.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (37.0 * 60.0));
            gf_RunAttackWaveatMissionTime(gt_AttackWave07, (40.0 * 60.0));
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AIAttackWaves_Init () {
        gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave 01
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave01_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_resourceBucket;
        int lv_techBucket;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1654942427));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1013480451));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave01_Init () {
        gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave 02
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave02_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_resourceBucket;
        int lv_techBucket;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1654942427));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1013480451));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave02_Init () {
        gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave 03
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave03_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_resourceBucket;
        int lv_techBucket;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1654942427));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1013480451));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave03_Init () {
        gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave 04
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave04_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_resourceBucket;
        int lv_techBucket;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1654942427));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1013480451));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave04_Init () {
        gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave 05
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave05_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_resourceBucket;
        int lv_techBucket;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1654942427));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1013480451));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave05_Init () {
        gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave 06
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave06_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_resourceBucket;
        int lv_techBucket;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1654942427));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1013480451));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave06_Init () {
        gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Attack Wave 07
    //--------------------------------------------------------------------------------------------------
    bool gt_AttackWave07_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_resourceBucket;
        int lv_techBucket;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        // Actions
        if (!runActions) {
            return true;
        }
        lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
        lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1654942427));
        AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(1013480451));
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_AttackWave07_Init () {
        gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterFracture - Update
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterFractureUpdate_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Actions
        if (!runActions) {
            return true;
        }
        if ((gv_voidEmitterFractures > gv_maximumVoidEmitterFractures)) {
            gv_voidEmitterFractures = gv_maximumVoidEmitterFractures;
            TriggerExecute(gt_VoidEmitterFractureCreate, true, false);
            libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_voidEmitterFractures);
            TextExpressionSetToken("Param/Expression/FA864AF5", "VoidEmitterFractures", IntToText(gv_voidEmitterFractures));
            TextExpressionSetToken("Param/Expression/FA864AF5", "MaximumVoidEmitterFractures", IntToText(gv_maximumVoidEmitterFractures));
            ObjectiveSetName(gv_objectiveVoidEmitterFracture, TextExpressionAssemble("Param/Expression/FA864AF5"));
        }
        else {
            TriggerExecute(gt_VoidEmitterFractureCreate, true, false);
            libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_voidEmitterFractures);
            TextExpressionSetToken("Param/Expression/9526AAE7", "VoidEmitterFractures", IntToText(gv_voidEmitterFractures));
            TextExpressionSetToken("Param/Expression/9526AAE7", "MaximumVoidEmitterFractures", IntToText(gv_maximumVoidEmitterFractures));
            ObjectiveSetName(gv_objectiveVoidEmitterFracture, TextExpressionAssemble("Param/Expression/9526AAE7"));
        }
        TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterFractureUpdate_Init () {
        gt_VoidEmitterFractureUpdate = TriggerCreate("gt_VoidEmitterFractureUpdate_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterFracture - Complete
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterFractureComplete_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VoidEmitterFractureCreate, true, false);
        ObjectiveSetState(gv_objectiveVoidEmitterFracture, c_objectiveStateCompleted);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterFractureComplete_Init () {
        gt_VoidEmitterFractureComplete = TriggerCreate("gt_VoidEmitterFractureComplete_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterFracture - Failed
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterFractureFailed_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerExecute(gt_VoidEmitterFractureCreate, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
        ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateFailed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeGame);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterFractureFailed_Init () {
        gt_VoidEmitterFractureFailed = TriggerCreate("gt_VoidEmitterFractureFailed_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterFracture - Create
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterFractureCreate_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        ObjectiveCreate(StringExternal("Param/Value/B0A5902A"), StringExternal("Param/Value/11A7632F"), c_objectiveStateActive, true);
        ObjectiveSetPriority(ObjectiveLastCreated(), 10);
        gv_objectiveVoidEmitterFracture = ObjectiveLastCreated();
        TriggerExecute(gt_VoidEmitterFractureUpdate, true, false);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterFractureCreate_Init () {
        gt_VoidEmitterFractureCreate = TriggerCreate("gt_VoidEmitterFractureCreate_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterSpearOfAdun - Update
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterSpearOfAdunUpdate_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_decimal;
        int lv_wholeNum;
        // Automatic Variable Declarations
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        if ((gv_voidEmitterHitsSpearOfAdun < 0)) {
            gv_voidEmitterHitsSpearOfAdun = 0;
            TriggerExecute(gt_VoidEmitterSpearOfAdunCreate, true, false);
            libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_voidEmitterHitsSpearOfAdun);
            TextExpressionSetToken("Param/Expression/1292F59F", "VoidEmitterHitsSpearOfAdun", IntToText(gv_voidEmitterHitsSpearOfAdun));
            ObjectiveSetName(gv_objectiveVoidEmitterSpearOfAdun, TextExpressionAssemble("Param/Expression/1292F59F"));
        }
        else {
            TriggerExecute(gt_VoidEmitterSpearOfAdunCreate, true, false);
            libCOMI_gf_SetMissionObjectiveProgress("PlaceholderPrimary", gv_voidEmitterHitsSpearOfAdun);
            TextExpressionSetToken("Param/Expression/611B4EC6", "VoidEmitterHitsSpearOfAdun", IntToText(gv_voidEmitterHitsSpearOfAdun));
            ObjectiveSetName(gv_objectiveVoidEmitterSpearOfAdun, TextExpressionAssemble("Param/Expression/611B4EC6"));
        }
        TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterSpearOfAdunUpdate_Init () {
        gt_VoidEmitterSpearOfAdunUpdate = TriggerCreate("gt_VoidEmitterSpearOfAdunUpdate_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterSpearOfAdun - Failed
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterSpearOfAdunFailed_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VoidEmitterSpearOfAdunCreate, true, false);
        ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateFailed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterSpearOfAdunFailed_Init () {
        gt_VoidEmitterSpearOfAdunFailed = TriggerCreate("gt_VoidEmitterSpearOfAdunFailed_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterSpearOfAdun - Complete
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterSpearOfAdunComplete_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_VoidEmitterSpearOfAdunCreate, true, false);
        ObjectiveSetState(gv_objectiveVoidEmitterSpearOfAdun, c_objectiveStateCompleted);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterSpearOfAdunComplete_Init () {
        gt_VoidEmitterSpearOfAdunComplete = TriggerCreate("gt_VoidEmitterSpearOfAdunComplete_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: VoidEmitterSpearOfAdun - Create
    //--------------------------------------------------------------------------------------------------
    bool gt_VoidEmitterSpearOfAdunCreate_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        ObjectiveCreate(StringExternal("Param/Value/16955B78"), StringExternal("Param/Value/7946906E"), c_objectiveStateActive, true);
        ObjectiveSetPriority(ObjectiveLastCreated(), 9);
        gv_objectiveVoidEmitterSpearOfAdun = ObjectiveLastCreated();
        TriggerExecute(gt_VoidEmitterSpearOfAdunUpdate, true, false);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_VoidEmitterSpearOfAdunCreate_Init () {
        gt_VoidEmitterSpearOfAdunCreate = TriggerCreate("gt_VoidEmitterSpearOfAdunCreate_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: DefenseMatrix - Failed
    //--------------------------------------------------------------------------------------------------
    bool gt_DefenseMatrixFailed_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_DefenseMatrixCreate, true, false);
        ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateFailed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_DefenseMatrixFailed_Init () {
        gt_DefenseMatrixFailed = TriggerCreate("gt_DefenseMatrixFailed_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: DefenseMatrix - Complete
    //--------------------------------------------------------------------------------------------------
    bool gt_DefenseMatrixComplete_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_DefenseMatrixCreate, true, false);
        ObjectiveSetState(gv_objectiveDefenseMatrix, c_objectiveStateCompleted);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_DefenseMatrixComplete_Init () {
        gt_DefenseMatrixComplete = TriggerCreate("gt_DefenseMatrixComplete_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: DefenseMatrix - Create
    //--------------------------------------------------------------------------------------------------
    bool gt_DefenseMatrixCreate_Func (bool testConds, bool runActions) {
        // Variable Declarations
        timer lv_timer;
        // Automatic Variable Declarations
        // Variable Initialization
        lv_timer = TimerCreate();
        // Conditions
        if (testConds) {
            if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        ObjectiveCreate(StringExternal("Param/Value/655DF376"), StringExternal("Param/Value/3A83AA81"), c_objectiveStateActive, false);
        ObjectiveSetPriority(ObjectiveLastCreated(), 8);
        gv_objectiveDefenseMatrix = ObjectiveLastCreated();
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_DefenseMatrixCreate_Init () {
        gt_DefenseMatrixCreate = TriggerCreate("gt_DefenseMatrixCreate_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Orbital Debris From Hit
    //--------------------------------------------------------------------------------------------------
    bool gt_OrbitalDebrisFromHit_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        const int auto0666E6C7_n = 10;
        int auto0666E6C7_i;
        const int auto41724D72_n = 10;
        int auto41724D72_i;
        // Actions
        if (!runActions) {
            return true;
        }
        gv_hitCountForDebris += 1;
        TriggerEnable(gt_OrbitalDebrisPersistent, true);
        Wait(2.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("PAiur01_MothershipExplosion2", -1), c_maxPlayers, PlayerGroupAll(), 125.0, 0.0);
        Wait(2.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("PAiur03_SpearLaunch", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
        SoundPlayForPlayer(SoundLink("Nova_ColonistShip_RocketRumble_Event", -1), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
        for (auto0666E6C7_i = 1; auto0666E6C7_i <= auto0666E6C7_n; auto0666E6C7_i += 1) {
            for (auto41724D72_i = 1; auto41724D72_i <= auto41724D72_n; auto41724D72_i += 1) {
                libNtve_gf_CreateActorAtPoint("Aiur_CrashingDebris", RegionRandomPoint(RegionFromId(9)));
            }
            Wait(0.2, c_timeGame);
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_OrbitalDebrisFromHit_Init () {
        gt_OrbitalDebrisFromHit = TriggerCreate("gt_OrbitalDebrisFromHit_Func");
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Orbital Debris Persistent
    //--------------------------------------------------------------------------------------------------
    bool gt_OrbitalDebrisPersistent_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_randomVolume;
        // Automatic Variable Declarations
        int auto21229FF0_n;
        int auto21229FF0_i;
        int autoBA9B6D08_n;
        int autoBA9B6D08_i;
        // Variable Initialization
        // Actions
        if (!runActions) {
            return true;
        }
        auto21229FF0_n = RandomInt(1, gv_hitCountForDebris);
        for (auto21229FF0_i = 1; auto21229FF0_i <= auto21229FF0_n; auto21229FF0_i += 1) {
            SoundPlayForPlayer(SoundLink("Explosion_Distant_BG", -1), c_maxPlayers, PlayerGroupAll(), lv_randomVolume, 0.0);
            autoBA9B6D08_n = RandomInt(1, gv_hitCountForDebris);
            for (autoBA9B6D08_i = 1; autoBA9B6D08_i <= autoBA9B6D08_n; autoBA9B6D08_i += 1) {
                libNtve_gf_CreateActorAtPoint("Aiur_CrashingDebris", RegionRandomPoint(RegionFromId(9)));
                lv_randomVolume = RandomInt(3, 10);
                Wait(RandomInt(1, 3), c_timeGame);
            }
        }
        return true;
    }
    //--------------------------------------------------------------------------------------------------
    void gt_OrbitalDebrisPersistent_Init () {
        gt_OrbitalDebrisPersistent = TriggerCreate("gt_OrbitalDebrisPersistent_Func");
        TriggerEnable(gt_OrbitalDebrisPersistent, false);
        TriggerAddEventTimePeriodic(gt_OrbitalDebrisPersistent, RandomInt(3, 5), c_timeReal);
    }
    //--------------------------------------------------------------------------------------------------
    // Trigger Initialization
    //--------------------------------------------------------------------------------------------------
    void InitTriggers () {
        gt_Init01LoadData_Init();
        gt_Init03LoadingComplete_Init();
        gt_Init04Technology_Init();
        gt_Init05Units_Init();
        gt_Init06MusicSound_Init();
        gt_Init07Environment_Init();
        gt_Init08Difficulties_Init();
        gt_StartGameQ_Init();
        gt_BileCitadelBombardment_Init();
        gt_BileCitadelMissilePings_Init();
        gt_BileCitadelBanelings_Init();
        gt_BileCitadelAutoAcquire_Init();
        gt_BileCitadelBaseDefense_Init();
        gt_Entering_Init();
        gt_Exiting_Init();
        gt_Periodic_Init();
        gt_NoUnitWarning_Init();
        gt_ContestedEffects_Init();
        gt_Disintegrator1_Init();
        gt_Disintegrator2_Init();
        gt_Disintegrator3_Init();
        gt_Disintegrator4_Init();
        gt_Disintegrator5_Init();
        gt_Disintegrator6_Init();
        gt_Disintegrator7_Init();
        gt_Disintegrator8_Init();
        gt_Disintegrator9_Init();
        gt_Disintegrator10_Init();
        gt_Disintegrator11_Init();
        gt_Disintegrator12_Init();
        gt_Disintegrator13_Init();
        gt_Disintegrator14_Init();
        gt_DefenseMatrixActivate_Init();
        gt_DefenseMatrixInit_Init();
        gt_DefenseMatrixReady_Init();
        gt_MindReaverAbduct_Init();
        gt_MindReaverLongAbduct_Init();
        gt_MindReaverInfestedTerrans_Init();
        gt_GameManager_Init();
        gt_LeviathanMutalisks_Init();
        gt_LurkerSwarmHostBurrow_Init();
        gt_ViperParasiticBomb_Init();
        gt_ViperAbduct_Init();
        gt_ViperDisablingCloud_Init();
        gt_InfestorFungalGrowth_Init();
        gt_ExpansionBarriers_Init();
        gt_EnergyRefresh_Init();
        gt_Rebuild_Init();
        gt_ConduitSequence_Init();
        gt_ConduitRegionCheck_Init();
        gt_ConduitTextTags_Init();
        gt_ConduitTimer_Init();
        gt_ConduitContested_Init();
        gt_CentralConduitPriming_Init();
        gt_CentralConduitActivating_Init();
        gt_WesternConduitPriming_Init();
        gt_WesternConduitActivating_Init();
        gt_NorthernConduitPriming_Init();
        gt_NorthernConduitActivating_Init();
        gt_SouthwesternConduitPriming_Init();
        gt_SouthwesternConduitActivating_Init();
        gt_NortheasternConduitPriming_Init();
        gt_NortheasternConduitActivating_Init();
        gt_SouthernConduitPriming_Init();
        gt_SouthernConduitActivating_Init();
        gt_EasternConduitPriming_Init();
        gt_EasternConduitActivating_Init();
        gt_VoidEmitterSequence_Init();
        gt_EnemyAttackingQ_Init();
        gt_PsionicDisruptors_Init();
        gt_HybridDetected_Init();
        gt_CloakedUnits_Init();
        gt_Contesting_Init();
        gt_Stage2Start_Init();
        gt_Stage4Start_Init();
        gt_EnteringEnemyBase_Init();
        gt_Stage2Nudge_Init();
        gt_BileCitadelBombard_Init();
        gt_BombardAutoAcquire_Init();
        gt_ConduitBombard_Init();
        gt_FirstFracture_Init();
        gt_FirstHit_Init();
        gt_NearingVictory_Init();
        gt_NearingDefeat_Init();
        gt_BonusObjectiveInit_Init();
        gt_BonusObjectiveComplete_Init();
        gt_AttackWave_Init();
        gt_BossWaveStage4_Init();
        gt_BossWaveStage6_Init();
        gt_DefeatPrimaryObjectiveFailed_Init();
        gt_VictoryPrimaryObjectiveComplete_Init();
        gt_VictorySequence_Init();
        gt_StartAI_Init();
        gt_Conduit1Pressure_Init();
        gt_Conduit2Pressure_Init();
        gt_Conduit3Pressure_Init();
        gt_Conduit4Pressure_Init();
        gt_CreateAttackWave_Init();
        gt_AttackWaveIntercept_Init();
        gt_PingManager1_Init();
        gt_PingManager2_Init();
        gt_PingManager3_Init();
        gt_PingManager4_Init();
        gt_PingManager5_Init();
        gt_ResetMovementSpeed_Init();
        gt_SetupAttackWaveSpawn_Init();
        gt_AIAttackWaves_Init();
        gt_AttackWave01_Init();
        gt_AttackWave02_Init();
        gt_AttackWave03_Init();
        gt_AttackWave04_Init();
        gt_AttackWave05_Init();
        gt_AttackWave06_Init();
        gt_AttackWave07_Init();
        gt_VoidEmitterFractureUpdate_Init();
        gt_VoidEmitterFractureComplete_Init();
        gt_VoidEmitterFractureFailed_Init();
        gt_VoidEmitterFractureCreate_Init();
        gt_VoidEmitterSpearOfAdunUpdate_Init();
        gt_VoidEmitterSpearOfAdunFailed_Init();
        gt_VoidEmitterSpearOfAdunComplete_Init();
        gt_VoidEmitterSpearOfAdunCreate_Init();
        gt_DefenseMatrixFailed_Init();
        gt_DefenseMatrixComplete_Init();
        gt_DefenseMatrixCreate_Init();
        gt_OrbitalDebrisFromHit_Init();
        gt_OrbitalDebrisPersistent_Init();
    }
    //--------------------------------------------------------------------------------------------------
    // Map Initialization
    //--------------------------------------------------------------------------------------------------
    void run () {
        InitLibs();
        InitGlobals();
        InitTriggers();
    }

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
