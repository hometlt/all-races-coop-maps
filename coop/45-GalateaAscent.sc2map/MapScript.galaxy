//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Galatea's Ascent
// 
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Hybrid Wave AI
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"
//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiF917F4D7_defGather;
string[17] aiF917F4D7_customData;
wave[17] aiF917F4D7_lastWave;
//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiF917F4D7_wave1_enabled;
wave[17] aiF917F4D7_wave1_lastWave;
trigger aiF917F4D7_wave1_trigger = null;
int aiF917F4D7_wave1_runPlayer;
playergroup aiF917F4D7_wave1_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_init () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiF917F4D7_wave1_enabled[init_i] = true;
        aiF917F4D7_wave1_lastWave[init_i] = null;
    }
    aiF917F4D7_wave1_trigger = TriggerCreate("aiF917F4D7_wave1_runFunc");
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enabled[p] = val;
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiF917F4D7_wave1_enabled[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_wave1_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave1_runFunc (bool c, bool a) {
    int p = aiF917F4D7_wave1_runPlayer;
    playergroup target = aiF917F4D7_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;


    TriggerDebugOutput(1,  IntToText(p), true);

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiF917F4D7_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }
    aiF917F4D7_customData[p] = "";
    ta = 0;
    if (d == 1) { ta = 3000; }
    if (d == 2) { ta = 3000; }
    if (d == 3) { ta = 3000; }
    if (d == 4) { ta = 3000; }
    if (d == 5) { ta = 3000; }
    if (d == 6) { ta = 3000; }
    tg = 0;
    if (d == 2) { tg = 5; }
    if (d == 3) { tg = 5; }
    if (d == 4) { tg = 5; }
    if (d == 5) { tg = 5; }
    if (d == 6) { tg = 5; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    gatherPoint = aiF917F4D7_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);
    AIAttackWaveClearWaypoints(p);
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave1_run (int p, playergroup target, bool wait) {
    aiF917F4D7_wave1_runPlayer = p;
    aiF917F4D7_wave1_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_wave1_trigger, false, wait);
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiF917F4D7_wave1_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_isEnabled(p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup aiF917F4D7_wave_createdUnits (int w, int p) {
    return null;
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_wave_createdWave (int w, int p) {
    if (w == 1) { return aiF917F4D7_wave1_createdWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiF917F4D7_wave1_run(p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiF917F4D7_waves_trigger = null;
int aiF917F4D7_waves_runPlayer;
playergroup aiF917F4D7_waves_runTarget;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_init () {
    aiF917F4D7_waves_trigger = TriggerCreate("aiF917F4D7_waves_runFunc");
}
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_waves_runFunc (bool c, bool a) {
    int p = aiF917F4D7_waves_runPlayer;
    playergroup target = aiF917F4D7_waves_runTarget;
    if (p < 0 || p >= 16) {
        return false;
    }
    aiF917F4D7_wave1_run(p, target, true);
    while (true) {
        aiF917F4D7_wave1_run(p, target, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_run (int p, playergroup target) {
    aiF917F4D7_waves_runPlayer = p;
    aiF917F4D7_waves_runTarget = PlayerGroupCopy(target);
    TriggerExecute(aiF917F4D7_waves_trigger, false, false);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_wave1_enable(p, val);
}
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_waves_stop () {
    TriggerStop(aiF917F4D7_waves_trigger);
    TriggerStop(aiF917F4D7_wave1_trigger);
}
//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiF917F4D7_defGather[p] = val;
}
//--------------------------------------------------------------------------------------------------
string aiF917F4D7_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_customData[p];
}
//--------------------------------------------------------------------------------------------------
wave aiF917F4D7_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiF917F4D7_lastWave[p];
}
//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiF917F4D7_initialized = false;
//--------------------------------------------------------------------------------------------------
void aiF917F4D7_start (int p) {
    int init_i;
    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiF917F4D7_initialized) {
        aiF917F4D7_wave1_init();
        aiF917F4D7_waves_init();
        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiF917F4D7_defGather[init_i] = PointFromId(423750316);
        }
        aiF917F4D7_initialized = true;
    }
    AICampaignStart(p);
}
//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Galatea's Ascent
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOMI"
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libCOMI_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
int gv_pLAYER_01_USER = 1;
int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_ENEMY = 6;
const int gv_pLAYER_04_ENEMY = 7;
const int gv_pLAYER_05_LOCALS = 8;
const int gv_dockingBaysCooldown = 60;
const int gv_dockingBaysGracePeriod = 150;
const int gv_dockingBaysCooldownFluctuation = 60;
const int gv_dockingBaysWorkersMax = 8;
const int gv_dockingBaysCaptureSpeed = 10;
const int gv_mODE_UNSPECIFIED = 0;
const int gv_mODE_REINFORCEMENTS = 1;
const int gv_mODE_MINERALS = 2;
const int gv_mODE_GAS = 3;
const int gv_dockingBaysRateMinerals = 40;
const int gv_dockingBaysRateGas = 15;
const fixed gv_bONUS_OBJECTIVE_LIFE = 420.0;
const fixed gv_bONUS_OBJECTIVE_SPAWN_START = 900.0;
const fixed gv_bONUS_OBJECTIVE_SPAWN_DEADLINE = 1500.0;
const int gv_bONUS_SPAWN_PROBABILITY = 30;
const int gv_aMON_BASE_ROOT = 0;
const int gv_aMON_BASE_OUTPOST = 1;
const int gv_aMON_BASE_DOCKING_BAY = 2;
//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_DockingBayRecord {
    region lv_revealArea;
    region lv_controlArea;
    point lv_airlockPosition;
    int lv_cooldown;
    int lv_owner;
    int lv_contestedPecent;
    revealer lv_revealer;
    int lv_textTag;
    int lv_workerCount;
    int lv_mode;
    int lv_cutscene;
};
struct gs_AmonBase {
    region lv_location;
    int lv_type;
    int lv_initialOwner;
    bool lv_overrunStatus;
};
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_enemyGroup;
bool gv_playerWarnFlag;
int gv_dockingBaysYieldDelay;
int gv_worthMineralCost;
int gv_worthGasCost;
int gv_worthUnit;
int gv_worthHero;
gs_DockingBayRecord[7] gv_dockingBays;
unit gv_aeries;
revealer gv_aeriesRevealer1;
revealer gv_aeriesRevealer2;
fixed gv_sHOWDOWN_START;
fixed gv_sHOWDOWN_WINDOW;
unit gv_bonusBPrometheus;
unit gv_bonusBFirebird;
unit gv_bonusADevastatorBattlesuit;
timer gv_timer_A;
timer gv_timer_B;
int gv_bonusBReinforcements1;
int gv_bonusBReinforcements2;
gs_AmonBase[15] gv_amonBases;
fixed gv_lastAttackWave;
point gv_capitalShipyardPan;
point gv_victoryCompletePan;
int gv_objectiveE28094DestroytheIonCannon;
int gv_objectiveE28094GalateaMustSurvive;
int gv_objectiveE28094KillAeries;
int gv_objectiveE28094DestroyPrometheus;
int gv_objectiveE28094DestroyFirebird;
int gv_objectiveE28094DestroyDevastatorBattlesuit;
void InitGlobals () {
    int init_i;
    gv_enemyGroup = PlayerGroupEmpty();
    gv_dockingBaysYieldDelay = 9;
    gv_worthMineralCost = 1;
    gv_worthGasCost = 2;
    gv_worthHero = 400;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_dockingBays[init_i].lv_revealArea = RegionFromId(10);
        gv_dockingBays[init_i].lv_controlArea = RegionFromId(18);
        gv_dockingBays[init_i].lv_airlockPosition = PointFromId(1065545146);
        gv_dockingBays[init_i].lv_owner = gv_pLAYER_03_ENEMY;
        gv_dockingBays[init_i].lv_textTag = c_textTagNone;
        gv_dockingBays[init_i].lv_mode = gv_mODE_UNSPECIFIED;
        gv_dockingBays[init_i].lv_cutscene = c_cutsceneNone;
    }
    gv_sHOWDOWN_START = 2000.0;
    gv_sHOWDOWN_WINDOW = 400.0;
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_amonBases[init_i].lv_type = gv_aMON_BASE_ROOT;
        gv_amonBases[init_i].lv_initialOwner = gv_pLAYER_03_ENEMY;
    }
    gv_lastAttackWave = IntToFixed(gv_dockingBaysGracePeriod);
    gv_capitalShipyardPan = PointFromId(519800915);
    gv_objectiveE28094DestroytheIonCannon = c_invalidObjectiveId;
    gv_objectiveE28094GalateaMustSurvive = c_invalidObjectiveId;
    gv_objectiveE28094KillAeries = c_invalidObjectiveId;
    gv_objectiveE28094DestroyPrometheus = c_invalidObjectiveId;
    gv_objectiveE28094DestroyFirebird = c_invalidObjectiveId;
    gv_objectiveE28094DestroyDevastatorBattlesuit = c_invalidObjectiveId;
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_RollHybridWaveRetaliation ();
bool gf_RollHybridWaveRetaliation_Air ();
bool gf_RollForAmonReinforcements ();
int gf_WraithEscortQuantity (int lp_waveNumber);
void gf_InitDockingBay (int lp_bayNumber, region lp_revealArea, region lp_controlArea, point lp_airlockPosition, int lp_owner);
void gf_TransferDockingBayOwnership (int lp_bayNumber, int lp_newOwner);
void gf_UpdateDockingBayTextTag (int lp_bayNumber);
void gf_UpdateDockingBayWorkerBeacon (int lp_bayNumber);
void gf_UpdateDockingBayPing (int lp_bayNumber);
void gf_SetDockingBayPing (int lp_bayNumber);
int gf_DecideOwner (int lp_bayNumber);
unit gf_FindDockingBayControlTower (int lp_bayNumber);
unit gf_FindDockingBayWorkerBeacon (int lp_bayNumber);
bool gf_DockingBayContested (int lp_bayNumber);
bool gf_DockingBayUncontested (int lp_bayNumber);
bool gf_DockingBayBeingCaptured (int lp_bayNumber);
bool gf_DockingBayShuttleArrivalisDue (int lp_bayNumber);
bool gf_DockingBayShuttleYieldisDue (int lp_bayNumber);
void gf_DispatchAttackWave (int lp_baseIndexSource, int lp_baseIndexTarget);
void gf_InitAmonBase (int lp_baseIndex, int lp_amonPlayer, region lp_location, int lp_type);
void gf_UpdateAmonBasesOverrunStatus ();
int gf_GetRandomOverrunBase (int lp_amonPlayer);
int gf_GetRandomNotOverrunBase (int lp_amonPlayer);
int gf_GetBaseIndexbyDockingBayNumber (int lp_dockingBayNumber);
bool gf_IsAmonBaseOverrun (int lp_baseIndex);
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init01LoadData;
trigger gt_Init02Players;
trigger gt_Init03LoadingComplete;
trigger gt_Init04Technology;
trigger gt_Init05Units;
trigger gt_Init06MusicSound;
trigger gt_Init07Environment;
trigger gt_Init08Difficulties;
trigger gt_StartGameQ;
trigger gt_InitDockingBays;
trigger gt_DockingBaysTransmissionandPing;
trigger gt_ProcDockingBays;
trigger gt_InitialTransmission;
trigger gt_InitialTransmission2;
trigger gt_BaysActiveTransmission;
trigger gt_BayCapturedTransmission;
trigger gt_EnemyAttackingQ;
trigger gt_Status4500Transmission;
trigger gt_Status2500Transmission;
trigger gt_Status1500Transmission;
trigger gt_Status500Transmission;
trigger gt_ObjectiveUnderAttack;
trigger gt_BonusAE28094ArrivalTransmission;
trigger gt_BonusAE28094CompleteTransmission;
trigger gt_BonusAE28094ExpireWarningTransmission;
trigger gt_BonusAE28094ExpiredTransmission;
trigger gt_BonusBE28094ArrivalTransmission;
trigger gt_BonusBE28094CompleteTransmission;
trigger gt_BonusBE28094ExpireWarningTransmission;
trigger gt_BonusBE28094ExpiredTransmission;
trigger gt_AeriesArriveTransmission;
trigger gt_DefeatTransmission;
trigger gt_IonCannonScramble;
trigger gt_AeriesBirth;
trigger gt_AeriesTaunt;
trigger gt_AeriesProc;
trigger gt_TheShowdown;
trigger gt_BonusProc;
trigger gt_BonusACreate;
trigger gt_BonusAExpiryReminder;
trigger gt_BonusAExpire;
trigger gt_BonusAPauseTimer;
trigger gt_BonusAComplete;
trigger gt_BonusBCreate;
trigger gt_BonusBProc;
trigger gt_BonusBExpiryReminder;
trigger gt_BonusBExpire;
trigger gt_BonusBPauseTimer;
trigger gt_BonusBComplete1;
trigger gt_BonusBComplete2;
trigger gt_StartAI;
trigger gt_InitAmonBases;
trigger gt_ProcAmonBases;
trigger gt_PingCleanup;
trigger gt_DefeatGalateaDestroyed;
trigger gt_VictoryAeriesDead;
trigger gt_VictorySequence;
trigger gt_VictoryFanfareQ;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_ObjectiveDestroytheIonCannonE28094Create;
trigger gt_ObjectiveDestroytheIonCannonE28094Complete;
trigger gt_ObjectiveDestroytheIonCannonE28094Update;
trigger gt_ObjectiveDestroytheIonCannonE28094Failed;
trigger gt_ObjectiveGalateaMustSurviveE28094Create;
trigger gt_ObjectiveGalateaMustSurviveE28094Complete;
trigger gt_ObjectiveGalateaMustSurviveE28094Update;
trigger gt_ObjectiveGalateaMustSurviveE28094Failed;
trigger gt_ObjectiveKillAeriesE28094Create;
trigger gt_ObjectiveKillAeriesE28094Complete;
trigger gt_ObjectiveKillAeriesE28094Update;
trigger gt_ObjectiveKillAeriesE28094Failed;
trigger gt_ObjectiveDestroyPrometheusE28094Create;
trigger gt_ObjectiveDestroyPrometheusE28094Complete;
trigger gt_ObjectiveDestroyPrometheusE28094Update;
trigger gt_ObjectiveDestroyPrometheusE28094Failed;
trigger gt_ObjectiveDestroyFirebirdE28094Create;
trigger gt_ObjectiveDestroyFirebirdE28094Complete;
trigger gt_ObjectiveDestroyFirebirdE28094Update;
trigger gt_ObjectiveDestroyFirebirdE28094Failed;
trigger gt_ObjectiveDestroyDevastatorBattlesuitE28094Create;
trigger gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete;
trigger gt_ObjectiveDestroyDevastatorBattlesuitE28094Update;
trigger gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed;
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_RollHybridWaveRetaliation () {
    // Variable Declarations
    fixed lv_missionTime;
    int lv_likelihood;
    int lv_roll;
    // Variable Initialization
    lv_missionTime = GameGetMissionTime();
    lv_likelihood = 320;
    // Implementation
    lv_likelihood -= FixedToInt((lv_missionTime - gv_lastAttackWave));
    lv_roll = RandomInt(0, 200);
    //TriggerDebugOutput(1, (StringExternal("Param/Value/C84C9300") + IntToText(lv_roll) + StringExternal("Param/Value/D116CCD3") + IntToText(lv_likelihood) + StringExternal("Param/Value/3EB26807")), true);
    if ((lv_likelihood < lv_roll)) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_RollHybridWaveRetaliation_Air () {
    // Variable Declarations
    fixed lv_missionTime;
    // Variable Initialization
    lv_missionTime = GameGetMissionTime();
    // Implementation
    if ((lv_missionTime <= 720.0)) {
        return false;
    }
    else if ((lv_missionTime <= 1200.0)) {
        return (RandomFixed(0.0, 640.0) < (lv_missionTime - 720.0));
    }
    else if (true) {
        return (RandomFixed(0.0, 640.0) < (1200.0 - 720.0));
    }
    return false;
}
bool gf_RollForAmonReinforcements () {
    // Variable Declarations
    fixed lv_missionTime;
    int lv_roll;
    int lv_treshold;
    // Variable Initialization
    lv_missionTime = GameGetMissionTime();
    lv_treshold = 12;
    // Implementation
    lv_roll = RandomInt(0, 100);
    lv_treshold += FixedToInt((lv_missionTime / 30.0));
    return (lv_roll < lv_treshold);
}
int gf_WraithEscortQuantity (int lp_waveNumber) {
    int autoF045A6A2_val;
    // Implementation
    autoF045A6A2_val = lp_waveNumber;
    if (autoF045A6A2_val == 1) {
        return 2;
    }
    else if (autoF045A6A2_val == 2) {
        return 4;
    }
    else if (autoF045A6A2_val == 3) {
        return 6;
    }
    else {
        return 2;
    }
}
void gf_InitDockingBay (int lp_bayNumber, region lp_revealArea, region lp_controlArea, point lp_airlockPosition, int lp_owner) {
    // Variable Declarations
    int lv_bayArrayNumber;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    // Implementation
    gv_dockingBays[lv_bayArrayNumber].lv_revealArea = lp_revealArea;
    gv_dockingBays[lv_bayArrayNumber].lv_controlArea = lp_controlArea;
    gv_dockingBays[lv_bayArrayNumber].lv_airlockPosition = lp_airlockPosition;
    gv_dockingBays[lv_bayArrayNumber].lv_contestedPecent = 0;
    gv_dockingBays[lv_bayArrayNumber].lv_workerCount = 0;
    gv_dockingBays[lv_bayArrayNumber].lv_mode = gv_mODE_UNSPECIFIED;
    gv_dockingBays[lv_bayArrayNumber].lv_cooldown = (gv_dockingBaysGracePeriod + RandomInt(0, gv_dockingBaysCooldownFluctuation) + gv_dockingBaysCooldown);
    gf_TransferDockingBayOwnership(lp_bayNumber, lp_owner);
}
void gf_TransferDockingBayOwnership (int lp_bayNumber, int lp_newOwner) {
    // Variable Declarations
    int lv_bayArrayNumber;
    text lv_textTagText;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    lv_textTagText = StringExternal("Param/Value/11509B64");
    // Implementation
    if ((gv_dockingBays[lv_bayArrayNumber].lv_revealer != null)) {
        libCOMI_gf_DestroyRevealerCoop(gv_dockingBays[lv_bayArrayNumber].lv_revealer);
    }
    libCOMI_gf_CreateRevealerCoop(lp_newOwner, gv_dockingBays[lv_bayArrayNumber].lv_revealArea);
    gv_dockingBays[lv_bayArrayNumber].lv_revealer = VisRevealerLastCreated();
    if (((PlayerGroupHasPlayer(gv_enemyGroup, gv_dockingBays[lv_bayArrayNumber].lv_owner) == true) || (PlayerGroupHasPlayer(gv_enemyGroup, lp_newOwner) == true))) {
        gv_dockingBays[lv_bayArrayNumber].lv_workerCount = 0;
    }
    gf_UpdateDockingBayTextTag(lp_bayNumber);
    if (((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[lv_bayArrayNumber].lv_owner) == true) || (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_newOwner) == true))) {
    }
    else {
        gv_dockingBays[lv_bayArrayNumber].lv_contestedPecent = 0;
    }
    gv_dockingBays[lv_bayArrayNumber].lv_owner = lp_newOwner;
    UnitSetOwner(gf_FindDockingBayControlTower(lp_bayNumber), lp_newOwner, true);
    UnitBehaviorRemove(gf_FindDockingBayControlTower(lp_bayNumber), "RequestMinerals", c_unitBehaviorCountAll);
    UnitBehaviorRemove(gf_FindDockingBayControlTower(lp_bayNumber), "RequestGas", c_unitBehaviorCountAll);
    if ((PlayerGroupHasPlayer(gv_enemyGroup, lp_newOwner) != true)) {
        UnitBehaviorAdd(gf_FindDockingBayControlTower(lp_bayNumber), "RequestMinerals", gf_FindDockingBayControlTower(lp_bayNumber), 1);
    }
    gf_UpdateDockingBayWorkerBeacon(lp_bayNumber);
    gf_UpdateDockingBayPing(lp_bayNumber);
}
void gf_UpdateDockingBayTextTag (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    text lv_tempText;
    text lv_tempResource;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    lv_tempResource = StringExternal("Param/Value/BE25450C");
    // Implementation
    if (((gv_dockingBays[lv_bayArrayNumber].lv_owner == gv_pLAYER_03_ENEMY) || (gv_dockingBays[lv_bayArrayNumber].lv_owner == gv_pLAYER_04_ENEMY)) && gf_DockingBayUncontested(lp_bayNumber)) {
        if ((gv_dockingBays[lv_bayArrayNumber].lv_textTag == c_textTagNone)) {
        }
        else {
            TextTagDestroy(gv_dockingBays[lv_bayArrayNumber].lv_textTag);
            gv_dockingBays[lv_bayArrayNumber].lv_textTag = c_textTagNone;
        }
        return ;
    }
    if (gf_DockingBayContested(lp_bayNumber)) {
        if ((gv_dockingBays[lv_bayArrayNumber].lv_textTag == c_textTagNone)) {
            TextTagCreate(StringExternal("Param/Value/5D03BB0C"), 24, UnitGetPosition(gf_FindDockingBayControlTower(lp_bayNumber)), 1.0, true, true, PlayerGroupAll());
            gv_dockingBays[lv_bayArrayNumber].lv_textTag = TextTagLastCreated();
        }
        else {
            TextTagSetText(gv_dockingBays[lv_bayArrayNumber].lv_textTag, StringExternal("Param/Value/F8E5F771"));
        }
        TextTagSetFontSize(gv_dockingBays[lv_bayArrayNumber].lv_textTag, 24);
        if ((TextTagVisible(gv_dockingBays[lv_bayArrayNumber].lv_textTag, 1) == true)) {
            TextTagShow(gv_dockingBays[lv_bayArrayNumber].lv_textTag, PlayerGroupAll(), false);
        }
        else {
            TextTagShow(gv_dockingBays[lv_bayArrayNumber].lv_textTag, PlayerGroupAll(), true);
        }
        return ;
    }
    if (gf_DockingBayBeingCaptured(lp_bayNumber)) {
        if ((gv_dockingBays[lv_bayArrayNumber].lv_textTag == c_textTagNone)) {
            TextTagCreate((StringExternal("Param/Value/6E406BEC") + IntToText(gv_dockingBays[lv_bayArrayNumber].lv_contestedPecent) + StringExternal("Param/Value/200D36C0")), 24, UnitGetPosition(gf_FindDockingBayControlTower(lp_bayNumber)), 1.0, true, true, PlayerGroupAll());
            gv_dockingBays[lv_bayArrayNumber].lv_textTag = TextTagLastCreated();
        }
        else {
            TextTagSetText(gv_dockingBays[lv_bayArrayNumber].lv_textTag, (StringExternal("Param/Value/F96EAA4F") + IntToText(gv_dockingBays[lv_bayArrayNumber].lv_contestedPecent) + StringExternal("Param/Value/3C5BE792")));
        }
        TextTagSetFontSize(gv_dockingBays[lv_bayArrayNumber].lv_textTag, 24);
        TextTagShow(gv_dockingBays[lv_bayArrayNumber].lv_textTag, PlayerGroupAll(), true);
        return ;
    }
    if (((gv_dockingBays[lv_bayArrayNumber].lv_owner == gv_pLAYER_01_USER) || (gv_dockingBays[lv_bayArrayNumber].lv_owner == gv_pLAYER_02_USER)) && gf_DockingBayUncontested(lp_bayNumber)) {
        if ((UnitHasBehavior2(gf_FindDockingBayControlTower(lp_bayNumber), "RequestMinerals") == true)) {
            lv_tempResource = StringExternal("Param/Value/23AF5EFB");
        }
        else if ((UnitHasBehavior2(gf_FindDockingBayControlTower(lp_bayNumber), "RequestGas") == true)) {
            lv_tempResource = StringExternal("Param/Value/9D8C9BF5");
        }
        else if (true) {
            lv_tempResource = StringExternal("Param/Value/1F4AA2D9");
        }
        lv_tempText = (StringExternal("Param/Value/5E01FBD6") + IntToText(lp_bayNumber) + StringExternal("Param/Value/8A273CD7") + IntToText(gv_dockingBays[lv_bayArrayNumber].lv_cooldown) + StringExternal("Param/Value/6CC7B33F") + lv_tempResource + StringExternal("Param/Value/7F972A48"));
        if ((gv_dockingBays[lv_bayArrayNumber].lv_workerCount >= gv_dockingBaysWorkersMax)) {
            lv_tempText = (lv_tempText + StringExternal("Param/Value/FA82A69A") + IntToText(gv_dockingBays[lv_bayArrayNumber].lv_workerCount) + StringExternal("Param/Value/DCEB2241"));
        }
        else {
            lv_tempText = (lv_tempText + IntToText(gv_dockingBays[lv_bayArrayNumber].lv_workerCount));
        }
        lv_tempText = (StringExternal("Param/Value/0032C0AE") + lv_tempText + StringExternal("Param/Value/A14AD969"));
        if ((gv_dockingBays[lv_bayArrayNumber].lv_textTag == c_textTagNone)) {
            TextTagCreate(lv_tempText, 24, UnitGetPosition(gf_FindDockingBayControlTower(lp_bayNumber)), 1.0, true, true, PlayerGroupAll());
            gv_dockingBays[lv_bayArrayNumber].lv_textTag = TextTagLastCreated();
        }
        else {
            TextTagSetText(gv_dockingBays[lv_bayArrayNumber].lv_textTag, lv_tempText);
        }
        TextTagSetFontSize(gv_dockingBays[lv_bayArrayNumber].lv_textTag, 24);
        TextTagShow(gv_dockingBays[lv_bayArrayNumber].lv_textTag, PlayerGroupAll(), true);
        return ;
    }
}
void gf_UpdateDockingBayWorkerBeacon (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    text lv_tempText;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    // Implementation
    if (((gv_dockingBays[lv_bayArrayNumber].lv_workerCount >= gv_dockingBaysWorkersMax) || (PlayerGroupHasPlayer(gv_enemyGroup, gv_dockingBays[lv_bayArrayNumber].lv_owner) == true))) {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/1F9A9485") + IntToText(lp_bayNumber) + StringExternal("Param/Value/01D8E2C9")), true);
        TextTagShow(libHots_gf_TextTagForUnit(gf_FindDockingBayWorkerBeacon(lp_bayNumber), 1), PlayerGroupAll(), false);
        libNtve_gf_ShowHideUnit(gf_FindDockingBayWorkerBeacon(lp_bayNumber), false);
    }
    else {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/4C73ABEE") + IntToText(lp_bayNumber) + StringExternal("Param/Value/45D3A594")), true);
        libNtve_gf_ShowHideUnit(gf_FindDockingBayWorkerBeacon(lp_bayNumber), true);
        if ((libHots_gf_TextTagForUnit(gf_FindDockingBayWorkerBeacon(lp_bayNumber), 1) == c_textTagNone)) {
            TextTagCreate(StringExternal("Param/Value/F522B69F"), 18, UnitGetPosition(gf_FindDockingBayWorkerBeacon(lp_bayNumber)), 1.0, true, true, PlayerGroupSingle(gv_dockingBays[lv_bayArrayNumber].lv_owner));
            libHots_gf_StoreTextTagForUnit(gf_FindDockingBayWorkerBeacon(lp_bayNumber), 1, TextTagLastCreated());
            //TriggerDebugOutput(1, (StringExternal("Param/Value/66479D13") + IntToText(lp_bayNumber) + StringExternal("Param/Value/FBCE8D13")), true);
        }
        else {
            TextTagShow(libHots_gf_TextTagForUnit(gf_FindDockingBayWorkerBeacon(lp_bayNumber), 1), PlayerGroupAll(), false);
            TextTagShow(libHots_gf_TextTagForUnit(gf_FindDockingBayWorkerBeacon(lp_bayNumber), 1), PlayerGroupSingle(gv_dockingBays[lv_bayArrayNumber].lv_owner), true);
            //TriggerDebugOutput(1, (StringExternal("Param/Value/4F892F72") + IntToText(lp_bayNumber) + StringExternal("Param/Value/3305CF08")), true);
        }
    }
}
void gf_UpdateDockingBayPing (int lp_bayNumber) {
    int auto1476DBA7_ae;
    int auto1476DBA7_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Implementation
    if (true) {
    }
    auto1476DBA7_ae = PlayerGroupCount(libCOMI_gf_HumanPlayers());
    auto1476DBA7_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1476DBA7_ai >= 0 && lv_i <= auto1476DBA7_ae) || (auto1476DBA7_ai <= 0 && lv_i >= auto1476DBA7_ae) ) ; lv_i += auto1476DBA7_ai ) {
        if ((libHots_gf_PingStoredForUnit(gf_FindDockingBayControlTower(lp_bayNumber), PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i)) == c_invalidPingId)) {
            continue;
        }
        libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gf_FindDockingBayControlTower(lp_bayNumber), PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i)));
        libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupEmpty(), UnitGetPosition(gf_FindDockingBayControlTower(lp_bayNumber)), 270.0, "PingCircle", ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 65535.0);
        PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/4B91611D") + IntToText(lp_bayNumber)));
        if ((PlayerGroupHasPlayer(gv_enemyGroup, gv_dockingBays[(lp_bayNumber - 1)].lv_owner) == true)) {
            PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
        }
        else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[(lp_bayNumber - 1)].lv_owner) == true) && (gv_dockingBays[(lp_bayNumber - 1)].lv_owner == PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i))) {
            PingSetColor(PingLastCreated(), Color(0.00, 50.20, 25.10));
        }
        else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[(lp_bayNumber - 1)].lv_owner) == true) && (gv_dockingBays[(lp_bayNumber - 1)].lv_owner != PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i))) {
            PingSetColor(PingLastCreated(), Color(25.10, 25.10, 100.00));
        }
        else if (true) {
            PingSetColor(PingLastCreated(), Color(75.29, 75.29, 75.29));
        }
        PingSetPlayerGroup(PingLastCreated(), PlayerGroupSingle(PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i)));
        PingSetScale(PingLastCreated(), 0.33);
        PingSetUnit(PingLastCreated(), gf_FindDockingBayControlTower(lp_bayNumber));
        libHots_gf_StorePingForUnit(gf_FindDockingBayControlTower(lp_bayNumber), PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i), PingLastCreated());
        libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupSingle(PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i)), UnitGetPosition(gf_FindDockingBayControlTower(lp_bayNumber)), 270.0, "PingWarning", PingGetColor(libHots_gf_PingStoredForUnit(gf_FindDockingBayControlTower(lp_bayNumber), PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i))), 4.0);
    }
}
void gf_SetDockingBayPing (int lp_bayNumber) {
    int auto158C52AE_ae;
    int auto158C52AE_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Implementation
    if (true) {
        auto158C52AE_ae = PlayerGroupCount(libCOMI_gf_HumanPlayers());
        auto158C52AE_ai = 1;
        lv_i = 1;
        for ( ; ( (auto158C52AE_ai >= 0 && lv_i <= auto158C52AE_ae) || (auto158C52AE_ai <= 0 && lv_i >= auto158C52AE_ae) ) ; lv_i += auto158C52AE_ai ) {
            libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gf_FindDockingBayControlTower(lp_bayNumber), PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i)));
            libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupEmpty(), UnitGetPosition(gf_FindDockingBayControlTower(lp_bayNumber)), 270.0, "PingCircle", ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 65535.0);
            PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/AEC7EA5E") + IntToText(lp_bayNumber)));
            if ((PlayerGroupHasPlayer(gv_enemyGroup, gv_dockingBays[(lp_bayNumber - 1)].lv_owner) == true)) {
                PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            }
            else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[(lp_bayNumber - 1)].lv_owner) == true) && (gv_dockingBays[(lp_bayNumber - 1)].lv_owner == PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i))) {
                PingSetColor(PingLastCreated(), Color(0.00, 50.20, 25.10));
            }
            else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[(lp_bayNumber - 1)].lv_owner) == true) && (gv_dockingBays[(lp_bayNumber - 1)].lv_owner != PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i))) {
                PingSetColor(PingLastCreated(), Color(25.10, 25.10, 100.00));
            }
            else if (true) {
                PingSetColor(PingLastCreated(), Color(75.29, 75.29, 75.29));
            }
            PingSetPlayerGroup(PingLastCreated(), PlayerGroupSingle(PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i)));
            PingSetScale(PingLastCreated(), 0.33);
            PingSetUnit(PingLastCreated(), gf_FindDockingBayControlTower(lp_bayNumber));
            libHots_gf_StorePingForUnit(gf_FindDockingBayControlTower(lp_bayNumber), PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i), PingLastCreated());
            libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupSingle(PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i)), UnitGetPosition(gf_FindDockingBayControlTower(lp_bayNumber)), 270.0, "PingWarning", PingGetColor(libHots_gf_PingStoredForUnit(gf_FindDockingBayControlTower(lp_bayNumber), PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), lv_i))), 4.0);
        }
    }
}
int gf_DecideOwner (int lp_bayNumber) {
    unitgroup autoEA69A41B_g;
    int autoEA69A41B_u;
    unitgroup autoC25C4320_g;
    int autoC25C4320_u;
    unitgroup autoDDBA53BA_g;
    int autoDDBA53BA_u;
    unitgroup auto8C047AD6_g;
    int auto8C047AD6_u;
    // Variable Declarations
    int lv_bayArrayNumber;
    unit lv_currentUnit;
    unitgroup lv_p1Units;
    unitgroup lv_p2Units;
    unitgroup lv_p3Units;
    unitgroup lv_p4Units;
    int lv_p1Worth;
    int lv_p2Worth;
    int lv_p3Worth;
    int lv_p4Worth;
    int lv_retVal;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    lv_p1Units = UnitGroupEmpty();
    lv_p2Units = UnitGroupEmpty();
    lv_p3Units = UnitGroupEmpty();
    lv_p4Units = UnitGroupEmpty();
    // Implementation
    lv_p1Units = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_01_USER, -1, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_p2Units = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_02_USER, -1, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_p3Units = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_03_ENEMY, -1, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_p4Units = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_pLAYER_04_ENEMY, -1, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_p1Worth = 0;
    autoEA69A41B_g = lv_p1Units;
    autoEA69A41B_u = 1;
    for ( ; autoEA69A41B_u <= UnitGroupCount(autoEA69A41B_g, c_unitCountAll) ; autoEA69A41B_u += BoolToInt(lv_currentUnit == UnitGroupUnit(autoEA69A41B_g, autoEA69A41B_u)) ) {
        lv_currentUnit = UnitGroupUnit(autoEA69A41B_g, autoEA69A41B_u);
        if ((UnitTypeTestAttribute(UnitGetType(lv_currentUnit), c_unitAttributeHeroic) == true)) {
            lv_p1Worth += (gv_worthHero * 1);
        }
        else {
            lv_p1Worth += (gv_worthUnit * 1);
            lv_p1Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostMinerals) * gv_worthMineralCost);
            lv_p1Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostVespene) * gv_worthGasCost);
        }
    }
    //TriggerDebugOutput(1, (StringExternal("Param/Value/EFB52FEA") + IntToText(UnitGroupCount(lv_p1Units, c_unitCountAlive)) + StringExternal("Param/Value/9E47E4D3") + IntToText(lv_p1Worth) + StringExternal("Param/Value/18336F02")), true);
    lv_p2Worth = 0;
    autoC25C4320_g = lv_p2Units;
    autoC25C4320_u = 1;
    for ( ; autoC25C4320_u <= UnitGroupCount(autoC25C4320_g, c_unitCountAll) ; autoC25C4320_u += BoolToInt(lv_currentUnit == UnitGroupUnit(autoC25C4320_g, autoC25C4320_u)) ) {
        lv_currentUnit = UnitGroupUnit(autoC25C4320_g, autoC25C4320_u);
        if ((UnitTypeTestAttribute(UnitGetType(lv_currentUnit), c_unitAttributeHeroic) == true)) {
            lv_p2Worth += (gv_worthHero * 1);
        }
        else {
            lv_p2Worth += (gv_worthUnit * 1);
            lv_p2Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostMinerals) * gv_worthMineralCost);
            lv_p2Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostVespene) * gv_worthGasCost);
        }
    }
    //TriggerDebugOutput(1, (StringExternal("Param/Value/FA09CD3D") + IntToText(UnitGroupCount(lv_p2Units, c_unitCountAlive)) + StringExternal("Param/Value/CA20246E") + IntToText(lv_p2Worth) + StringExternal("Param/Value/184722BB")), true);
    lv_p3Worth = 0;
    autoDDBA53BA_g = lv_p3Units;
    autoDDBA53BA_u = 1;
    for ( ; autoDDBA53BA_u <= UnitGroupCount(autoDDBA53BA_g, c_unitCountAll) ; autoDDBA53BA_u += BoolToInt(lv_currentUnit == UnitGroupUnit(autoDDBA53BA_g, autoDDBA53BA_u)) ) {
        lv_currentUnit = UnitGroupUnit(autoDDBA53BA_g, autoDDBA53BA_u);
        if ((UnitTypeTestAttribute(UnitGetType(lv_currentUnit), c_unitAttributeHeroic) == true)) {
            lv_p3Worth += (gv_worthHero * 1);
        }
        else {
            lv_p3Worth += (gv_worthUnit * 1);
            lv_p3Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostMinerals) * gv_worthMineralCost);
            lv_p3Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostVespene) * gv_worthGasCost);
        }
    }
    //TriggerDebugOutput(1, (StringExternal("Param/Value/A12BEEA3") + IntToText(UnitGroupCount(lv_p3Units, c_unitCountAlive)) + StringExternal("Param/Value/781F4D10") + IntToText(lv_p3Worth) + StringExternal("Param/Value/9457A624")), true);
    lv_p4Worth = 0;
    auto8C047AD6_g = lv_p4Units;
    auto8C047AD6_u = 1;
    for ( ; auto8C047AD6_u <= UnitGroupCount(auto8C047AD6_g, c_unitCountAll) ; auto8C047AD6_u += BoolToInt(lv_currentUnit == UnitGroupUnit(auto8C047AD6_g, auto8C047AD6_u)) ) {
        lv_currentUnit = UnitGroupUnit(auto8C047AD6_g, auto8C047AD6_u);
        if ((UnitTypeTestAttribute(UnitGetType(lv_currentUnit), c_unitAttributeHeroic) == true)) {
            lv_p4Worth += (gv_worthHero * 1);
        }
        else {
            lv_p4Worth += (gv_worthUnit * 1);
            lv_p4Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostMinerals) * gv_worthMineralCost);
            lv_p4Worth += (UnitTypeGetCost(UnitGetType(lv_currentUnit), c_unitCostVespene) * gv_worthGasCost);
        }
    }
    //TriggerDebugOutput(1, (StringExternal("Param/Value/33F0F44E") + IntToText(UnitGroupCount(lv_p4Units, c_unitCountAlive)) + StringExternal("Param/Value/FF11E68B") + IntToText(lv_p4Worth) + StringExternal("Param/Value/B2BBF8FA")), true);
    if ((lv_p1Worth > lv_p2Worth)) {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/DF005074") + IntToText(lp_bayNumber) + StringExternal("Param/Value/900CF8EB")), true);
        lv_retVal = gv_pLAYER_01_USER;
    }
    else if ((lv_p1Worth < lv_p2Worth)) {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/830F42E6") + IntToText(lp_bayNumber) + StringExternal("Param/Value/29DEAE51")), true);
        lv_retVal = gv_pLAYER_02_USER;
    }
    else if ((lv_p3Worth > lv_p4Worth)) {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/2752912F") + IntToText(lp_bayNumber) + StringExternal("Param/Value/F7B35073")), true);
        lv_retVal = gv_pLAYER_03_ENEMY;
    }
    else if ((lv_p3Worth < lv_p4Worth)) {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/5457B3C6") + IntToText(lp_bayNumber) + StringExternal("Param/Value/8E86AE86")), true);
        lv_retVal = gv_pLAYER_04_ENEMY;
    }
    else if ((lv_p1Worth != 0) && (lv_p1Worth == lv_p2Worth)) {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/01AF9D85") + IntToText(lp_bayNumber) + StringExternal("Param/Value/DB6A66A9")), true);
        lv_retVal = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    }
    else if ((lv_p1Worth == 0) && (lv_p1Worth == lv_p2Worth)) {
        //TriggerDebugOutput(1, (StringExternal("Param/Value/34AD6290") + IntToText(lp_bayNumber) + StringExternal("Param/Value/9E7B7831")), true);
        lv_retVal = RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY);
    }
    return lv_retVal;
}
unit gf_FindDockingBayControlTower (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    // Implementation
    return UnitGroupUnit(UnitGroup("ControlTower", c_playerAny, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
}
unit gf_FindDockingBayWorkerBeacon (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    // Implementation
    return UnitGroupUnit(UnitGroup("Beacon_Terran", c_playerAny, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, 0, 0), 0), 1);
}
bool gf_DockingBayContested (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    unitgroup lv_alliedUnit;
    unitgroup lv_hostileUnit;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    lv_alliedUnit = UnitGroupEmpty();
    lv_hostileUnit = UnitGroupEmpty();
    // Implementation
    lv_alliedUnit = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_dockingBays[lv_bayArrayNumber].lv_owner, c_unitAllianceAlly, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1);
    lv_hostileUnit = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_dockingBays[lv_bayArrayNumber].lv_owner, c_unitAllianceEnemy, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1);
    if (((UnitGroupCount(lv_alliedUnit, c_unitCountAlive) != 0) && (UnitGroupCount(lv_hostileUnit, c_unitCountAlive) != 0))) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_DockingBayUncontested (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    unitgroup lv_alliedUnit;
    unitgroup lv_hostileUnit;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    lv_alliedUnit = UnitGroupEmpty();
    lv_hostileUnit = UnitGroupEmpty();
    // Implementation
    lv_alliedUnit = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_dockingBays[lv_bayArrayNumber].lv_owner, c_unitAllianceAlly, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1);
    lv_hostileUnit = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_dockingBays[lv_bayArrayNumber].lv_owner, c_unitAllianceEnemy, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1);
    if (((UnitGroupCount(lv_hostileUnit, c_unitCountAlive) == 0))) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_DockingBayBeingCaptured (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    unitgroup lv_alliedUnit;
    unitgroup lv_hostileUnit;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    lv_alliedUnit = UnitGroupEmpty();
    lv_hostileUnit = UnitGroupEmpty();
    // Implementation
    lv_alliedUnit = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_dockingBays[lv_bayArrayNumber].lv_owner, c_unitAllianceAlly, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1);
    lv_hostileUnit = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", gv_dockingBays[lv_bayArrayNumber].lv_owner, c_unitAllianceEnemy, gv_dockingBays[lv_bayArrayNumber].lv_controlArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1);
    if (((UnitGroupCount(lv_alliedUnit, c_unitCountAlive) == 0) && (UnitGroupCount(lv_hostileUnit, c_unitCountAlive) != 0))) {
        return true;
    }
    else {
        return false;
    }
}
bool gf_DockingBayShuttleArrivalisDue (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    // Implementation
    return (gv_dockingBays[lv_bayArrayNumber].lv_cooldown <= 0);
}
bool gf_DockingBayShuttleYieldisDue (int lp_bayNumber) {
    // Variable Declarations
    int lv_bayArrayNumber;
    // Variable Initialization
    lv_bayArrayNumber = (lp_bayNumber - 1);
    // Implementation
    return ((gv_dockingBays[lv_bayArrayNumber].lv_cooldown <= (gv_dockingBaysCooldown - gv_dockingBaysYieldDelay)) && (gv_dockingBays[lv_bayArrayNumber].lv_mode != gv_mODE_UNSPECIFIED));
}
void gf_DispatchAttackWave (int lp_baseIndexSource, int lp_baseIndexTarget) {
    unitgroup autoF099EB9D_g;
    int autoF099EB9D_u;
    unitgroup auto08217716_g;
    int auto08217716_u;
    // Variable Declarations
    fixed lv_missionTime;
    int lv_attackTarget;
    int lv_resourceBucket_MinorAttack;
    int lv_resourceBucket_Retaliation;
    int lv_techBucket_MinorAttack;
    int lv_techBucket_Retaliation;
    unit lv_tempUnit;
    // Variable Initialization
    lv_missionTime = GameGetMissionTime();
    lv_attackTarget = 13;
    // Implementation
    /// ======= Set Resource and Tech Buckets Based on Mission Time ====== ///
    //lv_resourceBucket_MinorAttack
    while(true) {
        if (lv_missionTime <= 15*60.0) {lv_resourceBucket_MinorAttack = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest; break;};
        if (lv_missionTime <= 25*60.0) {lv_resourceBucket_MinorAttack = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;  break;};
        if (lv_missionTime <= 35*60.0) {lv_resourceBucket_MinorAttack = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;    break;};
        lv_resourceBucket_MinorAttack = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;    break;
    };
    //lv_techBucket_MinorAttack
    while(true) {
        if (lv_missionTime <=  8*60.0) {lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets__1Early;      break;};
        if (lv_missionTime <= 10*60.0) {lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;   break;};
        if (lv_missionTime <= 12*60.0) {lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets__3Mid;        break;};
        if (lv_missionTime <= 14*60.0) {lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;    break;};
        if (lv_missionTime <= 16*60.0) {lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets__5Late;       break;};
        if (lv_missionTime <= 18*60.0) {lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;  break;};
        if (lv_missionTime <= 20*60.0) {lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;  break;};
        lv_techBucket_MinorAttack = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;  break;
    };
    //lv_resourceBucket_Retaliation
    while(true) {
        if (lv_missionTime <=   4*60.0) {lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest; break;};
        if (lv_missionTime <=   7*60.0) {lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;  break;};
        if (lv_missionTime <=  10*60.0) {lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;    break;};
        if (lv_missionTime <=  13*60.0) {lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;   break;};
        if (lv_missionTime <=  16*60.0) {lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;    break;};
        if (lv_missionTime <=  19*60.0) {lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;   break;};
        if (lv_missionTime <=  22*60.0) {lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;  break;};
        lv_resourceBucket_Retaliation = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;  break;
    };
    //lv_techBucket_Retaliation
    while(true) {
        if (lv_missionTime <=  1*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets__1Early;      break;};
        if (lv_missionTime <=  4*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets__1Early;      break;};
        if (lv_missionTime <=  7*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;   break;};
        if (lv_missionTime <= 10*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets__3Mid;        break;};
        if (lv_missionTime <= 13*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;    break;};
        if (lv_missionTime <= 16*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets__5Late;       break;};
        if (lv_missionTime <= 19*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;  break;};
        if (lv_missionTime <= 22*60.0) {lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;  break;};
        lv_techBucket_Retaliation = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;  break;
    };
    if (gf_RollHybridWaveRetaliation()) {
        lv_attackTarget = gf_GetRandomOverrunBase(gv_amonBases[lp_baseIndexSource].lv_initialOwner);
        if (gf_RollHybridWaveRetaliation_Air()) {
            //TriggerDebugOutput(1, (StringExternal("Param/Value/00178BB2") + IntToText(lp_baseIndexSource) + StringExternal("Param/Value/B4299903") + IntToText(lp_baseIndexTarget) + StringExternal("Param/Value/919E7355")), true);
            libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(gv_amonBases[lp_baseIndexSource].lv_initialOwner, gv_amonBases[lp_baseIndexSource].lv_initialOwner, lv_resourceBucket_Retaliation, lv_techBucket_Retaliation, RegionGetCenter(gv_amonBases[lp_baseIndexSource].lv_location), "Medivac");
            libCOMI_gf_EnableDisableCoopAIWavePings(false);
            libCOMI_gf_PingMinimapCampaign(libCOMI_gf_HumanPlayers(), RegionGetCenter(gv_amonBases[lp_baseIndexSource].lv_location), 2.0, Color(100.00, 0.00, 0.00));
            libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
            if ((gv_amonBases[lp_baseIndexSource].lv_initialOwner == gv_pLAYER_03_ENEMY)) {
                UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForceTransports(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(167553542)), c_orderQueueReplace);
                UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForceTransports(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(107723520)), c_orderQueueAddToEnd);
                auto08217716_g = libCOMI_gf_LastCreatedCoopAttackForceTransports();
                auto08217716_u = 1;
                for ( ; auto08217716_u <= UnitGroupCount(auto08217716_g, c_unitCountAll) ; auto08217716_u += BoolToInt(lv_tempUnit == UnitGroupUnit(auto08217716_g, auto08217716_u)) ) {
                    lv_tempUnit = UnitGroupUnit(auto08217716_g, auto08217716_u);
                    if ((UnitGetType(lv_tempUnit) == "Liberator")) {
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("LiberatorAGTarget", 0), PointFromId(707)), c_orderQueueAddToEnd);
                    }
                    if ((UnitGetType(lv_tempUnit) == "SiegeTank")) {
                        UnitIssueOrder(lv_tempUnit, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
                    }
                    if ((UnitGetType(lv_tempUnit) == "Raven")) {
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_03_ENEMY, PointFromId(707), 6.0)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_03_ENEMY, PointFromId(707), 6.0)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_03_ENEMY, PointFromId(707), 6.0)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_03_ENEMY, PointFromId(707), 6.0)), c_orderQueueAddToEnd);
                    }
                    if ((UnitGetType(lv_tempUnit) == "WidowMine")) {
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(707), 10.0))), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, Order(AbilityCommand("MutatorWidowMineBurrow", 0)), c_orderQueueAddToEnd);
                    }
                }
            }
            else {
                UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForceTransports(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2138675269)), c_orderQueueReplace);
                UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForceTransports(), OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), PointFromId(423750316)), c_orderQueueAddToEnd);
                autoF099EB9D_g = libCOMI_gf_LastCreatedCoopAttackForceTransports();
                autoF099EB9D_u = 1;
                for ( ; autoF099EB9D_u <= UnitGroupCount(autoF099EB9D_g, c_unitCountAll) ; autoF099EB9D_u += BoolToInt(lv_tempUnit == UnitGroupUnit(autoF099EB9D_g, autoF099EB9D_u)) ) {
                    lv_tempUnit = UnitGroupUnit(autoF099EB9D_g, autoF099EB9D_u);
                    if ((UnitGetType(lv_tempUnit) == "Liberator")) {
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("LiberatorAGTarget", 0), PointFromId(241)), c_orderQueueAddToEnd);
                    }
                    if ((UnitGetType(lv_tempUnit) == "SiegeTank")) {
                        UnitIssueOrder(lv_tempUnit, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
                    }
                    if ((UnitGetType(lv_tempUnit) == "Raven")) {
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_04_ENEMY, PointFromId(241), 6.0)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_04_ENEMY, PointFromId(241), 6.0)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_04_ENEMY, PointFromId(241), 6.0)), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("BuildAutoTurret", 0), UnitTypePlacementFromPoint("AutoTurret", gv_pLAYER_04_ENEMY, PointFromId(241), 6.0)), c_orderQueueAddToEnd);
                    }
                    if ((UnitGetType(lv_tempUnit) == "WidowMine")) {
                        UnitIssueOrder(lv_tempUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(PointFromId(241), 10.0))), c_orderQueueAddToEnd);
                        UnitIssueOrder(lv_tempUnit, Order(AbilityCommand("MutatorWidowMineBurrow", 0)), c_orderQueueAddToEnd);
                    }
                }
            }
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForceTransports(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_amonBases[13].lv_location)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForceTransports(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2138675269)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForceTransports(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(423750316)), c_orderQueueAddToEnd);
            gv_playerWarnFlag = true;
        }
        else {
            //TriggerDebugOutput(1, (StringExternal("Param/Value/71BD8C4D") + IntToText(lp_baseIndexSource) + StringExternal("Param/Value/D7BEBBCA") + IntToText(lp_baseIndexTarget) + StringExternal("Param/Value/17A376E7")), true);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_amonBases[lp_baseIndexSource].lv_initialOwner, gv_amonBases[lp_baseIndexSource].lv_initialOwner, lv_resourceBucket_Retaliation, lv_techBucket_Retaliation, RegionGetCenter(gv_amonBases[lp_baseIndexSource].lv_location), (gv_amonBases[lp_baseIndexSource].lv_type != gv_aMON_BASE_DOCKING_BAY));
            libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForce(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_amonBases[lv_attackTarget].lv_location)), c_orderQueueReplace);
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForce(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_amonBases[13].lv_location)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForce(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2138675269)), c_orderQueueAddToEnd);
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForce(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(423750316)), c_orderQueueAddToEnd);
            gv_playerWarnFlag = true;
        }
        gv_lastAttackWave = lv_missionTime;
        libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingDiamond", ColorWithAlpha(100.00, 10.98, 12.94, 0.00), 65535.0);
        PingSetScale(PingLastCreated(), 0.5);
        PingSetUnit(PingLastCreated(), UnitLastCreated());
        libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    }
    else {
        if ((gv_amonBases[lp_baseIndexSource].lv_type == gv_aMON_BASE_DOCKING_BAY)) {
            //TriggerDebugOutput(1, (StringExternal("Param/Value/C399BE95") + IntToText(lp_baseIndexSource) + StringExternal("Param/Value/20EA26CB")), true);
            libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_amonBases[lp_baseIndexSource].lv_initialOwner, gv_amonBases[lp_baseIndexSource].lv_initialOwner, lv_resourceBucket_MinorAttack, lv_techBucket_MinorAttack, RegionGetCenter(gv_amonBases[lp_baseIndexSource].lv_location), (gv_amonBases[lp_baseIndexSource].lv_type != gv_aMON_BASE_DOCKING_BAY));
            libCOMI_gf_EnableDisableCoopAIWavePings(false);
            libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
            UnitGroupIssueOrder(libCOMI_gf_LastCreatedCoopAttackForce(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(451941872))), c_orderQueueReplace);
        }
    }
}
void gf_InitAmonBase (int lp_baseIndex, int lp_amonPlayer, region lp_location, int lp_type) {
    // Implementation
    gv_amonBases[lp_baseIndex].lv_initialOwner = lp_amonPlayer;
    gv_amonBases[lp_baseIndex].lv_location = lp_location;
    gv_amonBases[lp_baseIndex].lv_overrunStatus = false;
    gv_amonBases[lp_baseIndex].lv_type = lp_type;
}
void gf_UpdateAmonBasesOverrunStatus () {
    int auto20192092_ae;
    int auto20192092_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Implementation
    auto20192092_ae = 13;
    auto20192092_ai = 1;
    lv_i = 0;
    for ( ; ( (auto20192092_ai >= 0 && lv_i <= auto20192092_ae) || (auto20192092_ai <= 0 && lv_i >= auto20192092_ae) ) ; lv_i += auto20192092_ai ) {
        gv_amonBases[lv_i].lv_overrunStatus = gf_IsAmonBaseOverrun(lv_i);
    }
}
int gf_GetRandomOverrunBase (int lp_amonPlayer) {
    int auto2CFDA84A_ae;
    int auto2CFDA84A_ai;
    int autoA6E60342_ae;
    int autoA6E60342_ai;
    // Variable Declarations
    int lv_i;
    int lv_overrunBaseTotal;
    int lv_overrunBaseChoice;
    int lv_overrunBaseCurrent;
    // Variable Initialization
    // Implementation
    gf_UpdateAmonBasesOverrunStatus();
    auto2CFDA84A_ae = 13;
    auto2CFDA84A_ai = 1;
    lv_i = 0;
    for ( ; ( (auto2CFDA84A_ai >= 0 && lv_i <= auto2CFDA84A_ae) || (auto2CFDA84A_ai <= 0 && lv_i >= auto2CFDA84A_ae) ) ; lv_i += auto2CFDA84A_ai ) {
        if ((gv_amonBases[lv_i].lv_overrunStatus == true)) {
            lv_overrunBaseTotal += 1;
        }
    }
    lv_overrunBaseChoice = RandomInt(0, (lv_overrunBaseTotal - 1));
    autoA6E60342_ae = 13;
    autoA6E60342_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA6E60342_ai >= 0 && lv_i <= autoA6E60342_ae) || (autoA6E60342_ai <= 0 && lv_i >= autoA6E60342_ae) ) ; lv_i += autoA6E60342_ai ) {
        if ((gv_amonBases[lv_i].lv_overrunStatus == true) && (lv_overrunBaseCurrent == lv_overrunBaseChoice)) {
            return lv_i;
        }
        else if ((gv_amonBases[lv_i].lv_overrunStatus == true) && (lv_overrunBaseCurrent != lv_overrunBaseChoice)) {
            lv_overrunBaseCurrent += 1;
        }
    }
    return 13;
}
int gf_GetRandomNotOverrunBase (int lp_amonPlayer) {
    int auto5758AAEB_ae;
    int auto5758AAEB_ai;
    int autoDD01FE75_ae;
    int autoDD01FE75_ai;
    // Variable Declarations
    int lv_i;
    int lv_notOverrunBaseTotal;
    int lv_notOverrunBaseChoice;
    int lv_notOverrunBaseCurrent;
    // Variable Initialization
    // Implementation
    gf_UpdateAmonBasesOverrunStatus();
    auto5758AAEB_ae = 13;
    auto5758AAEB_ai = 1;
    lv_i = 0;
    for ( ; ( (auto5758AAEB_ai >= 0 && lv_i <= auto5758AAEB_ae) || (auto5758AAEB_ai <= 0 && lv_i >= auto5758AAEB_ae) ) ; lv_i += auto5758AAEB_ai ) {
        if ((gv_amonBases[lv_i].lv_overrunStatus != true)) {
            lv_notOverrunBaseTotal += 1;
        }
    }
    lv_notOverrunBaseChoice = RandomInt(0, (lv_notOverrunBaseTotal - 1));
    autoDD01FE75_ae = 13;
    autoDD01FE75_ai = 1;
    lv_i = 0;
    for ( ; ( (autoDD01FE75_ai >= 0 && lv_i <= autoDD01FE75_ae) || (autoDD01FE75_ai <= 0 && lv_i >= autoDD01FE75_ae) ) ; lv_i += autoDD01FE75_ai ) {
        if ((gv_amonBases[lv_i].lv_overrunStatus != true) && (lv_notOverrunBaseCurrent == lv_notOverrunBaseChoice)) {
            return lv_i;
        }
        else if ((gv_amonBases[lv_i].lv_overrunStatus != true) && (lv_notOverrunBaseCurrent != lv_notOverrunBaseChoice)) {
            lv_notOverrunBaseCurrent += 1;
        }
    }
    return 0;
}
int gf_GetBaseIndexbyDockingBayNumber (int lp_dockingBayNumber) {
    int auto563E3145_val;
    // Implementation
    auto563E3145_val = lp_dockingBayNumber;
    if (auto563E3145_val == 1) {
        return 5;
    }
    else if (auto563E3145_val == 2) {
        return 12;
    }
    else if (auto563E3145_val == 3) {
        return 3;
    }
    else if (auto563E3145_val == 4) {
        return 4;
    }
    else if (auto563E3145_val == 5) {
        return 11;
    }
    else if (auto563E3145_val == 6) {
        return 10;
    }
    else {
        return 0;
    }
}
bool gf_IsAmonBaseOverrun (int lp_baseIndex) {
    // Variable Declarations
    unitgroup lv_amonForces;
    unitgroup lv_amonBuidings;
    unit lv_controlTower;
    // Variable Initialization
    lv_amonForces = UnitGroupEmpty();
    lv_amonBuidings = UnitGroupEmpty();
    // Implementation
    if ((gv_amonBases[lp_baseIndex].lv_type == gv_aMON_BASE_ROOT)) {
        return false;
    }
    else if ((gv_amonBases[lp_baseIndex].lv_type == gv_aMON_BASE_DOCKING_BAY)) {
        lv_controlTower = UnitGroupUnit(UnitGroup("ControlTower", c_playerAny, gv_amonBases[lp_baseIndex].lv_location, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        return PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(lv_controlTower));
    }
    else if ((gv_amonBases[lp_baseIndex].lv_type == gv_aMON_BASE_OUTPOST)) {
        lv_amonForces = UnitGroupAlliance(gv_pLAYER_04_ENEMY, c_unitAllianceAlly, gv_amonBases[lp_baseIndex].lv_location, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_amonBuidings = UnitGroupAlliance(gv_pLAYER_04_ENEMY, c_unitAllianceAlly, gv_amonBases[lp_baseIndex].lv_location, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        return ((UnitGroupCount(lv_amonForces, c_unitCountAlive) <= 2) && (UnitGroupCount(lv_amonBuidings, c_unitCountAlive) == 0));
    }
    else if (true) {
        return true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init04Technology, true, false);
    TriggerExecute(gt_Init05Units, true, false);
    TriggerExecute(gt_Init06MusicSound, true, false);
    TriggerExecute(gt_Init07Environment, true, false);
    TriggerExecute(gt_Init08Difficulties, true, false);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init04Technology_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init04Technology_Init () {
    gt_Init04Technology = TriggerCreate("gt_Init04Technology_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init05Units_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init05Units_Init () {
    gt_Init05Units = TriggerCreate("gt_Init05Units_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init06MusicSound_Init () {
    gt_Init06MusicSound = TriggerCreate("gt_Init06MusicSound_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init07Environment_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init07Environment_Init () {
    gt_Init07Environment = TriggerCreate("gt_Init07Environment_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init 08 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init08Difficulties_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Init08Difficulties_Init () {
    gt_Init08Difficulties = TriggerCreate("gt_Init08Difficulties_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_enemyBase;
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/068743D5"), null, PlayerStartLocation(gv_pLAYER_01_USER));
    UIAlertPoint("Trigger", gv_pLAYER_02_USER, StringExternal("Param/Value/187E0E6E"), null, PlayerStartLocation(gv_pLAYER_02_USER));
    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    TriggerExecute(gt_InitialTransmission, true, true);
    TriggerExecute(gt_ObjectiveGalateaMustSurviveE28094Create, true, true);
    TriggerExecute(gt_ObjectiveDestroytheIonCannonE28094Create, true, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(4), true, false);
    VisExploreArea(gv_pLAYER_02_USER, RegionFromId(4), true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_InitialTransmission2, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init Docking Bays
//--------------------------------------------------------------------------------------------------
bool gt_InitDockingBays_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_InitDockingBay(1, RegionFromId(10), RegionFromId(18), PointFromId(1065545146), gv_pLAYER_03_ENEMY);
    gf_InitDockingBay(2, RegionFromId(11), RegionFromId(19), PointFromId(393228597), gv_pLAYER_04_ENEMY);
    gf_InitDockingBay(3, RegionFromId(12), RegionFromId(20), PointFromId(1289254239), gv_pLAYER_03_ENEMY);
    gf_InitDockingBay(4, RegionFromId(15), RegionFromId(21), PointFromId(1934244573), gv_pLAYER_03_ENEMY);
    gf_InitDockingBay(5, RegionFromId(16), RegionFromId(22), PointFromId(1003710136), gv_pLAYER_04_ENEMY);
    gf_InitDockingBay(6, RegionFromId(17), RegionFromId(23), PointFromId(2057217452), gv_pLAYER_04_ENEMY);
    //TriggerDebugOutput(1, StringExternal("Param/Value/9E21937B"), true);
    TriggerEnable(gt_ProcDockingBays, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitDockingBays_Init () {
    gt_InitDockingBays = TriggerCreate("gt_InitDockingBays_Func");
    TriggerAddEventMapInit(gt_InitDockingBays);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Docking Bays Transmission and Ping
//--------------------------------------------------------------------------------------------------
bool gt_DockingBaysTransmissionandPing_Func (bool testConds, bool runActions) {
    int auto1FA9FE14_ae;
    int auto1FA9FE14_ai;
    // Variable Declarations
    int lv_i;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_BaysActiveTransmission, true, false);
    auto1FA9FE14_ae = 6;
    auto1FA9FE14_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1FA9FE14_ai >= 0 && lv_i <= auto1FA9FE14_ae) || (auto1FA9FE14_ai <= 0 && lv_i >= auto1FA9FE14_ae) ) ; lv_i += auto1FA9FE14_ai ) {
        gf_SetDockingBayPing(lv_i);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DockingBaysTransmissionandPing_Init () {
    gt_DockingBaysTransmissionandPing = TriggerCreate("gt_DockingBaysTransmissionandPing_Func");
    TriggerAddEventTimePeriodic(gt_DockingBaysTransmissionandPing, (IntToFixed(gv_dockingBaysGracePeriod) + 1.0), c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Proc Docking Bays
//--------------------------------------------------------------------------------------------------
bool gt_ProcDockingBays_Func (bool testConds, bool runActions) {
    int autoB560AD25_ae;
    int autoB560AD25_ai;
    // Variable Declarations
    int lv_currentDockingBayNumber;
    int lv_currentDockingBayArrayNumber;
    unitgroup lv_workersAtBeacon;
    int lv_workersAvailable;
    int lv_workerToLoadIndex;
    int lv_sourceBaseIndex;
    // Variable Initialization
    lv_currentDockingBayNumber = 1;
    lv_workersAtBeacon = UnitGroupEmpty();
    lv_workerToLoadIndex = 1;
    lv_sourceBaseIndex = 3;
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoB560AD25_ae = 5;
    autoB560AD25_ai = 1;
    lv_currentDockingBayArrayNumber = 0;
    for ( ; ( (autoB560AD25_ai >= 0 && lv_currentDockingBayArrayNumber <= autoB560AD25_ae) || (autoB560AD25_ai <= 0 && lv_currentDockingBayArrayNumber >= autoB560AD25_ae) ) ; lv_currentDockingBayArrayNumber += autoB560AD25_ai ) {
        lv_currentDockingBayNumber = (lv_currentDockingBayArrayNumber + 1);
        gv_dockingBays[lv_currentDockingBayArrayNumber].lv_cooldown -= 1;
        if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) == true) && (UnitHasBehavior2(gf_FindDockingBayControlTower(lv_currentDockingBayNumber), "RequestTransfer") == true)) {
            UnitBehaviorRemove(gf_FindDockingBayControlTower(lv_currentDockingBayNumber), "RequestTransfer", c_unitBehaviorCountAll);
            if ((gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner == gv_pLAYER_01_USER)) {
                gf_TransferDockingBayOwnership(lv_currentDockingBayNumber, gv_pLAYER_02_USER);
            }
            else if ((gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner == gv_pLAYER_02_USER)) {
                gf_TransferDockingBayOwnership(lv_currentDockingBayNumber, gv_pLAYER_01_USER);
            }
        }
        if ((UnitGetOwner(gf_FindDockingBayControlTower(lv_currentDockingBayNumber)) != gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner)) {
            gf_TransferDockingBayOwnership(lv_currentDockingBayNumber, UnitGetOwner(gf_FindDockingBayControlTower(lv_currentDockingBayNumber)));
        }
        gf_UpdateDockingBayTextTag(lv_currentDockingBayNumber);
        if ((gv_dockingBays[lv_currentDockingBayArrayNumber].lv_contestedPecent >= 100) && gf_DockingBayBeingCaptured(lv_currentDockingBayNumber)) {
            gf_TransferDockingBayOwnership(lv_currentDockingBayNumber, gf_DecideOwner(lv_currentDockingBayNumber));
            SoundPlayForPlayer(SoundLink("UI_TerranPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            //TriggerDebugOutput(1, (StringExternal("Param/Value/B013D2B2") + IntToText(lv_currentDockingBayNumber) + StringExternal("Param/Value/96847724")), true);
            if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) == true)) {
                TriggerExecute(gt_BayCapturedTransmission, true, false);
            }
        }
        if ((gv_dockingBays[lv_currentDockingBayArrayNumber].lv_contestedPecent < 100) && gf_DockingBayBeingCaptured(lv_currentDockingBayNumber)) {
            gv_dockingBays[lv_currentDockingBayArrayNumber].lv_contestedPecent += gv_dockingBaysCaptureSpeed;
        }
        if (gf_DockingBayUncontested(lv_currentDockingBayNumber)) {
            gv_dockingBays[lv_currentDockingBayArrayNumber].lv_contestedPecent = 0;
        }
        if (gf_DockingBayShuttleArrivalisDue(lv_currentDockingBayNumber)) {
            CutsceneCreateNew("Cutscenes\\ShuttleArrival.SC2Cutscene", gv_dockingBays[lv_currentDockingBayArrayNumber].lv_airlockPosition, 0.0, PlayerGroupAll(), true);
            gv_dockingBays[lv_currentDockingBayArrayNumber].lv_cutscene = CutsceneLastCreated();
            if ((UnitHasBehavior2(gf_FindDockingBayControlTower(lv_currentDockingBayNumber), "RequestMinerals") == true)) {
                gv_dockingBays[lv_currentDockingBayArrayNumber].lv_mode = gv_mODE_MINERALS;
            }
            else if ((UnitHasBehavior2(gf_FindDockingBayControlTower(lv_currentDockingBayNumber), "RequestGas") == true)) {
                gv_dockingBays[lv_currentDockingBayArrayNumber].lv_mode = gv_mODE_GAS;
            }
            else if ((PlayerGroupHasPlayer(gv_enemyGroup, gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) == true) && gf_RollForAmonReinforcements()) {
                gv_dockingBays[lv_currentDockingBayArrayNumber].lv_mode = gv_mODE_REINFORCEMENTS;
            }
            gv_dockingBays[lv_currentDockingBayArrayNumber].lv_cooldown = gv_dockingBaysCooldown;
            //TriggerDebugOutput(1, (StringExternal("Param/Value/4E74C34E") + IntToText(lv_currentDockingBayNumber) + StringExternal("Param/Value/4CCE09D0")), true);
        }
        if (gf_DockingBayShuttleYieldisDue(lv_currentDockingBayNumber)) {
            if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) == true) && (gv_dockingBays[lv_currentDockingBayArrayNumber].lv_mode == gv_mODE_MINERALS)) {
                libCOMI_gf_GivePlayerResources(PointWithOffset(libNtve_gf_PointWithZOffset(gv_dockingBays[lv_currentDockingBayArrayNumber].lv_airlockPosition, 20.0), 0.5, 0.5), libCOMI_ge_CacheResourceType_Mineral, (gv_dockingBays[lv_currentDockingBayArrayNumber].lv_workerCount * gv_dockingBaysRateMinerals), null, null, gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner);
            }
            else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) == true) && (gv_dockingBays[lv_currentDockingBayArrayNumber].lv_mode == gv_mODE_GAS)) {
                libCOMI_gf_GivePlayerResources(PointWithOffset(libNtve_gf_PointWithZOffset(gv_dockingBays[lv_currentDockingBayArrayNumber].lv_airlockPosition, 20.0), 0.5, 0.5), libCOMI_ge_CacheResourceType_Vespene, (gv_dockingBays[lv_currentDockingBayArrayNumber].lv_workerCount * gv_dockingBaysRateGas), null, null, gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner);
            }
            else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) != true) && (gv_dockingBays[lv_currentDockingBayArrayNumber].lv_mode == gv_mODE_REINFORCEMENTS)) {
                gf_DispatchAttackWave(gf_GetBaseIndexbyDockingBayNumber(lv_currentDockingBayNumber), gf_GetRandomOverrunBase(PlayerGroupPlayer(gv_enemyGroup, RandomInt(1, 2))));
            }
            gv_dockingBays[lv_currentDockingBayArrayNumber].lv_mode = gv_mODE_UNSPECIFIED;
            //TriggerDebugOutput(1, (StringExternal("Param/Value/0EA88B95") + IntToText(lv_currentDockingBayNumber) + StringExternal("Param/Value/B6B7CD40")), true);
        }
        if ((PlayerGroupHasPlayer(gv_enemyGroup, gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) != true)) {
            lv_workersAtBeacon = UnitGroupSearch(null, gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner, UnitGetPosition(gf_FindDockingBayWorkerBeacon(lv_currentDockingBayNumber)), 2.0, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_workersAvailable = UnitGroupCount(lv_workersAtBeacon, c_unitCountAlive);
            lv_workerToLoadIndex = 1;
        }
        while ((PlayerGroupHasPlayer(gv_enemyGroup, gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner) != true) && ((lv_workersAvailable >= lv_workerToLoadIndex) && (gv_dockingBays[lv_currentDockingBayArrayNumber].lv_workerCount < gv_dockingBaysWorkersMax))) {
            if ((UnitGetOwner(UnitGroupUnit(lv_workersAtBeacon, lv_workerToLoadIndex)) != gv_dockingBays[lv_currentDockingBayArrayNumber].lv_owner)) {
                lv_workerToLoadIndex += 1;
                continue;
            }
            UnitRemove(UnitGroupUnit(lv_workersAtBeacon, lv_workerToLoadIndex));
            lv_workerToLoadIndex += 1;
            gv_dockingBays[lv_currentDockingBayArrayNumber].lv_workerCount += 1;
            //TriggerDebugOutput(1, (StringExternal("Param/Value/F3AEDE80") + IntToText(lv_currentDockingBayNumber) + StringExternal("Param/Value/04CD8214") + IntToText(gv_dockingBays[lv_currentDockingBayArrayNumber].lv_workerCount) + StringExternal("Param/Value/FE607156")), true);
            gf_UpdateDockingBayWorkerBeacon(lv_currentDockingBayNumber);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ProcDockingBays_Init () {
    gt_ProcDockingBays = TriggerCreate("gt_ProcDockingBays_Func");
    TriggerEnable(gt_ProcDockingBays, false);
    TriggerAddEventTimePeriodic(gt_ProcDockingBays, 1.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initial Transmission
//--------------------------------------------------------------------------------------------------
bool gt_InitialTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Intro1", true, -1);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Intro2", true, -1);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Intro3", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitialTransmission_Init () {
    gt_InitialTransmission = TriggerCreate("gt_InitialTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Initial Transmission 2
//--------------------------------------------------------------------------------------------------
bool gt_InitialTransmission2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveRevealed", true, PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), RandomInt(1, PlayerGroupCount(libCOMI_gf_HumanPlayers()))));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitialTransmission2_Init () {
    gt_InitialTransmission2 = TriggerCreate("gt_InitialTransmission2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bays Active Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BaysActiveTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BaysActive", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaysActiveTransmission_Init () {
    gt_BaysActiveTransmission = TriggerCreate("gt_BaysActiveTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bay Captured Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BayCapturedTransmission_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BayClaimed", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BayCapturedTransmission_Init () {
    gt_BayCapturedTransmission = TriggerCreate("gt_BayCapturedTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_playerWarnFlag == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    gv_playerWarnFlag = false;
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventUnitCreated(gt_EnemyAttackingQ, null, null, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Status 4500 Transmission
//--------------------------------------------------------------------------------------------------
bool gt_Status4500Transmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 4500.0)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Damage4500", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        Wait(10.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Status4500Transmission_Init () {
    gt_Status4500Transmission = TriggerCreate("gt_Status4500Transmission_Func");
    TriggerAddEventUnitAttacked2(gt_Status4500Transmission, UnitRefFromUnit(UnitFromId(451941872)), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Status 2500 Transmission
//--------------------------------------------------------------------------------------------------
bool gt_Status2500Transmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 2500.0)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Damage2500", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        Wait(10.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Status2500Transmission_Init () {
    gt_Status2500Transmission = TriggerCreate("gt_Status2500Transmission_Func");
    TriggerAddEventUnitAttacked2(gt_Status2500Transmission, UnitRefFromUnit(UnitFromId(451941872)), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Status 1500 Transmission
//--------------------------------------------------------------------------------------------------
bool gt_Status1500Transmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 1500.0)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Damage1500", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        Wait(10.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Status1500Transmission_Init () {
    gt_Status1500Transmission = TriggerCreate("gt_Status1500Transmission_Func");
    TriggerAddEventUnitAttacked2(gt_Status1500Transmission, UnitRefFromUnit(UnitFromId(451941872)), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Status 500 Transmission
//--------------------------------------------------------------------------------------------------
bool gt_Status500Transmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 500.0)) {
        TriggerQueueEnter();
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Damage500", true, -1);
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }
    else {
        Wait(10.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Status500Transmission_Init () {
    gt_Status500Transmission = TriggerCreate("gt_Status500Transmission_Func");
    TriggerAddEventUnitAttacked2(gt_Status500Transmission, UnitRefFromUnit(UnitFromId(451941872)), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveUnderAttack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("EscortUnderAttack", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(15.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveUnderAttack_Init () {
    gt_ObjectiveUnderAttack = TriggerCreate("gt_ObjectiveUnderAttack_Func");
    TriggerAddEventUnitAttacked2(gt_ObjectiveUnderAttack, UnitRefFromUnit(UnitFromId(451941872)), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A ??? Arrival Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusAE28094ArrivalTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusA_Arrive1", true, -1);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusA_Arrive2", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAE28094ArrivalTransmission_Init () {
    gt_BonusAE28094ArrivalTransmission = TriggerCreate("gt_BonusAE28094ArrivalTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A ??? Complete Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusAE28094CompleteTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusA_Complete", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAE28094CompleteTransmission_Init () {
    gt_BonusAE28094CompleteTransmission = TriggerCreate("gt_BonusAE28094CompleteTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A ??? Expire Warning Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusAE28094ExpireWarningTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusA_ExpiryWarning", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAE28094ExpireWarningTransmission_Init () {
    gt_BonusAE28094ExpireWarningTransmission = TriggerCreate("gt_BonusAE28094ExpireWarningTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A ??? Expired Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusAE28094ExpiredTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusA_Expired", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAE28094ExpiredTransmission_Init () {
    gt_BonusAE28094ExpiredTransmission = TriggerCreate("gt_BonusAE28094ExpiredTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B ??? Arrival Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusBE28094ArrivalTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusB_Arrive1", true, -1);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusB_Arrive2", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBE28094ArrivalTransmission_Init () {
    gt_BonusBE28094ArrivalTransmission = TriggerCreate("gt_BonusBE28094ArrivalTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B ??? Complete Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusBE28094CompleteTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusB_Complete", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBE28094CompleteTransmission_Init () {
    gt_BonusBE28094CompleteTransmission = TriggerCreate("gt_BonusBE28094CompleteTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B ??? Expire Warning Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusBE28094ExpireWarningTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusB_ExpiryWarning", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBE28094ExpireWarningTransmission_Init () {
    gt_BonusBE28094ExpireWarningTransmission = TriggerCreate("gt_BonusBE28094ExpireWarningTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B ??? Expired Transmission
//--------------------------------------------------------------------------------------------------
bool gt_BonusBE28094ExpiredTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_BonusB_Expired", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBE28094ExpiredTransmission_Init () {
    gt_BonusBE28094ExpiredTransmission = TriggerCreate("gt_BonusBE28094ExpiredTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Aeries Arrive Transmission
//--------------------------------------------------------------------------------------------------
bool gt_AeriesArriveTransmission_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    Wait(10.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Aeries_Arrive", false, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AeriesArriveTransmission_Init () {
    gt_AeriesArriveTransmission = TriggerCreate("gt_AeriesArriveTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Transmission
//--------------------------------------------------------------------------------------------------
bool gt_DefeatTransmission_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatTransmission_Init () {
    gt_DefeatTransmission = TriggerCreate("gt_DefeatTransmission_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Scramble
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonScramble_Func (bool testConds, bool runActions) {
    unitgroup auto324B387C_g;
    int auto324B387C_u;
    unitgroup autoCE7BEE82_g;
    int autoCE7BEE82_u;
    // Variable Declarations
    unitgroup lv_amonForces;
    unit lv_u;
    // Variable Initialization
    lv_amonForces = UnitGroupAlliance(gv_pLAYER_03_ENEMY, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    auto324B387C_g = lv_amonForces;
    auto324B387C_u = 1;
    for ( ; auto324B387C_u <= UnitGroupCount(auto324B387C_g, c_unitCountAll) ; auto324B387C_u += BoolToInt(lv_u == UnitGroupUnit(auto324B387C_g, auto324B387C_u)) ) {
        lv_u = UnitGroupUnit(auto324B387C_g, auto324B387C_u);
        if (((UnitGetType(lv_u) == "DevastatorBattlesuit") || (UnitGetType(lv_u) == "PrometheusBattlecruiser") || (UnitGetType(lv_u) == "FirebirdBattlecruiser"))) {
            UnitGroupRemove(lv_amonForces, lv_u);
        }
        else {
            libHots_gf_StorePointForUnit(lv_u, 1, UnitGetPosition(lv_u));
            libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lv_u, 1));
        }
    }
    if ((EventUnitDamageSourceUnit() != null)) {
        UnitGroupIssueOrder(lv_amonForces, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueAddToFront);
    }
    else {
        UnitGroupIssueOrder(lv_amonForces, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitFromId(574703814))), c_orderQueueAddToFront);
    }
    Wait(60.0, c_timeAI);
    autoCE7BEE82_g = lv_amonForces;
    autoCE7BEE82_u = 1;
    for ( ; autoCE7BEE82_u <= UnitGroupCount(autoCE7BEE82_g, c_unitCountAll) ; autoCE7BEE82_u += BoolToInt(lv_u == UnitGroupUnit(autoCE7BEE82_g, autoCE7BEE82_u)) ) {
        lv_u = UnitGroupUnit(autoCE7BEE82_g, autoCE7BEE82_u);
        UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("attack", 0), libHots_gf_PointStoredForUnit(lv_u, 1)), c_orderQueueReplace);
    }
    Wait(60.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IonCannonScramble_Init () {
    gt_IonCannonScramble = TriggerCreate("gt_IonCannonScramble_Func");
    TriggerAddEventUnitDamaged(gt_IonCannonScramble, UnitRefFromUnit(UnitFromId(574703814)), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Aeries Birth
//--------------------------------------------------------------------------------------------------
bool gt_AeriesBirth_Func (bool testConds, bool runActions) {
    unitgroup auto30748D97_g;
    int auto30748D97_u;
    unitgroup autoD1BBBDD0_g;
    int autoD1BBBDD0_u;
    int autoABA0C9BF_ae;
    int autoABA0C9BF_ai;
    // Variable Declarations
    int lv_i;
    unit lv_u;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_ProcAmonBases, false);
    TriggerEnable(gt_TheShowdown, false);
    TriggerEnable(gt_BonusProc, false);
    TriggerExecute(gt_ObjectiveDestroyPrometheusE28094Failed, true, false);
    TriggerExecute(gt_ObjectiveDestroyFirebirdE28094Failed, true, false);
    TriggerExecute(gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed, true, false);
    TriggerExecute(gt_BonusAExpire, false, false);
    TriggerExecute(gt_BonusBExpire, false, false);
    TriggerExecute(gt_ObjectiveDestroytheIonCannonE28094Complete, true, false);
    TriggerExecute(gt_ObjectiveKillAeriesE28094Create, true, false);
    libNtve_gf_UnitCreateFacingPoint(1, "Aeries", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_enemyGroup, RandomInt(1, 2)), PointFromId(927027053), UnitGetPosition(UnitFromId(451941872)));
    gv_aeries = UnitLastCreated();
    UnitIssueOrder(gv_aeries, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(451941872)), c_orderQueueReplace);
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_HumanPlayers(), UnitGetPosition(gv_aeries), 270.0, "PingBoss", ColorWithAlpha(95.69, 0.00, 0.00, 0.00), 65535.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/64FCA45C"));
    PingSetUnit(PingLastCreated(), gv_aeries);
    libHots_gf_StorePingForUnit(gv_aeries, 1, PingLastCreated());
    libCOMI_gf_CreateRevealerCoop(gv_pLAYER_01_USER, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aeries), 1.5, PointFromId(519800915)), 15.0));
    gv_aeriesRevealer1 = VisRevealerLastCreated();
    libCOMI_gf_CreateRevealerCoop(gv_pLAYER_02_USER, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aeries), (10.0 * UnitGetPropertyFixed(gv_aeries, c_unitPropMovementSpeedCurrent, c_unitPropCurrent)), PointFromId(519800915)), 15.0));
    gv_aeriesRevealer2 = VisRevealerLastCreated();
    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundtrackPlay(libCOMI_gf_HumanPlayers(), c_soundtrackCategoryMusic, "ZLab03MusicOnslaught", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_AeriesTaunt, false, false);
    TriggerEnable(gt_VictoryAeriesDead, true);
    TriggerEnable(gt_AeriesTaunt, true);
    TriggerEnable(gt_AeriesProc, true);
    TriggerExecute(gt_AeriesArriveTransmission, true, false);
    auto30748D97_g = UnitGroupAlliance(PlayerGroupPlayer(gv_enemyGroup, 1), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto30748D97_u = 1;
    for ( ; auto30748D97_u <= UnitGroupCount(auto30748D97_g, c_unitCountAll) ; auto30748D97_u += BoolToInt(lv_u == UnitGroupUnit(auto30748D97_g, auto30748D97_u)) ) {
        lv_u = UnitGroupUnit(auto30748D97_g, auto30748D97_u);
        if ((UnitGetType(lv_u) != "Aeries")) {
            UnitKill(lv_u);
            Wait(0.05, c_timeGame);
        }
    }
    autoD1BBBDD0_g = UnitGroupAlliance(PlayerGroupPlayer(gv_enemyGroup, 1), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoD1BBBDD0_u = 1;
    for ( ; autoD1BBBDD0_u <= UnitGroupCount(autoD1BBBDD0_g, c_unitCountAll) ; autoD1BBBDD0_u += BoolToInt(lv_u == UnitGroupUnit(autoD1BBBDD0_g, autoD1BBBDD0_u)) ) {
        lv_u = UnitGroupUnit(autoD1BBBDD0_g, autoD1BBBDD0_u);
        if ((UnitGetType(lv_u) != "Aeries")) {
            UnitKill(lv_u);
            Wait(0.05, c_timeGame);
        }
    }
    Wait(1.0, c_timeGame);
    autoABA0C9BF_ae = 6;
    autoABA0C9BF_ai = 1;
    lv_i = 1;
    for ( ; ( (autoABA0C9BF_ai >= 0 && lv_i <= autoABA0C9BF_ae) || (autoABA0C9BF_ai <= 0 && lv_i >= autoABA0C9BF_ae) ) ; lv_i += autoABA0C9BF_ai ) {
        if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), gv_dockingBays[(lv_i - 1)].lv_owner) != true)) {
            if (((lv_i == 1) || (lv_i == 3) || (lv_i == 4))) {
                gf_TransferDockingBayOwnership(lv_i, PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), 1));
            }
            if (((lv_i == 2) || (lv_i == 5) || (lv_i == 6))) {
                gf_TransferDockingBayOwnership(lv_i, PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), 2));
            }
        }
    }
    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AeriesBirth_Init () {
    gt_AeriesBirth = TriggerCreate("gt_AeriesBirth_Func");
    TriggerAddEventUnitDied(gt_AeriesBirth, UnitRefFromUnit(UnitFromId(574703814)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Aeries Taunt
//--------------------------------------------------------------------------------------------------
bool gt_AeriesTaunt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_aeries != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    SoundPlayForPlayer(SoundLink("AeriesTaunt", -1), c_maxPlayers, PlayerGroupAll(), 400.0, 0.0);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(10.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AeriesTaunt_Init () {
    gt_AeriesTaunt = TriggerCreate("gt_AeriesTaunt_Func");
    TriggerEnable(gt_AeriesTaunt, false);
    TriggerAddEventUnitProperty(gt_AeriesTaunt, UnitRefFromVariable("gv_aeries"), c_unitPropKills);
    TriggerAddEventUnitDamaged(gt_AeriesTaunt, UnitRefFromVariable("gv_aeries"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventTimePeriodic(gt_AeriesTaunt, 30.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Aeries Proc
//--------------------------------------------------------------------------------------------------
bool gt_AeriesProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_aeriesLoc;
    point lv_galateaLoc;
    fixed lv_offset;
    // Variable Initialization
    lv_aeriesLoc = UnitGetPosition(gv_aeries);
    lv_galateaLoc = UnitGetPosition(UnitFromId(451941872));
    lv_offset = 25.0;
    // Conditions
    if (testConds) {
        if (!((gv_aeries != null))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    while ((DistanceBetweenPoints(lv_aeriesLoc, lv_galateaLoc) > (lv_offset + 0.0))) {
        libCOMI_gf_CreatePingWithPointFacingCoop(libCOMI_gf_HumanPlayers(), "PingArrow", libNtve_gf_PointOffsetTowardsPoint(lv_aeriesLoc, lv_offset, lv_galateaLoc), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, gv_pLAYER_03_ENEMY);
        PingSetRotation(PingLastCreated(), ATan2((PointGetX(UnitGetPosition(gv_aeries)) - PointGetX(UnitGetPosition(UnitFromId(451941872)))), (PointGetY(UnitGetPosition(gv_aeries)) - PointGetY(UnitGetPosition(UnitFromId(451941872))))));
        PingSetRotation(PingLastCreated(), ATan2((PointGetX(UnitGetPosition(UnitFromId(451941872))) - PointGetX(UnitGetPosition(gv_aeries))), (PointGetY(UnitGetPosition(UnitFromId(451941872))) - PointGetY(UnitGetPosition(gv_aeries)))));
        lv_offset += 25.0;
        Wait(0.5, c_timeGame);
    }
    libCOMI_gf_DestroyRevealerCoop(gv_aeriesRevealer1);
    libCOMI_gf_DestroyRevealerCoop(gv_aeriesRevealer2);
    libCOMI_gf_CreateRevealerCoop(gv_pLAYER_01_USER, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aeries), 1.5, PointFromId(519800915)), 15.0));
    gv_aeriesRevealer1 = VisRevealerLastCreated();
    libCOMI_gf_CreateRevealerCoop(gv_pLAYER_02_USER, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_aeries), (10.0 * UnitGetPropertyFixed(gv_aeries, c_unitPropMovementSpeedCurrent, c_unitPropCurrent)), PointFromId(519800915)), 15.0));
    gv_aeriesRevealer2 = VisRevealerLastCreated();
    SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AeriesProc_Init () {
    gt_AeriesProc = TriggerCreate("gt_AeriesProc_Func");
    TriggerEnable(gt_AeriesProc, false);
    TriggerAddEventTimePeriodic(gt_AeriesProc, 10.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: The Showdown
//--------------------------------------------------------------------------------------------------
bool gt_TheShowdown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, gv_sHOWDOWN_WINDOW), c_timeGame);
    UnitKill(UnitFromId(574703814));
    while (true) {
        Wait(5.0, c_timeGame);
        if ((gv_aeries != null)) {
            UnitBehaviorAdd(gv_aeries, "VoidEmpower", gv_aeries, 1);
            break;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TheShowdown_Init () {
    gt_TheShowdown = TriggerCreate("gt_TheShowdown_Func");
    TriggerAddEventTimePeriodic(gt_TheShowdown, FixedToInt(gv_sHOWDOWN_START), c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Proc
//--------------------------------------------------------------------------------------------------
bool gt_BonusProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_missionTime;
    int lv_roll;
    // Variable Initialization
    lv_missionTime = GameGetMissionTime();
    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() >= gv_bONUS_OBJECTIVE_SPAWN_START))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_bonusADevastatorBattlesuit != null) && (gv_bonusBFirebird != null) && (gv_bonusBPrometheus != null)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    if ((lv_missionTime >= gv_bONUS_OBJECTIVE_SPAWN_DEADLINE)) {
        lv_roll = 0;
    }
    else {
        lv_roll = RandomInt(0, 1000);
    }
    if ((lv_roll < gv_bONUS_SPAWN_PROBABILITY)) {
        if ((gv_bonusADevastatorBattlesuit == null) && (gv_bonusBFirebird != null) && (gv_bonusBPrometheus != null)) {
            TriggerExecute(gt_BonusACreate, true, false);
            return true;
        }
        else if ((gv_bonusADevastatorBattlesuit != null) && (gv_bonusBFirebird == null) && (gv_bonusBPrometheus == null)) {
            TriggerExecute(gt_BonusBCreate, true, false);
            return true;
        }
        else if ((gv_bonusADevastatorBattlesuit == null) && (gv_bonusBFirebird == null) && (gv_bonusBPrometheus == null)) {
            if ((RandomInt(1, 2) == 1)) {
                TriggerExecute(gt_BonusACreate, true, false);
                return true;
            }
            else {
                TriggerExecute(gt_BonusBCreate, true, false);
                return true;
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusProc_Init () {
    gt_BonusProc = TriggerCreate("gt_BonusProc_Func");
    TriggerAddEventTimePeriodic(gt_BonusProc, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A Create
//--------------------------------------------------------------------------------------------------
bool gt_BonusACreate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/4780C3E6"), true);
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DevastatorBattlesuit", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_enemyGroup, RandomInt(1, 2)), PointFromId(804273588));
    gv_bonusADevastatorBattlesuit = UnitLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusADevastatorBattlesuit), StringExternal("Param/Value/2502A0C8"));
    libHots_gf_StorePingForUnit(gv_bonusADevastatorBattlesuit, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveDestroyDevastatorBattlesuitE28094Create, true, false);
    gv_timer_A = TimerCreate();
    TimerStart(gv_timer_A, gv_bONUS_OBJECTIVE_LIFE, false, c_timeGame);
    TriggerEnable(gt_BonusAExpire, true);
    TriggerEnable(gt_BonusAExpiryReminder, true);
    TriggerEnable(gt_BonusAPauseTimer, true);
    TriggerEnable(gt_BonusAComplete, true);
    TriggerExecute(gt_BonusAE28094ArrivalTransmission, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusACreate_Init () {
    gt_BonusACreate = TriggerCreate("gt_BonusACreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A Expiry Reminder
//--------------------------------------------------------------------------------------------------
bool gt_BonusAExpiryReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_bonusADevastatorBattlesuit != null))) {
            return false;
        }
        if (!((ObjectiveGetState(gv_objectiveE28094DestroyDevastatorBattlesuit) == c_objectiveStateActive))) {
            return false;
        }
        if (!((TimerGetDuration(gv_timer_A) <= 120.0))) {
            return false;
        }
        if (!((TimerGetDuration(gv_timer_A) != 0.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusAE28094ExpireWarningTransmission, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAExpiryReminder_Init () {
    gt_BonusAExpiryReminder = TriggerCreate("gt_BonusAExpiryReminder_Func");
    TriggerEnable(gt_BonusAExpiryReminder, false);
    TriggerAddEventTimePeriodic(gt_BonusAExpiryReminder, 5.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A Expire
//--------------------------------------------------------------------------------------------------
bool gt_BonusAExpire_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_timer_A))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/570935FB"), true);
    TriggerExecute(gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed, true, false);
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_bonusADevastatorBattlesuit, 1));
    libNtve_gf_ShowHideUnit(gv_bonusADevastatorBattlesuit, false);
    if ((UnitIsAlive(UnitFromId(574703814)) == true)) {
        TriggerExecute(gt_BonusAE28094ExpiredTransmission, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAExpire_Init () {
    gt_BonusAExpire = TriggerCreate("gt_BonusAExpire_Func");
    TriggerEnable(gt_BonusAExpire, false);
    TriggerAddEventTimer(gt_BonusAExpire, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A Pause Timer
//--------------------------------------------------------------------------------------------------
bool gt_BonusAPauseTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/372A3E46"), true);
    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_timer_A, true);
    Wait(5.0, c_timeGame);
    TimerPause(gv_timer_A, false);
    TriggerEnable(TriggerGetCurrent(), true);
    //TriggerDebugOutput(1, StringExternal("Param/Value/E13EE088"), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAPauseTimer_Init () {
    gt_BonusAPauseTimer = TriggerCreate("gt_BonusAPauseTimer_Func");
    TriggerEnable(gt_BonusAPauseTimer, false);
    TriggerAddEventUnitDamaged(gt_BonusAPauseTimer, UnitRefFromVariable("gv_bonusADevastatorBattlesuit"), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus A Complete
//--------------------------------------------------------------------------------------------------
bool gt_BonusAComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/F94F0BD3"), true);
    libNtve_gf_StopTimer(gv_timer_A);
    TriggerExecute(gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete, true, false);
    TriggerEnable(gt_BonusACreate, false);
    TriggerEnable(gt_BonusAExpire, false);
    TriggerEnable(gt_BonusAPauseTimer, false);
    TriggerEnable(gt_BonusAComplete, false);
    TriggerExecute(gt_BonusAE28094CompleteTransmission, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusAComplete_Init () {
    gt_BonusAComplete = TriggerCreate("gt_BonusAComplete_Func");
    TriggerEnable(gt_BonusAComplete, false);
    TriggerAddEventUnitDied(gt_BonusAComplete, UnitRefFromVariable("gv_bonusADevastatorBattlesuit"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B Create
//--------------------------------------------------------------------------------------------------
bool gt_BonusBCreate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/D6E108E0"), true);
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrometheusBattlecruiser", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_enemyGroup, RandomInt(1, 2)), PointFromId(511808657));
    gv_bonusBPrometheus = UnitLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusBPrometheus), StringExternal("Param/Value/AB732B40"));
    libHots_gf_StorePingForUnit(gv_bonusBPrometheus, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveDestroyPrometheusE28094Create, true, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirebirdBattlecruiser", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_enemyGroup, RandomInt(1, 2)), PointFromId(597925282));
    gv_bonusBFirebird = UnitLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(gv_bonusBFirebird), StringExternal("Param/Value/D73FD4ED"));
    libHots_gf_StorePingForUnit(gv_bonusBFirebird, 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveDestroyFirebirdE28094Create, true, false);
    gv_timer_B = TimerCreate();
    TimerStart(gv_timer_B, gv_bONUS_OBJECTIVE_LIFE, false, c_timeGame);
    TriggerEnable(gt_BonusBProc, true);
    TriggerEnable(gt_BonusBExpire, true);
    TriggerEnable(gt_BonusBPauseTimer, true);
    TriggerEnable(gt_BonusBPauseTimer, true);
    TriggerEnable(gt_BonusBComplete1, true);
    TriggerEnable(gt_BonusBComplete2, true);
    TriggerExecute(gt_BonusBE28094ArrivalTransmission, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBCreate_Init () {
    gt_BonusBCreate = TriggerCreate("gt_BonusBCreate_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B Proc
//--------------------------------------------------------------------------------------------------
bool gt_BonusBProc_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitMoverExists(EventUnitDamageSourceUnit(), "Fly") != true)) {
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    if ((gv_bonusBReinforcements1 <= 0) && (UnitGetPropertyFixed(gv_bonusBPrometheus, c_unitPropLife, c_unitPropCurrent) <= 1500.0)) {
        gv_bonusBReinforcements1 += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(gf_WraithEscortQuantity(gv_bonusBReinforcements1), "Wraith", 0, gv_pLAYER_03_ENEMY, PointFromId(627362617));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }
    else if ((gv_bonusBReinforcements1 <= 1) && (UnitGetPropertyFixed(gv_bonusBPrometheus, c_unitPropLife, c_unitPropCurrent) <= 1000.0)) {
        gv_bonusBReinforcements1 += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(gf_WraithEscortQuantity(gv_bonusBReinforcements1), "Wraith", 0, gv_pLAYER_03_ENEMY, PointFromId(627362617));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }
    else if ((gv_bonusBReinforcements1 <= 2) && (UnitGetPropertyFixed(gv_bonusBPrometheus, c_unitPropLife, c_unitPropCurrent) <= 500.0)) {
        gv_bonusBReinforcements1 += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(gf_WraithEscortQuantity(gv_bonusBReinforcements1), "Wraith", 0, gv_pLAYER_03_ENEMY, PointFromId(627362617));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }
    if ((gv_bonusBReinforcements2 <= 0) && (UnitGetPropertyFixed(gv_bonusBFirebird, c_unitPropLife, c_unitPropCurrent) <= 1500.0)) {
        gv_bonusBReinforcements2 += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(gf_WraithEscortQuantity(gv_bonusBReinforcements2), "Wraith", 0, gv_pLAYER_03_ENEMY, PointFromId(627362617));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }
    else if ((gv_bonusBReinforcements2 <= 1) && (UnitGetPropertyFixed(gv_bonusBFirebird, c_unitPropLife, c_unitPropCurrent) <= 1000.0)) {
        gv_bonusBReinforcements2 += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(gf_WraithEscortQuantity(gv_bonusBReinforcements2), "Wraith", 0, gv_pLAYER_03_ENEMY, PointFromId(627362617));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }
    else if ((gv_bonusBReinforcements2 <= 2) && (UnitGetPropertyFixed(gv_bonusBFirebird, c_unitPropLife, c_unitPropCurrent) <= 500.0)) {
        gv_bonusBReinforcements2 += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(gf_WraithEscortQuantity(gv_bonusBReinforcements2), "Wraith", 0, gv_pLAYER_03_ENEMY, PointFromId(627362617));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBProc_Init () {
    gt_BonusBProc = TriggerCreate("gt_BonusBProc_Func");
    TriggerEnable(gt_BonusBProc, false);
    TriggerAddEventUnitDamaged(gt_BonusBProc, UnitRefFromVariable("gv_bonusBPrometheus"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_BonusBProc, UnitRefFromVariable("gv_bonusBFirebird"), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B Expiry Reminder
//--------------------------------------------------------------------------------------------------
bool gt_BonusBExpiryReminder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_bonusBPrometheus != null) || (gv_bonusBFirebird != null)))) {
            return false;
        }
        if (!((TimerGetDuration(gv_timer_B) <= 120.0))) {
            return false;
        }
        if (!((TimerGetDuration(gv_timer_B) != 0.0))) {
            return false;
        }
        if (!((ObjectiveGetState(gv_objectiveE28094DestroyDevastatorBattlesuit) == c_objectiveStateActive))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_BonusBE28094ExpireWarningTransmission, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBExpiryReminder_Init () {
    gt_BonusBExpiryReminder = TriggerCreate("gt_BonusBExpiryReminder_Func");
    TriggerEnable(gt_BonusBExpiryReminder, false);
    TriggerAddEventTimePeriodic(gt_BonusBExpiryReminder, 5.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B Expire
//--------------------------------------------------------------------------------------------------
bool gt_BonusBExpire_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventTimer() == gv_timer_B))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/2AB29ECB"), true);
    TriggerExecute(gt_ObjectiveDestroyPrometheusE28094Failed, true, false);
    TriggerExecute(gt_ObjectiveDestroyFirebirdE28094Failed, true, false);
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_bonusBPrometheus, 1));
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(gv_bonusBFirebird, 1));
    libNtve_gf_ShowHideUnit(gv_bonusBPrometheus, false);
    libNtve_gf_ShowHideUnit(gv_bonusBFirebird, false);
    if ((UnitIsAlive(UnitFromId(574703814)) == true)) {
        TriggerExecute(gt_BonusBE28094ExpiredTransmission, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBExpire_Init () {
    gt_BonusBExpire = TriggerCreate("gt_BonusBExpire_Func");
    TriggerEnable(gt_BonusBExpire, false);
    TriggerAddEventTimer(gt_BonusBExpire, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B Pause Timer
//--------------------------------------------------------------------------------------------------
bool gt_BonusBPauseTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    //TriggerDebugOutput(1, StringExternal("Param/Value/786E8160"), true);
    TimerPause(gv_timer_B, true);
    Wait(5.0, c_timeGame);
    TimerPause(gv_timer_B, false);
    TriggerEnable(TriggerGetCurrent(), true);
    //TriggerDebugOutput(1, StringExternal("Param/Value/DDA3BB1E"), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBPauseTimer_Init () {
    gt_BonusBPauseTimer = TriggerCreate("gt_BonusBPauseTimer_Func");
    TriggerEnable(gt_BonusBPauseTimer, false);
    TriggerAddEventUnitDamaged(gt_BonusBPauseTimer, UnitRefFromVariable("gv_bonusBFirebird"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_BonusBPauseTimer, UnitRefFromVariable("gv_bonusBPrometheus"), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B Complete 1
//--------------------------------------------------------------------------------------------------
bool gt_BonusBComplete1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/896D3E98"), true);
    TriggerExecute(gt_ObjectiveDestroyPrometheusE28094Complete, true, false);
    TriggerEnable(gt_BonusBComplete1, false);
    if ((TriggerIsEnabled(gt_BonusBComplete1) != true) && (TriggerIsEnabled(gt_BonusBComplete2) != true)) {
        //TriggerDebugOutput(1, StringExternal("Param/Value/59D2E84F"), true);
        libNtve_gf_StopTimer(gv_timer_B);
        TriggerEnable(gt_BonusBCreate, false);
        TriggerEnable(gt_BonusBExpire, false);
        TriggerEnable(gt_BonusBPauseTimer, false);
        TriggerExecute(gt_BonusBE28094CompleteTransmission, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBComplete1_Init () {
    gt_BonusBComplete1 = TriggerCreate("gt_BonusBComplete1_Func");
    TriggerEnable(gt_BonusBComplete1, false);
    TriggerAddEventUnitDied(gt_BonusBComplete1, UnitRefFromVariable("gv_bonusBPrometheus"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Bonus B Complete 2
//--------------------------------------------------------------------------------------------------
bool gt_BonusBComplete2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    //TriggerDebugOutput(1, StringExternal("Param/Value/95B8FF1B"), true);
    TriggerExecute(gt_ObjectiveDestroyFirebirdE28094Complete, true, false);
    TriggerEnable(gt_BonusBComplete2, false);
    if ((TriggerIsEnabled(gt_BonusBComplete1) != true) && (TriggerIsEnabled(gt_BonusBComplete2) != true)) {
        //TriggerDebugOutput(1, StringExternal("Param/Value/959EB35C"), true);
        libNtve_gf_StopTimer(gv_timer_B);
        TriggerEnable(gt_BonusBCreate, false);
        TriggerEnable(gt_BonusBExpire, false);
        TriggerEnable(gt_BonusBPauseTimer, false);
        TriggerExecute(gt_BonusBE28094CompleteTransmission, true, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BonusBComplete2_Init () {
    gt_BonusBComplete2 = TriggerCreate("gt_BonusBComplete2_Func");
    TriggerEnable(gt_BonusBComplete2, false);
    TriggerAddEventUnitDied(gt_BonusBComplete2, UnitRefFromVariable("gv_bonusBFirebird"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
    libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
    AIStart(gv_pLAYER_05_LOCALS, true, 45);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Init Amon Bases
//--------------------------------------------------------------------------------------------------
bool gt_InitAmonBases_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_InitAmonBase(0, gv_pLAYER_03_ENEMY, RegionFromId(5), gv_aMON_BASE_ROOT);
    gf_InitAmonBase(1, gv_pLAYER_03_ENEMY, RegionFromId(3), gv_aMON_BASE_OUTPOST);
    gf_InitAmonBase(2, gv_pLAYER_03_ENEMY, RegionFromId(1), gv_aMON_BASE_OUTPOST);
    gf_InitAmonBase(3, gv_pLAYER_03_ENEMY, RegionFromId(20), gv_aMON_BASE_DOCKING_BAY);
    gf_InitAmonBase(4, gv_pLAYER_03_ENEMY, RegionFromId(21), gv_aMON_BASE_DOCKING_BAY);
    gf_InitAmonBase(5, gv_pLAYER_03_ENEMY, RegionFromId(18), gv_aMON_BASE_DOCKING_BAY);
    gf_InitAmonBase(6, gv_pLAYER_03_ENEMY, RegionFromId(49), gv_aMON_BASE_OUTPOST);
    gf_InitAmonBase(7, gv_pLAYER_04_ENEMY, RegionFromId(6), gv_aMON_BASE_ROOT);
    gf_InitAmonBase(8, gv_pLAYER_04_ENEMY, RegionFromId(3), gv_aMON_BASE_OUTPOST);
    gf_InitAmonBase(9, gv_pLAYER_04_ENEMY, RegionFromId(2), gv_aMON_BASE_OUTPOST);
    gf_InitAmonBase(10, gv_pLAYER_04_ENEMY, RegionFromId(23), gv_aMON_BASE_DOCKING_BAY);
    gf_InitAmonBase(11, gv_pLAYER_04_ENEMY, RegionFromId(22), gv_aMON_BASE_DOCKING_BAY);
    gf_InitAmonBase(12, gv_pLAYER_04_ENEMY, RegionFromId(19), gv_aMON_BASE_DOCKING_BAY);
    gf_InitAmonBase(13, gv_pLAYER_04_ENEMY, RegionFromId(49), gv_aMON_BASE_OUTPOST);
    TriggerEnable(gt_ProcAmonBases, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InitAmonBases_Init () {
    gt_InitAmonBases = TriggerCreate("gt_InitAmonBases_Func");
    TriggerAddEventMapInit(gt_InitAmonBases);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Proc Amon Bases
//--------------------------------------------------------------------------------------------------
bool gt_ProcAmonBases_Func (bool testConds, bool runActions) {
    int auto9F2950CF_ae;
    int auto9F2950CF_ai;
    // Variable Declarations
    int lv_i;
    bool lv_allDockingBaysOverrun;
    // Variable Initialization
    lv_allDockingBaysOverrun = true;
    // Actions
    if (!runActions) {
        return true;
    }
    gf_UpdateAmonBasesOverrunStatus();
    auto9F2950CF_ae = 13;
    auto9F2950CF_ai = 1;
    lv_i = 0;
    for ( ; ( (auto9F2950CF_ai >= 0 && lv_i <= auto9F2950CF_ae) || (auto9F2950CF_ai <= 0 && lv_i >= auto9F2950CF_ae) ) ; lv_i += auto9F2950CF_ai ) {
        if ((gv_amonBases[lv_i].lv_overrunStatus == false) && (gv_amonBases[lv_i].lv_type == gv_aMON_BASE_DOCKING_BAY)) {
            lv_allDockingBaysOverrun = false;
        }
    }
    if ((lv_allDockingBaysOverrun == true)) {
        gf_DispatchAttackWave(gf_GetRandomNotOverrunBase(PlayerGroupPlayer(gv_enemyGroup, RandomInt(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY))), gf_GetRandomOverrunBase(PlayerGroupPlayer(gv_enemyGroup, RandomInt(1, 2))));
    }
    else {
        return true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ProcAmonBases_Init () {
    gt_ProcAmonBases = TriggerCreate("gt_ProcAmonBases_Func");
    TriggerEnable(gt_ProcAmonBases, false);
    TriggerAddEventTimePeriodic(gt_ProcAmonBases, 15.0, c_timeAI);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ping Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_PingCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PingCleanup_Init () {
    gt_PingCleanup = TriggerCreate("gt_PingCleanup_Func");
    TriggerAddEventUnitDied(gt_PingCleanup, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Galatea Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatGalateaDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_AeriesProc, false);
    TriggerEnable(gt_ProcDockingBays, false);
    TriggerEnable(gt_BonusProc, false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
    TransmissionClearAll();
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerExecute(gt_DefeatTransmission, true, false);
    libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
    TriggerExecute(gt_ObjectiveGalateaMustSurviveE28094Failed, true, false);
    TriggerExecute(gt_ObjectiveDestroytheIonCannonE28094Failed, true, false);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/79462FB3"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraPan(gv_pLAYER_01_USER, gv_capitalShipyardPan, 1.5, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_capitalShipyardPan, 1.5, -1, 10.0, false);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(4.0, c_timeReal);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefeatGalateaDestroyed_Init () {
    gt_DefeatGalateaDestroyed = TriggerCreate("gt_DefeatGalateaDestroyed_Func");
    TriggerAddEventUnitDied(gt_DefeatGalateaDestroyed, UnitRefFromUnit(UnitFromId(451941872)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Aeries Dead
//--------------------------------------------------------------------------------------------------
bool gt_VictoryAeriesDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_victoryCompletePan = UnitGetPosition(EventUnit());
    TriggerExecute(gt_ObjectiveKillAeriesE28094Complete, true, false);
    TriggerExecute(gt_ObjectiveGalateaMustSurviveE28094Complete, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryAeriesDead_Init () {
    gt_VictoryAeriesDead = TriggerCreate("gt_VictoryAeriesDead_Func");
    TriggerEnable(gt_VictoryAeriesDead, false);
    TriggerAddEventUnitDied(gt_VictoryAeriesDead, UnitRefFromVariable("gv_aeries"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    Wait(2.0, c_timeReal);
    libCOMI_gf_RunMissionVictorySequence(gt_VictoryFanfareQ);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory Fanfare Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryFanfareQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TransmissionClearAll();
    TriggerQueueEnter();
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    libCOMI_gf_SendMissionTransmission("ac_GalateasAscent_Aeries_Dead", false, -1);
    UnitPauseAll(true);
    CameraLockInput(gv_pLAYER_01_USER, true);
    CameraLockInput(gv_pLAYER_02_USER, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    UnitClearSelection(gv_pLAYER_02_USER);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_01_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
    CameraPan(gv_pLAYER_02_USER, gv_victoryCompletePan, 2.0, -1, 10.0, false);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/684A78B4"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E5C8709E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    TriggerExecute(gt_Victory, true, false);
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VictoryFanfareQ_Init () {
    gt_VictoryFanfareQ = TriggerCreate("gt_VictoryFanfareQ_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy the Ion Cannon ??? Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheIonCannonE28094Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_GalateasAscent_Primary_IonCannon");
    gv_objectiveE28094DestroytheIonCannon = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 10);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(574703814)), StringExternal("Param/Value/D23100AC"));
    libHots_gf_StorePingForUnit(UnitFromId(574703814), 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveDestroytheIonCannonE28094Update, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheIonCannonE28094Create_Init () {
    gt_ObjectiveDestroytheIonCannonE28094Create = TriggerCreate("gt_ObjectiveDestroytheIonCannonE28094Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy the Ion Cannon ??? Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheIonCannonE28094Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheIonCannonE28094Create, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_GalateasAscent_Primary_IonCannon", 1);
    ObjectiveSetState(gv_objectiveE28094DestroytheIonCannon, c_objectiveStateCompleted);
    TriggerEnable(gt_ObjectiveDestroytheIonCannonE28094Failed, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheIonCannonE28094Complete_Init () {
    gt_ObjectiveDestroytheIonCannonE28094Complete = TriggerCreate("gt_ObjectiveDestroytheIonCannonE28094Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy the Ion Cannon ??? Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheIonCannonE28094Update_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheIonCannonE28094Update_Init () {
    gt_ObjectiveDestroytheIonCannonE28094Update = TriggerCreate("gt_ObjectiveDestroytheIonCannonE28094Update_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy the Ion Cannon ??? Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroytheIonCannonE28094Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroytheIonCannonE28094Create, true, false);
    ObjectiveSetState(gv_objectiveE28094DestroytheIonCannon, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroytheIonCannonE28094Failed_Init () {
    gt_ObjectiveDestroytheIonCannonE28094Failed = TriggerCreate("gt_ObjectiveDestroytheIonCannonE28094Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Galatea Must Survive ??? Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGalateaMustSurviveE28094Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_GalateasAscent_Primary_Galatea");
    gv_objectiveE28094GalateaMustSurvive = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 15);
    libCOMI_gf_DisplayProgressBar(StringExternal("Param/Value/440B0793"), 0, 5000);
    libCOMI_gf_SetProgressBarLabel(StringExternal("Param/Value/9069251F"));
    libCOMI_gf_SetProgressBarColor(Color(42.75, 68.24, 16.86));
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(451941872)), StringExternal("Param/Value/A7C55F60"));
    libHots_gf_StorePingForUnit(UnitFromId(574703814), 1, PingLastCreated());
    TriggerExecute(gt_ObjectiveGalateaMustSurviveE28094Update, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGalateaMustSurviveE28094Create_Init () {
    gt_ObjectiveGalateaMustSurviveE28094Create = TriggerCreate("gt_ObjectiveGalateaMustSurviveE28094Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Galatea Must Survive ??? Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGalateaMustSurviveE28094Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGalateaMustSurviveE28094Create, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_GalateasAscent_Primary_Galatea", 1);
    ObjectiveSetState(gv_objectiveE28094GalateaMustSurvive, c_objectiveStateCompleted);
    TriggerEnable(gt_ObjectiveGalateaMustSurviveE28094Failed, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGalateaMustSurviveE28094Complete_Init () {
    gt_ObjectiveGalateaMustSurviveE28094Complete = TriggerCreate("gt_ObjectiveGalateaMustSurviveE28094Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Galatea Must Survive ??? Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGalateaMustSurviveE28094Update_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ObjectiveGalateaMustSurviveE28094Create, true, false);
    libCOMI_gf_SetProgressBarProgress(FixedToInt(UnitGetPropertyFixed(UnitFromId(451941872), c_unitPropLife, c_unitPropCurrent)));
    libCOMI_gf_SetProgressBarLabel((IntToText(FixedToInt(UnitGetPropertyFixed(UnitFromId(451941872), c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/F79FB5A9")));
    Wait(1.0, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGalateaMustSurviveE28094Update_Init () {
    gt_ObjectiveGalateaMustSurviveE28094Update = TriggerCreate("gt_ObjectiveGalateaMustSurviveE28094Update_Func");
    TriggerAddEventUnitDamaged(gt_ObjectiveGalateaMustSurviveE28094Update, UnitRefFromUnit(UnitFromId(451941872)), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Galatea Must Survive ??? Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveGalateaMustSurviveE28094Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveGalateaMustSurviveE28094Create, true, false);
    ObjectiveSetState(gv_objectiveE28094GalateaMustSurvive, c_objectiveStateFailed);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveGalateaMustSurviveE28094Failed_Init () {
    gt_ObjectiveGalateaMustSurviveE28094Failed = TriggerCreate("gt_ObjectiveGalateaMustSurviveE28094Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Kill Aeries ??? Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAeriesE28094Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_GalateasAscent_Primary_Aeries");
    gv_objectiveE28094KillAeries = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 5);
    TriggerExecute(gt_ObjectiveKillAeriesE28094Update, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAeriesE28094Create_Init () {
    gt_ObjectiveKillAeriesE28094Create = TriggerCreate("gt_ObjectiveKillAeriesE28094Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Kill Aeries ??? Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAeriesE28094Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveKillAeriesE28094Create, true, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_GalateasAscent_Primary_Aeries", 1);
    ObjectiveSetState(gv_objectiveE28094KillAeries, c_objectiveStateCompleted);
    TriggerEnable(gt_ObjectiveKillAeriesE28094Failed, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAeriesE28094Complete_Init () {
    gt_ObjectiveKillAeriesE28094Complete = TriggerCreate("gt_ObjectiveKillAeriesE28094Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Kill Aeries ??? Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAeriesE28094Update_Func (bool testConds, bool runActions) {
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAeriesE28094Update_Init () {
    gt_ObjectiveKillAeriesE28094Update = TriggerCreate("gt_ObjectiveKillAeriesE28094Update_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveKillAeriesE28094Update, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Kill Aeries ??? Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveKillAeriesE28094Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_objectiveE28094KillAeries != c_invalidObjectiveId)) {
        ObjectiveSetState(gv_objectiveE28094KillAeries, c_objectiveStateFailed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveKillAeriesE28094Failed_Init () {
    gt_ObjectiveKillAeriesE28094Failed = TriggerCreate("gt_ObjectiveKillAeriesE28094Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Prometheus ??? Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPrometheusE28094Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_GalateasAscent_BonusB_01");
    gv_objectiveE28094DestroyPrometheus = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 50);
    libCOMI_gf_SetObjectiveTimerCampaign("AC_GalateasAscent_BonusB_01", gv_timer_B);
    libCOMI_gf_SetObjectiveTimerColorThresholdCampaign("AC_GalateasAscent_BonusB_01", libCOMI_ge_ObjectiveTimerThresholds_Red, 120);
    TriggerExecute(gt_ObjectiveDestroyPrometheusE28094Update, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPrometheusE28094Create_Init () {
    gt_ObjectiveDestroyPrometheusE28094Create = TriggerCreate("gt_ObjectiveDestroyPrometheusE28094Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Prometheus ??? Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPrometheusE28094Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_objectiveE28094DestroyPrometheus != c_invalidObjectiveId))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyPrometheusE28094Failed, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_GalateasAscent_BonusB_01", 1);
    ObjectiveSetState(gv_objectiveE28094DestroyPrometheus, c_objectiveStateCompleted);
    TriggerEnable(gt_ObjectiveDestroyPrometheusE28094Failed, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPrometheusE28094Complete_Init () {
    gt_ObjectiveDestroyPrometheusE28094Complete = TriggerCreate("gt_ObjectiveDestroyPrometheusE28094Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Prometheus ??? Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPrometheusE28094Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_objectiveE28094DestroyPrometheus != c_invalidObjectiveId))) {
            return false;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPrometheusE28094Update_Init () {
    gt_ObjectiveDestroyPrometheusE28094Update = TriggerCreate("gt_ObjectiveDestroyPrometheusE28094Update_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveDestroyPrometheusE28094Update, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Prometheus ??? Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyPrometheusE28094Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_objectiveE28094DestroyPrometheus != c_invalidObjectiveId))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyPrometheusE28094Complete, false);
    if ((gv_objectiveE28094DestroyDevastatorBattlesuit != c_invalidObjectiveId)) {
        ObjectiveSetState(gv_objectiveE28094DestroyPrometheus, c_objectiveStateFailed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyPrometheusE28094Failed_Init () {
    gt_ObjectiveDestroyPrometheusE28094Failed = TriggerCreate("gt_ObjectiveDestroyPrometheusE28094Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Firebird ??? Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFirebirdE28094Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_GalateasAscent_BonusB_02");
    gv_objectiveE28094DestroyFirebird = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 50);
    libCOMI_gf_SetObjectiveTimerCampaign("AC_GalateasAscent_BonusB_02", gv_timer_B);
    libCOMI_gf_SetObjectiveTimerColorThresholdCampaign("AC_GalateasAscent_BonusB_02", libCOMI_ge_ObjectiveTimerThresholds_Red, 120);
    TriggerExecute(gt_ObjectiveDestroyFirebirdE28094Update, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFirebirdE28094Create_Init () {
    gt_ObjectiveDestroyFirebirdE28094Create = TriggerCreate("gt_ObjectiveDestroyFirebirdE28094Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Firebird ??? Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFirebirdE28094Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_objectiveE28094DestroyFirebird != c_invalidObjectiveId))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyFirebirdE28094Failed, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_GalateasAscent_BonusB_02", 1);
    ObjectiveSetState(gv_objectiveE28094DestroyFirebird, c_objectiveStateCompleted);
    TriggerEnable(gt_ObjectiveDestroyFirebirdE28094Failed, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFirebirdE28094Complete_Init () {
    gt_ObjectiveDestroyFirebirdE28094Complete = TriggerCreate("gt_ObjectiveDestroyFirebirdE28094Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Firebird ??? Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFirebirdE28094Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_objectiveE28094DestroyFirebird != c_invalidObjectiveId))) {
            return false;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFirebirdE28094Update_Init () {
    gt_ObjectiveDestroyFirebirdE28094Update = TriggerCreate("gt_ObjectiveDestroyFirebirdE28094Update_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveDestroyFirebirdE28094Update, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Firebird ??? Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyFirebirdE28094Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_objectiveE28094DestroyFirebird != c_invalidObjectiveId))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyFirebirdE28094Complete, false);
    if ((gv_objectiveE28094DestroyFirebird != c_invalidObjectiveId)) {
        ObjectiveSetState(gv_objectiveE28094DestroyFirebird, c_objectiveStateFailed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyFirebirdE28094Failed_Init () {
    gt_ObjectiveDestroyFirebirdE28094Failed = TriggerCreate("gt_ObjectiveDestroyFirebirdE28094Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Devastator Battlesuit ??? Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDevastatorBattlesuitE28094Create_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreateObjectiveCampaign("AC_GalateasAscent_BonusA");
    gv_objectiveE28094DestroyDevastatorBattlesuit = ObjectiveLastCreated();
    ObjectiveSetPriority(ObjectiveLastCreated(), 50);
    libCOMI_gf_SetObjectiveTimerCampaign("AC_GalateasAscent_BonusA", gv_timer_A);
    libCOMI_gf_SetObjectiveTimerColorThresholdCampaign("AC_GalateasAscent_BonusA", libCOMI_ge_ObjectiveTimerThresholds_Red, 120);
    TriggerExecute(gt_ObjectiveDestroyDevastatorBattlesuitE28094Update, true, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDevastatorBattlesuitE28094Create_Init () {
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Create = TriggerCreate("gt_ObjectiveDestroyDevastatorBattlesuitE28094Create_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Devastator Battlesuit ??? Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_objectiveE28094DestroyDevastatorBattlesuit != c_invalidObjectiveId))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed, false);
    libCOMI_gf_SetMissionObjectiveProgress("AC_GalateasAscent_BonusA", 1);
    ObjectiveSetState(gv_objectiveE28094DestroyDevastatorBattlesuit, c_objectiveStateCompleted);
    TriggerEnable(gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed, false);
    Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete_Init () {
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete = TriggerCreate("gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Devastator Battlesuit ??? Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDevastatorBattlesuitE28094Update_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_objectiveE28094DestroyDevastatorBattlesuit != c_invalidObjectiveId))) {
            return false;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDevastatorBattlesuitE28094Update_Init () {
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Update = TriggerCreate("gt_ObjectiveDestroyDevastatorBattlesuitE28094Update_Func");
    TriggerAddEventTimePeriodic(gt_ObjectiveDestroyDevastatorBattlesuitE28094Update, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Objective -- Destroy Devastator Battlesuit ??? Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
        if (!((gv_objectiveE28094DestroyDevastatorBattlesuit != c_invalidObjectiveId))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete, false);
    if ((gv_objectiveE28094DestroyDevastatorBattlesuit != c_invalidObjectiveId)) {
        ObjectiveSetState(gv_objectiveE28094DestroyDevastatorBattlesuit, c_objectiveStateFailed);
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed_Init () {
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed = TriggerCreate("gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init01LoadData_Init();
    gt_Init02Players_Init();
    gt_Init03LoadingComplete_Init();
    gt_Init04Technology_Init();
    gt_Init05Units_Init();
    gt_Init06MusicSound_Init();
    gt_Init07Environment_Init();
    gt_Init08Difficulties_Init();
    gt_StartGameQ_Init();
    gt_InitDockingBays_Init();
    gt_DockingBaysTransmissionandPing_Init();
    gt_ProcDockingBays_Init();
    gt_InitialTransmission_Init();
    gt_InitialTransmission2_Init();
    gt_BaysActiveTransmission_Init();
    gt_BayCapturedTransmission_Init();
    gt_EnemyAttackingQ_Init();
    gt_Status4500Transmission_Init();
    gt_Status2500Transmission_Init();
    gt_Status1500Transmission_Init();
    gt_Status500Transmission_Init();
    gt_ObjectiveUnderAttack_Init();
    gt_BonusAE28094ArrivalTransmission_Init();
    gt_BonusAE28094CompleteTransmission_Init();
    gt_BonusAE28094ExpireWarningTransmission_Init();
    gt_BonusAE28094ExpiredTransmission_Init();
    gt_BonusBE28094ArrivalTransmission_Init();
    gt_BonusBE28094CompleteTransmission_Init();
    gt_BonusBE28094ExpireWarningTransmission_Init();
    gt_BonusBE28094ExpiredTransmission_Init();
    gt_AeriesArriveTransmission_Init();
    gt_DefeatTransmission_Init();
    gt_IonCannonScramble_Init();
    gt_AeriesBirth_Init();
    gt_AeriesTaunt_Init();
    gt_AeriesProc_Init();
    gt_TheShowdown_Init();
    gt_BonusProc_Init();
    gt_BonusACreate_Init();
    gt_BonusAExpiryReminder_Init();
    gt_BonusAExpire_Init();
    gt_BonusAPauseTimer_Init();
    gt_BonusAComplete_Init();
    gt_BonusBCreate_Init();
    gt_BonusBProc_Init();
    gt_BonusBExpiryReminder_Init();
    gt_BonusBExpire_Init();
    gt_BonusBPauseTimer_Init();
    gt_BonusBComplete1_Init();
    gt_BonusBComplete2_Init();
    gt_StartAI_Init();
    gt_InitAmonBases_Init();
    gt_ProcAmonBases_Init();
    gt_PingCleanup_Init();
    gt_DefeatGalateaDestroyed_Init();
    gt_VictoryAeriesDead_Init();
    gt_VictorySequence_Init();
    gt_VictoryFanfareQ_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_ObjectiveDestroytheIonCannonE28094Create_Init();
    gt_ObjectiveDestroytheIonCannonE28094Complete_Init();
    gt_ObjectiveDestroytheIonCannonE28094Update_Init();
    gt_ObjectiveDestroytheIonCannonE28094Failed_Init();
    gt_ObjectiveGalateaMustSurviveE28094Create_Init();
    gt_ObjectiveGalateaMustSurviveE28094Complete_Init();
    gt_ObjectiveGalateaMustSurviveE28094Update_Init();
    gt_ObjectiveGalateaMustSurviveE28094Failed_Init();
    gt_ObjectiveKillAeriesE28094Create_Init();
    gt_ObjectiveKillAeriesE28094Complete_Init();
    gt_ObjectiveKillAeriesE28094Update_Init();
    gt_ObjectiveKillAeriesE28094Failed_Init();
    gt_ObjectiveDestroyPrometheusE28094Create_Init();
    gt_ObjectiveDestroyPrometheusE28094Complete_Init();
    gt_ObjectiveDestroyPrometheusE28094Update_Init();
    gt_ObjectiveDestroyPrometheusE28094Failed_Init();
    gt_ObjectiveDestroyFirebirdE28094Create_Init();
    gt_ObjectiveDestroyFirebirdE28094Complete_Init();
    gt_ObjectiveDestroyFirebirdE28094Update_Init();
    gt_ObjectiveDestroyFirebirdE28094Failed_Init();
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Create_Init();
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Complete_Init();
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Update_Init();
    gt_ObjectiveDestroyDevastatorBattlesuitE28094Failed_Init();
}
//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void run () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    run();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitCustomScript();
}
