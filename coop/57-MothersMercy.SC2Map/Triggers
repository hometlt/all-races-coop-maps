<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="9D40C01B"/>
    </Root>
    <Element Type="CustomScript" Id="9D40C01B">
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   [RTC 2017] Mother&apos;s Mercy
            // 
            //==================================================================================================
            include &quot;TriggerLibs/NativeLib&quot;
            include &quot;TriggerLibs/SwarmLib&quot;
            include &quot;LibCOMI&quot;
            
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void InitLibs () {
                libNtve_InitLib();
                libHots_InitLib();
                libCOMI_InitLib();
            }
            
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            const int gv_pLAYER_01_USER = 1;
            const int gv_pLAYER_02_USER = 2;
            const int gv_pLAYER_03_ENEMY = 3;
            const int gv_pLAYER_04_ENEMY = 4;
            const int gv_pLAYER_05_PURIFIER = 5;
            const int gv_pLAYER_06_AMON_STATIC = 6;
            
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            playergroup gv_enemyGroup;
            playergroup gv_alliesGroup;
            int gv_enemyCoreCount;
            int gv_allyCoreCount;
            int gv_objectiveProtectAllyCore;
            int gv_objectiveDestroyEnemyCores;
            int gv_enemyMothershipWaveCount;
            unit gv_enemyMothershipSpawnAnchor;
            int gv_resourceBucket;
            int gv_techBucket;
            unit gv_enemyMothership;
            unit gv_alliedMothershipAttackTarget;
            unit gv_alliedMothership;
            timer gv_alliedMothershipTimer;
            timer gv_sFXPortalTimer;
            int gv_alliedMothershipPing;
            int gv_alliedMothershipTargetPing;
            fixed gv_mothershipTime;
            fixed gv_mothershipProgress;
            bool gv_mothershipHypercharging;
            unit gv_panCameraToThisUnit;
            int gv_enemyUpgradeLevel;
            timer gv_enemyUpgradeTimer;
            point gv_attackWaveA_Wave05Path;
            region[3][11] gv_attackSpawn;
            
            void InitGlobals () {
                gv_enemyGroup = PlayerGroupEmpty();
                gv_alliesGroup = PlayerGroupEmpty();
                gv_enemyCoreCount = 5;
                gv_allyCoreCount = 5;
                gv_objectiveProtectAllyCore = c_invalidObjectiveId;
                gv_objectiveDestroyEnemyCores = c_invalidObjectiveId;
                gv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
                gv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
                gv_alliedMothershipTimer = TimerCreate();
                gv_sFXPortalTimer = TimerCreate();
                gv_alliedMothershipPing = c_invalidPingId;
                gv_alliedMothershipTargetPing = c_invalidPingId;
                gv_mothershipTime = 240.0;
                gv_enemyUpgradeTimer = TimerCreate();
            }
            
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime);
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
            
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_Init01LoadData;
            trigger gt_Init02Players;
            trigger gt_Init03LoadingComplete;
            trigger gt_Init04Technology;
            trigger gt_Init05Units;
            trigger gt_Init06MusicSound;
            trigger gt_Init07Environment;
            trigger gt_Init08SpecificToMap;
            trigger gt_DebugCantFail;
            trigger gt_ObjectiveProtectAllyCoreCREATE;
            trigger gt_ObjectiveProtectAllyCoreCOMPLETE;
            trigger gt_ObjectiveProtectAllyCoreUPDATE;
            trigger gt_ObjectiveProtectAllyCoreFAIL;
            trigger gt_ObjectiveDestroyEnemyCoresCREATE;
            trigger gt_ObjectiveDestroyEnemyCoresCOMPLETE;
            trigger gt_ObjectiveDestroyEnemyCoresUPDATE;
            trigger gt_ObjectiveDestroyEnemyCoresFAIL;
            trigger gt_StartGameQ;
            trigger gt_EnemyAttackingQ;
            trigger gt_MothershipStartAI;
            trigger gt_EnemyMothershipSpawn;
            trigger gt_EnemyMothershipPickaSpawnPoint;
            trigger gt_EnemyMothershipWaveStrengthGauge;
            trigger gt_EnemyMothershipEstablishAttackPlan;
            trigger gt_EnemyMothershipIsCoreAalive;
            trigger gt_EnemyMothershipIsCoreBalive;
            trigger gt_EnemyMothershipIsCoreCalive;
            trigger gt_EnemyMothershipIsCoreDalive;
            trigger gt_EnemyMothershipIsCoreEalive;
            trigger gt_EnemyMothershipDeath;
            trigger gt_AlliedMothershipSpawn;
            trigger gt_SFXPortalTime;
            trigger gt_AlliedMothershipEstablishAttackPlan;
            trigger gt_AlliedMothershipPullout;
            trigger gt_AlliedMothershipDeath;
            trigger gt_AlliedMothershipWarpout;
            trigger gt_Motherboard;
            trigger gt_CheckforVictory;
            trigger gt_InternalizedVictorySequence;
            trigger gt_InternalizedVictoryFanfareQ;
            trigger gt_VictoryPrimaryObjectiveComplete;
            trigger gt_Victory;
            trigger gt_CheckforDefeat;
            trigger gt_DefeatBaseDead;
            trigger gt_DefeatPrimaryObjectiveFailed;
            trigger gt_Defeat;
            trigger gt_EnemyCallForHelpRangeAdjustment;
            trigger gt_EnemiesUpgrade;
            trigger gt_TempestReplacements;
            trigger gt_EnemyStopRebuild;
            trigger gt_AlliedMothershipHyperchargeQ;
            trigger gt_AlliedMothershipHyperchargeHINTADD;
            trigger gt_EnemyMothershipQ;
            trigger gt_EnemyMothershipHINTADD;
            trigger gt_EnemyMothershipGettingStrongerQ;
            trigger gt_EnemyMothershipGettingStrongerHINTADD;
            
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            trigger auto_gf_RunMissionEvent_Trigger = null;
            trigger auto_gf_RunMissionEvent_lp_missionEventTrigger;
            fixed auto_gf_RunMissionEvent_lp_missionEventTime;
            
            void gf_RunMissionEvent (trigger lp_missionEventTrigger, fixed lp_missionEventTime) {
                auto_gf_RunMissionEvent_lp_missionEventTrigger = lp_missionEventTrigger;
                auto_gf_RunMissionEvent_lp_missionEventTime = lp_missionEventTime;
            
                if (auto_gf_RunMissionEvent_Trigger == null) {
                    auto_gf_RunMissionEvent_Trigger = TriggerCreate(&quot;auto_gf_RunMissionEvent_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_RunMissionEvent_Trigger, false, false);
            }
            
            bool auto_gf_RunMissionEvent_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_missionEventTrigger = auto_gf_RunMissionEvent_lp_missionEventTrigger;
                fixed lp_missionEventTime = auto_gf_RunMissionEvent_lp_missionEventTime;
            
                // Implementation
                while (!((GameGetMissionTime() &gt;= lp_missionEventTime))) {
                    Wait(0.5, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_missionEventTrigger, true, false);
                }
            
                return true;
            }
            
            trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
            trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
            fixed auto_gf_RunAttackWaveatMissionTime_lp_time;
            
            void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
                auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
                auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;
            
                if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
                    auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate(&quot;auto_gf_RunAttackWaveatMissionTime_TriggerFunc&quot;);
                }
            
                TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
            }
            
            bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
                trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
                fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;
            
                // Implementation
                while (!((lp_time &lt;= GameGetMissionTime()))) {
                    Wait(0.3, c_timeAI);
                }
                if ((libCOMI_gf_GameIsOver() == false)) {
                    TriggerExecute(lp_attackWave, true, false);
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 01 Load Data
            //--------------------------------------------------------------------------------------------------
            bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_indexPlayer;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_Init02Players, true, false);
                libCOMI_gf_LoadCoopMission(&quot;COOP_Placeholder&quot;, gt_Init03LoadingComplete);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init01LoadData_Init () {
                gt_Init01LoadData = TriggerCreate(&quot;gt_Init01LoadData_Func&quot;);
                TriggerAddEventMapInit(gt_Init01LoadData);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 02 Players
            //--------------------------------------------------------------------------------------------------
            bool gt_Init02Players_Func (bool testConds, bool runActions) {
                playergroup auto0B686949_g;
                int auto0B686949_p;
                playergroup autoEBB1B1B2_g;
                int autoEBB1B1B2_p;
            
                // Variable Declarations
                int lv_playerIterEnemy;
                int lv_playerIterAlly;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                PlayerGroupAdd(gv_alliesGroup, gv_pLAYER_01_USER);
                PlayerGroupAdd(gv_alliesGroup, gv_pLAYER_02_USER);
                PlayerGroupAdd(gv_alliesGroup, gv_pLAYER_05_PURIFIER);
                libNtve_gf_SetPlayerGroupAlliance(gv_alliesGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_03_ENEMY);
                PlayerGroupAdd(gv_enemyGroup, gv_pLAYER_04_ENEMY);
                PlayerGroupAdd(gv_enemyGroup, 6);
                PlayerGroupAdd(gv_enemyGroup, 7);
                PlayerGroupAdd(gv_enemyGroup, 8);
                PlayerGroupAdd(gv_enemyGroup, 9);
                PlayerGroupAdd(gv_enemyGroup, 10);
                libNtve_gf_SetPlayerGroupAlliance(gv_enemyGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                auto0B686949_g = gv_enemyGroup; 
                auto0B686949_p = 1;
                for ( ; auto0B686949_p &lt;= PlayerGroupCount(auto0B686949_g) ; auto0B686949_p += BoolToInt(lv_playerIterEnemy == PlayerGroupPlayer(auto0B686949_g, auto0B686949_p)) ) {
                    lv_playerIterEnemy = PlayerGroupPlayer(auto0B686949_g, auto0B686949_p);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateMineralCostIgnored, true);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateVespeneCostIgnored, true);
                    PlayerSetState(lv_playerIterEnemy, c_playerStateFoodIgnored, true);
                    PlayerSetColorIndex(lv_playerIterEnemy, libCOMI_gf_EnemyPlayerColor(), true);
                    autoEBB1B1B2_g = gv_alliesGroup; 
                    autoEBB1B1B2_p = 1;
                    for ( ; autoEBB1B1B2_p &lt;= PlayerGroupCount(autoEBB1B1B2_g) ; autoEBB1B1B2_p += BoolToInt(lv_playerIterAlly == PlayerGroupPlayer(autoEBB1B1B2_g, autoEBB1B1B2_p)) ) {
                        lv_playerIterAlly = PlayerGroupPlayer(autoEBB1B1B2_g, autoEBB1B1B2_p);
                        libNtve_gf_SetAlliance(lv_playerIterAlly, lv_playerIterEnemy, libNtve_ge_AllianceSetting_Enemy);
                    }
                }
                PlayerSetAlliance(gv_pLAYER_03_ENEMY, c_allianceIdPower, gv_pLAYER_04_ENEMY, true);
                PlayerSetAlliance(gv_pLAYER_04_ENEMY, c_allianceIdPower, gv_pLAYER_03_ENEMY, true);
                libCOMI_gf_SetAlliedCommandersstartingResources();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init02Players_Init () {
                gt_Init02Players = TriggerCreate(&quot;gt_Init02Players_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 03 Loading Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_Init04Technology, true, false);
                libCOMI_gf_PurchaseStorymodeTech();
                TriggerExecute(gt_Init05Units, true, false);
                TriggerExecute(gt_Init06MusicSound, true, false);
                TriggerExecute(gt_Init07Environment, true, false);
                TriggerExecute(gt_Init08SpecificToMap, true, false);
                libCOMI_gf_PlayMapIntroZoom(true);
                TriggerExecute(gt_StartGameQ, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init03LoadingComplete_Init () {
                gt_Init03LoadingComplete = TriggerCreate(&quot;gt_Init03LoadingComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 04 Technology
            //--------------------------------------------------------------------------------------------------
            bool gt_Init04Technology_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                libCOMI_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init04Technology_Init () {
                gt_Init04Technology = TriggerCreate(&quot;gt_Init04Technology_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 05 Units
            //--------------------------------------------------------------------------------------------------
            bool gt_Init05Units_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_01_USER);
                libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(gv_pLAYER_02_USER);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init05Units_Init () {
                gt_Init05Units = TriggerCreate(&quot;gt_Init05Units_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 06 Music/Sound
            //--------------------------------------------------------------------------------------------------
            bool gt_Init06MusicSound_Func (bool testConds, bool runActions) {
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init06MusicSound_Init () {
                gt_Init06MusicSound = TriggerCreate(&quot;gt_Init06MusicSound_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 07 Environment
            //--------------------------------------------------------------------------------------------------
            bool gt_Init07Environment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                GameTimeOfDaySet(&quot;08:00:00&quot;);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(1), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(2), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(5), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(6), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(7), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(8), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(9), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(10), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(11), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(12), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(13), true, false);
                VisExploreArea(gv_pLAYER_01_USER, RegionFromId(14), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(1), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(2), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(5), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(6), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(7), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(8), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(9), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(10), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(11), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(12), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(13), true, false);
                VisExploreArea(gv_pLAYER_02_USER, RegionFromId(14), true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init07Environment_Init () {
                gt_Init07Environment = TriggerCreate(&quot;gt_Init07Environment_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Init 08 Specific To Map
            //--------------------------------------------------------------------------------------------------
            bool gt_Init08SpecificToMap_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_MothershipStartAI, true, true);
                TimerStart(gv_enemyUpgradeTimer, 0.0, false, c_timeGame);
                GameSetSpeedLocked(false);
                GameSetSpeedValue(c_gameSpeedFaster);
                UnitAbilityEnable(UnitFromId(876348154), &quot;TimeWarp&quot;, false);
                UnitAbilityEnable(UnitFromId(188922227), &quot;TimeWarp&quot;, false);
                UnitAbilityEnable(UnitFromId(1834363659), &quot;TimeWarp&quot;, false);
                UnitAbilityEnable(UnitFromId(1209973589), &quot;TimeWarp&quot;, false);
                UnitAbilityEnable(UnitFromId(1129531870), &quot;TimeWarp&quot;, false);
                UnitAbilityEnable(UnitFromId(660164616), &quot;TimeWarp&quot;, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Init08SpecificToMap_Init () {
                gt_Init08SpecificToMap = TriggerCreate(&quot;gt_Init08SpecificToMap_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug - Can&apos;t Fail
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugCantFail_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                PlayerModifyPropertyFixed(gv_pLAYER_01_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                PlayerModifyPropertyFixed(gv_pLAYER_02_USER, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 0.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DebugCantFail_Init () {
                gt_DebugCantFail = TriggerCreate(&quot;gt_DebugCantFail_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugCantFail, c_playerAny, &quot;cantfail&quot;, false);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - ProtectAllyCore CREATE
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveProtectAllyCoreCREATE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderPrimary&quot;, 5);
                gv_objectiveProtectAllyCore = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 9);
                TriggerExecute(gt_ObjectiveProtectAllyCoreUPDATE, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveProtectAllyCoreCREATE_Init () {
                gt_ObjectiveProtectAllyCoreCREATE = TriggerCreate(&quot;gt_ObjectiveProtectAllyCoreCREATE_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - ProtectAllyCore COMPLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveProtectAllyCoreCOMPLETE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveProtectAllyCoreCREATE, true, false);
                ObjectiveSetState(gv_objectiveProtectAllyCore, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveProtectAllyCoreCOMPLETE_Init () {
                gt_ObjectiveProtectAllyCoreCOMPLETE = TriggerCreate(&quot;gt_ObjectiveProtectAllyCoreCOMPLETE_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - ProtectAllyCore UPDATE
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveProtectAllyCoreUPDATE_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveProtectAllyCoreCREATE, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderPrimary&quot;, gv_allyCoreCount);
                TextExpressionSetToken(&quot;Param/Expression/48844503&quot;, &quot;StructureCount&quot;, IntToText(gv_allyCoreCount));
                ObjectiveSetName(gv_objectiveProtectAllyCore, TextExpressionAssemble(&quot;Param/Expression/48844503&quot;));
                ObjectiveSetDescription(gv_objectiveProtectAllyCore, StringExternal(&quot;Param/Value/65F1EFDB&quot;));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveProtectAllyCoreUPDATE_Init () {
                gt_ObjectiveProtectAllyCoreUPDATE = TriggerCreate(&quot;gt_ObjectiveProtectAllyCoreUPDATE_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - ProtectAllyCore FAIL
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveProtectAllyCoreFAIL_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveProtectAllyCoreCREATE, true, false);
                ObjectiveSetState(gv_objectiveProtectAllyCore, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveProtectAllyCoreFAIL_Init () {
                gt_ObjectiveProtectAllyCoreFAIL = TriggerCreate(&quot;gt_ObjectiveProtectAllyCoreFAIL_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyEnemyCores CREATE
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyEnemyCoresCREATE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_CreateObjectiveCampaign(&quot;PlaceholderPrimary&quot;);
                libCOMI_gf_SetObjectiveRequiredCountCampaign(&quot;PlaceholderPrimary&quot;, 5);
                gv_objectiveDestroyEnemyCores = ObjectiveLastCreated();
                ObjectiveSetPriority(ObjectiveLastCreated(), 10);
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresUPDATE, true, false);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyEnemyCoresCREATE_Init () {
                gt_ObjectiveDestroyEnemyCoresCREATE = TriggerCreate(&quot;gt_ObjectiveDestroyEnemyCoresCREATE_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyEnemyCores COMPLETE
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyEnemyCoresCOMPLETE_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresCREATE, true, false);
                ObjectiveSetState(gv_objectiveDestroyEnemyCores, c_objectiveStateCompleted);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyEnemyCoresCOMPLETE_Init () {
                gt_ObjectiveDestroyEnemyCoresCOMPLETE = TriggerCreate(&quot;gt_ObjectiveDestroyEnemyCoresCOMPLETE_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyEnemyCores UPDATE
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyEnemyCoresUPDATE_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresCREATE, true, false);
                libCOMI_gf_SetMissionObjectiveProgress(&quot;PlaceholderPrimary&quot;, gv_enemyCoreCount);
                TextExpressionSetToken(&quot;Param/Expression/FBC8EFEE&quot;, &quot;StructureCount&quot;, IntToText(gv_enemyCoreCount));
                ObjectiveSetName(gv_objectiveDestroyEnemyCores, TextExpressionAssemble(&quot;Param/Expression/FBC8EFEE&quot;));
                ObjectiveSetDescription(gv_objectiveDestroyEnemyCores, StringExternal(&quot;Param/Value/9659B3E1&quot;));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyEnemyCoresUPDATE_Init () {
                gt_ObjectiveDestroyEnemyCoresUPDATE = TriggerCreate(&quot;gt_ObjectiveDestroyEnemyCoresUPDATE_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Objective - DestroyEnemyCores FAIL
            //--------------------------------------------------------------------------------------------------
            bool gt_ObjectiveDestroyEnemyCoresFAIL_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresCREATE, true, false);
                ObjectiveSetState(gv_objectiveDestroyEnemyCores, c_objectiveStateFailed);
                Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_ObjectiveDestroyEnemyCoresFAIL_Init () {
                gt_ObjectiveDestroyEnemyCoresFAIL = TriggerCreate(&quot;gt_ObjectiveDestroyEnemyCoresFAIL_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Start Game Q
            //--------------------------------------------------------------------------------------------------
            bool gt_StartGameQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_01_USER, StringExternal(&quot;Param/Value/41390785&quot;), null, PlayerStartLocation(gv_pLAYER_01_USER));
                UIAlertPoint(&quot;Trigger&quot;, gv_pLAYER_02_USER, StringExternal(&quot;Param/Value/FB8861F7&quot;), null, PlayerStartLocation(gv_pLAYER_02_USER));
                Wait(7.0, c_timeReal);
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresCREATE, true, true);
                TriggerExecute(gt_ObjectiveProtectAllyCoreCREATE, true, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_StartGameQ_Init () {
                gt_StartGameQ = TriggerCreate(&quot;gt_StartGameQ_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Attacking Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerQueueEnter();
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
                libCOMI_gf_SendMissionTransmission(&quot;AttackWave&quot;, true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
                libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
                TriggerQueueExit();
                Wait(20.0, c_timeAI);
                TriggerEnable(TriggerGetCurrent(), true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAttackingQ_Init () {
                gt_EnemyAttackingQ = TriggerCreate(&quot;gt_EnemyAttackingQ_Func&quot;);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
                TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mothership Start AI
            //--------------------------------------------------------------------------------------------------
            bool gt_MothershipStartAI_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                libCOMI_gf_StartCoopAI(gv_pLAYER_03_ENEMY, gv_pLAYER_01_USER);
                libCOMI_gf_StartCoopAI(gv_pLAYER_04_ENEMY, gv_pLAYER_02_USER);
                AICampaignStart(5);
                AICampaignStart(6);
                AICampaignStart(7);
                AICampaignStart(8);
                AICampaignStart(9);
                AICampaignStart(10);
                Wait(5.0, c_timeGame);
                TriggerExecute(gt_EnemyCallForHelpRangeAdjustment, true, true);
                TriggerExecute(gt_EnemyMothershipQ, true, false);
                TriggerExecute(gt_Motherboard, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_MothershipStartAI_Init () {
                gt_MothershipStartAI = TriggerCreate(&quot;gt_MothershipStartAI_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipSpawn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unitgroup lv_attackGroup;
            
                // Variable Initialization
                lv_attackGroup = UnitGroupEmpty();
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                gv_enemyMothershipWaveCount = (gv_enemyMothershipWaveCount + 1);
                TriggerExecute(gt_EnemyMothershipPickaSpawnPoint, true, true);
                TriggerExecute(gt_EnemyMothershipEstablishAttackPlan, true, true);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Flagship2&quot;, 0, 3, UnitGetPosition(gv_enemyMothershipSpawnAnchor));
                gv_enemyMothership = UnitLastCreated();
                TriggerExecute(gt_EnemyMothershipWaveStrengthGauge, true, true);
                libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_03_ENEMY, gv_resourceBucket, gv_techBucket, UnitGetPosition(gv_enemyMothershipSpawnAnchor), true);
                lv_attackGroup = libCOMI_gf_LastCreatedCoopAttackForce();
                UnitGroupAdd(lv_attackGroup, gv_enemyMothership);
                libCOMI_gf_SendAttackWaveusingCoopAttackForce(lv_attackGroup, 0, true);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipSpawn_Init () {
                gt_EnemyMothershipSpawn = TriggerCreate(&quot;gt_EnemyMothershipSpawn_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Pick a Spawn Point
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipPickaSpawnPoint_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit[6] lv_spawnPoint;
                int lv_spawnPointsTotal;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                if ((UnitIsAlive(UnitFromId(1143849731)) == true)) {
                    lv_spawnPointsTotal = (lv_spawnPointsTotal + 1);
                    lv_spawnPoint[lv_spawnPointsTotal] = UnitFromId(1143849731);
                }
            
                if ((UnitIsAlive(UnitFromId(1877264606)) == true)) {
                    lv_spawnPointsTotal = (lv_spawnPointsTotal + 1);
                    lv_spawnPoint[lv_spawnPointsTotal] = UnitFromId(1877264606);
                }
            
                if ((UnitIsAlive(UnitFromId(1373010979)) == true)) {
                    lv_spawnPointsTotal = (lv_spawnPointsTotal + 1);
                    lv_spawnPoint[lv_spawnPointsTotal] = UnitFromId(1373010979);
                }
            
                if ((UnitIsAlive(UnitFromId(302126093)) == true)) {
                    lv_spawnPointsTotal = (lv_spawnPointsTotal + 1);
                    lv_spawnPoint[lv_spawnPointsTotal] = UnitFromId(302126093);
                }
            
                if ((UnitIsAlive(UnitFromId(1300213235)) == true)) {
                    lv_spawnPointsTotal = (lv_spawnPointsTotal + 1);
                    lv_spawnPoint[lv_spawnPointsTotal] = UnitFromId(1300213235);
                }
            
                gv_enemyMothershipSpawnAnchor = lv_spawnPoint[RandomInt(1, lv_spawnPointsTotal)];
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipPickaSpawnPoint_Init () {
                gt_EnemyMothershipPickaSpawnPoint = TriggerCreate(&quot;gt_EnemyMothershipPickaSpawnPoint_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Wave Strength Gauge
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipWaveStrengthGauge_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                UnitSetPropertyFixed(gv_enemyMothership, c_unitPropLifeMax, (0 + (500 * gv_enemyMothershipWaveCount)));
                UnitSetPropertyFixed(gv_enemyMothership, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(gv_enemyMothership, c_unitPropShieldsMax, (0 + (500 * gv_enemyMothershipWaveCount)));
                UnitSetPropertyFixed(gv_enemyMothership, c_unitPropShieldsPercent, 100.0);
                if ((gv_enemyMothershipWaveCount == 1)) {
                    UnitAbilityEnable(gv_enemyMothership, &quot;SOAMothershipLineAttack2&quot;, false);
                    UnitAbilityEnable(gv_enemyMothership, &quot;Vortex&quot;, false);
                    UnitWeaponRemove(gv_enemyMothership, &quot;MothershipBeam&quot;);
                    UnitWeaponRemove(gv_enemyMothership, &quot;FlagshipBeam&quot;);
                    UnitWeaponAdd(gv_enemyMothership, &quot;SOAMothershipv4Weapon2&quot;, &quot;MothershipRotate&quot;);
                    gv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
                    gv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
                }
            
                if ((gv_enemyMothershipWaveCount == 2)) {
                    TriggerExecute(gt_EnemyMothershipGettingStrongerQ, true, false);
                    UnitAbilityEnable(gv_enemyMothership, &quot;SOAMothershipLineAttack2&quot;, false);
                    UnitAbilityEnable(gv_enemyMothership, &quot;Vortex&quot;, false);
                    UnitWeaponRemove(gv_enemyMothership, &quot;MothershipBeam&quot;);
                    UnitWeaponRemove(gv_enemyMothership, &quot;FlagshipBeam&quot;);
                    UnitWeaponAdd(gv_enemyMothership, &quot;SOAMothershipv4Weapon22&quot;, &quot;MothershipRotate&quot;);
                    gv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
                    gv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
                }
            
                if ((gv_enemyMothershipWaveCount == 3)) {
                    UnitAbilityEnable(gv_enemyMothership, &quot;SOAMothershipLineAttack2&quot;, false);
                    UnitWeaponRemove(gv_enemyMothership, &quot;MothershipBeam&quot;);
                    UnitWeaponRemove(gv_enemyMothership, &quot;FlagshipBeam&quot;);
                    UnitWeaponAdd(gv_enemyMothership, &quot;SOAMothershipv4Weapon22&quot;, &quot;MothershipRotate&quot;);
                    gv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
                    gv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
                }
            
                if ((gv_enemyMothershipWaveCount &gt; 3)) {
                    UnitWeaponRemove(gv_enemyMothership, &quot;MothershipBeam&quot;);
                    UnitWeaponRemove(gv_enemyMothership, &quot;FlagshipBeam&quot;);
                    UnitWeaponAdd(gv_enemyMothership, &quot;SOAMothershipv4Weapon23&quot;, &quot;MothershipRotate&quot;);
                    gv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
                    gv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipWaveStrengthGauge_Init () {
                gt_EnemyMothershipWaveStrengthGauge = TriggerCreate(&quot;gt_EnemyMothershipWaveStrengthGauge_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Establish Attack Plan
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipEstablishAttackPlan_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                if ((gv_enemyMothershipSpawnAnchor == UnitFromId(1877264606))) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(389649988));
                    AIAttackWaveAddWaypoint(3, PointFromId(676365355), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(2026515809), false);
                    TriggerExecute(gt_EnemyMothershipIsCoreAalive, true, true);
                    AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(1756033232), false);
                    TriggerExecute(gt_EnemyMothershipIsCoreBalive, true, true);
                    AIAttackWaveAddWaypoint(3, PointFromId(1767387970), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                    TriggerExecute(gt_EnemyMothershipIsCoreCalive, true, true);
                    AIAttackWaveAddWaypoint(3, PointFromId(816663585), false);
                    TriggerExecute(gt_EnemyMothershipIsCoreDalive, true, true);
                    AIAttackWaveAddWaypoint(3, PointFromId(968797102), false);
                }
            
                if ((gv_enemyMothershipSpawnAnchor == UnitFromId(1143849731))) {
                    if ((RandomInt(0, 1) == 1)) {
                        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(389649988));
                        AIAttackWaveAddWaypoint(3, PointFromId(1442279574), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreAalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1756033232), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreBalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(1767387970), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreCalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(816663585), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreDalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(968797102), false);
                    }
                    else {
                        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1074241366));
                        AIAttackWaveAddWaypoint(3, PointFromId(420792207), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                        if (((UnitIsAlive(UnitFromId(1382400492)) == true) || (UnitIsAlive(UnitFromId(930328570)) == true))) {
                            AIAttackWaveAddWaypoint(3, PointFromId(816663585), false);
                            TriggerExecute(gt_EnemyMothershipIsCoreEalive, true, true);
                            AIAttackWaveAddWaypoint(3, PointFromId(968797102), false);
                            TriggerExecute(gt_EnemyMothershipIsCoreDalive, true, true);
                        }
            
                        AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1767387970), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1756033232), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreBalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                    }
                }
            
                if ((gv_enemyMothershipSpawnAnchor == UnitFromId(302126093))) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1074241366));
                    AIAttackWaveAddWaypoint(3, PointFromId(420792207), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                    if (((UnitIsAlive(UnitFromId(1382400492)) == true) || (UnitIsAlive(UnitFromId(930328570)) == true))) {
                        AIAttackWaveAddWaypoint(3, PointFromId(816663585), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreEalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(968797102), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreDalive, true, true);
                    }
            
                    AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(1767387970), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(1756033232), false);
                    TriggerExecute(gt_EnemyMothershipIsCoreBalive, true, true);
                    AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                }
            
                if ((gv_enemyMothershipSpawnAnchor == UnitFromId(1373010979))) {
                    if ((RandomInt(0, 1) == 1)) {
                        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1074241366));
                        if ((RandomInt(0, 1) == 1)) {
                            AIAttackWaveAddWaypoint(3, PointFromId(978646041), false);
                            AIAttackWaveAddWaypoint(3, PointFromId(2106705012), false);
                        }
                        else {
                            AIAttackWaveAddWaypoint(3, PointFromId(1621771274), false);
                            AIAttackWaveAddWaypoint(3, PointFromId(1569808838), false);
                        }
                        AIAttackWaveAddWaypoint(3, PointFromId(420792207), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                        if (((UnitIsAlive(UnitFromId(1382400492)) == true) || (UnitIsAlive(UnitFromId(930328570)) == true))) {
                            AIAttackWaveAddWaypoint(3, PointFromId(816663585), false);
                            TriggerExecute(gt_EnemyMothershipIsCoreEalive, true, true);
                            AIAttackWaveAddWaypoint(3, PointFromId(968797102), false);
                            TriggerExecute(gt_EnemyMothershipIsCoreDalive, true, true);
                        }
            
                        AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1767387970), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1756033232), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreBalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                    }
                    else {
                        AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(389649988));
                        AIAttackWaveAddWaypoint(3, PointFromId(1729271146), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(270304800), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(749484324), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(676365355), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(2026515809), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreAalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1756033232), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreBalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(1767387970), false);
                        AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreCalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(816663585), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreDalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(968797102), false);
                    }
                }
            
                if ((gv_enemyMothershipSpawnAnchor == UnitFromId(1300213235))) {
                    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(1074241366));
                    AIAttackWaveAddWaypoint(3, PointFromId(1368070158), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(66309402), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(1615456478), false);
                    if (((UnitIsAlive(UnitFromId(1382400492)) == true) || (UnitIsAlive(UnitFromId(930328570)) == true))) {
                        AIAttackWaveAddWaypoint(3, PointFromId(816663585), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreEalive, true, true);
                        AIAttackWaveAddWaypoint(3, PointFromId(968797102), false);
                        TriggerExecute(gt_EnemyMothershipIsCoreDalive, true, true);
                    }
            
                    AIAttackWaveAddWaypoint(3, PointFromId(1640068164), false);
                    TriggerExecute(gt_EnemyMothershipIsCoreCalive, true, true);
                    AIAttackWaveAddWaypoint(3, PointFromId(1767387970), false);
                    AIAttackWaveAddWaypoint(3, PointFromId(1756033232), false);
                    TriggerExecute(gt_EnemyMothershipIsCoreBalive, true, true);
                    AIAttackWaveAddWaypoint(3, PointFromId(22484463), false);
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipEstablishAttackPlan_Init () {
                gt_EnemyMothershipEstablishAttackPlan = TriggerCreate(&quot;gt_EnemyMothershipEstablishAttackPlan_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Is Core A alive?
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipIsCoreAalive_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(UnitFromId(1264819420)) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                AIAttackWaveAddWaypoint(3, PointFromId(1074241366), false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipIsCoreAalive_Init () {
                gt_EnemyMothershipIsCoreAalive = TriggerCreate(&quot;gt_EnemyMothershipIsCoreAalive_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Is Core B alive?
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipIsCoreBalive_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(UnitFromId(533281368)) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                AIAttackWaveAddWaypoint(3, PointFromId(1980895784), false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipIsCoreBalive_Init () {
                gt_EnemyMothershipIsCoreBalive = TriggerCreate(&quot;gt_EnemyMothershipIsCoreBalive_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Is Core C alive?
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipIsCoreCalive_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(UnitFromId(2037375007)) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                AIAttackWaveAddWaypoint(3, PointFromId(1540955221), false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipIsCoreCalive_Init () {
                gt_EnemyMothershipIsCoreCalive = TriggerCreate(&quot;gt_EnemyMothershipIsCoreCalive_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Is Core D alive?
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipIsCoreDalive_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(UnitFromId(1382400492)) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                AIAttackWaveAddWaypoint(3, PointFromId(389649988), false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipIsCoreDalive_Init () {
                gt_EnemyMothershipIsCoreDalive = TriggerCreate(&quot;gt_EnemyMothershipIsCoreDalive_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Is Core E alive?
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipIsCoreEalive_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(UnitFromId(930328570)) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                AIAttackWaveAddWaypoint(3, PointFromId(1432990048), false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipIsCoreEalive_Init () {
                gt_EnemyMothershipIsCoreEalive = TriggerCreate(&quot;gt_EnemyMothershipIsCoreEalive_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Death
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipDeath_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_AlliedMothershipHyperchargeQ, true, false);
                gv_enemyMothership = null;
                libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(611546377)), c_animNameDefault, &quot;Stand Work Start&quot;, c_animFlagAssetDrivenLooping, c_animTimeDefault);
                libCOMI_gf_SetProgressBarLabel(StringExternal(&quot;Param/Value/566B44DA&quot;));
                libCOMI_gf_SetProgressBarProgress(0);
                TimerStart(gv_alliedMothershipTimer, 30.0, false, c_timeGame);
                TimerStart(gv_sFXPortalTimer, 22.0, false, c_timeGame);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipDeath_Init () {
                gt_EnemyMothershipDeath = TriggerCreate(&quot;gt_EnemyMothershipDeath_Func&quot;);
                TriggerAddEventUnitDied(gt_EnemyMothershipDeath, UnitRefFromVariable(&quot;gv_enemyMothership&quot;));
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Allied Mothership Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_AlliedMothershipSpawn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerExecute(gt_Motherboard, true, false);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, &quot;Artanis2&quot;, 0, gv_pLAYER_05_PURIFIER, RegionGetCenter(RegionFromId(4)));
                gv_alliedMothership = UnitLastCreated();
                UnitAbilityEnable(gv_alliedMothership, &quot;SOAMothershipLineAttack2&quot;, false);
                TriggerExecute(gt_AlliedMothershipEstablishAttackPlan, true, true);
                libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingSimple&quot;, PointFromId(142596460), ColorWithAlpha(9.02, 100.00, 100.00, 0.00), 0.0);
                gv_alliedMothershipPing = PingLastCreated();
                PingSetTooltip(gv_alliedMothershipPing, StringExternal(&quot;Param/Value/4A926504&quot;));
                PingSetUnit(gv_alliedMothershipPing, gv_alliedMothership);
                Wait(2.0, c_timeGame);
                UnitAbilityEnable(gv_alliedMothership, &quot;SOAMothershipLineAttack&quot;, false);
                UnitAbilityEnable(gv_alliedMothership, &quot;Vortex&quot;, false);
                AIAttackWaveUseUnit(5, gv_alliedMothership);
                AIAttackWaveSend(5, 10, true);
                Wait(5.0, c_timeGame);
                libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(611546377)), c_animNameDefault, &quot;Stand Work End&quot;, 0, c_animTimeDefault);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AlliedMothershipSpawn_Init () {
                gt_AlliedMothershipSpawn = TriggerCreate(&quot;gt_AlliedMothershipSpawn_Func&quot;);
                TriggerAddEventTimer(gt_AlliedMothershipSpawn, gv_alliedMothershipTimer);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: SFX Portal Time
            //--------------------------------------------------------------------------------------------------
            bool gt_SFXPortalTime_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(611546377)), c_animNameDefault, &quot;Stand Work&quot;, c_animFlagPlayForever, c_animTimeDefault);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_SFXPortalTime_Init () {
                gt_SFXPortalTime = TriggerCreate(&quot;gt_SFXPortalTime_Func&quot;);
                TriggerAddEventTimer(gt_SFXPortalTime, gv_sFXPortalTimer);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Allied Mothership Establish Attack Plan
            //--------------------------------------------------------------------------------------------------
            bool gt_AlliedMothershipEstablishAttackPlan_Func (bool testConds, bool runActions) {
                // Variable Declarations
                string lv_zzPingStyle;
                color lv_zzPingColor;
                fixed lv_zzPingTime;
                fixed lv_zzPingScale;
                unit[4] lv_attack_FirstLine_Target;
                int lv_attack_FirstLine_TargetTotal;
                unit lv_attack_TargetFirst;
            
                // Variable Initialization
                lv_zzPingStyle = &quot;PingArrow&quot;;
                lv_zzPingColor = Color(28*100/255,167*100/255,234*100/255);
                lv_zzPingTime = 15.0;
                lv_zzPingScale = 0.75;
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                lv_attack_FirstLine_TargetTotal = 0;
                if ((UnitIsAlive(UnitFromId(302126093)) == true)) {
                    lv_attack_FirstLine_TargetTotal = (lv_attack_FirstLine_TargetTotal + 1);
                    lv_attack_FirstLine_Target[lv_attack_FirstLine_TargetTotal] = UnitFromId(302126093);
                }
            
                if ((UnitIsAlive(UnitFromId(1143849731)) == true)) {
                    lv_attack_FirstLine_TargetTotal = (lv_attack_FirstLine_TargetTotal + 1);
                    lv_attack_FirstLine_Target[lv_attack_FirstLine_TargetTotal] = UnitFromId(1143849731);
                }
            
                if ((UnitIsAlive(UnitFromId(1877264606)) == true)) {
                    lv_attack_FirstLine_TargetTotal = (lv_attack_FirstLine_TargetTotal + 1);
                    lv_attack_FirstLine_Target[lv_attack_FirstLine_TargetTotal] = UnitFromId(1877264606);
                }
            
                if ((lv_attack_FirstLine_TargetTotal != 0)) {
                    lv_attack_TargetFirst = lv_attack_FirstLine_Target[RandomInt(1, lv_attack_FirstLine_TargetTotal)];
                    if ((lv_attack_TargetFirst == UnitFromId(1877264606))) {
                        gv_alliedMothershipAttackTarget = UnitFromId(1877264606);
                        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PURIFIER, PointFromId(749484324));
                        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(749484324), ColorWithAlpha(9.02, 100.00, 100.00, 0.00), 0.0);
                        gv_alliedMothershipTargetPing = PingLastCreated();
                        PingSetTooltip(gv_alliedMothershipTargetPing, StringExternal(&quot;Param/Value/29F9EA71&quot;));
                        AIAttackWaveAddWaypoint(5, PointFromId(75251320), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(75251320), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(75251320), PointFromId(1767387970)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1767387970), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1767387970), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1767387970), PointFromId(1756033232)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1756033232), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1756033232), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1756033232), PointFromId(22484463)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(22484463), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(22484463), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(22484463), PointFromId(2026515809)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(2026515809), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(2026515809), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(2026515809), PointFromId(676365355)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1166091761), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1166091761), PointFromId(676365355)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(676365355), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(676365355), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(676365355), PointFromId(749484324)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(749484324), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(2026515809), PointFromId(676365355)));
                    }
            
                    if ((lv_attack_TargetFirst == UnitFromId(1143849731))) {
                        gv_alliedMothershipAttackTarget = UnitFromId(1143849731);
                        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PURIFIER, PointFromId(1603764520));
                        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(1603764520), ColorWithAlpha(9.02, 100.00, 100.00, 0.00), 0.0);
                        gv_alliedMothershipTargetPing = PingLastCreated();
                        PingSetTooltip(gv_alliedMothershipTargetPing, StringExternal(&quot;Param/Value/DF2D2419&quot;));
                        PingSetTooltip(gv_alliedMothershipPing, StringExternal(&quot;Param/Value/D0871DD3&quot;));
                        AIAttackWaveAddWaypoint(5, PointFromId(75251320), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(75251320), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(75251320), PointFromId(1767387970)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1767387970), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1767387970), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1767387970), PointFromId(1756033232)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1756033232), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1756033232), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1756033232), PointFromId(22484463)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(22484463), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(22484463), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(22484463), PointFromId(658744800)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(658744800), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(658744800), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(658744800), PointFromId(1442279574)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1442279574), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1442279574), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1442279574), PointFromId(1603764520)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                    }
            
                    if ((lv_attack_TargetFirst == UnitFromId(302126093))) {
                        gv_alliedMothershipAttackTarget = UnitFromId(302126093);
                        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PURIFIER, PointFromId(774604993));
                        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(774604993), ColorWithAlpha(9.02, 100.00, 100.00, 0.00), 0.0);
                        gv_alliedMothershipTargetPing = PingLastCreated();
                        PingSetTooltip(gv_alliedMothershipTargetPing, StringExternal(&quot;Param/Value/95A91EBB&quot;));
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(774604993), lv_zzPingColor, lv_zzPingTime, 270.0);
                        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PURIFIER, PointFromId(774604993));
                        AIAttackWaveAddWaypoint(5, PointFromId(75251320), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(75251320), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(75251320), PointFromId(1767387970)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1767387970), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1767387970), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1767387970), PointFromId(1640068164)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1640068164), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1640068164), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1640068164), PointFromId(1540955221)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1540955221), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1540955221), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1540955221), PointFromId(420792207)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(420792207), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(420792207), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(420792207), PointFromId(774604993)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                    }
            
                }
                else {
                    if ((RandomInt(0, 1) == 0) &amp;&amp; (UnitIsAlive(UnitFromId(1300213235)) == true)) {
                        gv_alliedMothershipAttackTarget = UnitFromId(1300213235);
                        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(270314371), ColorWithAlpha(9.02, 100.00, 100.00, 0.00), 0.0);
                        gv_alliedMothershipTargetPing = PingLastCreated();
                        PingSetTooltip(gv_alliedMothershipTargetPing, StringExternal(&quot;Param/Value/EF3B76C7&quot;));
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(2138760552), lv_zzPingColor, lv_zzPingTime, 270.0);
                        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PURIFIER, PointFromId(270314371));
                        AIAttackWaveAddWaypoint(5, PointFromId(75251320), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(75251320), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(75251320), PointFromId(1767387970)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1767387970), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1767387970), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1767387970), PointFromId(1640068164)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1640068164), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1640068164), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1640068164), PointFromId(1615456478)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1615456478), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1615456478), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1615456478), PointFromId(2142596601)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(2142596601), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(2142596601), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(2142596601), PointFromId(66309402)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(66309402), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(66309402), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(66309402), PointFromId(1368070158)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1368070158), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1368070158), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1368070158), PointFromId(1183819064)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1183819064), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1183819064), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1183819064), PointFromId(270314371)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                    }
                    else {
                        gv_alliedMothershipAttackTarget = UnitFromId(1373010979);
                        AIAttackWaveSetTargetPoint(gv_pLAYER_05_PURIFIER, PointFromId(1985565214));
                        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(1985565214), ColorWithAlpha(9.02, 100.00, 100.00, 0.00), 0.0);
                        gv_alliedMothershipTargetPing = PingLastCreated();
                        PingSetTooltip(gv_alliedMothershipTargetPing, StringExternal(&quot;Param/Value/B8B598E4&quot;));
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingCampaignTarget&quot;, PointFromId(1985565214), lv_zzPingColor, lv_zzPingTime, 270.0);
                        AIAttackWaveAddWaypoint(5, PointFromId(75251320), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(75251320), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(75251320), PointFromId(1767387970)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1767387970), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1767387970), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1767387970), PointFromId(1640068164)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1640068164), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1640068164), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1640068164), PointFromId(1540955221)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1540955221), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1540955221), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1540955221), PointFromId(420792207)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(420792207), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(420792207), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(420792207), PointFromId(2106705012)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(2106705012), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(2106705012), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(2106705012), PointFromId(978646041)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(978646041), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(978646041), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(978646041), PointFromId(1229194461)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                        AIAttackWaveAddWaypoint(5, PointFromId(1229194461), false);
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_zzPingStyle, PointFromId(1229194461), lv_zzPingColor, lv_zzPingTime, AngleBetweenPoints(PointFromId(1229194461), PointFromId(1985565214)));
                        PingSetScale(PingLastCreated(), lv_zzPingScale);
                    }
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AlliedMothershipEstablishAttackPlan_Init () {
                gt_AlliedMothershipEstablishAttackPlan = TriggerCreate(&quot;gt_AlliedMothershipEstablishAttackPlan_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Allied Mothership Pullout
            //--------------------------------------------------------------------------------------------------
            bool gt_AlliedMothershipPullout_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(gv_alliedMothership) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                libNtve_gf_PauseUnit(gv_alliedMothership, true);
                libNtve_gf_MakeUnitInvulnerable(gv_alliedMothership, true);
                TriggerExecute(gt_AlliedMothershipWarpout, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AlliedMothershipPullout_Init () {
                gt_AlliedMothershipPullout = TriggerCreate(&quot;gt_AlliedMothershipPullout_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Allied Mothership Death
            //--------------------------------------------------------------------------------------------------
            bool gt_AlliedMothershipDeath_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                gv_mothershipHypercharging = true;
                libCOMI_gf_SetProgressBarColor(Color(84.31, 21.57, 100.00));
                libNtve_gf_PauseUnit(gv_alliedMothership, true);
                libNtve_gf_MakeUnitInvulnerable(gv_alliedMothership, true);
                TriggerExecute(gt_AlliedMothershipWarpout, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AlliedMothershipDeath_Init () {
                gt_AlliedMothershipDeath = TriggerCreate(&quot;gt_AlliedMothershipDeath_Func&quot;);
                TriggerAddEventUnitDamaged(gt_AlliedMothershipDeath, UnitRefFromVariable(&quot;gv_alliedMothership&quot;), c_unitDamageTypeAny, c_unitDamageFatal, null);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Allied Mothership Warpout
            //--------------------------------------------------------------------------------------------------
            bool gt_AlliedMothershipWarpout_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                UnitRemove(gv_alliedMothership);
                gv_alliedMothership = null;
                libCOMI_gf_DestroyPingCoop(gv_alliedMothershipPing);
                libCOMI_gf_DestroyPingCoop(gv_alliedMothershipTargetPing);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AlliedMothershipWarpout_Init () {
                gt_AlliedMothershipWarpout = TriggerCreate(&quot;gt_AlliedMothershipWarpout_Func&quot;);
                TriggerAddEventUnitDied(gt_AlliedMothershipWarpout, UnitRefFromVariable(&quot;gv_alliedMothershipAttackTarget&quot;));
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Motherboard
            //--------------------------------------------------------------------------------------------------
            bool gt_Motherboard_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                gv_mothershipHypercharging = false;
                libCOMI_gf_DisplayProgressBar(StringExternal(&quot;Param/Value/E562ADD1&quot;), 0, 100);
                libCOMI_gf_SetProgressBarColor(Color(99.61, 72.94, 1.96));
                gv_mothershipProgress = 0.0;
                while ((gv_mothershipProgress &lt; 100.0)) {
                    if ((gv_mothershipHypercharging != true)) {
                        gv_mothershipProgress = (gv_mothershipProgress + (100.0 / gv_mothershipTime));
                    }
                    else {
                        gv_mothershipProgress = (gv_mothershipProgress + (200.0 / gv_mothershipTime));
                    }
                    libCOMI_gf_SetProgressBarProgress(FixedToInt(gv_mothershipProgress));
                    if ((gv_mothershipProgress &lt; 100.0)) {
                        if ((gv_mothershipHypercharging != true)) {
                            libCOMI_gf_SetProgressBarLabel((StringExternal(&quot;Param/Value/31683406&quot;) + (FixedToTextAdvanced(gv_mothershipProgress, c_formatNumberStyleNormal, true, 2, 2) + StringExternal(&quot;Param/Value/987BBE20&quot;))));
                        }
                        else {
                            libCOMI_gf_SetProgressBarLabel((StringExternal(&quot;Param/Value/C4ADC34C&quot;) + (FixedToTextAdvanced(gv_mothershipProgress, c_formatNumberStyleNormal, true, 2, 2) + StringExternal(&quot;Param/Value/115A0B09&quot;))));
                        }
                    }
                    else {
                        if ((gv_mothershipHypercharging != true)) {
                            libCOMI_gf_SetProgressBarLabel(StringExternal(&quot;Param/Value/298243A7&quot;));
                        }
                        else {
                            libCOMI_gf_SetProgressBarLabel(StringExternal(&quot;Param/Value/EDB919FC&quot;));
                        }
                    }
                    Wait(1.0, c_timeGame);
                }
                if ((gv_mothershipHypercharging != true)) {
                    TriggerExecute(gt_AlliedMothershipPullout, true, false);
                }
            
                TriggerExecute(gt_EnemyMothershipSpawn, true, false);
                libCOMI_gf_SetProgressBarLabel(StringExternal(&quot;Param/Value/E8877BB9&quot;));
                libCOMI_gf_SetProgressBarColor(Color(100.00, 0.00, 0.00));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Motherboard_Init () {
                gt_Motherboard = TriggerCreate(&quot;gt_Motherboard_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Check for Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_CheckforVictory_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                if (((UnitIsAlive(UnitFromId(302126093)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(1143849731)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(1300213235)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(1373010979)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(1877264606)) != true))) {
                    gv_panCameraToThisUnit = EventUnit();
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_VictoryPrimaryObjectiveComplete, true, false);
                }
                else {
                    gv_enemyCoreCount = (gv_enemyCoreCount - 1);
                    TriggerExecute(gt_ObjectiveDestroyEnemyCoresUPDATE, true, false);
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_CheckforVictory_Init () {
                gt_CheckforVictory = TriggerCreate(&quot;gt_CheckforVictory_Func&quot;);
                TriggerAddEventUnitDied(gt_CheckforVictory, UnitRefFromUnit(UnitFromId(302126093)));
                TriggerAddEventUnitDied(gt_CheckforVictory, UnitRefFromUnit(UnitFromId(1143849731)));
                TriggerAddEventUnitDied(gt_CheckforVictory, UnitRefFromUnit(UnitFromId(1300213235)));
                TriggerAddEventUnitDied(gt_CheckforVictory, UnitRefFromUnit(UnitFromId(1373010979)));
                TriggerAddEventUnitDied(gt_CheckforVictory, UnitRefFromUnit(UnitFromId(1877264606)));
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: [Internalized] Victory Sequence
            //--------------------------------------------------------------------------------------------------
            bool gt_InternalizedVictorySequence_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
                Wait(2.0, c_timeReal);
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresCOMPLETE, true, false);
                TriggerExecute(gt_ObjectiveProtectAllyCoreCOMPLETE, true, false);
                libCOMI_gf_RunMissionVictorySequence(gt_InternalizedVictoryFanfareQ);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_InternalizedVictorySequence_Init () {
                gt_InternalizedVictorySequence = TriggerCreate(&quot;gt_InternalizedVictorySequence_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: [Internalized] Victory Fanfare Q
            //--------------------------------------------------------------------------------------------------
            bool gt_InternalizedVictoryFanfareQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TransmissionClearAll();
                TriggerQueueEnter();
                libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
                libCOMI_gf_SendMissionTransmission(&quot;PrimaryObjectiveVictory&quot;, false, -1);
                UnitPauseAll(true);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_panCameraToThisUnit), 2.0, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, UnitGetPosition(gv_panCameraToThisUnit), 2.0, -1, 10.0, false);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/0E66FCBA&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal(&quot;Param/Value/FC0F6597&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                libCOMI_gf_WaitForMissionTransmission();
                Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Victory, true, false);
                TriggerQueueExit();
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_InternalizedVictoryFanfareQ_Init () {
                gt_InternalizedVictoryFanfareQ = TriggerCreate(&quot;gt_InternalizedVictoryFanfareQ_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory Primary Objective Complete
            //--------------------------------------------------------------------------------------------------
            bool gt_VictoryPrimaryObjectiveComplete_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_InternalizedVictorySequence, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_VictoryPrimaryObjectiveComplete_Init () {
                gt_VictoryPrimaryObjectiveComplete = TriggerCreate(&quot;gt_VictoryPrimaryObjectiveComplete_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Victory
            //--------------------------------------------------------------------------------------------------
            bool gt_Victory_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverVictory);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Victory_Init () {
                gt_Victory = TriggerCreate(&quot;gt_Victory_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Check for Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_CheckforDefeat_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                if (((UnitIsAlive(UnitFromId(1264819420)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(533281368)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(2037375007)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(1382400492)) != true) &amp;&amp; (UnitIsAlive(UnitFromId(930328570)) != true))) {
                    gv_panCameraToThisUnit = EventUnit();
                    TriggerEnable(TriggerGetCurrent(), false);
                    TriggerExecute(gt_DefeatPrimaryObjectiveFailed, true, false);
                }
                else {
                    gv_allyCoreCount = (gv_allyCoreCount - 1);
                    TriggerExecute(gt_ObjectiveProtectAllyCoreUPDATE, true, false);
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_CheckforDefeat_Init () {
                gt_CheckforDefeat = TriggerCreate(&quot;gt_CheckforDefeat_Func&quot;);
                TriggerAddEventUnitDied(gt_CheckforDefeat, UnitRefFromUnit(UnitFromId(533281368)));
                TriggerAddEventUnitDied(gt_CheckforDefeat, UnitRefFromUnit(UnitFromId(2037375007)));
                TriggerAddEventUnitDied(gt_CheckforDefeat, UnitRefFromUnit(UnitFromId(1382400492)));
                TriggerAddEventUnitDied(gt_CheckforDefeat, UnitRefFromUnit(UnitFromId(930328570)));
                TriggerAddEventUnitDied(gt_CheckforDefeat, UnitRefFromUnit(UnitFromId(1264819420)));
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Base Dead
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
                // Variable Declarations
                point lv_cameraTarget;
            
                // Variable Initialization
            
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
            
                    if (!(((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true) || (libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_02_USER, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true)))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresFAIL, true, false);
                if ((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 &lt;&lt; c_targetFilterPreventDefeat), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1)) == true)) {
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/5F58A8EB&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/8C4A8191&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    lv_cameraTarget = PlayerStartLocation(gv_pLAYER_01_USER);
                }
                else {
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_02_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/20696698&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(gv_pLAYER_01_USER), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/329756F1&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                    lv_cameraTarget = PlayerStartLocation(gv_pLAYER_02_USER);
                }
                Wait(2.0, c_timeReal);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                }
                UnitGroupLoopEnd();
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_01_USER)) == false)) {
                    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                    CameraPan(gv_pLAYER_01_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
                }
            
                if ((RegionContainsPoint(RegionCircle(lv_cameraTarget, 8.0), CameraGetTarget(gv_pLAYER_02_USER)) == false)) {
                    CameraApplyInfo(gv_pLAYER_02_USER, CameraInfoDefault(), 2.0, -1, 10.0, false);
                    CameraPan(gv_pLAYER_02_USER, lv_cameraTarget, 2.0, -1, 10.0, false);
                }
            
                Wait(4.0, c_timeReal);
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatBaseDead_Init () {
                gt_DefeatBaseDead = TriggerCreate(&quot;gt_DefeatBaseDead_Func&quot;);
                TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat Primary Objective Failed
            //--------------------------------------------------------------------------------------------------
            bool gt_DefeatPrimaryObjectiveFailed_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
            
                    if (!((libCOMI_gf_GameIsOver() == false))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Defeat);
                TransmissionClearAll();
                TriggerQueuePause(true);
                TriggerQueueClear(c_triggerQueueRemove);
                libCOMI_gf_SendMissionTransmission(&quot;DestroyedReminder&quot;, false, -1);
                libCOMI_gf_CinematicModeCampaign(true, 1.5, true);
                TriggerExecute(gt_ObjectiveProtectAllyCoreFAIL, true, false);
                TriggerExecute(gt_ObjectiveDestroyEnemyCoresFAIL, true, false);
                libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal(&quot;Param/Value/E5BEE280&quot;), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
                CameraLockInput(gv_pLAYER_01_USER, true);
                CameraLockInput(gv_pLAYER_02_USER, true);
                UnitClearSelection(gv_pLAYER_01_USER);
                UnitClearSelection(gv_pLAYER_02_USER);
                UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
                CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_panCameraToThisUnit), 1.5, -1, 10.0, false);
                CameraPan(gv_pLAYER_02_USER, UnitGetPosition(gv_panCameraToThisUnit), 1.5, -1, 10.0, false);
                libCOMI_gf_WaitForMissionTransmission();
                UISetCursorVisible(PlayerGroupAll(), true);
                TriggerExecute(gt_Defeat, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_DefeatPrimaryObjectiveFailed_Init () {
                gt_DefeatPrimaryObjectiveFailed = TriggerCreate(&quot;gt_DefeatPrimaryObjectiveFailed_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defeat
            //--------------------------------------------------------------------------------------------------
            bool gt_Defeat_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
                        return false;
                    }
                }
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_Defeat_Init () {
                gt_Defeat = TriggerCreate(&quot;gt_Defeat_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Call For Help Range Adjustment
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyCallForHelpRangeAdjustment_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                AISetDefenseRadii(6, 22.0, 22.0, 22.0);
                AISetDefenseRadii(7, 22.0, 22.0, 22.0);
                AISetDefenseRadii(8, 22.0, 22.0, 22.0);
                AISetDefenseRadii(9, 22.0, 22.0, 22.0);
                AISetDefenseRadii(10, 22.0, 22.0, 22.0);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyCallForHelpRangeAdjustment_Init () {
                gt_EnemyCallForHelpRangeAdjustment = TriggerCreate(&quot;gt_EnemyCallForHelpRangeAdjustment_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemies Upgrade
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemiesUpgrade_Func (bool testConds, bool runActions) {
                playergroup autoF7763D9F_g;
                int autoF7763D9F_p;
                playergroup auto9B7CC84C_g;
                int auto9B7CC84C_p;
                playergroup auto41634633_g;
                int auto41634633_p;
                playergroup auto48BACD81_g;
                int auto48BACD81_p;
            
                // Variable Declarations
                int lv_iterplayer;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                if ((gv_enemyUpgradeLevel == 0)) {
                    autoF7763D9F_g = gv_enemyGroup; 
                    autoF7763D9F_p = 1;
                    for ( ; autoF7763D9F_p &lt;= PlayerGroupCount(autoF7763D9F_g) ; autoF7763D9F_p += BoolToInt(lv_iterplayer == PlayerGroupPlayer(autoF7763D9F_g, autoF7763D9F_p)) ) {
                        lv_iterplayer = PlayerGroupPlayer(autoF7763D9F_g, autoF7763D9F_p);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;DarkProtoss&quot;, 1);
                        TriggerExecute(gt_TempestReplacements, true, false);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;BlinkTech&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;Charge&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ExtendedThermalLance&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;CarrierLaunchSpeedUpgrade&quot;, 1);
                    }
                }
            
                if ((gv_enemyUpgradeLevel == 1)) {
                    auto9B7CC84C_g = gv_enemyGroup; 
                    auto9B7CC84C_p = 1;
                    for ( ; auto9B7CC84C_p &lt;= PlayerGroupCount(auto9B7CC84C_g) ; auto9B7CC84C_p += BoolToInt(lv_iterplayer == PlayerGroupPlayer(auto9B7CC84C_g, auto9B7CC84C_p)) ) {
                        lv_iterplayer = PlayerGroupPlayer(auto9B7CC84C_g, auto9B7CC84C_p);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;HiddenProtossAirArmorsLevel1&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossGroundArmorsLevel1&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossShieldsLevel1&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;HiddenProtossAirWeaponsLevel1&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossGroundWeaponsLevel1&quot;, 1);
                    }
                }
            
                if ((gv_enemyUpgradeLevel == 2)) {
                    auto41634633_g = gv_enemyGroup; 
                    auto41634633_p = 1;
                    for ( ; auto41634633_p &lt;= PlayerGroupCount(auto41634633_g) ; auto41634633_p += BoolToInt(lv_iterplayer == PlayerGroupPlayer(auto41634633_g, auto41634633_p)) ) {
                        lv_iterplayer = PlayerGroupPlayer(auto41634633_g, auto41634633_p);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;HiddenProtossAirArmorsLevel2&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossGroundArmorsLevel2&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossShieldsLevel2&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossAirWeaponsLevel2&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossGroundWeaponsLevel2&quot;, 1);
                    }
                }
            
                if ((gv_enemyUpgradeLevel == 3)) {
                    auto48BACD81_g = gv_enemyGroup; 
                    auto48BACD81_p = 1;
                    for ( ; auto48BACD81_p &lt;= PlayerGroupCount(auto48BACD81_g) ; auto48BACD81_p += BoolToInt(lv_iterplayer == PlayerGroupPlayer(auto48BACD81_g, auto48BACD81_p)) ) {
                        lv_iterplayer = PlayerGroupPlayer(auto48BACD81_g, auto48BACD81_p);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossAirArmorsLevel3&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossGroundArmorsLevel3&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossShieldsLevel3&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossAirWeaponsLevel3&quot;, 1);
                        TechTreeUpgradeAddLevel(lv_iterplayer, &quot;ProtossGroundWeaponsLevel3&quot;, 1);
                    }
                }
            
                if ((gv_enemyUpgradeLevel != 3)) {
                    TimerStart(gv_enemyUpgradeTimer, 300.0, false, c_timeGame);
                    gv_enemyUpgradeLevel = (gv_enemyUpgradeLevel + 1);
                }
            
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemiesUpgrade_Init () {
                gt_EnemiesUpgrade = TriggerCreate(&quot;gt_EnemiesUpgrade_Func&quot;);
                TriggerAddEventTimer(gt_EnemiesUpgrade, gv_enemyUpgradeTimer);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tempest Replacements
            //--------------------------------------------------------------------------------------------------
            bool gt_TempestReplacements_Func (bool testConds, bool runActions) {
                playergroup auto995B18CE_g;
                int auto995B18CE_p;
            
                // Variable Declarations
                int lv_iterplayer;
            
                // Variable Initialization
            
                // Actions
                if (!runActions) {
                    return true;
                }
            
                auto995B18CE_g = gv_enemyGroup; 
                auto995B18CE_p = 1;
                for ( ; auto995B18CE_p &lt;= PlayerGroupCount(auto995B18CE_g) ; auto995B18CE_p += BoolToInt(lv_iterplayer == PlayerGroupPlayer(auto995B18CE_g, auto995B18CE_p)) ) {
                    lv_iterplayer = PlayerGroupPlayer(auto995B18CE_g, auto995B18CE_p);
                    UnitGroupLoopBegin(UnitGroupIdle(lv_iterplayer, false));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;Tempest&quot;)) {
                            UnitKill(UnitGroupLoopCurrent());
                        }
            
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_TempestReplacements_Init () {
                gt_TempestReplacements = TriggerCreate(&quot;gt_TempestReplacements_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Stop Rebuild
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyStopRebuild_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                AIClearAllBullies(UnitGetOwner(EventUnit()));
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyStopRebuild_Init () {
                gt_EnemyStopRebuild = TriggerCreate(&quot;gt_EnemyStopRebuild_Func&quot;);
                TriggerAddEventUnitDied(gt_EnemyStopRebuild, UnitRefFromUnit(UnitFromId(302126093)));
                TriggerAddEventUnitDied(gt_EnemyStopRebuild, UnitRefFromUnit(UnitFromId(1300213235)));
                TriggerAddEventUnitDied(gt_EnemyStopRebuild, UnitRefFromUnit(UnitFromId(1373010979)));
                TriggerAddEventUnitDied(gt_EnemyStopRebuild, UnitRefFromUnit(UnitFromId(1877264606)));
                TriggerAddEventUnitDied(gt_EnemyStopRebuild, UnitRefFromUnit(UnitFromId(1143849731)));
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Allied Mothership &amp; Hypercharge Q
            //--------------------------------------------------------------------------------------------------
            bool gt_AlliedMothershipHyperchargeQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_AlliedMothershipHyperchargeHINTADD, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AlliedMothershipHyperchargeQ_Init () {
                gt_AlliedMothershipHyperchargeQ = TriggerCreate(&quot;gt_AlliedMothershipHyperchargeQ_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Allied Mothership &amp; Hypercharge HINT ADD
            //--------------------------------------------------------------------------------------------------
            bool gt_AlliedMothershipHyperchargeHINTADD_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/CC1DF73A&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/DC7C9DF2&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-unit-protoss-mothership.dds&quot;);
                Wait(5.0, c_timeGame);
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/96EC59C1&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/8A1E5DA7&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-upgrade-protoss-structureovercharge.dds&quot;);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_AlliedMothershipHyperchargeHINTADD_Init () {
                gt_AlliedMothershipHyperchargeHINTADD = TriggerCreate(&quot;gt_AlliedMothershipHyperchargeHINTADD_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_EnemyMothershipHINTADD, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipQ_Init () {
                gt_EnemyMothershipQ = TriggerCreate(&quot;gt_EnemyMothershipQ_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership HINT ADD
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipHINTADD_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/8DD481E2&quot;), libNtve_ge_TipType_MissionStrategy), StringExternal(&quot;Param/Value/53CB567E&quot;), StringExternal(&quot;Param/Value/91698089&quot;), &quot;Assets\\Textures\\btn-unit-protoss-mothership.dds&quot;);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipHINTADD_Init () {
                gt_EnemyMothershipHINTADD = TriggerCreate(&quot;gt_EnemyMothershipHINTADD_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Getting Stronger Q
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipGettingStrongerQ_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerExecute(gt_EnemyMothershipGettingStrongerHINTADD, true, false);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipGettingStrongerQ_Init () {
                gt_EnemyMothershipGettingStrongerQ = TriggerCreate(&quot;gt_EnemyMothershipGettingStrongerQ_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Mothership Getting Stronger HINT ADD
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyMothershipGettingStrongerHINTADD_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
            
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/1063C23E&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/EDD4F9A8&quot;), StringToText(&quot;&quot;), &quot;Assets\\Textures\\btn-ability-protoss-voidstasis.dds&quot;);
                return true;
            }
            
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyMothershipGettingStrongerHINTADD_Init () {
                gt_EnemyMothershipGettingStrongerHINTADD = TriggerCreate(&quot;gt_EnemyMothershipGettingStrongerHINTADD_Func&quot;);
            }
            
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void InitTriggers () {
                gt_Init01LoadData_Init();
                gt_Init02Players_Init();
                gt_Init03LoadingComplete_Init();
                gt_Init04Technology_Init();
                gt_Init05Units_Init();
                gt_Init06MusicSound_Init();
                gt_Init07Environment_Init();
                gt_Init08SpecificToMap_Init();
                gt_DebugCantFail_Init();
                gt_ObjectiveProtectAllyCoreCREATE_Init();
                gt_ObjectiveProtectAllyCoreCOMPLETE_Init();
                gt_ObjectiveProtectAllyCoreUPDATE_Init();
                gt_ObjectiveProtectAllyCoreFAIL_Init();
                gt_ObjectiveDestroyEnemyCoresCREATE_Init();
                gt_ObjectiveDestroyEnemyCoresCOMPLETE_Init();
                gt_ObjectiveDestroyEnemyCoresUPDATE_Init();
                gt_ObjectiveDestroyEnemyCoresFAIL_Init();
                gt_StartGameQ_Init();
                gt_EnemyAttackingQ_Init();
                gt_MothershipStartAI_Init();
                gt_EnemyMothershipSpawn_Init();
                gt_EnemyMothershipPickaSpawnPoint_Init();
                gt_EnemyMothershipWaveStrengthGauge_Init();
                gt_EnemyMothershipEstablishAttackPlan_Init();
                gt_EnemyMothershipIsCoreAalive_Init();
                gt_EnemyMothershipIsCoreBalive_Init();
                gt_EnemyMothershipIsCoreCalive_Init();
                gt_EnemyMothershipIsCoreDalive_Init();
                gt_EnemyMothershipIsCoreEalive_Init();
                gt_EnemyMothershipDeath_Init();
                gt_AlliedMothershipSpawn_Init();
                gt_SFXPortalTime_Init();
                gt_AlliedMothershipEstablishAttackPlan_Init();
                gt_AlliedMothershipPullout_Init();
                gt_AlliedMothershipDeath_Init();
                gt_AlliedMothershipWarpout_Init();
                gt_Motherboard_Init();
                gt_CheckforVictory_Init();
                gt_InternalizedVictorySequence_Init();
                gt_InternalizedVictoryFanfareQ_Init();
                gt_VictoryPrimaryObjectiveComplete_Init();
                gt_Victory_Init();
                gt_CheckforDefeat_Init();
                gt_DefeatBaseDead_Init();
                gt_DefeatPrimaryObjectiveFailed_Init();
                gt_Defeat_Init();
                gt_EnemyCallForHelpRangeAdjustment_Init();
                gt_EnemiesUpgrade_Init();
                gt_TempestReplacements_Init();
                gt_EnemyStopRebuild_Init();
                gt_AlliedMothershipHyperchargeQ_Init();
                gt_AlliedMothershipHyperchargeHINTADD_Init();
                gt_EnemyMothershipQ_Init();
                gt_EnemyMothershipHINTADD_Init();
                gt_EnemyMothershipGettingStrongerQ_Init();
                gt_EnemyMothershipGettingStrongerHINTADD_Init();
            }
            
            //--------------------------------------------------------------------------------------------------
            // Map Initialization
            //--------------------------------------------------------------------------------------------------
            void run () {
                InitLibs();
                InitGlobals();
                InitTriggers();
            }
        </ScriptCode>
        <InitFunc>run</InitFunc>
    </Element>
</TriggerData>