//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [ARC] Immortal Siege
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "libARRA"
include "LibCOMI"
include "aiF917F4D7"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libARRA_InitLib();
    libCOMI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_03_ENEMY = 6;
const int gv_pLAYER_04_ENEMY = 7;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
point gv_victoryCompletePan;
point gv_attackWaveA_Wave05Path;
region[3][11] gv_attackSpawn;
int gv_queue;
int gv_pos;
int gv_bonusObjective;
int gv_bonusObjectivePing;
unit[5] gv_bonusObjectiveUnits;
int gv_bonusCount;
int gv_templeCount;
bool gv_activeTemple;
unit gv_currentTemple;
int gv_templePing;
int gv_templeObjective;
unit gv_torrasqueCavern;
int gv_torrasqueCavernObj;
int gv_defendWallObjective;
unit gv_wall;
fixed gv_period;
int gv_pLAYER_01_USER;
int gv_pLAYER_02_USER;
playergroup gv_enemyGroup;

void InitGlobals () {
    gv_bonusObjective = c_invalidObjectiveId;
    gv_bonusObjectivePing = c_invalidPingId;
    gv_activeTemple = true;
    gv_templePing = c_invalidPingId;
    gv_templeObjective = c_invalidObjectiveId;
    gv_torrasqueCavern = UnitFromId(1007016343);
    gv_torrasqueCavernObj = c_invalidObjectiveId;
    gv_defendWallObjective = c_invalidObjectiveId;
    gv_wall = UnitFromId(1645537529);
    gv_period = 100.0;
    gv_pLAYER_01_USER = 1;
    gv_pLAYER_02_USER = 2;
    gv_enemyGroup = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time);
point gf_AttackWaveSpawn ();
actor gf_CreateBeamBetweenActors (string lp_model, actor lp_launchActor, string lp_launchAttachPoint, actor lp_impactActor, string lp_impactAttachPoint);
void gf_TransmissionSend (text lp_message1, text lp_message2, text lp_message3, text lp_message4, text lp_message5, text lp_message6, int lp_messageCount, fixed lp_wait, soundlink lp_sound);
void gf_TempleDestroyedTorrasqueAlter ();
void gf_TempleActivatedTorrasqueAlter ();
void gf_NewTempleActivated (unit lp_temple, fixed lp_health);
fixed gf_PeriodAction ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_VictorySequence;
trigger gt_Defeat;
trigger gt_SetupAttackWaveSpawn;
trigger gt_AIAttackWaves;
trigger gt_AttackWave01;
trigger gt_AttackWave02;
trigger gt_AttackWave03;
trigger gt_AttackWave04;
trigger gt_AttackWave05;
trigger gt_AttackWave06;
trigger gt_AttackWave07;
trigger gt_AttackWave08;
trigger gt_EnemyAttackingQ;
trigger gt_CheckforLostPings;
trigger gt_TransmissionBonusObjectiveStart;
trigger gt_TransmissionBonusObjectiveComplete;
trigger gt_TransmissionGateUnderAttack;
trigger gt_TransmissionTorrasqueSpawn;
trigger gt_TransmissionTorrasqueSlain;
trigger gt_Transmission1stTorrasqueRecovers;
trigger gt_TransmissionTemple1Destroyed;
trigger gt_TransmissionTemple2Activated;
trigger gt_TransmissionTemple2Destroyed;
trigger gt_TransmissionTemple3Activated;
trigger gt_TransmissionTemple3Destroyed;
trigger gt_TransmissionTemple4Activated;
trigger gt_TransmissionTemple4Destroyed;
trigger gt_TransmissionVictory;
trigger gt_TransmissionDefeat;
trigger gt_BonusObjectiveStart;
trigger gt_BonusObjectiveStart2;
trigger gt_EvolutionaryPitDies;
trigger gt_GateDamaged;
trigger gt_TempleHPThresholdSpawns;
trigger gt_TemplesSet;
trigger gt_GateDestroyed;
trigger gt_PeriodPingUpdate;
trigger gt_TorrasqueDies;
trigger gt_TransmissionfromkillingTorrasque;
trigger gt_TorrasqueMorphsEgg;
trigger gt_ReviveTorrasque;
trigger gt_Startspawning;
trigger gt_Startspawning2;
trigger gt_SpawnTorrasques;
trigger gt_IdleTorrasque;
trigger gt_FirstRevival;
trigger gt_Init01LoadData;
trigger gt_Init03LoadingComplete;
trigger gt_MapInitialization;
trigger gt_StartAI;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiF917F4D7") { aiF917F4D7_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { aiF917F4D7_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiF917F4D7") { return aiF917F4D7_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_RunAttackWaveatMissionTime_Trigger = null;
trigger auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
fixed auto_gf_RunAttackWaveatMissionTime_lp_time;

void gf_RunAttackWaveatMissionTime (trigger lp_attackWave, fixed lp_time) {
    auto_gf_RunAttackWaveatMissionTime_lp_attackWave = lp_attackWave;
    auto_gf_RunAttackWaveatMissionTime_lp_time = lp_time;

    if (auto_gf_RunAttackWaveatMissionTime_Trigger == null) {
        auto_gf_RunAttackWaveatMissionTime_Trigger = TriggerCreate("auto_gf_RunAttackWaveatMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_RunAttackWaveatMissionTime_Trigger, false, false);
}

bool auto_gf_RunAttackWaveatMissionTime_TriggerFunc (bool testConds, bool runActions) {
    trigger lp_attackWave = auto_gf_RunAttackWaveatMissionTime_lp_attackWave;
    fixed lp_time = auto_gf_RunAttackWaveatMissionTime_lp_time;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_attackWave, true, false);
    }

    return true;
}

point gf_AttackWaveSpawn () {
    // Variable Declarations
    int lv_mapSide;
    int lv_spawnLocationIter;

    // Automatic Variable Declarations
    const int autoF961210F_ae = 10;
    const int autoF961210F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_mapSide = RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER);
    lv_spawnLocationIter = 1;
    for ( ; ( (autoF961210F_ai >= 0 && lv_spawnLocationIter <= autoF961210F_ae) || (autoF961210F_ai < 0 && lv_spawnLocationIter >= autoF961210F_ae) ) ; lv_spawnLocationIter += autoF961210F_ai ) {
        if ((UnitGroupCount(UnitGroupAlliance(gv_pLAYER_01_USER, c_unitAllianceEnemy, gv_attackSpawn[lv_mapSide][lv_spawnLocationIter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > RandomInt(2, 5))) {
            return RegionGetCenter(gv_attackSpawn[lv_mapSide][lv_spawnLocationIter]);
        }

    }
    return RegionGetCenter(RegionFromId(9));
}

actor gf_CreateBeamBetweenActors (string lp_model, actor lp_launchActor, string lp_launchAttachPoint, actor lp_impactActor, string lp_impactAttachPoint) {
    // Automatic Variable Declarations
    // Implementation
    // Implementation
    actorscope as=ActorScopeFromActor(lp_launchActor);
    actor a=ActorCreate(as,"SiteHosted",lp_launchAttachPoint,"","");
    ActorScopeRefSet(as,"::scope.BeamLaunch",a);
    a=ActorCreate(ActorScopeFromActor(lp_impactActor),"SiteHosted",lp_impactAttachPoint,"","");
    ActorScopeRefSet(as,"::scope.BeamImpact",a);
    return ActorCreate(as,"BeamSimple",lp_model,"::scope.BeamLaunch","::scope.BeamImpact");
}

void gf_TransmissionSend (text lp_message1, text lp_message2, text lp_message3, text lp_message4, text lp_message5, text lp_message6, int lp_messageCount, fixed lp_wait, soundlink lp_sound) {
    // Variable Declarations
    text[8] lv_messages;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, lp_messageCount);

    // Implementation
    lv_messages[1] = lp_message1;
    lv_messages[2] = lp_message2;
    lv_messages[3] = lp_message3;
    lv_messages[4] = lp_message4;
    lv_messages[5] = lp_message5;
    lv_messages[6] = lp_message6;
    lv_messages[0] = lv_messages[lv_rand];
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 40.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 40.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 40.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 40.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 40.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 40.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 40.0, 0.2);
    SoundPlayForPlayer(lp_sound, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TransmissionSendForPlayerSelect(PlayerGroupAll(), TransmissionSourceFromModel("MarauderMercenaryPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "", "Talk", null, StringExternal("Param/Value/37BBF4DD"), lv_messages[0], lp_wait, c_transmissionDurationAdd, true, c_maxPlayers, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 100.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 100.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 0.2);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.2);
}

void gf_TempleDestroyedTorrasqueAlter () {
    // Automatic Variable Declarations
    unitgroup auto1F47276F_g;
    int auto1F47276F_u;
    unit auto1F47276F_var;
    unitgroup autoB7B646B8_g;
    int autoB7B646B8_u;
    unit autoB7B646B8_var;

    // Implementation
    TriggerEnable(gt_CheckforLostPings, true);
    auto1F47276F_g = UnitGroup("TorrasqueCorpse2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1F47276F_u = UnitGroupCount(auto1F47276F_g, c_unitCountAll);
    for (;; auto1F47276F_u -= 1) {
        auto1F47276F_var = UnitGroupUnitFromEnd(auto1F47276F_g, auto1F47276F_u);
        if (auto1F47276F_var == null) { break; }
        UnitBehaviorRemove(auto1F47276F_var, "Invulnerable2", 1);
        libNtve_gf_KillModel(libARRA_gf_ActorForUnit(auto1F47276F_var, 2));
        UnitSetCustomValue(auto1F47276F_var, 1, (UnitGetCustomValue(auto1F47276F_var, 1) - 1.0));
    }
    autoB7B646B8_g = UnitGroup("Torrasque", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB7B646B8_u = UnitGroupCount(autoB7B646B8_g, c_unitCountAll);
    for (;; autoB7B646B8_u -= 1) {
        autoB7B646B8_var = UnitGroupUnitFromEnd(autoB7B646B8_g, autoB7B646B8_u);
        if (autoB7B646B8_var == null) { break; }
        UnitBehaviorRemovePlayer(autoB7B646B8_var, "TorrasqueStronger", 3, 1);
        UnitSetCustomValue(autoB7B646B8_var, 1, (UnitGetCustomValue(autoB7B646B8_var, 1) - 1.0));
    }
}

void gf_TempleActivatedTorrasqueAlter () {
    // Automatic Variable Declarations
    unitgroup auto4E5DD0BE_g;
    int auto4E5DD0BE_u;
    unit auto4E5DD0BE_var;

    // Implementation
    TriggerEnable(gt_CheckforLostPings, false);
    auto4E5DD0BE_g = UnitGroup("TorrasqueCorpse2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E5DD0BE_u = UnitGroupCount(auto4E5DD0BE_g, c_unitCountAll);
    for (;; auto4E5DD0BE_u -= 1) {
        auto4E5DD0BE_var = UnitGroupUnitFromEnd(auto4E5DD0BE_g, auto4E5DD0BE_u);
        if (auto4E5DD0BE_var == null) { break; }
        UnitBehaviorAddPlayer(auto4E5DD0BE_var, "Invulnerable2", 3, 1);
        gf_CreateBeamBetweenActors("SentryAttackBeam2", libNtve_gf_MainActorofUnit(gv_currentTemple), "Ref_Overhead", libNtve_gf_MainActorofUnit(auto4E5DD0BE_var), "Ref_Center");
        libARRA_gf_StoreActorForUnit(auto4E5DD0BE_var, 2, libNtve_gf_ActorLastCreated());
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 100,255,0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.300000 0.100000");
    }
}

void gf_NewTempleActivated (unit lp_temple, fixed lp_health) {
    // Automatic Variable Declarations
    // Implementation
    gv_currentTemple = lp_temple;
    libNtve_gf_MakeUnitInvulnerable(gv_currentTemple, false);
    UnitSetPropertyFixed(gv_currentTemple, c_unitPropLifeMax, lp_health);
    UnitSetPropertyFixed(gv_currentTemple, c_unitPropLifePercent, 100.0);
    libNtve_gf_CreateActorAtPoint("TempleActivatedSign", libNtve_gf_PointFromXYZ(PointGetX(UnitGetPosition(gv_currentTemple)), PointGetY(UnitGetPosition(gv_currentTemple)), 2.8));
    libARRA_gf_StoreActorForUnit(gv_currentTemple, 2, libNtve_gf_ActorLastCreated());
    VisRevealArea(1, RegionCircle(UnitGetPosition(gv_currentTemple), 5.0), 0.1, false);
    VisRevealArea(2, RegionCircle(UnitGetPosition(gv_currentTemple), 5.0), 0.1, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_currentTemple), StringExternal("Param/Value/2D4A95AB"));
    gv_templePing = PingLastCreated();
    gv_activeTemple = true;
}

fixed gf_PeriodAction () {
    // Automatic Variable Declarations
    // Implementation
    return gv_period;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("PrimaryObjectiveVictory");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/E01B807E"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(gv_victoryCompletePan, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Attack Wave Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SetupAttackWaveSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawnLocationIter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(57);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(2);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_01_USER][lv_spawnLocationIter] = RegionFromId(9);
    lv_spawnLocationIter = 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(7);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(6);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(13);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(9);
    lv_spawnLocationIter += 1;
    gv_attackSpawn[gv_pLAYER_02_USER][lv_spawnLocationIter] = RegionFromId(13);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupAttackWaveSpawn_Init () {
    gt_SetupAttackWaveSpawn = TriggerCreate("gt_SetupAttackWaveSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Attack Waves
//--------------------------------------------------------------------------------------------------
bool gt_AIAttackWaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RunAttackWaveatMissionTime(gt_AttackWave01, (2.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave02, (5.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave03, (8.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave04, (12.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave05, (15.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave06, (19.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (22.5 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave08, (26.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (29.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave08, (33.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave07, (36.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave08, (39.0 * 60.0));
    gf_RunAttackWaveatMissionTime(gt_AttackWave08, (42.0 * 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIAttackWaves_Init () {
    gt_AIAttackWaves = TriggerCreate("gt_AIAttackWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 01
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_03_ENEMY) != 2))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 1))) {
            return false;
        }

        if (!((libCOMI_gf_DifficultyLevelForPlayerCoop(gv_pLAYER_04_ENEMY) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave01_Init () {
    gt_AttackWave01 = TriggerCreate("gt_AttackWave01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 02
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave02_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave02_Init () {
    gt_AttackWave02 = TriggerCreate("gt_AttackWave02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 03
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave03_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    playergroup auto131B6975_g;
    int auto131B6975_var;

    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    auto131B6975_g = libCOMI_gf_HumanPlayers();
    auto131B6975_var = -1;
    while (true) {
        auto131B6975_var = PlayerGroupNextPlayer(auto131B6975_g, auto131B6975_var);
        if (auto131B6975_var < 0) { break; }
        lv_numberOfStructures_ExpLeft += UnitGroupCount(UnitGroup(null, auto131B6975_var, RegionFromId(3), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_numberOfStructures_ExpRight += UnitGroupCount(UnitGroup(null, auto131B6975_var, RegionFromId(4), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    if ((((lv_numberOfStructures_ExpLeft == 0) && (lv_numberOfStructures_ExpRight == 0)) || ((lv_numberOfStructures_ExpLeft > 0) && (lv_numberOfStructures_ExpRight > 0)))) {
        if ((RandomInt(0, 100) < 50)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    else {
        if ((lv_numberOfStructures_ExpLeft > lv_numberOfStructures_ExpRight)) {
            lv_attackPathWaypoint = PointFromId(367);
        }
        else {
            lv_attackPathWaypoint = PointFromId(358);
        }
    }
    if ((lv_attackPathWaypoint == PointFromId(367))) {
        gv_attackWaveA_Wave05Path = PointFromId(358);
    }
    else {
        gv_attackWaveA_Wave05Path = PointFromId(367);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave03_Init () {
    gt_AttackWave03 = TriggerCreate("gt_AttackWave03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 04
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave04_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_attackingAI;
    int lv_defendingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, UnitGetPosition(gv_wall));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, UnitGetPosition(gv_wall));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave04_Init () {
    gt_AttackWave04 = TriggerCreate("gt_AttackWave04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 05
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave05_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;
    int lv_numberOfStructures_ExpLeft;
    int lv_numberOfStructures_ExpRight;
    point lv_attackPathWaypoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__1Early;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    lv_attackPathWaypoint = gv_attackWaveA_Wave05Path;
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(367));
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(358));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_AddAttackForceWaypoint(lv_attackPathWaypoint, false);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave05_Init () {
    gt_AttackWave05 = TriggerCreate("gt_AttackWave05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 06
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave06_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave06_Init () {
    gt_AttackWave06 = TriggerCreate("gt_AttackWave06_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 07
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave07_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, PointFromId(249));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, PointFromId(249));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave07_Init () {
    gt_AttackWave07 = TriggerCreate("gt_AttackWave07_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Wave 08
//--------------------------------------------------------------------------------------------------
bool gt_AttackWave08_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceBucket;
    int lv_techBucket;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceBucket = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    lv_techBucket = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, UnitGetPosition(gv_wall));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, UnitGetPosition(gv_wall));
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, lv_resourceBucket, lv_techBucket, gf_AttackWaveSpawn(), true);
    libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWave08_Init () {
    gt_AttackWave08 = TriggerCreate("gt_AttackWave08_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false)) {
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false))) {
            Wait(1.0, c_timeGame);
        }
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
        libCOMI_gf_SendMissionTransmission("AttackWave", true, RandomInt(gv_pLAYER_01_USER, gv_pLAYER_02_USER));
        libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
        gv_pos += 1;
    }
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyAttackingQ_Init () {
    gt_EnemyAttackingQ = TriggerCreate("gt_EnemyAttackingQ_Func");
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_03_ENEMY);
    TriggerAddEventPlayerAIWave(gt_EnemyAttackingQ, gv_pLAYER_04_ENEMY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check for Lost Pings
//--------------------------------------------------------------------------------------------------
bool gt_CheckforLostPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFB083BA5_g;
    int autoFB083BA5_u;
    unit autoFB083BA5_var;
    unitgroup autoA3391A31_g;
    int autoA3391A31_u;
    unit autoA3391A31_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFB083BA5_g = UnitGroup("TorrasqueCorpse2", c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    autoFB083BA5_u = UnitGroupCount(autoFB083BA5_g, c_unitCountAll);
    for (;; autoFB083BA5_u -= 1) {
        autoFB083BA5_var = UnitGroupUnitFromEnd(autoFB083BA5_g, autoFB083BA5_u);
        if (autoFB083BA5_var == null) { break; }
        PingDestroy(libARRA_gf_PingStoredForUnit(autoFB083BA5_var, 1));
        UnitRemove(autoFB083BA5_var);
    }
    autoA3391A31_g = UnitGroup("Torrasque", c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
    autoA3391A31_u = UnitGroupCount(autoA3391A31_g, c_unitCountAll);
    for (;; autoA3391A31_u -= 1) {
        autoA3391A31_var = UnitGroupUnitFromEnd(autoA3391A31_g, autoA3391A31_u);
        if (autoA3391A31_var == null) { break; }
        PingDestroy(libARRA_gf_PingStoredForUnit(autoA3391A31_var, 1));
        UnitRemove(autoA3391A31_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckforLostPings_Init () {
    gt_CheckforLostPings = TriggerCreate("gt_CheckforLostPings_Func");
    TriggerAddEventTimePeriodic(gt_CheckforLostPings, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Bonus Objective Start
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/068C76B7"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 11.0, SoundLink("BonusObjectiveStart", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/2DAB7311"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 11.0, SoundLink("BonusObjectiveStart", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveStart_Init () {
    gt_TransmissionBonusObjectiveStart = TriggerCreate("gt_TransmissionBonusObjectiveStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Bonus Objective Complete
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionBonusObjectiveComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/97471C41"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 6.0, SoundLink("BonusObjectiveComplete", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/875BCDB6"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 6.0, SoundLink("BonusObjectiveComplete", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionBonusObjectiveComplete_Init () {
    gt_TransmissionBonusObjectiveComplete = TriggerCreate("gt_TransmissionBonusObjectiveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Gate Under Attack
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionGateUnderAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/548B0A6C"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.4, SoundLink("GateUnderAttack", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/0AE9A9EE"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.4, SoundLink("GateUnderAttack", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionGateUnderAttack_Init () {
    gt_TransmissionGateUnderAttack = TriggerCreate("gt_TransmissionGateUnderAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Torrasque Spawn
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTorrasqueSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/52E55A94"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.0, SoundLink("TorrasqueSpawn", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/46699FF1"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.0, SoundLink("TorrasqueSpawn", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTorrasqueSpawn_Init () {
    gt_TransmissionTorrasqueSpawn = TriggerCreate("gt_TransmissionTorrasqueSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Torrasque Slain
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTorrasqueSlain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    int auto3AD4FF28_val;
    int autoE73E6967_val;

    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        auto3AD4FF28_val = lv_rand;
        if (auto3AD4FF28_val == 1) {
            gf_TransmissionSend(StringExternal("Param/Value/3AD7ACEE"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("Slain1", -1));
        }
        else if (auto3AD4FF28_val == 2) {
            gf_TransmissionSend(StringExternal("Param/Value/C3B01FF1"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("Slain12", -1));
        }
        else if (auto3AD4FF28_val == 3) {
            gf_TransmissionSend(StringExternal("Param/Value/FF1B7C49"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("Slain122", -1));
        }
        else {
        }
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        autoE73E6967_val = lv_rand;
        if (autoE73E6967_val == 1) {
            gf_TransmissionSend(StringExternal("Param/Value/9BFD76CB"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("Slain1", -1));
        }
        else if (autoE73E6967_val == 2) {
            gf_TransmissionSend(StringExternal("Param/Value/C320A612"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("Slain12", -1));
        }
        else if (autoE73E6967_val == 3) {
            gf_TransmissionSend(StringExternal("Param/Value/3A0D9F10"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("Slain122", -1));
        }
        else {
        }
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTorrasqueSlain_Init () {
    gt_TransmissionTorrasqueSlain = TriggerCreate("gt_TransmissionTorrasqueSlain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission 1st Torrasque Recovers
//--------------------------------------------------------------------------------------------------
bool gt_Transmission1stTorrasqueRecovers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/8ADF6D48"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("TorrasqueRecuperated", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/65B8122E"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 5.0, SoundLink("TorrasqueRecuperated", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmission1stTorrasqueRecovers_Init () {
    gt_Transmission1stTorrasqueRecovers = TriggerCreate("gt_Transmission1stTorrasqueRecovers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Temple 1 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemple1Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/87B02E8A"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 9.5, SoundLink("1stTempleDe", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/3589D68F"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 9.5, SoundLink("1stTempleDe", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemple1Destroyed_Init () {
    gt_TransmissionTemple1Destroyed = TriggerCreate("gt_TransmissionTemple1Destroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Temple 2 Activated
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemple2Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/08DE55AD"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.0, SoundLink("2ndTempleA", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/900974F9"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.0, SoundLink("2ndTempleA", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemple2Activated_Init () {
    gt_TransmissionTemple2Activated = TriggerCreate("gt_TransmissionTemple2Activated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Temple 2 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemple2Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/2D4F07FC"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 10.0, SoundLink("2ndTempleD", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/7E8257E0"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 10.0, SoundLink("2ndTempleD", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemple2Destroyed_Init () {
    gt_TransmissionTemple2Destroyed = TriggerCreate("gt_TransmissionTemple2Destroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Temple 3 Activated
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemple3Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/368668FA"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 6.7, SoundLink("3rdTempleA", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/0CC3E1BF"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 6.7, SoundLink("3rdTempleA", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemple3Activated_Init () {
    gt_TransmissionTemple3Activated = TriggerCreate("gt_TransmissionTemple3Activated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Temple 3 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemple3Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/11002D39"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.0, SoundLink("3rdTempleD", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/9B35447B"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.0, SoundLink("3rdTempleD", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemple3Destroyed_Init () {
    gt_TransmissionTemple3Destroyed = TriggerCreate("gt_TransmissionTemple3Destroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Temple 4 Activated
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemple4Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/F44D2D68"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 9.5, SoundLink("4thTempleA", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/A5A9B091"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 9.5, SoundLink("4thTempleA", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemple4Activated_Init () {
    gt_TransmissionTemple4Activated = TriggerCreate("gt_TransmissionTemple4Activated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission Temple 4 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionTemple4Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/F6DC1BC3"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.5, SoundLink("4thTempleD", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/10D0A434"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 7.5, SoundLink("4thTempleD", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionTemple4Destroyed_Init () {
    gt_TransmissionTemple4Destroyed = TriggerCreate("gt_TransmissionTemple4Destroyed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission  Victory
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionVictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/89394372"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 9.0, SoundLink("TorrasqueCavern", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/3E2BE12E"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 9.0, SoundLink("TorrasqueCavern", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionVictory_Init () {
    gt_TransmissionVictory = TriggerCreate("gt_TransmissionVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission  Defeat
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_position;
    bool lv_inQueue;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rand = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false)) {
        gf_TransmissionSend(StringExternal("Param/Value/E6BA1DD3"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 13.0, SoundLink("GateDestroyed", -1));
    }
    else {
        lv_inQueue = true;
        lv_position = gv_queue;
        gv_queue += 1;
        while (!((lv_position == gv_pos) && (TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_TransmissionSend(StringExternal("Param/Value/6AEB3254"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 13.0, SoundLink("GateDestroyed", -1));
        gv_pos += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionDefeat_Init () {
    gt_TransmissionDefeat = TriggerCreate("gt_TransmissionDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Start
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BonusObjectiveStart2, false);
    TriggerEnable(gt_EvolutionaryPitDies, true);
    ObjectiveCreateForPlayers(StringExternal("Param/Value/92C7404E"), StringExternal("Param/Value/94DD49F7"), c_objectiveStateActive, false, PlayerGroupAll());
    gv_bonusObjective = ObjectiveLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(UnitFromId(1062347593)), StringExternal("Param/Value/3E94F8CC"));
    gv_bonusObjectivePing = PingLastCreated();
    TriggerExecute(gt_TransmissionBonusObjectiveStart, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveStart_Init () {
    gt_BonusObjectiveStart = TriggerCreate("gt_BonusObjectiveStart_Func");
    TriggerAddEventTimeElapsed(gt_BonusObjectiveStart, 870.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bonus Objective Start 2
//--------------------------------------------------------------------------------------------------
bool gt_BonusObjectiveStart2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((TriggerIsEnabled(gt_BonusObjectiveStart) == true)) {
        TriggerExecute(gt_BonusObjectiveStart, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BonusObjectiveStart2_Init () {
    gt_BonusObjectiveStart2 = TriggerCreate("gt_BonusObjectiveStart2_Func");
    TriggerAddEventUnitRegion(gt_BonusObjectiveStart2, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evolutionary Pit Dies
//--------------------------------------------------------------------------------------------------
bool gt_EvolutionaryPitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadCount;

    // Automatic Variable Declarations
    unitgroup autoB53D38CA_g;
    int autoB53D38CA_u;
    unit autoB53D38CA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bonusCount += 1;
    ObjectiveSetName(gv_bonusObjective, (StringExternal("Param/Value/4418444D") + IntToText(gv_bonusCount) + StringExternal("Param/Value/276AE7B8")));
    if ((UnitIsAlive(gv_bonusObjectiveUnits[1]) == false) && (UnitIsAlive(gv_bonusObjectiveUnits[2]) == false) && (UnitIsAlive(gv_bonusObjectiveUnits[3]) == false) && (UnitIsAlive(gv_bonusObjectiveUnits[4]) == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TechTreeUpgradeAddLevel(3, "TorrasqueUpgrades", -5);
        autoB53D38CA_g = UnitGroup("Torrasque", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB53D38CA_u = UnitGroupCount(autoB53D38CA_g, c_unitCountAll);
        for (;; autoB53D38CA_u -= 1) {
            autoB53D38CA_var = UnitGroupUnitFromEnd(autoB53D38CA_g, autoB53D38CA_u);
            if (autoB53D38CA_var == null) { break; }
            UnitBehaviorRemovePlayer(autoB53D38CA_var, "TorrasqueStronger", 3, 2);
            UnitSetCustomValue(autoB53D38CA_var, 1, (UnitGetCustomValue(autoB53D38CA_var, 1) - 2.0));
        }
        ObjectiveSetState(gv_bonusObjective, c_objectiveStateCompleted);
        PingDestroy(gv_bonusObjectivePing);
        TriggerExecute(gt_TransmissionBonusObjectiveComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvolutionaryPitDies_Init () {
    gt_EvolutionaryPitDies = TriggerCreate("gt_EvolutionaryPitDies_Func");
    TriggerEnable(gt_EvolutionaryPitDies, false);
    TriggerAddEventUnitDied(gt_EvolutionaryPitDies, UnitRefFromVariable("gv_bonusObjectiveUnits[1]"));
    TriggerAddEventUnitDied(gt_EvolutionaryPitDies, UnitRefFromVariable("gv_bonusObjectiveUnits[2]"));
    TriggerAddEventUnitDied(gt_EvolutionaryPitDies, UnitRefFromVariable("gv_bonusObjectiveUnits[3]"));
    TriggerAddEventUnitDied(gt_EvolutionaryPitDies, UnitRefFromVariable("gv_bonusObjectiveUnits[4]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate Damaged
//--------------------------------------------------------------------------------------------------
bool gt_GateDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_wall), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
    TriggerExecute(gt_TransmissionGateUnderAttack, true, true);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GateDamaged_Init () {
    gt_GateDamaged = TriggerCreate("gt_GateDamaged_Func");
    TriggerAddEventUnitDamaged(gt_GateDamaged, UnitRefFromVariable("gv_wall"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temple HP Threshold Spawns
//--------------------------------------------------------------------------------------------------
bool gt_TempleHPThresholdSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD866C7DB_val;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGetPropertyFixed(gv_currentTemple, c_unitPropLifePercent, c_unitPropCurrent) <= 85.0))) {
        Wait(1.0, c_timeGame);
    }
    AIAttackWaveSetTargetPoint(gv_pLAYER_03_ENEMY, UnitGetPosition(gv_currentTemple));
    AIAttackWaveSetTargetPoint(gv_pLAYER_04_ENEMY, UnitGetPosition(gv_currentTemple));
    autoD866C7DB_val = gv_templeCount;
    if (autoD866C7DB_val == 0) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionGetCenter(RegionFromId(14)), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else if (autoD866C7DB_val == 1) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionGetCenter(RegionFromId(5)), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else if (autoD866C7DB_val == 2) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionFromId(5)), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else if (autoD866C7DB_val == 3) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, RegionGetCenter(RegionFromId(14)), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else if (autoD866C7DB_val == 4) {
        libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(gv_pLAYER_03_ENEMY, gv_pLAYER_04_ENEMY, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, RegionGetCenter(RegionFromId(14)), true);
        libCOMI_gf_SendAttackWaveusingCoopAttackForce(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TempleHPThresholdSpawns_Init () {
    gt_TempleHPThresholdSpawns = TriggerCreate("gt_TempleHPThresholdSpawns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temples Set
//--------------------------------------------------------------------------------------------------
bool gt_TemplesSet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_currentTemple, c_unitPropLifeMax, 3500.0);
    UnitSetPropertyFixed(gv_currentTemple, c_unitPropLifePercent, 100.0);
    while (!((UnitIsAlive(gv_currentTemple) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionTemple1Destroyed, true, false);
    gv_templeCount += 1;
    libNtve_gf_KillModel(libARRA_gf_ActorForUnit(gv_currentTemple, 2));
    gf_TempleDestroyedTorrasqueAlter();
    gv_activeTemple = false;
    PingDestroy(gv_templePing);
    ObjectiveSetName(gv_templeObjective, StringExternal("Param/Value/54992D07"));
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_TransmissionTemple2Activated, true, false);
    gf_NewTempleActivated(UnitFromId(1278401395), 10500.0);
    gf_TempleActivatedTorrasqueAlter();
    while (!((UnitIsAlive(gv_currentTemple) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionTemple2Destroyed, true, false);
    gv_templeCount += 1;
    libNtve_gf_KillModel(libARRA_gf_ActorForUnit(gv_currentTemple, 2));
    gf_TempleDestroyedTorrasqueAlter();
    PingDestroy(gv_templePing);
    gv_activeTemple = false;
    ObjectiveSetName(gv_templeObjective, StringExternal("Param/Value/3B24269B"));
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_TransmissionTemple3Activated, true, false);
    gf_NewTempleActivated(UnitFromId(107004972), 12000.0);
    gf_TempleActivatedTorrasqueAlter();
    while (!((UnitIsAlive(gv_currentTemple) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionTemple3Destroyed, true, false);
    gv_templeCount += 1;
    libNtve_gf_KillModel(libARRA_gf_ActorForUnit(gv_currentTemple, 2));
    gf_TempleDestroyedTorrasqueAlter();
    gv_activeTemple = false;
    PingDestroy(gv_templePing);
    ObjectiveSetName(gv_templeObjective, StringExternal("Param/Value/322BFEE3"));
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_TransmissionTemple4Activated, true, false);
    gf_NewTempleActivated(UnitFromId(812757864), 13500.0);
    gf_TempleActivatedTorrasqueAlter();
    while (!((UnitIsAlive(gv_currentTemple) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_TransmissionTemple4Destroyed, true, false);
    PingDestroy(gv_templePing);
    gv_templeCount += 1;
    libNtve_gf_KillModel(libARRA_gf_ActorForUnit(gv_currentTemple, 2));
    gf_TempleDestroyedTorrasqueAlter();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(UnitFromId(1007016343)), StringExternal("Param/Value/BE755F4B"));
    gv_templePing = PingLastCreated();
    ObjectiveCreateForPlayers(StringExternal("Param/Value/30C1027A"), StringExternal("Param/Value/52A7805E"), c_objectiveStateActive, true, PlayerGroupAll());
    gv_torrasqueCavernObj = ObjectiveLastCreated();
    gv_activeTemple = false;
    ObjectiveSetName(gv_templeObjective, StringExternal("Param/Value/F37E1ABC"));
    ObjectiveSetState(gv_templeObjective, c_objectiveStateCompleted);
    gv_currentTemple = gv_torrasqueCavern;
    VisRevealArea(1, RegionCircle(UnitGetPosition(gv_currentTemple), 5.0), 0.1, false);
    VisRevealArea(2, RegionCircle(UnitGetPosition(gv_currentTemple), 5.0), 0.1, false);
    UnitBehaviorRemove(UnitFromId(1007016343), "Invulnerable2", 1);
    while (!((UnitIsAlive(gv_torrasqueCavern) == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_GateDestroyed, false);
    TriggerEnable(gt_Defeat, false);
    PingDestroy(gv_templePing);
    ObjectiveSetState(gv_torrasqueCavernObj, c_objectiveStateCompleted);
    ObjectiveSetState(gv_defendWallObjective, c_objectiveStateCompleted);
    TriggerExecute(gt_TransmissionVictory, true, true);
    Wait(6.0, c_timeGame);
    GameOver(1, c_gameOverVictory, true, true);
    GameOver(2, c_gameOverVictory, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TemplesSet_Init () {
    gt_TemplesSet = TriggerCreate("gt_TemplesSet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_GateDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_TemplesSet);
    TriggerEnable(gt_TemplesSet, false);
    ObjectiveSetState(gv_defendWallObjective, c_objectiveStateFailed);
    TriggerExecute(gt_TransmissionDefeat, true, true);
    Wait(6.0, c_timeGame);
    GameOver(1, c_gameOverDefeat, true, true);
    GameOver(2, c_gameOverDefeat, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GateDestroyed_Init () {
    gt_GateDestroyed = TriggerCreate("gt_GateDestroyed_Func");
    TriggerAddEventUnitDied(gt_GateDestroyed, UnitRefFromVariable("gv_wall"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Period Ping Update
//--------------------------------------------------------------------------------------------------
bool gt_PeriodPingUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB7C69F47_g;
    int autoB7C69F47_u;
    unit autoB7C69F47_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCount("TorrasqueCorpse2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        while (!((UnitCount("TorrasqueCorpse2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            Wait(5.0, c_timeGame);
        }
        TriggerEnable(TriggerGetCurrent(), true);
    }

    autoB7C69F47_g = UnitGroup("TorrasqueCorpse2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB7C69F47_u = UnitGroupCount(autoB7C69F47_g, c_unitCountAll);
    for (;; autoB7C69F47_u -= 1) {
        autoB7C69F47_var = UnitGroupUnitFromEnd(autoB7C69F47_g, autoB7C69F47_u);
        if (autoB7C69F47_var == null) { break; }
        PingSetTooltip(libARRA_gf_PingStoredForUnit(autoB7C69F47_var, 1), (StringExternal("Param/Value/6592C131") + TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(((UnitGetPropertyFixed(autoB7C69F47_var, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(autoB7C69F47_var, c_unitPropLife, c_unitPropCurrent)) / UnitGetPropertyFixed(autoB7C69F47_var, c_unitPropLifeRegen, c_unitPropCurrent)))) + StringExternal("Param/Value/3244554D")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodPingUpdate_Init () {
    gt_PeriodPingUpdate = TriggerCreate("gt_PeriodPingUpdate_Func");
    TriggerAddEventTimePeriodic(gt_PeriodPingUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torrasque Dies
//--------------------------------------------------------------------------------------------------
bool gt_TorrasqueDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_activeTemple == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Torrasque") || (UnitGetType(EventUnit()) == "TorrasqueCorpse2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libARRA_gf_PingStoredForUnit(EventUnit(), 1));
    libNtve_gf_KillModel(libARRA_gf_ActorForUnit(EventUnit(), 2));
    if ((TriggerIsEnabled(gt_TransmissionfromkillingTorrasque) == true)) {
        TriggerExecute(gt_TransmissionfromkillingTorrasque, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TorrasqueDies_Init () {
    gt_TorrasqueDies = TriggerCreate("gt_TorrasqueDies_Func");
    TriggerAddEventUnitDied(gt_TorrasqueDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmission from killing Torrasque
//--------------------------------------------------------------------------------------------------
bool gt_TransmissionfromkillingTorrasque_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_TransmissionTorrasqueSlain, true, true);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmissionfromkillingTorrasque_Init () {
    gt_TransmissionfromkillingTorrasque = TriggerCreate("gt_TransmissionfromkillingTorrasque_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torrasque Morphs Egg
//--------------------------------------------------------------------------------------------------
bool gt_TorrasqueMorphsEgg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_activeTemple == false)) {
        UnitBehaviorRemove(EventUnit(), "Invulnerable2", 1);
    }
    else {
        gf_CreateBeamBetweenActors("SentryAttackBeam2", libNtve_gf_MainActorofUnit(gv_currentTemple), "Ref_Overhead", libNtve_gf_MainActorofUnit(EventUnit()), "Ref_Center");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 100,255,0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.300000 0.100000");
        libARRA_gf_StoreActorForUnit(EventUnit(), 2, libNtve_gf_ActorLastCreated());
    }
    Wait(0.3, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == false) && (gv_activeTemple == true)) {
        UnitRevive(EventUnit());
        PingDestroy(PingLastCreated());
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1) + 1.0));
    UnitBehaviorRemovePlayer(EventUnit(), "TorrasqueStronger", 3, 10);
    UnitSetScale(EventUnit(), 100.0, 100.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TorrasqueMorphsEgg_Init () {
    gt_TorrasqueMorphsEgg = TriggerCreate("gt_TorrasqueMorphsEgg_Func");
    TriggerAddEventUnitAbility(gt_TorrasqueMorphsEgg, null, AbilityCommand("MorphToTorrasqueCorpse", 0), c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive Torrasque
//--------------------------------------------------------------------------------------------------
bool gt_ReviveTorrasque_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(libARRA_gf_ActorForUnit(EventUnit(), 2));
    UnitBehaviorAddPlayer(EventUnit(), "TorrasqueStronger", 3, FixedToInt(UnitGetCustomValue(EventUnit(), 1)));
    UnitSetScale(EventUnit(), (100.0 + (1.0 * TechTreeUpgradeCount(3, "TorrasqueUpgrades", c_techCountQueuedOrBetter)) + (5.0 * UnitGetCustomValue(EventUnit(), 1))), (100.0 + (1.0 * TechTreeUpgradeCount(3, "TorrasqueUpgrades", c_techCountQueuedOrBetter)) + (5.0 * UnitGetCustomValue(EventUnit(), 1))), (100.0 + (1.0 * TechTreeUpgradeCount(3, "TorrasqueUpgrades", c_techCountQueuedOrBetter)) + (5.0 * UnitGetCustomValue(EventUnit(), 1))));
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_wall)), c_orderQueueReplace);
    PingSetTooltip(libARRA_gf_PingStoredForUnit(EventUnit(), 1), StringExternal("Param/Value/DD998DC6"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReviveTorrasque_Init () {
    gt_ReviveTorrasque = TriggerCreate("gt_ReviveTorrasque_Func");
    TriggerAddEventUnitAbility(gt_ReviveTorrasque, null, AbilityCommand("TorrasqueCorpseToTorrasque", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start spawning
//--------------------------------------------------------------------------------------------------
bool gt_Startspawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(1541558661), c_unitPropLifeRegen, 6.0);
    TriggerEnable(gt_SpawnTorrasques, true);
    TriggerEnable(gt_Startspawning2, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Startspawning_Init () {
    gt_Startspawning = TriggerCreate("gt_Startspawning_Func");
    TriggerAddEventTimeElapsed(gt_Startspawning, 350.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start spawning 2
//--------------------------------------------------------------------------------------------------
bool gt_Startspawning2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 4) || (libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 6) || (libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 5) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 4) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 6) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 5)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(UnitFromId(1541558661), c_unitPropLifeRegen, 6.0);
    TechTreeUpgradeAddLevel(3, "TorrasqueCorpseUpgrade", 1);
    TriggerEnable(gt_SpawnTorrasques, true);
    TriggerEnable(gt_Startspawning, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Startspawning2_Init () {
    gt_Startspawning2 = TriggerCreate("gt_Startspawning2_Func");
    TriggerAddEventTimeElapsed(gt_Startspawning2, 290.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Torrasques
//--------------------------------------------------------------------------------------------------
bool gt_SpawnTorrasques_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_torrasque;
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Ultralisk_Roar", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_TransmissionTorrasqueSpawn, true, false);
    TechTreeUpgradeAddLevel(3, "TorrasqueUpgrades", 1);
    UnitCreate(1, "Torrasque", 0, 3, UnitGetPosition(gv_torrasqueCavern), 270.0);
    lv_torrasque = UnitLastCreated();
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_torrasqueCavern), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
    UnitIssueOrder(lv_torrasque, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_wall)), c_orderQueueReplace);
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 4) || (libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 6) || (libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 5) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 4) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 6) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 5))) {
        UnitSetCustomValue(UnitLastCreated(), 1, (UnitGetCustomValue(UnitLastCreated(), 1) + 2.0));
        UnitBehaviorAddPlayer(UnitLastCreated(), "TorrasqueStronger", 3, FixedToInt(UnitGetCustomValue(UnitLastCreated(), 1)));
    }
    else {
        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 3))) {
            UnitSetCustomValue(UnitLastCreated(), 1, (UnitGetCustomValue(UnitLastCreated(), 1) + 1.0));
            UnitBehaviorAddPlayer(UnitLastCreated(), "TorrasqueStronger", 3, FixedToInt(UnitGetCustomValue(UnitLastCreated(), 1)));
        }

    }
    UnitSetScale(lv_torrasque, (100.0 + (1.0 * TechTreeUpgradeCount(3, "TorrasqueUpgrades", c_techCountQueuedOrBetter)) + (5.0 * UnitGetCustomValue(lv_torrasque, 1))), (100.0 + (1.0 * TechTreeUpgradeCount(3, "TorrasqueUpgrades", c_techCountQueuedOrBetter)) + (5.0 * UnitGetCustomValue(lv_torrasque, 1))), (100.0 + (1.0 * TechTreeUpgradeCount(3, "TorrasqueUpgrades", c_techCountQueuedOrBetter)) + (5.0 * UnitGetCustomValue(lv_torrasque, 1))));
    UnitSetPropertyFixed(lv_torrasque, c_unitPropLifePercent, 100.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(lv_torrasque), ColorWithAlpha(97.65, 23.92, 8.24, 0.00), 0.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, UnitLastCreated());
    PingSetScale(lv_ping, 0.5);
    PingSetTooltip(lv_ping, StringExternal("Param/Value/013866DD"));
    libARRA_gf_StorePingForUnit(lv_torrasque, 1, lv_ping);
    if ((gv_period > 60.0)) {
        gv_period -= 5.0;
    }

    if ((gv_period < 60.0)) {
        gv_period = 60.0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnTorrasques_Init () {
    gt_SpawnTorrasques = TriggerCreate("gt_SpawnTorrasques_Func");
    TriggerEnable(gt_SpawnTorrasques, false);
    TriggerAddEventTimePeriodic(gt_SpawnTorrasques, gf_PeriodAction(), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Idle Torrasque
//--------------------------------------------------------------------------------------------------
bool gt_IdleTorrasque_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Torrasque"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_wall)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IdleTorrasque_Init () {
    gt_IdleTorrasque = TriggerCreate("gt_IdleTorrasque_Func");
    TriggerAddEventUnitBecomesIdle(gt_IdleTorrasque, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Revival
//--------------------------------------------------------------------------------------------------
bool gt_FirstRevival_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_Transmission1stTorrasqueRecovers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstRevival_Init () {
    gt_FirstRevival = TriggerCreate("gt_FirstRevival_Func");
    TriggerAddEventUnitAbility(gt_FirstRevival, null, AbilityCommand("TorrasqueCorpseToTorrasque", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Load Data
//--------------------------------------------------------------------------------------------------
bool gt_Init01LoadData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("COOP_Placeholder", gt_Init03LoadingComplete);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01LoadData_Init () {
    gt_Init01LoadData = TriggerCreate("gt_Init01LoadData_Func");
    TriggerAddEventMapInit(gt_Init01LoadData);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Loading Complete
//--------------------------------------------------------------------------------------------------
bool gt_Init03LoadingComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pLAYER_01_USER = libCOMI_gf_GetRolePlayer(1);
    gv_pLAYER_02_USER = libCOMI_gf_GetRolePlayer(2);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_MapInitialization, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03LoadingComplete_Init () {
    gt_Init03LoadingComplete = TriggerCreate("gt_Init03LoadingComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_unitRemove;

    // Automatic Variable Declarations
    unitgroup auto6679F62D_g;
    int auto6679F62D_u;
    unit auto6679F62D_var;
    unitgroup auto86493734_g;
    int auto86493734_u;
    unit auto86493734_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-upgrade-terran-buildingarmor.dds", StringExternal("Param/Value/918BFB10"), 100, PlayerGroupAll());
    libNtve_gf_SetBossBarBoss(1, gv_wall, true);
    libNtve_gf_ShowHideBossBar(true, 1);
    libNtve_gf_MoveBossBar(1, c_anchorTopRight, 0, 150);
    auto6679F62D_g = UnitGroup("EvolutionPit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6679F62D_u = UnitGroupCount(auto6679F62D_g, c_unitCountAll);
    for (;; auto6679F62D_u -= 1) {
        auto6679F62D_var = UnitGroupUnitFromEnd(auto6679F62D_g, auto6679F62D_u);
        if (auto6679F62D_var == null) { break; }
        lv_int += 1;
        gv_bonusObjectiveUnits[lv_int] = auto6679F62D_var;
    }
    auto86493734_g = UnitGroup("TerrazineTempleNESW", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto86493734_u = UnitGroupCount(auto86493734_g, c_unitCountAll);
    for (;; auto86493734_u -= 1) {
        auto86493734_var = UnitGroupUnitFromEnd(auto86493734_g, auto86493734_u);
        if (auto86493734_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto86493734_var, true);
    }
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 4) || (libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 6) || (libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 5) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 4) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 6) || (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 5))) {
        UnitSetPropertyFixed(UnitFromId(1541558661), c_unitPropLifeRegen, 1.7);
    }
    else {
        UnitSetPropertyFixed(UnitFromId(1541558661), c_unitPropLifeRegen, 1.3888);
    }
    gv_currentTemple = UnitFromId(741869992);
    libNtve_gf_CreateActorAtPoint("TempleActivatedSign", libNtve_gf_PointFromXYZ(PointGetX(UnitGetPosition(gv_currentTemple)), PointGetY(UnitGetPosition(gv_currentTemple)), 2.8));
    libARRA_gf_StoreActorForUnit(gv_currentTemple, 2, libNtve_gf_ActorLastCreated());
    gf_CreateBeamBetweenActors("SentryAttackBeam2", libNtve_gf_MainActorofUnit(gv_currentTemple), "Ref_Overhead", libNtve_gf_MainActorofUnit(UnitFromId(1541558661)), "Ref_Center");
    libARRA_gf_StoreActorForUnit(UnitFromId(1541558661), 2, libNtve_gf_ActorLastCreated());
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 100,255,0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.300000 0.100000");
    Wait(22.0, c_timeGame);
    gf_TransmissionSend(StringExternal("Param/Value/FC46CF05"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 14.5, SoundLink("Intro1", -1));
    ObjectiveCreateForPlayers(StringExternal("Param/Value/5AC9BB18"), StringExternal("Param/Value/6AF8A3FD"), c_objectiveStateActive, true, PlayerGroupAll());
    gv_templeObjective = ObjectiveLastCreated();
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_currentTemple), 5.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(gv_currentTemple), 5.0), 0.1, false);
    libNtve_gf_MakeUnitInvulnerable(gv_currentTemple, false);
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_currentTemple), StringExternal("Param/Value/8A6264A6"));
    gv_templePing = PingLastCreated();
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Primary, UnitGetPosition(gv_wall), StringExternal("Param/Value/E9B82512"));
    ObjectiveCreateForPlayers(StringExternal("Param/Value/2215452D"), StringExternal("Param/Value/BAB5829F"), c_objectiveStateActive, true, PlayerGroupAll());
    gv_defendWallObjective = ObjectiveLastCreated();
    while (!((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false) && (TransmissionPlayerHasActiveTransmission(gv_pLAYER_02_USER) == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_TransmissionSend(StringExternal("Param/Value/F4874F5E"), StringToText(""), StringToText(""), StringToText(""), StringToText(""), StringToText(""), 1, 14.5, SoundLink("Intro12", -1));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitFromId(1541558661)), ColorWithAlpha(97.65, 23.92, 8.24, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetUnit(PingLastCreated(), UnitFromId(1541558661));
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/52D61894"));
    libARRA_gf_StorePingForUnit(UnitFromId(1541558661), 1, PingLastCreated());
    VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(UnitFromId(1541558661)), 3.0), 0.1, false);
    VisRevealArea(gv_pLAYER_02_USER, RegionCircle(UnitGetPosition(UnitFromId(1541558661)), 5.0), 0.1, false);
    TriggerExecute(gt_TemplesSet, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SetupAttackWaveSpawn, true, false);
    TriggerExecute(gt_AIAttackWaves, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_VictorySequence_Init();
    gt_Defeat_Init();
    gt_SetupAttackWaveSpawn_Init();
    gt_AIAttackWaves_Init();
    gt_AttackWave01_Init();
    gt_AttackWave02_Init();
    gt_AttackWave03_Init();
    gt_AttackWave04_Init();
    gt_AttackWave05_Init();
    gt_AttackWave06_Init();
    gt_AttackWave07_Init();
    gt_AttackWave08_Init();
    gt_EnemyAttackingQ_Init();
    gt_CheckforLostPings_Init();
    gt_TransmissionBonusObjectiveStart_Init();
    gt_TransmissionBonusObjectiveComplete_Init();
    gt_TransmissionGateUnderAttack_Init();
    gt_TransmissionTorrasqueSpawn_Init();
    gt_TransmissionTorrasqueSlain_Init();
    gt_Transmission1stTorrasqueRecovers_Init();
    gt_TransmissionTemple1Destroyed_Init();
    gt_TransmissionTemple2Activated_Init();
    gt_TransmissionTemple2Destroyed_Init();
    gt_TransmissionTemple3Activated_Init();
    gt_TransmissionTemple3Destroyed_Init();
    gt_TransmissionTemple4Activated_Init();
    gt_TransmissionTemple4Destroyed_Init();
    gt_TransmissionVictory_Init();
    gt_TransmissionDefeat_Init();
    gt_BonusObjectiveStart_Init();
    gt_BonusObjectiveStart2_Init();
    gt_EvolutionaryPitDies_Init();
    gt_GateDamaged_Init();
    gt_TempleHPThresholdSpawns_Init();
    gt_TemplesSet_Init();
    gt_GateDestroyed_Init();
    gt_PeriodPingUpdate_Init();
    gt_TorrasqueDies_Init();
    gt_TransmissionfromkillingTorrasque_Init();
    gt_TorrasqueMorphsEgg_Init();
    gt_ReviveTorrasque_Init();
    gt_Startspawning_Init();
    gt_Startspawning2_Init();
    gt_SpawnTorrasques_Init();
    gt_IdleTorrasque_Init();
    gt_FirstRevival_Init();
    gt_Init01LoadData_Init();
    gt_Init03LoadingComplete_Init();
    gt_MapInitialization_Init();
    gt_StartAI_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
